
.vsteensy/build/basicSoundRecorder_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001d70 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00010ca0 l    d  .fini	00000000 .fini
00010ca4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200022c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60014e68 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001780 l     F .text.code	00000028 flexspi2_command
600017a8 l     F .text.code	00000030 flexspi2_psram_id
60001400 l     F .text.code	00000016 memory_copy
60001416 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
000089f4 l     F .text.itcm	000000ac endpoint0_receive
00008aa0 l     F .text.itcm	00000080 schedule_transfer
00008b20 l     F .text.itcm	00000034 run_callbacks
00008b54 l     F .text.itcm	00000098 endpoint0_transmit.constprop.1
20006628 l     O .bss	00000004 endpointN_notify_mask
20008b34 l     O .bss	00000001 sof_usage
20006624 l     O .bss	00000004 endpoint0_notify_mask
20008b3b l     O .bss	00000001 usb_reboot_timer
20002440 l     O .bss	00000008 endpoint0_setupdata
20008b21 l     O .bss	00000008 reply_buffer
20008b18 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20006670 l     O .bss	00000004 s_hotTemp
20006674 l     O .bss	00000004 s_hot_ROOM
20006678 l     O .bss	00000004 s_roomC_hotC
2000666c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
20008b17 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20002448 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000244c l       .bss	00000000 object.8610
60001d60 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 filing.cpp
00001254 l     F .text.itcm	00000002 __tcf_0
00001318 l     F .text.itcm	00000024 File::dec_refcount() [clone .isra.23]
00001d60 l     F .text.itcm	000000d4 _GLOBAL__sub_I_data_buffer
20001828 l     O .data	00000004 checkDiskSpace()::isd_
20008876 l     O .bss	00000200 saveData(short)::header
20000398 l     O .data	0000001c cs
20001824 l     O .data	00000004 isd
20008ac6 l     O .bss	00000050 saveData(short)::fileName
2000358c l     O .bss	00000004 saveData(short)::dirFlag
20008a76 l     O .bss	00000050 saveData(short)::dirName
20002938 l     O .bss	00000800 dummy_buffer
00000000 l    df *ABS*	00000000 SD.cpp
00002550 l     F .text.itcm	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 acq.cpp
00000270 l     F .text.itcm	00000074 acq_isr()
20200000 l     O .bss.dma	00000800 tdm_rx_buffer
20003138 l     O .bss	00000400 acq_rx_buffer
00000000 l    df *ABS*	00000000 FsGetPartitionInfo.cpp
60001e18 l     O .text.progmem	00000010 FsGetPartitionInfo::mbdpGuid
00000000 l    df *ABS*	00000000 usb_desc.c
60001ef0 l     O .text.progmem	0000000a qualifier_descriptor
20001ded l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 main.cpp
20003588 l     O .bss	00000004 checkToCloseFile(short, unsigned long)::to
20001dd4 l     O .data	00000002 loop::status
00000000 l    df *ABS*	00000000 menu.cpp
000005f0 l     F .text.itcm	00000024 File::dec_refcount() [clone .isra.15]
00000000 l    df *ABS*	00000000 mTime.cpp
20000f42 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 adc.cpp
00000000 l    df *ABS*	00000000 utils.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00001e74 l     F .text.itcm	00000022 DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsStructs.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000d40 l     O .data	0000012c lookupTable
20000e6c l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00003db2 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatFormatter.cpp
00004700 l     F .text.itcm	00000028 initFatDirCallback(unsigned long, void*)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00005eae l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.14]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00006888 l     F .text.itcm	00000006 SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]
0000688e l     F .text.itcm	00000006 SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007070 l     F .text.itcm	0000002c sdIrs()
0000709c l     F .text.itcm	00000020 gpioMux(unsigned char)
000070bc l     F .text.itcm	00000018 isBusyCommandComplete()
000070d4 l     F .text.itcm	00000010 isBusyCommandInhibit()
000070e4 l     F .text.itcm	00000014 isBusyDat()
000070f8 l     F .text.itcm	0000000c isBusyDMA()
00007104 l     F .text.itcm	00000014 isBusyFifoRead()
00007118 l     F .text.itcm	00000014 isBusyFifoWrite()
0000712c l     F .text.itcm	00000018 isBusyTransferComplete()
00007144 l     F .text.itcm	000000a4 setSdclk(unsigned long)
0000724c l     F .text.itcm	00000024 waitTimeout(bool (*)())
00007270 l     F .text.itcm	00000040 yieldTimeout(bool (*)())
000072c0 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00007310 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00007378 l     F .text.itcm	00000020 statusCMD13()
00007398 l     F .text.itcm	00000010 isBusyCMD13()
000073ac l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00007404 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.5]
00007424 l     F .text.itcm	000000a4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007644 l     F .text.itcm	0000005c waitTransferComplete()
00007998 l     F .text.itcm	00000098 cardCMD6(unsigned long, unsigned char*)
2000884f l     O .bss	00000001 m_version2
20008852 l     O .bss	00000010 m_cid
20003540 l     O .bss	00000004 m_busyFcn
20008850 l     O .bss	00000001 m_highCapacity
20003538 l     O .bss	00000004 m_ocr
2000353c l     O .bss	00000004 m_rca
20008851 l     O .bss	00000001 m_transferActive
20003544 l     O .bss	00000004 m_irqstat
20001dec l     O .data	00000001 m_errorCode
2000884e l     O .bss	00000001 m_initDone
20008862 l     O .bss	00000010 m_csd
20008872 l     O .bss	00000001 m_dmaBusy
20002930 l     O .bss	00000004 m_sdClkKhz
20002934 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000080e4 l     F .text.itcm	0000006c rx_queue_transfer
00008150 l     F .text.itcm	000000ac rx_event
000081fc l     F .text.itcm	00000090 usb_serial_flush_callback
20008818 l     O .bss	00000010 rx_index
2000884c l     O .bss	00000002 tx_packet_size
20008b37 l     O .bss	00000001 tx_noautoflush
20008b36 l     O .bss	00000001 tx_head
200022c0 l     O .bss	00000100 rx_transfer
20008b33 l     O .bss	00000001 rx_tail
20008b2a l     O .bss	00000009 rx_list
20008828 l     O .bss	00000002 rx_packet_size
20200800 l     O .bss.dma	00001000 rx_buffer
20201800 l     O .bss.dma	00002000 txbuffer
20008808 l     O .bss	00000010 rx_count
20006668 l     O .bss	00000004 rx_available
20008b29 l     O .bss	00000001 rx_head
20008b35 l     O .bss	00000001 transmit_previous_timeout
2000884a l     O .bss	00000002 tx_available
200023c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20008875 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _lshrdi3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00009ea0 l     F .text.itcm	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000acbc l     F .text.itcm	00000034 sulp
20000c14 l     O .data	00000014 fpi.6173
20000c28 l     O .data	00000014 fpinan.6209
20000370 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000bb80 l     F .text.itcm	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
20000d30 l     O .data	00000010 zeroes.7258
20000894 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
20000870 l     O .data	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000e21c l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000f238 l     F .text.itcm	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
20000c3c l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
0001039c l     F .text.itcm	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0001056c l     F .text.itcm	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
000106f8 l     F .text.itcm	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20001390 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60015c00 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001e10 l     F .text.progmem	00000008 ___ZN5Print6printfEPKcz_veneer
00010c88 l     F .text.itcm	00000008 ___Z14set_audioClockilmb_veneer
00010c90 l     F .text.itcm	00000008 ___init_veneer
00010c98 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60001d20 l     F .text.code	00000008 __delay_veneer
60001d28 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001d30 l     F .text.code	00000008 __set_arm_clock_veneer
60001d38 l     F .text.code	00000008 __main_veneer
60001d40 l     F .text.code	00000008 __pwm_init_veneer
60001d48 l     F .text.code	00000008 ____libc_init_array_veneer
60001d50 l     F .text.code	00000008 __memset_veneer
60001d58 l     F .text.code	00000008 __sm_set_pool_veneer
00004d90  w    F .text.itcm	00000026 FatPartition::cacheSync()
0000050e  w    F .text.itcm	00000066 SDFile::getModifyTime(DateTimeFields&)
000029a0 g     F .text.itcm	000000a4 toUpcase(unsigned short)
0000152c g     F .text.itcm	00000034 pushData(unsigned long*)
00008498 g     F .text.itcm	0000000c usb_serial_available
00000dc0 g     F .text.itcm	000001c0 menu()
000102bc g     F .text.itcm	0000005e __any_on
00005afc g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600017dc g     F .text.code	00000002 startup_default_late_hook
00007920 g     F .text.itcm	00000078 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009724  w    F .text.itcm	000000d8 yield
200035c8 g     O .bss	00000004 acq_miss
20008804 g     O .bss	00000004 usb_timer1_callback
0000593c g     F .text.itcm	000001c0 FatFile::write(void const*, unsigned int)
000067f8  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00009a0a g     F .text.itcm	000000a6 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
60001e3e g     O .text.progmem	00000018 usb_string_manufacturer_name_default
600018bc g     F .text.code	00000294 configure_external_ram
000058d4 g     F .text.itcm	00000068 FatFile::truncate()
00002ba4 g     F .text.itcm	00000458 ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)
200035cc g     O .bss	0000001c clusterSize
00000f80 g     F .text.itcm	00000024 newHour()
0000133c  w    F .text.itcm	00000068 MySpiClass::deactivate()
20003548 g     O .bss	00000004 FsDateTime::callback
0000210c  w    F .text.itcm	00000080 SPIClass::dma_rxisr()
0000242e  w    F .text.itcm	00000050 SdBase<FsVolume>::restart()
000047d0 g     F .text.itcm	0000005c FatFormatter::initPbs()
00009948 g     F .text.itcm	00000020 Print::println()
00003436 g     F .text.itcm	000000ce ExFatFile::seekSet(unsigned long long)
000067dc  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
0000045a  w    F .text.itcm	0000000c File::flush()
000004a8  w    F .text.itcm	00000066 SDFile::getCreateTime(DateTimeFields&)
0000a680 g     F .text.itcm	00000002 __malloc_unlock
00006894 g     F .text.itcm	00000026 SdSpiCard::spiStart()
00000a34  w    F .text.itcm	00000088 SDFile::openNextFile(unsigned char)
20003580 g     O .bss	00000004 FsVolume::m_cwv
000053b0 g     F .text.itcm	000000a8 FatFile::open(FatFile*, char const*, int)
2000292c g     O .bss	00000004 SerNum
60001cc8 g     F .text.code	0000004c analog_init
00001304  w    F .text.itcm	00000014 MySpiClass::begin(SdSpiConfig)
0000bb60 g     F .text.itcm	00000020 _strtod_r
0000124c  w    F .text.itcm	00000008 MySpiClass::setSckSpeed(unsigned long)
0000e0cc g     F .text.itcm	0000004a _vdprintf_r
0000549a g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00001948 g     F .text.itcm	00000418 saveData(short)
200017c0 g     O .data	00000004 F_CPU_ACTUAL
00009b08 g     F .text.itcm	00000018 .hidden __aeabi_llsr
200004e8  w    O .data	0000005c vtable for SDFile
00010ac8 g     F .text.itcm	00000082 _sfread_r
0000a5b4 g     F .text.itcm	000000c6 memmove
00009edc g     F .text.itcm	00000014 __locale_ctype_ptr
00007ef0 g     F .text.itcm	00000060 SdioCard::stopTransmission(bool)
0000fa38 g     F .text.itcm	0000004c _Balloc
00010cac g       .ARM.exidx	00000000 __exidx_end
000023f4  w    F .text.itcm	0000003a SdBase<FsVolume>::cardBegin(SdSpiConfig)
00005cba g     F .text.itcm	00000046 FatPartition::freeChain(unsigned long)
20008873 g     O .bss	00000001 EventResponder::runningFromYield
00006a90 g     F .text.itcm	0000007e SdSpiCard::cardCommand(unsigned char, unsigned long)
000094f8 g     F .text.itcm	00000060 tempmonGetTemp
0000943c g     F .text.itcm	0000001e smalloc_verify_pool
000014fc  w    F .text.itcm	00000018 MySpiClass::activate()
0000991e g     F .text.itcm	00000028 Print::write(unsigned char const*, unsigned int)
00009e44 g     F .text.itcm	0000000c __errno
00000718  w    F .text.itcm	0000000a SDFile::isDirectory()
0000431c g     F .text.itcm	00000114 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00000432  w    F .text.itcm	0000000c File::write(unsigned char const*, unsigned int)
00000bc4 g     F .text.itcm	0000001c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
00006b0e  w    F .text.itcm	0000001e SdSpiCard::cardAcmd(unsigned char, unsigned long)
00000614  w    F .text.itcm	0000001c File::~File()
20003558 g     O .bss	00000004 EventResponder::firstInterrupt
000091a4 g     F .text.itcm	00000004 usb_transfer_status
0000f9bc g     F .text.itcm	00000004 __localeconv_l
0000948e g     F .text.itcm	00000066 sm_set_pool
000067fa  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
00002af6 g     F .text.itcm	0000001c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000658e g     F .text.itcm	00000062 FsBaseFile::FsBaseFile(FsBaseFile const&)
00003d44 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00000956  w    F .text.itcm	00000036 SDFile::setCreateTime(DateTimeFields const&)
000067e0  w    F .text.itcm	00000004 SdSpiCard::errorData() const
00009888  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200008a4 g     O .data	00000370 digital_pin_to_info_PGM
20008ba0 g     O .bss	00000004 errno
00006cdc g     F .text.itcm	00000038 SdSpiCard::readOCR(unsigned long*)
00003acc g     F .text.itcm	0000003e ExFatPartition::fatGet(unsigned long, unsigned long*)
0000ab2c g     F .text.itcm	00000004 __seofread
00010ca8 g       .text.itcm	00000000 _etext
0000218c g     F .text.itcm	00000010 _spi_dma_rxISR0()
0000189c g     F .text.itcm	00000078 listDisks()
200022c0 g       .bss	00000000 _sbss
0000482c g     F .text.itcm	0000005c FatFormatter::writeMbr()
000015a4 g     F .text.itcm	00000020 sdCsInit(unsigned char)
000024e4 g     F .text.itcm	0000006c SDClass::mediaPresent()
000071f4 g     F .text.itcm	0000000c SdioCard::errorData() const
000007c6  w    F .text.itcm	00000018 FsBaseFile::peek()
00007880 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001efc g       *ABS*	00000000 _stextload
0000039c g     F .text.itcm	00000090 loop
000095c0 g     F .text.itcm	00000072 flexpwm_init
00009074 g     F .text.itcm	00000058 usb_config_rx
0000320c g     F .text.itcm	0000007c ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00007d24 g     F .text.itcm	000000b8 SdioCard::readData(unsigned char*)
00006914 g     F .text.itcm	0000006c SdSpiCard::readData(unsigned char*, unsigned int)
20003554 g     O .bss	00000004 EventResponder::lastInterrupt
000065f0 g     F .text.itcm	00000028 FsBaseFile::close()
00007fb0 g     F .text.itcm	00000134 memcpy
0000f820 g     F .text.itcm	00000180 __hexnan
0000043e  w    F .text.itcm	0000000c File::available()
000013d0  w    F .text.itcm	00000014 Print::println(unsigned long)
000025b4 g     F .text.itcm	00000094 FsUtf::cpToMb(unsigned long, char*, char*)
00000b34 g     F .text.itcm	00000090 storeConfig(unsigned short*, int)
00003bb2 g     F .text.itcm	0000005e ExFatPartition::freeChain(unsigned long)
0000506a g     F .text.itcm	00000026 FatFile::peek()
0000bce0 g     F .text.itcm	00001570 _svfprintf_r
20008b16  w    O .bss	00000001 SDFile::name()::zeroterm
200087fc g     O .bss	00000004 systick_millis_count
00004274 g     F .text.itcm	000000a8 ExFatFile::rename(ExFatFile*, char const*)
000005b4  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
00009b20 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20008b39 g     O .bss	00000001 usb_configuration
0000122e  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000945a g     F .text.itcm	00000034 sm_align_pool
00007f50 g     F .text.itcm	0000001c SdioCard::syncDevice()
00007714 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000006e4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::available()
2000882a g     O .bss	00000020 store
00005090 g     F .text.itcm	0000003a FatFile::readDirCache(bool)
00010218 g     F .text.itcm	0000005c __ratio
60001e3e  w    O .text.progmem	00000018 usb_string_manufacturer_name
00009ef0 g     F .text.itcm	00000010 malloc
0000247e g     F .text.itcm	00000064 SDClass::format(int, char, Print&)
200004c4  w    O .data	00000024 vtable for FsFile
0000f9a0 g     F .text.itcm	0000001c iswspace
200002a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e4 usb_init
000067f4  w    F .text.itcm	00000004 SdSpiCard::type() const
0000085c  w    F .text.itcm	00000058 SDFile::seek(unsigned long long, int)
200035c0 g     O .bss	00000004 __malloc_top_pad
000093ec g     F .text.itcm	00000050 rtc_set
00010a8c g     F .text.itcm	0000003a __ssrefill_r
20008b8c g     O .bss	00000004 systick_safe_read
00006980 g     F .text.itcm	0000006a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00004430 g     F .text.itcm	000000be ExFatFile::truncate()
200017b8 g     O .data	00000000 .hidden __dso_handle
0000f9c0 g     F .text.itcm	0000001c _localeconv_r
20001db0 g     O .data	0000001c sd_str
000108e4 g     F .text.itcm	00000024 _strtoull_r
0000fc4c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
0000498c g     F .text.itcm	000001a8 FatFormatter::makeFat32()
60001ea5 g     O .text.progmem	0000004b usb_config_descriptor_480
00009b50 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00004db6 g     F .text.itcm	00000036 FatFile::addCluster()
0000aa64 g     F .text.itcm	00000024 _sbrk_r
00006d14 g     F .text.itcm	00000036 SdSpiCard::readRegister(unsigned char, void*)
000072f0 g     F .text.itcm	00000020 SdioCard::type() const
600017d8 g     F .text.code	00000002 startup_default_early_hook
60001426 g     F .text.code	00000222 ResetHandler
00008504 g     F .text.itcm	0000001e usb_serial_getchar
00000574  w    F .text.itcm	00000040 SDFile::name()
20008b80 g     O .bss	00000008 usb_cdc_line_coding
2000355c g     O .bss	00000004 EventResponder::lastYield
000031e6 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
00000674  w    F .text.itcm	0000001c Print::write(char const*)
0000080a  w    F .text.itcm	00000020 StreamFile<FsBaseFile, unsigned long long>::read()
00002a8c g     F .text.itcm	00000028 ExFatFormatter::syncUpcase()
00000920  w    F .text.itcm	00000036 SDFile::setModifyTime(DateTimeFields const&)
20008b90 g     O .bss	00000010 extmem_smalloc_pool
200035b8 g     O .bss	00000004 __malloc_max_sbrked_mem
00000644  w    F .text.itcm	00000018 SDFile::position()
00009558 g     F .text.itcm	00000068 pinMode
00006f6a g     F .text.itcm	00000028 SdSpiCard::writeStop()
0000d250 g     F .text.itcm	00000e7a __ssvfscanf_r
000007f2  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00000308 g     F .text.itcm	00000030 checkToCloseFile(short, unsigned long)
60015000 g     O .text.csf	00000c00 hab_csf
00006fde g     F .text.itcm	0000002c SdSpiCard::writeData(unsigned char const*)
0000044a  w    F .text.itcm	00000010 File::peek()
00005d00 g     F .text.itcm	0000005c FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00000abc  w    F .text.itcm	00000078 SDClass::open(char const*, unsigned char)
0001008c g     F .text.itcm	000000d0 __b2d
00001e34 g     F .text.itcm	00000002 adc_init()
00010ca4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00006eaa g     F .text.itcm	00000032 SdSpiCard::writeStart(unsigned long)
20003550 g     O .bss	00000004 EventResponder::firstYield
2000086c g     O .data	00000004 _global_impure_ptr
000013c8  w    F .text.itcm	00000008 Print::print(unsigned long)
00002648 g     F .text.itcm	00000084 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000009aa  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
000009e8  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
0000a684 g     F .text.itcm	000003de _realloc_r
0000082a  w    F .text.itcm	0000000a SDFile::read(void*, unsigned int)
00009e50 g     F .text.itcm	00000050 __libc_init_array
00000722  w    F .text.itcm	00000028 SDFile::rewindDirectory()
00003910 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00007200 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
20000668 g     O .data	00000100 __hexdig
0000408e g     F .text.itcm	000000de ExFatFile::addDirCluster()
00006df2 g     F .text.itcm	00000076 SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00006f92 g     F .text.itcm	0000004c SdSpiCard::writeData(unsigned char, unsigned char const*)
20000280 g     O .data	00000028 __mprec_bigtens
0000fb18 g     F .text.itcm	00000098 __s2b
00009870  w    F .text.itcm	00000004 usb_serial_class::clear()
00009390 g     F .text.itcm	00000030 _sbrk
60012ba8 g       *ABS*	00000000 _sdataload
00001234  w    F .text.itcm	00000018 MySpiClass::send(unsigned char)
0000fee0 g     F .text.itcm	00000042 __mcmp
20000568 g     O .data	00000030 vtable for SDClass
2000182c g     O .data	00000004 __brkval
20008b38 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001d14 g     F .text.code	00000000 _init
0000828c g     F .text.itcm	00000002 usb_serial_reset
00004e78 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00002236  w    F .text.itcm	00000056 SDClass::remove(char const*)
0000075c  w    F .text.itcm	00000026 SDFile::close()
00000784  w    F .text.itcm	00000024 SDFile::~SDFile()
60001e5a g     O .text.progmem	0000004b usb_config_descriptor_12
0000acf0 g     F .text.itcm	00000e70 _strtod_l
0000f7f0 g     F .text.itcm	00000030 __match
20008be0 g       .bss	00000000 _ebss
00007808 g     F .text.itcm	00000078 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20006640 g     O .bss	00000004 hour_
000008c8  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::flush()
000011fa  w    F .text.itcm	00000034 BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
0000fbb0 g     F .text.itcm	00000040 __hi0bits
0000315a g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
0000416c g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203860 g       .bss.dma	00000000 _heap_start
000009e8  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
0000219c  w    F .text.itcm	00000002 SDClass::~SDClass()
00003d5c g     F .text.itcm	00000056 ExFatVolume::chdir(char const*)
20005de8 g     O .bss	00000800 diskBuffer
20006680 g     O .bss	00002178 sdx
00006164 g     F .text.itcm	00000090 FatFile::makeUniqueSfn(FatName_t*)
00000614  w    F .text.itcm	0000001c File::~File()
000015e0 g     F .text.itcm	000002bc storage_configure()
00004b34 g     F .text.itcm	000000a0 FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)
00000003 g       *ABS*	00000000 _itcm_block_count
20008b40 g     O .bss	00000020 endpoint0_transfer_data
00004bee g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00009ab6 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
00009668 g     F .text.itcm	0000006c pwm_init
60001d70 g     F .text.progmem	0000009c set_audioClock(int, long, unsigned long, bool)
00009b08 g     F .text.itcm	00000018 .hidden __lshrdi3
2000662c g     O .bss	00000014 file
60001b50 g     F .text.code	0000005c usb_pll_start
0000fd90 g     F .text.itcm	000000a0 __pow5mult
000052d2 g     F .text.itcm	0000004e FatFile::rmdir()
00005c3a g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000980a  w    F .text.itcm	00000006 MillisTimer::enableTimerInterrupt(bool)
0000219e  w    F .text.itcm	00000044 SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20008b60 g     O .bss	00000020 endpoint0_transfer_ack
20008b88 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000915c g     F .text.itcm	0000002c usb_transmit
000002e4  w    F .text.itcm	00000024 Print::println(char const*)
00009850 g     F .text.itcm	00000020 systick_isr
00000250 g     F .text.itcm	00000020 extract(void*, void*)
00000d74 g     F .text.itcm	0000004c menuGet3Int(int*, int*, int*)
20006650 g     O .bss	00000010 mySpi
00006d8c g     F .text.itcm	00000066 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20001814 g     O .data	00000010 Serial
00009890  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00006696 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
600017d8  w    F .text.code	00000002 startup_early_hook
0000700a g     F .text.itcm	0000004a SdSpiCard::writeSingle(unsigned long, unsigned char const*)
00003e06 g     F .text.itcm	00000092 ExFatFile::addCluster()
20000498  w    O .data	0000002c vtable for File
00002388  w    F .text.itcm	00000036 SDClass::usedSize()
00008454 g     F .text.itcm	00000044 usb_serial_peekchar
00000be0 g     F .text.itcm	000000d4 printMenu()
0000a4b0 g     F .text.itcm	00000000 memchr
00005bde g     F .text.itcm	0000005c FatPartition::fatPut(unsigned long, unsigned long)
000087a0 g     F .text.itcm	00000254 set_arm_clock
200087f8 g     O .bss	00000004 systick_cycle_count
20001dd6 g     O .data	00000016 usb_string_serial_number_default
0000f068 g     F .text.itcm	000001d0 _free_r
000076a0 g     F .text.itcm	00000074 SdioCard::readStop()
00002952 g     F .text.itcm	0000004e FsCache::get(unsigned long, unsigned char)
00009eb8 g     F .text.itcm	0000001c __locale_mb_cur_max
0000603e g     F .text.itcm	00000126 FatFile::makeSFN(FatName_t*)
00009880  w    F .text.itcm	00000004 usb_serial_class::flush()
00002b12 g     F .text.itcm	00000090 ExFatFormatter::writeUpcase(unsigned long)
00010a08 g     F .text.itcm	00000082 _sungetc_r
00005d5c g     F .text.itcm	0000010c FatPartition::init(BlockDeviceInterface*, unsigned char)
20001da4 g     O .data	00000004 __malloc_sbrk_base
00009878  w    F .text.itcm	00000004 usb_serial_class::read()
00010548 g     F .text.itcm	00000024 _strtoll_r
000064dc g     F .text.itcm	000000b2 FatFile::remove()
2000664c g     O .bss	00000004 msd
000093c0  w    F .text.itcm	00000004 __cxa_pure_virtual
00001e36 g     F .text.itcm	00000002 adcStatus()
0000fe30 g     F .text.itcm	000000ae __lshift
000055dc g     F .text.itcm	000000aa FatFile::mkdir(FatFile*, char const*, bool)
0000023c g     F .text.itcm	00000014 acq_stop()
00009130 g     F .text.itcm	0000002c usb_prepare_transfer
00009230 g     F .text.itcm	00000160 unused_interrupt_vector
00010908 g     F .text.itcm	00000100 __ssprint_r
60001bac g     F .text.code	0000011c tempmon_init
20008800 g     O .bss	00000004 usb_timer0_callback
00010bc4 g     F .text.itcm	0000005e _vasnprintf_r
00009ab0  w    F .text.itcm	00000002 serialEvent()
0000e178 g     F .text.itcm	000000a4 __register_exitproc
00003854 g     F .text.itcm	000000bc ExFatFile::open(ExFatFile*, char const*, int)
0000ac1c g     F .text.itcm	000000a0 strncmp
000008dc  w    F .text.itcm	00000044 FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000041b4 g     F .text.itcm	000000c0 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00004888 g     F .text.itcm	00000104 FatFormatter::makeFat16()
000084a4 g     F .text.itcm	00000060 usb_serial_flush_input
00003c10 g     F .text.itcm	00000066 ExFatPartition::freeClusterCount()
0000fc60 g     F .text.itcm	00000130 __multiply
200035c4 g     O .bss	00000004 acq_count
000086a0 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20003590 g     O .bss	00000028 __malloc_current_mallinfo
200003b4 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0001015c g     F .text.itcm	000000ba __d2b
20003560 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
6000172c g     F .text.code	00000054 _reboot_Teensyduino_
000072b0  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017da g     F .text.code	00000002 startup_default_middle_hook
0000779c g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
000106d4 g     F .text.itcm	00000024 _strtoul_r
00008c4c g     F .text.itcm	00000428 usb_isr
00009e38 g     F .text.itcm	0000000c __cxa_atexit
00003288 g     F .text.itcm	00000184 ExFatFile::read(void*, unsigned int)
000007e8  w    F .text.itcm	0000000a SDFile::peek()
00002906 g     F .text.itcm	0000004c FsCache::sync()
200017c4 g     O .data	00000050 SPI
0000a550 g     F .text.itcm	00000062 memcmp
20000470  w    O .data	00000028 vtable for usb_serial_class
00005f68 g     F .text.itcm	000000d6 FatFile::createLFN(unsigned short, FatName_t*, unsigned char)
000015c4 g     F .text.itcm	0000001c sdCsWrite(unsigned char, bool)
2000667c g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000aad4 g     F .text.itcm	00000058 sscanf
00009e34  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00003f1e g     F .text.itcm	00000052 ExFatFile::rmdir()
00000d38 g     F .text.itcm	0000003c menuGetInt(int*)
00002342  w    F .text.itcm	00000020 FsVolume::bytesPerCluster() const
00010274 g     F .text.itcm	00000046 __copybits
00006808 g     F .text.itcm	00000080 SdSpiCard::sectorCount()
2000199c g     O .data	00000408 __malloc_av_
20006648 g     O .bss	00000004 max_write
000008d2  w    F .text.itcm	0000000a SDFile::flush()
00008704 g     F .text.itcm	0000009c usb_serial_flush_output
0000a67c g     F .text.itcm	00000002 __malloc_lock
00003048 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002000 g     O .data	000002c0 _VectorsRam
00004728 g     F .text.itcm	000000a8 FatFormatter::initFatDir(unsigned char, unsigned long)
00010c24 g     F .text.itcm	0000005e _calloc_r
00001e98 g     F .text.itcm	00000218 SPIClass::begin()
20001dd0 g     O .data	00000004 t_acq
20001dff g     O .data	00000001 yield_active_check_flags
00004050 g     F .text.itcm	0000003e ExFatFile::sync()
20008b3a g     O .bss	00000001 usb_high_speed
00005686 g     F .text.itcm	000001a0 FatFile::rename(FatFile*, char const*)
0000752c g     F .text.itcm	00000040 SdioCard::isBusy()
00006e68 g     F .text.itcm	00000026 SdSpiCard::readStop()
00007f6c g     F .text.itcm	00000000 memset
00001514 g     F .text.itcm	00000018 getCount()
00009896 g     F .text.itcm	00000010 main
20006644 g     O .bss	00000004 max_count
20006660 g     O .bss	00000008 rawData
200035bc g     O .bss	00000004 __malloc_max_total_mem
0000394c g     F .text.itcm	000000a6 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203800 g     O .bss.dma	0000004b usb_descriptor_buffer
00001914 g     F .text.itcm	00000034 checkReboot()
000044f0 g     F .text.itcm	00000210 ExFatFile::write(void const*, unsigned int)
00002878 g     F .text.itcm	0000008e lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005466 g     F .text.itcm	00000034 FatFile::dirEntry(DirFat_t*)
000006ee  w    F .text.itcm	0000000a SDFile::available()
000009cc  w    F .text.itcm	0000001c File::close()
000096d4 g     F .text.itcm	00000050 usb_init_serialnumber
0000118c g     F .text.itcm	00000036 setRTCTime(int, int, int, int, int, int)
0000bcb8 g     F .text.itcm	00000024 _strtol_r
60001d6c g       .text.code	00000000 __init_array_end
0000e348 g     F .text.itcm	00000c84 _dtoa_r
00009f10 g     F .text.itcm	00000570 _malloc_r
20008874 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000e130 g     F .text.itcm	0000001a __ascii_wctomb
000007bc  w    F .text.itcm	0000000a SDFile::isOpen()
0000658e g     F .text.itcm	00000062 FsBaseFile::FsBaseFile(FsBaseFile const&)
20003584 g     O .bss	00000004 FatVolume::m_cwv
000013c0  w    F .text.itcm	00000008 Print::print(char const*)
00010b4c g     F .text.itcm	00000078 __submore
20000658  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
000098d8 g     F .text.itcm	00000046 Stream::readBytesUntil(char, char*, unsigned int)
000020b0 g     F .text.itcm	0000005a SPIClass::transfer(void const*, void*, unsigned int)
61f99d82 g       *ABS*	00000000 __rtc_localtime
000091a8 g     F .text.itcm	0000005c micros
00003f70 g     F .text.itcm	000000e0 ExFatFile::syncDir()
0000efcc g     F .text.itcm	0000009c _malloc_trim_r
60001e56 g     O .text.progmem	00000004 string0
00008524 g     F .text.itcm	0000017c usb_serial_write
600017dc  w    F .text.code	00000002 startup_late_hook
00008bec g     F .text.itcm	00000034 usb_start_sof_interrupts
00000690  w    F .text.itcm	00000054 FsBaseFile::available() const
0000987c  w    F .text.itcm	00000004 usb_serial_class::available()
60001efa g     O .text.progmem	00000001 _serialEvent_default
00005320 g     F .text.itcm	00000080 FatFile::sync()
00000080 g     F .text.itcm	000001a8 acq_init(int)
00005ecc g     F .text.itcm	0000009c FatFile::cmpName(unsigned short, FatName_t*, unsigned char)
0000228c  w    F .text.itcm	0000004e SDClass::mkdir(char const*)
20000000 g     O .data	00000280 endpoint_queue_head
00003de0  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60001e28  w    O .text.progmem	00000016 usb_string_product_name
00009204 g     F .text.itcm	0000002a delay
000031c6 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000834  w    F .text.itcm	00000028 FsBaseFile::seekSet(unsigned long long)
00010ca0 g     F .fini	00000000 _fini
000008b4  w    F .text.itcm	00000014 FsBaseFile::sync()
60001020 g     O .text.headers	0000000c BootData
00006d5a g     F .text.itcm	00000032 SdSpiCard::readStart(unsigned long)
0000391e g     F .text.itcm	0000002e ExFatFile::openNext(ExFatFile*, int)
000069ea g     F .text.itcm	00000076 SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
0000aa88 g     F .text.itcm	0000004c sprintf
00009968 g     F .text.itcm	0000001a Print::printf(char const*, ...)
000099f8 g     F .text.itcm	00000012 Print::print(long)
000053a0 g     F .text.itcm	00000010 FatFile::close()
000094f4 g     F .text.itcm	00000004 Panic_Temp_isr
000007a8  w    F .text.itcm	00000014 SDFile::~SDFile()
00007248  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000007de  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::peek()
0000048c  w    F .text.itcm	0000001c File::write(unsigned char)
0000e14c g     F .text.itcm	0000002c _write_r
20002464 g     O .bss	000004c8 SD
00000fa4 g     F .text.itcm	00000128 breakTime(unsigned long, tmElements_t&)
0000756c g     F .text.itcm	000000d8 SdioCard::erase(unsigned long, unsigned long)
00005b54  w    F .text.itcm	00000020 FsCache::clear()
00010390 g     F .text.itcm	0000000c nanf
20001dac g     O .data	00000004 _impure_ptr
20000544  w    O .data	00000024 vtable for Stream
0000340c g     F .text.itcm	0000002a ExFatFile::peek()
2000044c  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000f9dc g     F .text.itcm	0000005c _mbrtowc_r
000009c2  w    F .text.itcm	0000000a SDFile::write(void const*, unsigned int)
000067b0 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
000071e8 g     F .text.itcm	0000000c SdioCard::errorCode() const
00005458 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000009a0  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
200065e8 g     O .bss	0000001c diskSize
60001d60 g       .text.code	00000000 __preinit_array_end
00001256 g     F .text.itcm	00000076 dateTime(unsigned short*, unsigned short*, unsigned char*)
000067f8  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00003c78 g     F .text.itcm	000000cc ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00003a96 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00006edc g     F .text.itcm	0000008e SdSpiCard::erase(unsigned long, unsigned long)
0000a480 g     F .text.itcm	0000002a __ascii_mbtowc
000068e0 g     F .text.itcm	00000032 SdSpiCard::isBusy()
00010038 g     F .text.itcm	00000054 __ulp
200005f8 g     O .data	00000060 vtable for SdSpiCard
00008c20 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00006d52  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
00000338 g     F .text.itcm	00000064 setup
20000cc4 g     O .data	0000006c usb_descriptor_list
000073a8 g     F .text.itcm	00000004 SdioCard::status()
000012cc  w    F .text.itcm	00000014 MySpiClass::send(unsigned char const*, unsigned int)
000054ba g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000430  w    F .text.itcm	00000002 Print::flush()
0000074a  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
000006f8  w    F .text.itcm	00000020 FsBaseFile::isDir() const
000021e2  w    F .text.itcm	00000054 SDClass::rmdir(char const*)
20000424  w    O .data	00000028 vtable for MySpiClass
00004ef4 g     F .text.itcm	00000176 FatFile::read(void*, unsigned int)
00004e96 g     F .text.itcm	00000030 FatFile::openRoot(FatVolume*)
2000354c g     O .bss	00000004 ExFatVolume::m_cwv
000013e4  w    F .text.itcm	00000018 FsVolume::freeClusterCount() const
20068000 g       .text.csf	00000000 _estack
000067d8 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00006d4a  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
00000466  w    F .text.itcm	00000026 File::read()
000086b8 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00006a60 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
000068ba g     F .text.itcm	00000026 SdSpiCard::spiStop()
000061f4 g     F .text.itcm	00000250 FatFile::open(FatFile*, FatName_t*, int)
000010cc g     F .text.itcm	000000c0 makeTime(tmElements_t const&)
00008290 g     F .text.itcm	000000ec usb_serial_configure
00000630  w    F .text.itcm	00000014 File::~File()
00001e38 g     F .text.itcm	0000003c _write
200022c0 g       .data	00000000 _edata
00003b78 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20008b20 g     O .bss	00000001 external_psram_size
00007248  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00002a44 g     F .text.itcm	00000048 FsName::get16()
00006e8e g     F .text.itcm	0000001c SdSpiCard::syncDevice()
000030f8 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00004dec g     F .text.itcm	0000008c FatFile::addDirCluster()
000054da g     F .text.itcm	00000102 FatFile::mkdir(FatFile*, FatName_t*)
00009884  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000013a4  w    F .text.itcm	0000001c MySpiClass::receive()
00005b2a g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00009aba g     F .text.itcm	00000040 ultoa
0000219c  w    F .text.itcm	00000002 SDClass::~SDClass()
00006b2c g     F .text.itcm	000001b0 SdSpiCard::begin(SdSpiConfig)
00006618 g     F .text.itcm	0000007e FsBaseFile::open(FsVolume*, char const*, int)
000097fc  w    F .text.itcm	0000000e MillisTimer::disableTimerInterrupt()
00009ab2 g     F .text.itcm	00000004 operator new(unsigned int)
00009810 g     F .text.itcm	0000003c EventResponder::runFromInterrupt()
00000cb4 g     F .text.itcm	00000084 printMenuEntries()
20001da8 g     O .data	00000004 __malloc_trim_threshold
00009874  w    F .text.itcm	00000004 usb_serial_class::peek()
000013fc  w    F .text.itcm	00000100 SPIClass::beginTransaction(SPISettings)
0000ff24 g     F .text.itcm	00000114 __mdiff
00007238 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00003b34 g     F .text.itcm	00000044 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00004c9c g     F .text.itcm	000000f0 FatFile::getName8(char*, unsigned int)
00003504 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
000076a0 g     F .text.itcm	00000074 SdioCard::writeStop()
00007054  w    F .text.itcm	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
0001031c g     F .text.itcm	00000072 __sccl
00003192 g     F .text.itcm	00000014 ExFatFile::close()
20000768 g     O .data	00000101 _ctype_
000067e4  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001d60 g       .text.code	00000000 __init_array_start
00009e34  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
200017bc g     O .data	00000004 F_BUS_ACTUAL
00009632 g     F .text.itcm	00000034 quadtimer_init
20006620 g     O .bss	00000004 disk_count
00002ab4 g     F .text.itcm	00000042 ExFatFormatter::writeUpcaseByte(unsigned char)
000026cc g     F .text.itcm	000001ac FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)
000022da  w    F .text.itcm	00000068 SDClass::rename(char const*, char const*)
00005e68 g     F .text.itcm	00000046 FatVolume::chdir(char const*)
00000228 g     F .text.itcm	00000014 acq_start()
000098a8 g     F .text.itcm	00000030 Stream::timedRead()
00000000 g       .text.itcm	00000000 _stext
0000ab40 g     F .text.itcm	000000dc strlen
00004ec6 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00009ed4 g     F .text.itcm	00000006 __locale_ctype_ptr_l
000023be  w    F .text.itcm	00000036 SdBase<FsVolume>::begin(SdioConfig)
000050ca g     F .text.itcm	000000ac FatFile::seekSet(unsigned long)
00006444 g     F .text.itcm	00000098 FatFile::parsePathName(char const*, FatName_t*, char const**)
0000f2e0 g     F .text.itcm	00000510 __gethex
60001e28 g     O .text.progmem	00000016 usb_string_product_name_default
0000e118 g     F .text.itcm	00000018 vdprintf
000074c8 g     F .text.itcm	00000064 SdioCard::sectorCount()
000066f4 g     F .text.itcm	000000bc FsVolume::begin(BlockDeviceInterface*)
000012e0  w    F .text.itcm	00000024 MySpiClass::receive(unsigned char*, unsigned int)
0000523a g     F .text.itcm	00000098 FatFile::openNext(FatFile*, int)
20006604 g     O .bss	0000001c diskSpace
600017da  w    F .text.code	00000002 startup_middle_hook
20000598 g     O .data	00000060 vtable for SdioCard
00004d8c g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600017de g     F .text.code	000000de configure_cache
00007ddc g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004bd4  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00001560 g     F .text.itcm	00000044 pullData(unsigned long*, unsigned long)
60001d60 g       .text.code	00000000 __preinit_array_start
00009188 g     F .text.itcm	0000001c usb_receive
000039f2 g     F .text.itcm	000000a4 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000098c  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
200035e8 g     O .bss	00002800 data_buffer
0000fbf0 g     F .text.itcm	0000005a __lo0bits
00003b0a g     F .text.itcm	0000002a ExFatPartition::chainSize(unsigned long)
00005176 g     F .text.itcm	000000c4 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00015c00 g       *ABS*	00000000 _flashimagelen
00005826 g     F .text.itcm	000000ae FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
20001dcc g     O .data	00000004 stdPrint
000011c2  w    F .text.itcm	00000038 BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00009afc g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000093c4 g     F .text.itcm	00000028 rtc_get
00003e98 g     F .text.itcm	00000086 ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000984c g     F .text.itcm	00000004 pendablesrvreq_isr
00002362  w    F .text.itcm	00000026 SDClass::totalSize()
0000042c  w    F .text.itcm	00000004 Print::availableForWrite()
20001830 g     O .data	0000016c __global_locale
00007a30 g     F .text.itcm	000002f4 SdioCard::begin(SdioConfig)
000031a6 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000837c g     F .text.itcm	000000d8 usb_serial_read
00009982 g     F .text.itcm	00000076 Print::printNumber(unsigned long, unsigned char, unsigned char)
000090cc g     F .text.itcm	00000064 usb_config_tx
00005b74 g     F .text.itcm	0000006a FatPartition::fatGet(unsigned long, unsigned long*)
00009f00 g     F .text.itcm	00000010 free
00002ffc g     F .text.itcm	0000004c ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000fa98 g     F .text.itcm	00000080 __multadd
0000fa84 g     F .text.itcm	00000012 _Bfree
0000065c  w    F .text.itcm	00000018 SDFile::size()
00004c16 g     F .text.itcm	00000086 FatFile::getSFN(char*, unsigned int)
00000784  w    F .text.itcm	00000024 SDFile::~SDFile()
20001dd6  w    O .data	00000016 usb_string_serial_number
00007e48 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
0000721c g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr

60001416 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001416:	cmp	r0, r1
60001418:	bcs.n	60001424 <memory_clear+0xe>
		*dest++ = 0;
6000141a:	movs	r3, #0
6000141c:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001420:	cmp	r1, r0
60001422:	bhi.n	6000141c <memory_clear+0x6>
60001424:	bx	lr

60001426 <ResetHandler>:
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001426:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142a:	ldr	r2, [pc, #400]	; (600015bc <ResetHandler+0x196>)
6000142c:	ldr	r3, [pc, #400]	; (600015c0 <ResetHandler+0x19a>)
6000142e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r2, [pc, #400]	; (600015c4 <ResetHandler+0x19e>)
60001432:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001434:	mov.w	r2, #11141120	; 0xaa0000
60001438:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r3, [pc, #396]	; (600015c8 <ResetHandler+0x1a2>)
6000143c:	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
6000143e:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001442:	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001446:	bl	600017d8 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144a:	ldr	r3, [pc, #384]	; (600015cc <ResetHandler+0x1a6>)
6000144c:	movs	r2, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
6000144e:	ldr	r1, [pc, #384]	; (600015d0 <ResetHandler+0x1aa>)
60001450:	ldr	r0, [pc, #384]	; (600015d4 <ResetHandler+0x1ae>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r2, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r2, [pc, #384]	; (600015d8 <ResetHandler+0x1b2>)
60001458:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145c:	ldr	r2, [pc, #380]	; (600015dc <ResetHandler+0x1b6>)
6000145e:	ldr	r1, [pc, #384]	; (600015e0 <ResetHandler+0x1ba>)
60001460:	ldr	r0, [pc, #384]	; (600015e4 <ResetHandler+0x1be>)
60001462:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001466:	ldr	r1, [pc, #384]	; (600015e8 <ResetHandler+0x1c2>)
60001468:	ldr	r0, [pc, #384]	; (600015ec <ResetHandler+0x1c6>)
6000146a:	bl	60001416 <memory_clear>

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000146e:	mov.w	r2, #15728640	; 0xf00000
60001472:	ldr	r3, [pc, #380]	; (600015f0 <ResetHandler+0x1ca>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001474:	ldr	r1, [pc, #380]	; (600015f4 <ResetHandler+0x1ce>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001476:	str	r2, [r3, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	movs	r3, #0
6000147a:	ldr	r2, [pc, #380]	; (600015f8 <ResetHandler+0x1d2>)
6000147c:	str.w	r1, [r2, r3, lsl #2]
60001480:	adds	r3, #1
60001482:	ldr	r5, [pc, #372]	; (600015f8 <ResetHandler+0x1d2>)
60001484:	cmp	r3, #176	; 0xb0
60001486:	bne.n	6000147c <ResetHandler+0x56>
60001488:	ldr	r3, [pc, #368]	; (600015fc <ResetHandler+0x1d6>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	movs	r1, #128	; 0x80
6000148c:	ldr	r2, [pc, #368]	; (60001600 <ResetHandler+0x1da>)
6000148e:	strb.w	r1, [r3], #1
60001492:	cmp	r3, r2
60001494:	bne.n	6000148e <ResetHandler+0x68>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	ldr	r4, [pc, #308]	; (600015cc <ResetHandler+0x1a6>)
60001498:	mov.w	r7, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	ldr	r2, [pc, #356]	; (60001604 <ResetHandler+0x1de>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149e:	ldr	r3, [pc, #360]	; (60001608 <ResetHandler+0x1e2>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a0:	ldr.w	r9, [pc, #412]	; 60001640 <ResetHandler+0x21a>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a4:	ldr.w	r8, [pc, #412]	; 60001644 <ResetHandler+0x21e>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	str	r5, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014aa:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ae:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b2:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	str.w	r8, [r4, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ba:	ldr	r3, [r2, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	ldr	r6, [pc, #332]	; (6000160c <ResetHandler+0x1e6>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014be:	orr.w	r3, r3, #458752	; 0x70000
600014c2:	str	r3, [r2, #0]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c4:	mov.w	r2, #4294967295
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c8:	ldr	r3, [r6, #28]
600014ca:	bic.w	r3, r3, #127	; 0x7f
600014ce:	orr.w	r3, r3, #64	; 0x40
600014d2:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d4:	ldr	r3, [r6, #36]	; 0x24
600014d6:	bic.w	r3, r3, #127	; 0x7f
600014da:	orr.w	r3, r3, #64	; 0x40
600014de:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e0:	ldr	r3, [pc, #220]	; (600015c0 <ResetHandler+0x19a>)
600014e2:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e8:	str	r2, [r3, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ea:	bl	600017de <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014ee:	ldr	r3, [pc, #288]	; (60001610 <ResetHandler+0x1ea>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f0:	movs	r2, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f2:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014f4:	ldr	r3, [pc, #284]	; (60001614 <ResetHandler+0x1ee>)
600014f6:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014f8:	movs	r5, #0
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fa:	ldr	r3, [pc, #284]	; (60001618 <ResetHandler+0x1f2>)
600014fc:	str	r2, [r3, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fe:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001500:	str	r5, [r3, #4]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001502:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001506:	ldr	r2, [pc, #276]	; (6000161c <ResetHandler+0x1f6>)
60001508:	str.w	r2, [r3, #3340]	; 0xd0c
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000150c:	ldr	r2, [pc, #272]	; (60001620 <ResetHandler+0x1fa>)
6000150e:	ldr	r3, [r2, #0]
60001510:	orr.w	r3, r3, #16777216	; 0x1000000
60001514:	str	r3, [r2, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001516:	ldr	r2, [pc, #268]	; (60001624 <ResetHandler+0x1fe>)
60001518:	ldr	r3, [r2, #0]
6000151a:	orr.w	r3, r3, #1
6000151e:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001520:	ldr	r3, [pc, #260]	; (60001628 <ResetHandler+0x202>)
60001522:	ldr	r2, [r3, #0]
60001524:	ldr	r3, [pc, #260]	; (6000162c <ResetHandler+0x206>)
60001526:	str	r2, [r3, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001528:	bl	60001b50 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000152c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001530:	ldr	r0, [pc, #252]	; (60001630 <ResetHandler+0x20a>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001532:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001536:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000153a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000153e:	bl	60001d30 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001542:	ldr	r3, [r6, #108]	; 0x6c
60001544:	orr.w	r3, r3, #12288	; 0x3000
60001548:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000154a:	ldr	r3, [pc, #232]	; (60001634 <ResetHandler+0x20e>)
6000154c:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
6000154e:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001552:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001556:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000155a:	str.w	r5, [r3, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000155e:	add.w	r3, r3, #327680	; 0x50000
60001562:	ldr	r2, [r3, #56]	; 0x38
60001564:	lsls	r2, r2, #31
60001566:	bmi.n	6000157a <ResetHandler+0x154>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001568:	ldr	r2, [pc, #204]	; (60001638 <ResetHandler+0x212>)
6000156a:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156c:	movw	r2, #11797	; 0x2e15
60001570:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001572:	ldr	r2, [r3, #56]	; 0x38
60001574:	orr.w	r2, r2, #1
60001578:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000157a:	ldr	r2, [r3, #8]
6000157c:	orr.w	r2, r2, #65537	; 0x10001
60001580:	str	r2, [r3, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
60001582:	bl	600018bc <configure_external_ram>
#endif
	analog_init();
60001586:	bl	60001cc8 <analog_init>
	pwm_init();
6000158a:	bl	60001d40 <__pwm_init_veneer>
	tempmon_init();
6000158e:	bl	60001bac <tempmon_init>
	startup_middle_hook();
60001592:	bl	600017da <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001596:	ldr	r2, [pc, #164]	; (6000163c <ResetHandler+0x216>)
60001598:	ldr	r3, [r2, #0]
6000159a:	ldr	r4, [pc, #160]	; (6000163c <ResetHandler+0x216>)
	while (millis() < 20) ; // wait at least 20ms before starting USB
6000159c:	cmp	r3, #19
6000159e:	bls.n	60001598 <ResetHandler+0x172>
	usb_init();
600015a0:	bl	60001648 <usb_init>
600015a4:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600015a6:	cmp.w	r3, #300	; 0x12c
600015aa:	bcc.n	600015a4 <ResetHandler+0x17e>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015ac:	bl	600017dc <startup_default_late_hook>
	__libc_init_array();
600015b0:	bl	60001d48 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015b4:	bl	60001d38 <__main_veneer>
	
	while (1) asm("WFI");
600015b8:	wfi
600015ba:	b.n	600015b8 <ResetHandler+0x192>
600015bc:	.word	0xaaaaaabf
600015c0:	.word	0x400ac000
600015c4:	.word	0x00200007
600015c8:	.word	0x20068000
600015cc:	.word	0x400d8000
600015d0:	.word	0x60001efc
600015d4:	.word	0x00000000
600015d8:	.word	0x00010ca8
600015dc:	.word	0x200022c0
600015e0:	.word	0x60012ba8
600015e4:	.word	0x20000000
600015e8:	.word	0x20008be0
600015ec:	.word	0x200022c0
600015f0:	.word	0xe000ed88
600015f4:	.word	0x00009231
600015f8:	.word	0x20002000
600015fc:	.word	0xe000e400
60001600:	.word	0xe000e4a0
60001604:	.word	0xe000ed24
60001608:	.word	0xe000ed08
6000160c:	.word	0x400fc000
60001610:	.word	0x0000984d
60001614:	.word	0x00009851
60001618:	.word	0xe000e014
6000161c:	.word	0x20200000
60001620:	.word	0xe000edfc
60001624:	.word	0xe0001000
60001628:	.word	0xe0001004
6000162c:	.word	0x200087f8
60001630:	.word	0x179a7b00
60001634:	.word	0x40084000
60001638:	.word	0x56c00000
6000163c:	.word	0x200087fc
60001640:	.word	0x2018101b
60001644:	.word	0x13110d0c

60001648 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001648:	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000164a:	movw	r2, #3937	; 0xf61
6000164e:	ldr	r3, [pc, #180]	; (60001704 <usb_init+0xbc>)
60001650:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001654:	bl	60001d28 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001658:	ldr	r2, [pc, #172]	; (60001708 <usb_init+0xc0>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000165a:	ldr	r1, [pc, #176]	; (6000170c <usb_init+0xc4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr.w	r3, [r2, #128]	; 0x80
60001660:	orr.w	r3, r3, #3
60001664:	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001668:	movw	r2, #1028	; 0x404
6000166c:	ldr	r3, [pc, #160]	; (60001710 <usb_init+0xc8>)
6000166e:	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001672:	ldr	r2, [pc, #160]	; (60001714 <usb_init+0xcc>)
60001674:	ldr	r0, [r2, #0]
60001676:	ands	r1, r0
60001678:	cbnz	r1, 60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r1, [r3, #424]	; 0x1a8
6000167e:	lsls	r1, r1, #30
60001680:	beq.n	600016b4 <usb_init+0x6c>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001682:	mov.w	r1, #2147483648	; 0x80000000
60001686:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001688:	ldr.w	r2, [r3, #320]	; 0x140
6000168c:	orr.w	r2, r2, #2
60001690:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001694:	ldr	r2, [pc, #120]	; (60001710 <usb_init+0xc8>)
60001696:	ldr.w	r3, [r2, #320]	; 0x140
6000169a:	lsls	r3, r3, #30
6000169c:	bmi.n	60001696 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000169e:	mov.w	r2, #131072	; 0x20000
600016a2:	ldr	r3, [pc, #116]	; (60001718 <usb_init+0xd0>)
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016a4:	movs	r0, #25
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a6:	str	r2, [r3, #0]
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	mov.w	r2, #2147483648	; 0x80000000
600016ac:	ldr	r3, [pc, #100]	; (60001714 <usb_init+0xcc>)
600016ae:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b0:	bl	60001d20 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016b4:	ldr	r3, [pc, #92]	; (60001714 <usb_init+0xcc>)
	USBPHY1_PWD = 0;
600016b6:	movs	r1, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016b8:	mov.w	r2, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016bc:	ldr	r5, [pc, #92]	; (6000171c <usb_init+0xd4>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016be:	ldr	r4, [pc, #80]	; (60001710 <usb_init+0xc8>)
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c0:	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c2:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016c4:	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r3, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	mov.w	r2, #640	; 0x280
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016cc:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d0:	bl	60001d50 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016d4:	mov.w	r3, #4227072	; 0x408000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016d8:	ldr	r2, [pc, #68]	; (60001720 <usb_init+0xd8>)
600016da:	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016dc:	mov.w	r3, #4194304	; 0x400000
600016e0:	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e2:	movw	r3, #323	; 0x143

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016e6:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016ea:	str.w	r3, [r4, #328]	; 0x148
600016ee:	ldr	r3, [pc, #52]	; (60001724 <usb_init+0xdc>)
600016f0:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016f4:	ldr	r3, [pc, #48]	; (60001728 <usb_init+0xe0>)
600016f6:	mov.w	r2, #131072	; 0x20000
600016fa:	str	r2, [r3, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600016fc:	movs	r3, #1
600016fe:	str.w	r3, [r4, #320]	; 0x140
60001702:	pop	{r3, r4, r5, pc}
60001704:	.word	0x400d8000
60001708:	.word	0x400fc000
6000170c:	.word	0x001e1c00
60001710:	.word	0x402e0000
60001714:	.word	0x400d9000
60001718:	.word	0xe000e28c
6000171c:	.word	0x20000000
60001720:	.word	0x00008c4d
60001724:	.word	0x20002000
60001728:	.word	0xe000e10c

6000172c <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
6000172c:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000172e:	ldr	r3, [pc, #56]	; (60001768 <_reboot_Teensyduino_+0x3c>)
60001730:	ldr	r3, [r3, #96]	; 0x60
60001732:	lsls	r3, r3, #30
60001734:	bmi.n	6000173a <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001736:	bkpt	0x00fb
60001738:	b.n	60001768 <_reboot_Teensyduino_+0x3c>
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173a:	cpsid	i
		USB1_USBCMD = 0;
6000173c:	movs	r2, #0
6000173e:	ldr	r3, [pc, #44]	; (6000176c <_reboot_Teensyduino_+0x40>)
60001740:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001744:	sub.w	r3, r3, #2310144	; 0x234000
60001748:	ldr	r2, [pc, #36]	; (60001770 <_reboot_Teensyduino_+0x44>)
6000174a:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174c:	sub.w	r3, r3, #534773760	; 0x1fe00000
60001750:	sub.w	r3, r3, #700416	; 0xab000
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000175a:	ldr	r3, [pc, #24]	; (60001774 <_reboot_Teensyduino_+0x48>)
6000175c:	ldr	r0, [pc, #24]	; (60001778 <_reboot_Teensyduino_+0x4c>)
6000175e:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001760:	ldr	r3, [pc, #24]	; (6000177c <_reboot_Teensyduino_+0x50>)
60001762:	ldr	r3, [r3, #0]
60001764:	ldr	r3, [r3, #8]
60001766:	blx	r3
60001768:	.word	0x401f4400
6000176c:	.word	0x402e0000
60001770:	.word	0x00200003
60001774:	.word	0xeb120000
60001778:	.word	0x20208000
6000177c:	.word	0x0020001c

60001780 <flexspi2_command>:
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001780:	lsls	r0, r0, #16
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001782:	ldr	r3, [pc, #32]	; (600017a4 <flexspi2_command+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001784:	movs	r2, #1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001786:	and.w	r0, r0, #983040	; 0xf0000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000178a:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000178e:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001792:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001796:	ldr	r2, [r3, #20]
60001798:	lsls	r2, r2, #31
6000179a:	bpl.n	60001796 <flexspi2_command+0x16>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000179c:	movs	r2, #1
6000179e:	ldr	r3, [pc, #4]	; (600017a4 <flexspi2_command+0x24>)
600017a0:	str	r2, [r3, #20]
600017a2:	bx	lr
600017a4:	.word	0x402a4000

600017a8 <flexspi2_psram_id>:
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017a8:	ldr	r3, [pc, #36]	; (600017d0 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017aa:	ldr	r2, [pc, #40]	; (600017d4 <flexspi2_psram_id+0x2c>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017ac:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017b0:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017b4:	movs	r2, #1
600017b6:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ba:	ldr	r1, [r3, #20]
600017bc:	ldr	r2, [pc, #16]	; (600017d0 <flexspi2_psram_id+0x28>)
600017be:	lsls	r1, r1, #31
600017c0:	bpl.n	600017ba <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
600017c2:	ldr.w	r0, [r2, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017c6:	movs	r3, #33	; 0x21
	return id & 0xFFFF;
}
600017c8:	uxth	r0, r0
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017ca:	str	r3, [r2, #20]
	return id & 0xFFFF;
}
600017cc:	bx	lr
600017ce:	nop
600017d0:	.word	0x402a4000
600017d4:	.word	0x00030004

600017d8 <startup_default_early_hook>:
600017d8:	bx	lr

600017da <startup_default_middle_hook>:
600017da:	bx	lr

600017dc <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600017dc:	bx	lr

600017de <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017de:	push	{r4, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e0:	ldr	r2, [pc, #132]	; (60001868 <configure_cache+0x8a>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	movs	r0, #0
600017e4:	ldr	r4, [pc, #132]	; (6000186c <configure_cache+0x8e>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e6:	movs	r3, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017e8:	ldr	r1, [pc, #132]	; (60001870 <configure_cache+0x92>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017ea:	str	r0, [r4, #0]

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ec:	str	r3, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ee:	ldr	r3, [pc, #132]	; (60001874 <configure_cache+0x96>)
600017f0:	str	r1, [r3, #0]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f2:	movs	r1, #17
600017f4:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017f6:	ldr	r1, [pc, #128]	; (60001878 <configure_cache+0x9a>)
600017f8:	str	r1, [r3, #0]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017fa:	movs	r1, #18
600017fc:	str	r1, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017fe:	ldr	r1, [pc, #124]	; (6000187c <configure_cache+0x9e>)
60001800:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001802:	ldr	r1, [pc, #124]	; (60001880 <configure_cache+0xa2>)
60001804:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001806:	ldr	r1, [pc, #124]	; (60001884 <configure_cache+0xa6>)
60001808:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000180a:	ldr	r1, [pc, #124]	; (60001888 <configure_cache+0xaa>)
6000180c:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000180e:	ldr	r1, [pc, #124]	; (6000188c <configure_cache+0xae>)
60001810:	str	r1, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001812:	ldr	r1, [pc, #124]	; (60001890 <configure_cache+0xb2>)
60001814:	orr.w	r1, r1, #21
60001818:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000181a:	ldr	r1, [pc, #120]	; (60001894 <configure_cache+0xb6>)
6000181c:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000181e:	add.w	r1, r1, #270532608	; 0x10200000
60001822:	adds	r1, #13
60001824:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001826:	ldr	r1, [pc, #112]	; (60001898 <configure_cache+0xba>)
60001828:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000182a:	ldr	r1, [pc, #112]	; (6000189c <configure_cache+0xbe>)
6000182c:	str	r1, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000182e:	ldr	r1, [pc, #112]	; (600018a0 <configure_cache+0xc2>)
60001830:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001832:	ldr	r1, [pc, #112]	; (600018a4 <configure_cache+0xc6>)
60001834:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001836:	ldr	r1, [pc, #112]	; (600018a8 <configure_cache+0xca>)
60001838:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000183a:	ldr	r1, [pc, #112]	; (600018ac <configure_cache+0xce>)
6000183c:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000183e:	ldr	r2, [pc, #112]	; (600018b0 <configure_cache+0xd2>)
60001840:	str	r2, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001842:	movs	r3, #1
60001844:	str	r3, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001846:	dsb	sy
	asm("isb");
6000184a:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000184e:	ldr	r3, [pc, #100]	; (600018b4 <configure_cache+0xd6>)
60001850:	str	r0, [r3, #0]

	asm("dsb");
60001852:	dsb	sy
	asm("isb");
60001856:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000185a:	ldr	r2, [pc, #92]	; (600018b8 <configure_cache+0xda>)
6000185c:	ldr	r3, [r2, #0]
6000185e:	orr.w	r3, r3, #196608	; 0x30000
60001862:	str	r3, [r2, #0]
60001864:	pop	{r4, pc}
60001866:	nop
60001868:	.word	0xe000ed9c
6000186c:	.word	0xe000ed94
60001870:	.word	0x1000003f
60001874:	.word	0xe000eda0
60001878:	.word	0x03080025
6000187c:	.word	0x00100009
60001880:	.word	0x00200013
60001884:	.word	0x07020021
60001888:	.word	0x20000014
6000188c:	.word	0x13080025
60001890:	.word	0x20008be0
60001894:	.word	0x10000009
60001898:	.word	0x130b0027
6000189c:	.word	0x40000017
600018a0:	.word	0x13100033
600018a4:	.word	0x60000018
600018a8:	.word	0x070b002f
600018ac:	.word	0x70000019
600018b0:	.word	0x130b002f
600018b4:	.word	0xe000ef50
600018b8:	.word	0xe000ed14

600018bc <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600018bc:	push	{r0, r1, r4, r5, r6, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018be:	ldr	r3, [pc, #572]	; (60001afc <configure_external_ram+0x240>)
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018c0:	mov.w	r4, #8192	; 0x2000
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018c4:	ldr	r2, [pc, #568]	; (60001b00 <configure_external_ram+0x244>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018c6:	ldr	r1, [pc, #572]	; (60001b04 <configure_external_ram+0x248>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018c8:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018cc:	str.w	r1, [r3, #608]	; 0x260
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018d0:	movw	r1, #34572	; 0x870c
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018d4:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018d8:	sub.w	r2, r2, #45056	; 0xb000
600018dc:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018e0:	add.w	r2, r2, #28672	; 0x7000
600018e4:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018e8:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ec:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	str.w	r2, [r3, #632]	; 0x278

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018f4:	movs	r2, #24
600018f6:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018f8:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018fa:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018fc:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018fe:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001900:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001904:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001908:	str.w	r2, [r3, #136]	; 0x88

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000190c:	movs	r2, #1
6000190e:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001912:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001916:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
6000191a:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000191e:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001922:	str.w	r2, [r3, #1872]	; 0x750

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001926:	ldr	r2, [pc, #480]	; (60001b08 <configure_external_ram+0x24c>)
60001928:	ldr	r3, [r2, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000192a:	bic.w	r3, r3, #3758096384	; 0xe0000000
6000192e:	bic.w	r3, r3, #768	; 0x300
60001932:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001936:	orr.w	r3, r3, #768	; 0x300
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000193a:	str	r3, [r2, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000193c:	ldr.w	r3, [r2, #132]	; 0x84
60001940:	orr.w	r3, r3, #12
60001944:	str.w	r3, [r2, #132]	; 0x84

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001948:	ldr	r3, [pc, #448]	; (60001b0c <configure_external_ram+0x250>)
6000194a:	ldr	r2, [r3, #0]
6000194c:	orr.w	r2, r2, #2
60001950:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001952:	ldr	r2, [r3, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001954:	ands	r1, r2
60001956:	ldr	r2, [pc, #440]	; (60001b10 <configure_external_ram+0x254>)
60001958:	orrs	r2, r1
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000195a:	ldr	r1, [pc, #440]	; (60001b14 <configure_external_ram+0x258>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000195c:	str	r2, [r3, #0]
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000195e:	mov.w	r2, #4294967295
60001962:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001964:	add.w	r2, r2, #16187392	; 0xf70000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001968:	ldr	r0, [r1, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000196a:	add.w	r2, r2, #14336	; 0x3800
6000196e:	ands	r2, r0
60001970:	orr.w	r2, r2, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001974:	str	r2, [r3, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001976:	ldr	r2, [r3, #12]
60001978:	bic.w	r2, r2, #120	; 0x78
6000197c:	str	r2, [r3, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	ldr	r2, [pc, #408]	; (60001b18 <configure_external_ram+0x25c>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001980:	ldr	r0, [r3, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001982:	ands	r2, r0
60001984:	orr.w	r2, r2, #2147483648	; 0x80000000
60001988:	orr.w	r2, r2, #64	; 0x40

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000198c:	str	r2, [r3, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000198e:	ldr	r2, [pc, #392]	; (60001b18 <configure_external_ram+0x25c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001990:	ldr	r0, [r3, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001992:	ands	r2, r0
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001994:	ldr	r0, [pc, #388]	; (60001b1c <configure_external_ram+0x260>)
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	orr.w	r2, r2, #2147483648	; 0x80000000
6000199a:	orr.w	r2, r2, #64	; 0x40
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199e:	str	r2, [r3, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a0:	ldr	r2, [pc, #380]	; (60001b20 <configure_external_ram+0x264>)
600019a2:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a4:	str	r2, [r3, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019a6:	ldr.w	r2, [r1, #184]	; 0xb8
600019aa:	bic.w	r2, r2, #63	; 0x3f
600019ae:	orr.w	r2, r2, #1
600019b2:	str.w	r2, [r3, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019b6:	ldr.w	r2, [r1, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ba:	movw	r1, #1541	; 0x605
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019be:	bic.w	r2, r2, #63	; 0x3f
600019c2:	orr.w	r2, r2, #1
600019c6:	str.w	r2, [r3, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600019ca:	movs	r2, #0
600019cc:	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019ce:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d0:	str	r0, [r3, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d2:	str.w	r1, [r3, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019d6:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d8:	str	r0, [r3, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019da:	str.w	r1, [r3, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019de:	ldr	r1, [r3, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019e0:	ldr	r0, [pc, #320]	; (60001b24 <configure_external_ram+0x268>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e2:	bic.w	r1, r1, #2
600019e6:	str	r1, [r3, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019e8:	ldr	r1, [pc, #316]	; (60001b28 <configure_external_ram+0x26c>)
600019ea:	str	r1, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ec:	movs	r1, #2
600019ee:	str	r1, [r3, #28]
600019f0:	ldr	r1, [pc, #312]	; (60001b2c <configure_external_ram+0x270>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	str.w	r2, [r1], #4
600019f6:	cmp	r1, r0
600019f8:	bne.n	600019f2 <configure_external_ram+0x136>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fa:	ldr	r2, [r3, #0]
600019fc:	orr.w	r2, r2, #1
60001a00:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a02:	ldr	r2, [pc, #264]	; (60001b0c <configure_external_ram+0x250>)
60001a04:	ldr	r4, [r2, #0]
60001a06:	ldr	r3, [pc, #260]	; (60001b0c <configure_external_ram+0x250>)
60001a08:	ands.w	r4, r4, #1
60001a0c:	bne.n	60001a04 <configure_external_ram+0x148>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a0e:	ldr	r2, [pc, #280]	; (60001b28 <configure_external_ram+0x26c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a10:	movs	r6, #2
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
60001a12:	mov	r1, r4
60001a14:	mov	r0, r4
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a16:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a18:	movw	r2, #1781	; 0x6f5
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1c:	str	r6, [r3, #28]

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a1e:	str.w	r2, [r3, #512]	; 0x200
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a22:	movw	r2, #1126	; 0x466
60001a26:	str.w	r2, [r3, #528]	; 0x210
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a2a:	movw	r2, #1177	; 0x499
60001a2e:	str.w	r2, [r3, #544]	; 0x220
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a32:	ldr	r2, [pc, #252]	; (60001b30 <configure_external_ram+0x274>)
60001a34:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a38:	movw	r2, #9217	; 0x2401
60001a3c:	str.w	r2, [r3, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a40:	movw	r2, #1077	; 0x435
60001a44:	str.w	r2, [r3, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	ldr	r2, [pc, #232]	; (60001b34 <configure_external_ram+0x278>)
60001a4a:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a4e:	ldr	r2, [pc, #232]	; (60001b38 <configure_external_ram+0x27c>)
60001a50:	str.w	r2, [r3, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a54:	ldr	r2, [pc, #228]	; (60001b3c <configure_external_ram+0x280>)
60001a56:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5a:	movw	r2, #8705	; 0x2201
60001a5e:	str.w	r2, [r3, #612]	; 0x264

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
60001a62:	bl	60001780 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001a66:	mov	r1, r4
60001a68:	movs	r0, #1
60001a6a:	bl	60001780 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001a6e:	mov	r1, r4
60001a70:	mov	r0, r6
60001a72:	bl	60001780 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a76:	mov	r0, r4
60001a78:	bl	600017a8 <flexspi2_psram_id>
60001a7c:	movw	r3, #23821	; 0x5d0d
60001a80:	mov	r5, r0
60001a82:	cmp	r0, r3
60001a84:	bne.n	60001aea <configure_external_ram+0x22e>
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
60001a86:	mov	r1, r4
60001a88:	movs	r0, #4
60001a8a:	bl	60001780 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001a8e:	mov	r0, r4
60001a90:	mov.w	r1, #8388608	; 0x800000
60001a94:	ldr	r4, [pc, #168]	; (60001b40 <configure_external_ram+0x284>)
60001a96:	bl	60001780 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001a9a:	mov.w	r1, #8388608	; 0x800000
60001a9e:	movs	r0, #1
60001aa0:	bl	60001780 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001aa4:	mov.w	r1, #8388608	; 0x800000
60001aa8:	mov	r0, r6
60001aaa:	bl	60001780 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001aae:	mov.w	r0, #8388608	; 0x800000
60001ab2:	bl	600017a8 <flexspi2_psram_id>
60001ab6:	cmp	r0, r5
60001ab8:	bne.n	60001aca <configure_external_ram+0x20e>
			flexspi2_command(4, 0x800000);
60001aba:	mov.w	r1, #8388608	; 0x800000
60001abe:	movs	r0, #4
60001ac0:	bl	60001780 <flexspi2_command>
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001ac4:	movs	r3, #16
60001ac6:	strb	r3, [r4, #0]
60001ac8:	b.n	60001ace <configure_external_ram+0x212>
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001aca:	movs	r3, #8
60001acc:	strb	r3, [r4, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001ace:	ldr	r1, [pc, #116]	; (60001b44 <configure_external_ram+0x288>)
60001ad0:	movs	r3, #0
60001ad2:	ldr	r2, [pc, #116]	; (60001b48 <configure_external_ram+0x28c>)
60001ad4:	ldrb	r0, [r4, #0]
60001ad6:	subs	r2, r2, r1
60001ad8:	str	r3, [sp, #0]
60001ada:	movs	r3, #1
60001adc:	add.w	r2, r2, r0, lsl #20
60001ae0:	ldr	r0, [pc, #104]	; (60001b4c <configure_external_ram+0x290>)
60001ae2:	bl	60001d58 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001ae6:	add	sp, #8
60001ae8:	pop	{r4, r5, r6, pc}
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001aea:	movs	r2, #16
60001aec:	mov	r1, r4
60001aee:	ldr	r0, [pc, #92]	; (60001b4c <configure_external_ram+0x290>)
	}
}
60001af0:	add	sp, #8
60001af2:	ldmia.w	sp!, {r4, r5, r6, lr}
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001af6:	b.w	60001d50 <__memset_veneer>
60001afa:	nop
60001afc:	.word	0x401f8000
60001b00:	.word	0x0001b0f9
60001b04:	.word	0x000110f9
60001b08:	.word	0x400fc000
60001b0c:	.word	0x402a4000
60001b10:	.word	0xffff0012
60001b14:	.word	0x402a8000
60001b18:	.word	0x7cf0ff00
60001b1c:	.word	0x00020063
60001b20:	.word	0x830f00ff
60001b24:	.word	0x402a4300
60001b28:	.word	0x5af05af0
60001b2c:	.word	0x402a4200
60001b30:	.word	0x3018049f
60001b34:	.word	0x0a1806eb
60001b38:	.word	0x26013206
60001b3c:	.word	0x0a180638
60001b40:	.word	0x20008b20
60001b44:	.word	0x70000000
60001b48:	.word	0x70000000
60001b4c:	.word	0x20008b90

60001b50 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001b50:	push	{r4, r5, r6, r7, lr}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b52:	ldr	r3, [pc, #84]	; (60001ba8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b54:	movs	r0, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b56:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b5a:	mov.w	r4, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b5e:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b62:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b66:	movw	r7, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b6a:	ldr	r2, [r3, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b6c:	tst.w	r2, #2
60001b70:	beq.n	60001b7a <usb_pll_start+0x2a>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b72:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b74:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b76:	str	r7, [r3, #24]
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
60001b78:	b.n	60001b6a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b7a:	tst.w	r2, #8192	; 0x2000
60001b7e:	bne.n	60001b84 <usb_pll_start+0x34>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b80:	str	r5, [r3, #20]
			continue;
60001b82:	b.n	60001b6a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b84:	tst.w	r2, #4096	; 0x1000
60001b88:	bne.n	60001b8e <usb_pll_start+0x3e>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b8a:	str	r4, [r3, #20]
			continue;
60001b8c:	b.n	60001b6a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b8e:	cmp	r2, #0
60001b90:	bge.n	60001b6a <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b92:	tst.w	r2, #65536	; 0x10000
60001b96:	beq.n	60001b9c <usb_pll_start+0x4c>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b98:	str	r1, [r3, #24]
			continue;
60001b9a:	b.n	60001b6a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b9c:	lsls	r2, r2, #25
60001b9e:	bmi.n	60001ba4 <usb_pll_start+0x54>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ba0:	str	r0, [r3, #20]
			continue;
60001ba2:	b.n	60001b6a <usb_pll_start+0x1a>
60001ba4:	pop	{r4, r5, r6, r7, pc}
60001ba6:	nop
60001ba8:	.word	0x400d8000

60001bac <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bac:	ldr	r2, [pc, #228]	; (60001c94 <tempmon_init+0xe8>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bae:	vmov.f32	s12, #57	; 0x41c80000  25.0
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bb2:	ldr	r0, [pc, #228]	; (60001c98 <tempmon_init+0xec>)
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bb4:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb6:	vldr	s10, [pc, #228]	; 60001c9c <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bba:	bic.w	r3, r3, #1
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001bbe:	push	{r4, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bc0:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bc2:	movs	r3, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc4:	ldr	r4, [pc, #216]	; (60001ca0 <tempmon_init+0xf4>)
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bc6:	str	r3, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001bc8:	ldr	r3, [pc, #216]	; (60001ca4 <tempmon_init+0xf8>)
60001bca:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bce:	uxtb	r1, r3
60001bd0:	str	r1, [r0, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bd2:	vmov	s15, r1
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bd6:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bda:	lsrs	r3, r3, #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bdc:	vcvt.f32.s32	s14, s15
60001be0:	ldr	r1, [pc, #196]	; (60001ca8 <tempmon_init+0xfc>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	vmov	s15, r0
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001be6:	str	r0, [r4, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be8:	vcvt.f32.s32	s13, s15
60001bec:	vmov	s15, r3

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bf0:	vsub.f32	s10, s14, s10
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bf4:	ldr	r3, [pc, #180]	; (60001cac <tempmon_init+0x100>)
60001bf6:	vcvt.f32.s32	s15, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfa:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bfe:	vsub.f32	s15, s15, s13
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c02:	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c06:	vmul.f32	s10, s10, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c0a:	vstr	s15, [r3]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c0e:	ldr	r3, [r2, #0]
60001c10:	vdiv.f32	s11, s10, s12
60001c14:	vadd.f32	s11, s11, s13
60001c18:	vcvt.u32.f32	s11, s11
60001c1c:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c20:	vldr	s11, [pc, #140]	; 60001cb0 <tempmon_init+0x104>
60001c24:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c28:	orr.w	r3, r3, r1, lsl #20
60001c2c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c2e:	vmul.f32	s14, s14, s15
60001c32:	ldr	r3, [pc, #128]	; (60001cb4 <tempmon_init+0x108>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c34:	vmul.f32	s15, s12, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c38:	ldr.w	r1, [r2, #272]	; 0x110
60001c3c:	vdiv.f32	s11, s14, s12
60001c40:	vadd.f32	s14, s11, s13
60001c44:	vcvt.u32.f32	s14, s14
60001c48:	vmov	r0, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c4c:	vdiv.f32	s14, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c50:	and.w	r3, r3, r0, lsl #16
60001c54:	orrs	r3, r1
60001c56:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c5a:	ldr.w	r1, [r2, #272]	; 0x110
60001c5e:	vadd.f32	s15, s14, s13
60001c62:	vcvt.u32.f32	s15, s15
60001c66:	vmov	r3, s15
60001c6a:	ubfx	r3, r3, #0, #12
60001c6e:	orrs	r3, r1
60001c70:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c74:	ldr	r3, [r2, #0]
60001c76:	orr.w	r3, r3, #2
60001c7a:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c7c:	movs	r2, #0
60001c7e:	ldr	r3, [pc, #56]	; (60001cb8 <tempmon_init+0x10c>)
60001c80:	strb	r2, [r3, #0]
60001c82:	ldr	r2, [pc, #56]	; (60001cbc <tempmon_init+0x110>)
60001c84:	ldr	r3, [pc, #56]	; (60001cc0 <tempmon_init+0x114>)
60001c86:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c8a:	movs	r2, #1
60001c8c:	ldr	r3, [pc, #52]	; (60001cc4 <tempmon_init+0x118>)
60001c8e:	str	r2, [r3, #0]
60001c90:	pop	{r4, pc}
60001c92:	nop
60001c94:	.word	0x400d8180
60001c98:	.word	0x20006670
60001c9c:	.word	0x42aa0000
60001ca0:	.word	0x2000666c
60001ca4:	.word	0x401f4400
60001ca8:	.word	0x20006674
60001cac:	.word	0x20006678
60001cb0:	.word	0x42b40000
60001cb4:	.word	0x0fff0000
60001cb8:	.word	0xe000e440
60001cbc:	.word	0x000094f5
60001cc0:	.word	0x20002000
60001cc4:	.word	0xe000e108

60001cc8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001cc8:	ldr	r3, [pc, #60]	; (60001d08 <analog_init+0x40>)
60001cca:	ldr	r2, [r3, #108]	; 0x6c
60001ccc:	orr.w	r2, r2, #196608	; 0x30000
60001cd0:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001cd2:	ldr	r2, [r3, #108]	; 0x6c
60001cd4:	orr.w	r2, r2, #768	; 0x300
60001cd8:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001cda:	sub.w	r3, r3, #229376	; 0x38000
60001cde:	movw	r2, #1591	; 0x637
60001ce2:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001ce4:	movs	r2, #160	; 0xa0
60001ce6:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001ce8:	ldr	r2, [r3, #72]	; 0x48
60001cea:	lsls	r2, r2, #24
60001cec:	bmi.n	60001ce8 <analog_init+0x20>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001cee:	ldr	r3, [pc, #28]	; (60001d0c <analog_init+0x44>)
60001cf0:	movw	r2, #1591	; 0x637
60001cf4:	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001cf6:	movs	r2, #160	; 0xa0
60001cf8:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001cfa:	ldr	r2, [r3, #72]	; 0x48
60001cfc:	ands.w	r2, r2, #128	; 0x80
60001d00:	bne.n	60001cfa <analog_init+0x32>
	calibrating = 0;
60001d02:	ldr	r3, [pc, #12]	; (60001d10 <analog_init+0x48>)
60001d04:	strb	r2, [r3, #0]
60001d06:	bx	lr
60001d08:	.word	0x400fc000
60001d0c:	.word	0x400c8000
60001d10:	.word	0x20008b17

60001d14 <_init>:
60001d14:	push	{r3, r4, r5, r6, r7, lr}
60001d16:	nop
60001d18:	pop	{r3, r4, r5, r6, r7}
60001d1a:	pop	{r3}
60001d1c:	mov	lr, r3
60001d1e:	bx	lr

60001d20 <__delay_veneer>:
60001d20:	ldr.w	pc, [pc]	; 60001d24 <__delay_veneer+0x4>
60001d24:	.word	0x00009205

60001d28 <__usb_init_serialnumber_veneer>:
60001d28:	ldr.w	pc, [pc]	; 60001d2c <__usb_init_serialnumber_veneer+0x4>
60001d2c:	.word	0x000096d5

60001d30 <__set_arm_clock_veneer>:
60001d30:	ldr.w	pc, [pc]	; 60001d34 <__set_arm_clock_veneer+0x4>
60001d34:	.word	0x000087a1

60001d38 <__main_veneer>:
60001d38:	ldr.w	pc, [pc]	; 60001d3c <__main_veneer+0x4>
60001d3c:	.word	0x00009897

60001d40 <__pwm_init_veneer>:
60001d40:	ldr.w	pc, [pc]	; 60001d44 <__pwm_init_veneer+0x4>
60001d44:	.word	0x00009669

60001d48 <____libc_init_array_veneer>:
60001d48:	ldr.w	pc, [pc]	; 60001d4c <____libc_init_array_veneer+0x4>
60001d4c:	.word	0x00009e51

60001d50 <__memset_veneer>:
60001d50:	ldr.w	pc, [pc]	; 60001d54 <__memset_veneer+0x4>
60001d54:	.word	0x00007f6d

60001d58 <__sm_set_pool_veneer>:
60001d58:	ldr.w	pc, [pc]	; 60001d5c <__sm_set_pool_veneer+0x4>
60001d5c:	.word	0x0000948f

60001d60 <__init_array_start>:
60001d60:	.word	0x00000045
60001d64:	.word	0x00001d61
60001d68:	.word	0x00002551

Disassembly of section .text.progmem:

60001d70 <set_audioClock(int, long, unsigned long, bool)>:
    /******************************* 4-chan TDM ***********************************************/
    #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB

    PROGMEM
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
    {
60001d70:	push	{r4, r5}
60001d72:	ldr	r4, [pc, #140]	; (60001e00 <set_audioClock(int, long, unsigned long, bool)+0x90>)
        if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001d74:	cbnz	r3, 60001d7c <set_audioClock(int, long, unsigned long, bool)+0xc>
60001d76:	ldr	r3, [r4, #112]	; 0x70
60001d78:	lsls	r3, r3, #18
60001d7a:	bmi.n	60001dfa <set_audioClock(int, long, unsigned long, bool)+0x8a>

        CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                    | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 0: 1/4; 1: 1/2; 2: 1/1
                    | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001d7c:	and.w	r3, r0, #63	; 0x3f
60001d80:	orr.w	r3, r3, #1122304	; 0x112000
60001d84:	str	r3, [r4, #112]	; 0x70

        CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001d86:	bic.w	r3, r1, #3758096384	; 0xe0000000
60001d8a:	str.w	r3, [r4, #128]	; 0x80
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001d8e:	bic.w	r3, r2, #3758096384	; 0xe0000000
60001d92:	str.w	r3, [r4, #144]	; 0x90
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
60001d96:	ldr	r3, [r4, #112]	; 0x70
60001d98:	bic.w	r3, r3, #4096	; 0x1000
60001d9c:	str	r3, [r4, #112]	; 0x70
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001d9e:	ldr	r3, [pc, #96]	; (60001e00 <set_audioClock(int, long, unsigned long, bool)+0x90>)
60001da0:	ldr	r5, [r3, #112]	; 0x70
60001da2:	ldr	r4, [pc, #92]	; (60001e00 <set_audioClock(int, long, unsigned long, bool)+0x90>)
60001da4:	cmp	r5, #0
60001da6:	bge.n	60001da0 <set_audioClock(int, long, unsigned long, bool)+0x30>
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001da8:	vmov	s15, r1
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001dac:	ldr.w	r3, [r4, #368]	; 0x170
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001db0:	ldr	r1, [pc, #80]	; (60001e04 <set_audioClock(int, long, unsigned long, bool)+0x94>)
60001db2:	vcvt.f32.s32	s12, s15
60001db6:	vmov	s15, r2
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001dba:	bic.w	r3, r3, #8388608	; 0x800000
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001dbe:	vcvt.f32.u32	s13, s15
60001dc2:	vmov	s15, r0
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001dc6:	bic.w	r3, r3, #32768	; 0x8000
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001dca:	ldr	r0, [pc, #60]	; (60001e08 <set_audioClock(int, long, unsigned long, bool)+0x98>)
60001dcc:	vcvt.f32.s32	s15, s15
60001dd0:	vdiv.f32	s14, s12, s13
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001dd4:	str.w	r3, [r4, #368]	; 0x170
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
60001dd8:	ldr	r3, [r4, #112]	; 0x70
60001dda:	bic.w	r3, r3, #65536	; 0x10000
60001dde:	str	r3, [r4, #112]	; 0x70
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }
60001de0:	pop	{r4, r5}
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001de2:	vadd.f32	s15, s14, s15
60001de6:	vmov.f32	s14, #56	; 0x41c00000  24.0
60001dea:	vmul.f32	s15, s15, s14
60001dee:	vcvt.f64.f32	d7, s15
60001df2:	vmov	r2, r3, d7
60001df6:	b.w	60001e10 <___ZN5Print6printfEPKcz_veneer>
    }
60001dfa:	pop	{r4, r5}
60001dfc:	bx	lr
60001dfe:	nop
60001e00:	.word	0x400d8000
60001e04:	.word	0x20000f4e
60001e08:	.word	0x20001814
60001e0c:	.word	0x00000000

60001e10 <___ZN5Print6printfEPKcz_veneer>:
60001e10:	ldr.w	pc, [pc]	; 60001e14 <___ZN5Print6printfEPKcz_veneer+0x4>
60001e14:	.word	0x00009969

60001e18 <FsGetPartitionInfo::mbdpGuid>:
60001e18:	......3D..h..&..

60001e28 <usb_string_product_name_default>:
60001e28:	..U.S.B. .S.e.r.
60001e38:	i.a.l.

60001e3e <usb_string_manufacturer_name_default>:
60001e3e:	..T.e.e.n.s.y.d.
60001e4e:	u.i.n.o.

60001e56 <string0>:
60001e56:	....

60001e5a <usb_config_descriptor_12>:
60001e5a:	..K.....2.......
60001e6a:	...........$....
60001e7a:	$....$...$......
60001e8a:	................
60001e9a:	.@......@..

60001ea5 <usb_config_descriptor_480>:
60001ea5:	..K.....2.......
60001eb5:	...........$....
60001ec5:	$....$...$......
60001ed5:	................
60001ee5:	...........

60001ef0 <qualifier_descriptor>:
60001ef0:	.......@..

60001efa <_serialEvent_default>:
60001efa:	..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
	qh->config = config;
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	nop.w
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	movs	r4, #72	; 0x48
	qh->next = 1; // Terminate bit = 1
      3a:	movs	r0, #0
	qh->callback_function = callback;
      3c:	movs	r0, r0
      3e:	.short	0x0000
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      40:	lsrs	r4, r4, #18
      42:	.short	0x0001

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
    *--str = 'C';
    *--str = 'T';
    *--str = 'U';
  }
  return str;
}
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
      68:	.word	0x00000000
      6c:	movs	r4, #76	; 0x4c
      6e:	movs	r0, #0
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
		if (err < 0.0f) err = -err;
		if (err <= besterr) {
      70:	lsrs	r4, r4, #18
      72:	movs	r1, r0
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
      74:	.word	0x200022c0
	...

00000080 <acq_init(int)>:

    void acq_init(int fsamp)
    {
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
      80:	ldr	r2, [pc, #372]	; (1f8 <acq_init(int)+0x178>)
      82:	ldr	r3, [r2, #124]	; 0x7c
      84:	orr.w	r3, r3, #786432	; 0xc0000
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }

    void acq_init(int fsamp)
    {
      88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      8c:	vpush	{d8}
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
      90:	.word	0xb08267d3

        // if either transmitter or receiver is enabled, do nothing
        if (I2S1_RCSR & I2S_RCSR_RE) return;
      94:	ldr	r3, [pc, #356]	; (1fc <acq_init(int)+0x17c>)
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }

    void acq_init(int fsamp)
    {
      96:	mov	r4, r0
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);

        // if either transmitter or receiver is enabled, do nothing
        if (I2S1_RCSR & I2S_RCSR_RE) return;
      98:	ldr.w	r3, [r3, #136]	; 0x88
      9c:	cmp	r3, #0
      9e:	.short	0xf2c0
      a0:	strh	r2, [r3, #4]
        do
        {   n0++;
            n1=0;
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      a2:	.short	0x01c1
      a4:	ldr	r3, [pc, #344]	; (200 <acq_init(int)+0x180>)
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
      a6:	ldr	r0, [pc, #348]	; (204 <acq_init(int)+0x184>)
        do
        {   n0++;
            n1=0;
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      a8:	mov	r2, r1
        // PLL between 27*24 = 648MHz und 54*24=1296MHz
        int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
        int n1, n2;
        do
        {   n0++;
            n1=0;
      aa:	.short	0x2500
            do
            {   n1++; 
      ac:	adds	r6, r5, #1
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      ae:	sdiv	r7, r3, r2
      b2:	add.w	r8, r7, #1
            } while ((n2>64) && (n1<=8));
      b6:	.short	0xf1b8
      b8:	lsrs	r0, r0, #29
      ba:	ble.n	d2 <acq_init(int)+0x52>
      bc:	.word	0x440a2e09
      c0:	beq.n	c6 <acq_init(int)+0x46>
      c2:	.short	0x4635
      c4:	b.n	ac <acq_init(int)+0x2c>
      c6:	.short	0xf103
      c8:	strb	r7, [r6, #14]
      ca:	.short	0xf503
      cc:	strh	r0, [r3, r5]
        } while ((n2>64 && n0<54));
      ce:	.short	0x4283
      d0:	bne.n	a8 <acq_init(int)+0x28>
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      d2:	.short	0xf44f
      d4:	strb	r2, [r7, #13]
      d6:	mul.w	r2, r6, r8
      da:	.short	0x494b
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      dc:	and.w	r7, r7, #63	; 0x3f
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      e0:	.word	0x8000f8cd
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      e4:	lsls	r5, r5, #6
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      e6:	ldr	r0, [pc, #292]	; (20c <acq_init(int)+0x18c>)
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      e8:	.word	0x75e0f405
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      ec:	sdiv	r3, r4, r3
      f0:	muls	r3, r2
      f2:	movw	r2, #24000	; 0x5dc0
      f6:	.short	0x01db
      f8:	sdiv	r3, r3, r2
      fc:	.word	0x93014622
     100:	mov	r3, r6
     102:	.short	0xf009
     104:	ldc2	14, cr14, [r1], #-28	; 0xffffffe4

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
     108:	.word	0x49414a90
     10c:	vcvt.f64.s32	d7, s15
        Serial.printf(" C=%f\r\n",C);
     110:	.word	0xed9f483e
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
     114:	ldr	r3, [r6, #48]	; 0x30
     116:	.short	0xee27
     118:	ldrb	r6, [r0, #12]
     11a:	.short	0xee06
     11c:	ldr	r0, [r2, #40]	; 0x28
     11e:	.short	0xeeb8
     120:	ldr	r6, [r4, #60]	; 0x3c
     122:	.short	0xee27
     124:	ldrb	r6, [r0, #12]
     126:	.short	0xee06
     128:	ldrh	r0, [r2, #20]
     12a:	.short	0xeeb8
     12c:	ldr	r6, [r4, #60]	; 0x3c
     12e:	.short	0xee27
     130:	ldrb	r6, [r0, #12]
     132:	.short	0xed9f
     134:	ldr	r5, [r5, #48]	; 0x30
     136:	.short	0xee87
     138:	ldrh	r6, [r0, #24]
        Serial.printf(" C=%f\r\n",C);
     13a:	vmov	r2, r3, d8
     13e:	.short	0xf009
     140:	ldc2	14, cr14, [r3], {253}	; 0xfd
        int c0 = C;
     144:	.word	0xf2427bc8
        int c2 = 10'000;
        int c1 =  C * c2 - (c0 * c2);
        set_audioClock(c0, c1, c2, true);
     148:	strb	r0, [r2, #8]
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
        Serial.printf(" C=%f\r\n",C);
        int c0 = C;
     14a:	.short	0xee17
     14c:	lsrs	r0, r2, #10
        int c2 = 10'000;
        int c1 =  C * c2 - (c0 * c2);
        set_audioClock(c0, c1, c2, true);
     14e:	.short	0xfb02
     150:	.word	0xee07f300
     154:	subs	r2, #16
     156:	.short	0x2301
     158:	vldr	d6, [pc, #148]	; 1f0 <acq_init(int)+0x170>
     15c:	.word	0x7bc7eeb8
     160:	vfnms.f64	d7, d8, d6
     164:	.word	0x7bc7eefd
     168:	vmov	r1, s15
     16c:	.word	0xfd8cf010

        // clear SAI1_CLK register locations
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     170:	ldr	r2, [pc, #132]	; (1f8 <acq_init(int)+0x178>)

        //I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
        //dma.attachInterrupt(acq_isr, I2S_DMA_PRIO);	

        DMAMUX_CHCFG0 = DMAMUX_DISABLE;
        DMAMUX_CHCFG0 = DMAMUX_SOURCE_SAI1_RX | DMAMUX_ENABLE;
     172:	.short	0x2193
        int c2 = 10'000;
        int c1 =  C * c2 - (c0 * c2);
        set_audioClock(c0, c1, c2, true);

        // clear SAI1_CLK register locations
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     174:	ldr	r3, [r2, #28]
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     176:	bic.w	r3, r3, #3072	; 0xc00
     17a:	orr.w	r3, r3, #2048	; 0x800
     17e:	str	r3, [r2, #28]

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     180:	ldr	r3, [r2, #40]	; 0x28
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
     182:	.short	0xf423
     184:	strb	r7, [r7, #15]
     186:	.short	0xf023
     188:	lsls	r1, r0, #12
     18a:	.short	0x433b
     18c:	orrs	r5, r3
     18e:	str	r5, [r2, #40]	; 0x28

        IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
     190:	.word	0x22a0f5a2
     194:	ldr	r3, [r2, #4]
                | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
     196:	bic.w	r3, r3, #524288	; 0x80000
     19a:	bic.w	r3, r3, #7
     19e:	orr.w	r3, r3, #524288	; 0x80000
     1a2:	str	r3, [r2, #4]
        //DMA_SERQ = dma.channel;

        //I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
        //dma.attachInterrupt(acq_isr, I2S_DMA_PRIO);	

        DMAMUX_CHCFG0 = DMAMUX_DISABLE;
     1a4:	movs	r2, #0
     1a6:	ldr	r3, [pc, #108]	; (214 <acq_init(int)+0x194>)
     1a8:	.word	0x6019601a
        DMAMUX_CHCFG0 = DMAMUX_SOURCE_SAI1_RX | DMAMUX_ENABLE;

        // partial start I2S
        I2S1_RCSR |= I2S_RCSR_FR | I2S_RCSR_FRDE;
     1ac:	ldr	r1, [pc, #76]	; (1fc <acq_init(int)+0x17c>)
     1ae:	.short	0xf8d1
     1b0:	adds	r0, #136	; 0x88
     1b2:	.short	0xf043
     1b4:	strb	r0, [r0, #12]
     1b6:	.short	0xf043
     1b8:	lsls	r1, r0, #12
     1ba:	.short	0xf8c1
     1bc:	adds	r0, #136	; 0x88

        //start DMA
        _VectorsRam[IRQ_DMA_CH0 + 16] = acq_isr;
     1be:	ldr	r1, [pc, #88]	; (218 <acq_init(int)+0x198>)
     1c0:	.word	0x64194b16
        NVIC_SET_PRIORITY(IRQ_DMA_CH0, I2S_DMA_PRIO);
     1c4:	movs	r1, #80	; 0x50
     1c6:	.short	0x4b16
     1c8:	strb	r1, [r3, #0]
        NVIC_ENABLE_IRQ(IRQ_DMA_CH0); 
     1ca:	.short	0xf5a3
     1cc:	strb	r0, [r0, #13]
     1ce:	.short	0x2101
     1d0:	str	r1, [r3, #0]
        DMA_SERQ = 0;
     1d2:	ldr	r3, [pc, #80]	; (224 <acq_init(int)+0x1a4>)
     1d4:	strb	r2, [r3, #27]

    }
     1d6:	add	sp, #8
     1d8:	vpop	{d8}
     1dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1e0:	movs	r0, r0
     1e2:	movs	r0, r0
     1e4:	movs	r0, r0
     1e6:	eors	r0, r4
     1e8:	movs	r0, r0
     1ea:	movs	r0, r0
     1ec:	b.n	8b0 <SDFile::seek(unsigned long long, int)+0x54>
     1ee:	adcs	r6, r6
     1f0:	movs	r0, r0
     1f2:	.short	0x0000
     1f4:	ldrh	r0, [r0, #0]
     1f6:	lsrs	r3, r0
     1f8:	stmia	r0!, {}
     1fa:	.short	0x400f
     1fc:	ands	r0, r0
     1fe:	ands	r0, r7
     200:	sxth	r0, r0
     202:	movs	r6, #159	; 0x9f
     204:	ldr	r2, [sp, #0]
     206:	ldr	r6, [pc, #692]	; (4bc <SDFile::getCreateTime(DateTimeFields&)+0x14>)
     208:	lsrs	r7, r2, #29
     20a:	movs	r0, #0
     20c:	adds	r4, r2, r0
     20e:	movs	r0, #0
     210:	.word	0x20000f7e
     214:	stmia	r0!, {}
     216:	ands	r6, r1
     218:	.word	0x00000271
     21c:	movs	r0, #0
     21e:	movs	r0, #0
     220:	b.n	fffffa24 <_flexram_bank_config+0x55554f65>
     222:	.short	0xe000
     224:	strh	r0, [r0, #0]
     226:	.short	0x400e

00000228 <acq_start()>:

    void acq_start(void)
    {
        //DMA_SERQ = dma.channel;
        I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
     228:	ldr	r2, [pc, #12]	; (238 <acq_start()+0x10>)
     22a:	.short	0xf8d2
     22c:	adds	r0, #136	; 0x88
     22e:	orr.w	r3, r3, #2415919104	; 0x90000000
     232:	str.w	r3, [r2, #136]	; 0x88
     236:	.short	0x4770
     238:	ands	r0, r0
     23a:	.short	0x4038

0000023c <acq_stop()>:
    }

    void acq_stop(void)
    {
        I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     23c:	ldr	r2, [pc, #12]	; (24c <acq_stop()+0x10>)
     23e:	ldr.w	r3, [r2, #136]	; 0x88
     242:	bic.w	r3, r3, #2415919104	; 0x90000000
     246:	str.w	r3, [r2, #136]	; 0x88
     24a:	bx	lr
     24c:	.word	0x40384000

00000250 <extract(void*, void*)>:


    const int adc_shift=8;
    #if ADC_STEREO // have stereo I2S
        void extract(void *out, void *inp)
        {   int32_t *dout = (int32_t *) out;
     250:	movs	r3, #0
     252:	.short	0xb510
            int32_t *din  = (int32_t *) inp;
            for(int ii=0; ii < NSAMP; ii++)
            {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     254:	ldr	r2, [r1, r3]
                dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     256:	adds	r4, r0, r3
    #if ADC_STEREO // have stereo I2S
        void extract(void *out, void *inp)
        {   int32_t *dout = (int32_t *) out;
            int32_t *din  = (int32_t *) inp;
            for(int ii=0; ii < NSAMP; ii++)
            {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     258:	.word	0x50c21212
                dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     25c:	adds	r2, r1, r3
     25e:	.short	0x3308
     260:	ldr	r2, [r2, #4]
    const int adc_shift=8;
    #if ADC_STEREO // have stereo I2S
        void extract(void *out, void *inp)
        {   int32_t *dout = (int32_t *) out;
            int32_t *din  = (int32_t *) inp;
            for(int ii=0; ii < NSAMP; ii++)
     262:	cmp.w	r3, #1024	; 0x400
            {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
                dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     266:	.short	0xea4f
     268:	movs	r2, #34	; 0x22
     26a:	str	r2, [r4, #4]
    const int adc_shift=8;
    #if ADC_STEREO // have stereo I2S
        void extract(void *out, void *inp)
        {   int32_t *dout = (int32_t *) out;
            int32_t *din  = (int32_t *) inp;
            for(int ii=0; ii < NSAMP; ii++)
     26c:	.word	0xbd10d1f2

00000270 <acq_isr()>:
            }
        }
    #endif

    void acq_isr(void)
    {
     270:	push	{r3, lr}
        uint32_t daddr;
        uint32_t *src;

        DMA_CINT = 0;
     272:	.short	0x2200
     274:	ldr	r3, [pc, #84]	; (2cc <acq_isr()+0x5c>)
     276:	strb	r2, [r3, #31]
        daddr = (uint32_t) DMA_TCD0_DADDR;
     278:	.word	0x5380f503
     27c:	ldr	r2, [r3, #16]
        asm volatile("dsb");
     27e:	.short	0xf3bf
     280:	ldrh	r7, [r1, #58]	; 0x3a

        if (daddr < ((uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2)) {
     282:	.short	0x4913
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     284:	sub.w	r3, r1, #1024	; 0x400
     288:	.word	0xbf28428a
     28c:	movcs	r1, r3
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     28e:	.short	0xf021
     290:	lsls	r7, r3, #12
	uint32_t end_addr = (uint32_t)addr + size;
     292:	.short	0xf501
     294:	str	r0, [r0, #40]	; 0x28
	asm volatile("": : :"memory");
	asm("dsb");
     296:	.short	0xf3bf
     298:	ldrh	r7, [r1, #58]	; 0x3a
	do {
		SCB_CACHE_DCIMVAC = location;
     29a:	ldr	r0, [pc, #56]	; (2d4 <acq_isr()+0x64>)
     29c:	.word	0x33206003
		location += 32;
	} while (location < end_addr);
     2a0:	cmp	r2, r3
     2a2:	.short	0xd8fb
	asm("dsb");
     2a4:	dsb	sy
	asm("isb");
     2a8:	.word	0x8f6ff3bf

        #if IMXRT_CACHE_ENABLED >=1
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        extract((void *) acq_rx_buffer, (void *) src);
     2ac:	ldr	r0, [pc, #40]	; (2d8 <acq_isr()+0x68>)
     2ae:	.short	0xf7ff
     2b0:	vmlal.u8	q10, d15, d9

        if(!pushData(acq_rx_buffer)) acq_miss++;
     2b4:	.word	0xf93af001
     2b8:	cbnz	r0, 2c2 <acq_isr()+0x52>
     2ba:	ldr	r2, [pc, #32]	; (2dc <acq_isr()+0x6c>)
     2bc:	.word	0x33016813
     2c0:	str	r3, [r2, #0]
        acq_count++;
     2c2:	ldr	r2, [pc, #28]	; (2e0 <acq_isr()+0x70>)
     2c4:	.word	0x33016813
     2c8:	str	r3, [r2, #0]
     2ca:	.short	0xbd08
     2cc:	strh	r0, [r0, #0]
     2ce:	.short	0x400e
     2d0:	lsls	r0, r0, #16
     2d2:	.short	0x2020
     2d4:	vhadd.s16	d30, d12, d0
     2d8:	.word	0x20003138
     2dc:	adds	r5, #200	; 0xc8
     2de:	movs	r0, #0
     2e0:	.word	0x200035c4

000002e4 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2e4:	push	{r3, r4, r5, lr}
     2e6:	.short	0x4604
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     2e8:	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2ea:	.short	0x460d
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     2ec:	bl	ab40 <strlen>
     2f0:	ldr	r3, [r4, #0]
     2f2:	mov	r2, r0
     2f4:	mov	r1, r5
     2f6:	.short	0x4620
     2f8:	ldr	r3, [r3, #4]
     2fa:	.short	0x4798
     2fc:	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2fe:	.short	0x4620
     300:	bl	9948 <Print::println()>
     304:	.word	0xbd384428

00000308 <checkToCloseFile(short, unsigned long)>:

uint32_t t_start;

/* check if we should close file */
int16_t checkToCloseFile(int16_t status, uint32_t t_acq)
{ if((status == OPENED) || (status == RUNNING))
     308:	push	{r3, r4, r5, lr}
     30a:	.short	0x1e43
     30c:	mov	r5, r0
     30e:	.short	0x460c
     310:	uxth	r3, r3
     312:	.short	0x2b01
     314:	bhi.n	32e <checkToCloseFile(short, unsigned long)+0x26>
  {
    //
    static uint32_t to =0;
    uint32_t tx=rtc_get();
     316:	.short	0xf009
     318:	ldr.w	r4, [r5], #6
    tx %= t_acq;
     31c:	.word	0xf1f4fbb0
    if(tx<to) status = DOCLOSE; // time wrapped, file must be closed
     320:	ldr	r2, [r3, #0]
{ if((status == OPENED) || (status == RUNNING))
  {
    //
    static uint32_t to =0;
    uint32_t tx=rtc_get();
    tx %= t_acq;
     322:	.short	0xfb01
     324:	movs	r4, r2
    if(tx<to) status = DOCLOSE; // time wrapped, file must be closed
     326:	.short	0x4290
     328:	it	cc
     32a:	.short	0x2503
    to=tx;
     32c:	str	r0, [r3, #0]
  } 
  return status;
}
     32e:	.short	0x4628
     330:	pop	{r3, r4, r5, pc}
     332:	.short	0xbf00
     334:	adds	r5, #136	; 0x88
     336:	.short	0x2000

00000338 <setup>:

void setup()
{
     338:	push	{r3, r4, r5, lr}
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     33a:	.short	0x4811
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     33c:	ldr	r4, [pc, #68]	; (384 <setup+0x4c>)
     33e:	.short	0x4d12
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     340:	ldr	r1, [pc, #72]	; (38c <setup+0x54>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     342:	.short	0x7823
     344:	cmp	r3, #0
     346:	.short	0xd0fc
     348:	ldrb	r3, [r5, #0]
     34a:	lslcc	r3, r3, #31
     34c:	bpl.n	342 <setup+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34e:	.short	0x6803
     350:	ldr	r2, [r1, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     352:	.short	0x1a9b
     354:	cmp	r3, #14
     356:	.short	0xd9f4
  while(!Serial) continue;

  Serial.println("basic Sound Recorder Version: " __DATE__  " " __TIME__ );
     358:	ldr	r1, [pc, #52]	; (390 <setup+0x58>)
     35a:	.short	0x480e
     35c:	bl	2e4 <Print::println(char const*)>

  storage_configure();
     360:	bl	15e0 <storage_configure()>
  
  adc_init();
     364:	.word	0xfd66f001
  acq_init(FSAMP);
     368:	movw	r0, #48000	; 0xbb80
     36c:	.word	0xfe88f7ff

  acq_start(); 
     370:	bl	228 <acq_start()>

  Serial.println("End of Setup");
     374:	ldr	r1, [pc, #32]	; (398 <setup+0x60>)
     376:	.short	0x4807
     378:	bl	2e4 <Print::println(char const*)>
     37c:	.word	0xbf00bd38
     380:	strh	r4, [r7, #62]	; 0x3e
     382:	.short	0x2000
     384:	ldrh	r1, [r7, #24]
     386:	.short	0x2000
     388:	ldrh	r0, [r7, #24]
     38a:	.short	0x2000
     38c:	ldrh	r0, [r1, #28]
     38e:	.short	0x2000
     390:	lsrs	r6, r0, #30
     392:	.short	0x2000
     394:	adds	r4, r2, r0
     396:	.short	0x2000
     398:	lsrs	r1, r7, #30
     39a:	.short	0x2000

0000039c <loop>:
}

void loop()
{ static int16_t status=START_MODE; 
     39c:	push	{r4, r5, r6, lr}

  if(status==MUST_REBOOT) status=checkReboot(); // hapens only if microSD card write fails: reboot if space on disk
     39e:	.short	0x4c1e
     3a0:	ldrsh.w	r3, [r4]
     3a4:	.word	0xd1023302
     3a8:	bl	1914 <checkReboot()>
     3ac:	.word	0xf0008020

  // normal operation
  int16_t ch=menu();  // check if we have serial line command (0: no input; 1: start; -1: stop)
     3b0:	stc2	8, cr2, [r7, #-0]

  if(ch>0 && status==STOPPED)  // was stopped, should run now 
     3b4:	.word	0xf9b4dd08
     3b8:	adds	r0, #0
     3ba:	.short	0x3301
     3bc:	bne.n	3dc <loop+0x40>
  { 
    acq_start(); adcStatus();
     3be:	.short	0xf7ff
     3c0:	vhadd.u<illegal width 64>	d15, d3, d1
     3c4:	ldc2	0, cr14, [r8, #-36]!	; 0xffffffdc
  }  
  
  if(ch<0 && status>=CLOSED)  // was running, should stop now
     3c8:	beq.n	3dc <loop+0x40>
     3ca:	ldrsh.w	r3, [r4]
     3ce:	cmp	r3, #0
     3d0:	blt.n	416 <loop+0x7a>
  { status=MUSTSTOP;  acq_stop();  
     3d2:	movs	r2, #4
     3d4:	ldr	r3, [pc, #64]	; (418 <loop+0x7c>)
     3d6:	strh	r2, [r3, #0]
     3d8:	bl	23c <acq_stop()>
  } 

  if(status >= CLOSED) // CLOSED or HIGHER
     3dc:	ldrsh.w	r0, [r4]
     3e0:	ldr	r5, [pc, #52]	; (418 <loop+0x7c>)
     3e2:	cmp	r0, #0
     3e4:	blt.n	416 <loop+0x7a>
  {
    uint32_t to=millis();
    status = checkToCloseFile(status, (uint32_t) t_acq); // check if we reached file size or aquisition time
     3e6:	ldr	r3, [pc, #52]	; (41c <loop+0x80>)
     3e8:	ldr	r4, [pc, #52]	; (420 <loop+0x84>)
     3ea:	ldr	r1, [r3, #0]
     3ec:	.word	0xf7ff6826
     3f0:	vaddl.u8	q4, d11, d24
    //
    status = saveData(status);  
     3f4:	bl	1948 <saveData(short)>
     3f8:	strh	r0, [r5, #0]
    //
    uint32_t mc = getCount();
     3fa:	.short	0xf001
     3fc:	strb.w	r4, [fp, #2569]	; 0xa09
    if(mc>max_count) max_count=mc;
     400:	ldr	r3, [r2, #0]
     402:	cmp	r0, r3
     404:	.word	0xbf886823
     408:	strhi	r0, [r2, #0]
    //
    uint32_t dt=millis()-to;
     40a:	subs	r3, r3, r6
    if(max_write<dt) max_write=dt;
     40c:	ldr	r2, [pc, #24]	; (428 <loop+0x8c>)
     40e:	ldr	r1, [r2, #0]
     410:	cmp	r3, r1
     412:	it	hi
     414:	strhi	r3, [r2, #0]
     416:	pop	{r4, r5, r6, pc}
     418:	adds	r4, r2, #7
     41a:	movs	r0, #0
     41c:	adds	r0, r2, #7
     41e:	movs	r0, #0
     420:	strh	r4, [r7, #62]	; 0x3e
     422:	movs	r0, #0
     424:	.word	0x20006644
     428:	str	r0, [r1, #100]	; 0x64
     42a:	.short	0x2000

0000042c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     42c:	movs	r0, #0
     42e:	bx	lr

00000430 <Print::flush()>:
	virtual void flush()				{ }
     430:	bx	lr

00000432 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}

	// override print version
	virtual size_t write(const uint8_t *buf, size_t size) {
		return (f) ? f->write((void*)buf, size) : 0;
     432:	ldr	r0, [r0, #16]
     434:	cbz	r0, 43c <File::write(unsigned char const*, unsigned int)+0xa>
     436:	ldr	r3, [r0, #0]
     438:	.word	0x471868db
	}
     43c:	bx	lr

0000043e <File::available()>:

	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	int available() {
		return (f) ? f->available() : 0;
     43e:	.short	0x6900
     440:	cbz	r0, 448 <File::available()+0xa>
     442:	ldr	r3, [r0, #0]
     444:	ldr	r3, [r3, #16]
     446:	bx	r3
	}
     448:	bx	lr

0000044a <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     44a:	ldr	r0, [r0, #16]
     44c:	cbz	r0, 454 <File::peek()+0xa>
     44e:	ldr	r3, [r0, #0]
     450:	.word	0x4718695b
	}
     454:	mov.w	r0, #4294967295
     458:	bx	lr

0000045a <File::flush()>:
	void flush() {
		if (f) f->flush();
     45a:	ldr	r0, [r0, #16]
     45c:	cbz	r0, 464 <File::flush()+0xa>
     45e:	ldr	r3, [r0, #0]
     460:	ldr	r3, [r3, #24]
     462:	bx	r3
     464:	bx	lr

00000466 <File::read()>:
		return (f) ? f->setModifyTime(tm) : false;
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     466:	.short	0xb507
		if (!f) return -1;
     468:	ldr	r0, [r0, #16]
     46a:	cbnz	r0, 472 <File::read()+0xc>
     46c:	mov.w	r0, #4294967295
     470:	b.n	486 <File::read()+0x20>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     472:	ldr	r3, [r0, #0]
     474:	movs	r2, #1
     476:	add.w	r1, sp, #7
     47a:	ldr	r3, [r3, #8]
     47c:	blx	r3
     47e:	cmp	r0, #0
     480:	beq.n	46c <File::read()+0x6>
		return b;
     482:	ldrb.w	r0, [sp, #7]
	}
     486:	.short	0xb003
     488:	ldr.w	pc, [sp], #4

0000048c <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     48c:	push	{r0, r1, r2, lr}
		return (f) ? f->write(&b, 1) : 0;
     48e:	ldr	r0, [r0, #16]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     490:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     494:	cbz	r0, 4a2 <File::write(unsigned char)+0x16>
     496:	ldr	r3, [r0, #0]
     498:	movs	r2, #1
     49a:	add.w	r1, sp, #7
     49e:	ldr	r3, [r3, #12]
     4a0:	blx	r3
	}
     4a2:	add	sp, #12
     4a4:	.word	0xfb04f85d

000004a8 <SDFile::getCreateTime(DateTimeFields&)>:
		return File();
	}
	virtual void rewindDirectory(void) {
		sdfatfile.rewindDirectory();
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
     4a8:	push	{r0, r1, r4, lr}
     4aa:	mov	r3, r0
   * \param[out] ptime Packed time for directory entry.
   *
   * \return true for success or false for failure.
   */
  bool getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     4ac:	ldr	r0, [r0, #80]	; 0x50
     4ae:	mov	r4, r1
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     4b0:	.word	0xf10db128
     4b4:	lsls	r6, r0, #8
     4b6:	add	r1, sp, #4
     4b8:	bl	549a <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     4bc:	b.n	4d0 <SDFile::getCreateTime(DateTimeFields&)+0x28>
     4be:	.short	0x6d58
     4c0:	cbnz	r0, 4c6 <SDFile::getCreateTime(DateTimeFields&)+0x1e>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     4c2:	.short	0x2000
     4c4:	b.n	50a <SDFile::getCreateTime(DateTimeFields&)+0x62>
     4c6:	.short	0xf10d
     4c8:	lsls	r6, r0, #8
     4ca:	add	r1, sp, #4
     4cc:	bl	31a6 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     4d0:	.word	0xd0f62800
		if ((fat_date == 0) && (fat_time == 0)) return false;
     4d4:	ldrh.w	r3, [sp, #4]
     4d8:	.word	0x2006f8bd
     4dc:	cbnz	r3, 4e2 <SDFile::getCreateTime(DateTimeFields&)+0x3a>
     4de:	.short	0x2a00
     4e0:	beq.n	4c2 <SDFile::getCreateTime(DateTimeFields&)+0x1a>
		tm.sec = FS_SECOND(fat_time);
     4e2:	and.w	r1, r2, #31
     4e6:	lsls	r1, r1, #1
     4e8:	strb	r1, [r4, #0]
		tm.min = FS_MINUTE(fat_time);
     4ea:	ubfx	r1, r2, #5, #6
		tm.hour = FS_HOUR(fat_time);
     4ee:	asrs	r2, r2, #11
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
     4f0:	strb	r1, [r4, #1]
		tm.hour = FS_HOUR(fat_time);
     4f2:	strb	r2, [r4, #2]
		tm.mday = FS_DAY(fat_date);
     4f4:	.word	0x021ff003
     4f8:	strb	r2, [r4, #4]
		tm.mon = FS_MONTH(fat_date) - 1;
     4fa:	ubfx	r2, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
     4fe:	asrs	r3, r3, #9
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     500:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
     502:	add.w	r3, r3, #1872	; 0x750
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     506:	strb	r2, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
     508:	strb	r3, [r4, #6]
		return true;
	}
     50a:	add	sp, #8
     50c:	Address 0x0000050c is out of bounds.


0000050e <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     50e:	push	{r0, r1, r4, lr}
     510:	mov	r3, r0
   * \param[out] ptime Packed time for directory entry.
   *
   * \return true for success or false for failure.
   */
  bool getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     512:	ldr	r0, [r0, #80]	; 0x50
     514:	mov	r4, r1
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     516:	cbz	r0, 524 <SDFile::getModifyTime(DateTimeFields&)+0x16>
     518:	add.w	r2, sp, #6
     51c:	add	r1, sp, #4
     51e:	bl	54ba <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     522:	b.n	536 <SDFile::getModifyTime(DateTimeFields&)+0x28>
     524:	ldr	r0, [r3, #84]	; 0x54
     526:	cbnz	r0, 52c <SDFile::getModifyTime(DateTimeFields&)+0x1e>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     528:	movs	r0, #0
     52a:	b.n	570 <SDFile::getModifyTime(DateTimeFields&)+0x62>
     52c:	.word	0x0206f10d
     530:	add	r1, sp, #4
     532:	bl	31c6 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     536:	cmp	r0, #0
     538:	beq.n	528 <SDFile::getModifyTime(DateTimeFields&)+0x1a>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     53a:	.short	0xf8bd
     53c:	adds	r0, #4
     53e:	ldrh.w	r2, [sp, #6]
     542:	cbnz	r3, 548 <SDFile::getModifyTime(DateTimeFields&)+0x3a>
     544:	cmp	r2, #0
     546:	beq.n	528 <SDFile::getModifyTime(DateTimeFields&)+0x1a>
		tm.sec = FS_SECOND(fat_time);
     548:	and.w	r1, r2, #31
     54c:	lsls	r1, r1, #1
     54e:	.short	0x7021
		tm.min = FS_MINUTE(fat_time);
     550:	ubfx	r1, r2, #5, #6
		tm.hour = FS_HOUR(fat_time);
     554:	asrs	r2, r2, #11
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
     556:	.short	0x7061
		tm.hour = FS_HOUR(fat_time);
     558:	strb	r2, [r4, #2]
		tm.mday = FS_DAY(fat_date);
     55a:	.short	0xf003
     55c:	lsls	r7, r3, #8
     55e:	strb	r2, [r4, #4]
		tm.mon = FS_MONTH(fat_date) - 1;
     560:	ubfx	r2, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
     564:	asrs	r3, r3, #9
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     566:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
     568:	add.w	r3, r3, #1872	; 0x750
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     56c:	.word	0x71a37162
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
     570:	add	sp, #8
     572:	pop	{r4, pc}

00000574 <SDFile::name()>:
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     574:	push	{r3, r4, r5, lr}
		if (!filename) {
     576:	ldr	r5, [r0, #88]	; 0x58
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     578:	.word	0xb9bd4604
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     57c:	mov.w	r0, #256	; 0x100
     580:	.word	0xfcb6f009
     584:	mov	r1, r0
     586:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     588:	.word	0x7005b170
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     58c:	ldr	r0, [r4, #80]	; 0x50
           m_xFile ? m_xFile->getName(name, len) : 0;
     58e:	.short	0xb120
     590:	mov.w	r2, #256	; 0x100
     594:	bl	4d8c <FatFile::getName(char*, unsigned int)>
     598:	b.n	5ac <SDFile::name()+0x38>
     59a:	ldr	r0, [r4, #84]	; 0x54
     59c:	cbz	r0, 5ac <SDFile::name()+0x38>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     59e:	mov.w	r2, #256	; 0x100
     5a2:	bl	3048 <ExFatFile::getName8(char*, unsigned int)>
     5a6:	b.n	5ac <SDFile::name()+0x38>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     5a8:	ldr	r3, [pc, #4]	; (5b0 <SDFile::name()+0x3c>)
     5aa:	str	r3, [r4, #88]	; 0x58
			}
		}
		return filename;
	}
     5ac:	ldr	r0, [r4, #88]	; 0x58
     5ae:	pop	{r3, r4, r5, pc}
     5b0:	ldrh	r6, [r2, #24]
     5b2:	movs	r0, #0

000005b4 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     5b4:	.word	0x6d04b5d0
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     5b8:	cbz	r4, 5d6 <SDFile::truncate(unsigned long long)+0x22>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     5ba:	.short	0x2b01
     5bc:	it	eq
     5be:	cmpeq	r2, #0
     5c0:	.word	0x4611d214
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     5c4:	mov	r0, r4
     5c6:	bl	50ca <FatFile::seekSet(unsigned long)>
     5ca:	.short	0xb178
     5cc:	mov	r0, r4
     5ce:	bl	58d4 <FatFile::truncate()>
     5d2:	cbz	r0, 5ec <SDFile::truncate(unsigned long long)+0x38>
     5d4:	.word	0x6d44bdd0
           m_xFile ? m_xFile->truncate(length) : false;
     5d8:	cbz	r4, 5ec <SDFile::truncate(unsigned long long)+0x38>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     5da:	.short	0x4620
     5dc:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
     5e0:	.word	0x4620b120
		return sdfatfile.truncate(size);
	}
     5e4:	ldmia.w	sp!, {r4, r6, r7, lr}
     5e8:	.word	0xbf22f003
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     5ec:	movs	r0, #0
     5ee:	.short	0xbdd0

000005f0 <File::dec_refcount() [clone .isra.15]>:
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
     5f0:	push	{r4, lr}
     5f2:	.short	0x4604
		if (--(f->refcount) == 0) {
     5f4:	ldr	r0, [r0, #0]
     5f6:	.short	0x6843
     5f8:	subs	r3, #1
     5fa:	.short	0x6043
     5fc:	cbnz	r3, 60e <File::dec_refcount() [clone .isra.15]+0x1e>
			f->close();
     5fe:	.short	0x6803
     600:	ldr	r3, [r3, #44]	; 0x2c
     602:	.short	0x4798
			delete f;
     604:	ldr	r0, [r4, #0]
     606:	.short	0xb110
     608:	ldr	r3, [r0, #0]
     60a:	.short	0x685b
     60c:	blx	r3
		}
		f = nullptr;
     60e:	.short	0x2300
     610:	str	r3, [r4, #0]
     612:	pop	{r4, pc}

00000614 <File::~File()>:
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
		f = file.f;
		return *this;
	}
#endif
	virtual ~File() {
     614:	ldr	r3, [pc, #20]	; (62c <File::~File()+0x18>)
     616:	push	{r4, lr}
     618:	str	r3, [r0, #0]
     61a:	.short	0x4604
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
     61c:	ldr	r3, [r0, #16]
     61e:	.short	0xb113
     620:	adds	r0, #16
     622:	bl	5f0 <File::dec_refcount() [clone .isra.15]>
	}
     626:	.short	0x4620
     628:	pop	{r4, pc}
     62a:	.short	0xbf00
     62c:	lsls	r0, r4, #18
     62e:	.short	0x2000

00000630 <File::~File()>:
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
		f = file.f;
		return *this;
	}
#endif
	virtual ~File() {
     630:	push	{r4, lr}
     632:	mov	r4, r0
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
     634:	bl	614 <File::~File()>
     638:	movs	r1, #20
     63a:	.short	0x4620
     63c:	bl	9ab6 <operator delete(void*, unsigned int)>
     640:	mov	r0, r4
     642:	pop	{r4, pc}

00000644 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     644:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->curPosition() : 0;
     646:	cbz	r3, 64e <SDFile::position()+0xa>
     648:	.word	0x21006958
     64c:	bx	lr
     64e:	.short	0x6d43
     650:	cbz	r3, 658 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     652:	.short	0xe893
     654:	movs	r3, r0
     656:	.short	0x4770
     658:	mov	r0, r3
     65a:	.short	0xe7f6

0000065c <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     65c:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->fileSize() : 0;
     65e:	.short	0xb113
     660:	ldr	r0, [r3, #28]
     662:	.short	0x2100
     664:	bx	lr
     666:	.short	0x6d43
     668:	cbz	r3, 670 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     66a:	.short	0x6918
     66c:	ldr	r1, [r3, #20]
     66e:	.short	0x4770
     670:	mov	r0, r3
     672:	.short	0xe7f6

00000674 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     674:	push	{r4, r5, r6, lr}
     676:	.short	0x4604
     678:	mov	r0, r1
     67a:	.short	0x460d
     67c:	bl	ab40 <strlen>
     680:	ldr	r3, [r4, #0]
     682:	mov	r2, r0
     684:	mov	r1, r5
     686:	mov	r0, r4
     688:	ldr	r3, [r3, #4]
     68a:	ldmia.w	sp!, {r4, r5, r6, lr}
     68e:	bx	r3

00000690 <FsBaseFile::available() const>:
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
     690:	ldr	r2, [r0, #56]	; 0x38
    */
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
     692:	push	{r4, r5, lr}
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     694:	cbz	r2, 6b0 <FsBaseFile::available() const+0x20>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     696:	ldrb	r3, [r2, #0]
     698:	and.w	r3, r3, #8
     69c:	and.w	r0, r3, #255	; 0xff
     6a0:	cbz	r3, 6e2 <FsBaseFile::available() const+0x52>
     6a2:	ldr	r3, [r2, #28]
     6a4:	ldr	r0, [r2, #20]
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     6a6:	subs	r0, r3, r0
     6a8:	bpl.n	6e2 <FsBaseFile::available() const+0x52>
     6aa:	mvn.w	r0, #2147483648	; 0x80000000
     6ae:	b.n	6e2 <FsBaseFile::available() const+0x52>
     6b0:	ldr	r0, [r0, #60]	; 0x3c
     6b2:	.short	0xb1b0
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     6b4:	ldrb.w	r3, [r0, #49]	; 0x31
     6b8:	lsls	r3, r3, #28
     6ba:	bpl.n	6cc <FsBaseFile::available() const+0x3c>
     6bc:	ldrd	r4, r5, [r0, #16]
     6c0:	ldrd	r2, r3, [r0]
     6c4:	subs	r0, r4, r2
     6c6:	sbc.w	r1, r5, r3
     6ca:	b.n	6d0 <FsBaseFile::available() const+0x40>
     6cc:	movs	r0, #0
     6ce:	movs	r1, #0
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint64_t n = available64();
    return n > INT_MAX ? INT_MAX : n;
     6d0:	movs	r3, #0
     6d2:	mvn.w	r2, #2147483648	; 0x80000000
     6d6:	cmp	r3, r1
     6d8:	it	eq
     6da:	cmpeq	r2, r0
     6dc:	bcs.n	6e2 <FsBaseFile::available() const+0x52>
     6de:	mov	r0, r2
     6e0:	pop	{r4, r5, pc}
  }
     6e2:	pop	{r4, r5, pc}

000006e4 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     6e4:	push	{r3, lr}
    return BaseFile::available();
     6e6:	adds	r0, #16
     6e8:	bl	690 <FsBaseFile::available() const>
  }
     6ec:	pop	{r3, pc}

000006ee <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     6ee:	push	{r3, lr}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return BaseFile::available();
     6f0:	adds	r0, #24
     6f2:	bl	690 <FsBaseFile::available() const>
		return sdfatfile.available();
	}
     6f6:	pop	{r3, pc}

000006f8 <FsBaseFile::isDir() const>:
    return m_xFile ? m_xFile->isContiguous() : false;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
     6f8:	ldr	r3, [r0, #56]	; 0x38
           m_xFile ? m_xFile->isDir() : false;
     6fa:	cbz	r3, 704 <FsBaseFile::isDir() const+0xc>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     6fc:	ldrb	r3, [r3, #0]
     6fe:	tst.w	r3, #112	; 0x70
     702:	b.n	710 <FsBaseFile::isDir() const+0x18>
     704:	ldr	r0, [r0, #60]	; 0x3c
     706:	cbz	r0, 716 <FsBaseFile::isDir() const+0x1e>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     708:	ldrb.w	r3, [r0, #49]	; 0x31
     70c:	tst.w	r3, #80	; 0x50
     710:	ite	ne
     712:	movne	r0, #1
     714:	moveq	r0, #0
  }
     716:	bx	lr

00000718 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     718:	push	{r3, lr}
  }
  /** This function reports if the current file is a directory or not.
  * \return true if the file is a directory.
  */
  bool isDirectory() {
    return BaseFile::isDir();
     71a:	adds	r0, #24
     71c:	bl	6f8 <FsBaseFile::isDir() const>
		return sdfatfile.isDirectory();
	}
     720:	pop	{r3, pc}

00000722 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     722:	push	{r4, lr}
     724:	mov	r4, r0
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     726:	adds	r0, #24
     728:	bl	6f8 <FsBaseFile::isDir() const>
     72c:	cbz	r0, 748 <SDFile::rewindDirectory()+0x26>
    return m_fFile ? m_fFile->rename(dirFile->m_fFile, newPath) :
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
     72e:	ldr	r0, [r4, #80]	; 0x50
     730:	cbz	r0, 738 <SDFile::rewindDirectory()+0x16>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     732:	movs	r1, #0
     734:	bl	50ca <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     738:	ldr	r0, [r4, #84]	; 0x54
     73a:	cbz	r0, 748 <SDFile::rewindDirectory()+0x26>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     73c:	movs	r2, #0
     73e:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     740:	ldmia.w	sp!, {r4, lr}
     744:	b.w	3436 <ExFatFile::seekSet(unsigned long long)>
     748:	pop	{r4, pc}

0000074a <FsBaseFile::isOpen() const>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     74a:	ldr	r3, [r0, #56]	; 0x38
     74c:	cbnz	r3, 758 <FsBaseFile::isOpen() const+0xe>
     74e:	ldr	r0, [r0, #60]	; 0x3c
     750:	adds	r0, #0
     752:	it	ne
     754:	movne	r0, #1
     756:	bx	lr
     758:	movs	r0, #1
     75a:	bx	lr

0000075c <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     75c:	push	{r4, lr}
     75e:	mov	r4, r0
		if (filename) {
     760:	ldr	r0, [r0, #88]	; 0x58
     762:	cbz	r0, 76c <SDFile::close()+0x10>
			free(filename);
     764:	bl	9f00 <free>
			filename = nullptr;
     768:	movs	r3, #0
     76a:	str	r3, [r4, #88]	; 0x58
		}
		if (sdfatfile.isOpen()) {
     76c:	adds	r4, #24
     76e:	mov	r0, r4
     770:	bl	74a <FsBaseFile::isOpen() const>
     774:	cbz	r0, 780 <SDFile::close()+0x24>
			sdfatfile.close();
     776:	mov	r0, r4
		}
	}
     778:	ldmia.w	sp!, {r4, lr}
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
     77c:	b.w	65f0 <FsBaseFile::close()>
     780:	pop	{r4, pc}
	...

00000784 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     784:	ldr	r3, [pc, #24]	; (7a0 <SDFile::~SDFile()+0x1c>)
     786:	push	{r4, lr}
     788:	str	r3, [r0, #0]
     78a:	mov	r4, r0
		close();
     78c:	bl	75c <SDFile::close()>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     790:	ldr	r3, [pc, #16]	; (7a4 <SDFile::~SDFile()+0x20>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     792:	add.w	r0, r4, #24
     796:	str	r3, [r4, #8]
     798:	bl	65f0 <FsBaseFile::close()>
	}
     79c:	mov	r0, r4
     79e:	pop	{r4, pc}
     7a0:	.word	0x200004f0
     7a4:	.word	0x20000454

000007a8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     7a8:	push	{r4, lr}
     7aa:	mov	r4, r0
		close();
	}
     7ac:	bl	784 <SDFile::~SDFile()>
     7b0:	movs	r1, #92	; 0x5c
     7b2:	mov	r0, r4
     7b4:	bl	9ab6 <operator delete(void*, unsigned int)>
     7b8:	mov	r0, r4
     7ba:	pop	{r4, pc}

000007bc <SDFile::isOpen()>:
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
     7bc:	push	{r3, lr}
		return sdfatfile.isOpen();
     7be:	adds	r0, #24
     7c0:	bl	74a <FsBaseFile::isOpen() const>
	}
     7c4:	pop	{r3, pc}

000007c6 <FsBaseFile::peek()>:
  uint64_t position() const {return curPosition();}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7c6:	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     7c8:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->peek() : -1;
     7ca:	cbz	r0, 7d0 <FsBaseFile::peek()+0xa>
     7cc:	b.w	506a <FatFile::peek()>
     7d0:	ldr	r0, [r3, #60]	; 0x3c
     7d2:	cbz	r0, 7d8 <FsBaseFile::peek()+0x12>
     7d4:	b.w	340c <ExFatFile::peek()>
  }
     7d8:	mov.w	r0, #4294967295
     7dc:	bx	lr

000007de <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7de:	push	{r3, lr}
    return BaseFile::peek();
     7e0:	adds	r0, #16
     7e2:	bl	7c6 <FsBaseFile::peek()>
  }
     7e6:	pop	{r3, pc}

000007e8 <SDFile::peek()>:
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     7e8:	push	{r3, lr}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return BaseFile::peek();
     7ea:	adds	r0, #24
     7ec:	bl	7c6 <FsBaseFile::peek()>
		return sdfatfile.peek();
	}
     7f0:	pop	{r3, pc}

000007f2 <FsBaseFile::read(void*, unsigned int)>:
   * if end of file is reached.
   * If an error occurs, read() returns -1.  Possible errors include
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
     7f2:	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     7f4:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->read(buf, count) : -1;
     7f6:	cbz	r0, 7fc <FsBaseFile::read(void*, unsigned int)+0xa>
     7f8:	b.w	4ef4 <FatFile::read(void*, unsigned int)>
     7fc:	ldr	r0, [r3, #60]	; 0x3c
     7fe:	cbz	r0, 804 <FsBaseFile::read(void*, unsigned int)+0x12>
     800:	b.w	3288 <ExFatFile::read(void*, unsigned int)>
  }
     804:	mov.w	r0, #4294967295
     808:	bx	lr

0000080a <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     80a:	push	{r0, r1, r2, lr}
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     80c:	movs	r2, #1
     80e:	add.w	r1, sp, #7
     812:	adds	r0, #16
     814:	bl	7f2 <FsBaseFile::read(void*, unsigned int)>
     818:	cmp	r0, #1
     81a:	ite	eq
     81c:	ldrbeq.w	r0, [sp, #7]
     820:	movne.w	r0, #4294967295
    return BaseFile::read();
  }
     824:	add	sp, #12
     826:	ldr.w	pc, [sp], #4

0000082a <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     82a:	push	{r3, lr}
		return sdfatfile.read(buf, nbyte);
     82c:	adds	r0, #24
     82e:	bl	7f2 <FsBaseFile::read(void*, unsigned int)>
	}
     832:	pop	{r3, pc}

00000834 <FsBaseFile::seekSet(unsigned long long)>:
   *
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
     834:	push	{r4, r6, r7}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     836:	ldr	r4, [r0, #56]	; 0x38
           m_xFile ? m_xFile->seekSet(pos) : false;
     838:	cbz	r4, 84c <FsBaseFile::seekSet(unsigned long long)+0x18>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     83a:	cmp	r3, #1
     83c:	it	eq
     83e:	cmpeq	r2, #0
     840:	bcs.n	856 <FsBaseFile::seekSet(unsigned long long)+0x22>
     842:	mov	r0, r4
     844:	mov	r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
  }
     846:	pop	{r4, r6, r7}
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     848:	b.w	50ca <FatFile::seekSet(unsigned long)>
           m_xFile ? m_xFile->seekSet(pos) : false;
     84c:	ldr	r0, [r0, #60]	; 0x3c
     84e:	cbz	r0, 856 <FsBaseFile::seekSet(unsigned long long)+0x22>
  }
     850:	pop	{r4, r6, r7}
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     852:	b.w	3436 <ExFatFile::seekSet(unsigned long long)>
  }
     856:	movs	r0, #0
     858:	pop	{r4, r6, r7}
     85a:	bx	lr

0000085c <SDFile::seek(unsigned long long, int)>:
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     85c:	push	{r3, r4, r5, lr}
     85e:	mov	r1, r0
     860:	ldr	r0, [sp, #16]
     862:	mov	r4, r2
     864:	mov	r5, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     866:	cbnz	r0, 86e <SDFile::seek(unsigned long long, int)+0x12>
     868:	add.w	r0, r1, #24
     86c:	b.n	8aa <SDFile::seek(unsigned long long, int)+0x4e>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     86e:	cmp	r0, #1
     870:	bne.n	888 <SDFile::seek(unsigned long long, int)+0x2c>
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     872:	ldr	r3, [r1, #80]	; 0x50
     874:	add.w	r0, r1, #24
           m_xFile ? m_xFile->curPosition() : 0;
     878:	cbz	r3, 87e <SDFile::seek(unsigned long long, int)+0x22>
     87a:	ldr	r2, [r3, #20]
     87c:	b.n	8a4 <SDFile::seek(unsigned long long, int)+0x48>
     87e:	ldr	r3, [r1, #84]	; 0x54
     880:	cbz	r3, 8a2 <SDFile::seek(unsigned long long, int)+0x46>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     882:	ldrd	r2, r3, [r3]
     886:	b.n	8a6 <SDFile::seek(unsigned long long, int)+0x4a>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     888:	cmp	r0, #2
     88a:	bne.n	8b0 <SDFile::seek(unsigned long long, int)+0x54>
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     88c:	ldr	r3, [r1, #80]	; 0x50
     88e:	add.w	r0, r1, #24
           m_xFile ? m_xFile->fileSize() : 0;
     892:	cbz	r3, 898 <SDFile::seek(unsigned long long, int)+0x3c>
     894:	ldr	r2, [r3, #28]
     896:	b.n	8a4 <SDFile::seek(unsigned long long, int)+0x48>
     898:	ldr	r3, [r1, #84]	; 0x54
     89a:	cbz	r3, 8a2 <SDFile::seek(unsigned long long, int)+0x46>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     89c:	ldrd	r2, r3, [r3, #16]
     8a0:	b.n	8a6 <SDFile::seek(unsigned long long, int)+0x4a>
     8a2:	movs	r2, #0
     8a4:	movs	r3, #0
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     8a6:	adds	r2, r2, r4
     8a8:	adcs	r3, r5
     8aa:	bl	834 <FsBaseFile::seekSet(unsigned long long)>
     8ae:	pop	{r3, r4, r5, pc}
		return false;
     8b0:	movs	r0, #0
	}
     8b2:	pop	{r3, r4, r5, pc}

000008b4 <FsBaseFile::sync()>:
  /** The sync() call causes all modified data and directory fields
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
     8b4:	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     8b6:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->sync() : false;
     8b8:	cbz	r0, 8be <FsBaseFile::sync()+0xa>
     8ba:	b.w	5320 <FatFile::sync()>
     8be:	ldr	r0, [r3, #60]	; 0x3c
     8c0:	cbz	r0, 8c6 <FsBaseFile::sync()+0x12>
     8c2:	b.w	4050 <ExFatFile::sync()>
  }
     8c6:	bx	lr

000008c8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     8c8:	push	{r3, lr}
    BaseFile::sync();
     8ca:	adds	r0, #16
     8cc:	bl	8b4 <FsBaseFile::sync()>
     8d0:	pop	{r3, pc}

000008d2 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     8d2:	push	{r3, lr}
     8d4:	adds	r0, #24
     8d6:	bl	8b4 <FsBaseFile::sync()>
     8da:	pop	{r3, pc}

000008dc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
   * Modify and access timestamps may be overwritten if a date time callback
   * function has been set by dateTimeCallback().
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
     8dc:	push	{r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     8de:	ldr.w	lr, [r0, #56]	; 0x38
   * Modify and access timestamps may be overwritten if a date time callback
   * function has been set by dateTimeCallback().
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
     8e2:	ldrb.w	r4, [sp, #20]
     8e6:	ldrb.w	r5, [sp, #24]
     8ea:	ldrb.w	r6, [sp, #28]
     8ee:	ldrb.w	r7, [sp, #32]
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     8f2:	cmp.w	lr, #0
     8f6:	beq.n	90a <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2e>
     8f8:	str	r7, [sp, #32]
     8fa:	mov	r0, lr
     8fc:	str	r6, [sp, #28]
     8fe:	str	r5, [sp, #24]
     900:	str	r4, [sp, #20]
  }
     902:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     906:	b.w	5826 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
     90a:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     90c:	cbz	r0, 91e <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
     90e:	str	r7, [sp, #32]
     910:	str	r6, [sp, #28]
     912:	str	r5, [sp, #24]
     914:	str	r4, [sp, #20]
  }
     916:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     91a:	b.w	431c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
  }
     91e:	pop	{r4, r5, r6, r7, pc}

00000920 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
     920:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
     922:	ldrb	r2, [r1, #6]
     924:	sub.w	r3, r2, #80	; 0x50
     928:	lsls	r3, r3, #24
     92a:	bmi.n	950 <SDFile::setModifyTime(DateTimeFields const&)+0x30>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
     92c:	ldrb	r4, [r1, #0]
     92e:	addw	r2, r2, #1900	; 0x76c
     932:	ldrb	r3, [r1, #5]
     934:	adds	r0, #24
     936:	str	r4, [sp, #12]
     938:	ldrb	r4, [r1, #1]
     93a:	adds	r3, #1
     93c:	str	r4, [sp, #8]
     93e:	uxtb	r3, r3
     940:	ldrb	r4, [r1, #2]
     942:	str	r4, [sp, #4]
     944:	ldrb	r1, [r1, #4]
     946:	str	r1, [sp, #0]
     948:	movs	r1, #4
     94a:	bl	8dc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     94e:	b.n	952 <SDFile::setModifyTime(DateTimeFields const&)+0x32>
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     950:	movs	r0, #0
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
     952:	add	sp, #16
     954:	pop	{r4, pc}

00000956 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
     956:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
     958:	ldrb	r2, [r1, #6]
     95a:	sub.w	r3, r2, #80	; 0x50
     95e:	lsls	r3, r3, #24
     960:	bmi.n	986 <SDFile::setCreateTime(DateTimeFields const&)+0x30>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
     962:	ldrb	r4, [r1, #0]
     964:	addw	r2, r2, #1900	; 0x76c
     968:	ldrb	r3, [r1, #5]
     96a:	adds	r0, #24
     96c:	str	r4, [sp, #12]
     96e:	ldrb	r4, [r1, #1]
     970:	adds	r3, #1
     972:	str	r4, [sp, #8]
     974:	uxtb	r3, r3
     976:	ldrb	r4, [r1, #2]
     978:	str	r4, [sp, #4]
     97a:	ldrb	r1, [r1, #4]
     97c:	str	r1, [sp, #0]
     97e:	movs	r1, #2
     980:	bl	8dc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     984:	b.n	988 <SDFile::setCreateTime(DateTimeFields const&)+0x32>
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     986:	movs	r0, #0
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
     988:	add	sp, #16
     98a:	pop	{r4, pc}

0000098c <FsBaseFile::write(void const*, unsigned int)>:
   * \param[in] count Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
     98c:	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     98e:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->write(buf, count) : 0;
     990:	cbz	r0, 996 <FsBaseFile::write(void const*, unsigned int)+0xa>
     992:	b.w	593c <FatFile::write(void const*, unsigned int)>
     996:	ldr	r0, [r3, #60]	; 0x3c
     998:	cbz	r0, 99e <FsBaseFile::write(void const*, unsigned int)+0x12>
     99a:	b.w	44f0 <ExFatFile::write(void const*, unsigned int)>
  }
     99e:	bx	lr

000009a0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     9a0:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     9a2:	adds	r0, #16
     9a4:	bl	98c <FsBaseFile::write(void const*, unsigned int)>
  }
     9a8:	pop	{r3, pc}

000009aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     9aa:	push	{r0, r1, r2, lr}
     9ac:	add	r3, sp, #8
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
     9ae:	movs	r2, #1
     9b0:	adds	r0, #16
     9b2:	strb.w	r1, [r3, #-1]!
     9b6:	mov	r1, r3
     9b8:	bl	98c <FsBaseFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     9bc:	add	sp, #12
     9be:	ldr.w	pc, [sp], #4

000009c2 <SDFile::write(void const*, unsigned int)>:
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
     9c2:	push	{r3, lr}
		return sdfatfile.write(buf, size);
     9c4:	adds	r0, #24
     9c6:	bl	98c <FsBaseFile::write(void const*, unsigned int)>
	}
     9ca:	pop	{r3, pc}

000009cc <File::close()>:
		return (f) ? f->position() : 0;
	}
	uint64_t size() {
		return (f) ? f->size() : 0;
	}
	void close() {
     9cc:	push	{r4, lr}
     9ce:	mov	r4, r0
		if (f) {
     9d0:	ldr	r0, [r0, #16]
     9d2:	cbz	r0, 9e6 <File::close()+0x1a>
			f->close();
     9d4:	ldr	r3, [r0, #0]
     9d6:	ldr	r3, [r3, #44]	; 0x2c
     9d8:	blx	r3
			dec_refcount();
     9da:	add.w	r0, r4, #16
		}
	}
     9de:	ldmia.w	sp!, {r4, lr}
		return (f) ? f->size() : 0;
	}
	void close() {
		if (f) {
			f->close();
			dec_refcount();
     9e2:	b.w	5f0 <File::dec_refcount() [clone .isra.15]>
     9e6:	pop	{r4, pc}

000009e8 <SDFile::SDFile(FsFile const&)>:
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     9e8:	push	{r3, r4, r5, lr}
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
     9ea:	movs	r5, #0
     9ec:	ldr	r3, [pc, #56]	; (a28 <SDFile::SDFile(FsFile const&)+0x40>)
     9ee:	mov	r4, r0
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     9f0:	adds	r1, #16
     9f2:	str	r5, [r0, #4]
     9f4:	adds	r0, #24
     9f6:	str.w	r3, [r0, #-24]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     9fa:	ldrb.w	r3, [r1, #-12]
     9fe:	strb.w	r3, [r0, #-12]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     a02:	ldr	r3, [pc, #40]	; (a2c <SDFile::SDFile(FsFile const&)+0x44>)
     a04:	str.w	r3, [r0, #-16]
     a08:	ldr.w	r3, [r1, #-8]
     a0c:	str.w	r3, [r0, #-8]
     a10:	ldrb.w	r3, [r1, #-4]
     a14:	strb.w	r3, [r0, #-4]
     a18:	bl	658e <FsBaseFile::FsBaseFile(FsBaseFile const&)>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a1c:	ldr	r3, [pc, #16]	; (a30 <SDFile::SDFile(FsFile const&)+0x48>)
     a1e:	str	r5, [r4, #88]	; 0x58
     a20:	mov	r0, r4
     a22:	str	r3, [r4, #8]
     a24:	pop	{r3, r4, r5, pc}
     a26:	nop
     a28:	.word	0x200004f0
     a2c:	.word	0x2000054c
     a30:	.word	0x200004cc

00000a34 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     a34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     a38:	sub	sp, #84	; 0x54
{
  public:
	constexpr Print() : write_error(0) {}
     a3a:	movs	r5, #0
     a3c:	ldr	r3, [pc, #112]	; (ab0 <SDFile::openNextFile(unsigned char)+0x7c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     a3e:	mov.w	r6, #1000	; 0x3e8
     a42:	add.w	r8, sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a46:	mov	r2, r5
     a48:	adds	r1, #24
     a4a:	mov	r4, r0
     a4c:	add	r0, sp, #16
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a4e:	str.w	r3, [r8, #-80]!
     a52:	strb.w	r5, [sp, #4]
     a56:	str	r6, [sp, #8]
     a58:	strb.w	r5, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     a5c:	str	r5, [sp, #72]	; 0x48
     a5e:	str	r5, [sp, #76]	; 0x4c
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a60:	bl	6696 <FsBaseFile::openNext(FsBaseFile*, int)>
  FsBaseFile& operator=(const FsBaseFile& from);
  /** The parenthesis operator.
    *
    * \return true if a file is open.
    */
  operator bool() const {return isOpen();}
     a64:	add	r0, sp, #16
     a66:	ldr.w	r9, [pc, #80]	; ab8 <SDFile::openNextFile(unsigned char)+0x84>
     a6a:	bl	74a <FsBaseFile::isOpen() const>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     a6e:	cbz	r0, a92 <SDFile::openNextFile(unsigned char)+0x5e>
     a70:	movs	r0, #92	; 0x5c
     a72:	bl	9ab2 <operator new(unsigned int)>
     a76:	mov	r7, r0
     a78:	mov	r1, r8
     a7a:	bl	9e8 <SDFile::SDFile(FsFile const&)>
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
		if (f) f->refcount++;
     a7e:	ldr	r3, [r7, #4]
     a80:	strb	r5, [r4, #4]
     a82:	adds	r3, #1
     a84:	str	r6, [r4, #8]
     a86:	strb	r5, [r4, #12]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     a88:	str.w	r9, [r4]
		f = file;
     a8c:	str	r7, [r4, #16]
		if (f) f->refcount++;
     a8e:	str	r3, [r7, #4]
     a90:	b.n	a9e <SDFile::openNextFile(unsigned char)+0x6a>
     a92:	strb	r0, [r4, #4]
     a94:	str	r6, [r4, #8]
     a96:	strb	r0, [r4, #12]
//
class File final : public Stream {
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
     a98:	str.w	r9, [r4]
     a9c:	str	r0, [r4, #16]
     a9e:	ldr	r3, [pc, #20]	; (ab4 <SDFile::openNextFile(unsigned char)+0x80>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     aa0:	add	r0, sp, #16
     aa2:	str	r3, [sp, #0]
     aa4:	bl	65f0 <FsBaseFile::close()>
		return File();
	}
     aa8:	mov	r0, r4
     aaa:	add	sp, #84	; 0x54
     aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ab0:	.word	0x200004cc
     ab4:	.word	0x20000454
     ab8:	.word	0x200004a0

00000abc <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     abc:	cmp	r3, #1
class SDClass : public FS
{
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     abe:	push	{r4, r5, r6, lr}
     ac0:	mov	r4, r0
     ac2:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     ac4:	beq.n	ad2 <SDClass::open(char const*, unsigned char)+0x16>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     ac6:	cmp	r3, #2
     ac8:	movw	r3, #514	; 0x202
     acc:	it	ne
     ace:	movne	r3, #0
     ad0:	b.n	ad6 <SDClass::open(char const*, unsigned char)+0x1a>
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     ad2:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     ad6:	adds	r1, #4
     ad8:	mov	r0, sp
     ada:	bl	67b0 <FsVolume::open(char const*, int)>
  FsBaseFile& operator=(const FsBaseFile& from);
  /** The parenthesis operator.
    *
    * \return true if a file is open.
    */
  operator bool() const {return isOpen();}
     ade:	add	r0, sp, #16
     ae0:	bl	74a <FsBaseFile::isOpen() const>
     ae4:	ldr	r6, [pc, #68]	; (b2c <SDClass::open(char const*, unsigned char)+0x70>)
		if (file) return File(new SDFile(file));
     ae6:	cbz	r0, b0e <SDClass::open(char const*, unsigned char)+0x52>
     ae8:	movs	r0, #92	; 0x5c
     aea:	bl	9ab2 <operator new(unsigned int)>
     aee:	mov	r1, sp
     af0:	mov	r5, r0
     af2:	bl	9e8 <SDFile::SDFile(FsFile const&)>
     af6:	movs	r3, #0
     af8:	mov.w	r2, #1000	; 0x3e8
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     afc:	str	r6, [r4, #0]
     afe:	strb	r3, [r4, #4]
     b00:	strb	r3, [r4, #12]
		f = file;
		if (f) f->refcount++;
     b02:	ldr	r3, [r5, #4]
     b04:	str	r2, [r4, #8]
     b06:	adds	r3, #1
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
     b08:	str	r5, [r4, #16]
		if (f) f->refcount++;
     b0a:	str	r3, [r5, #4]
     b0c:	b.n	b1c <SDClass::open(char const*, unsigned char)+0x60>
     b0e:	mov.w	r3, #1000	; 0x3e8
     b12:	strb	r0, [r4, #4]
     b14:	strb	r0, [r4, #12]
     b16:	str	r3, [r4, #8]
//
class File final : public Stream {
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
     b18:	str	r6, [r4, #0]
     b1a:	str	r0, [r4, #16]
     b1c:	ldr	r3, [pc, #16]	; (b30 <SDClass::open(char const*, unsigned char)+0x74>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     b1e:	add	r0, sp, #16
     b20:	str	r3, [sp, #0]
     b22:	bl	65f0 <FsBaseFile::close()>
		return File();
	}
     b26:	mov	r0, r4
     b28:	add	sp, #80	; 0x50
     b2a:	pop	{r4, r5, r6, pc}
     b2c:	.word	0x200004a0
     b30:	.word	0x20000454

00000b34 <storeConfig(unsigned short*, int)>:
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     b34:	push	{r4, r5, r6, lr}
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     b36:	ldr	r3, [pc, #124]	; (bb4 <storeConfig(unsigned short*, int)+0x80>)
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     b38:	sub	sp, #56	; 0x38
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     b3a:	mov.w	r2, #1000	; 0x3e8
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     b3e:	mov	r5, r0
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     b40:	str	r3, [sp, #4]
     b42:	movs	r3, #0
     b44:	str	r2, [sp, #12]
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     b46:	mov	r6, r1
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     b48:	strb.w	r3, [sp, #8]
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     b4c:	add	r0, sp, #24

void storeConfig(uint16_t *store, int ns)
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     b4e:	strb.w	r3, [sp, #16]
     b52:	str	r3, [sp, #20]
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     b54:	movs	r3, #2
     b56:	ldr	r2, [pc, #96]	; (bb8 <storeConfig(unsigned short*, int)+0x84>)
     b58:	ldr	r1, [pc, #96]	; (bbc <storeConfig(unsigned short*, int)+0x88>)
     b5a:	bl	abc <SDClass::open(char const*, unsigned char)>
	}
#ifdef FILE_USE_MOVE
	// Move assignment.
	File& operator = (const File&& file) {
		//Serial.println("File move assignment");
		if (file.f) file.f->refcount++;
     b5e:	ldr	r3, [sp, #40]	; 0x28
     b60:	cbz	r3, b68 <storeConfig(unsigned short*, int)+0x34>
     b62:	ldr	r2, [r3, #4]
     b64:	adds	r2, #1
     b66:	str	r2, [r3, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
     b68:	ldr	r3, [sp, #20]
     b6a:	cbz	r3, b72 <storeConfig(unsigned short*, int)+0x3e>
     b6c:	add	r0, sp, #20
     b6e:	bl	5f0 <File::dec_refcount() [clone .isra.15]>
		f = file.f;
     b72:	ldr	r3, [sp, #40]	; 0x28
      for(int ii=0; ii<ns; ii++)
     b74:	movs	r4, #0
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     b76:	add	r0, sp, #24
     b78:	str	r3, [sp, #20]
     b7a:	bl	614 <File::~File()>
      for(int ii=0; ii<ns; ii++)
     b7e:	cmp	r4, r6
     b80:	bge.n	ba2 <storeConfig(unsigned short*, int)+0x6e>
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
     b82:	ldrh.w	r2, [r5, r4, lsl #1]
     b86:	add	r0, sp, #24
     b88:	ldr	r1, [pc, #52]	; (bc0 <storeConfig(unsigned short*, int)+0x8c>)
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
     b8a:	adds	r4, #1
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
     b8c:	bl	aa88 <sprintf>
     b90:	add	r0, sp, #24
     b92:	bl	ab40 <strlen>
     b96:	add	r1, sp, #24
     b98:	mov	r2, r0
     b9a:	add	r0, sp, #4
     b9c:	bl	432 <File::write(unsigned char const*, unsigned int)>
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
     ba0:	b.n	b7e <storeConfig(unsigned short*, int)+0x4a>
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
    configFile.close();
     ba2:	add	r0, sp, #4
     ba4:	bl	9cc <File::close()>

void storeConfig(uint16_t *store, int ns)
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     ba8:	add	r0, sp, #4
     baa:	bl	614 <File::~File()>
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
    configFile.close();
  
}
     bae:	add	sp, #56	; 0x38
     bb0:	pop	{r4, r5, r6, pc}
     bb2:	nop
     bb4:	.word	0x200004a0
     bb8:	.word	0x20000fc6
     bbc:	.word	0x20006680
     bc0:	.word	0x20000fd2

00000bc4 <saveParameters()>:
    configFile.close();
}

void saveParameters(void)
{
  store[0]= 1;
     bc4:	ldr	r0, [pc, #16]	; (bd8 <saveParameters()+0x14>)
     bc6:	movs	r3, #1
  store[2]= t_acq;

  storeConfig(store, 16);
     bc8:	movs	r1, #16
    configFile.close();
}

void saveParameters(void)
{
  store[0]= 1;
     bca:	strh	r3, [r0, #0]
  store[2]= t_acq;
     bcc:	ldr	r3, [pc, #12]	; (bdc <saveParameters()+0x18>)
     bce:	ldr	r3, [r3, #0]
     bd0:	strh	r3, [r0, #4]

  storeConfig(store, 16);
     bd2:	b.w	b34 <storeConfig(unsigned short*, int)>
     bd6:	nop
     bd8:	.word	0x2000882a
     bdc:	.word	0x20001dd0

00000be0 <printMenu()>:
  }
}


void printMenu(void)
{
     be0:	push	{r4, lr}
  Serial.println("\n Menu");
     be2:	ldr	r4, [pc, #144]	; (c74 <printMenu()+0x94>)
     be4:	ldr	r1, [pc, #144]	; (c78 <printMenu()+0x98>)
     be6:	mov	r0, r4
     be8:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':h'  : print help");
     bec:	ldr	r1, [pc, #140]	; (c7c <printMenu()+0x9c>)
     bee:	mov	r0, r4
     bf0:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':s'  : start acquisition");
     bf4:	ldr	r1, [pc, #136]	; (c80 <printMenu()+0xa0>)
     bf6:	mov	r0, r4
     bf8:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':e'  : stop acquisition");
     bfc:	ldr	r1, [pc, #132]	; (c84 <printMenu()+0xa4>)
     bfe:	mov	r0, r4
     c00:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':w'  : write parameters to microSD card");
     c04:	ldr	r1, [pc, #128]	; (c88 <printMenu()+0xa8>)
     c06:	mov	r0, r4
     c08:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':l'  : list disks");
     c0c:	ldr	r1, [pc, #124]	; (c8c <printMenu()+0xac>)
     c0e:	mov	r0, r4
     c10:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':r'  : reset MTP");
     c14:	ldr	r1, [pc, #120]	; (c90 <printMenu()+0xb0>)
     c16:	mov	r0, r4
     c18:	bl	2e4 <Print::println(char const*)>
  Serial.println(" ':b'  : reboot CPU");
     c1c:	ldr	r1, [pc, #116]	; (c94 <printMenu()+0xb4>)
     c1e:	mov	r0, r4
     c20:	bl	2e4 <Print::println(char const*)>
//  Serial.println(" ':d'  : dump Index List (testing)");
  Serial.println();
     c24:	mov	r0, r4
     c26:	bl	9948 <Print::println()>
  Serial.println(" '?p'  : show all parameters");
     c2a:	ldr	r1, [pc, #108]	; (c98 <printMenu()+0xb8>)
     c2c:	mov	r0, r4
     c2e:	bl	2e4 <Print::println(char const*)>
  Serial.println(" '?d'  : get date");
     c32:	ldr	r1, [pc, #104]	; (c9c <printMenu()+0xbc>)
     c34:	mov	r0, r4
     c36:	bl	2e4 <Print::println(char const*)>
  Serial.println(" '?t'  : get time");
     c3a:	ldr	r1, [pc, #100]	; (ca0 <printMenu()+0xc0>)
     c3c:	mov	r0, r4
     c3e:	bl	2e4 <Print::println(char const*)>
  Serial.println(" '?a'  : get file duration (s)");
     c42:	ldr	r1, [pc, #96]	; (ca4 <printMenu()+0xc4>)
     c44:	mov	r0, r4
     c46:	bl	2e4 <Print::println(char const*)>
  Serial.println();
     c4a:	mov	r0, r4
     c4c:	bl	9948 <Print::println()>
  Serial.println(" '!d yyyy/mm/dd<cr>'  : set date");
     c50:	ldr	r1, [pc, #84]	; (ca8 <printMenu()+0xc8>)
     c52:	mov	r0, r4
     c54:	bl	2e4 <Print::println(char const*)>
  Serial.println(" '!t hh:mm:ss<cr>'    : set time");
     c58:	ldr	r1, [pc, #80]	; (cac <printMenu()+0xcc>)
     c5a:	mov	r0, r4
     c5c:	bl	2e4 <Print::println(char const*)>
  Serial.println(" '!a val<cr>'  : set file duration (s)");
     c60:	mov	r0, r4
     c62:	ldr	r1, [pc, #76]	; (cb0 <printMenu()+0xd0>)
     c64:	bl	2e4 <Print::println(char const*)>
  Serial.println();
     c68:	mov	r0, r4
}
     c6a:	ldmia.w	sp!, {r4, lr}
  Serial.println(" '?a'  : get file duration (s)");
  Serial.println();
  Serial.println(" '!d yyyy/mm/dd<cr>'  : set date");
  Serial.println(" '!t hh:mm:ss<cr>'    : set time");
  Serial.println(" '!a val<cr>'  : set file duration (s)");
  Serial.println();
     c6e:	b.w	9948 <Print::println()>
     c72:	nop
     c74:	.word	0x20001814
     c78:	.word	0x20000fd9
     c7c:	.word	0x20000fe0
     c80:	.word	0x20000ff4
     c84:	.word	0x2000100f
     c88:	.word	0x20001029
     c8c:	.word	0x20001053
     c90:	.word	0x20001067
     c94:	.word	0x2000107a
     c98:	.word	0x2000108e
     c9c:	.word	0x200010ab
     ca0:	.word	0x200010bd
     ca4:	.word	0x200010cf
     ca8:	.word	0x200010ee
     cac:	.word	0x2000110f
     cb0:	.word	0x20001130

00000cb4 <printMenuEntries()>:
}

void printMenuEntries(void)
{
     cb4:	push	{r0, r1, r2, r3, r4, lr}
    tmElements_t tm;
    breakTime(rtc_get(), tm);

  Serial.println("CVAS_V3 Version: " __DATE__  " " __TIME__ );
     cb6:	ldr	r4, [pc, #96]	; (d18 <printMenuEntries()+0x64>)
}

void printMenuEntries(void)
{
    tmElements_t tm;
    breakTime(rtc_get(), tm);
     cb8:	bl	93c4 <rtc_get>
     cbc:	add	r1, sp, #8
     cbe:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>

  Serial.println("CVAS_V3 Version: " __DATE__  " " __TIME__ );
     cc2:	ldr	r1, [pc, #88]	; (d1c <printMenuEntries()+0x68>)
     cc4:	mov	r0, r4
     cc6:	bl	2e4 <Print::println(char const*)>
  Serial.printf("Teensy: %d: %06x\n",teensy,SerNum);
     cca:	ldr	r3, [pc, #84]	; (d20 <printMenuEntries()+0x6c>)
     ccc:	movs	r2, #41	; 0x29
     cce:	ldr	r1, [pc, #84]	; (d24 <printMenuEntries()+0x70>)
     cd0:	ldr	r3, [r3, #0]
     cd2:	mov	r0, r4
     cd4:	bl	9968 <Print::printf(char const*, ...)>
  Serial.printf("Date d = %04d/%02d/%02d\n",tmYearToCalendar(tm.Year), tm.Month, tm.Day); 
     cd8:	ldrb.w	r1, [sp, #12]
     cdc:	ldrb.w	r2, [sp, #14]
     ce0:	mov	r0, r4
     ce2:	ldrb.w	r3, [sp, #13]
     ce6:	str	r1, [sp, #0]
     ce8:	addw	r2, r2, #1970	; 0x7b2
     cec:	ldr	r1, [pc, #56]	; (d28 <printMenuEntries()+0x74>)
     cee:	bl	9968 <Print::printf(char const*, ...)>
  Serial.printf("Time t = %02d:%02d:%02d\n",tm.Hour, tm.Minute, tm.Second); 
     cf2:	ldrb.w	r1, [sp, #8]
     cf6:	ldrb.w	r3, [sp, #9]
     cfa:	mov	r0, r4
     cfc:	ldrb.w	r2, [sp, #10]
     d00:	str	r1, [sp, #0]
     d02:	ldr	r1, [pc, #40]	; (d2c <printMenuEntries()+0x78>)
     d04:	bl	9968 <Print::printf(char const*, ...)>
  Serial.printf("T_acq a = %d\n",t_acq); 
     d08:	ldr	r3, [pc, #36]	; (d30 <printMenuEntries()+0x7c>)
     d0a:	ldr	r1, [pc, #40]	; (d34 <printMenuEntries()+0x80>)
     d0c:	mov	r0, r4
     d0e:	ldr	r2, [r3, #0]
     d10:	bl	9968 <Print::printf(char const*, ...)>
}
     d14:	add	sp, #16
     d16:	pop	{r4, pc}
     d18:	.word	0x20001814
     d1c:	.word	0x20001157
     d20:	.word	0x2000292c
     d24:	.word	0x2000117d
     d28:	.word	0x2000118f
     d2c:	.word	0x200011a8
     d30:	.word	0x20001dd0
     d34:	.word	0x200011c1

00000d38 <menuGetInt(int*)>:

int menuGetInt(int *val)
{ char buffer[40];
     d38:	push	{r4, lr}
     d3a:	mov	r4, r0
     d3c:	sub	sp, #40	; 0x28
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     d3e:	bl	8498 <usb_serial_available>
  while(!Serial.available());
     d42:	cmp	r0, #0
     d44:	beq.n	d3e <menuGetInt(int*)+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
     d46:	mov	r2, sp
     d48:	movs	r3, #40	; 0x28
     d4a:	movs	r1, #13
     d4c:	ldr	r0, [pc, #28]	; (d6c <menuGetInt(int*)+0x34>)
     d4e:	bl	98d8 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     d52:	add	r3, sp, #40	; 0x28
//  Serial.println(buffer);
  return sscanf(buffer,"%d",val);
     d54:	mov	r2, r4
     d56:	ldr	r1, [pc, #24]	; (d70 <menuGetInt(int*)+0x38>)

int menuGetInt(int *val)
{ char buffer[40];
  while(!Serial.available());
  int count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
     d58:	add	r0, r3
     d5a:	movs	r3, #0
     d5c:	strb.w	r3, [r0, #-40]
//  Serial.println(buffer);
  return sscanf(buffer,"%d",val);
     d60:	mov	r0, sp
     d62:	bl	aad4 <sscanf>
}
     d66:	add	sp, #40	; 0x28
     d68:	pop	{r4, pc}
     d6a:	nop
     d6c:	.word	0x20001814
     d70:	.word	0x20001227

00000d74 <menuGet3Int(int*, int*, int*)>:

int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
     d74:	push	{r4, r5, r6, lr}
     d76:	mov	r4, r0
     d78:	sub	sp, #64	; 0x40
     d7a:	mov	r5, r1
     d7c:	mov	r6, r2
     d7e:	bl	8498 <usb_serial_available>
  while(!Serial.available());
     d82:	cmp	r0, #0
     d84:	beq.n	d7e <menuGet3Int(int*, int*, int*)+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
     d86:	add	r2, sp, #24
     d88:	movs	r3, #40	; 0x28
     d8a:	movs	r1, #13
     d8c:	ldr	r0, [pc, #40]	; (db8 <menuGet3Int(int*, int*, int*)+0x44>)
     d8e:	bl	98d8 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     d92:	add	r3, sp, #64	; 0x40
//  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     d94:	mov	r2, r4
     d96:	ldr	r1, [pc, #36]	; (dbc <menuGet3Int(int*, int*, int*)+0x48>)

int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
  while(!Serial.available());
  int count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
     d98:	add	r0, r3
     d9a:	movs	r3, #0
     d9c:	strb.w	r3, [r0, #-40]
//  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     da0:	add.w	r3, sp, #23
     da4:	str	r6, [sp, #8]
     da6:	add	r0, sp, #24
     da8:	str	r3, [sp, #4]
     daa:	add.w	r3, sp, #22
     dae:	str	r5, [sp, #0]
     db0:	bl	aad4 <sscanf>
}
     db4:	add	sp, #64	; 0x40
     db6:	pop	{r4, r5, r6, pc}
     db8:	.word	0x20001814
     dbc:	.word	0x200011cf

00000dc0 <menu()>:
#if defined (KINETISK) 
#define CPU_RESTART 
#endif

int16_t menu(void)
{
     dc0:	push	{r4, lr}
     dc2:	sub	sp, #32
     dc4:	bl	8498 <usb_serial_available>
  if(!Serial.available()) return 0;
     dc8:	cmp	r0, #0
     dca:	beq.w	f4e <menu()+0x18e>
        virtual int read() { return usb_serial_getchar(); }
     dce:	bl	8504 <usb_serial_getchar>

  char ch=Serial.read();
     dd2:	uxtb	r0, r0
  if(ch==':')
     dd4:	cmp	r0, #58	; 0x3a
     dd6:	bne.n	e5e <menu()+0x9e>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     dd8:	bl	8498 <usb_serial_available>
  { while(!Serial.available()) ; ch=Serial.read();
     ddc:	cmp	r0, #0
     dde:	beq.n	dd8 <menu()+0x18>
        virtual int read() { return usb_serial_getchar(); }
     de0:	bl	8504 <usb_serial_getchar>
     de4:	uxtb	r0, r0

    if(ch=='s') { Serial.print("\n"); Serial.print("start"); return  +1;} // start acq
     de6:	cmp	r0, #115	; 0x73
     de8:	bne.n	dfe <menu()+0x3e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     dea:	ldr	r1, [pc, #360]	; (f54 <menu()+0x194>)
     dec:	ldr	r0, [pc, #360]	; (f58 <menu()+0x198>)
     dee:	bl	674 <Print::write(char const*)>
     df2:	ldr	r1, [pc, #360]	; (f5c <menu()+0x19c>)
     df4:	ldr	r0, [pc, #352]	; (f58 <menu()+0x198>)
     df6:	bl	674 <Print::write(char const*)>
     dfa:	movs	r0, #1
     dfc:	b.n	f50 <menu()+0x190>
    else if(ch=='e') { Serial.print("\n"); Serial.print("stop");  return  -1;} // end acq
     dfe:	cmp	r0, #101	; 0x65
     e00:	bne.n	e18 <menu()+0x58>
     e02:	ldr	r1, [pc, #336]	; (f54 <menu()+0x194>)
     e04:	ldr	r0, [pc, #336]	; (f58 <menu()+0x198>)
     e06:	bl	674 <Print::write(char const*)>
     e0a:	ldr	r1, [pc, #340]	; (f60 <menu()+0x1a0>)
     e0c:	ldr	r0, [pc, #328]	; (f58 <menu()+0x198>)
     e0e:	bl	674 <Print::write(char const*)>
     e12:	mov.w	r0, #4294967295
     e16:	b.n	f50 <menu()+0x190>
    else if(ch=='h') { printMenu(); return 0;} 
     e18:	cmp	r0, #104	; 0x68
     e1a:	bne.n	e22 <menu()+0x62>
     e1c:	bl	be0 <printMenu()>
     e20:	b.n	f4e <menu()+0x18e>
    else if(ch=='w') { saveParameters(); return 0;} 
     e22:	cmp	r0, #119	; 0x77
     e24:	bne.n	e2c <menu()+0x6c>
     e26:	bl	bc4 <saveParameters()>
     e2a:	b.n	f4e <menu()+0x18e>
    else if(ch=='l') { listDisks(); return 0;} 
     e2c:	cmp	r0, #108	; 0x6c
     e2e:	bne.n	e36 <menu()+0x76>
     e30:	bl	189c <listDisks()>
     e34:	b.n	f4e <menu()+0x18e>
    else if(ch=='b') { Serial.print("\n"); Serial.print("rebooting CPU"); Serial.flush(); delay(100); CPU_RESTART; return 0;} 
     e36:	cmp	r0, #98	; 0x62
     e38:	bne.w	f4e <menu()+0x18e>
     e3c:	ldr	r1, [pc, #276]	; (f54 <menu()+0x194>)
     e3e:	ldr	r0, [pc, #280]	; (f58 <menu()+0x198>)
     e40:	bl	674 <Print::write(char const*)>
     e44:	ldr	r1, [pc, #284]	; (f64 <menu()+0x1a4>)
     e46:	ldr	r0, [pc, #272]	; (f58 <menu()+0x198>)
     e48:	bl	674 <Print::write(char const*)>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     e4c:	bl	8704 <usb_serial_flush_output>
     e50:	movs	r0, #100	; 0x64
     e52:	bl	9204 <delay>
     e56:	ldr	r2, [pc, #272]	; (f68 <menu()+0x1a8>)
     e58:	ldr	r3, [pc, #272]	; (f6c <menu()+0x1ac>)
     e5a:	str	r2, [r3, #0]
     e5c:	b.n	f4e <menu()+0x18e>
  }
  else if(ch=='?') // get info
     e5e:	cmp	r0, #63	; 0x3f
     e60:	bne.n	ecc <menu()+0x10c>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     e62:	bl	8498 <usb_serial_available>
  {
    while(!Serial.available()) ; ch=Serial.read();
     e66:	cmp	r0, #0
     e68:	beq.n	e62 <menu()+0xa2>
        virtual int read() { return usb_serial_getchar(); }
     e6a:	bl	8504 <usb_serial_getchar>
     e6e:	uxtb	r4, r0

    tmElements_t tm;
    breakTime(rtc_get(), tm);
     e70:	bl	93c4 <rtc_get>
     e74:	add	r1, sp, #24
     e76:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>

    if(ch=='p') { printMenuEntries(); return 0;} 
     e7a:	cmp	r4, #112	; 0x70
     e7c:	bne.n	e84 <menu()+0xc4>
     e7e:	bl	cb4 <printMenuEntries()>
     e82:	b.n	f4e <menu()+0x18e>
    else if(ch=='d') { Serial.printf("%04d/%02d/%02d\n",tmYearToCalendar(tm.Year), tm.Month, tm.Day); return  0;} // display date
     e84:	cmp	r4, #100	; 0x64
     e86:	bne.n	e9e <menu()+0xde>
     e88:	ldrb.w	r1, [sp, #28]
     e8c:	ldrb.w	r2, [sp, #30]
     e90:	str	r1, [sp, #0]
     e92:	ldrb.w	r3, [sp, #29]
     e96:	addw	r2, r2, #1970	; 0x7b2
     e9a:	ldr	r1, [pc, #212]	; (f70 <menu()+0x1b0>)
     e9c:	b.n	eb2 <menu()+0xf2>
    else if(ch=='t') { Serial.printf("%02d:%02d:%02d\n",tm.Hour, tm.Minute, tm.Second); return  0;} // display time
     e9e:	cmp	r4, #116	; 0x74
     ea0:	bne.n	eba <menu()+0xfa>
     ea2:	ldrb.w	r1, [sp, #24]
     ea6:	ldrb.w	r3, [sp, #25]
     eaa:	str	r1, [sp, #0]
     eac:	ldrb.w	r2, [sp, #26]
     eb0:	ldr	r1, [pc, #192]	; (f74 <menu()+0x1b4>)
     eb2:	ldr	r0, [pc, #164]	; (f58 <menu()+0x198>)
     eb4:	bl	9968 <Print::printf(char const*, ...)>
     eb8:	b.n	f4e <menu()+0x18e>
    else if(ch=='a') { Serial.printf("%d\n",t_acq); return  0;} // file size
     eba:	cmp	r4, #97	; 0x61
     ebc:	bne.n	f4e <menu()+0x18e>
     ebe:	ldr	r3, [pc, #184]	; (f78 <menu()+0x1b8>)
     ec0:	ldr	r1, [pc, #184]	; (f7c <menu()+0x1bc>)
     ec2:	ldr	r2, [r3, #0]
     ec4:	ldr	r0, [pc, #144]	; (f58 <menu()+0x198>)
     ec6:	bl	9968 <Print::printf(char const*, ...)>
     eca:	b.n	f4e <menu()+0x18e>
  }
  else if(ch=='!') // set 
     ecc:	cmp	r0, #33	; 0x21
     ece:	bne.n	f4e <menu()+0x18e>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     ed0:	bl	8498 <usb_serial_available>
  { 
    while(!Serial.available()) ;
     ed4:	cmp	r0, #0
     ed6:	beq.n	ed0 <menu()+0x110>
        virtual int read() { return usb_serial_getchar(); }
     ed8:	bl	8504 <usb_serial_getchar>
    ch=Serial.read();
     edc:	uxtb	r0, r0
    if(ch=='d') // set date
     ede:	cmp	r0, #100	; 0x64
     ee0:	bne.n	f0e <menu()+0x14e>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
     ee2:	add	r2, sp, #20
     ee4:	add	r1, sp, #16
     ee6:	add	r0, sp, #12
     ee8:	bl	d74 <menuGet3Int(int*, int*, int*)>
      tmElements_t tm;
      breakTime(rtc_get(), tm);
     eec:	bl	93c4 <rtc_get>
     ef0:	add	r1, sp, #24
     ef2:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>

      setRTCTime(tm.Hour, tm.Minute, tm.Second, day, month, year);
     ef6:	ldr	r3, [sp, #12]
     ef8:	ldrb.w	r2, [sp, #24]
     efc:	str	r3, [sp, #4]
     efe:	ldr	r3, [sp, #16]
     f00:	ldrb.w	r1, [sp, #25]
     f04:	str	r3, [sp, #0]
     f06:	ldrb.w	r0, [sp, #26]
     f0a:	ldr	r3, [sp, #20]
     f0c:	b.n	f3e <menu()+0x17e>
      return  0;
    } 
    else if(ch=='t') // set time
     f0e:	cmp	r0, #116	; 0x74
     f10:	bne.n	f44 <menu()+0x184>
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
     f12:	add	r2, sp, #20
     f14:	add	r1, sp, #16
     f16:	add	r0, sp, #12
     f18:	bl	d74 <menuGet3Int(int*, int*, int*)>

      tmElements_t tm;
      breakTime(rtc_get(), tm);
     f1c:	bl	93c4 <rtc_get>
     f20:	add	r1, sp, #24
     f22:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>
      setRTCTime(hour, minutes, seconds, tm.Day, tm.Month, tmYearToCalendar(tm.Year));
     f26:	ldrb.w	r2, [sp, #30]
     f2a:	add	r0, sp, #12
     f2c:	ldrb.w	r3, [sp, #28]
     f30:	addw	r2, r2, #1970	; 0x7b2
     f34:	str	r2, [sp, #4]
     f36:	ldrb.w	r2, [sp, #29]
     f3a:	str	r2, [sp, #0]
     f3c:	ldmia	r0, {r0, r1, r2}
     f3e:	bl	118c <setRTCTime(int, int, int, int, int, int)>
     f42:	b.n	f4e <menu()+0x18e>
      return  0;
    } 
    else if(ch=='a') { menuGetInt(&t_acq); return  0;} // file size
     f44:	cmp	r0, #97	; 0x61
     f46:	bne.n	f4e <menu()+0x18e>
     f48:	ldr	r0, [pc, #44]	; (f78 <menu()+0x1b8>)
     f4a:	bl	d38 <menuGetInt(int*)>
     f4e:	movs	r0, #0
  }
  return 0;
}
     f50:	add	sp, #32
     f52:	pop	{r4, pc}
     f54:	.word	0x2000136f
     f58:	.word	0x20001814
     f5c:	.word	0x200011da
     f60:	.word	0x200011e0
     f64:	.word	0x200011e5
     f68:	.word	0x05fa0004
     f6c:	.word	0xe000ed0c
     f70:	.word	0x20001198
     f74:	.word	0x200011b1
     f78:	.word	0x20001dd0
     f7c:	.word	0x200011cb

00000f80 <newHour()>:
    return 1;
}

int32_t hour_ = 0;
int16_t newHour(void)
{   uint32_t tx=rtc_get();
     f80:	push	{r3, lr}
     f82:	bl	93c4 <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
     f86:	mov.w	r3, #3600	; 0xe10
     f8a:	udiv	r0, r0, r3
    if(hour_== h_) return 0;
     f8e:	ldr	r3, [pc, #16]	; (fa0 <newHour()+0x20>)
     f90:	ldr	r2, [r3, #0]
     f92:	cmp	r0, r2
    hour_ = h_;
     f94:	itte	ne
     f96:	strne	r0, [r3, #0]
    return 1;
     f98:	movne	r0, #1

int32_t hour_ = 0;
int16_t newHour(void)
{   uint32_t tx=rtc_get();
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    if(hour_== h_) return 0;
     f9a:	moveq	r0, #0
    hour_ = h_;
    return 1;
}
     f9c:	pop	{r3, pc}
     f9e:	nop
     fa0:	.word	0x20006640

00000fa4 <breakTime(unsigned long, tmElements_t&)>:
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     fa4:	movs	r3, #60	; 0x3c
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     fa6:	mov.w	ip, #400	; 0x190
/* functions to convert to and from system time */
/* These are for interfacing with time services and are not normally needed in a sketch */

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(uint32_t timeInput, tmElements_t &tm){
     faa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     fae:	udiv	r4, r0, r3
     fb2:	mls	r2, r3, r4, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     fb6:	movw	r8, #365	; 0x16d
     fba:	mov.w	lr, #100	; 0x64
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     fbe:	strb	r2, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     fc0:	udiv	r2, r4, r3
     fc4:	mls	r3, r3, r2, r4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     fc8:	movs	r4, #24
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     fca:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     fcc:	mov.w	r3, #3600	; 0xe10
     fd0:	udiv	r3, r0, r3
     fd4:	udiv	r2, r3, r4
     fd8:	mls	r3, r4, r2, r3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     fdc:	movs	r2, #7
     fde:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     fe0:	strb	r3, [r1, #2]
  time /= 24; // now it is days
     fe2:	ldr	r3, [pc, #224]	; (10c4 <breakTime(unsigned long, tmElements_t&)+0x120>)
     fe4:	udiv	r0, r0, r3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     fe8:	adds	r3, r0, #4
     fea:	udiv	r2, r3, r2
     fee:	rsb	r2, r2, r2, lsl #3
     ff2:	subs	r3, r3, r2
  
  year = 0;  
  days = 0;
     ff4:	mov	r2, r4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     ff6:	adds	r3, #1
     ff8:	strb	r3, [r1, #3]
     ffa:	uxtb	r6, r4
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     ffc:	addw	r3, r6, #1970	; 0x7b2
    1000:	ands.w	r7, r3, #3
    1004:	bne.n	1024 <breakTime(unsigned long, tmElements_t&)+0x80>
    1006:	sdiv	r5, r3, lr
    100a:	mls	r5, lr, r5, r3
    100e:	cbnz	r5, 102a <breakTime(unsigned long, tmElements_t&)+0x86>
    1010:	sdiv	r5, r3, ip
    1014:	mls	r5, ip, r5, r3
    1018:	cmp	r5, #0
    101a:	ite	ne
    101c:	movne	r5, r8
    101e:	moveq.w	r5, #366	; 0x16e
    1022:	b.n	102e <breakTime(unsigned long, tmElements_t&)+0x8a>
    1024:	movw	r5, #365	; 0x16d
    1028:	b.n	102e <breakTime(unsigned long, tmElements_t&)+0x8a>
    102a:	mov.w	r5, #366	; 0x16e
    102e:	add	r2, r5
    1030:	adds	r4, #1
    1032:	cmp	r0, r2
    1034:	bcs.n	ffa <breakTime(unsigned long, tmElements_t&)+0x56>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    1036:	strb	r6, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    1038:	cbnz	r7, 1060 <breakTime(unsigned long, tmElements_t&)+0xbc>
    103a:	movs	r5, #100	; 0x64
    103c:	sdiv	r4, r3, r5
    1040:	mls	r4, r5, r4, r3
    1044:	cbnz	r4, 1066 <breakTime(unsigned long, tmElements_t&)+0xc2>
    1046:	mov.w	r5, #400	; 0x190
    104a:	sdiv	r4, r3, r5
    104e:	mls	r4, r5, r4, r3
    1052:	cmp	r4, #0
    1054:	movw	r4, #365	; 0x16d
    1058:	it	eq
    105a:	moveq.w	r4, #366	; 0x16e
    105e:	b.n	106a <breakTime(unsigned long, tmElements_t&)+0xc6>
    1060:	movw	r4, #365	; 0x16d
    1064:	b.n	106a <breakTime(unsigned long, tmElements_t&)+0xc6>
    1066:	mov.w	r4, #366	; 0x16e
  time  -= days; // now it is days in this year, starting at 0
    106a:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    106c:	movs	r6, #100	; 0x64
    106e:	mov.w	r4, #400	; 0x190
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    1072:	ldr.w	lr, [pc, #84]	; 10c8 <breakTime(unsigned long, tmElements_t&)+0x124>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    1076:	subs	r0, r0, r2
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    1078:	sdiv	r2, r3, r6
    107c:	mls	r6, r6, r2, r3
    1080:	sdiv	r2, r3, r4
    1084:	mls	r3, r4, r2, r3
    1088:	movs	r2, #0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    108a:	cmp	r2, #1
    108c:	uxtb	r5, r2
    108e:	bne.n	109e <breakTime(unsigned long, tmElements_t&)+0xfa>
      if (LEAP_YEAR(year)) {
    1090:	cbnz	r7, 10a4 <breakTime(unsigned long, tmElements_t&)+0x100>
    1092:	cbnz	r6, 10a8 <breakTime(unsigned long, tmElements_t&)+0x104>
        monthLength=29;
    1094:	cmp	r3, #0
    1096:	ite	ne
    1098:	movne	r4, #28
    109a:	moveq	r4, #29
    109c:	b.n	10aa <breakTime(unsigned long, tmElements_t&)+0x106>
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    109e:	ldrb.w	r4, [r2, lr]
    10a2:	b.n	10aa <breakTime(unsigned long, tmElements_t&)+0x106>
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
      } else {
        monthLength=28;
    10a4:	movs	r4, #28
    10a6:	b.n	10aa <breakTime(unsigned long, tmElements_t&)+0x106>
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
    10a8:	movs	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    10aa:	cmp	r4, r0
    10ac:	bhi.n	10b8 <breakTime(unsigned long, tmElements_t&)+0x114>
    10ae:	adds	r2, #1
      time -= monthLength;
    10b0:	subs	r0, r0, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    10b2:	cmp	r2, #12
    10b4:	bne.n	108a <breakTime(unsigned long, tmElements_t&)+0xe6>
    10b6:	mov	r5, r2
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    10b8:	adds	r5, #1
  tm.Day = time + 1;     // day of month
    10ba:	adds	r0, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    10bc:	strb	r5, [r1, #5]
  tm.Day = time + 1;     // day of month
    10be:	strb	r0, [r1, #4]
    10c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10c4:	.word	0x00015180
    10c8:	.word	0x20000f42

000010cc <makeTime(tmElements_t const&)>:
}

uint32_t makeTime(const tmElements_t &tm){   
    10cc:	push	{r4, r5, r6, r7, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    10ce:	ldr	r3, [pc, #176]	; (1180 <makeTime(tmElements_t const&)+0xb4>)
    10d0:	movw	r1, #1970	; 0x7b2
    10d4:	ldrb	r2, [r0, #6]
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    10d6:	movs	r5, #100	; 0x64
    10d8:	mov.w	r6, #400	; 0x190
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    10dc:	muls	r3, r2
  for (i = 0; i < tm.Year; i++) {
    10de:	subw	r4, r1, #1970	; 0x7b2
    10e2:	cmp	r2, r4
    10e4:	ble.n	110a <makeTime(tmElements_t const&)+0x3e>
    if (LEAP_YEAR(i)) {
    10e6:	lsls	r4, r1, #30
    10e8:	bne.n	1106 <makeTime(tmElements_t const&)+0x3a>
    10ea:	sdiv	r4, r1, r5
    10ee:	mls	r4, r5, r4, r1
    10f2:	cbnz	r4, 10fe <makeTime(tmElements_t const&)+0x32>
    10f4:	sdiv	r4, r1, r6
    10f8:	mls	r4, r6, r4, r1
    10fc:	cbnz	r4, 1106 <makeTime(tmElements_t const&)+0x3a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    10fe:	add.w	r3, r3, #86016	; 0x15000
    1102:	add.w	r3, r3, #384	; 0x180
    1106:	adds	r1, #1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    1108:	b.n	10de <makeTime(tmElements_t const&)+0x12>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    110a:	addw	r2, r2, #1970	; 0x7b2
    110e:	movs	r4, #100	; 0x64
    1110:	mov.w	r5, #400	; 0x190
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1114:	ldrb	r6, [r0, #5]
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    1116:	ldr	r7, [pc, #108]	; (1184 <makeTime(tmElements_t const&)+0xb8>)
    1118:	ldr.w	lr, [pc, #108]	; 1188 <makeTime(tmElements_t const&)+0xbc>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    111c:	sdiv	r1, r2, r4
    1120:	mls	r4, r4, r1, r2
    1124:	sdiv	r1, r2, r5
    1128:	mls	r5, r5, r1, r2
    112c:	movs	r1, #1
    112e:	and.w	r2, r2, #3
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1132:	cmp	r6, r1
    1134:	ble.n	115a <makeTime(tmElements_t const&)+0x8e>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1136:	cmp	r1, #2
    1138:	bne.n	114a <makeTime(tmElements_t const&)+0x7e>
    113a:	cbnz	r2, 114a <makeTime(tmElements_t const&)+0x7e>
    113c:	cbnz	r4, 1140 <makeTime(tmElements_t const&)+0x74>
    113e:	cbnz	r5, 114a <makeTime(tmElements_t const&)+0x7e>
      seconds += SECS_PER_DAY * 29;
    1140:	add.w	r3, r3, #2490368	; 0x260000
    1144:	add.w	r3, r3, #15232	; 0x3b80
    1148:	b.n	1156 <makeTime(tmElements_t const&)+0x8a>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    114a:	add.w	ip, r7, r1
    114e:	ldrb.w	ip, [ip, #-1]
    1152:	mla	r3, lr, ip, r3
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1156:	adds	r1, #1
    1158:	b.n	1132 <makeTime(tmElements_t const&)+0x66>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return seconds; 
    115a:	ldrb	r2, [r0, #1]
    115c:	mov.w	r4, #3600	; 0xe10
    1160:	ldrb	r1, [r0, #2]
    1162:	rsb	r2, r2, r2, lsl #4
    1166:	lsls	r2, r2, #2
    1168:	mla	r2, r4, r1, r2
    116c:	ldrb	r1, [r0, #0]
    116e:	add	r2, r1
    1170:	ldrb	r1, [r0, #4]
    1172:	ldr	r0, [pc, #20]	; (1188 <makeTime(tmElements_t const&)+0xbc>)
    1174:	subs	r1, #1
    1176:	mla	r0, r0, r1, r2
}
    117a:	add	r0, r3
    117c:	pop	{r4, r5, r6, r7, pc}
    117e:	nop
    1180:	.word	0x01e13380
    1184:	.word	0x20000f42
    1188:	.word	0x00015180

0000118c <setRTCTime(int, int, int, int, int, int)>:

extern "C" void rtc_set(uint32_t tt);

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    118c:	push	{r0, r1, r4, lr}
    118e:	ldr	r4, [sp, #20]
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
    1190:	strb.w	r0, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;
    1194:	add	r0, sp, #8
extern "C" void rtc_set(uint32_t tt);

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 // it is converted to years since 1970
  if( yr > 99)
    1196:	cmp	r4, #99	; 0x63
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    1198:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    119c:	strb.w	r2, [r0, #-8]!

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 // it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
    11a0:	ite	gt
    11a2:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    11a6:	addle	r4, #30
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    11a8:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    11ac:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    11b0:	ldr	r4, [sp, #16]
    11b2:	strb.w	r4, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    11b6:	bl	10cc <makeTime(tmElements_t const&)>
  rtc_set(tt); // for RTC
    11ba:	bl	93ec <rtc_set>
}
    11be:	add	sp, #8
    11c0:	pop	{r4, pc}

000011c2 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    11c2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11c6:	ldr	r5, [sp, #32]
    11c8:	mov	r7, r0
    11ca:	mov	r6, r2
    11cc:	add.w	r9, r3, r1
    11d0:	mov	r4, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    11d2:	cmp	r4, r9
    11d4:	beq.n	11f4 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>
       if (!readSector(sector + i, dst)) return false;
    11d6:	ldr	r3, [r7, #0]
    11d8:	mov	r2, r6
    11da:	mov	r1, r4
    11dc:	mov	r0, r7
    11de:	ldr	r3, [r3, #12]
    11e0:	add.w	r8, r4, #1
    11e4:	blx	r3
    11e6:	cbz	r0, 11f6 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x34>
       callback(sector + i, dst, context);
    11e8:	mov	r0, r4
    11ea:	ldr	r2, [sp, #36]	; 0x24
    11ec:	mov	r1, r6
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    11ee:	mov	r4, r8
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
    11f0:	blx	r5
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    11f2:	b.n	11d2 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    11f4:	movs	r0, #1
  }
    11f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000011fa <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    11fa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11fe:	mov	r5, r0
    1200:	mov	r7, r3
    1202:	add.w	r8, r2, r1
    1206:	mov	r4, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    1208:	cmp	r4, r8
    120a:	beq.n	1228 <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    120c:	ldr	r3, [r5, #0]
    120e:	mov	r0, r4
    1210:	ldr	r1, [sp, #24]
    1212:	ldr	r6, [r3, #32]
    1214:	blx	r7
    1216:	mov	r1, r4
    1218:	mov	r2, r0
    121a:	mov	r0, r5
    121c:	adds	r4, #1
    121e:	blx	r6
    1220:	cmp	r0, #0
    1222:	bne.n	1208 <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xe>
    1224:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     }
    return true;
    1228:	movs	r0, #1
  }
    122a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000122e <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    122e:	mov.w	r0, #4294967295
    1232:	bx	lr

00001234 <MySpiClass::send(unsigned char)>:

        // Receive a byte.
        uint8_t receive() { return SPI.transfer(0XFF); }

        // Send a byte.
        void send(uint8_t data) { SPI.transfer(data); }
    1234:	ldr	r3, [pc, #16]	; (1248 <MySpiClass::send(unsigned char)+0x14>)
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1236:	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1238:	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    123a:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    123c:	tst.w	r2, #2031616	; 0x1f0000
    1240:	beq.n	123a <MySpiClass::send(unsigned char)+0x6>
    1242:	ldr	r3, [r3, #116]	; 0x74
    1244:	bx	lr
    1246:	nop
    1248:	.word	0x200017c4

0000124c <MySpiClass::setSckSpeed(unsigned long)>:
        // Replace this function if your board has multiple byte send.
        void send(const uint8_t* buf, size_t count) 
        {  SPI.transfer((void *)buf, (void *) dummy_buffer, count); }

        // Save SPISettings for new max SCK frequency
        void setSckSpeed(uint32_t maxSck) {  m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0); }
    124c:	movs	r3, #7
    124e:	str	r1, [r0, #4]
    1250:	str	r3, [r0, #8]
    1252:	bx	lr

00001254 <__tcf_0>:
    const char *sd_str[]={"sdio",   "sd1","sd2","sd3","sd4","sd5","sd6"};
    const int cs[] = {BUILTIN_SDCARD,  34,   33,   35,   36,   37,  38 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1254:	bx	lr

00001256 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
    uint32_t diskSpace[nsd];
    uint32_t clusterSize[nsd];

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{       
    1256:	push	{r0, r1, r4, r5, r6, lr}
    1258:	mov	r5, r2
    125a:	mov	r4, r1
    125c:	mov	r6, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    125e:	bl	93c4 <rtc_get>
    1262:	mov	r1, sp
    1264:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    1268:	ldrb.w	r3, [sp, #6]

    *date = FS_DATE(tmYearToCalendar(tm.Year),tm.Month, tm.Day);
    126c:	ldrb.w	r2, [sp, #5]
    1270:	subs	r3, #10
    1272:	ldrb.w	r1, [sp, #4]
    1276:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    1278:	cmp	r3, #127	; 0x7f
    127a:	bhi.n	1290 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    127c:	cmp	r2, #12
    127e:	bhi.n	1290 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
    1280:	cmp	r1, #31
    1282:	bhi.n	1290 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
         year << 9 | month << 5 | day;
    1284:	orr.w	r1, r1, r2, lsl #5
    1288:	orr.w	r3, r1, r3, lsl #9
    128c:	uxth	r3, r3
    128e:	b.n	1292 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3c>
    1290:	movs	r3, #0
    1292:	strh	r3, [r6, #0]
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    1294:	ldrb.w	r3, [sp, #2]
    1298:	ldrb.w	r1, [sp, #1]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    129c:	cmp	r3, #23
    129e:	ldrb.w	r2, [sp]
    12a2:	bhi.n	12ba <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    12a4:	cmp	r1, #59	; 0x3b
    12a6:	bhi.n	12ba <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
    12a8:	cmp	r2, #59	; 0x3b
    12aa:	bhi.n	12ba <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
    12ac:	lsls	r1, r1, #5
    12ae:	orr.w	r3, r1, r3, lsl #11
    12b2:	orr.w	r3, r3, r2, lsr #1
    12b6:	uxth	r3, r3
    12b8:	b.n	12bc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x66>
    12ba:	movs	r3, #0
    *ms10 = tm.Second & 1 ? 100 : 0;
    12bc:	ands.w	r2, r2, #1
{       
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    *date = FS_DATE(tmYearToCalendar(tm.Year),tm.Month, tm.Day);
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    12c0:	strh	r3, [r4, #0]
    *ms10 = tm.Second & 1 ? 100 : 0;
    12c2:	it	ne
    12c4:	movne	r2, #100	; 0x64
    12c6:	strb	r2, [r5, #0]
}
    12c8:	add	sp, #8
    12ca:	pop	{r4, r5, r6, pc}

000012cc <MySpiClass::send(unsigned char const*, unsigned int)>:
        { memset(buf, 0XFF, count); SPI.transfer(buf, count); return 0; }

        // Send multiple bytes.
        // Replace this function if your board has multiple byte send.
        void send(const uint8_t* buf, size_t count) 
        {  SPI.transfer((void *)buf, (void *) dummy_buffer, count); }
    12cc:	mov	r3, r2
    12ce:	ldr	r0, [pc, #8]	; (12d8 <MySpiClass::send(unsigned char const*, unsigned int)+0xc>)
    12d0:	ldr	r2, [pc, #8]	; (12dc <MySpiClass::send(unsigned char const*, unsigned int)+0x10>)
    12d2:	b.w	20b0 <SPIClass::transfer(void const*, void*, unsigned int)>
    12d6:	nop
    12d8:	.word	0x200017c4
    12dc:	.word	0x20002938

000012e0 <MySpiClass::receive(unsigned char*, unsigned int)>:
        // Send a byte.
        void send(uint8_t data) { SPI.transfer(data); }

        // Receive multiple bytes.  
        // Replace this function if your board has multiple byte receive.
        uint8_t receive(uint8_t* buf, size_t count) 
    12e0:	push	{r3, r4, r5, lr}
    12e2:	mov	r4, r1
    12e4:	mov	r5, r2
        { memset(buf, 0XFF, count); SPI.transfer(buf, count); return 0; }
    12e6:	movs	r1, #255	; 0xff
    12e8:	mov	r0, r4
    12ea:	bl	7f6c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    12ee:	mov	r3, r5
    12f0:	mov	r2, r4
    12f2:	mov	r1, r4
    12f4:	ldr	r0, [pc, #8]	; (1300 <MySpiClass::receive(unsigned char*, unsigned int)+0x20>)
    12f6:	bl	20b0 <SPIClass::transfer(void const*, void*, unsigned int)>
    12fa:	movs	r0, #0
    12fc:	pop	{r3, r4, r5, pc}
    12fe:	nop
    1300:	.word	0x200017c4

00001304 <MySpiClass::begin(SdSpiConfig)>:
     * 
     */

    public:
        // Initialize the SPI bus.
        void begin(SdSpiConfig config) {  (void) config; SPI.begin(); }
    1304:	sub	sp, #16
    1306:	add	r0, sp, #16
    1308:	stmdb	r0, {r1, r2, r3}
    130c:	ldr	r0, [pc, #4]	; (1314 <MySpiClass::begin(SdSpiConfig)+0x10>)
    130e:	add	sp, #16
    1310:	b.w	1e98 <SPIClass::begin()>
    1314:	.word	0x200017c4

00001318 <File::dec_refcount() [clone .isra.23]>:
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
    1318:	push	{r4, lr}
    131a:	mov	r4, r0
		if (--(f->refcount) == 0) {
    131c:	ldr	r0, [r0, #0]
    131e:	ldr	r3, [r0, #4]
    1320:	subs	r3, #1
    1322:	str	r3, [r0, #4]
    1324:	cbnz	r3, 1336 <File::dec_refcount() [clone .isra.23]+0x1e>
			f->close();
    1326:	ldr	r3, [r0, #0]
    1328:	ldr	r3, [r3, #44]	; 0x2c
    132a:	blx	r3
			delete f;
    132c:	ldr	r0, [r4, #0]
    132e:	cbz	r0, 1336 <File::dec_refcount() [clone .isra.23]+0x1e>
    1330:	ldr	r3, [r0, #0]
    1332:	ldr	r3, [r3, #4]
    1334:	blx	r3
		}
		f = nullptr;
    1336:	movs	r3, #0
    1338:	str	r3, [r4, #0]
    133a:	pop	{r4, pc}

0000133c <MySpiClass::deactivate()>:

        // Activate SPI hardware with correct speed and mode.
        void activate() { if(doTransactions) SPI.beginTransaction(m_spiSettings); }
        // Deactivate SPI hardware.
        void deactivate() { if(doTransactions) SPI.endTransaction(); }
    133c:	ldrb	r3, [r0, #12]
    133e:	cmp	r3, #0
    1340:	beq.n	138a <MySpiClass::deactivate()+0x4e>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1342:	ldr	r3, [pc, #72]	; (138c <MySpiClass::deactivate()+0x50>)
    1344:	ldrb	r2, [r3, #19]
    1346:	cbz	r2, 138a <MySpiClass::deactivate()+0x4e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1348:	lsls	r2, r2, #31
    134a:	bpl.n	1352 <MySpiClass::deactivate()+0x16>
    134c:	ldr	r1, [r3, #40]	; 0x28
    134e:	ldr	r2, [pc, #64]	; (1390 <MySpiClass::deactivate()+0x54>)
    1350:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1352:	ldrb	r2, [r3, #19]
    1354:	lsls	r0, r2, #30
    1356:	bpl.n	1360 <MySpiClass::deactivate()+0x24>
    1358:	ldr	r2, [pc, #48]	; (138c <MySpiClass::deactivate()+0x50>)
    135a:	ldr	r1, [r2, #44]	; 0x2c
    135c:	ldr	r2, [pc, #52]	; (1394 <MySpiClass::deactivate()+0x58>)
    135e:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1360:	ldrb	r2, [r3, #19]
    1362:	lsls	r1, r2, #29
    1364:	bpl.n	136e <MySpiClass::deactivate()+0x32>
    1366:	ldr	r2, [pc, #36]	; (138c <MySpiClass::deactivate()+0x50>)
    1368:	ldr	r1, [r2, #48]	; 0x30
    136a:	ldr	r2, [pc, #44]	; (1398 <MySpiClass::deactivate()+0x5c>)
    136c:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    136e:	ldrb	r2, [r3, #19]
    1370:	lsls	r2, r2, #28
    1372:	bpl.n	137c <MySpiClass::deactivate()+0x40>
    1374:	ldr	r2, [pc, #20]	; (138c <MySpiClass::deactivate()+0x50>)
    1376:	ldr	r1, [r2, #52]	; 0x34
    1378:	ldr	r2, [pc, #32]	; (139c <MySpiClass::deactivate()+0x60>)
    137a:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    137c:	ldrb	r3, [r3, #19]
    137e:	lsls	r3, r3, #27
    1380:	bpl.n	138a <MySpiClass::deactivate()+0x4e>
    1382:	ldr	r3, [pc, #8]	; (138c <MySpiClass::deactivate()+0x50>)
    1384:	ldr	r2, [r3, #56]	; 0x38
    1386:	ldr	r3, [pc, #24]	; (13a0 <MySpiClass::deactivate()+0x64>)
    1388:	str	r2, [r3, #0]
    138a:	bx	lr
    138c:	.word	0x200017c4
    1390:	.word	0xe000e100
    1394:	.word	0xe000e104
    1398:	.word	0xe000e108
    139c:	.word	0xe000e10c
    13a0:	.word	0xe000e110

000013a4 <MySpiClass::receive()>:

        // Receive a byte.
        uint8_t receive() { return SPI.transfer(0XFF); }
    13a4:	ldr	r3, [pc, #20]	; (13bc <MySpiClass::receive()+0x18>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    13a6:	movs	r2, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    13a8:	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    13aa:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    13ac:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    13ae:	tst.w	r2, #2031616	; 0x1f0000
    13b2:	beq.n	13ac <MySpiClass::receive()+0x8>
    13b4:	ldr	r0, [r3, #116]	; 0x74
    13b6:	uxtb	r0, r0
    13b8:	bx	lr
    13ba:	nop
    13bc:	.word	0x200017c4

000013c0 <Print::print(char const*)>:
    13c0:	push	{r3, lr}
    13c2:	bl	674 <Print::write(char const*)>
    13c6:	pop	{r3, pc}

000013c8 <Print::print(unsigned long)>:

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    13c8:	movs	r3, #0
    13ca:	movs	r2, #10
    13cc:	b.w	9982 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000013d0 <Print::println(unsigned long)>:

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    13d0:	push	{r3, r4, r5, lr}
    13d2:	mov	r5, r0
    13d4:	bl	13c8 <Print::print(unsigned long)>
    13d8:	mov	r4, r0
    13da:	mov	r0, r5
    13dc:	bl	9948 <Print::println()>
    13e0:	add	r0, r4
    13e2:	pop	{r3, r4, r5, pc}

000013e4 <FsVolume::freeClusterCount() const>:
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    13e4:	mov	r3, r0
    return m_fVol ? m_fVol->freeClusterCount() :
    13e6:	ldr.w	r0, [r0, #1152]	; 0x480
           m_xVol ? m_xVol->freeClusterCount() : 0;
    13ea:	cbz	r0, 13f0 <FsVolume::freeClusterCount() const+0xc>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    13ec:	b.w	5d00 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    13f0:	ldr.w	r0, [r3, #1156]	; 0x484
    13f4:	cbz	r0, 13fa <FsVolume::freeClusterCount() const+0x16>
    13f6:	b.w	3c10 <ExFatPartition::freeClusterCount()>
  }
    13fa:	bx	lr

000013fc <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    13fc:	push	{r0, r1, r4, lr}
    13fe:	add	r3, sp, #8
    1400:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1404:	ldrb	r3, [r0, #19]
    1406:	ldr	r1, [sp, #0]
    1408:	cmp	r3, #0
    140a:	beq.n	146a <SPIClass::beginTransaction(SPISettings)+0x6e>
			__disable_irq();
    140c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    140e:	ldrb	r3, [r0, #19]
    1410:	lsls	r2, r3, #31
    1412:	bpl.n	1420 <SPIClass::beginTransaction(SPISettings)+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1414:	ldr	r2, [pc, #200]	; (14e0 <SPIClass::beginTransaction(SPISettings)+0xe4>)
    1416:	ldr	r3, [r0, #20]
    1418:	ldr	r4, [r2, #0]
    141a:	ands	r3, r4
    141c:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    141e:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x02) {
    1420:	ldrb	r3, [r0, #19]
    1422:	lsls	r3, r3, #30
    1424:	bpl.n	1432 <SPIClass::beginTransaction(SPISettings)+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1426:	ldr	r2, [pc, #188]	; (14e4 <SPIClass::beginTransaction(SPISettings)+0xe8>)
    1428:	ldr	r3, [r0, #24]
    142a:	ldr	r4, [r2, #0]
    142c:	ands	r3, r4
    142e:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1430:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1432:	ldrb	r3, [r0, #19]
    1434:	lsls	r4, r3, #29
    1436:	bpl.n	1444 <SPIClass::beginTransaction(SPISettings)+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1438:	ldr	r2, [pc, #172]	; (14e8 <SPIClass::beginTransaction(SPISettings)+0xec>)
    143a:	ldr	r3, [r0, #28]
    143c:	ldr	r4, [r2, #0]
    143e:	ands	r3, r4
    1440:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1442:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1444:	ldrb	r3, [r0, #19]
    1446:	lsls	r2, r3, #28
    1448:	bpl.n	1456 <SPIClass::beginTransaction(SPISettings)+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    144a:	ldr	r2, [pc, #160]	; (14ec <SPIClass::beginTransaction(SPISettings)+0xf0>)
    144c:	ldr	r3, [r0, #32]
    144e:	ldr	r4, [r2, #0]
    1450:	ands	r3, r4
    1452:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1454:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1456:	ldrb	r3, [r0, #19]
    1458:	lsls	r3, r3, #27
    145a:	bpl.n	1468 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    145c:	ldr	r2, [pc, #144]	; (14f0 <SPIClass::beginTransaction(SPISettings)+0xf4>)
    145e:	ldr	r3, [r0, #36]	; 0x24
    1460:	ldr	r4, [r2, #0]
    1462:	ands	r3, r4
    1464:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1466:	str	r3, [r2, #0]
			}
			__enable_irq();
    1468:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    146a:	ldr	r3, [r0, #8]
    146c:	cmp	r3, r1
    146e:	beq.n	14c6 <SPIClass::beginTransaction(SPISettings)+0xca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1470:	ldr	r3, [pc, #128]	; (14f4 <SPIClass::beginTransaction(SPISettings)+0xf8>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1472:	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    1474:	ldr	r2, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1476:	ldr	r3, [pc, #128]	; (14f8 <SPIClass::beginTransaction(SPISettings)+0xfc>)
    1478:	ubfx	r4, r2, #4, #2
    147c:	ubfx	r2, r2, #26, #3
    1480:	ldr.w	r3, [r3, r4, lsl #2]
    1484:	adds	r2, #1
    1486:	udiv	r2, r3, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    148a:	cbz	r1, 1492 <SPIClass::beginTransaction(SPISettings)+0x96>
    148c:	udiv	r3, r2, r1
    1490:	b.n	1494 <SPIClass::beginTransaction(SPISettings)+0x98>
    1492:	mov	r3, r2

			if (d && clkhz/d > _clock) d++;
    1494:	cbz	r3, 14b6 <SPIClass::beginTransaction(SPISettings)+0xba>
    1496:	udiv	r2, r2, r3
    149a:	cmp	r1, r2
    149c:	it	cc
    149e:	addcc	r3, #1
			if (d > 257) d= 257;  // max div
    14a0:	cmp.w	r3, #258	; 0x102
    14a4:	bcs.n	14ac <SPIClass::beginTransaction(SPISettings)+0xb0>
			if (d > 2) {
    14a6:	cmp	r3, #2
    14a8:	bls.n	14b4 <SPIClass::beginTransaction(SPISettings)+0xb8>
    14aa:	b.n	14b0 <SPIClass::beginTransaction(SPISettings)+0xb4>
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
    14ac:	movw	r3, #257	; 0x101
			if (d > 2) {
				div = d-2;
    14b0:	subs	r3, #2
    14b2:	b.n	14b6 <SPIClass::beginTransaction(SPISettings)+0xba>
			} else {
				div =0;
    14b4:	movs	r3, #0
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    14b6:	lsrs	r2, r3, #1
    14b8:	orr.w	r3, r3, r2, lsl #8
    14bc:	lsls	r2, r2, #16
    14be:	and.w	r2, r2, #16711680	; 0xff0000
    14c2:	orrs	r3, r2
    14c4:	str	r3, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    14c6:	ldr	r3, [r0, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    14c8:	movs	r2, #0
    14ca:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    14cc:	movs	r2, #3
    14ce:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    14d0:	ldr	r2, [r0, #12]
    14d2:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    14d4:	ldr	r2, [sp, #4]
    14d6:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    14d8:	movs	r2, #1
    14da:	str	r2, [r3, #16]

	}
    14dc:	add	sp, #8
    14de:	pop	{r4, pc}
    14e0:	.word	0xe000e180
    14e4:	.word	0xe000e184
    14e8:	.word	0xe000e188
    14ec:	.word	0xe000e18c
    14f0:	.word	0xe000e190
    14f4:	.word	0x400fc000
    14f8:	.word	0x20000658

000014fc <MySpiClass::activate()>:
    public:
        // Initialize the SPI bus.
        void begin(SdSpiConfig config) {  (void) config; SPI.begin(); }

        // Activate SPI hardware with correct speed and mode.
        void activate() { if(doTransactions) SPI.beginTransaction(m_spiSettings); }
    14fc:	push	{r3, lr}
    14fe:	ldrb	r3, [r0, #12]
    1500:	cbz	r3, 150e <MySpiClass::activate()+0x12>
    1502:	adds	r0, #4
    1504:	ldmia.w	r0, {r1, r2}
    1508:	ldr	r0, [pc, #4]	; (1510 <MySpiClass::activate()+0x14>)
    150a:	bl	13fc <SPIClass::beginTransaction(SPISettings)>
    150e:	pop	{r3, pc}
    1510:	.word	0x200017c4

00001514 <getCount()>:

    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    1514:	ldr	r2, [pc, #16]	; (1528 <getCount()+0x14>)
    1516:	ldrh	r3, [r2, #0]
    1518:	ldrh	r0, [r2, #2]
            {  
                /**
                 * @brief get number of data blocks in storage
                 * 
                 */
                if(front_ >= rear_) return front_ - rear_; return front_+ MAXBUF -rear_; 
    151a:	cmp	r3, r0
    151c:	it	cc
    151e:	addcc	r3, #10
    1520:	subs	r0, r3, r0
    1522:	uxth	r0, r0

    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    1524:	bx	lr
    1526:	nop
    1528:	.word	0x20006660

0000152c <pushData(unsigned long*)>:
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    152c:	push	{r3, r4, r5, lr}
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    152e:	ldr	r5, [pc, #44]	; (155c <pushData(unsigned long*)+0x30>)
    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    1530:	mov	r1, r0
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    1532:	ldrh	r4, [r5, #0]
                if(f >= MAXBUF) f=0;
                if(f == rear_) return 0;
    1534:	ldrh	r3, [r5, #2]
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    1536:	adds	r4, #1
    1538:	uxth	r4, r4
                if(f >= MAXBUF) f=0;
    153a:	cmp	r4, #10
    153c:	it	cs
    153e:	movcs	r4, #0
                if(f == rear_) return 0;
    1540:	cmp	r3, r4
    1542:	beq.n	1558 <pushData(unsigned long*)+0x2c>

                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
                memcpy(ptr,src,NBUF_ACQ*4);
    1544:	ldr	r0, [r5, #4]
    1546:	mov.w	r2, #1024	; 0x400
    154a:	add.w	r0, r0, r4, lsl #10
    154e:	bl	7fb0 <memcpy>
                front_ = f;
    1552:	strh	r4, [r5, #0]
                return 1;
    1554:	movs	r0, #1
    1556:	pop	{r3, r4, r5, pc}
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
                if(f >= MAXBUF) f=0;
                if(f == rear_) return 0;
    1558:	movs	r0, #0
    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    155a:	pop	{r3, r4, r5, pc}
    155c:	.word	0x20006660

00001560 <pullData(unsigned long*, unsigned long)>:
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    1560:	push	{r4, r5, r6, lr}
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    1562:	ldr	r6, [pc, #60]	; (15a0 <pullData(unsigned long*, unsigned long)+0x40>)

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    1564:	mov	r5, r1
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    1566:	ldrh	r4, [r6, #2]
                if(r == (front_/ndbl)) return 0;
    1568:	ldrh	r3, [r6, #0]
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    156a:	udiv	r4, r4, r1
                if(r == (front_/ndbl)) return 0;
    156e:	udiv	r3, r3, r1
    1572:	cmp	r4, r3
    1574:	beq.n	159c <pullData(unsigned long*, unsigned long)+0x3c>
    1576:	lsls	r2, r1, #10

                uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
                memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    1578:	ldr	r1, [r6, #4]
    157a:	mla	r1, r2, r4, r1
    157e:	bl	7fb0 <memcpy>
                if(++r >= (MAXBUF/ndbl)) r=0;
    1582:	movs	r3, #10
    1584:	adds	r1, r4, #1
                rear_ = r*ndbl;
                return 1;
    1586:	movs	r0, #1
                uint16_t r = (rear_/ndbl) ;
                if(r == (front_/ndbl)) return 0;

                uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
                memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
                if(++r >= (MAXBUF/ndbl)) r=0;
    1588:	udiv	r3, r3, r5
    158c:	uxth	r1, r1
    158e:	cmp	r1, r3
    1590:	it	cs
    1592:	movcs	r1, #0
                rear_ = r*ndbl;
    1594:	smulbb	r1, r5, r1
    1598:	strh	r1, [r6, #2]
    159a:	pop	{r4, r5, r6, pc}
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
                if(r == (front_/ndbl)) return 0;
    159c:	movs	r0, #0

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    159e:	pop	{r4, r5, r6, pc}
    15a0:	.word	0x20006660

000015a4 <sdCsInit(unsigned char)>:
};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}

void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); digitalWriteFast(pin, HIGH);}
    15a4:	push	{r4, lr}
    15a6:	mov	r4, r0
    15a8:	movs	r1, #1
    15aa:	bl	9558 <pinMode>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    15ae:	ldr	r3, [pc, #16]	; (15c0 <sdCsInit(unsigned char)+0x1c>)
    15b0:	lsls	r0, r4, #4
    15b2:	adds	r2, r3, r0
    15b4:	ldr	r3, [r3, r0]
    15b6:	ldr	r2, [r2, #12]
    15b8:	str.w	r2, [r3, #132]	; 0x84
    15bc:	pop	{r4, pc}
    15be:	nop
    15c0:	.word	0x200008a4

000015c4 <sdCsWrite(unsigned char, bool)>:
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWriteFast(pin, level); }
    15c4:	ldr	r3, [pc, #20]	; (15dc <sdCsWrite(unsigned char, bool)+0x18>)
    15c6:	lsls	r0, r0, #4
    15c8:	adds	r2, r3, r0
    15ca:	ldr	r3, [r3, r0]
    15cc:	ldr	r2, [r2, #12]
    15ce:	cbz	r1, 15d6 <sdCsWrite(unsigned char, bool)+0x12>
    15d0:	str.w	r2, [r3, #132]	; 0x84
    15d4:	bx	lr
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    15d6:	str.w	r2, [r3, #136]	; 0x88
    15da:	bx	lr
    15dc:	.word	0x200008a4

000015e0 <storage_configure()>:
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    *ms10 = tm.Second & 1 ? 100 : 0;
}

void storage_configure()
{
    15e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;
    15e4:	ldr	r2, [pc, #632]	; (1860 <storage_configure()+0x280>)
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    *ms10 = tm.Second & 1 ? 100 : 0;
}

void storage_configure()
{
    15e6:	sub	sp, #60	; 0x3c
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;
    15e8:	ldr	r3, [pc, #632]	; (1864 <storage_configure()+0x284>)

    for(int ii=0; ii<nsd; ii++)
    15ea:	movs	r6, #0
    15ec:	ldr	r4, [pc, #632]	; (1868 <storage_configure()+0x288>)
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;
    15ee:	str	r2, [r3, #0]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    15f0:	mov	r1, r6
    15f2:	ldr	r0, [pc, #632]	; (186c <storage_configure()+0x28c>)
    15f4:	bl	99f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    15f8:	ldr	r0, [pc, #624]	; (186c <storage_configure()+0x28c>)
    15fa:	bl	9948 <Print::println()>

    for(int ii=0; ii<nsd; ii++)
    { Serial.println(ii);

      uint16_t status=0;
      if(cs[ii] == BUILTIN_SDCARD)
    15fe:	ldr	r3, [pc, #624]	; (1870 <storage_configure()+0x290>)
    1600:	lsls	r5, r6, #2
    1602:	ldr.w	r7, [r3, r6, lsl #2]
    1606:	cmp	r7, #254	; 0xfe
    1608:	bne.n	1642 <storage_configure()+0x62>
    160a:	mov.w	r8, #0
    160e:	add.w	sl, r4, #4
    1612:	addw	fp, r4, #1172	; 0x494
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    1616:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    1618:	movs	r1, #0
    161a:	uxth.w	r9, r8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    161e:	mov	r0, fp
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    1620:	strb.w	r3, [r4, #1204]	; 0x4b4
    sdioConfigBackup = sdioConfig;
    1624:	strb.w	r1, [r4, #1216]	; 0x4c0
    1628:	bl	7a30 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    162c:	str.w	fp, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    1630:	cmp.w	fp, #0
    1634:	beq.n	1732 <storage_configure()+0x152>
    1636:	mov	r0, fp
    1638:	bl	71e8 <SdioCard::errorCode() const>
    163c:	cmp	r0, #0
    163e:	bne.n	1732 <storage_configure()+0x152>
    1640:	b.n	171c <storage_configure()+0x13c>
            else
            {
                Serial.println("No sdio storage"); 
            }
      }
      else if(cs[ii]<BUILTIN_SDCARD)
    1642:	cmp	r7, #253	; 0xfd
    1644:	bgt.w	184e <storage_configure()+0x26e>
      { 
            sdCsInit(cs[ii]);
    1648:	uxtb.w	r8, r7
            delay(100);
    164c:	mov.w	fp, #0
                Serial.println("No sdio storage"); 
            }
      }
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
    1650:	mov	r0, r8
    1652:	bl	15a4 <sdCsInit(unsigned char)>
            delay(100);
    1656:	movs	r0, #100	; 0x64
    1658:	bl	9204 <delay>
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    165c:	ldr	r2, [pc, #532]	; (1874 <storage_configure()+0x294>)
    165e:	adds	r3, r4, #4
    1660:	add.w	lr, sp, #32
    1664:	strb.w	r8, [sp, #20]
    1668:	str.w	r2, [r4, #1208]	; 0x4b8
    166c:	add.w	r9, r4, #1184	; 0x4a0
    spiConfigBackupPort = spiConfig.spiPort;
    1670:	ldr	r2, [pc, #516]	; (1878 <storage_configure()+0x298>)
    1672:	uxth.w	sl, fp
    1676:	str	r3, [sp, #8]
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    1678:	movs	r3, #0
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    167a:	str.w	r2, [r4, #1212]	; 0x4bc
    167e:	ldr	r2, [pc, #500]	; (1874 <storage_configure()+0x294>)
    1680:	strb.w	r3, [sp, #21]
    1684:	str	r2, [sp, #24]
    1686:	ldr	r2, [pc, #496]	; (1878 <storage_configure()+0x298>)
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    1688:	strb.w	r3, [r4, #1205]	; 0x4b5
    168c:	str	r2, [sp, #28]
    168e:	add	r2, sp, #20
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    1690:	strb.w	r8, [r4, #1204]	; 0x4b4
    1694:	ldmia	r2, {r0, r1, r2}
    1696:	stmia.w	lr, {r0, r1, r2}
    169a:	strb.w	r3, [sp, #33]	; 0x21
    169e:	ldr	r3, [pc, #468]	; (1874 <storage_configure()+0x294>)
    16a0:	strb.w	r8, [sp, #32]
    16a4:	str	r3, [sp, #36]	; 0x24
    16a6:	ldr	r3, [pc, #464]	; (1878 <storage_configure()+0x298>)
    16a8:	str	r3, [sp, #40]	; 0x28
    16aa:	add	r3, sp, #44	; 0x2c
    16ac:	ldmia.w	lr, {r0, r1, r2}
    16b0:	stmia.w	r3, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    16b4:	mov	r0, r9
    16b6:	ldmia	r3, {r1, r2, r3}
    16b8:	bl	6b2c <SdSpiCard::begin(SdSpiConfig)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    16bc:	str.w	r9, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    16c0:	cmp.w	r9, #0
    16c4:	bne.n	16d2 <storage_configure()+0xf2>
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED, &mySpi)) && tries<10)
    16c6:	cmp.w	sl, #9
    16ca:	ite	hi
    16cc:	movhi	r3, #0
    16ce:	movls	r3, #1
    16d0:	b.n	16ea <storage_configure()+0x10a>
    16d2:	ldrb.w	r3, [r4, #1199]	; 0x4af
    16d6:	cmp	r3, #0
    16d8:	bne.n	16c6 <storage_configure()+0xe6>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    16da:	mov	r1, r9
    16dc:	adds	r0, r4, #4
    16de:	str	r3, [sp, #8]
    16e0:	bl	66f4 <FsVolume::begin(BlockDeviceInterface*)>
    16e4:	ldr	r3, [sp, #8]
    16e6:	cmp	r0, #0
    16e8:	beq.n	16c6 <storage_configure()+0xe6>
    16ea:	add.w	r9, fp, #1
    16ee:	cbz	r3, 170c <storage_configure()+0x12c>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16f0:	mov	r1, sl
    16f2:	ldr	r0, [pc, #376]	; (186c <storage_configure()+0x28c>)
    16f4:	bl	99f8 <Print::print(long)>
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 
    16f8:	ldr	r1, [pc, #384]	; (187c <storage_configure()+0x29c>)
    16fa:	ldr	r0, [pc, #368]	; (186c <storage_configure()+0x28c>)
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
            delay(100);
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED, &mySpi)) && tries<10)
    16fc:	mov	fp, r9
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 
    16fe:	bl	13c0 <Print::print(char const*)>
    1702:	mov.w	r0, #1000	; 0x3e8
    1706:	bl	9204 <delay>
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
            delay(100);
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED, &mySpi)) && tries<10)
    170a:	b.n	165c <storage_configure()+0x7c>
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 

            if(tries<10) 
    170c:	cmp.w	sl, #9
    1710:	bls.n	1756 <storage_configure()+0x176>
            {
                status=1;
            }
            else
            {
                Serial.println("No spi storage");
    1712:	ldr	r1, [pc, #364]	; (1880 <storage_configure()+0x2a0>)
    1714:	ldr	r0, [pc, #340]	; (186c <storage_configure()+0x28c>)
    1716:	bl	2e4 <Print::println(char const*)>
    171a:	b.n	184e <storage_configure()+0x26e>
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    171c:	ldr.w	r1, [r4, #1168]	; 0x490
    1720:	mov	r0, sl
    1722:	bl	66f4 <FsVolume::begin(BlockDeviceInterface*)>
    1726:	cbz	r0, 1732 <storage_configure()+0x152>
      {
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO)) && tries<10)
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 

            if(tries<10) 
    1728:	cmp.w	r9, #10
    172c:	bne.n	1756 <storage_configure()+0x176>
            {
                status=1;
            }
            else
            {
                Serial.println("No sdio storage"); 
    172e:	ldr	r1, [pc, #340]	; (1884 <storage_configure()+0x2a4>)
    1730:	b.n	1714 <storage_configure()+0x134>

      uint16_t status=0;
      if(cs[ii] == BUILTIN_SDCARD)
      {
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO)) && tries<10)
    1732:	cmp.w	r8, #10
    1736:	beq.n	1728 <storage_configure()+0x148>
    1738:	mov	r1, r8
    173a:	ldr	r0, [pc, #304]	; (186c <storage_configure()+0x28c>)
    173c:	bl	99f8 <Print::print(long)>
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 
    1740:	ldr	r1, [pc, #312]	; (187c <storage_configure()+0x29c>)
    1742:	ldr	r0, [pc, #296]	; (186c <storage_configure()+0x28c>)
    1744:	add.w	r8, r8, #1
    1748:	bl	13c0 <Print::print(char const*)>
    174c:	mov.w	r0, #1000	; 0x3e8
    1750:	bl	9204 <delay>

      uint16_t status=0;
      if(cs[ii] == BUILTIN_SDCARD)
      {
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO)) && tries<10)
    1754:	b.n	1612 <storage_configure()+0x32>
                Serial.println("No spi storage");
            }
      }
      if (status)
      {
            uint64_t totalSize = sdx[ii].totalSize();
    1756:	ldr	r3, [r4, #0]
    1758:	mov	r0, r4
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    175a:	mov.w	sl, #0
    175e:	ldr	r3, [r3, #28]
    1760:	blx	r3
            uint64_t usedSize  = sdx[ii].usedSize();
    1762:	ldr	r3, [r4, #0]
                Serial.println("No spi storage");
            }
      }
      if (status)
      {
            uint64_t totalSize = sdx[ii].totalSize();
    1764:	mov	r8, r0
            uint64_t usedSize  = sdx[ii].usedSize();
    1766:	mov	r0, r4
    1768:	ldr	r3, [r3, #24]
                Serial.println("No spi storage");
            }
      }
      if (status)
      {
            uint64_t totalSize = sdx[ii].totalSize();
    176a:	mov	r9, r1
            uint64_t usedSize  = sdx[ii].usedSize();
    176c:	blx	r3

            Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    176e:	ldr	r3, [pc, #280]	; (1888 <storage_configure()+0x2a8>)
    1770:	mov	r2, r6
    1772:	ldr	r3, [r5, r3]
    1774:	str	r3, [sp, #0]
    1776:	mov	r3, r7
    1778:	movs	r7, #10
            }
      }
      if (status)
      {
            uint64_t totalSize = sdx[ii].totalSize();
            uint64_t usedSize  = sdx[ii].usedSize();
    177a:	strd	r0, r1, [sp, #8]

            Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    177e:	ldr	r1, [pc, #268]	; (188c <storage_configure()+0x2ac>)
    1780:	ldr	r0, [pc, #232]	; (186c <storage_configure()+0x28c>)
    1782:	bl	9968 <Print::printf(char const*, ...)>
    1786:	mov	r2, r8
    1788:	mov	r3, r9
    178a:	ldr	r0, [pc, #224]	; (186c <storage_configure()+0x28c>)
    178c:	stmia.w	sp, {r7, sl}
    1790:	bl	9a0a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1794:	ldr	r1, [pc, #228]	; (187c <storage_configure()+0x29c>)
    1796:	ldr	r0, [pc, #212]	; (186c <storage_configure()+0x28c>)
    1798:	bl	13c0 <Print::print(char const*)>
    179c:	ldr	r0, [pc, #204]	; (186c <storage_configure()+0x28c>)
    179e:	ldrd	r2, r3, [sp, #8]
    17a2:	stmia.w	sp, {r7, sl}
    17a6:	bl	9a0a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    17aa:	ldr	r0, [pc, #192]	; (186c <storage_configure()+0x28c>)
    17ac:	bl	9948 <Print::println()>
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    17b0:	ldr.w	r3, [r4, #1156]	; 0x484
    17b4:	adds	r7, r4, #4
           m_xVol ? m_xVol->clusterCount() : 0;
    17b6:	cbz	r3, 17be <storage_configure()+0x1de>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    17b8:	ldr	r1, [r3, #28]
    17ba:	subs	r1, #1
    17bc:	b.n	17c8 <storage_configure()+0x1e8>
    17be:	ldr.w	r1, [r4, #1160]	; 0x488
    17c2:	cbz	r1, 17c8 <storage_configure()+0x1e8>
    17c4:	ldr.w	r1, [r1, #1072]	; 0x430

            Serial.print(sdx[ii].sdfs.clusterCount()); Serial.print(" "); 
    17c8:	ldr	r0, [pc, #160]	; (186c <storage_configure()+0x28c>)
    17ca:	bl	13c8 <Print::print(unsigned long)>
    17ce:	ldr	r1, [pc, #172]	; (187c <storage_configure()+0x29c>)
    17d0:	ldr	r0, [pc, #152]	; (186c <storage_configure()+0x28c>)
    17d2:	bl	13c0 <Print::print(char const*)>
            Serial.print(sdx[ii].sdfs.freeClusterCount()); Serial.print(" ");
    17d6:	mov	r0, r7
    17d8:	bl	13e4 <FsVolume::freeClusterCount() const>
    17dc:	mov	r1, r0
    17de:	ldr	r0, [pc, #140]	; (186c <storage_configure()+0x28c>)
    17e0:	bl	13c8 <Print::print(unsigned long)>
    17e4:	ldr	r1, [pc, #148]	; (187c <storage_configure()+0x29c>)
    17e6:	ldr	r0, [pc, #132]	; (186c <storage_configure()+0x28c>)
    17e8:	bl	13c0 <Print::print(char const*)>
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  uint32_t __attribute__((error("use sectorsPerCluster()"))) blocksPerCluster();
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
    17ec:	ldr.w	r3, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    17f0:	cbz	r3, 1800 <storage_configure()+0x220>
    17f2:	ldrb	r1, [r3, #6]
    17f4:	mov.w	r3, #512	; 0x200
    17f8:	lsl.w	r1, r3, r1
    17fc:	uxth	r1, r1
    17fe:	b.n	180a <storage_configure()+0x22a>
    1800:	ldr.w	r1, [r4, #1160]	; 0x488
    1804:	cbz	r1, 180a <storage_configure()+0x22a>
    1806:	ldr.w	r1, [r1, #1084]	; 0x43c

            clusterSize[ii] = sdx[ii].sdfs.bytesPerCluster()/512; // count sectors
    180a:	ldr	r3, [pc, #132]	; (1890 <storage_configure()+0x2b0>)
    180c:	lsrs	r1, r1, #9
            Serial.println(clusterSize[ii]) ;Serial.print(" ");
    180e:	ldr	r0, [pc, #92]	; (186c <storage_configure()+0x28c>)
            Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

            Serial.print(sdx[ii].sdfs.clusterCount()); Serial.print(" "); 
            Serial.print(sdx[ii].sdfs.freeClusterCount()); Serial.print(" ");

            clusterSize[ii] = sdx[ii].sdfs.bytesPerCluster()/512; // count sectors
    1810:	str	r1, [r5, r3]
            Serial.println(clusterSize[ii]) ;Serial.print(" ");
    1812:	bl	13d0 <Print::println(unsigned long)>
    1816:	ldr	r1, [pc, #100]	; (187c <storage_configure()+0x29c>)
    1818:	ldr	r0, [pc, #80]	; (186c <storage_configure()+0x28c>)
    181a:	bl	13c0 <Print::print(char const*)>

            diskSpace[ii]=diskSize[ii]=sdx[ii].sdfs.freeClusterCount();
    181e:	mov	r0, r7
    1820:	bl	13e4 <FsVolume::freeClusterCount() const>
    1824:	ldr	r3, [pc, #108]	; (1894 <storage_configure()+0x2b4>)
    1826:	mov	r1, r0
    1828:	str	r0, [r5, r3]
    182a:	ldr	r3, [pc, #108]	; (1898 <storage_configure()+0x2b8>)
    182c:	str	r0, [r5, r3]
            Serial.println(diskSize[ii]) ;Serial.print(" ");
    182e:	ldr	r0, [pc, #60]	; (186c <storage_configure()+0x28c>)
    1830:	bl	13d0 <Print::println(unsigned long)>
    1834:	ldr	r1, [pc, #68]	; (187c <storage_configure()+0x29c>)
    1836:	ldr	r0, [pc, #52]	; (186c <storage_configure()+0x28c>)
    1838:	bl	13c0 <Print::print(char const*)>
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;

    for(int ii=0; ii<nsd; ii++)
    183c:	adds	r6, #1
    183e:	add.w	r4, r4, #1224	; 0x4c8
    1842:	cmp	r6, #7
    1844:	bne.w	15f0 <storage_configure()+0x10>
            diskSize[ii]=0;
            diskSpace[ii]=0;
            clusterSize[ii]=1;
      }
    }
}
    1848:	add	sp, #60	; 0x3c
    184a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            diskSpace[ii]=diskSize[ii]=sdx[ii].sdfs.freeClusterCount();
            Serial.println(diskSize[ii]) ;Serial.print(" ");
      }
      else
      {
            diskSize[ii]=0;
    184e:	movs	r3, #0
    1850:	ldr	r2, [pc, #64]	; (1894 <storage_configure()+0x2b4>)
    1852:	str	r3, [r5, r2]
            diskSpace[ii]=0;
    1854:	ldr	r2, [pc, #64]	; (1898 <storage_configure()+0x2b8>)
    1856:	str	r3, [r5, r2]
            clusterSize[ii]=1;
    1858:	movs	r2, #1
    185a:	ldr	r3, [pc, #52]	; (1890 <storage_configure()+0x2b0>)
    185c:	str	r2, [r5, r3]
    185e:	b.n	183c <storage_configure()+0x25c>
    1860:	.word	0x00001257
    1864:	.word	0x20003548
    1868:	.word	0x20006680
    186c:	.word	0x20001814
    1870:	.word	0x20000398
    1874:	.word	0x01f78a40
    1878:	.word	0x20006650
    187c:	.word	0x20000f7c
    1880:	.word	0x20001203
    1884:	.word	0x200011f3
    1888:	.word	0x20001db0
    188c:	.word	0x20001212
    1890:	.word	0x200035cc
    1894:	.word	0x200065e8
    1898:	.word	0x20006604

0000189c <listDisks()>:
      }
    }
}

void listDisks(void)
{
    189c:	push	{r0, r1, r2, r4, r5, lr}
    for(int ii=0;ii<nsd;ii++)
    189e:	movs	r4, #0
    {
        Serial.print("\n"); 
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]);
    18a0:	ldr	r5, [pc, #80]	; (18f4 <listDisks()+0x58>)

void listDisks(void)
{
    for(int ii=0;ii<nsd;ii++)
    {
        Serial.print("\n"); 
    18a2:	ldr	r1, [pc, #84]	; (18f8 <listDisks()+0x5c>)
    18a4:	ldr	r0, [pc, #84]	; (18fc <listDisks()+0x60>)
    18a6:	bl	13c0 <Print::print(char const*)>
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]);
    18aa:	ldr	r3, [pc, #84]	; (1900 <listDisks()+0x64>)
    18ac:	mov	r2, r4
    18ae:	ldr	r1, [pc, #84]	; (1904 <listDisks()+0x68>)
    18b0:	ldr.w	r3, [r3, r4, lsl #2]
    18b4:	ldr	r0, [pc, #68]	; (18fc <listDisks()+0x60>)
    18b6:	str	r3, [sp, #0]
    18b8:	ldr.w	r3, [r5, r4, lsl #2]
    18bc:	bl	9968 <Print::printf(char const*, ...)>
        Serial.printf("%d %d",sdx[ii].sdfs.freeClusterCount(),diskSize[ii]);
    18c0:	mov.w	r3, #1224	; 0x4c8
    18c4:	ldr	r0, [pc, #64]	; (1908 <listDisks()+0x6c>)
    18c6:	mla	r0, r3, r4, r0
    18ca:	adds	r0, #4
    18cc:	bl	13e4 <FsVolume::freeClusterCount() const>
    18d0:	ldr	r3, [pc, #56]	; (190c <listDisks()+0x70>)
    18d2:	mov	r2, r0
    18d4:	ldr	r1, [pc, #56]	; (1910 <listDisks()+0x74>)
    18d6:	ldr.w	r3, [r3, r4, lsl #2]
    }
}

void listDisks(void)
{
    for(int ii=0;ii<nsd;ii++)
    18da:	adds	r4, #1
    {
        Serial.print("\n"); 
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]);
        Serial.printf("%d %d",sdx[ii].sdfs.freeClusterCount(),diskSize[ii]);
    18dc:	ldr	r0, [pc, #28]	; (18fc <listDisks()+0x60>)
    18de:	bl	9968 <Print::printf(char const*, ...)>
    }
}

void listDisks(void)
{
    for(int ii=0;ii<nsd;ii++)
    18e2:	cmp	r4, #7
    18e4:	bne.n	18a2 <listDisks()+0x6>
    {
        Serial.print("\n"); 
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]);
        Serial.printf("%d %d",sdx[ii].sdfs.freeClusterCount(),diskSize[ii]);
    }
    Serial.print("\n"); 
    18e6:	ldr	r1, [pc, #16]	; (18f8 <listDisks()+0x5c>)
    18e8:	ldr	r0, [pc, #16]	; (18fc <listDisks()+0x60>)
    18ea:	bl	13c0 <Print::print(char const*)>
}
    18ee:	add	sp, #12
    18f0:	pop	{r4, r5, pc}
    18f2:	nop
    18f4:	.word	0x20000398
    18f8:	.word	0x2000136f
    18fc:	.word	0x20001814
    1900:	.word	0x20001db0
    1904:	.word	0x20001212
    1908:	.word	0x20006680
    190c:	.word	0x200065e8
    1910:	.word	0x20001224

00001914 <checkReboot()>:

int16_t checkReboot(void)
{
    int ii=0;
    1914:	movs	r3, #0
    while((ii<nsd) && (diskSpace[ii]<MIN_SPACE)) ii++;
    1916:	ldr	r2, [pc, #32]	; (1938 <checkReboot()+0x24>)
    1918:	ldr	r1, [pc, #32]	; (193c <checkReboot()+0x28>)
    191a:	ldr.w	r0, [r2, r3, lsl #2]
    191e:	cmp	r0, r1
    1920:	bhi.n	192a <checkReboot()+0x16>
    1922:	adds	r3, #1
    1924:	cmp	r3, #7
    1926:	bne.n	191a <checkReboot()+0x6>
    1928:	b.n	1930 <checkReboot()+0x1c>
    if(ii<nsd) CPU_RESTART;
    192a:	ldr	r2, [pc, #20]	; (1940 <checkReboot()+0x2c>)
    192c:	ldr	r3, [pc, #20]	; (1944 <checkReboot()+0x30>)
    192e:	str	r2, [r3, #0]
    return -1;
}
    1930:	mov.w	r0, #4294967295
    1934:	bx	lr
    1936:	nop
    1938:	.word	0x20006604
    193c:	.word	0x000257ff
    1940:	.word	0x05fa0004
    1944:	.word	0xe000ed0c

00001948 <saveData(short)>:
    return 1;
}

/* main data filing routine */
int16_t saveData(int16_t status)
{   static char dirName[80];
    1948:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static char fileName[80];
    static char header[512];
    static int dirFlag=0;

    if(status<CLOSED) return status; // we are stopped: don't do anything
    194c:	subs	r4, r0, #0
    return 1;
}

/* main data filing routine */
int16_t saveData(int16_t status)
{   static char dirName[80];
    194e:	sub	sp, #84	; 0x54
    static char fileName[80];
    static char header[512];
    static int dirFlag=0;

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1950:	blt.w	1b0c <saveData(short)+0x1c4>

    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    1954:	movs	r1, #2
    1956:	ldr	r0, [pc, #672]	; (1bf8 <saveData(short)+0x2b0>)
    1958:	bl	1560 <pullData(unsigned long*, unsigned long)>
    195c:	cmp	r0, #0
    195e:	beq.n	1a58 <saveData(short)+0x110>
    {   disk_count++;
    1960:	ldr	r2, [pc, #664]	; (1bfc <saveData(short)+0x2b4>)
    1962:	ldr	r3, [r2, #0]
    1964:	adds	r3, #1
    1966:	str	r3, [r2, #0]
        if(status==CLOSED) // file closed: should open
    1968:	cbnz	r4, 19ac <saveData(short)+0x64>
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    196a:	ldr	r3, [pc, #660]	; (1c00 <saveData(short)+0x2b8>)
    196c:	movs	r2, #1

static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
    196e:	ldr	r7, [pc, #660]	; (1c04 <saveData(short)+0x2bc>)
    1970:	mov	r8, r3
    1972:	ldr.w	r9, [pc, #740]	; 1c58 <saveData(short)+0x310>
    1976:	mov	r5, r7
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1978:	strb	r2, [r3, #12]

static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
    197a:	ldr	r4, [r7, #0]
    197c:	ldr	r6, [pc, #644]	; (1c04 <saveData(short)+0x2bc>)
    197e:	cmp	r4, #6
    1980:	bgt.n	1a80 <saveData(short)+0x138>
    1982:	ldr.w	r3, [r9, r4, lsl #2]
    1986:	cmp	r3, #0
    1988:	beq.w	1b10 <saveData(short)+0x1c8>
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    198c:	mov.w	r3, #1224	; 0x4c8
    1990:	ldr	r0, [pc, #628]	; (1c08 <saveData(short)+0x2c0>)
    1992:	mla	r0, r3, r4, r0
    1996:	adds	r0, #4
    1998:	bl	13e4 <FsVolume::freeClusterCount() const>
    199c:	ldr	r3, [pc, #620]	; (1c0c <saveData(short)+0x2c4>)
    199e:	cmp.w	r0, #153600	; 0x25800
    19a2:	str.w	r0, [r3, r4, lsl #2]
    19a6:	bcc.w	1b10 <saveData(short)+0x1c8>
    19aa:	b.n	1a80 <saveData(short)+0x138>
            {
               return MUST_REBOOT; // if file open fails: don't do anything
            }
        }
        //
        if(status==OPENED) // file is open: write first record (header)
    19ac:	cmp	r4, #1
    19ae:	bne.n	1a3e <saveData(short)+0xf6>
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    19b0:	bl	93c4 <rtc_get>
    19b4:	add	r1, sp, #24
    19b6:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    19ba:	ldrb.w	r2, [sp, #24]
    19be:	ldr	r5, [pc, #592]	; (1c10 <saveData(short)+0x2c8>)

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    iptr[2] = FSAMP;
    iptr[3] = NCHAN_ACQ;
    19c0:	movs	r4, #2
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    19c2:	str	r2, [sp, #16]
    19c4:	ldrb.w	r2, [sp, #25]
    19c8:	mov	r0, r5
    19ca:	ldrb.w	r3, [sp, #30]
    19ce:	str	r2, [sp, #12]
    19d0:	ldrb.w	r2, [sp, #26]
    19d4:	addw	r3, r3, #1970	; 0x7b2
    19d8:	ldr	r1, [pc, #568]	; (1c14 <saveData(short)+0x2cc>)
    19da:	str	r2, [sp, #8]
    19dc:	ldrb.w	r2, [sp, #28]
    19e0:	str	r2, [sp, #4]
    19e2:	ldrb.w	r2, [sp, #29]
    19e6:	str	r2, [sp, #0]
    19e8:	ldr	r2, [pc, #556]	; (1c18 <saveData(short)+0x2d0>)
    19ea:	bl	aa88 <sprintf>
    char *ptr = header+(nd+1);

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    19ee:	movs	r2, #4
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);
    19f0:	adds	r0, #1

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    19f2:	str	r2, [r5, r0]
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);
    19f4:	adds	r3, r5, r0

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    19f6:	ldr	r2, [pc, #548]	; (1c1c <saveData(short)+0x2d4>)
    iptr[2] = FSAMP;
    iptr[3] = NCHAN_ACQ;
    19f8:	str	r4, [r3, #12]
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    19fa:	ldr	r2, [r2, #0]
    19fc:	str	r2, [r3, #4]
    iptr[2] = FSAMP;
    19fe:	movw	r2, #48000	; 0xbb80
    1a02:	str	r2, [r3, #8]
    iptr[3] = NCHAN_ACQ;
    iptr[4] = t_acq;
    1a04:	ldr	r2, [pc, #536]	; (1c20 <saveData(short)+0x2d8>)
    1a06:	ldr	r2, [r2, #0]
    1a08:	str	r2, [r3, #16]
    iptr[5] = 0;
    1a0a:	movs	r2, #0
    1a0c:	str	r2, [r3, #20]

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    1a0e:	movs	r3, #85	; 0x55
    1a10:	strb.w	r3, [r5, #508]	; 0x1fc
    1a14:	strb.w	r3, [r5, #509]	; 0x1fd
    1a18:	strb.w	r3, [r5, #510]	; 0x1fe
    1a1c:	strb.w	r3, [r5, #511]	; 0x1ff
    1a20:	ldr	r3, [pc, #512]	; (1c24 <saveData(short)+0x2dc>)
    1a22:	ldr	r0, [r3, #16]
	virtual size_t write(const uint8_t *buf, size_t size) {
		return (f) ? f->write((void*)buf, size) : 0;
	}

	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1a24:	cbnz	r0, 1a2c <saveData(short)+0xe4>
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
                if(file) 
                    status = OPENED; 
                else 
                {   Serial.println("Failing open file");
                    return MUST_REBOOT; 
    1a26:	mvn.w	r0, #1
    1a2a:	b.n	1d36 <saveData(short)+0x3ee>
    1a2c:	ldr	r3, [r0, #0]
    1a2e:	mov.w	r2, #512	; 0x200
    1a32:	mov	r1, r5
    1a34:	ldr	r3, [r3, #12]
    1a36:	blx	r3
            }
        }
        //
        if(status==OPENED) // file is open: write first record (header)
        {   makeHeader(header);
            if(file.write((const void*)header,512) < 512) return MUST_REBOOT; else status=2;
    1a38:	cmp.w	r0, #512	; 0x200
    1a3c:	bcc.n	1a26 <saveData(short)+0xde>
    1a3e:	ldr	r3, [pc, #484]	; (1c24 <saveData(short)+0x2dc>)
    1a40:	ldr	r0, [r3, #16]
    1a42:	cmp	r0, #0
    1a44:	beq.n	1a26 <saveData(short)+0xde>
    1a46:	ldr	r3, [r0, #0]
    1a48:	mov.w	r2, #2048	; 0x800
    1a4c:	ldr	r1, [pc, #424]	; (1bf8 <saveData(short)+0x2b0>)
    1a4e:	ldr	r3, [r3, #12]
    1a50:	blx	r3
        }
        //
        if(status>=RUNNING) // file is open, header written: store data records
        {   
            if(file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER) < 4*MAX_DISK_BUFFER) return MUST_REBOOT;
    1a52:	cmp.w	r0, #2048	; 0x800
    1a56:	bcc.n	1a26 <saveData(short)+0xde>
        }
    }
    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    1a58:	cmp	r4, #3
    1a5a:	bne.n	1a6a <saveData(short)+0x122>
    {
        // writes are done, so enable again transaction activations
        file.flush();
    1a5c:	ldr	r0, [pc, #452]	; (1c24 <saveData(short)+0x2dc>)
    1a5e:	bl	45a <File::flush()>
        file.close();
    1a62:	ldr	r0, [pc, #448]	; (1c24 <saveData(short)+0x2dc>)
    1a64:	bl	9cc <File::close()>
    1a68:	b.n	1b08 <saveData(short)+0x1c0>
        status = CLOSED;
    }
    if(status==MUSTSTOP) // should close file and stop
    1a6a:	cmp	r4, #4
    1a6c:	bne.n	1b0c <saveData(short)+0x1c4>
    {   
        file.flush();
    1a6e:	ldr	r0, [pc, #436]	; (1c24 <saveData(short)+0x2dc>)
    1a70:	bl	45a <File::flush()>
        file.close();
    1a74:	ldr	r0, [pc, #428]	; (1c24 <saveData(short)+0x2dc>)
    1a76:	bl	9cc <File::close()>
        status = STOPPED;
    1a7a:	mov.w	r0, #4294967295
    1a7e:	b.n	1d36 <saveData(short)+0x3ee>
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1a80:	movs	r3, #0

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    1a82:	ldr	r4, [pc, #384]	; (1c04 <saveData(short)+0x2bc>)
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1a84:	strb.w	r3, [r8, #12]

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    1a88:	ldr	r3, [r6, #0]
    1a8a:	cmp	r3, #6
    1a8c:	bgt.n	1ac8 <saveData(short)+0x180>
    {   sdx[isd].sdfs.chvol();
    1a8e:	ldr	r5, [pc, #376]	; (1c08 <saveData(short)+0x2c0>)
    1a90:	mov.w	r7, #1224	; 0x4c8
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
           m_xVol ? m_xVol->chdir(path) : false;
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
    1a94:	ldr	r2, [pc, #400]	; (1c28 <saveData(short)+0x2e0>)
    1a96:	mla	r3, r7, r3, r5
        Serial.println(); Serial.print(isd);
    1a9a:	ldr	r0, [pc, #400]	; (1c2c <saveData(short)+0x2e4>)
    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    {   sdx[isd].sdfs.chvol();
    1a9c:	adds	r3, #4
    1a9e:	str	r3, [r2, #0]
        Serial.println(); Serial.print(isd);
    1aa0:	bl	9948 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1aa4:	ldr	r1, [r4, #0]
    1aa6:	ldr	r0, [pc, #388]	; (1c2c <saveData(short)+0x2e4>)
    1aa8:	bl	99f8 <Print::print(long)>
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    1aac:	ldr	r1, [pc, #384]	; (1c30 <saveData(short)+0x2e8>)
    1aae:	ldr	r0, [pc, #380]	; (1c2c <saveData(short)+0x2e4>)
    1ab0:	bl	13c0 <Print::print(char const*)>
    1ab4:	ldr	r0, [r4, #0]
    1ab6:	mla	r0, r7, r0, r5
    1aba:	adds	r0, #4
    1abc:	bl	13e4 <FsVolume::freeClusterCount() const>
    1ac0:	mov	r1, r0
    1ac2:	ldr	r0, [pc, #360]	; (1c2c <saveData(short)+0x2e4>)
    1ac4:	bl	13c8 <Print::print(unsigned long)>
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1ac8:	ldr	r2, [pc, #360]	; (1c34 <saveData(short)+0x2ec>)
    1aca:	ldr	r3, [r6, #0]
    1acc:	ldr	r1, [r2, #0]
    isd_=isd;
    1ace:	str	r3, [r2, #0]
    {   sdx[isd].sdfs.chvol();
        Serial.println(); Serial.print(isd);
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1ad0:	cmp	r3, r1
    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    {   disk_count++;
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
    1ad2:	ldr	r5, [pc, #356]	; (1c38 <saveData(short)+0x2f0>)
    {   sdx[isd].sdfs.chvol();
        Serial.println(); Serial.print(isd);
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1ad4:	ittt	ne
    1ad6:	ldrne	r1, [pc, #356]	; (1c3c <saveData(short)+0x2f4>)
    1ad8:	movne	r0, #0
    1ada:	strne	r0, [r1, #0]
    isd_=isd;
    if(isd==nsd) return (SDClass *) 0; else return &sdx[isd];
    1adc:	cmp	r3, #7
    1ade:	ittet	ne
    1ae0:	movne.w	r1, #1224	; 0x4c8
    1ae4:	ldrne	r2, [pc, #288]	; (1c08 <saveData(short)+0x2c0>)
    1ae6:	moveq	r3, #0
    1ae8:	mlane	r3, r1, r3, r2
    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    {   disk_count++;
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
    1aec:	str	r3, [r5, #0]
    1aee:	cmp	r3, #0
    1af0:	beq.n	1a26 <saveData(short)+0xde>
            //
            if(newDirectory(dirName,dirFlag)) 
    1af2:	ldr	r4, [pc, #332]	; (1c40 <saveData(short)+0x2f8>)
    1af4:	ldr	r7, [r4, #0]
    isd_=isd;
    if(isd==nsd) return (SDClass *) 0; else return &sdx[isd];
}

static int16_t newDirectory(char *dirName, int dirFlag)
{ if(newHour())
    1af6:	bl	f80 <newHour()>
    1afa:	cbnz	r0, 1b18 <saveData(short)+0x1d0>
            if(newDirectory(dirName,dirFlag)) 
            {   if(!msd->sdfs.exists(dirName) && !msd->sdfs.mkdir(dirName)) dirFlag++;          
                if(!msd->sdfs.chdir(dirName)) dirFlag++; else dirFlag=0;
            }
            //
            if(dirFlag>5) return MUST_REBOOT;   // too many directory errors
    1afc:	ldr	r3, [r4, #0]
    1afe:	cmp	r3, #5
    1b00:	bgt.n	1a26 <saveData(short)+0xde>
            if(dirFlag>0) return CLOSED;        // create new directory with different name
    1b02:	cmp	r3, #0
    1b04:	ble.w	1ca6 <saveData(short)+0x35e>
    1b08:	movs	r0, #0
    1b0a:	b.n	1d36 <saveData(short)+0x3ee>
    1b0c:	mov	r0, r4
    1b0e:	b.n	1d36 <saveData(short)+0x3ee>
static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    1b10:	ldr	r3, [r5, #0]
    1b12:	adds	r3, #1
    1b14:	str	r3, [r5, #0]
    1b16:	b.n	197a <saveData(short)+0x32>

static int16_t newDirectory(char *dirName, int dirFlag)
{ if(newHour())
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    1b18:	bl	93c4 <rtc_get>
    1b1c:	add	r1, sp, #24
    1b1e:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>
    1b22:	ldr	r2, [pc, #248]	; (1c1c <saveData(short)+0x2d4>)
    1b24:	ldrb.w	lr, [sp, #26]
    1b28:	ldrb.w	r0, [sp, #28]
    1b2c:	ldrb.w	r1, [sp, #29]
    1b30:	ldrb.w	r3, [sp, #30]
        if(!dirFlag)
    1b34:	cbnz	r7, 1b52 <saveData(short)+0x20a>
        {
            sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                          DirPrefix,(unsigned int)SerNum,
                                  tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1b36:	addw	r3, r3, #1970	; 0x7b2
    1b3a:	str	r0, [sp, #8]
    1b3c:	str	r1, [sp, #4]
    1b3e:	str.w	lr, [sp, #12]
    1b42:	str	r3, [sp, #0]
    1b44:	ldr	r1, [pc, #252]	; (1c44 <saveData(short)+0x2fc>)
    1b46:	ldr	r3, [r2, #0]
    1b48:	ldr	r0, [pc, #252]	; (1c48 <saveData(short)+0x300>)
    1b4a:	ldr	r2, [pc, #256]	; (1c4c <saveData(short)+0x304>)
    1b4c:	bl	aa88 <sprintf>
    1b50:	b.n	1b6e <saveData(short)+0x226>
        }
        else
        {
            sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d_%02d/", 
                          DirPrefix,(unsigned int)SerNum,
                                  tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour,dirFlag);
    1b52:	addw	r3, r3, #1970	; 0x7b2
    1b56:	str	r0, [sp, #8]
    1b58:	str	r1, [sp, #4]
    1b5a:	str	r7, [sp, #16]
    1b5c:	str.w	lr, [sp, #12]
    1b60:	str	r3, [sp, #0]
    1b62:	ldr	r1, [pc, #236]	; (1c50 <saveData(short)+0x308>)
    1b64:	ldr	r3, [r2, #0]
    1b66:	ldr	r0, [pc, #224]	; (1c48 <saveData(short)+0x300>)
    1b68:	ldr	r2, [pc, #224]	; (1c4c <saveData(short)+0x304>)
    1b6a:	bl	aa88 <sprintf>
        }

        //
        Serial.print("\n"); Serial.print(dirName);
    1b6e:	ldr	r1, [pc, #228]	; (1c54 <saveData(short)+0x30c>)
    1b70:	ldr	r0, [pc, #184]	; (1c2c <saveData(short)+0x2e4>)
    1b72:	bl	13c0 <Print::print(char const*)>
    1b76:	ldr	r1, [pc, #208]	; (1c48 <saveData(short)+0x300>)
    1b78:	ldr	r0, [pc, #176]	; (1c2c <saveData(short)+0x2e4>)
    1b7a:	bl	13c0 <Print::print(char const*)>
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
            //
            if(newDirectory(dirName,dirFlag)) 
            {   if(!msd->sdfs.exists(dirName) && !msd->sdfs.mkdir(dirName)) dirFlag++;          
    1b7e:	ldr	r3, [r5, #0]
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    1b80:	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1b84:	cbz	r1, 1b9e <saveData(short)+0x256>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1b86:	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1b88:	ldr	r2, [pc, #188]	; (1c48 <saveData(short)+0x300>)
    1b8a:	add	r0, sp, #24
    1b8c:	strb.w	r3, [sp, #24]
    1b90:	strb.w	r3, [sp, #25]
    1b94:	strb.w	r3, [sp, #26]
    1b98:	bl	5458 <FatFile::open(FatVolume*, char const*, int)>
    1b9c:	b.n	1be2 <saveData(short)+0x29a>
    1b9e:	ldr.w	r0, [r3, #1160]	; 0x488
    1ba2:	cbnz	r0, 1bca <saveData(short)+0x282>
    1ba4:	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1ba6:	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1baa:	cbz	r1, 1be8 <saveData(short)+0x2a0>
    1bac:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1bae:	ldr	r2, [pc, #152]	; (1c48 <saveData(short)+0x300>)
    1bb0:	add.w	r1, r1, #1096	; 0x448
    1bb4:	add	r0, sp, #24
    1bb6:	strb.w	r3, [sp, #24]
    1bba:	strb.w	r3, [sp, #25]
    1bbe:	strb.w	r3, [sp, #26]
    1bc2:	movs	r3, #1
    1bc4:	bl	55dc <FatFile::mkdir(FatFile*, char const*, bool)>
    1bc8:	b.n	1c76 <saveData(short)+0x32e>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    1bca:	strb.w	r1, [sp, #73]	; 0x49
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1bce:	mov	r3, r1
    1bd0:	strb.w	r1, [sp, #74]	; 0x4a
    1bd4:	strb.w	r1, [sp, #75]	; 0x4b
    1bd8:	mov	r1, r0
    1bda:	ldr	r2, [pc, #108]	; (1c48 <saveData(short)+0x300>)
    1bdc:	add	r0, sp, #24
    1bde:	bl	3910 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1be2:	cmp	r0, #0
    1be4:	bne.n	1c7a <saveData(short)+0x332>
    1be6:	b.n	1ba4 <saveData(short)+0x25c>
    1be8:	ldr.w	r0, [r3, #1160]	; 0x488
    1bec:	cbnz	r0, 1c5c <saveData(short)+0x314>
    1bee:	ldr	r3, [r4, #0]
    1bf0:	adds	r3, #1
    1bf2:	str	r3, [r4, #0]
    1bf4:	b.n	1c7a <saveData(short)+0x332>
    1bf6:	nop
    1bf8:	.word	0x20005de8
    1bfc:	.word	0x20006620
    1c00:	.word	0x20006650
    1c04:	.word	0x20001824
    1c08:	.word	0x20006680
    1c0c:	.word	0x20006604
    1c10:	.word	0x20008876
    1c14:	.word	0x20001297
    1c18:	.word	0x20001292
    1c1c:	.word	0x2000292c
    1c20:	.word	0x20001dd0
    1c24:	.word	0x2000662c
    1c28:	.word	0x20003580
    1c2c:	.word	0x20001814
    1c30:	.word	0x2000122a
    1c34:	.word	0x20001828
    1c38:	.word	0x2000664c
    1c3c:	.word	0x20006640
    1c40:	.word	0x2000358c
    1c44:	.word	0x2000122f
    1c48:	.word	0x20008a76
    1c4c:	.word	0x2000122d
    1c50:	.word	0x2000124a
    1c54:	.word	0x2000136f
    1c58:	.word	0x200065e8
    1c5c:	strb.w	r1, [sp, #73]	; 0x49
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1c60:	movs	r3, #1
    1c62:	strb.w	r1, [sp, #74]	; 0x4a
    1c66:	strb.w	r1, [sp, #75]	; 0x4b
    1c6a:	add.w	r1, r0, #1096	; 0x448
    1c6e:	ldr	r2, [pc, #204]	; (1d3c <saveData(short)+0x3f4>)
    1c70:	add	r0, sp, #24
    1c72:	bl	41b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1c76:	cmp	r0, #0
    1c78:	beq.n	1bee <saveData(short)+0x2a6>
                if(!msd->sdfs.chdir(dirName)) dirFlag++; else dirFlag=0;
    1c7a:	ldr	r3, [r5, #0]
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
    1c7c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1c80:	cbz	r0, 1c8a <saveData(short)+0x342>
    1c82:	ldr	r1, [pc, #184]	; (1d3c <saveData(short)+0x3f4>)
    1c84:	bl	5e68 <FatVolume::chdir(char const*)>
    1c88:	b.n	1c9c <saveData(short)+0x354>
    1c8a:	ldr.w	r0, [r3, #1160]	; 0x488
    1c8e:	cbnz	r0, 1c96 <saveData(short)+0x34e>
    1c90:	ldr	r3, [r4, #0]
    1c92:	adds	r3, #1
    1c94:	b.n	1ca2 <saveData(short)+0x35a>
    1c96:	ldr	r1, [pc, #164]	; (1d3c <saveData(short)+0x3f4>)
    1c98:	bl	3d5c <ExFatVolume::chdir(char const*)>
    1c9c:	cmp	r0, #0
    1c9e:	beq.n	1c90 <saveData(short)+0x348>
    1ca0:	movs	r3, #0
    1ca2:	str	r3, [r4, #0]
    1ca4:	b.n	1afc <saveData(short)+0x1b4>

}
static int16_t newFileName(char *fileName)
{
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1ca6:	bl	93c4 <rtc_get>
    1caa:	add	r1, sp, #24
    1cac:	bl	fa4 <breakTime(unsigned long, tmElements_t&)>
	sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, tm.Hour, tm.Minute, tm.Second);
    1cb0:	ldrb.w	r2, [sp, #24]
    1cb4:	ldrb.w	r3, [sp, #26]
    1cb8:	str	r2, [sp, #4]
    1cba:	ldrb.w	r2, [sp, #25]
    1cbe:	ldr	r1, [pc, #128]	; (1d40 <saveData(short)+0x3f8>)
    1cc0:	str	r2, [sp, #0]
    1cc2:	ldr	r0, [pc, #128]	; (1d44 <saveData(short)+0x3fc>)
    1cc4:	ldr	r2, [pc, #128]	; (1d48 <saveData(short)+0x400>)
    1cc6:	bl	aa88 <sprintf>
    //
    Serial.print("\n"); Serial.print(isd); Serial.print(": ");Serial.print(fileName);
    1cca:	ldr	r1, [pc, #128]	; (1d4c <saveData(short)+0x404>)
    1ccc:	ldr	r0, [pc, #128]	; (1d50 <saveData(short)+0x408>)
    1cce:	bl	13c0 <Print::print(char const*)>
    1cd2:	ldr	r1, [r6, #0]
    1cd4:	ldr	r0, [pc, #120]	; (1d50 <saveData(short)+0x408>)
    1cd6:	bl	99f8 <Print::print(long)>
    1cda:	ldr	r1, [pc, #120]	; (1d54 <saveData(short)+0x40c>)
    1cdc:	ldr	r0, [pc, #112]	; (1d50 <saveData(short)+0x408>)
    1cde:	bl	13c0 <Print::print(char const*)>
    1ce2:	ldr	r1, [pc, #96]	; (1d44 <saveData(short)+0x3fc>)
    1ce4:	ldr	r0, [pc, #104]	; (1d50 <saveData(short)+0x408>)
    1ce6:	bl	13c0 <Print::print(char const*)>
            if(dirFlag>5) return MUST_REBOOT;   // too many directory errors
            if(dirFlag>0) return CLOSED;        // create new directory with different name

            if(newFileName(fileName))
            {   
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
    1cea:	ldr	r1, [r5, #0]
    1cec:	ldr	r2, [pc, #84]	; (1d44 <saveData(short)+0x3fc>)
    1cee:	add	r0, sp, #24
    1cf0:	ldr	r3, [r1, #0]
    1cf2:	ldr	r4, [r3, #0]
    1cf4:	movs	r3, #2
    1cf6:	blx	r4
	}
#ifdef FILE_USE_MOVE
	// Move assignment.
	File& operator = (const File&& file) {
		//Serial.println("File move assignment");
		if (file.f) file.f->refcount++;
    1cf8:	ldr	r3, [sp, #40]	; 0x28
    1cfa:	cbz	r3, 1d02 <saveData(short)+0x3ba>
    1cfc:	ldr	r2, [r3, #4]
    1cfe:	adds	r2, #1
    1d00:	str	r2, [r3, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1d02:	ldr	r4, [pc, #84]	; (1d58 <saveData(short)+0x410>)
    1d04:	ldr	r3, [r4, #16]
    1d06:	cbz	r3, 1d10 <saveData(short)+0x3c8>
    1d08:	add.w	r0, r4, #16
    1d0c:	bl	1318 <File::dec_refcount() [clone .isra.23]>
		f = file.f;
    1d10:	ldr	r3, [sp, #40]	; 0x28
    1d12:	add	r0, sp, #24
    1d14:	str	r3, [r4, #16]
    1d16:	bl	614 <File::~File()>
    1d1a:	ldr	r0, [r4, #16]
			f->close();
			dec_refcount();
		}
	}
	operator bool() {
		return (f) ? f->isOpen() : false;
    1d1c:	cbnz	r0, 1d28 <saveData(short)+0x3e0>
                if(file) 
                    status = OPENED; 
                else 
                {   Serial.println("Failing open file");
    1d1e:	ldr	r1, [pc, #60]	; (1d5c <saveData(short)+0x414>)
    1d20:	ldr	r0, [pc, #44]	; (1d50 <saveData(short)+0x408>)
    1d22:	bl	2e4 <Print::println(char const*)>
    1d26:	b.n	1a26 <saveData(short)+0xde>
    1d28:	ldr	r3, [r0, #0]
    1d2a:	ldr	r3, [r3, #48]	; 0x30
    1d2c:	blx	r3
            if(dirFlag>0) return CLOSED;        // create new directory with different name

            if(newFileName(fileName))
            {   
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
                if(file) 
    1d2e:	cmp	r0, #0
    1d30:	bne.w	19b0 <saveData(short)+0x68>
    1d34:	b.n	1d1e <saveData(short)+0x3d6>
        file.flush();
        file.close();
        status = STOPPED;
    }
    return status;
}
    1d36:	add	sp, #84	; 0x54
    1d38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d3c:	.word	0x20008a76
    1d40:	.word	0x2000126c
    1d44:	.word	0x20008ac6
    1d48:	.word	0x2000126a
    1d4c:	.word	0x2000136f
    1d50:	.word	0x20001814
    1d54:	.word	0x2000122a
    1d58:	.word	0x2000662c
    1d5c:	.word	0x20001280

00001d60 <_GLOBAL__sub_I_data_buffer>:
    1d60:	push	{r3, r4, r5, r6, r7, lr}
            { /**
             * @brief Constructor
             * @param buffer is pointer to data store
             * 
             */
                data_buffer=buffer; front_=rear_=0;
    1d62:	ldr	r2, [pc, #148]	; (1df8 <_GLOBAL__sub_I_data_buffer+0x98>)
    1d64:	movs	r4, #0
    1d66:	ldr	r3, [pc, #148]	; (1dfc <_GLOBAL__sub_I_data_buffer+0x9c>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1d68:	movs	r5, #41	; 0x29
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1d6a:	ldr	r0, [pc, #148]	; (1e00 <_GLOBAL__sub_I_data_buffer+0xa0>)
    1d6c:	str	r2, [r3, #4]
    1d6e:	strh	r4, [r3, #2]
    1d70:	strh	r4, [r3, #0]
    1d72:	mov.w	r3, #1000	; 0x3e8
    1d76:	strb	r4, [r0, #4]
    1d78:	str	r3, [r0, #8]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    1d7a:	ldr	r3, [pc, #136]	; (1e04 <_GLOBAL__sub_I_data_buffer+0xa4>)
    1d7c:	strb	r4, [r0, #12]

/****************************** Filing Utility *******************************************/

extern int t_acq;

File file=NULL; // is used by saveData and saveNAD
    1d7e:	ldr	r2, [pc, #136]	; (1e08 <_GLOBAL__sub_I_data_buffer+0xa8>)
    1d80:	ldr	r1, [pc, #136]	; (1e0c <_GLOBAL__sub_I_data_buffer+0xac>)
    1d82:	str	r3, [r0, #0]
		f = file;
    1d84:	str	r4, [r0, #16]
    1d86:	bl	9afc <__aeabi_atexit>
// This is a simple driver based on the the standard SPI.h library.
// You can write a driver entirely independent of SPI.h.
// It can be optimized for your board or a different SPI port can be used.
// The driver must be derived from SdSpiBaseClass.
// See: SdFat/src/SpiDriver/SdSpiBaseClass.h
class MySpiClass : public SdSpiBaseClass {
    1d8a:	ldr	r3, [pc, #132]	; (1e10 <_GLOBAL__sub_I_data_buffer+0xb0>)
    1d8c:	movs	r1, #1
    1d8e:	ldr	r2, [pc, #132]	; (1e14 <_GLOBAL__sub_I_data_buffer+0xb4>)
    1d90:	strb	r1, [r3, #12]
    1d92:	str	r2, [r3, #0]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1d94:	ldr	r2, [pc, #128]	; (1e18 <_GLOBAL__sub_I_data_buffer+0xb8>)


class SDClass : public FS
{
public:
	SDClass() { }
    1d96:	ldr.w	lr, [pc, #152]	; 1e30 <_GLOBAL__sub_I_data_buffer+0xd0>
    1d9a:	str	r2, [r3, #4]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1d9c:	movs	r2, #7
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1d9e:	ldr	r7, [pc, #124]	; (1e1c <_GLOBAL__sub_I_data_buffer+0xbc>)
    1da0:	str	r2, [r3, #8]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1da2:	mov	r2, r4
    const char *sd_str[]={"sdio",   "sd1","sd2","sd3","sd4","sd5","sd6"};
    const int cs[] = {BUILTIN_SDCARD,  34,   33,   35,   36,   37,  38 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1da4:	ldr	r3, [pc, #120]	; (1e20 <_GLOBAL__sub_I_data_buffer+0xc0>)
    1da6:	movs	r4, #255	; 0xff
    1da8:	ldr	r6, [pc, #120]	; (1e24 <_GLOBAL__sub_I_data_buffer+0xc4>)
    1daa:	ldr	r0, [pc, #124]	; (1e28 <_GLOBAL__sub_I_data_buffer+0xc8>)
    1dac:	str.w	r2, [r3, #1156]	; 0x484
    1db0:	str.w	r2, [r3, #1160]	; 0x488
    1db4:	str.w	r7, [r3, #1172]	; 0x494
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1db8:	strb.w	r2, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1dbc:	strb.w	r2, [r3, #1181]	; 0x49d
    1dc0:	str.w	r6, [r3, #1184]	; 0x4a0
    1dc4:	strb.w	r1, [r3, #1197]	; 0x4ad
    1dc8:	strb.w	r5, [r3, #1199]	; 0x4af
    1dcc:	strb.w	r2, [r3, #1202]	; 0x4b2
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1dd0:	strb.w	r2, [r3, #1216]	; 0x4c0
    1dd4:	strb.w	r2, [r3, #1220]	; 0x4c4
    1dd8:	strb.w	r4, [r3, #1221]	; 0x4c5
    1ddc:	str.w	lr, [r3]
    1de0:	add.w	r3, r3, #1224	; 0x4c8
    1de4:	cmp	r3, r0
    1de6:	bne.n	1dac <_GLOBAL__sub_I_data_buffer+0x4c>
    1de8:	ldr	r2, [pc, #28]	; (1e08 <_GLOBAL__sub_I_data_buffer+0xa8>)
    1dea:	movs	r0, #0
    1dec:	ldr	r1, [pc, #60]	; (1e2c <_GLOBAL__sub_I_data_buffer+0xcc>)
        file.flush();
        file.close();
        status = STOPPED;
    }
    return status;
}
    1dee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    const char *sd_str[]={"sdio",   "sd1","sd2","sd3","sd4","sd5","sd6"};
    const int cs[] = {BUILTIN_SDCARD,  34,   33,   35,   36,   37,  38 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1df2:	b.w	9afc <__aeabi_atexit>
    1df6:	nop
    1df8:	.word	0x200035e8
    1dfc:	.word	0x20006660
    1e00:	.word	0x2000662c
    1e04:	.word	0x200004a0
    1e08:	.word	0x200017b8
    1e0c:	.word	0x00000615
    1e10:	.word	0x20006650
    1e14:	.word	0x2000042c
    1e18:	.word	0x003d0900
    1e1c:	.word	0x200005a0
    1e20:	.word	0x20006680
    1e24:	.word	0x20000600
    1e28:	.word	0x200087f8
    1e2c:	.word	0x00001255
    1e30:	.word	0x20000570

00001e34 <adc_init()>:
    1e34:	bx	lr

00001e36 <adcStatus()>:
int gain=0;

#if ADC_MODEL == CS5381
    void adc_init(void) { }
    void setAGain(int8_t again) {  }
    void adcStatus(void) {  }
    1e36:	bx	lr

00001e38 <_write>:
  int _write(int file, const void *buf, size_t len) {
    // https://forum.pjrc.com/threads/28473-Quick-Guide-Using-printf()-on-Teensy-ARM
    Print *out;
  
    // Send both stdout and stderr to stdPrint
    if (file == stdout->_file || file == stderr->_file) {
    1e38:	ldr	r3, [pc, #48]	; (1e6c <_write+0x34>)
    1e3a:	ldr	r3, [r3, #0]
#include "usb_serial.h"
Print *stdPrint = &Serial;

extern "C"
{
  int _write(int file, const void *buf, size_t len) {
    1e3c:	push	{r4}
    // https://forum.pjrc.com/threads/28473-Quick-Guide-Using-printf()-on-Teensy-ARM
    Print *out;
  
    // Send both stdout and stderr to stdPrint
    if (file == stdout->_file || file == stderr->_file) {
    1e3e:	ldr	r4, [r3, #8]
    1e40:	ldrsh.w	r4, [r4, #14]
    1e44:	cmp	r4, r0
    1e46:	beq.n	1e52 <_write+0x1a>
    1e48:	ldr	r3, [r3, #12]
    1e4a:	ldrsh.w	r3, [r3, #14]
    1e4e:	cmp	r0, r3
    1e50:	bne.n	1e56 <_write+0x1e>
      out = stdPrint;
    1e52:	ldr	r3, [pc, #28]	; (1e70 <_write+0x38>)
    1e54:	ldr	r0, [r3, #0]
    } else {
      out = (Print *)file;
    }
  
    if (out == nullptr) {
    1e56:	cbz	r0, 1e62 <_write+0x2a>
      return len;
    }
  
    // Don't check for len == 0 for returning early, in case there's side effects
    return out->write((const uint8_t *)buf, len);
    1e58:	ldr	r3, [r0, #0]
  }
    1e5a:	ldr.w	r4, [sp], #4
    if (out == nullptr) {
      return len;
    }
  
    // Don't check for len == 0 for returning early, in case there's side effects
    return out->write((const uint8_t *)buf, len);
    1e5e:	ldr	r3, [r3, #4]
    1e60:	bx	r3
  }
    1e62:	mov	r0, r2
    1e64:	ldr.w	r4, [sp], #4
    1e68:	bx	lr
    1e6a:	nop
    1e6c:	.word	0x20001dac
    1e70:	.word	0x20001dcc

00001e74 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>:
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1e74:	ldrh	r3, [r0, #30]
    1e76:	lsls	r3, r3, #16
    1e78:	bmi.n	1e80 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]+0xc>
		tcd->BITER = len & 0x7fff;
    1e7a:	ubfx	r1, r1, #0, #15
    1e7e:	b.n	1e8c <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]+0x18>
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e80:	ldrh	r3, [r0, #30]
    1e82:	ubfx	r1, r1, #0, #9
    1e86:	and.w	r3, r3, #65024	; 0xfe00
    1e8a:	orrs	r1, r3
    1e8c:	strh	r1, [r0, #30]
	}
	tcd->CITER = tcd->BITER; 
    1e8e:	ldrh	r3, [r0, #30]
    1e90:	uxth	r3, r3
    1e92:	strh	r3, [r0, #22]
    1e94:	bx	lr
	...

00001e98 <SPIClass::begin()>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1e98:	ldr	r3, [r0, #4]

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e9a:	ldr	r1, [r3, #0]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    1e9c:	push	{r4, r5, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e9e:	ldr	r2, [r1, #0]
    1ea0:	ldr	r4, [r3, #4]
    1ea2:	bic.w	r2, r2, r4

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1ea6:	ldr	r4, [pc, #464]	; (2078 <SPIClass::begin()+0x1e0>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1ea8:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1eaa:	ldr	r2, [r4, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1eac:	bic.w	r2, r2, #469762048	; 0x1c000000
    1eb0:	bic.w	r2, r2, #48	; 0x30
    1eb4:	orr.w	r2, r2, #134217728	; 0x8000000
    1eb8:	orr.w	r2, r2, #16
    1ebc:	str	r2, [r4, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1ebe:	ldrb	r4, [r0, #16]
    1ec0:	ldr	r2, [pc, #440]	; (207c <SPIClass::begin()+0x1e4>)
    1ec2:	add	r4, r3
    1ec4:	ldrb	r4, [r4, #16]
    1ec6:	add.w	r4, r2, r4, lsl #4
    1eca:	ldr	r5, [r4, #8]
    1ecc:	movs	r4, #184	; 0xb8
    1ece:	str	r4, [r5, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    1ed0:	ldrb	r5, [r0, #17]
    1ed2:	add	r5, r3
    1ed4:	ldrb.w	r5, [r5, #36]	; 0x24
    1ed8:	add.w	r5, r2, r5, lsl #4
    1edc:	ldr	r5, [r5, #8]
    1ede:	str	r4, [r5, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    1ee0:	ldrb	r5, [r0, #18]
    1ee2:	add	r5, r3
    1ee4:	ldrb.w	r5, [r5, #56]	; 0x38
    1ee8:	add.w	r5, r2, r5, lsl #4
    1eec:	ldr	r5, [r5, #8]
    1eee:	str	r4, [r5, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1ef0:	ldr	r5, [r1, #0]
    1ef2:	ldr	r4, [r3, #4]
    1ef4:	orrs	r4, r5
    1ef6:	str	r4, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    1ef8:	ldrb	r1, [r0, #16]
    1efa:	adds	r4, r3, r1
    1efc:	add.w	r1, r3, r1, lsl #2
    1f00:	ldrb	r4, [r4, #16]
    1f02:	ldr	r1, [r1, #20]
    1f04:	add.w	r4, r2, r4, lsl #4
    1f08:	ldr	r4, [r4, #4]
    1f0a:	str	r1, [r4, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    1f0c:	ldrb	r1, [r0, #17]
    1f0e:	adds	r4, r3, r1
    1f10:	adds	r1, #10
    1f12:	ldrb.w	r4, [r4, #36]	; 0x24
    1f16:	ldr.w	r1, [r3, r1, lsl #2]
    1f1a:	add.w	r4, r2, r4, lsl #4
    1f1e:	ldr	r4, [r4, #4]
    1f20:	str	r1, [r4, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1f22:	ldrb	r1, [r0, #18]
    1f24:	adds	r4, r3, r1
    1f26:	add.w	r1, r3, r1, lsl #2
    1f2a:	ldrb.w	r4, [r4, #56]	; 0x38
    1f2e:	ldr	r1, [r1, #60]	; 0x3c
    1f30:	add.w	r2, r2, r4, lsl #4
    1f34:	ldr	r2, [r2, #4]
    1f36:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1f38:	ldrb	r2, [r0, #18]
    1f3a:	ldr	r1, [r3, #72]	; 0x48
    1f3c:	add	r2, r3
    1f3e:	ldrb.w	r2, [r2, #68]	; 0x44
    1f42:	str	r2, [r1, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1f44:	ldrb	r2, [r0, #16]
    1f46:	ldr	r1, [r3, #32]
    1f48:	add	r2, r3
    1f4a:	ldrb	r2, [r2, #28]
    1f4c:	str	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1f4e:	ldrb	r2, [r0, #17]
    1f50:	ldr	r1, [r3, #52]	; 0x34
    1f52:	add	r3, r2

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1f54:	movs	r2, #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1f56:	ldrb.w	r3, [r3, #48]	; 0x30
    1f5a:	str	r3, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f5c:	ldr	r3, [r0, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1f5e:	str	r2, [r3, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    1f60:	movs	r2, #15
    1f62:	str	r2, [r3, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1f64:	ldrb	r3, [r0, #19]
    1f66:	cmp	r3, #0
    1f68:	beq.n	1fc8 <SPIClass::begin()+0x130>
			__disable_irq();
    1f6a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1f6c:	ldrb	r3, [r0, #19]
    1f6e:	lsls	r5, r3, #31
    1f70:	bpl.n	1f7e <SPIClass::begin()+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1f72:	ldr	r2, [pc, #268]	; (2080 <SPIClass::begin()+0x1e8>)
    1f74:	ldr	r3, [r0, #20]
    1f76:	ldr	r1, [r2, #0]
    1f78:	ands	r3, r1
    1f7a:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1f7c:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x02) {
    1f7e:	ldrb	r3, [r0, #19]
    1f80:	lsls	r4, r3, #30
    1f82:	bpl.n	1f90 <SPIClass::begin()+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1f84:	ldr	r2, [pc, #252]	; (2084 <SPIClass::begin()+0x1ec>)
    1f86:	ldr	r3, [r0, #24]
    1f88:	ldr	r1, [r2, #0]
    1f8a:	ands	r3, r1
    1f8c:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1f8e:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1f90:	ldrb	r3, [r0, #19]
    1f92:	lsls	r1, r3, #29
    1f94:	bpl.n	1fa2 <SPIClass::begin()+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1f96:	ldr	r2, [pc, #240]	; (2088 <SPIClass::begin()+0x1f0>)
    1f98:	ldr	r3, [r0, #28]
    1f9a:	ldr	r1, [r2, #0]
    1f9c:	ands	r3, r1
    1f9e:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1fa0:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1fa2:	ldrb	r3, [r0, #19]
    1fa4:	lsls	r2, r3, #28
    1fa6:	bpl.n	1fb4 <SPIClass::begin()+0x11c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1fa8:	ldr	r2, [pc, #224]	; (208c <SPIClass::begin()+0x1f4>)
    1faa:	ldr	r3, [r0, #32]
    1fac:	ldr	r1, [r2, #0]
    1fae:	ands	r3, r1
    1fb0:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1fb2:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1fb4:	ldrb	r3, [r0, #19]
    1fb6:	lsls	r3, r3, #27
    1fb8:	bpl.n	1fc6 <SPIClass::begin()+0x12e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1fba:	ldr	r2, [pc, #212]	; (2090 <SPIClass::begin()+0x1f8>)
    1fbc:	ldr	r3, [r0, #36]	; 0x24
    1fbe:	ldr	r1, [r2, #0]
    1fc0:	ands	r3, r1
    1fc2:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1fc4:	str	r3, [r2, #0]
			}
			__enable_irq();
    1fc6:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1fc8:	ldr	r1, [pc, #200]	; (2094 <SPIClass::begin()+0x1fc>)
    1fca:	ldr	r3, [r0, #8]
    1fcc:	cmp	r3, r1
    1fce:	beq.n	2020 <SPIClass::begin()+0x188>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1fd0:	ldr	r3, [pc, #164]	; (2078 <SPIClass::begin()+0x1e0>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1fd2:	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    1fd4:	ldr	r2, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1fd6:	ldr	r3, [pc, #192]	; (2098 <SPIClass::begin()+0x200>)
    1fd8:	ubfx	r4, r2, #4, #2
    1fdc:	ubfx	r2, r2, #26, #3
    1fe0:	ldr.w	r3, [r3, r4, lsl #2]
    1fe4:	adds	r2, #1
    1fe6:	udiv	r2, r3, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1fea:	udiv	r3, r2, r1

			if (d && clkhz/d > _clock) d++;
    1fee:	cbz	r3, 2010 <SPIClass::begin()+0x178>
    1ff0:	udiv	r2, r2, r3
    1ff4:	cmp	r2, r1
    1ff6:	it	hi
    1ff8:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    1ffa:	cmp.w	r3, #258	; 0x102
    1ffe:	bcs.n	2006 <SPIClass::begin()+0x16e>
			if (d > 2) {
    2000:	cmp	r3, #2
    2002:	bls.n	200e <SPIClass::begin()+0x176>
    2004:	b.n	200a <SPIClass::begin()+0x172>
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
    2006:	movw	r3, #257	; 0x101
			if (d > 2) {
				div = d-2;
    200a:	subs	r3, #2
    200c:	b.n	2010 <SPIClass::begin()+0x178>
			} else {
				div =0;
    200e:	movs	r3, #0
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2010:	lsrs	r2, r3, #1
    2012:	orr.w	r3, r3, r2, lsl #8
    2016:	lsls	r2, r2, #16
    2018:	and.w	r2, r2, #16711680	; 0xff0000
    201c:	orrs	r3, r2
    201e:	str	r3, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2020:	ldr	r3, [r0, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2022:	movs	r2, #0
    2024:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2026:	movs	r2, #3
    2028:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    202a:	ldr	r2, [r0, #12]
    202c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    202e:	movs	r2, #7
    2030:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2032:	movs	r2, #1
    2034:	str	r2, [r3, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2036:	ldrb	r3, [r0, #19]
    2038:	cbz	r3, 2074 <SPIClass::begin()+0x1dc>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    203a:	lsls	r5, r3, #31
    203c:	bpl.n	2044 <SPIClass::begin()+0x1ac>
    203e:	ldr	r2, [r0, #40]	; 0x28
    2040:	ldr	r3, [pc, #88]	; (209c <SPIClass::begin()+0x204>)
    2042:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2044:	ldrb	r3, [r0, #19]
    2046:	lsls	r4, r3, #30
    2048:	bpl.n	2050 <SPIClass::begin()+0x1b8>
    204a:	ldr	r2, [r0, #44]	; 0x2c
    204c:	ldr	r3, [pc, #80]	; (20a0 <SPIClass::begin()+0x208>)
    204e:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2050:	ldrb	r3, [r0, #19]
    2052:	lsls	r1, r3, #29
    2054:	bpl.n	205c <SPIClass::begin()+0x1c4>
    2056:	ldr	r2, [r0, #48]	; 0x30
    2058:	ldr	r3, [pc, #72]	; (20a4 <SPIClass::begin()+0x20c>)
    205a:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    205c:	ldrb	r3, [r0, #19]
    205e:	lsls	r2, r3, #28
    2060:	bpl.n	2068 <SPIClass::begin()+0x1d0>
    2062:	ldr	r2, [r0, #52]	; 0x34
    2064:	ldr	r3, [pc, #64]	; (20a8 <SPIClass::begin()+0x210>)
    2066:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2068:	ldrb	r3, [r0, #19]
    206a:	lsls	r3, r3, #27
    206c:	bpl.n	2074 <SPIClass::begin()+0x1dc>
    206e:	ldr	r2, [r0, #56]	; 0x38
    2070:	ldr	r3, [pc, #56]	; (20ac <SPIClass::begin()+0x214>)
    2072:	str	r2, [r3, #0]
    2074:	pop	{r4, r5, pc}
    2076:	nop
    2078:	.word	0x400fc000
    207c:	.word	0x200008a4
    2080:	.word	0xe000e180
    2084:	.word	0xe000e184
    2088:	.word	0xe000e188
    208c:	.word	0xe000e18c
    2090:	.word	0xe000e190
    2094:	.word	0x003d0900
    2098:	.word	0x20000658
    209c:	.word	0xe000e100
    20a0:	.word	0xe000e104
    20a4:	.word	0xe000e108
    20a8:	.word	0xe000e10c
    20ac:	.word	0xe000e110

000020b0 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    20b0:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    20b2:	cbz	r3, 2108 <SPIClass::transfer(void const*, void*, unsigned int)+0x58>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    20b4:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    20b6:	movw	r5, #513	; 0x201
    20ba:	str	r5, [r4, #16]
    20bc:	mov	r4, r3
    20be:	ldr	r6, [r0, #0]

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20c0:	cbz	r1, 20c8 <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    20c2:	ldrb	r5, [r1, #0]
    20c4:	adds	r1, #1
    20c6:	b.n	20cc <SPIClass::transfer(void const*, void*, unsigned int)+0x1c>
    20c8:	ldrb.w	r5, [r0, #60]	; 0x3c
		count--; // how many bytes left to output.
    20cc:	subs	r4, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20ce:	str	r5, [r6, #100]	; 0x64
    20d0:	ldr	r5, [r0, #0]
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    20d2:	ldr	r6, [r5, #112]	; 0x70
    20d4:	lsls	r6, r6, #30
    20d6:	bmi.n	20e4 <SPIClass::transfer(void const*, void*, unsigned int)+0x34>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    20d8:	ldr	r5, [r5, #116]	; 0x74
    20da:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    20dc:	cbz	r2, 20e2 <SPIClass::transfer(void const*, void*, unsigned int)+0x32>
    20de:	strb	r5, [r2, #0]
    20e0:	adds	r2, #1
				count_read--;
    20e2:	subs	r3, #1
    20e4:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    20e6:	ldr	r5, [r5, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    20e8:	lsls	r5, r5, #31
    20ea:	bpl.n	20d0 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    20ec:	cmp	r4, #0
    20ee:	bne.n	20be <SPIClass::transfer(void const*, void*, unsigned int)+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    20f0:	cbz	r3, 2108 <SPIClass::transfer(void const*, void*, unsigned int)+0x58>
    20f2:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    20f4:	ldr	r4, [r1, #112]	; 0x70
    20f6:	lsls	r4, r4, #30
    20f8:	bmi.n	20f0 <SPIClass::transfer(void const*, void*, unsigned int)+0x40>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    20fa:	ldr	r1, [r1, #116]	; 0x74
    20fc:	uxtb	r1, r1
			if (p_read) *p_read++ = b; 
    20fe:	cbz	r2, 2104 <SPIClass::transfer(void const*, void*, unsigned int)+0x54>
    2100:	strb	r1, [r2, #0]
    2102:	adds	r2, #1
			count_read--;
    2104:	subs	r3, #1
    2106:	b.n	20f0 <SPIClass::transfer(void const*, void*, unsigned int)+0x40>
    2108:	pop	{r4, r5, r6, pc}
	...

0000210c <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    210c:	ldr	r3, [r0, #72]	; 0x48
    210e:	push	{r4, lr}
    2110:	ldrb	r2, [r3, #4]
    2112:	mov	r4, r0
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2114:	ldr	r3, [pc, #112]	; (2188 <SPIClass::dma_rxisr()+0x7c>)
    2116:	strb	r2, [r3, #31]
    2118:	ldr	r2, [r0, #68]	; 0x44
    211a:	ldrb	r2, [r2, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    211c:	strb	r2, [r3, #28]
    211e:	ldr	r2, [r0, #72]	; 0x48
    2120:	ldrb	r2, [r2, #4]
    2122:	strb	r2, [r3, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2124:	ldr	r2, [r0, #64]	; 0x40
    2126:	cbz	r2, 2160 <SPIClass::dma_rxisr()+0x54>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2128:	cmp.w	r2, #32768	; 0x8000
    212c:	bcc.n	2138 <SPIClass::dma_rxisr()+0x2c>
			_dma_count_remaining -= MAX_DMA_COUNT;
    212e:	sub.w	r2, r2, #32640	; 0x7f80
    2132:	subs	r2, #127	; 0x7f
    2134:	str	r2, [r0, #64]	; 0x40
    2136:	b.n	2150 <SPIClass::dma_rxisr()+0x44>
    2138:	ldr	r3, [r0, #68]	; 0x44
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    213a:	mov	r1, r2
    213c:	ldr	r0, [r3, #0]
    213e:	bl	1e74 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>
    2142:	ldr	r3, [r4, #72]	; 0x48
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    2144:	ldr	r1, [r4, #64]	; 0x40
    2146:	ldr	r0, [r3, #0]
    2148:	bl	1e74 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>

			_dma_count_remaining = 0;
    214c:	movs	r3, #0
    214e:	str	r3, [r4, #64]	; 0x40
    2150:	ldr	r3, [r4, #72]	; 0x48
    2152:	ldrb	r2, [r3, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2154:	ldr	r3, [pc, #48]	; (2188 <SPIClass::dma_rxisr()+0x7c>)
    2156:	strb	r2, [r3, #27]
    2158:	ldr	r2, [r4, #68]	; 0x44
    215a:	ldrb	r2, [r2, #4]
    215c:	strb	r2, [r3, #27]
    215e:	pop	{r4, pc}
    2160:	ldr	r3, [r0, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2162:	movs	r1, #15
    2164:	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2166:	movw	r1, #769	; 0x301
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    216a:	str	r2, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    216c:	str	r1, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    216e:	mov.w	r1, #16128	; 0x3f00
    2172:	str	r1, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2174:	movs	r3, #3
		_dma_event_responder->triggerEvent();
    2176:	mov	r1, r2
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2178:	strb.w	r3, [r0, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    217c:	ldr	r0, [r0, #76]	; 0x4c
    217e:	ldr	r3, [r0, #0]

	}
}
    2180:	ldmia.w	sp!, {r4, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2184:	ldr	r3, [r3, #0]
    2186:	bx	r3
    2188:	.word	0x400e8000

0000218c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    218c:	push	{r3, lr}
    218e:	ldr	r0, [pc, #8]	; (2198 <_spi_dma_rxISR0()+0xc>)
    2190:	bl	210c <SPIClass::dma_rxisr()>
    2194:	pop	{r3, pc}
    2196:	nop
    2198:	.word	0x200017c4

0000219c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    219c:	bx	lr

0000219e <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    219e:	mov	r2, r1
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    21a0:	ldr.w	r1, [r0, #1156]	; 0x484
    21a4:	push	{lr}
    21a6:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->exists(path) : false;
    21a8:	cbz	r1, 21c0 <SDClass::exists(char const*)+0x22>
    21aa:	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    21ac:	mov	r0, sp
    21ae:	strb.w	r3, [sp]
    21b2:	strb.w	r3, [sp, #1]
    21b6:	strb.w	r3, [sp, #2]
    21ba:	bl	5458 <FatFile::open(FatVolume*, char const*, int)>
    21be:	b.n	21dc <SDClass::exists(char const*)+0x3e>
    21c0:	ldr.w	r0, [r0, #1160]	; 0x488
    21c4:	cbz	r0, 21dc <SDClass::exists(char const*)+0x3e>
    21c6:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    21ca:	mov	r3, r1
    21cc:	strb.w	r1, [sp, #50]	; 0x32
    21d0:	strb.w	r1, [sp, #51]	; 0x33
    21d4:	mov	r1, r0
    21d6:	mov	r0, sp
    21d8:	bl	3910 <ExFatFile::open(ExFatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    21dc:	add	sp, #60	; 0x3c
    21de:	ldr.w	pc, [sp], #4

000021e2 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    21e2:	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    21e4:	ldr.w	r1, [r0, #1156]	; 0x484
    21e8:	push	{lr}
    21ea:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->rmdir(path) : false;
    21ec:	cbz	r1, 220c <SDClass::rmdir(char const*)+0x2a>
    21ee:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    21f0:	mov	r0, sp
    21f2:	strb.w	r3, [sp]
    21f6:	strb.w	r3, [sp, #1]
    21fa:	strb.w	r3, [sp, #2]
    21fe:	bl	5458 <FatFile::open(FatVolume*, char const*, int)>
    2202:	cbz	r0, 2230 <SDClass::rmdir(char const*)+0x4e>
    2204:	mov	r0, sp
    2206:	bl	52d2 <FatFile::rmdir()>
    220a:	b.n	2230 <SDClass::rmdir(char const*)+0x4e>
    220c:	ldr.w	r0, [r0, #1160]	; 0x488
    2210:	cbz	r0, 2230 <SDClass::rmdir(char const*)+0x4e>
    2212:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2216:	mov	r3, r1
    2218:	strb.w	r1, [sp, #50]	; 0x32
    221c:	strb.w	r1, [sp, #51]	; 0x33
    2220:	mov	r1, r0
    2222:	mov	r0, sp
    2224:	bl	3910 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2228:	cbz	r0, 2230 <SDClass::rmdir(char const*)+0x4e>
    222a:	mov	r0, sp
    222c:	bl	3f1e <ExFatFile::rmdir()>
		return sdfs.rmdir(filepath);
	}
    2230:	add	sp, #60	; 0x3c
    2232:	ldr.w	pc, [sp], #4

00002236 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    2236:	mov	r2, r1
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    2238:	ldr.w	r1, [r0, #1156]	; 0x484
    223c:	push	{lr}
    223e:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->remove(path) : false;
    2240:	cbz	r1, 2262 <SDClass::remove(char const*)+0x2c>
    2242:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2244:	mov	r0, sp
    2246:	strb.w	r3, [sp]
    224a:	strb.w	r3, [sp, #1]
    224e:	strb.w	r3, [sp, #2]
    2252:	movs	r3, #1
    2254:	bl	5458 <FatFile::open(FatVolume*, char const*, int)>
    2258:	cbz	r0, 2286 <SDClass::remove(char const*)+0x50>
    225a:	mov	r0, sp
    225c:	bl	64dc <FatFile::remove()>
    2260:	b.n	2286 <SDClass::remove(char const*)+0x50>
    2262:	ldr.w	r0, [r0, #1160]	; 0x488
    2266:	cbz	r0, 2286 <SDClass::remove(char const*)+0x50>
    2268:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    226c:	movs	r3, #1
    226e:	strb.w	r1, [sp, #50]	; 0x32
    2272:	strb.w	r1, [sp, #51]	; 0x33
    2276:	mov	r1, r0
    2278:	mov	r0, sp
    227a:	bl	3910 <ExFatFile::open(ExFatVolume*, char const*, int)>
    227e:	cbz	r0, 2286 <SDClass::remove(char const*)+0x50>
    2280:	mov	r0, sp
    2282:	bl	3e98 <ExFatFile::remove()>
		return sdfs.remove(filepath);
	}
    2286:	add	sp, #60	; 0x3c
    2288:	ldr.w	pc, [sp], #4

0000228c <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    228c:	push	{r4, lr}
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    228e:	ldr.w	r4, [r0, #1156]	; 0x484
    2292:	sub	sp, #56	; 0x38
    2294:	mov	r2, r1
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2296:	cbz	r4, 22b4 <SDClass::mkdir(char const*)+0x28>
    2298:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    229a:	add.w	r1, r4, #1096	; 0x448
    229e:	mov	r0, sp
    22a0:	strb.w	r3, [sp]
    22a4:	strb.w	r3, [sp, #1]
    22a8:	strb.w	r3, [sp, #2]
    22ac:	movs	r3, #1
    22ae:	bl	55dc <FatFile::mkdir(FatFile*, char const*, bool)>
    22b2:	b.n	22d6 <SDClass::mkdir(char const*)+0x4a>
    22b4:	ldr.w	r1, [r0, #1160]	; 0x488
    22b8:	cbz	r1, 22d4 <SDClass::mkdir(char const*)+0x48>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    22ba:	movs	r3, #1
    22bc:	add.w	r1, r1, #1096	; 0x448
    22c0:	mov	r0, sp
    22c2:	strb.w	r4, [sp, #49]	; 0x31
    22c6:	strb.w	r4, [sp, #50]	; 0x32
    22ca:	strb.w	r4, [sp, #51]	; 0x33
    22ce:	bl	41b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    22d2:	b.n	22d6 <SDClass::mkdir(char const*)+0x4a>
    22d4:	mov	r0, r1
		return sdfs.mkdir(filepath);
	}
    22d6:	add	sp, #56	; 0x38
    22d8:	pop	{r4, pc}

000022da <SDClass::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    22da:	ldr.w	r3, [r0, #1156]	; 0x484
	bool rename(const char *oldfilepath, const char *newfilepath) {
    22de:	push	{r4, r5, lr}
    22e0:	mov	r5, r2
    22e2:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    22e4:	cbz	r3, 2312 <SDClass::rename(char const*, char const*)+0x38>
    22e6:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    22e8:	add.w	r4, r3, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    22ec:	mov	r0, sp
    22ee:	strb.w	r2, [sp]
    22f2:	mov	r3, r2
    22f4:	strb.w	r2, [sp, #1]
    22f8:	strb.w	r2, [sp, #2]
    22fc:	mov	r2, r1
    22fe:	mov	r1, r4
    2300:	bl	53b0 <FatFile::open(FatFile*, char const*, int)>
    2304:	cbz	r0, 233e <SDClass::rename(char const*, char const*)+0x64>
    2306:	mov	r2, r5
    2308:	mov	r1, r4
    230a:	mov	r0, sp
    230c:	bl	5686 <FatFile::rename(FatFile*, char const*)>
    2310:	b.n	233e <SDClass::rename(char const*, char const*)+0x64>
    2312:	ldr.w	r0, [r0, #1160]	; 0x488
    2316:	cbz	r0, 233e <SDClass::rename(char const*, char const*)+0x64>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    2318:	add.w	r4, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char* oldPath, const char* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    231c:	mov	r2, r1
    231e:	mov	r0, sp
    2320:	strb.w	r3, [sp, #49]	; 0x31
    2324:	mov	r1, r4
    2326:	strb.w	r3, [sp, #50]	; 0x32
    232a:	strb.w	r3, [sp, #51]	; 0x33
    232e:	bl	3854 <ExFatFile::open(ExFatFile*, char const*, int)>
    2332:	cbz	r0, 233e <SDClass::rename(char const*, char const*)+0x64>
    2334:	mov	r2, r5
    2336:	mov	r1, r4
    2338:	mov	r0, sp
    233a:	bl	4274 <ExFatFile::rename(ExFatFile*, char const*)>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    233e:	add	sp, #60	; 0x3c
    2340:	pop	{r4, r5, pc}

00002342 <FsVolume::bytesPerCluster() const>:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  uint32_t __attribute__((error("use sectorsPerCluster()"))) blocksPerCluster();
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
    2342:	ldr.w	r3, [r0, #1152]	; 0x480
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    2346:	cbz	r3, 2356 <FsVolume::bytesPerCluster() const+0x14>
    2348:	ldrb	r0, [r3, #6]
    234a:	mov.w	r3, #512	; 0x200
    234e:	lsl.w	r0, r3, r0
    2352:	uxth	r0, r0
    2354:	bx	lr
    2356:	ldr.w	r0, [r0, #1156]	; 0x484
    235a:	cbz	r0, 2360 <FsVolume::bytesPerCluster() const+0x1e>
    235c:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
    2360:	bx	lr

00002362 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    2362:	mov	r3, r0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2364:	adds	r0, #4
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    2366:	ldr.w	r2, [r3, #1156]	; 0x484
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    236a:	push	{r4, lr}
           m_xVol ? m_xVol->clusterCount() : 0;
    236c:	cbz	r2, 2374 <SDClass::totalSize()+0x12>
    236e:	ldr	r4, [r2, #28]
    2370:	subs	r4, #1
    2372:	b.n	237e <SDClass::totalSize()+0x1c>
    2374:	ldr.w	r4, [r3, #1160]	; 0x488
    2378:	cbz	r4, 237e <SDClass::totalSize()+0x1c>
    237a:	ldr.w	r4, [r4, #1072]	; 0x430
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    237e:	bl	2342 <FsVolume::bytesPerCluster() const>
	}
    2382:	umull	r0, r1, r4, r0
    2386:	pop	{r4, pc}

00002388 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    2388:	push	{r3, r4, r5, lr}
    238a:	mov	r3, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    238c:	adds	r5, r0, #4
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    238e:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    2392:	cbz	r0, 239e <SDClass::usedSize()+0x16>
    2394:	ldr	r4, [r0, #28]
    2396:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    2398:	bl	5d00 <FatPartition::freeClusterCount()>
    239c:	b.n	23b0 <SDClass::usedSize()+0x28>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    239e:	ldr.w	r0, [r3, #1160]	; 0x488
    23a2:	cbz	r0, 23ae <SDClass::usedSize()+0x26>
    23a4:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    23a8:	bl	3c10 <ExFatPartition::freeClusterCount()>
    23ac:	b.n	23b0 <SDClass::usedSize()+0x28>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    23ae:	mov	r4, r0
    23b0:	subs	r4, r4, r0
		  * (uint64_t)sdfs.bytesPerCluster();
    23b2:	mov	r0, r5
    23b4:	bl	2342 <FsVolume::bytesPerCluster() const>
	}
    23b8:	umull	r0, r1, r4, r0
    23bc:	pop	{r3, r4, r5, pc}

000023be <SdBase<FsVolume>::begin(SdioConfig)>:
  /** Initialize SD card and file system for SDIO mode.
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    23be:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    23c0:	add.w	r5, r0, #1168	; 0x490
    spiConfigBackupPin = 255;
    23c4:	movs	r3, #255	; 0xff
  /** Initialize SD card and file system for SDIO mode.
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    23c6:	mov	r4, r0
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    23c8:	strb.w	r1, [r0, #1212]	; 0x4bc
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    23cc:	strb.w	r3, [r0, #1200]	; 0x4b0
    23d0:	mov	r0, r5
    23d2:	bl	7a30 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    23d6:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    23da:	mov	r0, r5
    23dc:	bl	71e8 <SdioCard::errorCode() const>
    23e0:	cbnz	r0, 23f0 <SdBase<FsVolume>::begin(SdioConfig)+0x32>
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    23e2:	ldr.w	r1, [r4, #1164]	; 0x48c
    23e6:	mov	r0, r4
  }
    23e8:	ldmia.w	sp!, {r3, r4, r5, lr}
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    23ec:	b.w	66f4 <FsVolume::begin(BlockDeviceInterface*)>
  }
    23f0:	movs	r0, #0
    23f2:	pop	{r3, r4, r5, pc}

000023f4 <SdBase<FsVolume>::cardBegin(SdSpiConfig)>:
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    23f4:	push	{r4, r5, r6, lr}
    23f6:	sub	sp, #32
    23f8:	mov	r6, r0
    23fa:	add	r0, sp, #4
    23fc:	add	r5, sp, #20
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    23fe:	addw	r4, r6, #1180	; 0x49c
    2402:	stmia.w	r0, {r1, r2, r3}
    2406:	ldmia	r0, {r0, r1, r2}
    2408:	stmia.w	r5, {r0, r1, r3}
    240c:	mov	r0, r4
    240e:	ldmia.w	r5, {r1, r2, r3}
    2412:	bl	6b2c <SdSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    2416:	str.w	r4, [r6, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    241a:	cbz	r4, 2428 <SdBase<FsVolume>::cardBegin(SdSpiConfig)+0x34>
    241c:	ldrb.w	r0, [r6, #1195]	; 0x4ab
    2420:	clz	r0, r0
    2424:	lsrs	r0, r0, #5
    2426:	b.n	242a <SdBase<FsVolume>::cardBegin(SdSpiConfig)+0x36>
    2428:	mov	r0, r4
  }
    242a:	add	sp, #32
    242c:	pop	{r4, r5, r6, pc}

0000242e <SdBase<FsVolume>::restart()>:
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    242e:	push	{r4, r5, lr}
    if (spiConfigBackupPin == 255) {
    2430:	ldrb.w	r3, [r0, #1200]	; 0x4b0
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    2434:	sub	sp, #20
    2436:	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    2438:	cmp	r3, #255	; 0xff
    243a:	bne.n	2446 <SdBase<FsVolume>::restart()+0x18>
      return begin(sdioConfigBackup);
    243c:	ldrb.w	r1, [r0, #1212]	; 0x4bc
    2440:	bl	23be <SdBase<FsVolume>::begin(SdioConfig)>
    2444:	b.n	247a <SdBase<FsVolume>::restart()+0x4c>
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2446:	ldr.w	r1, [r0, #1204]	; 0x4b4
    244a:	ldr.w	r2, [r0, #1208]	; 0x4b8
    244e:	strb.w	r3, [sp, #4]
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2452:	add	r3, sp, #16
  bool restart() {
    if (spiConfigBackupPin == 255) {
      return begin(sdioConfigBackup);
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2454:	ldrb.w	r5, [r0, #1201]	; 0x4b1
    2458:	str	r1, [sp, #8]
    245a:	strb.w	r5, [sp, #5]
    245e:	str	r2, [sp, #12]
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2460:	ldmdb	r3, {r1, r2, r3}
    2464:	bl	23f4 <SdBase<FsVolume>::cardBegin(SdSpiConfig)>
    2468:	cbz	r0, 247a <SdBase<FsVolume>::restart()+0x4c>
    246a:	ldr.w	r1, [r4, #1164]	; 0x48c
    246e:	mov	r0, r4
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
      return begin(spiConfig);
    }
  }
    2470:	add	sp, #20
    2472:	ldmia.w	sp!, {r4, r5, lr}
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2476:	b.w	66f4 <FsVolume::begin(BlockDeviceInterface*)>
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
      return begin(spiConfig);
    }
  }
    247a:	add	sp, #20
    247c:	pop	{r4, r5, pc}

0000247e <SDClass::format(int, char, Print&)>:
	}
}
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    247e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2482:	ldr.w	r4, [r0, #1168]	; 0x490
    2486:	sub	sp, #48	; 0x30
    2488:	mov	r6, r0
    248a:	mov	r7, r3
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    248c:	cbnz	r4, 2492 <SDClass::format(int, char, Print&)+0x14>
    248e:	movs	r0, #0
    2490:	b.n	24dc <SDClass::format(int, char, Print&)+0x5e>
	uint32_t sectors = card->sectorCount();
    2492:	ldr	r3, [r4, #0]
    2494:	mov	r0, r4
    2496:	ldr	r3, [r3, #24]
    2498:	blx	r3
	if (sectors <= 12288) return false; // card too small
    249a:	cmp.w	r0, #12288	; 0x3000

bool SDClass::format(int type, char progressChar, Print& pr)
{
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
	uint32_t sectors = card->sectorCount();
    249e:	mov	r8, r0
	if (sectors <= 12288) return false; // card too small
    24a0:	bls.n	248e <SDClass::format(int, char, Print&)+0x10>
	uint8_t *buf = (uint8_t *)malloc(512);
    24a2:	mov.w	r0, #512	; 0x200
    24a6:	bl	9ef0 <malloc>
	if (!buf) return false; // unable to allocate memory
    24aa:	mov	r5, r0
    24ac:	cmp	r0, #0
    24ae:	beq.n	248e <SDClass::format(int, char, Print&)+0x10>
	bool ret;
	if (sectors > 67108864) {
    24b0:	cmp.w	r8, #67108864	; 0x4000000
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    24b4:	mov	r2, r0
    24b6:	mov	r3, r7
    24b8:	mov	r1, r4
    24ba:	add	r0, sp, #4
	uint32_t sectors = card->sectorCount();
	if (sectors <= 12288) return false; // card too small
	uint8_t *buf = (uint8_t *)malloc(512);
	if (!buf) return false; // unable to allocate memory
	bool ret;
	if (sectors > 67108864) {
    24bc:	bls.n	24c4 <SDClass::format(int, char, Print&)+0x46>
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    24be:	bl	2ba4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>
    24c2:	b.n	24c8 <SDClass::format(int, char, Print&)+0x4a>
#else
		ret = false;
#endif
	} else {
		FatFormatter fatFormatter;
		ret = fatFormatter.format(card, buf, &pr);
    24c4:	bl	4b34 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>
    24c8:	mov	r4, r0
	}
	free(buf);
    24ca:	mov	r0, r5
    24cc:	bl	9f00 <free>
	if (ret) {
    24d0:	cmp	r4, #0
    24d2:	beq.n	248e <SDClass::format(int, char, Print&)+0x10>
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    24d4:	adds	r0, r6, #4
    24d6:	bl	242e <SdBase<FsVolume>::restart()>
    24da:	movs	r0, #1
	}
	return ret;
}
    24dc:	add	sp, #48	; 0x30
    24de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000024e4 <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    24e4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    24e6:	ldr.w	r6, [r0, #1168]	; 0x490
    24ea:	mov	r5, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
	if (card) {
    24ec:	cbnz	r6, 24f2 <SDClass::mediaPresent()+0xe>
			}
			//Serial.print(ret ? "begin ok" : "begin nope");
		}
	} else {
		//Serial.print("no card");
		ret = false;
    24ee:	movs	r0, #0
    24f0:	b.n	2542 <SDClass::mediaPresent()+0x5e>
{
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
	if (card) {
		if (cardPreviouslyPresent) {
    24f2:	ldrb.w	r2, [r0, #1220]	; 0x4c4
    24f6:	ldrb.w	r3, [r0, #1221]	; 0x4c5
    24fa:	cbz	r2, 252c <SDClass::mediaPresent()+0x48>
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    24fc:	cmp	r3, #254	; 0xfe
    24fe:	beq.n	250c <SDClass::mediaPresent()+0x28>
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// SPI doesn't have 32 bit status, read CID register
				cid_t cid;
				ret = card->readCID(&cid);
    2500:	ldr	r3, [r6, #0]
    2502:	mov	r1, sp
    2504:	mov	r0, r6
    2506:	ldr	r3, [r3, #56]	; 0x38
    2508:	blx	r3
    250a:	b.n	2542 <SDClass::mediaPresent()+0x5e>
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
				#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
				card->syncDevice();
				#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
				s = card->status();
    250c:	ldr	r3, [r6, #0]
    250e:	mov	r0, r6
    2510:	ldr	r3, [r3, #68]	; 0x44
    2512:	blx	r3
			} else s = 0xFFFFFFFF;
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
    2514:	adds	r2, r0, #1
    2516:	beq.n	2500 <SDClass::mediaPresent()+0x1c>
				// SPI doesn't have 32 bit status, read CID register
				cid_t cid;
				ret = card->readCID(&cid);
				//Serial.print(ret ? "CID=ok" : "CID=unreadable");
			} else if (s == 0) {
    2518:	cbnz	r0, 2540 <SDClass::mediaPresent()+0x5c>
				// bits 12:9 are card state, which should
				// normally be 101 = data transfer mode
				//Serial.print("status=offline");
				ret = false;
				#ifdef __IMXRT1062__
				if (csPin_ == BUILTIN_SDCARD) 
    251a:	ldrb.w	r3, [r5, #1221]	; 0x4c5
    251e:	cmp	r3, #254	; 0xfe
    2520:	bne.n	24ee <SDClass::mediaPresent()+0xa>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2522:	movs	r1, #3
    2524:	movs	r0, #46	; 0x2e
    2526:	bl	9558 <pinMode>
    252a:	b.n	24ee <SDClass::mediaPresent()+0xa>
				ret = true;
			}
		} else {
			// TODO: need a quick test, only call begin if likely present
			#ifdef __IMXRT1062__
			if ((csPin_ == BUILTIN_SDCARD) && !digitalReadFast(_SD_DAT3))
    252c:	cmp	r3, #254	; 0xfe
    252e:	bne.n	2538 <SDClass::mediaPresent()+0x54>
		} else if (pin == 45) {
			return (CORE_PIN45_PINREG & CORE_PIN45_BITMASK) ? 1 : 0;
#endif
#if CORE_NUM_DIGITAL > 46
		} else if (pin == 46) {
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2530:	ldr	r3, [pc, #24]	; (254c <SDClass::mediaPresent()+0x68>)
    2532:	ldr	r3, [r3, #8]
    2534:	lsls	r3, r3, #14
    2536:	bpl.n	24ee <SDClass::mediaPresent()+0xa>
				ret = false;
			else
			#endif
			{
				ret = sdfs.restart();
    2538:	adds	r0, r5, #4
    253a:	bl	242e <SdBase<FsVolume>::restart()>
    253e:	b.n	2542 <SDClass::mediaPresent()+0x5e>
				if (csPin_ == BUILTIN_SDCARD) 
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
				#endif
			} else {
				//Serial.print("status=present");
				ret = true;
    2540:	movs	r0, #1
	} else {
		//Serial.print("no card");
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
    2542:	strb.w	r0, [r5, #1220]	; 0x4c4
	return ret;
}
    2546:	add	sp, #16
    2548:	pop	{r4, r5, r6, pc}
    254a:	nop
    254c:	.word	0x42008000

00002550 <_GLOBAL__sub_I_SD>:


class SDClass : public FS
{
public:
	SDClass() { }
    2550:	ldr	r0, [pc, #72]	; (259c <_GLOBAL__sub_I_SD+0x4c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2552:	ldr	r2, [pc, #76]	; (25a0 <_GLOBAL__sub_I_SD+0x50>)
    2554:	ldr	r3, [pc, #76]	; (25a4 <_GLOBAL__sub_I_SD+0x54>)
    2556:	str.w	r2, [r0, #1172]	; 0x494
    255a:	ldr	r2, [pc, #76]	; (25a8 <_GLOBAL__sub_I_SD+0x58>)
    255c:	str	r3, [r0, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    255e:	movs	r3, #0
    2560:	str.w	r2, [r0, #1184]	; 0x4a0
    2564:	movs	r2, #1
    2566:	str.w	r3, [r0, #1156]	; 0x484
    256a:	strb.w	r2, [r0, #1197]	; 0x4ad
    256e:	movs	r2, #41	; 0x29
    2570:	str.w	r3, [r0, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2574:	strb.w	r3, [r0, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2578:	strb.w	r3, [r0, #1181]	; 0x49d
    257c:	strb.w	r3, [r0, #1202]	; 0x4b2
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2580:	strb.w	r3, [r0, #1216]	; 0x4c0
    2584:	strb.w	r3, [r0, #1220]	; 0x4c4
    2588:	movs	r3, #255	; 0xff
    258a:	strb.w	r2, [r0, #1199]	; 0x4af
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    258e:	ldr	r1, [pc, #28]	; (25ac <_GLOBAL__sub_I_SD+0x5c>)
    2590:	ldr	r2, [pc, #28]	; (25b0 <_GLOBAL__sub_I_SD+0x60>)
    2592:	strb.w	r3, [r0, #1221]	; 0x4c5
    2596:	b.w	9afc <__aeabi_atexit>
    259a:	nop
    259c:	.word	0x20002464
    25a0:	.word	0x200005a0
    25a4:	.word	0x20000570
    25a8:	.word	0x20000600
    25ac:	.word	0x0000219d
    25b0:	.word	0x200017b8

000025b4 <FsUtf::cpToMb(unsigned long, char*, char*)>:
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    if (cp < 0X80) {
    25b4:	cmp	r0, #127	; 0x7f
 */
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    25b6:	sub.w	r2, r2, r1
    if (cp < 0X80) {
    25ba:	bhi.n	25c6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x12>
      if (n < 1) goto fail;
    25bc:	cmp	r2, #0
    25be:	beq.n	2640 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8c>
      *(str++) = static_cast<uint8_t>(cp);
    25c0:	strb	r0, [r1, #0]
    25c2:	adds	r0, r1, #1
    25c4:	bx	lr
    } else if (cp < 0X800) {
    25c6:	cmp.w	r0, #2048	; 0x800
    25ca:	bcs.n	25e8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x34>
      if (n < 2) goto fail;
    25cc:	cmp	r2, #1
    25ce:	bls.n	2644 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    25d0:	lsrs	r3, r0, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    25d2:	and.w	r0, r0, #63	; 0x3f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    25d6:	mov	r2, r1
    25d8:	orn	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    25dc:	orn	r0, r0, #127	; 0x7f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    25e0:	strb.w	r3, [r2], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    25e4:	strb	r0, [r1, #1]
    25e6:	b.n	2640 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8c>
    } else if (cp < 0X10000) {
    25e8:	cmp.w	r0, #65536	; 0x10000
    25ec:	bcs.n	2612 <FsUtf::cpToMb(unsigned long, char*, char*)+0x5e>
      if (n < 3) goto fail;
    25ee:	cmp	r2, #2
    25f0:	bls.n	2644 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    25f2:	lsrs	r3, r0, #12
    25f4:	orn	r3, r3, #31
    25f8:	strb	r3, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    25fa:	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    25fe:	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else if (cp < 0X10000) {
      if (n < 3) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2602:	orn	r3, r3, #127	; 0x7f
    2606:	strb	r3, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2608:	orn	r3, r0, #127	; 0x7f
    260c:	adds	r0, r1, #3
    260e:	strb	r3, [r1, #2]
    2610:	bx	lr
    } else {
       if (n < 4) goto fail;
    2612:	cmp	r2, #3
    2614:	bls.n	2644 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    2616:	lsrs	r3, r0, #18
    2618:	orn	r3, r3, #15
    261c:	strb	r3, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    261e:	ubfx	r3, r0, #12, #6
    2622:	orn	r3, r3, #127	; 0x7f
    2626:	strb	r3, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2628:	ubfx	r3, r0, #6, #6
    262c:	orn	r3, r3, #127	; 0x7f
    2630:	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2632:	and.w	r3, r0, #63	; 0x3f
    2636:	adds	r0, r1, #4
    2638:	orn	r3, r3, #127	; 0x7f
    263c:	strb	r3, [r1, #3]
    263e:	bx	lr
    }
    return str;

   fail:
    return nullptr;
    2640:	mov	r0, r2
    2642:	bx	lr
    2644:	movs	r0, #0
  }
    2646:	bx	lr

00002648 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    2648:	cmp	r0, r1
   fail:
    return nullptr;
  }
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    264a:	push	{r4, r5, lr}
    size_t n;
    uint32_t cp;
    if (str >= end) {
    264c:	bcs.n	26bc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
      return nullptr;
    }
    uint8_t ch = str[0];
    264e:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    2650:	lsls	r4, r3, #24
    2652:	bmi.n	265a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x12>
      *rtn = ch;
    2654:	str	r3, [r2, #0]
      return str + 1;
    2656:	adds	r4, r0, #1
    2658:	b.n	26c2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7a>
    }
    if ((ch & 0XE0) == 0XC0) {
    265a:	and.w	r4, r3, #224	; 0xe0
    265e:	cmp	r4, #192	; 0xc0
    2660:	bne.n	266a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x22>
      cp = ch & 0X1F;
    2662:	and.w	r3, r3, #31
      n = 2;
    2666:	movs	r4, #2
    2668:	b.n	2688 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x40>
    } else if ((ch & 0XF0) == 0XE0) {
    266a:	and.w	r4, r3, #240	; 0xf0
    266e:	cmp	r4, #224	; 0xe0
    2670:	bne.n	267a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x32>
      cp = ch & 0X0F;
    2672:	and.w	r3, r3, #15
      n = 3;
    2676:	movs	r4, #3
    2678:	b.n	2688 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x40>
    } else if ((ch & 0XF8) == 0XF0) {
    267a:	and.w	r4, r3, #248	; 0xf8
    267e:	cmp	r4, #240	; 0xf0
    2680:	bne.n	26bc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
      cp = ch & 0X07;
    2682:	and.w	r3, r3, #7
      n = 4;
    2686:	movs	r4, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    2688:	add	r4, r0
    268a:	cmp	r1, r4
    268c:	bcc.n	26bc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
    268e:	adds	r0, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    2690:	ldrb.w	r1, [r0], #1
      if ((ch & 0XC0) != 0X80) {
    2694:	and.w	r5, r1, #192	; 0xc0
    2698:	cmp	r5, #128	; 0x80
    269a:	bne.n	26bc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    269c:	and.w	r1, r1, #63	; 0x3f
      return nullptr;
    }
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
    26a0:	cmp	r0, r4
      ch = str[i];
      if ((ch & 0XC0) != 0X80) {
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    26a2:	orr.w	r3, r1, r3, lsl #6
      return nullptr;
    }
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
    26a6:	bne.n	2690 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x48>
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    26a8:	sub.w	r0, r3, #128	; 0x80
    26ac:	ldr	r1, [pc, #24]	; (26c8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>)
    26ae:	cmp	r0, r1
    26b0:	bhi.n	26bc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    26b2:	sub.w	r1, r3, #55296	; 0xd800
    26b6:	cmp.w	r1, #2048	; 0x800
    26ba:	bcs.n	26c0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
      return nullptr;
    26bc:	movs	r4, #0
    26be:	b.n	26c2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7a>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    26c0:	str	r3, [r2, #0]
    return str + n;
  }
    26c2:	mov	r0, r4
    26c4:	pop	{r4, r5, pc}
    26c6:	nop
    26c8:	.word	0x0010ff7f

000026cc <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>:
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    26cc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26d0:	add	r6, sp, #48	; 0x30
    26d2:	mov	r5, r0
    26d4:	mov	r4, r2
    26d6:	mov	sl, r3
    uint32_t firstLBA;
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    26d8:	str	r1, [sp, #4]
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    26da:	ldmia.w	r6, {r6, r7, r8}
    uint32_t firstLBA;
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    26de:	cbnz	r1, 26e4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x18>
    26e0:	movs	r0, #0
    26e2:	b.n	286a <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    26e4:	cmp.w	sl, #0
    26e8:	beq.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    part--; // zero base it.

    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    26ea:	ldr	r3, [r0, #0]
    26ec:	movs	r1, #0
    26ee:	ldr	r3, [r3, #12]
    26f0:	blx	r3
    26f2:	cmp	r0, #0
    26f4:	beq.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    part--; // zero base it.
    26f6:	ldr	r3, [sp, #4]
    26f8:	add.w	r9, r3, #4294967295
    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    mbr = reinterpret_cast<MbrSector_t*>(secBuf);

    // First check for GPT vs MBR
    mp = &mbr->part[0];
    if (mp->type == 0xee) {
    26fc:	ldrb.w	r3, [r4, #450]	; 0x1c2
    2700:	cmp	r3, #238	; 0xee
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    part--; // zero base it.
    2702:	uxtb.w	r9, r9
    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    mbr = reinterpret_cast<MbrSector_t*>(secBuf);

    // First check for GPT vs MBR
    mp = &mbr->part[0];
    if (mp->type == 0xee) {
    2706:	bne.n	2788 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xbc>
      // This is a GPT initialized Disk assume validation done earlier.
      if (!blockDev->readSector(1, secBuf)) return INVALID_VOL; 
    2708:	ldr	r3, [r5, #0]
    270a:	mov	r2, r4
    270c:	movs	r1, #1
    270e:	mov	r0, r5
    2710:	ldr	r3, [r3, #12]
    2712:	blx	r3
    2714:	cmp	r0, #0
    2716:	beq.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      GPTPartitionHeader_t* gptph = reinterpret_cast<GPTPartitionHeader_t*>(secBuf);
      // Lets do a little validation of this data.
      if (!gptph || (memcmp(gptph->signature, F("EFI PART"), 8) != 0))  return INVALID_VOL;
    2718:	movs	r2, #8
    271a:	ldr	r1, [pc, #340]	; (2870 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x1a4>)
    271c:	mov	r0, r4
    271e:	bl	a550 <memcmp>
    2722:	cmp	r0, #0
    2724:	bne.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      uint32_t numberPartitions = getLe32(gptph->numberPartitions);
      if (part > numberPartitions)  return INVALID_VOL;
    2726:	ldr	r3, [r4, #80]	; 0x50
    2728:	cmp	r9, r3
    272a:	bhi.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>

      // We will overload the mbr part to give clue where GPT data is stored for this volume
      uint32_t mbrLBA = 2 + (part >> 2);
    272c:	mov.w	r1, r9, asr #2
      uint8_t mbrPart = part & 0x3;
    2730:	and.w	r9, r9, #3
      if (!gptph || (memcmp(gptph->signature, F("EFI PART"), 8) != 0))  return INVALID_VOL;
      uint32_t numberPartitions = getLe32(gptph->numberPartitions);
      if (part > numberPartitions)  return INVALID_VOL;

      // We will overload the mbr part to give clue where GPT data is stored for this volume
      uint32_t mbrLBA = 2 + (part >> 2);
    2734:	adds	r1, #2
      uint8_t mbrPart = part & 0x3;
      if (pmbrLBA) *pmbrLBA = mbrLBA;
    2736:	cbz	r7, 273a <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x6e>
    2738:	str	r1, [r7, #0]
      if (pmbrPart) *pmbrPart =mbrPart;
    273a:	cmp.w	r8, #0
    273e:	beq.n	2744 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x78>
    2740:	strb.w	r9, [r8]
      if (!blockDev->readSector(mbrLBA, secBuf)) return INVALID_VOL; 
    2744:	ldr	r3, [r5, #0]
    2746:	mov	r2, r4
    2748:	mov	r0, r5
    274a:	ldr	r3, [r3, #12]
    274c:	blx	r3
    274e:	cmp	r0, #0
    2750:	beq.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      GPTPartitionEntrySector_t *gptes = reinterpret_cast<GPTPartitionEntrySector_t*>(secBuf);
      GPTPartitionEntryItem_t *gptei = &gptes->items[mbrPart];

      // Mow extract the data...
      firstLBA = getLe64(gptei->firstLBA);
    2752:	mov.w	r0, r9, lsl #7
    2756:	add.w	r3, r0, #32
    275a:	ldr	r2, [r4, r3]
      sectorCount = 1 + getLe64(gptei->lastLBA) - getLe64(gptei->firstLBA);
    275c:	add.w	r3, r0, #40	; 0x28
    2760:	ldr	r3, [r4, r3]
    2762:	adds	r3, #1
    2764:	subs	r3, r3, r2
      if ((firstLBA == 0) && (sectorCount == 1)) return INVALID_VOL;
    2766:	cbnz	r2, 276c <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xa0>
    2768:	cmp	r3, #1
    276a:	beq.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      
      *pfirstLBA = firstLBA;
    276c:	str.w	r2, [sl]
      if (psectorCount) *psectorCount = sectorCount;
    2770:	cbz	r6, 2774 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xa8>
    2772:	str	r3, [r6, #0]

      if (memcmp((uint8_t *)gptei->partitionTypeGUID, mbdpGuid, 16) != 0) return OTHER_VOL;
    2774:	movs	r2, #16
    2776:	ldr	r1, [pc, #252]	; (2874 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x1a8>)
    2778:	add	r0, r4
    277a:	bl	a550 <memcmp>
    277e:	cmp	r0, #0
    2780:	ite	eq
    2782:	moveq	r0, #3
    2784:	movne	r0, #4
    2786:	b.n	286a <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    }
    // So we are now looking a MBR type setups. 
    // Extended support we need to walk through the partitions to see if there is an extended partition
    // that we need to walk into. 
    // short cut:
    if (part < 4) {
    2788:	cmp.w	r9, #3
    278c:	bhi.n	27ce <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
      // try quick way through
      mp = &mbr->part[part];
      if (((mp->boot == 0) || (mp->boot == 0X80)) && (mp->type != 0) && (mp->type != 0xf)) {
    278e:	add.w	r3, r4, r9, lsl #4
    2792:	ldrb.w	r2, [r3, #446]	; 0x1be
    2796:	lsls	r2, r2, #25
    2798:	bne.n	27ce <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
    279a:	ldrb.w	r3, [r3, #450]	; 0x1c2
    279e:	cbz	r3, 27ce <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
    27a0:	cmp	r3, #15
    27a2:	beq.n	27ce <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
        *pfirstLBA = getLe32(mp->relativeSectors);
    27a4:	add.w	r3, r9, #28
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    27a8:	add.w	r4, r4, r3, lsl #4
    27ac:	ldr.w	r3, [r4, #6]
    27b0:	str.w	r3, [sl]
        if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
    27b4:	cbz	r6, 27bc <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xf0>
    27b6:	ldr.w	r3, [r4, #10]
    27ba:	str	r3, [r6, #0]
        if (pmbrLBA) *pmbrLBA = 0;
    27bc:	cbz	r7, 27c2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xf6>
    27be:	movs	r3, #0
    27c0:	str	r3, [r7, #0]
        if (pmbrPart) *pmbrPart = part; // zero based. 
    27c2:	cmp.w	r8, #0
    27c6:	beq.n	27fa <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x12e>
    27c8:	strb.w	r9, [r8]
    27cc:	b.n	27fa <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x12e>
    27ce:	mov	r1, r4
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    27d0:	movs	r3, #0

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
      mp = &mbr->part[index_part];
      if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0 || index_part > part) return INVALID_VOL;
    27d2:	ldrb.w	r0, [r1, #446]	; 0x1be
    27d6:	uxtb	r2, r3
    27d8:	lsls	r0, r0, #25
    27da:	bne.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    27dc:	ldrb.w	r0, [r1, #450]	; 0x1c2
    27e0:	cmp	r0, #0
    27e2:	beq.w	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    27e6:	cmp	r9, r2
    27e8:	bcc.w	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      if (mp->type == 0xf) break;
    27ec:	cmp	r0, #15
    27ee:	beq.n	27fe <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x132>
    27f0:	adds	r3, #1
    27f2:	adds	r1, #16
      }
    }  

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
    27f4:	cmp	r3, #4
    27f6:	bne.n	27d2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x106>
    27f8:	b.n	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      if (((mp->boot == 0) || (mp->boot == 0X80)) && (mp->type != 0) && (mp->type != 0xf)) {
        *pfirstLBA = getLe32(mp->relativeSectors);
        if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
        if (pmbrLBA) *pmbrLBA = 0;
        if (pmbrPart) *pmbrPart = part; // zero based. 
        return MBR_VOL;
    27fa:	movs	r0, #1
    27fc:	b.n	286a <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    }  

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
      mp = &mbr->part[index_part];
    27fe:	add.w	r3, r4, r3, lsl #4
    2802:	adds	r2, #1
    2804:	ldr.w	r9, [r3, #454]	; 0x1c6
    2808:	uxtb.w	fp, r2
    if (index_part == 4) return INVALID_VOL; // no extended partition found. 

    // Our partition if it exists is in extended partition. 
    uint32_t next_mbr = getLe32(mp->relativeSectors);
    for(;;) {
      if (!blockDev->readSector(next_mbr, secBuf)) return INVALID_VOL;
    280c:	ldr	r3, [r5, #0]
    280e:	mov	r2, r4
    2810:	mov	r1, r9
    2812:	mov	r0, r5
    2814:	ldr	r3, [r3, #12]
    2816:	blx	r3
    2818:	cmp	r0, #0
    281a:	beq.w	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      mbr = reinterpret_cast<MbrSector_t*>(secBuf);

      if (index_part == part) break; // should be at that entry
    281e:	ldr	r3, [sp, #4]
    2820:	cmp	r3, fp
    2822:	beq.n	2844 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x178>
      // else we need to see if it points to others...
      mp = &mbr->part[1];
      uint32_t  relSec = getLe32(mp->relativeSectors);
      //Serial.printf("    Check for next: type: %u start:%u\n ", mp->type, volumeStartSector);
      if ((mp->type == 5) && relSec) {
    2824:	ldrb.w	r2, [r4, #466]	; 0x1d2
    2828:	ldr.w	r3, [r4, #470]	; 0x1d6
    282c:	cmp	r2, #5
    282e:	bne.w	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    2832:	add.w	r2, fp, #1
    2836:	uxtb.w	fp, r2
    283a:	cmp	r3, #0
    283c:	beq.w	26e0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
        next_mbr = next_mbr + relSec;
    2840:	add	r9, r3

    if (index_part == 4) return INVALID_VOL; // no extended partition found. 

    // Our partition if it exists is in extended partition. 
    uint32_t next_mbr = getLe32(mp->relativeSectors);
    for(;;) {
    2842:	b.n	280c <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x140>
      } else return INVALID_VOL;
    }
   
    // If we are here than we should hopefully be at start of segment...
    mp = &mbr->part[0];
    *pfirstLBA = getLe32(mp->relativeSectors) + next_mbr;
    2844:	ldr.w	r3, [r4, #454]	; 0x1c6
    2848:	add	r3, r9
    284a:	str.w	r3, [sl]
    if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
    284e:	cbz	r6, 2856 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x18a>
    2850:	ldr.w	r3, [r4, #458]	; 0x1ca
    2854:	str	r3, [r6, #0]
    if (pmbrLBA) *pmbrLBA = next_mbr;
    2856:	cbz	r7, 285c <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x190>
    2858:	str.w	r9, [r7]
    if (pmbrPart) *pmbrPart = 0; // zero based. 
    285c:	cmp.w	r8, #0
    2860:	beq.n	2868 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19c>
    2862:	movs	r3, #0
    2864:	strb.w	r3, [r8]
    return EXT_VOL;
    2868:	movs	r0, #2
  }
    286a:	add	sp, #12
    286c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2870:	.word	0x200012d0
    2874:	.word	0x60001e18

00002878 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2878:	cmp.w	r1, #256	; 0x100
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    287c:	push	{r4, r5, lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    287e:	bhi.n	288e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x16>
  if (capacityMB <= 16) {
    2880:	cmp	r1, #16
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2882:	mov.w	r4, #32
  if (capacityMB <= 16) {
    2886:	bls.n	28b2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x3a>
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    2888:	cmp	r1, #32
    288a:	bls.n	28b6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x3e>
    288c:	b.n	2890 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x18>
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    288e:	movs	r4, #63	; 0x3f
  if (capacityMB <= 16) {
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    numberOfHeads = 4;
  } else if (capacityMB <= 128) {
    2890:	cmp	r1, #128	; 0x80
    2892:	bls.n	28ba <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x42>
    numberOfHeads = 8;
  } else if (capacityMB <= 504) {
    2894:	cmp.w	r1, #504	; 0x1f8
    2898:	bls.n	28be <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x46>
    numberOfHeads = 16;
  } else if (capacityMB <= 1008) {
    289a:	cmp.w	r1, #1008	; 0x3f0
    289e:	bls.n	28c2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
    numberOfHeads = 32;
  } else if (capacityMB <= 2016) {
    28a0:	cmp.w	r1, #2016	; 0x7e0
    28a4:	bls.n	28c6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>
    numberOfHeads = 64;
  } else if (capacityMB <= 4032) {
    28a6:	cmp.w	r1, #4032	; 0xfc0
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
    28aa:	ite	ls
    28ac:	movls	r3, #128	; 0x80
    28ae:	movhi	r3, #255	; 0xff
    28b0:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
  if (capacityMB <= 16) {
    numberOfHeads = 2;
    28b2:	movs	r3, #2
    28b4:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 32) {
    numberOfHeads = 4;
    28b6:	movs	r3, #4
    28b8:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 128) {
    numberOfHeads = 8;
    28ba:	movs	r3, #8
    28bc:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 504) {
    numberOfHeads = 16;
    28be:	movs	r3, #16
    28c0:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 1008) {
    numberOfHeads = 32;
    28c2:	movs	r3, #32
    28c4:	b.n	28c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 2016) {
    numberOfHeads = 64;
    28c6:	movs	r3, #64	; 0x40
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    28c8:	smulbb	r3, r3, r4
    28cc:	udiv	r5, r2, r3
  if (c <= 1023) {
    28d0:	cmp.w	r5, #1024	; 0x400
    28d4:	bcs.n	28ee <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x76>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    28d6:	mls	r3, r3, r5, r2
    s = (lba % sectorsPerTrack) + 1;
    28da:	udiv	r1, r2, r4
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    28de:	udiv	r3, r3, r4
    s = (lba % sectorsPerTrack) + 1;
    28e2:	mls	r2, r4, r1, r2
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    28e6:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    28e8:	adds	r2, #1
    28ea:	uxtb	r2, r2
    28ec:	b.n	28f6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x7e>
  } else {
    c = 1023;
    h = 254;
    s = 63;
    28ee:	movs	r2, #63	; 0x3f
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    s = (lba % sectorsPerTrack) + 1;
  } else {
    c = 1023;
    h = 254;
    28f0:	movs	r3, #254	; 0xfe
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    s = (lba % sectorsPerTrack) + 1;
  } else {
    c = 1023;
    28f2:	movw	r5, #1023	; 0x3ff
    h = 254;
    s = 63;
  }
  chs[0] = h;
    28f6:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    28f8:	lsrs	r3, r5, #2
  chs[2] = c;
    28fa:	strb	r5, [r0, #2]
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    28fc:	bic.w	r3, r3, #63	; 0x3f
    2900:	orrs	r2, r3
    2902:	strb	r2, [r0, #1]
  chs[2] = c;
    2904:	pop	{r4, r5, pc}

00002906 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    2906:	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    2908:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    290a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    290c:	lsls	r2, r3, #31
    290e:	bpl.n	294c <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    2910:	ldr	r0, [r0, #4]
    2912:	add.w	r6, r4, #16
    2916:	ldr	r1, [r4, #12]
    2918:	ldr	r3, [r0, #0]
    291a:	mov	r2, r6
    291c:	ldr	r3, [r3, #32]
    291e:	blx	r3
    2920:	mov	r5, r0
    2922:	cbnz	r0, 2928 <FsCache::sync()+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    2924:	movs	r5, #0
    2926:	b.n	294e <FsCache::sync()+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    2928:	ldrb	r3, [r4, #0]
    292a:	lsls	r3, r3, #30
    292c:	bmi.n	2938 <FsCache::sync()+0x32>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    292e:	ldrb	r3, [r4, #0]
    2930:	bic.w	r3, r3, #1
    2934:	strb	r3, [r4, #0]
    2936:	b.n	294e <FsCache::sync()+0x48>
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    2938:	adds	r0, r4, #4
    293a:	mov	r2, r6
    293c:	ldmia	r0, {r0, r1, r7}
    293e:	ldr	r3, [r0, #0]
    2940:	add	r1, r7
    2942:	ldr	r3, [r3, #32]
    2944:	blx	r3
    2946:	cmp	r0, #0
    2948:	bne.n	292e <FsCache::sync()+0x28>
    294a:	b.n	2924 <FsCache::sync()+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    294c:	movs	r5, #1

 fail:
  return false;
}
    294e:	mov	r0, r5
    2950:	pop	{r3, r4, r5, r6, r7, pc}

00002952 <FsCache::get(unsigned long, unsigned char)>:
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    2952:	ldr	r3, [r0, #4]
 */
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    2954:	push	{r4, r5, r6, lr}
    2956:	mov	r4, r0
    2958:	mov	r6, r1
    295a:	mov	r5, r2
  if (!m_blockDev) {
    295c:	cbnz	r3, 2962 <FsCache::get(unsigned long, unsigned char)+0x10>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    295e:	movs	r0, #0
    2960:	pop	{r4, r5, r6, pc}
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    2962:	ldr	r3, [r0, #12]
    2964:	cmp	r3, r1
    2966:	beq.n	2990 <FsCache::get(unsigned long, unsigned char)+0x3e>
    if (!sync()) {
    2968:	bl	2906 <FsCache::sync()>
    296c:	cmp	r0, #0
    296e:	beq.n	295e <FsCache::get(unsigned long, unsigned char)+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    2970:	lsls	r3, r5, #29
    2972:	bpl.n	297c <FsCache::get(unsigned long, unsigned char)+0x2a>
      if (!m_blockDev->readSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    2974:	movs	r3, #0
    m_sector = sector;
    2976:	str	r6, [r4, #12]
      if (!m_blockDev->readSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    2978:	strb	r3, [r4, #0]
    297a:	b.n	2990 <FsCache::get(unsigned long, unsigned char)+0x3e>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    297c:	ldr	r0, [r4, #4]
    297e:	add.w	r2, r4, #16
    2982:	mov	r1, r6
    2984:	ldr	r3, [r0, #0]
    2986:	ldr	r3, [r3, #12]
    2988:	blx	r3
    298a:	cmp	r0, #0
    298c:	bne.n	2974 <FsCache::get(unsigned long, unsigned char)+0x22>
    298e:	b.n	295e <FsCache::get(unsigned long, unsigned char)+0xc>
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    2990:	ldrb	r3, [r4, #0]
    2992:	and.w	r5, r5, #3
    2996:	mov	r0, r4
    2998:	orrs	r5, r3
    299a:	strb.w	r5, [r0], #16
  return m_buffer;

 fail:
  return nullptr;
}
    299e:	pop	{r4, r5, r6, pc}

000029a0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    29a0:	cmp	r0, #126	; 0x7e
    }
  }
  return left;
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
    29a2:	push	{r4, r5, lr}
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    29a4:	bhi.n	29b4 <toUpcase(unsigned short)+0x14>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    29a6:	sub.w	r3, r0, #97	; 0x61
    29aa:	cmp	r3, #25
    29ac:	ite	hi
    29ae:	movhi	r3, #0
    29b0:	movls	r3, #32
    29b2:	b.n	29f6 <toUpcase(unsigned short)+0x56>
    29b4:	movs	r4, #53	; 0x35
    29b6:	movs	r3, #0
    29b8:	ldr	r5, [pc, #128]	; (2a3c <toUpcase(unsigned short)+0x9c>)
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    29ba:	subs	r2, r4, r3
    29bc:	ldr	r1, [pc, #124]	; (2a3c <toUpcase(unsigned short)+0x9c>)
    29be:	cmp	r2, #1
    29c0:	bls.n	29d4 <toUpcase(unsigned short)+0x34>
    mid = left + (right - left)/2;
    29c2:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    29c6:	ldrh.w	r1, [r5, r2, lsl #2]
    29ca:	cmp	r1, r0
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    29cc:	ite	hi
    29ce:	movhi	r4, r2
    29d0:	movls	r3, r2
    29d2:	b.n	29ba <toUpcase(unsigned short)+0x1a>
  // Optimize for simple ASCII.
  if (chr < 127) {
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    29d4:	uxth	r2, r3
    29d6:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    29da:	cmp	r0, r3
    29dc:	bcc.n	2a0a <toUpcase(unsigned short)+0x6a>
    29de:	add.w	r2, r1, r2, lsl #2
    29e2:	subs	r3, r0, r3
    29e4:	ldrb	r1, [r2, #3]
    29e6:	cmp	r3, r1
    29e8:	bge.n	2a0a <toUpcase(unsigned short)+0x6a>
    int8_t off = readTable8(mapTable[i].off);
    29ea:	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    29ee:	cmp	r2, #1
    29f0:	bne.n	29fa <toUpcase(unsigned short)+0x5a>
      return chr - ((chr - first) & 1);
    29f2:	and.w	r3, r3, #1
    29f6:	subs	r0, r0, r3
    29f8:	b.n	2a06 <toUpcase(unsigned short)+0x66>
    }
    return chr + (off ? off : -0x1C60);
    29fa:	cbz	r2, 2a00 <toUpcase(unsigned short)+0x60>
    29fc:	uxth	r2, r2
    29fe:	b.n	2a04 <toUpcase(unsigned short)+0x64>
    2a00:	movw	r2, #58272	; 0xe3a0
    2a04:	add	r0, r2
    2a06:	uxth	r0, r0
    2a08:	pop	{r4, r5, pc}
    2a0a:	movs	r4, #75	; 0x4b
    2a0c:	movs	r3, #0
    2a0e:	ldr	r5, [pc, #48]	; (2a40 <toUpcase(unsigned short)+0xa0>)
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    2a10:	subs	r2, r4, r3
    2a12:	ldr	r1, [pc, #44]	; (2a40 <toUpcase(unsigned short)+0xa0>)
    2a14:	cmp	r2, #1
    2a16:	bls.n	2a2a <toUpcase(unsigned short)+0x8a>
    mid = left + (right - left)/2;
    2a18:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    2a1c:	ldrh.w	r1, [r5, r2, lsl #2]
    2a20:	cmp	r1, r0
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    2a22:	ite	hi
    2a24:	movhi	r4, r2
    2a26:	movls	r3, r2
    2a28:	b.n	2a10 <toUpcase(unsigned short)+0x70>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    2a2a:	uxth	r3, r3
    2a2c:	ldrh.w	r2, [r1, r3, lsl #2]
    2a30:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    2a32:	itt	eq
    2a34:	addeq.w	r3, r1, r3, lsl #2
    2a38:	ldrheq	r0, [r3, #2]
  }
  return chr;
}
    2a3a:	pop	{r4, r5, pc}
    2a3c:	.word	0x20000e6c
    2a40:	.word	0x20000d40

00002a44 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    2a44:	push	{r0, r1, r4, lr}
    2a46:	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    2a48:	ldrh	r0, [r0, #12]
    2a4a:	cbz	r0, 2a52 <FsName::get16()+0xe>
    rtn = ls;
    ls = 0;
    2a4c:	movs	r3, #0
    2a4e:	strh	r3, [r4, #12]
    2a50:	b.n	2a88 <FsName::get16()+0x44>
  } else if (next >= end) {
    2a52:	ldr	r3, [r4, #4]
    2a54:	ldr	r1, [r4, #8]
    2a56:	cmp	r3, r1
    2a58:	bcs.n	2a88 <FsName::get16()+0x44>
    rtn = 0;
  } else {
    uint32_t cp;
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    2a5a:	add	r2, sp, #4
    2a5c:	mov	r0, r3
    2a5e:	bl	2648 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    2a62:	cbz	r0, 2a84 <FsName::get16()+0x40>
      goto fail;
    }
    next = ptr;
    2a64:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    2a66:	ldr	r0, [sp, #4]
    2a68:	cmp.w	r0, #65536	; 0x10000
      rtn = cp;
    } else {
      ls = FsUtf::lowSurrogate(cp);
    2a6c:	itttt	cs
    2a6e:	ubfxcs	r3, r0, #0, #10
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    2a72:	lsrcs	r0, r0, #10
    2a74:	subcs.w	r3, r3, #9216	; 0x2400
    2a78:	subcs.w	r0, r0, #10304	; 0x2840
    2a7c:	it	cs
    2a7e:	strhcs	r3, [r4, #12]
    2a80:	uxth	r0, r0
    2a82:	b.n	2a88 <FsName::get16()+0x44>
    }
  }
  return rtn;

 fail:
  return 0XFFFF;
    2a84:	movw	r0, #65535	; 0xffff
}
    2a88:	add	sp, #8
    2a8a:	pop	{r4, pc}

00002a8c <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2a8c:	ldr	r3, [r0, #8]
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    2a8e:	mov	r1, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2a90:	ubfx	r3, r3, #0, #9
  if (!index) {
    2a94:	cbz	r3, 2ab0 <ExFatFormatter::syncUpcase()+0x24>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    2a96:	movs	r0, #0
    2a98:	ldr	r2, [r1, #16]
    2a9a:	strb	r0, [r2, r3]
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  if (!index) {
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    2a9c:	adds	r3, #1
    2a9e:	cmp.w	r3, #512	; 0x200
    2aa2:	bne.n	2a98 <ExFatFormatter::syncUpcase()+0xc>
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2aa4:	ldr	r0, [r1, #12]
    2aa6:	ldr	r2, [r1, #16]
    2aa8:	ldr	r3, [r0, #0]
    2aaa:	ldr	r1, [r1, #0]
    2aac:	ldr	r3, [r3, #32]
    2aae:	bx	r3
}
    2ab0:	movs	r0, #1
    2ab2:	bx	lr

00002ab4 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2ab4:	ldr	r2, [r0, #8]
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    2ab6:	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    2ab8:	ldr	r0, [r0, #16]
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2aba:	ubfx	r2, r2, #0, #9
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    2abe:	push	{r4}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    2ac0:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    2ac2:	ldr	r0, [r3, #4]
    2ac4:	add.w	r1, r1, r0, ror #1
    2ac8:	str	r1, [r3, #4]
  m_upcaseSize++;
    2aca:	ldr	r1, [r3, #8]
    2acc:	adds	r1, #1
    2ace:	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    2ad0:	movw	r1, #511	; 0x1ff
    2ad4:	cmp	r2, r1
    2ad6:	bne.n	2aee <ExFatFormatter::writeUpcaseByte(unsigned char)+0x3a>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2ad8:	ldr	r0, [r3, #12]
    2ada:	ldr	r1, [r3, #0]
    2adc:	ldr	r2, [r0, #0]
    2ade:	ldr	r4, [r2, #32]
    2ae0:	adds	r2, r1, #1
    2ae2:	str	r2, [r3, #0]
    2ae4:	ldr	r2, [r3, #16]
    2ae6:	mov	r3, r4
  }
  return true;
}
    2ae8:	ldr.w	r4, [sp], #4
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2aec:	bx	r3
  }
  return true;
}
    2aee:	movs	r0, #1
    2af0:	ldr.w	r4, [sp], #4
    2af4:	bx	lr

00002af6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    2af6:	push	{r3, r4, r5, lr}
    2af8:	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2afa:	uxtb	r1, r1
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    2afc:	mov	r5, r0
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2afe:	bl	2ab4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    2b02:	cbz	r0, 2b10 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x1a>
    2b04:	lsrs	r1, r4, #8
    2b06:	mov	r0, r5
}
    2b08:	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2b0c:	b.w	2ab4 <ExFatFormatter::writeUpcaseByte(unsigned char)>
}
    2b10:	pop	{r3, r4, r5, pc}

00002b12 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    2b12:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    2b14:	movs	r4, #0
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    2b16:	mov	r7, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    2b18:	str	r4, [r0, #8]
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    2b1a:	stmia.w	r0, {r1, r4}

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    2b1e:	uxth	r0, r4
    2b20:	bl	29a0 <toUpcase(unsigned short)>
    if (uc != ch) {
    2b24:	cmp	r0, r4
  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    2b26:	mov	r6, r0
    if (uc != ch) {
    2b28:	beq.n	2b40 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
      if (!writeUpcaseUnicode(uc)) {
    2b2a:	mov	r1, r0
    2b2c:	mov	r0, r7
    2b2e:	bl	2af6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2b32:	cbz	r0, 2b9e <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    2b34:	adds	r5, r4, #1

  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    2b36:	cmp.w	r5, #65536	; 0x10000
    2b3a:	bcs.n	2b54 <ExFatFormatter::writeUpcase(unsigned long)+0x42>
    2b3c:	mov	r4, r5
    2b3e:	b.n	2b1e <ExFatFormatter::writeUpcase(unsigned long)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    2b40:	adds	r5, r4, #1
    2b42:	cmp.w	r5, #65536	; 0x10000
    2b46:	bcs.n	2b5e <ExFatFormatter::writeUpcase(unsigned long)+0x4c>
    2b48:	uxth	r0, r5
    2b4a:	bl	29a0 <toUpcase(unsigned short)>
    2b4e:	cmp	r5, r0
    2b50:	bne.n	2b5e <ExFatFormatter::writeUpcase(unsigned long)+0x4c>
    2b52:	b.n	2b9a <ExFatFormatter::writeUpcase(unsigned long)+0x88>
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    2b54:	mov	r0, r7
  }
  return true;

 fail:
  return false;
}
    2b56:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    2b5a:	b.w	2a8c <ExFatFormatter::syncUpcase()>
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
    2b5e:	subs	r4, r5, r4
      if (ns >= MINIMUM_UPCASE_SKIP) {
    2b60:	cmp.w	r4, #512	; 0x200
    2b64:	bcc.n	2b80 <ExFatFormatter::writeUpcase(unsigned long)+0x6e>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    2b66:	movw	r1, #65535	; 0xffff
    2b6a:	mov	r0, r7
    2b6c:	bl	2af6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2b70:	cbz	r0, 2b9e <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
    2b72:	uxth	r1, r4
    2b74:	mov	r0, r7
    2b76:	bl	2af6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2b7a:	cmp	r0, #0
    2b7c:	bne.n	2b36 <ExFatFormatter::writeUpcase(unsigned long)+0x24>
    2b7e:	b.n	2b9e <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
    2b80:	mov	r4, r6
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    2b82:	cmp	r5, r4
    2b84:	bhi.n	2b8a <ExFatFormatter::writeUpcase(unsigned long)+0x78>
    2b86:	mov	r5, r4
    2b88:	b.n	2b36 <ExFatFormatter::writeUpcase(unsigned long)+0x24>
          if (!writeUpcaseUnicode(ch++)) {
    2b8a:	uxth	r1, r4
    2b8c:	mov	r0, r7
    2b8e:	bl	2af6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2b92:	adds	r4, #1
    2b94:	cmp	r0, #0
    2b96:	bne.n	2b82 <ExFatFormatter::writeUpcase(unsigned long)+0x70>
    2b98:	b.n	2b9e <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    2b9a:	adds	r5, #1
    2b9c:	b.n	2b42 <ExFatFormatter::writeUpcase(unsigned long)+0x30>
  }
  return true;

 fail:
  return false;
}
    2b9e:	movs	r0, #0
    2ba0:	pop	{r3, r4, r5, r6, r7, pc}
	...

00002ba4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2ba4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ba8:	mov	r7, r3
  uint32_t volumeLength;
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
    2baa:	mov	r3, r0
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2bac:	sub	sp, #28
    2bae:	mov	r5, r1
  uint32_t volumeLength;
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
    2bb0:	str	r1, [r3, #12]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2bb2:	mov	r4, r2
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
    2bb4:	str	r2, [r3, #16]
  sectorCount = dev->sectorCount();
    2bb6:	ldr	r3, [r1, #0]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2bb8:	str	r0, [sp, #4]
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    2bba:	mov	r0, r1
    2bbc:	ldr	r3, [r3, #24]
    2bbe:	blx	r3
  // Min size is 512 MB
  if (sectorCount < 0X100000) {
    2bc0:	cmp.w	r0, #1048576	; 0x100000
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    2bc4:	mov	r9, r0
  // Min size is 512 MB
  if (sectorCount < 0X100000) {
    2bc6:	bcs.n	2bd8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x34>
    writeMsg(pr, "Device is too small\r\n");
    2bc8:	cmp	r7, #0
    2bca:	beq.w	2df4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x250>
    2bce:	ldr	r1, [pc, #584]	; (2e18 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x274>)
    2bd0:	mov	r0, r7
    2bd2:	bl	674 <Print::write(char const*)>
    2bd6:	b.n	2dec <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x248>
    2bd8:	movs	r6, #0
    2bda:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    2bdc:	adds	r6, #1
    2bde:	lsls	r3, r3, #1
    2be0:	uxtb	r6, r6
    2be2:	cmp	r6, #32
    2be4:	beq.n	2bf2 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    2be6:	cmp	r9, r3
    2be8:	bhi.n	2bdc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x38>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    2bea:	cmp	r6, #28
    2bec:	bhi.n	2bf2 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    2bee:	movs	r3, #8
    2bf0:	b.n	2bfa <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x56>
    2bf2:	sub.w	r8, r6, #11
    2bf6:	ubfx	r3, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    2bfa:	cmp	r6, #26
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    2bfc:	str	r3, [sp, #8]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    2bfe:	ldr	r2, [sp, #8]

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2c00:	mov.w	r1, #0
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    2c04:	itte	hi
    2c06:	addhi	r6, #1
    2c08:	movhi	r3, #1
    2c0a:	movls.w	r3, #8192	; 0x2000
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2c0e:	mov	r0, r4
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    2c10:	it	hi
    2c12:	asrhi	r6, r6, #1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    2c14:	mov.w	fp, #1
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
    2c18:	mov.w	r8, #0
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    2c1c:	it	hi
    2c1e:	lslhi	r3, r6
    2c20:	str	r3, [sp, #0]
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
    2c22:	ldr	r3, [sp, #0]
    2c24:	lsls	r6, r3, #1
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    2c26:	lsls	r3, r3, #2
    2c28:	rsb	sl, r3, r9
    2c2c:	str	r3, [sp, #16]
    2c2e:	ldr	r3, [sp, #8]
    2c30:	lsr.w	r3, sl, r3
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    2c34:	lsl.w	sl, r3, r2

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2c38:	mov.w	r2, #512	; 0x200
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    2c3c:	str	r3, [sp, #12]
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2c3e:	bl	7f6c <memset>
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    2c42:	movs	r3, #7
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    2c44:	strb.w	fp, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    2c48:	strb.w	fp, [r4, #448]	; 0x1c0
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    2c4c:	add	sl, r6
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    2c4e:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    2c52:	movs	r3, #254	; 0xfe
  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
    2c54:	strb.w	r8, [r4, #449]	; 0x1c1
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    2c58:	mov	r2, r4
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
    2c5a:	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    2c5e:	movs	r3, #255	; 0xff
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2c60:	str.w	r6, [r4, #454]	; 0x1c6
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    2c64:	mov	r1, r8
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
    2c66:	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    2c6a:	mov	r0, r5
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
    2c6c:	strb.w	r3, [r4, #453]	; 0x1c5
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2c70:	movw	r3, #43605	; 0xaa55
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2c74:	str.w	sl, [r4, #458]	; 0x1ca
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2c78:	strh.w	r3, [r4, #510]	; 0x1fe
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    2c7c:	ldr	r3, [r5, #0]
    2c7e:	ldr	r3, [r3, #32]
    2c80:	blx	r3
    2c82:	cmp	r0, #0
    2c84:	beq.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2c88:	mov.w	r2, #512	; 0x200
    2c8c:	mov	r1, r8
    2c8e:	mov	r0, r4
    2c90:	bl	7f6c <memset>
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    2c94:	movs	r3, #235	; 0xeb
    2c96:	addw	r2, r4, #509	; 0x1fd
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    2c9a:	movs	r1, #244	; 0xf4
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    2c9c:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    2c9e:	movs	r3, #118	; 0x76

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2ca0:	str	r6, [r4, #64]	; 0x40
    2ca2:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    2ca4:	movs	r3, #144	; 0x90
    2ca6:	str.w	r8, [r4, #68]	; 0x44
    2caa:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    2cac:	movs	r3, #69	; 0x45
    2cae:	str.w	sl, [r4, #72]	; 0x48
    2cb2:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    2cb4:	movs	r3, #88	; 0x58
    2cb6:	str.w	r8, [r4, #76]	; 0x4c
    2cba:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    2cbc:	movs	r3, #70	; 0x46
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2cbe:	str	r6, [r4, #88]	; 0x58
    2cc0:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    2cc2:	movs	r3, #65	; 0x41
    2cc4:	str.w	r9, [r4, #100]	; 0x64
    2cc8:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    2cca:	movs	r3, #84	; 0x54
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2ccc:	strh.w	r8, [r4, #106]	; 0x6a
    2cd0:	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    2cd2:	movs	r3, #32
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
    2cd4:	strb.w	fp, [r4, #110]	; 0x6e
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
  pbs->oemName[3] = 'A';
  pbs->oemName[4] = 'T';
  pbs->oemName[5] = ' ';
    2cd8:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    2cda:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    2cdc:	strb	r3, [r4, #10]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2cde:	ldr	r3, [sp, #0]
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;
    2ce0:	strb.w	r8, [r4, #112]	; 0x70
    2ce4:	str	r3, [r4, #80]	; 0x50
    2ce6:	str	r3, [r4, #84]	; 0x54
    2ce8:	ldr	r3, [sp, #12]
    2cea:	str	r3, [r4, #92]	; 0x5c
    2cec:	movs	r3, #4
    2cee:	str	r3, [r4, #96]	; 0x60
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2cf0:	mov.w	r3, #256	; 0x100
    2cf4:	strh.w	r3, [r4, #104]	; 0x68
  setLe32(pbs->bpb.clusterCount, clusterCount);
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    2cf8:	movs	r3, #9
    2cfa:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    2cfe:	ldrb.w	r3, [sp, #8]
    2d02:	strb.w	r3, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
    2d06:	movs	r3, #128	; 0x80
    2d08:	strb.w	r3, [r4, #111]	; 0x6f
    2d0c:	add.w	r3, r4, #119	; 0x77
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    2d10:	strb.w	r1, [r3, #1]!
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    2d14:	cmp	r3, r2
    2d16:	bne.n	2d10 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x16c>
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2d18:	mov.w	r9, #0
    2d1c:	movw	r3, #43605	; 0xaa55
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    2d20:	mov	r8, r9
    2d22:	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    2d26:	sub.w	r3, r9, #106	; 0x6a
    2d2a:	cmp	r3, #1
    2d2c:	bls.n	2d3c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x198>
        i == offsetof(ExFatPbs_t, bpb.volumeFlags[1]) ||
    2d2e:	cmp.w	r9, #112	; 0x70
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    2d32:	itt	ne
    2d34:	ldrbne.w	r3, [r4, r9]
    2d38:	addne.w	r8, r3, r8, ror #1
  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2d3c:	add.w	r9, r9, #1
    2d40:	cmp.w	r9, #512	; 0x200
    2d44:	bne.n	2d26 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x182>
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    2d46:	ldr	r3, [r5, #0]
    2d48:	mov	r2, r4
    2d4a:	mov	r1, r6
    2d4c:	mov	r0, r5
    2d4e:	ldr	r3, [r3, #32]
    2d50:	blx	r3
    2d52:	cmp	r0, #0
    2d54:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    2d56:	ldr	r3, [r5, #0]
    2d58:	mov	r2, r4
    2d5a:	add.w	r1, r6, #12
    2d5e:	mov	r0, r5
    2d60:	ldr	r3, [r3, #32]
    2d62:	blx	r3
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    2d64:	cmp	r0, #0
    2d66:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2d68:	mov	r2, r9
    2d6a:	movs	r1, #0
    2d6c:	mov	r0, r4
  if (!dev->writeSector(sector, secBuf)  ||
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
    2d6e:	add.w	sl, r6, #1
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2d72:	bl	7f6c <memset>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2d76:	movw	r3, #43605	; 0xaa55
    2d7a:	add.w	r9, r6, #9
    2d7e:	addw	fp, r4, #511	; 0x1ff
    2d82:	strh.w	r3, [r4, #510]	; 0x1fe
    2d86:	subs	r3, r4, #1
    2d88:	str	r3, [sp, #20]
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    2d8a:	ldr	r3, [sp, #20]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    2d8c:	ldrb.w	r2, [r3, #1]!
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2d90:	cmp	fp, r3
    2d92:	add.w	r8, r2, r8, ror #1
    2d96:	bne.n	2d8c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x1e8>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    2d98:	ldr	r3, [r5, #0]
    2d9a:	mov	r2, r4
    2d9c:	mov	r1, sl
    2d9e:	mov	r0, r5
    2da0:	ldr	r3, [r3, #32]
    2da2:	blx	r3
    2da4:	cbz	r0, 2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    2da6:	ldr	r3, [r5, #0]
    2da8:	mov	r2, r4
    2daa:	add.w	r1, sl, #12
    2dae:	mov	r0, r5
    2db0:	ldr	r3, [r3, #32]
    2db2:	blx	r3
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    2db4:	cbz	r0, 2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    2db6:	add.w	sl, sl, #1
  }
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    2dba:	cmp	sl, r9
    2dbc:	bne.n	2d8a <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
    2dbe:	add.w	sl, r6, #11
      goto fail;
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2dc2:	mov.w	r2, #512	; 0x200
    2dc6:	movs	r1, #0
    2dc8:	mov	r0, r4
    2dca:	bl	7f6c <memset>
    2dce:	ldr	r3, [sp, #20]
    2dd0:	ldrb.w	r2, [r3, #1]!
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2dd4:	cmp	fp, r3
    2dd6:	add.w	r8, r2, r8, ror #1
    2dda:	bne.n	2dd0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x22c>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    2ddc:	ldr	r3, [r5, #0]
    2dde:	mov	r2, r4
    2de0:	mov	r1, r9
    2de2:	mov	r0, r5
    2de4:	ldr	r3, [r3, #32]
    2de6:	blx	r3
    2de8:	cbnz	r0, 2dfa <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x256>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    2dea:	cbz	r7, 2df4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x250>
    2dec:	ldr	r1, [pc, #44]	; (2e1c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x278>)
    2dee:	mov	r0, r7
    2df0:	bl	674 <Print::write(char const*)>
  return false;
    2df4:	mov.w	sl, #0
    2df8:	b.n	2fdc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x438>
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    2dfa:	ldr	r3, [r5, #0]
    2dfc:	mov	r2, r4
    2dfe:	add.w	r1, r9, #12
    2e02:	mov	r0, r5
    2e04:	ldr	r3, [r3, #32]
    2e06:	blx	r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    2e08:	cmp	r0, #0
    2e0a:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    2e0c:	add.w	r3, r9, #1
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    2e10:	cmp	r3, sl
    2e12:	beq.n	2e20 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    2e14:	mov	r9, r3
    2e16:	b.n	2dce <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x22a>
    2e18:	.word	0x200012d9
    2e1c:	.word	0x20001332
    2e20:	subs	r3, r4, #4
    2e22:	add.w	r2, r4, #508	; 0x1fc
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2e26:	str.w	r8, [r3, #4]!
      goto fail;
    }
    sector++;
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    2e2a:	cmp	r2, r3
    2e2c:	bne.n	2e26 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x282>
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    2e2e:	ldr	r3, [r5, #0]
    2e30:	mov	r2, r4
    2e32:	mov	r1, sl
    2e34:	mov	r0, r5
    2e36:	ldr	r3, [r3, #32]
    2e38:	blx	r3
    2e3a:	cmp	r0, #0
    2e3c:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    2e3e:	ldr	r3, [r5, #0]
    2e40:	mov	r2, r4
    2e42:	add.w	r1, r9, #13
    2e46:	mov	r0, r5
    2e48:	ldr	r3, [r3, #32]
    2e4a:	blx	r3
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    2e4c:	cmp	r0, #0
    2e4e:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
    2e50:	cbz	r7, 2e5a <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2b6>
    2e52:	ldr	r1, [pc, #400]	; (2fe4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x440>)
    2e54:	mov	r0, r7
    2e56:	bl	674 <Print::write(char const*)>
  sector = partitionOffset + fatOffset;
    2e5a:	ldr	r3, [sp, #0]
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e5c:	mov.w	r2, #512	; 0x200
    2e60:	movs	r1, #0
    2e62:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
    2e64:	add	r6, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    2e66:	ldr	r3, [sp, #12]
    2e68:	mov.w	r9, r3, lsl #2

  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e6c:	bl	7f6c <memset>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    2e70:	movs	r3, #248	; 0xf8
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    2e72:	addw	r9, r9, #519	; 0x207
    2e76:	add.w	r2, r4, #19

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    2e7a:	strb	r3, [r4, #0]
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    2e7c:	movs	r1, #255	; 0xff
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    2e7e:	mov.w	sl, r9, lsr #9
    2e82:	mov	r3, r4

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    2e84:	strb.w	r1, [r3, #1]!
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    2e88:	cmp	r2, r3
    2e8a:	bne.n	2e84 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2e0>
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    if (i%(ns/32) == 0) {
    2e8c:	mov.w	r9, r9, lsr #14
    2e90:	mov.w	r8, #0
    2e94:	udiv	r3, r8, r9
    2e98:	mls	r3, r9, r3, r8
    2e9c:	cbnz	r3, 2ea8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x304>
      writeMsg(pr, ".");
    2e9e:	cbz	r7, 2ea8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x304>
    2ea0:	ldr	r1, [pc, #324]	; (2fe8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x444>)
    2ea2:	mov	r0, r7
    2ea4:	bl	674 <Print::write(char const*)>
    }
    if (!dev->writeSector(sector + i, secBuf)) {
    2ea8:	ldr	r3, [r5, #0]
    2eaa:	mov	r2, r4
    2eac:	add.w	r1, r6, r8
    2eb0:	mov	r0, r5
    2eb2:	ldr	r3, [r3, #32]
    2eb4:	blx	r3
    2eb6:	cmp	r0, #0
    2eb8:	beq.n	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    2eba:	cmp.w	r8, #0
    2ebe:	bne.n	2ecc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x328>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    2ec0:	mov.w	r2, #512	; 0x200
    2ec4:	mov	r1, r8
    2ec6:	mov	r0, r4
    2ec8:	bl	7f6c <memset>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    2ecc:	add.w	r8, r8, #1
    2ed0:	cmp	sl, r8
    2ed2:	bne.n	2e94 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2f0>
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    }
  }
  writeMsg(pr, "\r\n");
    2ed4:	cbz	r7, 2ede <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x33a>
    2ed6:	ldr	r1, [pc, #276]	; (2fec <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x448>)
    2ed8:	mov	r0, r7
    2eda:	bl	674 <Print::write(char const*)>
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2ede:	ldr	r3, [sp, #8]
    2ee0:	mov.w	r8, #1
    2ee4:	lsl.w	r8, r8, r3
    }
  }
  writeMsg(pr, "\r\n");
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    2ee8:	ldr	r3, [sp, #12]
    2eea:	add.w	sl, r3, #7
    2eee:	mov.w	sl, sl, lsr #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    2ef2:	addw	fp, sl, #511	; 0x1ff
    2ef6:	mov.w	fp, fp, lsr #9
  if (ns > sectorsPerCluster) {
    2efa:	cmp	r8, fp
    2efc:	bcc.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2f00:	mov.w	r2, #512	; 0x200
    2f04:	movs	r1, #0
    2f06:	mov	r0, r4
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
  for (uint32_t i = 0; i < ns; i++) {
    2f08:	mov.w	r9, #0
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
  if (ns > sectorsPerCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2f0c:	bl	7f6c <memset>
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
    2f10:	movs	r3, #7
    2f12:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    if (!dev->writeSector(sector + i, secBuf)) {
    2f14:	ldr	r3, [r5, #0]
    2f16:	mov	r2, r4
    2f18:	ldr	r1, [sp, #16]
    2f1a:	mov	r0, r5
    2f1c:	ldr	r3, [r3, #32]
    2f1e:	add	r1, r9
    2f20:	blx	r3
    2f22:	cmp	r0, #0
    2f24:	beq.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    2f28:	cmp.w	r9, #0
    2f2c:	bne.n	2f32 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x38e>
      secBuf[0] = 0;
    2f2e:	strb.w	r9, [r4]
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
  for (uint32_t i = 0; i < ns; i++) {
    2f32:	add.w	r9, r9, #1
    2f36:	cmp	fp, r9
    2f38:	bne.n	2f14 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x370>
    if (i == 0) {
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
    2f3a:	cbz	r7, 2f44 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3a0>
    2f3c:	ldr	r1, [pc, #176]	; (2ff0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x44c>)
    2f3e:	mov	r0, r7
    2f40:	bl	674 <Print::write(char const*)>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    2f44:	ldr	r3, [sp, #0]
    2f46:	ldr	r0, [sp, #4]
    2f48:	add	r3, r6
    2f4a:	add.w	r9, r3, r8
    2f4e:	mov	r1, r9
    2f50:	bl	2b12 <ExFatFormatter::writeUpcase(unsigned long)>
    2f54:	cmp	r0, #0
    2f56:	beq.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    2f5a:	ldr	r3, [sp, #4]
    2f5c:	ldr	r3, [r3, #8]
    2f5e:	cmp.w	r3, r8, lsl #9
    2f62:	bhi.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
    2f66:	cbz	r7, 2f70 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    2f68:	ldr	r1, [pc, #136]	; (2ff4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x450>)
    2f6a:	mov	r0, r7
    2f6c:	bl	674 <Print::write(char const*)>
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2f70:	mov.w	r2, #512	; 0x200
    2f74:	movs	r1, #0
    2f76:	mov	r0, r4
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2f78:	movs	r6, #0
    2f7a:	bl	7f6c <memset>
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    2f7e:	movs	r2, #129	; 0x81
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    2f80:	movs	r3, #3
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    2f82:	add	r9, r8
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    2f84:	strb.w	r2, [r4, #32]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f88:	movs	r2, #2
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    2f8a:	strb	r3, [r4, #0]
    2f8c:	str	r2, [r4, #52]	; 0x34
  setLe32(dbm->firstCluster, BITMAP_CLUSTER);
  setLe64(dbm->size, bitmapSize);

  // upcase directory entry.
  dup = reinterpret_cast<DirUpcase_t*>(secBuf +64);
  dup->type = EXFAT_TYPE_UPCASE;
    2f8e:	movs	r2, #130	; 0x82
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2f90:	str.w	sl, [r4, #56]	; 0x38
    2f94:	strb.w	r2, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    2f98:	ldr	r2, [sp, #4]
    2f9a:	ldr	r2, [r2, #4]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f9c:	str	r3, [r4, #84]	; 0x54
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2f9e:	ldr	r3, [sp, #4]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2fa0:	str	r2, [r4, #68]	; 0x44
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2fa2:	ldr	r3, [r3, #8]
    2fa4:	str	r6, [r4, #92]	; 0x5c
    2fa6:	str	r3, [r4, #88]	; 0x58
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    if (!dev->writeSector(sector + i, secBuf)) {
    2fa8:	ldr	r3, [r5, #0]
    2faa:	mov	r2, r4
    2fac:	add.w	r1, r6, r9
    2fb0:	mov	r0, r5
    2fb2:	ldr	r3, [r3, #32]
    2fb4:	blx	r3
    2fb6:	mov	sl, r0
    2fb8:	cmp	r0, #0
    2fba:	beq.w	2dea <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    2fbe:	cbnz	r6, 2fcc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x428>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    2fc0:	mov.w	r2, #512	; 0x200
    2fc4:	mov	r1, r6
    2fc6:	mov	r0, r4
    2fc8:	bl	7f6c <memset>
  setLe32(dup->checksum, m_upcaseChecksum);
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    2fcc:	adds	r6, #1
    2fce:	cmp	r8, r6
    2fd0:	bne.n	2fa8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x404>
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    }
  }
  writeMsg(pr, "Format done\r\n");
    2fd2:	cbz	r7, 2fdc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x438>
    2fd4:	ldr	r1, [pc, #32]	; (2ff8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x454>)
    2fd6:	mov	r0, r7
    2fd8:	bl	674 <Print::write(char const*)>
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
    2fdc:	mov	r0, sl
    2fde:	add	sp, #28
    2fe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe4:	.word	0x200012ef
    2fe8:	.word	0x200012fc
    2fec:	.word	0x2000136e
    2ff0:	.word	0x200012fe
    2ff4:	.word	0x20001315
    2ff8:	.word	0x20001324

00002ffc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2ffc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3000:	mov	r5, r2
    3002:	mov	r6, r1
    3004:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    3008:	ldrh	r3, [r5, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    300a:	ldrh.w	r4, [r6, #2]!
    300e:	cbnz	r3, 3022 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    3010:	ldr	r2, [r5, #4]
    3012:	ldr	r3, [r5, #8]
    3014:	cmp	r2, r3
    3016:	bne.n	3022 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    3018:	clz	r0, r4
    301c:	lsrs	r0, r0, #5
    301e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    3022:	mov	r0, r5
    3024:	bl	2a44 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    3028:	bl	29a0 <toUpcase(unsigned short)>
    302c:	mov	r7, r0
    302e:	mov	r0, r4
    3030:	bl	29a0 <toUpcase(unsigned short)>
    3034:	cmp	r7, r0
    3036:	bne.n	3042 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    3038:	cmp	r6, r8
    303a:	bne.n	3008 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    303c:	movs	r0, #1
    303e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    if (toUpcase(cp) != toUpcase(u)) {
       return false;
    3042:	movs	r0, #0
    3044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003048 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    3048:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    304c:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    3050:	mov	sl, r0
    3052:	mov	r9, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    3054:	cmp	r3, #0
    3056:	beq.n	30e8 <ExFatFile::getName8(char*, unsigned int)+0xa0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    3058:	add.w	r8, r2, #4294967295
    305c:	mov	r5, r1
    305e:	movs	r7, #2
    3060:	movs	r4, #0
    3062:	add	r8, r1
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3064:	ldrb.w	r3, [sl, #48]	; 0x30
    3068:	cmp	r3, r7
    306a:	bcc.n	30dc <ExFatFile::getName8(char*, unsigned int)+0x94>
    dn = reinterpret_cast<DirName_t*>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    306c:	movs	r2, #0
    306e:	mov	r1, r7
    3070:	mov	r0, sl
    3072:	bl	315a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3076:	cbz	r0, 30e8 <ExFatFile::getName8(char*, unsigned int)+0xa0>
    3078:	ldrb	r3, [r0, #0]
    307a:	cmp	r3, #193	; 0xc1
    307c:	bne.n	30e8 <ExFatFile::getName8(char*, unsigned int)+0xa0>
    307e:	mov	r6, r0
    3080:	add.w	fp, r0, #30
    3084:	mov	r3, r4
    3086:	ldrh.w	r4, [r6, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (hs) {
    308a:	cbz	r3, 30aa <ExFatFile::getName8(char*, unsigned int)+0x62>
        if (!FsUtf::isLowSurrogate(c)) {
    308c:	add.w	r2, r4, #9216	; 0x2400
    3090:	uxth	r2, r2
    3092:	cmp.w	r2, #1024	; 0x400
    3096:	bcs.n	30e8 <ExFatFile::getName8(char*, unsigned int)+0xa0>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    3098:	lsls	r3, r3, #10
    309a:	ldr	r0, [pc, #88]	; (30f4 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    309c:	ubfx	r4, r4, #0, #10
    30a0:	ands	r0, r3
    30a2:	orrs	r4, r0
    30a4:	add.w	r0, r4, #65536	; 0x10000
    30a8:	b.n	30c4 <ExFatFile::getName8(char*, unsigned int)+0x7c>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    30aa:	add.w	r3, r4, #10240	; 0x2800
    30ae:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    30b0:	cmp.w	r3, #2048	; 0x800
    30b4:	bcc.n	30bc <ExFatFile::getName8(char*, unsigned int)+0x74>
        if (c == 0) {
    30b6:	cbz	r4, 30dc <ExFatFile::getName8(char*, unsigned int)+0x94>
          goto done;
        }
        cp = c;
    30b8:	mov	r0, r4
    30ba:	b.n	30c4 <ExFatFile::getName8(char*, unsigned int)+0x7c>
      } else if (FsUtf::isHighSurrogate(c)) {
    30bc:	cmp.w	r3, #1024	; 0x400
    30c0:	bcc.n	30d2 <ExFatFile::getName8(char*, unsigned int)+0x8a>
    30c2:	b.n	30e8 <ExFatFile::getName8(char*, unsigned int)+0xa0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    30c4:	mov	r2, r8
    30c6:	mov	r1, r5
    30c8:	bl	25b4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    30cc:	cbz	r0, 30dc <ExFatFile::getName8(char*, unsigned int)+0x94>
    30ce:	mov	r5, r0
    30d0:	movs	r4, #0
         (dirCache(is, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    30d2:	cmp	fp, r6
    30d4:	bne.n	3084 <ExFatFile::getName8(char*, unsigned int)+0x3c>
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    30d6:	adds	r7, #1
    30d8:	uxtb	r7, r7
    30da:	b.n	3064 <ExFatFile::getName8(char*, unsigned int)+0x1c>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    30dc:	movs	r3, #0
  return str - name;
    30de:	rsb	r0, r9, r5
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    30e2:	strb	r3, [r5, #0]
  return str - name;
    30e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

 fail:
  *name = 0;
    30e8:	movs	r0, #0
    30ea:	strb.w	r0, [r9]
  return 0;
}
    30ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30f2:	nop
    30f4:	.word	0x000ffc00

000030f8 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    30f8:	push	{r4, r5, r6, lr}
  }
  void reset() {
    next = begin;
    30fa:	ldr	r3, [r1, #0]
    ls = 0;
    30fc:	movs	r4, #0
    30fe:	mov	r5, r1
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    3100:	movw	r6, #65535	; 0xffff
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3104:	str	r3, [r1, #4]
    ls = 0;
    3106:	strh	r4, [r1, #12]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
    3108:	str	r4, [r1, #16]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    310a:	ldrh	r3, [r5, #12]
    310c:	cbnz	r3, 3116 <ExFatFile::hashName(ExName_t*)+0x1e>
    310e:	ldr	r2, [r5, #4]
    3110:	ldr	r3, [r5, #8]
    3112:	cmp	r2, r3
    3114:	beq.n	314a <ExFatFile::hashName(ExName_t*)+0x52>
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    3116:	mov	r0, r5
    3118:	bl	2a44 <FsName::get16()>
    if (u == 0XFFFF) {
    311c:	cmp	r0, r6
    311e:	beq.n	3146 <ExFatFile::hashName(ExName_t*)+0x4e>
  hash = ((hash << 15) | (hash >> 1));
  return hash;
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
    3120:	bl	29a0 <toUpcase(unsigned short)>
    3124:	lsls	r3, r4, #15
    3126:	orr.w	r4, r3, r4, lsr #1
    312a:	uxtab	r4, r4, r0
    312e:	ubfx	r3, r4, #1, #15
    3132:	orr.w	r3, r3, r4, lsl #15
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    3136:	asrs	r4, r0, #8
    3138:	uxtah	r4, r4, r3
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    313c:	ldr	r3, [r5, #16]
    313e:	adds	r3, #1
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    3140:	uxth	r4, r4
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    3142:	str	r3, [r5, #16]
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    3144:	b.n	310a <ExFatFile::hashName(ExName_t*)+0x12>
    goto fail;
  }
  return true;

 fail:
  return false;
    3146:	movs	r0, #0
    3148:	pop	{r4, r5, r6, pc}
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    314a:	ldr	r0, [r5, #16]
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    314c:	strh	r4, [r5, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    314e:	subs	r0, #1
    3150:	cmp	r0, #254	; 0xfe
    3152:	ite	hi
    3154:	movhi	r0, #0
    3156:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    3158:	pop	{r4, r5, r6, pc}

0000315a <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    315a:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    315c:	add.w	r3, r0, #36	; 0x24
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3160:	sub	sp, #20
    3162:	mov	r5, r0
    3164:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    3166:	add	r4, sp, #4
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3168:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    316a:	ldmia.w	r3, {r0, r1, r2}
    316e:	stmia.w	r4, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, 32*set) != 1) {
    3172:	lsls	r2, r7, #5
    3174:	mov	r1, r4
    3176:	ldr	r0, [r5, #32]
    3178:	bl	3b34 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    317c:	cmp	r0, #1
    317e:	bne.n	318c <ExFatFile::dirCache(unsigned char, unsigned char)+0x32>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    3180:	mov	r2, r6
    3182:	mov	r1, r4
    3184:	ldr	r0, [r5, #32]
    3186:	bl	3a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    318a:	b.n	318e <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
  DirPos_t pos = m_dirPos;
  if (m_vol->dirSeek(&pos, 32*set) != 1) {
    return nullptr;
    318c:	movs	r0, #0
  }
  return m_vol->dirCache(&pos, options);
}
    318e:	add	sp, #20
    3190:	pop	{r4, r5, r6, r7, pc}

00003192 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    3192:	push	{r4, lr}
    3194:	mov	r4, r0
  bool rtn = sync();
    3196:	bl	4050 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    319a:	movs	r3, #0
    319c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    31a0:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    31a4:	pop	{r4, pc}

000031a6 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    31a6:	push	{r3, r4, r5, lr}
    31a8:	mov	r5, r1
    31aa:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    31ac:	add.w	r1, r0, #36	; 0x24
    31b0:	movs	r2, #0
    31b2:	ldr	r0, [r0, #32]
    31b4:	bl	3a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    31b8:	cbz	r0, 31c4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    31ba:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    31bc:	strh	r3, [r5, #0]
    31be:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    31c0:	movs	r0, #1
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
    31c2:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    31c4:	pop	{r3, r4, r5, pc}

000031c6 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    31c6:	push	{r3, r4, r5, lr}
    31c8:	mov	r5, r1
    31ca:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    31cc:	add.w	r1, r0, #36	; 0x24
    31d0:	movs	r2, #0
    31d2:	ldr	r0, [r0, #32]
    31d4:	bl	3a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    31d8:	cbz	r0, 31e4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    31da:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    31dc:	strh	r3, [r5, #0]
    31de:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    31e0:	movs	r0, #1
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
    31e2:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    31e4:	pop	{r3, r4, r5, pc}

000031e6 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    31e6:	push	{r3, r4, r5, lr}
    31e8:	mov	r5, r1
  if (isOpen()) {
    31ea:	ldrb.w	r1, [r0, #49]	; 0x31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    31ee:	mov	r4, r0
  if (isOpen()) {
    31f0:	cbnz	r1, 3208 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    31f2:	movs	r2, #56	; 0x38
    31f4:	bl	7f6c <memset>
  m_attributes = FILE_ATTR_ROOT;
    31f8:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    31fa:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    31fc:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    31fe:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3202:	strb.w	r0, [r4, #51]	; 0x33
    3206:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    3208:	movs	r0, #0
}
    320a:	pop	{r3, r4, r5, pc}

0000320c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    320c:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    320e:	ldrb	r4, [r1, #0]
    3210:	adds	r5, r1, #1
    3212:	cmp	r4, #32
    3214:	bne.n	321a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe>
    3216:	mov	r1, r5
    3218:	b.n	320e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    321a:	ldr	r7, [pc, #104]	; (3284 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x78>)
    path++;
  }
  fname->begin = path;
    321c:	str	r1, [r2, #0]
  fname->end = path;
    321e:	str	r1, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3220:	mov	r5, r1
    3222:	mov	r6, r1
    3224:	ldrb.w	r4, [r5], #1
    3228:	cbz	r4, 3262 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    322a:	cmp	r4, #47	; 0x2f
    322c:	beq.n	3256 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    322e:	cmp	r4, #31
    3230:	bls.n	327c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    3232:	sub.w	r1, r4, #34	; 0x22
    3236:	uxtb	r1, r1
    3238:	cmp	r1, #29
    323a:	bhi.n	3244 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x38>
    323c:	lsr.w	r1, r7, r1
    3240:	lsls	r1, r1, #31
    3242:	bmi.n	327c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    3244:	and.w	r1, r4, #191	; 0xbf
    3248:	cmp	r1, #60	; 0x3c
    324a:	beq.n	327c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    324c:	cmp	r4, #92	; 0x5c
    324e:	bne.n	326c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    3250:	b.n	327c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    3252:	cmp	r4, #47	; 0x2f
    3254:	bne.n	3262 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    3256:	mov	r6, r1
    3258:	ldrb.w	r4, [r1], #1
    325c:	cmp	r4, #32
    325e:	bne.n	3252 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    3260:	b.n	3256 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  *ptr = path;
    3262:	str	r6, [r3, #0]
  return hashName(fname);
    3264:	mov	r1, r2

 fail:
  return false;
}
    3266:	pop	{r4, r5, r6, r7}
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return hashName(fname);
    3268:	b.w	30f8 <ExFatFile::hashName(ExName_t*)>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    326c:	cmp	r4, #46	; 0x2e
    326e:	bne.n	3274 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    3270:	mov	r1, r5
    3272:	b.n	3220 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    3274:	cmp	r4, #32
    3276:	beq.n	3270 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
      // Need to trim trailing dots spaces.
      fname->end = path;
    3278:	str	r5, [r2, #8]
    327a:	b.n	3270 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    327c:	movs	r0, #0
    327e:	pop	{r4, r5, r6, r7}
    3280:	bx	lr
    3282:	nop
    3284:	.word	0x31000101

00003288 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3288:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    328c:	ldrb.w	r3, [r0, #51]	; 0x33
    3290:	mov	r4, r0
    3292:	mov	r6, r1
    3294:	mov	r5, r2
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3296:	lsls	r7, r3, #31
    3298:	bpl.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    329a:	lsls	r0, r3, #25
    329c:	bmi.n	32a6 <ExFatFile::read(void*, unsigned int)+0x1e>
    329e:	ldrb.w	r3, [r4, #49]	; 0x31
    32a2:	lsls	r1, r3, #28
    32a4:	bpl.n	32c0 <ExFatFile::read(void*, unsigned int)+0x38>
    if ((m_curPosition + count) > m_validLength) {
    32a6:	ldrd	r0, r1, [r4]
    32aa:	ldrd	r2, r3, [r4, #16]
    32ae:	adds.w	r8, r0, r5
    32b2:	adc.w	r9, r1, #0
    32b6:	cmp	r3, r9
    32b8:	it	eq
    32ba:	cmpeq	r2, r8
    32bc:	bcs.n	32c0 <ExFatFile::read(void*, unsigned int)+0x38>
      count = toRead = m_validLength - m_curPosition;
    32be:	subs	r5, r2, r0
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    32c0:	mov	r9, r5
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    32c2:	add.w	sl, r4, #24
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    32c6:	cmp.w	r9, #0
    32ca:	beq.n	3354 <ExFatFile::read(void*, unsigned int)+0xcc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    32cc:	ldr	r0, [r4, #32]
    32ce:	ldrd	r2, r3, [r4]
    32d2:	ldr.w	r1, [r0, #1080]	; 0x438
    32d6:	and.w	r8, r1, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    32da:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    32de:	cmp.w	r8, #0
    32e2:	bne.n	3322 <ExFatFile::read(void*, unsigned int)+0x9a>
      if (m_curPosition == 0) {
    32e4:	orrs	r3, r2
    32e6:	bne.n	32f8 <ExFatFile::read(void*, unsigned int)+0x70>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    32e8:	ldrb.w	r3, [r4, #49]	; 0x31
    32ec:	lsls	r2, r3, #25
    32ee:	ite	mi
    32f0:	ldrmi.w	r3, [r0, #1076]	; 0x434
    32f4:	ldrpl	r3, [r4, #28]
    32f6:	b.n	3304 <ExFatFile::read(void*, unsigned int)+0x7c>
      } else if (isContiguous()) {
    32f8:	ldrb.w	r3, [r4, #51]	; 0x33
    32fc:	lsls	r3, r3, #25
    32fe:	bpl.n	3308 <ExFatFile::read(void*, unsigned int)+0x80>
        m_curCluster++;
    3300:	ldr	r3, [r4, #24]
    3302:	adds	r3, #1
    3304:	str	r3, [r4, #24]
    3306:	b.n	3322 <ExFatFile::read(void*, unsigned int)+0x9a>
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3308:	mov	r2, sl
    330a:	ldr	r1, [r4, #24]
    330c:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3310:	cmp	r0, #0
    3312:	blt.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3314:	bne.n	3322 <ExFatFile::read(void*, unsigned int)+0x9a>
          // EOF if directory.
          if (isDir()) {
    3316:	ldrb.w	r3, [r4, #49]	; 0x31
    331a:	tst.w	r3, #80	; 0x50
    331e:	bne.n	3354 <ExFatFile::read(void*, unsigned int)+0xcc>
    3320:	b.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3322:	ldr	r7, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3324:	mov.w	r2, r8, lsr #9
    3328:	ldr	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    332a:	ldrb.w	lr, [r7, #1093]	; 0x445
    332e:	subs	r1, #2
    3330:	ldr.w	r0, [r7, #1068]	; 0x42c
    3334:	lsl.w	r1, r1, lr
    3338:	add	r1, r0
    333a:	add.w	r8, r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    333e:	cmp.w	fp, #0
    3342:	bne.n	33e4 <ExFatFile::read(void*, unsigned int)+0x15c>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3344:	cmp.w	r9, #512	; 0x200
    3348:	bcc.n	33e4 <ExFatFile::read(void*, unsigned int)+0x15c>
    334a:	ldr.w	r1, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    334e:	cmp	r8, r1
    3350:	bne.n	335c <ExFatFile::read(void*, unsigned int)+0xd4>
    3352:	b.n	33e4 <ExFatFile::read(void*, unsigned int)+0x15c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3354:	rsb	r0, r9, r5
    3358:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    335c:	cmp.w	r9, #1024	; 0x400
    3360:	bcc.n	33b8 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3362:	movs	r3, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3364:	mov.w	fp, r9, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3368:	lsl.w	r3, r3, lr
    336c:	subs	r2, r3, r2
    336e:	cmp	fp, r2
    3370:	it	cs
    3372:	movcs	fp, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3374:	cmp	r8, r1
    3376:	bhi.n	339e <ExFatFile::read(void*, unsigned int)+0x116>
    3378:	add.w	r3, fp, r8
    337c:	cmp	r1, r3
    337e:	bcs.n	339e <ExFatFile::read(void*, unsigned int)+0x116>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3380:	add.w	r0, r7, #528	; 0x210
    3384:	bl	2906 <FsCache::sync()>
    3388:	cbnz	r0, 339e <ExFatFile::read(void*, unsigned int)+0x116>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    338a:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    338e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3392:	orr.w	r3, r3, #2
    3396:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    339a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    339e:	ldr.w	r0, [r7, #532]	; 0x214
    33a2:	mov	r2, r6
    33a4:	mov	r1, r8
    33a6:	ldr	r3, [r0, #0]
    33a8:	ldr	r7, [r3, #16]
    33aa:	mov	r3, fp
    33ac:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    33ae:	cmp	r0, #0
    33b0:	beq.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    33b2:	mov.w	r7, fp, lsl #9
    33b6:	b.n	33ce <ExFatFile::read(void*, unsigned int)+0x146>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    33b8:	ldr.w	r0, [r7, #532]	; 0x214
    33bc:	mov	r2, r6
    33be:	mov	r1, r8
    33c0:	ldr	r3, [r0, #0]
    33c2:	ldr	r3, [r3, #12]
    33c4:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    33c6:	cmp	r0, #0
    33c8:	beq.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    33ca:	mov.w	r7, #512	; 0x200
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    33ce:	add	r6, r7
    m_curPosition += n;
    toRead -= n;
    33d0:	rsb	r9, r7, r9
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    33d4:	ldrd	r2, r3, [r4]
    33d8:	adds	r2, r2, r7
    33da:	adc.w	r3, r3, #0
    33de:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    33e2:	b.n	32c6 <ExFatFile::read(void*, unsigned int)+0x3e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    33e4:	movs	r2, #0
    33e6:	mov	r1, r8
    33e8:	add.w	r0, r7, #528	; 0x210
    33ec:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    33f0:	cmp	r0, #0
    33f2:	beq.n	338a <ExFatFile::read(void*, unsigned int)+0x102>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    33f4:	rsb	r7, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    33f8:	add.w	r1, r0, fp
    33fc:	mov	r0, r6
    33fe:	cmp	r7, r9
    3400:	it	cs
    3402:	movcs	r7, r9
    3404:	mov	r2, r7
    3406:	bl	7fb0 <memcpy>
    340a:	b.n	33ce <ExFatFile::read(void*, unsigned int)+0x146>

0000340c <ExFatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    340c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    340e:	movs	r2, #1
    3410:	add.w	r1, sp, #7
    3414:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    3416:	ldr	r5, [r0, #24]
 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    3418:	ldrd	r6, r7, [r0]
    341c:	bl	3288 <ExFatFile::read(void*, unsigned int)>
    3420:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3422:	str	r5, [r4, #24]
    3424:	ite	eq
    3426:	ldrbeq.w	r0, [sp, #7]
    342a:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    342e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3432:	add	sp, #12
    3434:	pop	{r4, r5, r6, r7, pc}

00003436 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3436:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    343a:	mov	r7, r3
    343c:	ldrb.w	fp, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3440:	ldr	r3, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3442:	mov	r4, r0
    3444:	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3446:	str	r3, [sp, #4]
  // error if file not open
  if (!isOpen()) {
    3448:	cmp.w	fp, #0
    344c:	beq.n	34f4 <ExFatFile::seekSet(unsigned long long)+0xbe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    344e:	ldrd	r8, r9, [r0]
    3452:	cmp	r9, r7
    3454:	it	eq
    3456:	cmpeq	r8, r2
    3458:	beq.n	34fc <ExFatFile::seekSet(unsigned long long)+0xc6>
    return true;
  }
  if (pos == 0) {
    345a:	orrs.w	r3, r6, r7
    345e:	bne.n	3466 <ExFatFile::seekSet(unsigned long long)+0x30>
    // set position to start of file
    m_curCluster = 0;
    3460:	movs	r3, #0
    3462:	str	r3, [r0, #24]
    goto done;
    3464:	b.n	34ee <ExFatFile::seekSet(unsigned long long)+0xb8>
  }
  if (isFile()) {
    3466:	tst.w	fp, #8
    346a:	beq.n	3478 <ExFatFile::seekSet(unsigned long long)+0x42>
    if (pos > m_validLength) {
    346c:	ldrd	r0, r1, [r0, #16]
    3470:	cmp	r1, r7
    3472:	it	eq
    3474:	cmpeq	r0, r2
    3476:	bcc.n	34f4 <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3478:	ldr	r3, [r4, #32]
    347a:	adds.w	r0, r6, #4294967295
    347e:	ldrb.w	sl, [r3, #1093]	; 0x445
    3482:	adc.w	r1, r7, #4294967295
    3486:	str	r3, [sp, #0]
    3488:	add.w	sl, sl, #9
    348c:	uxtb.w	sl, sl
    3490:	mov	r2, sl
    3492:	bl	9b08 <__aeabi_llsr>
  if (isContiguous()) {
    3496:	ldrb.w	r2, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    349a:	mov	r5, r0
  if (isContiguous()) {
    349c:	lsls	r3, r2, #25
    349e:	bpl.n	34a8 <ExFatFile::seekSet(unsigned long long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    34a0:	ldr	r3, [r4, #28]
    34a2:	add	r5, r3
    34a4:	str	r5, [r4, #24]
    goto done;
    34a6:	b.n	34ee <ExFatFile::seekSet(unsigned long long)+0xb8>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    34a8:	adds.w	r0, r8, #4294967295
    34ac:	mov	r2, sl
    34ae:	adc.w	r1, r9, #4294967295
    34b2:	bl	9b08 <__aeabi_llsr>
  if (nNew < nCur || m_curPosition == 0) {
    34b6:	cmp	r5, r0
    34b8:	bcc.n	34c0 <ExFatFile::seekSet(unsigned long long)+0x8a>
    34ba:	orrs.w	r3, r8, r9
    34be:	bne.n	34d6 <ExFatFile::seekSet(unsigned long long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    34c0:	tst.w	fp, #64	; 0x40
    34c4:	itet	ne
    34c6:	ldrne	r3, [sp, #0]
    34c8:	ldreq	r3, [r4, #28]
    34ca:	ldrne.w	r3, [r3, #1076]	; 0x434
    34ce:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    34d0:	add.w	r8, r4, #24
    34d4:	b.n	34ea <ExFatFile::seekSet(unsigned long long)+0xb4>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    34d6:	subs	r5, r5, r0
    34d8:	b.n	34d0 <ExFatFile::seekSet(unsigned long long)+0x9a>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    34da:	mov	r2, r8
    34dc:	ldr	r1, [r4, #24]
    34de:	ldr	r0, [r4, #32]
    34e0:	subs	r5, #1
    34e2:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    34e6:	cmp	r0, #0
    34e8:	ble.n	34f4 <ExFatFile::seekSet(unsigned long long)+0xbe>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    34ea:	cmp	r5, #0
    34ec:	bne.n	34da <ExFatFile::seekSet(unsigned long long)+0xa4>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    34ee:	strd	r6, r7, [r4]
    34f2:	b.n	34fc <ExFatFile::seekSet(unsigned long long)+0xc6>
  return true;

 fail:
  m_curCluster = tmp;
    34f4:	ldr	r3, [sp, #4]
  return false;
    34f6:	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    34f8:	str	r3, [r4, #24]
  return false;
    34fa:	b.n	34fe <ExFatFile::seekSet(unsigned long long)+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    34fc:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    34fe:	add	sp, #12
    3500:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3504:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3508:	mov	sl, r3
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    350a:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    350e:	sub	sp, #52	; 0x34
    3510:	mov	r4, r0
    3512:	mov	r6, r1
    3514:	mov	r5, r2
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    3516:	cbnz	r3, 3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3518:	ldrb.w	r3, [r1, #49]	; 0x31
    351c:	tst.w	r3, #80	; 0x50
    3520:	beq.n	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    3522:	and.w	r3, sl, #3
    3526:	cmp	r3, #1
    3528:	beq.w	3830 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32c>
    352c:	cmp	r3, #2
    352e:	bne.w	3826 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x322>
      break;
    case O_WRONLY:
      modeFlags = FILE_FLAG_WRITE;
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    3532:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3534:	and.w	r9, sl, #8
    3538:	orr.w	r9, r9, r3

  if (fname) {
    353c:	cbz	r5, 3582 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7e>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    353e:	ldr	r3, [r5, #16]
    3540:	mov.w	r8, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    3544:	movs	r2, #0
    3546:	mov	r0, r6
    3548:	adds	r3, #14
    354a:	udiv	r8, r3, r8
    354e:	add.w	r8, r8, #2
    3552:	movs	r3, #0
    3554:	uxtb.w	r8, r8
    3558:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    355c:	mov.w	fp, #0
    3560:	mov	r7, fp
    freeNeed = 2 + (fname->nameLength + 14)/15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, 32);
    3562:	movs	r2, #32
    3564:	add	r1, sp, #16
    3566:	mov	r0, r6
    3568:	bl	3288 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    356c:	cmp	r0, #0
    356e:	beq.w	36ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1e6>
      goto create;
    }
    if (n != 32) {
    3572:	cmp	r0, #32
    3574:	beq.n	3588 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  return sync();
#endif  // READ_ONLY

 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3576:	movs	r0, #0
    3578:	strb.w	r0, [r4, #49]	; 0x31
  m_flags = 0;
    357c:	strb.w	r0, [r4, #51]	; 0x33
  return false;
    3580:	b.n	3848 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
    3582:	mov.w	r8, #3
    3586:	b.n	355c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3588:	ldrb.w	r2, [sp, #16]
    358c:	lsls	r1, r2, #24
    358e:	bmi.n	35b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      // Unused entry.
      if (freeCount == 0) {
    3590:	cbnz	r7, 359c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x98>
        freePos.position = dir->curPosition() - 32;
    3592:	ldr	r3, [r6, #0]
    3594:	subs	r3, #32
    3596:	str	r3, [sp, #4]
    3598:	ldr	r3, [r6, #24]
    359a:	str	r3, [sp, #0]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    359c:	cmp	r7, r8
        freeCount++;
    359e:	itt	cc
    35a0:	addcc	r7, #1
    35a2:	uxtbcc	r7, r7
      }
      if (!buf[0]) {
    35a4:	cbz	r2, 35ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
      }
      if (fname->atEnd()) {
        goto found;
      }
    } else {
      inSet = false;
    35a6:	mov.w	fp, #0
    35aa:	b.n	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
      }
      if (freeCount < freeNeed) {
        freeCount++;
      }
      if (!buf[0]) {
        if (fname) {
    35ac:	cmp	r5, #0
    35ae:	bne.w	36ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1e6>
    35b2:	b.n	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    } else if (!inSet) {
    35b4:	cmp.w	fp, #0
    35b8:	bne.n	360a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x106>
      if (freeCount < freeNeed) {
        freeCount = 0;
    35ba:	cmp	r7, r8
    35bc:	it	cc
    35be:	movcc	r7, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    35c0:	cmp	r2, #133	; 0x85
    35c2:	bne.n	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
    35c4:	movs	r2, #56	; 0x38
    35c6:	mov	r1, fp
    35c8:	mov	r0, r4
        freeCount = 0;
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    35ca:	mov.w	fp, #1
      memset(this, 0, sizeof(ExFatFile));
    35ce:	bl	7f6c <memset>
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    35d2:	ldrb.w	r3, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    35d6:	ldrb.w	r2, [sp, #20]
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    35da:	strb.w	r3, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    35de:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    35e2:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    35e4:	it	pl
    35e6:	orrpl.w	r3, r3, #8
    35ea:	strb.w	r3, [r4, #49]	; 0x31
    35ee:	ldr	r3, [r6, #32]
      }
      m_vol = dir->volume();
    35f0:	str	r3, [r4, #32]
    35f2:	ldr	r3, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
    35f4:	str	r3, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - 32;
    35f6:	ldr	r3, [r6, #0]
    35f8:	subs	r3, #32
    35fa:	str	r3, [r4, #40]	; 0x28
      m_dirPos.isContiguous = dir->isContiguous();
    35fc:	ldrb.w	r3, [r6, #51]	; 0x33
    3600:	ubfx	r3, r3, #6, #1
    3604:	strb.w	r3, [r4, #44]	; 0x2c
    3608:	b.n	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    360a:	cmp	r2, #192	; 0xc0
    360c:	bne.n	3666 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x162>
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    360e:	ldrb.w	r3, [sp, #17]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - 32;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    3612:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3616:	lsls	r0, r3, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3618:	itt	mi
    361a:	orrmi.w	r3, r9, #64	; 0x40
    361e:	strbmi.w	r3, [r4, #51]	; 0x33
      }
      m_validLength = getLe64(dirStream->validLength);
    3622:	ldrd	r2, r3, [sp, #24]
    3626:	strd	r2, r3, [r4, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    362a:	ldr	r3, [sp, #36]	; 0x24
    362c:	str	r3, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    362e:	ldrd	r2, r3, [sp, #40]	; 0x28
    3632:	strd	r2, r3, [r4, #8]
      if (!fname) {
    3636:	cbnz	r5, 3640 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3638:	tst.w	sl, #2048	; 0x800
    363c:	bne.n	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    363e:	b.n	368e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  }
  void reset() {
    next = begin;
    3640:	ldr	r3, [r5, #0]
      m_dataLength = getLe64(dirStream->dataLength);
      if (!fname) {
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
    3642:	ldr	r2, [r5, #16]
    3644:	str	r3, [r5, #4]
    ls = 0;
    3646:	mov.w	r3, #0
    364a:	strh	r3, [r5, #12]
    364c:	ldrb.w	r3, [sp, #19]
    3650:	cmp	r2, r3
    3652:	bne.n	35a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
    3654:	ldrh.w	r2, [sp, #20]
    3658:	ldrh	r3, [r5, #20]
    365a:	subs	r1, r2, r3
    365c:	rsbs	fp, r1, #0
    3660:	adc.w	fp, fp, r1
    3664:	b.n	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    3666:	cmp	r2, #193	; 0xc1
    3668:	bne.n	35a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
    366a:	mov	r2, r5
    366c:	add	r1, sp, #16
    366e:	mov	r0, r4
    3670:	bl	2ffc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    3674:	cbnz	r0, 367a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x176>
        inSet = false;
    3676:	mov	fp, r0
    3678:	b.n	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    367a:	ldrh	r2, [r5, #12]
    367c:	cmp	r2, #0
    367e:	bne.w	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    3682:	ldr	r1, [r5, #4]
    3684:	ldr	r2, [r5, #8]
    3686:	cmp	r1, r2
    3688:	bne.w	3562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    368c:	b.n	3638 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x134>
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    368e:	tst.w	sl, #17408	; 0x4400
    3692:	bne.n	369c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x198>
    3694:	ldrb.w	r3, [r4, #51]	; 0x33
    3698:	lsls	r2, r3, #30
    369a:	bpl.n	36a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a4>
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    369c:	ldrb.w	r3, [r4, #49]	; 0x31
    36a0:	tst.w	r3, #17
    36a4:	bne.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    36a8:	tst.w	sl, #1024	; 0x400
    36ac:	beq.n	36d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    36ae:	ldrb.w	r3, [r4, #51]	; 0x33
    36b2:	lsls	r3, r3, #30
    36b4:	bpl.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    36b8:	movs	r2, #0
    36ba:	movs	r3, #0
    36bc:	mov	r0, r4
    36be:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
    36c2:	cmp	r0, #0
    36c4:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    36c8:	mov	r0, r4
    36ca:	bl	4430 <ExFatFile::truncate()>
    36ce:	b.n	36e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1de>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    36d0:	tst.w	sl, #16384	; 0x4000
    36d4:	beq.w	3834 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x330>
    36d8:	mov	r0, r4
    36da:	ldrd	r2, r3, [r4, #16]
    36de:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
    36e2:	cmp	r0, #0
    36e4:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    36e8:	b.n	3834 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x330>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    36ea:	tst.w	sl, #512	; 0x200
    36ee:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    36f2:	tst.w	r9, #2
    36f6:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    36fa:	cmp	r5, #0
    36fc:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3700:	cmp	r7, r8
    3702:	bcs.n	373e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x23a>
    n = dir->read(buf, 32);
    3704:	movs	r2, #32
    3706:	add	r1, sp, #16
    3708:	mov	r0, r6
    370a:	bl	3288 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    370e:	cbnz	r0, 3726 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x222>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3710:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3712:	ldr.w	sl, [r6, #24]
      if (!dir->addDirCluster()) {
    3716:	bl	408e <ExFatFile::addDirCluster()>
    371a:	cmp	r0, #0
    371c:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3720:	str.w	sl, [r6, #24]
      continue;
    3724:	b.n	3700 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1fc>
    }
    if (n != 32) {
    3726:	cmp	r0, #32
    3728:	bne.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    372c:	cbnz	r7, 3738 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
      freePos.position = dir->curPosition() - 32;
    372e:	ldr	r3, [r6, #0]
    3730:	subs	r3, #32
    3732:	str	r3, [sp, #4]
    3734:	ldr	r3, [r6, #24]
    3736:	str	r3, [sp, #0]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3738:	adds	r7, #1
    373a:	uxtb	r7, r7
    373c:	b.n	3700 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1fc>
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
    373e:	movs	r2, #56	; 0x38
    3740:	movs	r1, #0
    3742:	mov	r0, r4
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    3744:	ldrb.w	r7, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3748:	bl	7f6c <memset>
    374c:	ldr	r3, [r6, #32]
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    374e:	ubfx	r7, r7, #6, #1
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3752:	add.w	sl, r8, #4294967295
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3756:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    3758:	movs	r3, #8
  m_dirPos = freePos;
    375a:	strb.w	r7, [r4, #44]	; 0x2c
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    375e:	uxtb.w	sl, sl
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3762:	strb.w	r3, [r4, #49]	; 0x31
  }
  void reset() {
    next = begin;
    ls = 0;
    3766:	movs	r7, #0
  m_dirPos = freePos;
    3768:	ldr	r3, [sp, #0]
    376a:	str	r3, [r4, #36]	; 0x24
    376c:	ldr	r3, [sp, #4]
    376e:	str	r3, [r4, #40]	; 0x28
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3770:	ldr	r3, [r5, #0]
    ls = 0;
    3772:	strh	r7, [r5, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3774:	str	r3, [r5, #4]
    3776:	uxtb.w	fp, r7
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    377a:	cmp	fp, r8
    377c:	bcs.n	381e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    377e:	movs	r2, #1
    3780:	mov	r1, fp
    3782:	mov	r0, r4
    3784:	bl	315a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3788:	mov	r6, r0
    378a:	cmp	r0, #0
    378c:	beq.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3790:	ldrsb.w	r2, [r0]
    3794:	cmp	r2, #0
    3796:	blt.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    379a:	movs	r2, #32
    379c:	movs	r1, #0
    379e:	bl	7f6c <memset>
    if (i == 0) {
    37a2:	cmp.w	fp, #0
    37a6:	bne.n	37e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e2>
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    37a8:	movs	r3, #133	; 0x85
    37aa:	strb	r3, [r6, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    37ac:	ldr	r3, [pc, #160]	; (3850 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    37ae:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    37b2:	strb.w	sl, [r6, #1]

      if (FsDateTime::callback) {
    37b6:	ldr	r3, [r3, #0]
    37b8:	cbz	r3, 37da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d6>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    37ba:	add.w	r2, sp, #11
    37be:	add.w	r1, sp, #14
    37c2:	add	r0, sp, #12
    37c4:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    37c6:	ldrh.w	r3, [sp, #12]
    37ca:	strh	r3, [r6, #10]
    37cc:	ldrh.w	r3, [sp, #14]
    37d0:	strh	r3, [r6, #8]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    37d2:	ldrb.w	r3, [sp, #11]
    37d6:	strb	r3, [r6, #20]
    37d8:	b.n	381a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
    37da:	movw	r3, #21537	; 0x5421
    37de:	strh	r3, [r6, #10]
    37e0:	strh	r3, [r6, #14]
    37e2:	strh	r3, [r6, #18]
    37e4:	b.n	381a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    37e6:	cmp.w	fp, #1
    37ea:	bne.n	3806 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x302>
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    37ec:	orn	r3, r9, #127	; 0x7f
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    37f0:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    37f2:	strb.w	fp, [r6, #1]
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    37f6:	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    37f8:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    37fc:	ldr	r3, [r5, #16]
    37fe:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    3800:	ldrh	r3, [r5, #20]
    3802:	strh	r3, [r6, #4]
    3804:	b.n	381a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3806:	movs	r3, #193	; 0xc1
    3808:	add.w	fp, r6, #30
    380c:	strb	r3, [r6, #0]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    380e:	ldrh	r2, [r5, #12]
    3810:	cbnz	r2, 3838 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>
    3812:	ldr	r1, [r5, #4]
    3814:	ldr	r2, [r5, #8]
    3816:	cmp	r1, r2
    3818:	bne.n	3838 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>
    381a:	adds	r7, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    381c:	b.n	3776 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x272>
        uint16_t u = fname->get16();
        setLe16(dirName->unicode + 2*k, u);
      }
    }
  }
  return sync();
    381e:	mov	r0, r4
    3820:	bl	4050 <ExFatFile::sync()>
    3824:	b.n	3848 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    3826:	cmp	r3, #0
    3828:	bne.w	3576 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    case O_RDONLY:
      modeFlags = FILE_FLAG_READ;
    382c:	movs	r3, #1
    382e:	b.n	3534 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30>
      break;
    case O_WRONLY:
      modeFlags = FILE_FLAG_WRITE;
    3830:	movs	r3, #2
    3832:	b.n	3534 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // !READ_ONLY
  return true;
    3834:	movs	r0, #1
    3836:	b.n	3848 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
        if (fname->atEnd()) {
          break;
        }
        uint16_t u = fname->get16();
    3838:	mov	r0, r5
    383a:	bl	2a44 <FsName::get16()>
    383e:	strh.w	r0, [r6, #2]!
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
    3842:	cmp	r6, fp
    3844:	bne.n	380e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
    3846:	b.n	381a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    3848:	add	sp, #52	; 0x34
    384a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    384e:	nop
    3850:	.word	0x20003548

00003854 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    3854:	push	{r4, r5, r6, r7, lr}
    3856:	mov	r7, r3
    3858:	sub	sp, #92	; 0x5c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    385a:	movs	r3, #0
    385c:	mov	r5, r0
    385e:	mov	r4, r1
    3860:	str	r2, [sp, #4]
    3862:	strb.w	r3, [sp, #81]	; 0x51
    3866:	strb.w	r3, [sp, #82]	; 0x52
    386a:	strb.w	r3, [sp, #83]	; 0x53
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    386e:	strh.w	r3, [sp, #20]
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3872:	ldrb.w	r3, [r0, #49]	; 0x31
    3876:	cbz	r3, 387c <ExFatFile::open(ExFatFile*, char const*, int)+0x28>
    close();
  }
  return openPrivate(dirFile, &fname, oflag);

 fail:
  return false;
    3878:	movs	r0, #0
    387a:	b.n	390c <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    387c:	ldrb.w	r3, [r1, #49]	; 0x31
    3880:	tst.w	r3, #80	; 0x50
    3884:	beq.n	3878 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3886:	ldrb	r3, [r2, #0]
    3888:	cmp	r3, #47	; 0x2f
    388a:	bne.n	38b2 <ExFatFile::open(ExFatFile*, char const*, int)+0x5e>
    while (isDirSeparator(*path)) {
    388c:	ldr	r3, [sp, #4]
    388e:	ldrb	r2, [r3, #0]
    3890:	cmp	r2, #47	; 0x2f
    3892:	bne.n	389a <ExFatFile::open(ExFatFile*, char const*, int)+0x46>
      path++;
    3894:	adds	r3, #1
    3896:	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3898:	b.n	388c <ExFatFile::open(ExFatFile*, char const*, int)+0x38>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    389a:	ldr	r1, [r4, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    389c:	cbnz	r2, 38a6 <ExFatFile::open(ExFatFile*, char const*, int)+0x52>
      return openRoot(dirFile->m_vol);
    389e:	mov	r0, r5
    38a0:	bl	31e6 <ExFatFile::openRoot(ExFatVolume*)>
    38a4:	b.n	390c <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    38a6:	add	r0, sp, #32
    38a8:	bl	31e6 <ExFatFile::openRoot(ExFatVolume*)>
    38ac:	cmp	r0, #0
    38ae:	beq.n	3878 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    38b0:	add	r4, sp, #32
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    38b2:	add	r3, sp, #4
    38b4:	add	r2, sp, #8
    38b6:	ldr	r1, [sp, #4]
    38b8:	mov	r0, r5
    38ba:	bl	320c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    38be:	cmp	r0, #0
    38c0:	beq.n	3878 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    38c2:	ldr	r3, [sp, #4]
    38c4:	ldrb	r3, [r3, #0]
    38c6:	cbz	r3, 3900 <ExFatFile::open(ExFatFile*, char const*, int)+0xac>
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    38c8:	movs	r3, #0
    38ca:	add	r2, sp, #8
    38cc:	mov	r1, r4
    38ce:	mov	r0, r5
    38d0:	bl	3504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    38d4:	cmp	r0, #0
    38d6:	beq.n	3878 <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    38d8:	add	r2, sp, #32
    38da:	mov	r3, r5
    38dc:	add.w	lr, r5, #48	; 0x30
    38e0:	mov	r4, r2
    38e2:	ldr	r0, [r3, #0]
    38e4:	adds	r3, #8
    38e6:	ldr.w	r1, [r3, #-4]
    38ea:	mov	r6, r2
    38ec:	cmp	r3, lr
    38ee:	stmia	r6!, {r0, r1}
    38f0:	mov	r2, r6
    38f2:	bne.n	38e2 <ExFatFile::open(ExFatFile*, char const*, int)+0x8e>
    38f4:	ldr	r0, [r3, #0]
    38f6:	str	r0, [r6, #0]
    dirFile = &tmpDir;
    close();
    38f8:	mov	r0, r5
    38fa:	bl	3192 <ExFatFile::close()>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    38fe:	b.n	38b2 <ExFatFile::open(ExFatFile*, char const*, int)+0x5e>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return openPrivate(dirFile, &fname, oflag);
    3900:	mov	r3, r7
    3902:	add	r2, sp, #8
    3904:	mov	r1, r4
    3906:	mov	r0, r5
    3908:	bl	3504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

 fail:
  return false;
}
    390c:	add	sp, #92	; 0x5c
    390e:	pop	{r4, r5, r6, r7, pc}

00003910 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const char* path, oflag_t oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3910:	cbz	r1, 391a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    3912:	add.w	r1, r1, #1096	; 0x448
    3916:	b.w	3854 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    391a:	mov	r0, r1
    391c:	bx	lr

0000391e <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    391e:	push	{r4, r5}
    3920:	mov	r3, r2
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    3922:	ldrb.w	r2, [r0, #49]	; 0x31
    3926:	cbnz	r2, 3946 <ExFatFile::openNext(ExFatFile*, int)+0x28>
    3928:	ldrb.w	r5, [r1, #49]	; 0x31
    392c:	tst.w	r5, #80	; 0x50
    3930:	beq.n	3946 <ExFatFile::openNext(ExFatFile*, int)+0x28>
    3932:	ldrd	r4, r5, [r1]
    3936:	movs	r5, #0
    3938:	and.w	r4, r4, #31
    393c:	orrs	r4, r5
    393e:	bne.n	3946 <ExFatFile::openNext(ExFatFile*, int)+0x28>
  }
  return openPrivate(dir, nullptr, oflag);

 fail:
  return false;
}
    3940:	pop	{r4, r5}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openPrivate(dir, nullptr, oflag);
    3942:	b.w	3504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

 fail:
  return false;
}
    3946:	movs	r0, #0
    3948:	pop	{r4, r5}
    394a:	bx	lr

0000394c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"

//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    394c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3950:	mov	r8, r0
    3952:	mov	sl, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3954:	mov	r9, r1
    3956:	cbz	r1, 395c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    3958:	subs	r4, r1, #2
    395a:	b.n	3960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x14>
    395c:	ldr.w	r4, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    3960:	ldr.w	r3, [r8, #1072]	; 0x430
    start = 0;
    3964:	cmp	r4, r3
    3966:	it	cs
    3968:	movcs	r4, #0
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    396a:	movs	r3, #1
    396c:	and.w	r7, r4, #7
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    3970:	ubfx	fp, r4, #3, #9
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    3974:	mov	r6, r4
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    3976:	mov	r5, r4
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    3978:	lsl.w	r7, r3, r7
    397c:	uxtb	r7, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    397e:	ldr.w	r1, [r8, #1068]	; 0x42c
    3982:	movs	r2, #0
    3984:	mov	r0, r8
    3986:	add.w	r1, r1, r5, lsr #12
    398a:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    398e:	cbz	r0, 39ee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
    3990:	mov	r3, r7
    3992:	mov	r1, fp
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    3994:	ldrb	r7, [r0, r1]
    3996:	tst	r7, r3
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    3998:	add.w	r5, r5, #1
        if (!(mask & cache[i])) {
    399c:	bne.n	39ba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
    399e:	subs	r2, r5, r6
    39a0:	cmp	r2, sl
    39a2:	bne.n	39bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
            if (cluster == 0 && count == 1) {
    39a4:	cmp.w	r9, #0
    39a8:	bne.n	39b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
    39aa:	cmp.w	sl, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    39ae:	it	eq
    39b0:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    39b4:	adds	r0, r6, #2
    39b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    39ba:	mov	r6, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    39bc:	cmp	r4, r5
    39be:	beq.n	39ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    39c0:	ldr.w	r2, [r8, #1072]	; 0x430
    39c4:	cmp	r5, r2
    39c6:	bcs.n	39d2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    39c8:	lsls	r3, r3, #1
    39ca:	ands.w	r3, r3, #255	; 0xff
    39ce:	bne.n	3996 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    39d0:	b.n	39da <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    39d2:	movs	r6, #0
          i = sectorSize;
    39d4:	mov.w	r1, #512	; 0x200
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    39d8:	mov	r5, r6
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    39da:	adds	r1, #1
    39dc:	movs	r3, #1
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    39de:	mov.w	fp, #0
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    39e2:	cmp.w	r1, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    39e6:	mov	r7, r3
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    39e8:	bcc.n	3994 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    39ea:	b.n	397e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x32>
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
    39ec:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    39ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000039f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    39f2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    39f6:	mov	r7, r2
  uint32_t sector;
  uint32_t start = cluster - 2;
    39f8:	subs	r2, r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    39fa:	mov	r6, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    39fc:	ldr.w	r0, [r0, #1072]	; 0x430
    3a00:	adds	r1, r2, r7
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    3a02:	mov	r8, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    3a04:	cmp	r1, r0
    3a06:	bhi.n	3a8a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
    3a08:	ldr.w	r3, [r6, #1056]	; 0x420
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    3a0c:	cmp.w	r8, #0
    3a10:	beq.n	3a26 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x34>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    3a12:	cmp	r2, r3
    3a14:	bhi.n	3a2e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    3a16:	cmp	r1, r3
    3a18:	bls.n	3a2e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    3a1a:	cmp	r1, r0
    3a1c:	it	cs
    3a1e:	movcs	r1, #0
    3a20:	str.w	r1, [r6, #1056]	; 0x420
    3a24:	b.n	3a2e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    3a26:	cmp	r2, r3
      m_bitmapStart = start;
    3a28:	it	cc
    3a2a:	strcc.w	r2, [r6, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    3a2e:	and.w	r5, r2, #7
    3a32:	movs	r3, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    3a34:	ldr.w	r1, [r6, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    3a38:	ubfx	r4, r2, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    3a3c:	lsl.w	r5, r3, r5
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    3a40:	add.w	r1, r1, r2, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    3a44:	uxtb	r5, r5
    3a46:	movs	r2, #1
    3a48:	mov	r0, r6
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    3a4a:	add.w	r9, r1, #1
    3a4e:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    3a52:	cbz	r0, 3a8a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
    3a54:	adds	r3, r0, r4
    3a56:	mov	r2, r5
    3a58:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    3a5c:	ldrb	r1, [r3, #0]
    3a5e:	tst	r1, r2
    3a60:	ite	ne
    3a62:	movne	r4, #1
    3a64:	moveq	r4, #0
    3a66:	cmp	r4, r8
    3a68:	beq.n	3a8a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    3a6a:	eors	r1, r2
        if (--count == 0) {
    3a6c:	subs	r7, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    3a6e:	strb	r1, [r3, #0]
        if (--count == 0) {
    3a70:	beq.n	3a90 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    3a72:	lsls	r2, r2, #1
    3a74:	ands.w	r2, r2, #255	; 0xff
    3a78:	bne.n	3a5c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
    3a7a:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    3a7c:	mov	r4, r2
    3a7e:	movs	r2, #1
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    3a80:	mov	r1, r9
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    3a82:	cmp	r0, r3
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
        }
      }
      mask = 1;
    3a84:	mov	r5, r2
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    3a86:	bne.n	3a5c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
    3a88:	b.n	3a46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    }
    i = 0;
  }

 fail:
  return false;
    3a8a:	movs	r0, #0
    3a8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    3a90:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    3a92:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    3a96:	push	{r3, r4, r5, lr}
    3a98:	mov	r5, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3a9a:	ldr.w	r1, [r0, #1080]	; 0x438
    3a9e:	add.w	r0, r0, #528	; 0x210
    3aa2:	ldr	r3, [r5, #4]
    3aa4:	ands	r1, r3
    3aa6:	ldr	r3, [r5, #0]
    3aa8:	subs	r4, r3, #2
    3aaa:	ldrb.w	r3, [r0, #565]	; 0x235
    3aae:	lsl.w	r3, r4, r3
    3ab2:	add.w	r3, r3, r1, lsr #9
    3ab6:	ldr.w	r1, [r0, #540]	; 0x21c
    3aba:	add	r1, r3
    3abc:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    3ac0:	cbz	r0, 3aca <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    3ac2:	ldr	r3, [r5, #4]
    3ac4:	ubfx	r3, r3, #0, #9
    3ac8:	add	r0, r3
}
    3aca:	pop	{r3, r4, r5, pc}

00003acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3acc:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    3ace:	ldr.w	r3, [r0, #1072]	; 0x430
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3ad2:	mov	r4, r1
    3ad4:	mov	r5, r2
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    3ad6:	adds	r3, #1
    3ad8:	cmp	r3, r1
    3ada:	bcs.n	3ae2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    3adc:	mov.w	r0, #4294967295
    3ae0:	pop	{r3, r4, r5, pc}
    3ae2:	ldr.w	r1, [r0, #1060]	; 0x424
    3ae6:	movs	r2, #0
    3ae8:	add.w	r0, r0, #528	; 0x210
    3aec:	add.w	r1, r1, r4, lsr #7
    3af0:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    3af4:	cmp	r0, #0
    3af6:	beq.n	3adc <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3af8:	lsls	r4, r4, #2
    3afa:	ubfx	r4, r4, #0, #9
    3afe:	ldr	r0, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  *value = next;
    3b00:	str	r0, [r5, #0]
  return next == EXFAT_EOC ? 0 : 1;
    3b02:	adds	r0, #1
    3b04:	it	ne
    3b06:	movne	r0, #1
}
    3b08:	pop	{r3, r4, r5, pc}

00003b0a <ExFatPartition::chainSize(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    3b0a:	push	{r0, r1, r4, r5, r6, lr}
    3b0c:	mov	r6, r0
    3b0e:	add	r5, sp, #8
  uint32_t n = 0;
    3b10:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    3b12:	str.w	r1, [r5, #-4]!
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    3b16:	mov	r2, r5
    3b18:	ldr	r1, [sp, #4]
    3b1a:	mov	r0, r6
    3b1c:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    3b20:	cmp	r0, #0
    3b22:	blt.n	3b2e <ExFatPartition::chainSize(unsigned long)+0x24>
    n++;
    3b24:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    3b28:	bne.n	3b16 <ExFatPartition::chainSize(unsigned long)+0xc>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    3b2a:	mov	r0, r4
    3b2c:	b.n	3b30 <ExFatPartition::chainSize(unsigned long)+0x26>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    3b2e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    3b30:	add	sp, #8
    3b32:	pop	{r4, r5, r6, pc}

00003b34 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    3b34:	push	{r4, r5, r6, lr}
    3b36:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    3b38:	ldr.w	r4, [r0, #1080]	; 0x438
    3b3c:	ldr	r1, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    3b3e:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    3b40:	ands	r4, r1
    3b42:	adds	r3, r4, r2
  pos->position += offset;
    3b44:	add	r2, r1
    3b46:	str	r2, [r5, #4]
  tmp >>= bytesPerClusterShift();
    3b48:	ldrb.w	r4, [r0, #1093]	; 0x445
    3b4c:	adds	r4, #9
    3b4e:	uxtb	r4, r4
    3b50:	lsr.w	r4, r3, r4
  while (tmp--) {
    3b54:	cbz	r4, 3b74 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x40>
    if (pos->isContiguous) {
    3b56:	ldrb	r3, [r5, #8]
    3b58:	cbz	r3, 3b64 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
      pos->cluster++;
    3b5a:	ldr	r3, [r5, #0]
    3b5c:	adds	r3, #1
    3b5e:	str	r3, [r5, #0]
    3b60:	subs	r4, #1
    3b62:	b.n	3b54 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x20>
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    3b64:	mov	r2, r5
    3b66:	ldr	r1, [r5, #0]
    3b68:	mov	r0, r6
    3b6a:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    3b6e:	cmp	r0, #1
    3b70:	beq.n	3b60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    3b72:	pop	{r4, r5, r6, pc}
        return status;
      }
    }
  }
  return 1;
    3b74:	movs	r0, #1
}
    3b76:	pop	{r4, r5, r6, pc}

00003b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3b78:	cmp	r1, #1
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  *value = next;
  return next == EXFAT_EOC ? 0 : 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3b7a:	push	{r3, r4, r5, lr}
    3b7c:	mov	r4, r1
    3b7e:	mov	r5, r2
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3b80:	bhi.n	3b86 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    3b82:	movs	r0, #0
    3b84:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3b86:	ldr.w	r3, [r0, #1072]	; 0x430
    3b8a:	adds	r3, #1
    3b8c:	cmp	r1, r3
    3b8e:	bhi.n	3b82 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
    3b90:	ldr.w	r1, [r0, #1060]	; 0x424
    3b94:	movs	r2, #1
    3b96:	add.w	r0, r0, #528	; 0x210
    3b9a:	add.w	r1, r1, r4, lsr #7
    3b9e:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    3ba2:	cmp	r0, #0
    3ba4:	beq.n	3b82 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3ba6:	lsls	r4, r4, #2
    3ba8:	ubfx	r4, r4, #0, #9
    3bac:	str	r5, [r0, r4]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    3bae:	movs	r0, #1

 fail:
  return false;
}
    3bb0:	pop	{r3, r4, r5, pc}

00003bb2 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    3bb2:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3bb6:	mov	r7, r0
    3bb8:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    3bba:	mov	r6, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    3bbc:	add	r2, sp, #4
    3bbe:	mov	r1, r4
    3bc0:	mov	r0, r7
    3bc2:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    3bc6:	subs.w	r8, r0, #0
    3bca:	bge.n	3bd0 <ExFatPartition::freeChain(unsigned long)+0x1e>
  } while (status);

  return true;

 fail:
  return false;
    3bcc:	movs	r5, #0
    3bce:	b.n	3c08 <ExFatPartition::freeChain(unsigned long)+0x56>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    3bd0:	movs	r2, #0
    3bd2:	mov	r1, r4
    3bd4:	mov	r0, r7
    3bd6:	bl	3b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3bda:	mov	r5, r0
    3bdc:	cmp	r0, #0
    3bde:	beq.n	3bcc <ExFatPartition::freeChain(unsigned long)+0x1a>
    3be0:	adds	r2, r4, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    3be2:	cmp.w	r8, #0
    3be6:	beq.n	3bee <ExFatPartition::freeChain(unsigned long)+0x3c>
    3be8:	ldr	r3, [sp, #4]
    3bea:	cmp	r2, r3
    3bec:	beq.n	3c00 <ExFatPartition::freeChain(unsigned long)+0x4e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3bee:	movs	r3, #0
    3bf0:	subs	r2, r2, r6
    3bf2:	mov	r1, r6
    3bf4:	mov	r0, r7
    3bf6:	bl	39f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3bfa:	cmp	r0, #0
    3bfc:	beq.n	3bcc <ExFatPartition::freeChain(unsigned long)+0x1a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    3bfe:	ldr	r6, [sp, #4]
    }
    cluster = next;
    3c00:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    3c02:	cmp.w	r8, #0
    3c06:	bne.n	3bbc <ExFatPartition::freeChain(unsigned long)+0xa>

  return true;

 fail:
  return false;
}
    3c08:	mov	r0, r5
    3c0a:	add	sp, #8
    3c0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003c10 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    3c10:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    3c14:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    3c16:	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    3c18:	ldr.w	r1, [r0, #1068]	; 0x42c
    3c1c:	add.w	r7, r0, #528	; 0x210
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    3c20:	mov	r5, r4
    3c22:	movs	r2, #0
    3c24:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    3c26:	add.w	r8, r1, #1
    3c2a:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    3c2e:	cbz	r0, 3c72 <ExFatPartition::freeClusterCount()+0x62>
    3c30:	add.w	lr, r0, #4294967295
    3c34:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    3c38:	ldrb.w	r1, [lr, #1]!
    3c3c:	cmp	r1, #255	; 0xff
    3c3e:	bne.n	3c44 <ExFatPartition::freeClusterCount()+0x34>
        usedCount+= 8;
    3c40:	adds	r4, #8
    3c42:	b.n	3c5a <ExFatPartition::freeClusterCount()+0x4a>
      } else if (cache[i]) {
    3c44:	cbz	r1, 3c5a <ExFatPartition::freeClusterCount()+0x4a>
    3c46:	movs	r2, #8
    3c48:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    3c4a:	tst	r1, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    3c4c:	mov.w	r3, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    3c50:	it	ne
    3c52:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    3c54:	subs	r2, #1
    3c56:	uxtb	r3, r3
    3c58:	bne.n	3c4a <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    3c5a:	adds	r5, #8
      if (nc >= m_clusterCount) {
    3c5c:	ldr.w	r0, [r6, #1072]	; 0x430
    3c60:	cmp	r5, r0
    3c62:	bcc.n	3c6a <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    3c64:	subs	r0, r0, r4
    3c66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    3c6a:	cmp	r5, ip
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    3c6c:	mov	r1, r8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    3c6e:	bne.n	3c38 <ExFatPartition::freeClusterCount()+0x28>
    3c70:	b.n	3c22 <ExFatPartition::freeClusterCount()+0x12>
      if (nc >= m_clusterCount) {
        return m_clusterCount - usedCount;
      }
    }
  }
}
    3c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00003c78 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    3c78:	push	{r4, r5, r6, r7, lr}
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    3c7a:	mov.w	r3, #4294967295
    3c7e:	mov	r4, r0
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
    3c80:	movs	r5, #0
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    3c82:	sub	sp, #28
    3c84:	mov	r0, r1
    3c86:	str	r3, [r4, #12]
    3c88:	mov	r1, r2
    3c8a:	str.w	r3, [r4, #540]	; 0x21c
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
    3c8e:	strb.w	r5, [r4, #1092]	; 0x444
  cacheInit(m_blockDev);


  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  cache = cacheClear(); // get buffer to use. 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
    3c92:	add	r3, sp, #20
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
  m_blockDev = dev;
    3c94:	str.w	r0, [r4, #1088]	; 0x440
  cacheInit(m_blockDev);


  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  cache = cacheClear(); // get buffer to use. 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
    3c98:	add.w	r2, r4, #544	; 0x220
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    3c9c:	str	r0, [r4, #4]
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    3c9e:	add.w	r7, r4, #528	; 0x210
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3ca2:	strb	r5, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    3ca4:	str.w	r0, [r4, #532]	; 0x214
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3ca8:	strb.w	r5, [r4, #528]	; 0x210
    3cac:	str	r5, [sp, #8]
    3cae:	str	r5, [sp, #4]
    3cb0:	str	r5, [sp, #0]
    3cb2:	bl	26cc <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    3cb6:	tst.w	r0, #251	; 0xfb
    3cba:	bne.n	3cc0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x48>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3cbc:	movs	r0, #0
    3cbe:	b.n	3d3a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc2>
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    DBG_FAIL_MACRO;
    goto fail;    
  }
  volStart = firstLBA;
    3cc0:	ldr	r6, [sp, #20]
    3cc2:	mov	r2, r5
    3cc4:	mov	r0, r7
    3cc6:	mov	r1, r6
    3cc8:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  }
  volStart = getLe32(mp->relativeSectors);
  #endif

  cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
  if (!cache) {
    3ccc:	mov	r5, r0
    3cce:	cmp	r0, #0
    3cd0:	beq.n	3cbc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3cd2:	ldr	r1, [pc, #108]	; (3d40 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc8>)
    3cd4:	movs	r2, #5
    3cd6:	adds	r0, #3
    3cd8:	bl	ac1c <strncmp>
    3cdc:	mov	r1, r0
    3cde:	cmp	r0, #0
    3ce0:	bne.n	3cbc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3ce2:	ldrb.w	r3, [r5, #108]	; 0x6c
    3ce6:	cmp	r3, #9
    3ce8:	bne.n	3cbc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3cea:	ldr	r3, [r5, #80]	; 0x50
    3cec:	add	r3, r6
    3cee:	str.w	r3, [r4, #1060]	; 0x424
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3cf2:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3cf4:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3cf8:	ldr	r3, [r5, #88]	; 0x58
    3cfa:	add	r6, r3
    3cfc:	str.w	r6, [r4, #1068]	; 0x42c
    3d00:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3d02:	str.w	r3, [r4, #1072]	; 0x430
    3d06:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3d08:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3d0c:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3d10:	movs	r5, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    3d12:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3d16:	mov	r0, r4
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3d18:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3d1c:	adds	r3, #9
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    3d1e:	mov	r2, r5
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3d20:	lsl.w	r3, r5, r3
    3d24:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3d28:	subs	r3, #1
    3d2a:	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    3d2e:	bl	394c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3d32:	movs	r3, #64	; 0x40
  return true;
    3d34:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    3d36:	strb.w	r3, [r4, #1092]	; 0x444
  return true;

 fail:
  return false;
}
    3d3a:	add	sp, #28
    3d3c:	pop	{r4, r5, r6, r7, pc}
    3d3e:	nop
    3d40:	.word	0x20001342

00003d44 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3d44:	push	{r4, lr}
    3d46:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3d48:	ldr.w	r1, [r0, #1076]	; 0x434
    3d4c:	bl	3b0a <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    3d50:	ldrb.w	r3, [r4, #1093]	; 0x445
    3d54:	adds	r3, #9
    3d56:	uxtb	r3, r3
}
    3d58:	lsls	r0, r3
    3d5a:	pop	{r4, pc}

00003d5c <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    3d5c:	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    3d5e:	add.w	r4, r0, #1096	; 0x448
    3d62:	sub	sp, #56	; 0x38
    3d64:	movs	r3, #0
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3d66:	mov	r2, r1
    3d68:	mov	r0, sp
    3d6a:	mov	r1, r4
    3d6c:	strb.w	r3, [sp, #49]	; 0x31
    3d70:	strb.w	r3, [sp, #50]	; 0x32
    3d74:	strb.w	r3, [sp, #51]	; 0x33
    3d78:	bl	3854 <ExFatFile::open(ExFatFile*, char const*, int)>
    3d7c:	mov	r5, r0
    3d7e:	cbz	r0, 3dac <ExFatVolume::chdir(char const*)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    3d80:	ldrb.w	r3, [sp, #49]	; 0x31
    3d84:	ands.w	r3, r3, #80	; 0x50
    3d88:	beq.n	3daa <ExFatVolume::chdir(char const*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    3d8a:	mov	r2, sp
    3d8c:	mov	r3, r4
    3d8e:	add	r6, sp, #48	; 0x30
    3d90:	mov	r4, r2
    3d92:	adds	r3, #8
    3d94:	ldmia	r4!, {r0, r1}
    3d96:	cmp	r4, r6
    3d98:	str.w	r0, [r3, #-8]
    3d9c:	str.w	r1, [r3, #-4]
    3da0:	mov	r2, r4
    3da2:	bne.n	3d90 <ExFatVolume::chdir(char const*)+0x34>
    3da4:	ldr	r0, [r4, #0]
    3da6:	str	r0, [r3, #0]
  return true;
    3da8:	b.n	3dac <ExFatVolume::chdir(char const*)+0x50>

 fail:
  return false;
    3daa:	mov	r5, r3
}
    3dac:	mov	r0, r5
    3dae:	add	sp, #56	; 0x38
    3db0:	pop	{r4, r5, r6, pc}

00003db2 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    3db2:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3db4:	movs	r3, #0
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    3db6:	ldrb	r4, [r0, #0]
    3db8:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3dba:	cmp	r3, #1
    3dbc:	orr.w	r1, r2, r1, lsr #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    3dc0:	ldrb	r2, [r0, r3]
    3dc2:	uxtah	r1, r2, r1
    3dc6:	uxth	r1, r1
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    3dc8:	bne.n	3dd4 <exFatDirChecksum(unsigned char const*, unsigned short)+0x22>
    3dca:	cmp	r4, #133	; 0x85
    3dcc:	ite	ne
    3dce:	movne	r2, #1
    3dd0:	moveq	r2, #3
    3dd2:	b.n	3dd6 <exFatDirChecksum(unsigned char const*, unsigned short)+0x24>
    3dd4:	movs	r2, #1
    3dd6:	add	r3, r2
    3dd8:	cmp	r3, #31
    3dda:	bls.n	3db8 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
    3ddc:	mov	r0, r1
    3dde:	pop	{r4, pc}

00003de0 <ExFatPartition::cacheSync()>:
#if USE_EXFAT_BITMAP_CACHE
    m_bitmapCache.init(dev);
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
    3de0:	push	{r4, lr}
    3de2:	mov	r4, r0
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3de4:	bl	2906 <FsCache::sync()>
    3de8:	cbz	r0, 3e02 <ExFatPartition::cacheSync()+0x22>
    3dea:	add.w	r0, r4, #528	; 0x210
    3dee:	bl	2906 <FsCache::sync()>
    3df2:	cbz	r0, 3e02 <ExFatPartition::cacheSync()+0x22>
    3df4:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3df8:	ldr	r3, [r0, #0]
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
    3dfa:	ldmia.w	sp!, {r4, lr}
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3dfe:	ldr	r3, [r3, #28]
    3e00:	bx	r3
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
    3e02:	movs	r0, #0
    3e04:	pop	{r4, pc}

00003e06 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    3e06:	push	{r3, r4, r5, r6, r7, lr}
    3e08:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    3e0a:	ldr	r0, [r0, #32]
    3e0c:	ldr	r1, [r4, #24]
    3e0e:	cbz	r1, 3e12 <ExFatFile::addCluster()+0xc>
    3e10:	adds	r1, #1
    3e12:	movs	r2, #1
    3e14:	bl	394c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    3e18:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    3e1a:	mov	r5, r0
  if (find < 2) {
    3e1c:	bhi.n	3e22 <ExFatFile::addCluster()+0x1c>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    3e1e:	movs	r6, #0
    3e20:	b.n	3e94 <ExFatFile::addCluster()+0x8e>
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    3e22:	movs	r3, #1
    3e24:	mov	r1, r0
    3e26:	ldr	r0, [r4, #32]
    3e28:	mov	r2, r3
    3e2a:	bl	39f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3e2e:	mov	r6, r0
    3e30:	cmp	r0, #0
    3e32:	beq.n	3e1e <ExFatFile::addCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    3e34:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3e36:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    3e3a:	cbnz	r2, 3e46 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3e3c:	orr.w	r3, r3, #64	; 0x40
    3e40:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    3e44:	b.n	3e92 <ExFatFile::addCluster()+0x8c>
  }
  if (isContiguous()) {
    3e46:	lsls	r1, r3, #25
    3e48:	bpl.n	3e72 <ExFatFile::addCluster()+0x6c>
    if (find == (m_curCluster + 1)) {
    3e4a:	adds	r2, #1
    3e4c:	cmp	r5, r2
    3e4e:	beq.n	3e92 <ExFatFile::addCluster()+0x8c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3e50:	bic.w	r3, r3, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3e54:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3e56:	strb.w	r3, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3e5a:	ldr	r3, [r4, #24]
    3e5c:	cmp	r1, r3
    3e5e:	bcs.n	3e72 <ExFatFile::addCluster()+0x6c>
      if (!m_vol->fatPut(c, c + 1)) {
    3e60:	adds	r7, r1, #1
    3e62:	ldr	r0, [r4, #32]
    3e64:	mov	r2, r7
    3e66:	bl	3b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3e6a:	cmp	r0, #0
    3e6c:	beq.n	3e1e <ExFatFile::addCluster()+0x18>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    3e6e:	mov	r1, r7
    3e70:	b.n	3e5a <ExFatFile::addCluster()+0x54>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    3e72:	mov.w	r2, #4294967295
    3e76:	mov	r1, r5
    3e78:	ldr	r0, [r4, #32]
    3e7a:	bl	3b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3e7e:	cmp	r0, #0
    3e80:	beq.n	3e1e <ExFatFile::addCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    3e82:	ldr	r1, [r4, #24]
    3e84:	cbz	r1, 3e92 <ExFatFile::addCluster()+0x8c>
    if (!m_vol->fatPut(m_curCluster, find)) {
    3e86:	mov	r2, r5
    3e88:	ldr	r0, [r4, #32]
    3e8a:	bl	3b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3e8e:	cmp	r0, #0
    3e90:	beq.n	3e1e <ExFatFile::addCluster()+0x18>
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    3e92:	str	r5, [r4, #24]
  return true;

 fail:
  return false;
}
    3e94:	mov	r0, r6
    3e96:	pop	{r3, r4, r5, r6, r7, pc}

00003e98 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    3e98:	push	{r4, r5, r6, lr}
    3e9a:	ldrb.w	r3, [r0, #51]	; 0x33
    3e9e:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    3ea0:	lsls	r2, r3, #30
    3ea2:	bmi.n	3ea8 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    3ea4:	movs	r0, #0
    3ea6:	pop	{r4, r5, r6, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    3ea8:	ldr	r5, [r0, #28]
    3eaa:	cbnz	r5, 3eb0 <ExFatFile::remove()+0x18>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    3eac:	movs	r5, #0
    3eae:	b.n	3f02 <ExFatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    3eb0:	lsls	r3, r3, #25
    3eb2:	bpl.n	3ede <ExFatFile::remove()+0x46>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3eb4:	ldr	r6, [r0, #32]
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    3eb6:	ldrd	r0, r1, [r0, #8]
    3eba:	ldrb.w	r2, [r6, #1093]	; 0x445
    3ebe:	adds.w	r0, r0, #4294967295
    3ec2:	add.w	r2, r2, #9
    3ec6:	adc.w	r1, r1, #4294967295
    3eca:	uxtb	r2, r2
    3ecc:	bl	9b08 <__aeabi_llsr>
    3ed0:	movs	r3, #0
    3ed2:	adds	r2, r0, #1
    3ed4:	mov	r1, r5
    3ed6:	mov	r0, r6
    3ed8:	bl	39f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3edc:	b.n	3ee6 <ExFatFile::remove()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    3ede:	mov	r1, r5
    3ee0:	ldr	r0, [r0, #32]
    3ee2:	bl	3bb2 <ExFatPartition::freeChain(unsigned long)>
    3ee6:	cmp	r0, #0
    3ee8:	bne.n	3eac <ExFatFile::remove()+0x14>
    3eea:	b.n	3ea4 <ExFatFile::remove()+0xc>
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    3eec:	movs	r2, #1
    3eee:	mov	r0, r4
    3ef0:	bl	315a <ExFatFile::dirCache(unsigned char, unsigned char)>
    3ef4:	adds	r5, #1
    if (!cache) {
    3ef6:	cmp	r0, #0
    3ef8:	beq.n	3ea4 <ExFatFile::remove()+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    3efa:	ldrb	r3, [r0, #0]
    3efc:	and.w	r3, r3, #127	; 0x7f
    3f00:	strb	r3, [r0, #0]
    3f02:	uxtb	r1, r5
        goto fail;
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    3f04:	ldrb.w	r3, [r4, #48]	; 0x30
    3f08:	cmp	r3, r1
    3f0a:	bcs.n	3eec <ExFatFile::remove()+0x54>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    3f0c:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    3f0e:	ldr	r0, [r4, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    3f10:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3f14:	strb.w	r3, [r4, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    3f18:	bl	3de0 <ExFatPartition::cacheSync()>

 fail:
  return false;
}
    3f1c:	pop	{r4, r5, r6, pc}

00003f1e <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    3f1e:	push	{r4, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    3f20:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    3f24:	sub	sp, #32
    3f26:	mov	r4, r0
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    3f28:	lsls	r1, r3, #27
    3f2a:	bmi.n	3f30 <ExFatFile::rmdir()+0x12>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    3f2c:	movs	r0, #0
    3f2e:	b.n	3f6c <ExFatFile::rmdir()+0x4e>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    3f30:	movs	r2, #0
    3f32:	movs	r3, #0
    3f34:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    3f38:	movs	r2, #32
    3f3a:	mov	r1, sp
    3f3c:	mov	r0, r4
    3f3e:	bl	3288 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f42:	cbz	r0, 3f54 <ExFatFile::rmdir()+0x36>
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    3f44:	cmp	r0, #32
    3f46:	bne.n	3f2c <ExFatFile::rmdir()+0xe>
    3f48:	ldrb.w	r3, [sp]
    3f4c:	lsls	r2, r3, #24
    3f4e:	bmi.n	3f2c <ExFatFile::rmdir()+0xe>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    3f50:	cmp	r3, #0
    3f52:	bne.n	3f38 <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    3f54:	movs	r3, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    3f56:	mov	r0, r4
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    3f58:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    3f5c:	ldrb.w	r3, [r4, #51]	; 0x33
    3f60:	orr.w	r3, r3, #2
    3f64:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    3f68:	bl	3e98 <ExFatFile::remove()>

 fail:
  return false;
}
    3f6c:	add	sp, #32
    3f6e:	pop	{r4, pc}

00003f70 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    3f70:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3f74:	movs	r6, #0
    3f76:	mov	r5, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    3f78:	ldr.w	r8, [pc, #208]	; 404c <ExFatFile::syncDir()+0xdc>
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    3f7c:	mov	r7, r6
    3f7e:	uxtb	r1, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    3f80:	ldrb.w	r3, [r5, #48]	; 0x30
    3f84:	cmp	r3, r1
    3f86:	bcc.n	401e <ExFatFile::syncDir()+0xae>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    3f88:	movs	r2, #0
    3f8a:	mov	r0, r5
    3f8c:	bl	315a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    3f90:	mov	r4, r0
    3f92:	cmp	r0, #0
    3f94:	beq.n	4036 <ExFatFile::syncDir()+0xc6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    3f96:	ldrb	r3, [r0, #0]
    3f98:	cmp	r3, #192	; 0xc0
    3f9a:	beq.n	3fd8 <ExFatFile::syncDir()+0x68>
    3f9c:	cmp	r3, #193	; 0xc1
    3f9e:	beq.n	4010 <ExFatFile::syncDir()+0xa0>
    3fa0:	cmp	r3, #133	; 0x85
    3fa2:	bne.n	4036 <ExFatFile::syncDir()+0xc6>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3fa4:	ldrb.w	r3, [r5, #49]	; 0x31
    3fa8:	and.w	r3, r3, #55	; 0x37
    3fac:	strh	r3, [r0, #4]
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    3fae:	ldr.w	r3, [r8]
    3fb2:	cbz	r3, 4002 <ExFatFile::syncDir()+0x92>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    3fb4:	add.w	r2, sp, #3
    3fb8:	add.w	r1, sp, #6
    3fbc:	add	r0, sp, #4
    3fbe:	blx	r3
          df->modifyTimeMs = ms10;
    3fc0:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    3fc4:	ldrh.w	r2, [sp, #6]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    3fc8:	strb	r3, [r4, #21]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    3fca:	ldrh.w	r3, [sp, #4]
    3fce:	strh	r2, [r4, #12]
    3fd0:	strh	r3, [r4, #14]
    3fd2:	strh	r2, [r4, #16]
    3fd4:	strh	r3, [r4, #18]
    3fd6:	b.n	4002 <ExFatFile::syncDir()+0x92>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    3fd8:	ldrb.w	r3, [r5, #51]	; 0x33
    3fdc:	tst.w	r3, #64	; 0x40
    3fe0:	ldrb	r3, [r0, #1]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    3fe2:	ite	ne
    3fe4:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    3fe8:	biceq.w	r3, r3, #2
    3fec:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    3fee:	ldrd	r2, r3, [r5, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3ff2:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    3ff6:	ldr	r3, [r5, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3ff8:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    3ffa:	ldrd	r2, r3, [r5, #8]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3ffe:	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    4002:	ldr	r2, [r5, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4004:	ldrb.w	r3, [r2, #528]	; 0x210
    4008:	orr.w	r3, r3, #1
    400c:	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    4010:	mov	r1, r7
    4012:	mov	r0, r4
    4014:	bl	3db2 <exFatDirChecksum(unsigned char const*, unsigned short)>
    4018:	adds	r6, #1
    401a:	mov	r7, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    401c:	b.n	3f7e <ExFatFile::syncDir()+0xe>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    401e:	movs	r2, #1
    4020:	add.w	r1, r5, #36	; 0x24
    4024:	ldr	r0, [r5, #32]
    4026:	bl	3a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    402a:	cbz	r0, 4036 <ExFatFile::syncDir()+0xc6>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    402c:	strh	r7, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    402e:	ldr	r0, [r5, #32]
    4030:	bl	3de0 <ExFatPartition::cacheSync()>
    4034:	cbnz	r0, 4044 <ExFatFile::syncDir()+0xd4>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4036:	ldrb.w	r3, [r5, #50]	; 0x32
  return false;
    403a:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    403c:	orr.w	r3, r3, #1
    4040:	strb.w	r3, [r5, #50]	; 0x32
  return false;
}
    4044:	add	sp, #8
    4046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    404a:	nop
    404c:	.word	0x20003548

00004050 <ExFatFile::sync()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    4050:	push	{r4, lr}
  if (!isOpen()) {
    4052:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    4056:	mov	r4, r0
  if (!isOpen()) {
    4058:	cbnz	r3, 405e <ExFatFile::sync()+0xe>
    return true;
    405a:	movs	r0, #1
    405c:	pop	{r4, pc}
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    405e:	ldrb.w	r3, [r0, #51]	; 0x33
    4062:	lsls	r2, r3, #24
    4064:	bpl.n	4076 <ExFatFile::sync()+0x26>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4066:	and.w	r3, r3, #127	; 0x7f
    406a:	strb.w	r3, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    406e:	ldmia.w	sp!, {r4, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4072:	b.w	3f70 <ExFatFile::syncDir()>
  }
  if (!m_vol->cacheSync()) {
    4076:	ldr	r0, [r0, #32]
    4078:	bl	3de0 <ExFatPartition::cacheSync()>
    407c:	cmp	r0, #0
    407e:	bne.n	405a <ExFatFile::sync()+0xa>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4080:	ldrb.w	r3, [r4, #50]	; 0x32
    4084:	orr.w	r3, r3, #1
    4088:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    408c:	pop	{r4, pc}

0000408e <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    408e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4092:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4096:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4098:	lsls	r0, r3, #25
    409a:	bpl.n	40a4 <ExFatFile::addDirCluster()+0x16>
    409c:	ldr	r0, [r4, #32]
    409e:	bl	3d44 <ExFatPartition::rootLength()>
    40a2:	b.n	40a6 <ExFatFile::addDirCluster()+0x18>
    40a4:	ldr	r0, [r4, #8]
    40a6:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    40a8:	ldr.w	r3, [r3, #1084]	; 0x43c
    40ac:	add	r0, r3
    40ae:	cmp.w	r0, #67108864	; 0x4000000
    40b2:	bcs.n	4166 <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    40b4:	mov	r0, r4
    40b6:	bl	3e06 <ExFatFile::addCluster()>
    40ba:	cmp	r0, #0
    40bc:	beq.n	4166 <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    40be:	ldr	r5, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    40c0:	ldrb.w	r3, [r5, #528]	; 0x210
    40c4:	lsls	r1, r3, #31
    40c6:	bpl.n	40d4 <ExFatFile::addDirCluster()+0x46>
    40c8:	add.w	r0, r5, #528	; 0x210
    40cc:	bl	2906 <FsCache::sync()>
    40d0:	cmp	r0, #0
    40d2:	beq.n	4166 <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    40d4:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    40d8:	movs	r6, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    40da:	add.w	r5, r5, #544	; 0x220
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    40de:	mov.w	r2, #512	; 0x200
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    40e2:	str.w	r3, [r5, #-4]
    40e6:	mov	r1, r6
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    40e8:	strb.w	r6, [r5, #-16]
    40ec:	mov	r0, r5
    40ee:	bl	7f6c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    40f2:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    40f4:	ldr	r3, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    40f6:	mov.w	r8, #1
    40fa:	ldrb.w	r1, [r2, #1093]	; 0x445
    40fe:	subs	r3, #2
    4100:	ldr.w	r7, [r2, #1068]	; 0x42c
    4104:	lsls	r3, r1
    4106:	add	r7, r3
    4108:	ldr	r3, [r4, #32]
    410a:	ldrb.w	r2, [r3, #1093]	; 0x445
    410e:	lsl.w	r2, r8, r2
    4112:	cmp	r2, r6
    4114:	bls.n	412a <ExFatFile::addDirCluster()+0x9c>
    4116:	ldr.w	r0, [r3, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    411a:	mov	r2, r5
    411c:	adds	r1, r7, r6
    411e:	ldr	r3, [r0, #0]
    4120:	ldr	r3, [r3, #32]
    4122:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    4124:	cbz	r0, 4166 <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4126:	adds	r6, #1
    4128:	b.n	4108 <ExFatFile::addDirCluster()+0x7a>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    412a:	ldrb.w	r2, [r4, #49]	; 0x31
    412e:	lsls	r2, r2, #25
    4130:	bmi.n	415c <ExFatFile::addDirCluster()+0xce>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4132:	ldrb.w	r2, [r4, #51]	; 0x33
    4136:	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    413a:	ldrd	r0, r1, [r4, #8]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    413e:	strb.w	r2, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4142:	ldr.w	r2, [r3, #1084]	; 0x43c
    4146:	movs	r3, #0
    4148:	adds	r0, r0, r2
    414a:	adcs	r1, r3
    414c:	strd	r0, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4150:	ldrd	r0, r1, [r4, #16]
    4154:	adds	r2, r2, r0
    4156:	adcs	r3, r1
    4158:	strd	r2, r3, [r4, #16]
  }
  return sync();
    415c:	mov	r0, r4

 fail:
  return false;
}
    415e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4162:	b.w	4050 <ExFatFile::sync()>

 fail:
  return false;
}
    4166:	movs	r0, #0
    4168:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000416c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    416c:	push	{r4, lr}
  if (!parent->isDir()) {
    416e:	ldrb.w	r3, [r1, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4172:	mov	r4, r0
  if (!parent->isDir()) {
    4174:	tst.w	r3, #80	; 0x50
    4178:	beq.n	41b0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    417a:	movw	r3, #2562	; 0xa02
    417e:	bl	3504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4182:	cbz	r0, 41b0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    4184:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4186:	mov	r0, r4
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    4188:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    418c:	bl	408e <ExFatFile::addDirCluster()>
    4190:	cbz	r0, 41b0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4192:	ldr	r3, [r4, #24]
    4194:	mov	r0, r4
    4196:	movs	r2, #0
    4198:	str	r3, [r4, #28]
    419a:	movs	r3, #0
    419c:	bl	3436 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    41a0:	movs	r3, #193	; 0xc1
  return sync();
    41a2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    41a4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    41a8:	ldmia.w	sp!, {r4, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    41ac:	b.w	4050 <ExFatFile::sync()>

 fail:
  return false;
}
    41b0:	movs	r0, #0
    41b2:	pop	{r4, pc}

000041b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    41b4:	push	{r4, r5, r6, r7, lr}
    41b6:	mov	r7, r3
    41b8:	sub	sp, #92	; 0x5c
    41ba:	movs	r3, #0
    41bc:	mov	r5, r0
    41be:	mov	r4, r1
    41c0:	str	r2, [sp, #4]
    41c2:	strh.w	r3, [sp, #20]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    41c6:	strb.w	r3, [sp, #81]	; 0x51
    41ca:	strb.w	r3, [sp, #82]	; 0x52
    41ce:	strb.w	r3, [sp, #83]	; 0x53
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    41d2:	ldrb.w	r3, [r0, #49]	; 0x31
    41d6:	cmp	r3, #0
    41d8:	bne.n	426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    41da:	ldrb.w	r3, [r1, #49]	; 0x31
    41de:	tst.w	r3, #80	; 0x50
    41e2:	beq.n	426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    41e4:	ldrb	r3, [r2, #0]
    41e6:	cmp	r3, #47	; 0x2f
    41e8:	bne.n	4206 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x52>
    while (isDirSeparator(*path)) {
    41ea:	ldr	r3, [sp, #4]
    41ec:	ldrb	r2, [r3, #0]
    41ee:	cmp	r2, #47	; 0x2f
    41f0:	bne.n	41f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x44>
      path++;
    41f2:	adds	r3, #1
    41f4:	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    41f6:	b.n	41ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    41f8:	ldr	r1, [r4, #32]
    41fa:	add	r0, sp, #32
    41fc:	bl	31e6 <ExFatFile::openRoot(ExFatVolume*)>
    4200:	cmp	r0, #0
    4202:	beq.n	426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    4204:	add	r4, sp, #32
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4206:	add	r3, sp, #4
    4208:	add	r2, sp, #8
    420a:	ldr	r1, [sp, #4]
    420c:	mov	r0, r5
    420e:	bl	320c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4212:	cbz	r0, 426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4214:	ldr	r3, [sp, #4]
    4216:	ldrb	r3, [r3, #0]
    4218:	cbz	r3, 4262 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xae>
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    421a:	movs	r3, #0
    421c:	add	r2, sp, #8
    421e:	mov	r1, r4
    4220:	mov	r0, r5
    4222:	bl	3504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4226:	cbz	r0, 4250 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4228:	add	r2, sp, #32
    422a:	mov	r3, r5
    422c:	add.w	lr, r5, #48	; 0x30
    4230:	mov	r4, r2
    4232:	ldr	r0, [r3, #0]
    4234:	adds	r3, #8
    4236:	ldr.w	r1, [r3, #-4]
    423a:	mov	r6, r2
    423c:	cmp	r3, lr
    423e:	stmia	r6!, {r0, r1}
    4240:	mov	r2, r6
    4242:	bne.n	4232 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
    4244:	ldr	r0, [r3, #0]
    4246:	str	r0, [r6, #0]
    parent = &tmpDir;
    close();
    4248:	mov	r0, r5
    424a:	bl	3192 <ExFatFile::close()>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    424e:	b.n	4206 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x52>
    }
    if (!*path) {
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    4250:	cbz	r7, 426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    4252:	add	r2, sp, #8
    4254:	mov	r1, r4
    4256:	mov	r0, r5
    4258:	bl	416c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    425c:	cmp	r0, #0
    425e:	bne.n	4228 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
    4260:	b.n	426e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4262:	add	r2, sp, #8
    4264:	mov	r1, r4
    4266:	mov	r0, r5
    4268:	bl	416c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    426c:	b.n	4270 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xbc>

 fail:
  return false;
    426e:	movs	r0, #0
}
    4270:	add	sp, #92	; 0x5c
    4272:	pop	{r4, r5, r6, r7, pc}

00004274 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4274:	push	{r4, r5, r6, r7, lr}
    4276:	movs	r3, #0
    4278:	sub	sp, #116	; 0x74
    427a:	mov	r4, r0
    427c:	strb.w	r3, [sp, #49]	; 0x31
    4280:	strb.w	r3, [sp, #50]	; 0x32
    4284:	strb.w	r3, [sp, #51]	; 0x33
    4288:	strb.w	r3, [sp, #105]	; 0x69
    428c:	strb.w	r3, [sp, #106]	; 0x6a
    4290:	strb.w	r3, [sp, #107]	; 0x6b
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4294:	ldrb.w	r3, [r0, #49]	; 0x31
    4298:	tst.w	r3, #24
    429c:	bne.n	42a2 <ExFatFile::rename(ExFatFile*, char const*)+0x2e>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    429e:	movs	r0, #0
    42a0:	b.n	4318 <ExFatFile::rename(ExFatFile*, char const*)+0xa4>
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    42a2:	ldr	r0, [r0, #32]
    42a4:	ldr	r3, [r1, #32]
    42a6:	cmp	r0, r3
    42a8:	bne.n	429e <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    42aa:	movw	r3, #2561	; 0xa01
    42ae:	mov	r0, sp
    42b0:	bl	3854 <ExFatFile::open(ExFatFile*, char const*, int)>
    42b4:	cmp	r0, #0
    42b6:	beq.n	429e <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    42b8:	add	r2, sp, #56	; 0x38
    42ba:	mov	r3, r4
    42bc:	add.w	r7, r4, #48	; 0x30
    42c0:	mov	r6, r2
    42c2:	ldr	r0, [r3, #0]
    42c4:	adds	r3, #8
    42c6:	ldr.w	r1, [r3, #-4]
    42ca:	mov	r5, r2
    42cc:	cmp	r3, r7
    42ce:	stmia	r5!, {r0, r1}
    42d0:	mov	r2, r5
    42d2:	bne.n	42c2 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    42d4:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    42d6:	add	r2, sp, #36	; 0x24
    42d8:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    42dc:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    42de:	ldmia	r2, {r0, r1, r2}
    42e0:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    42e4:	ldrb.w	r3, [sp, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    42e8:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    42ea:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    42ee:	ldrb.w	r3, [r4, #51]	; 0x33
    42f2:	orn	r3, r3, #127	; 0x7f
    42f6:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    42fa:	bl	4050 <ExFatFile::sync()>
    42fe:	cmp	r0, #0
    4300:	beq.n	429e <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4302:	movs	r3, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();
    4304:	mov	r0, r6
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4306:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4308:	movs	r3, #2
    430a:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    430e:	movs	r3, #8
    4310:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4314:	bl	3e98 <ExFatFile::remove()>

 fail:
  return false;
}
    4318:	add	sp, #116	; 0x74
    431a:	pop	{r4, r5, r6, r7, pc}

0000431c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    431c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4320:	mov	r4, r3
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4322:	ldrb.w	r3, [r0, #49]	; 0x31
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4326:	mov	r6, r0
    4328:	mov	r8, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    432a:	lsls	r3, r3, #28
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    432c:	ldrb.w	fp, [sp, #40]	; 0x28
    4330:	ldrb.w	sl, [sp, #44]	; 0x2c
    4334:	ldrb.w	r5, [sp, #48]	; 0x30
    4338:	ldrb.w	r9, [sp, #52]	; 0x34
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    433c:	bpl.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile()
      || year < 1980
    433e:	subw	r2, r2, #1980	; 0x7bc
    4342:	uxth	r7, r2
    4344:	cmp	r7, #127	; 0x7f
    4346:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || year > 2107
      || month < 1
    4348:	subs	r3, r4, #1
    434a:	cmp	r3, #11
    434c:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || month > 12
      || day < 1
    434e:	add.w	r3, fp, #4294967295
    4352:	cmp	r3, #30
    4354:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || day > 31
      || hour > 23
    4356:	cmp.w	sl, #23
    435a:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || minute > 59
    435c:	cmp	r5, #59	; 0x3b
    435e:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || second > 59) {
    4360:	cmp.w	r9, #59	; 0x3b
    4364:	bhi.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4366:	bl	4050 <ExFatFile::sync()>
    436a:	cbz	r0, 43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    436c:	mov.w	r3, r9, asr #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4370:	tst.w	r9, #1
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4374:	orr.w	r4, fp, r4, lsl #5
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4378:	orr.w	r5, r3, r5, lsl #5
    437c:	it	eq
    437e:	moveq.w	r9, #0
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4382:	orr.w	r4, r4, r7, lsl #9
    4386:	mov.w	r7, #0
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    438a:	orr.w	r5, r5, sl, lsl #11
    438e:	it	ne
    4390:	movne.w	r9, #100	; 0x64
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4394:	uxth	r4, r4
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
  DirFile_t* df;
  uint8_t* cache;
  uint16_t checksum = 0;
    4396:	mov	fp, r7
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4398:	uxth	r5, r5
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    439a:	and.w	sl, r8, #1
    439e:	uxtb	r1, r7

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    43a0:	ldrb.w	r3, [r6, #48]	; 0x30
    43a4:	cmp	r3, r1
    43a6:	bcc.n	4412 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf6>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    43a8:	movs	r2, #0
    43aa:	mov	r0, r6
    43ac:	bl	315a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    43b0:	cbnz	r0, 43b8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>
    goto fail;
  }
  return true;

 fail:
  return false;
    43b2:	movs	r0, #0
    43b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    43b8:	ldrb	r3, [r0, #0]
    43ba:	cmp	r3, #133	; 0x85
    43bc:	beq.n	43c8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xac>
    43be:	bcc.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    43c0:	subs	r3, #192	; 0xc0
    43c2:	cmp	r3, #1
    43c4:	bls.n	4406 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xea>
    43c6:	b.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    43c8:	ldrb.w	r3, [r6, #49]	; 0x31
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
    43cc:	ldr	r2, [r6, #32]
    43ce:	and.w	r3, r3, #55	; 0x37
    43d2:	strh	r3, [r0, #4]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    43d4:	ldrb.w	r3, [r2, #528]	; 0x210
    43d8:	orr.w	r3, r3, #1
    43dc:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    43e0:	cmp.w	sl, #0
    43e4:	beq.n	43ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xce>
    43e6:	strh	r5, [r0, #16]
    43e8:	strh	r4, [r0, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
    43ea:	tst.w	r8, #2
          df->createTimeMs = ms10;
    43ee:	ittt	ne
    43f0:	strbne.w	r9, [r0, #20]
    43f4:	strhne	r5, [r0, #8]
    43f6:	strhne	r4, [r0, #10]
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
    43f8:	tst.w	r8, #4
          df->modifyTimeMs = ms10;
    43fc:	ittt	ne
    43fe:	strbne.w	r9, [r0, #21]
    4402:	strhne	r5, [r0, #12]
    4404:	strhne	r4, [r0, #14]
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    4406:	mov	r1, fp
    4408:	adds	r7, #1
    440a:	bl	3db2 <exFatDirChecksum(unsigned char const*, unsigned short)>
    440e:	mov	fp, r0

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4410:	b.n	439e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x82>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4412:	movs	r2, #1
    4414:	add.w	r1, r6, #36	; 0x24
    4418:	ldr	r0, [r6, #32]
    441a:	bl	3a96 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    441e:	cmp	r0, #0
    4420:	beq.n	43b2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    4422:	strh.w	fp, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4426:	ldr	r0, [r6, #32]
    4428:	bl	3de0 <ExFatPartition::cacheSync()>
    442c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004430 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4430:	push	{r0, r1, r4, r5, r6, lr}
    4432:	ldrb.w	r3, [r0, #51]	; 0x33
    4436:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4438:	lsls	r2, r3, #30
    443a:	bmi.n	4440 <ExFatFile::truncate()+0x10>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    443c:	movs	r0, #0
    443e:	b.n	44ea <ExFatFile::truncate()+0xba>
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4440:	ldr	r5, [r0, #28]
    4442:	cmp	r5, #0
    4444:	beq.n	44c8 <ExFatFile::truncate()+0x98>
      return true;
  }
  if (isContiguous()) {
    4446:	and.w	r3, r3, #64	; 0x40
    444a:	ldr	r6, [r0, #24]
    444c:	and.w	r1, r3, #255	; 0xff
    4450:	cbz	r3, 4490 <ExFatFile::truncate()+0x60>
    4452:	ldr	r3, [r4, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4454:	ldrd	r0, r1, [r0, #8]
    4458:	ldrb.w	r2, [r3, #1093]	; 0x445
    445c:	adds.w	r0, r0, #4294967295
    4460:	add.w	r2, r2, #9
    4464:	adc.w	r1, r1, #4294967295
    4468:	uxtb	r2, r2
    446a:	bl	9b08 <__aeabi_llsr>
    446e:	adds	r2, r0, #1
    if (m_curCluster) {
    4470:	cbz	r6, 447e <ExFatFile::truncate()+0x4e>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4472:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4474:	adds	r3, r6, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4476:	subs	r5, r5, r6
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4478:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    447a:	add	r2, r5
    447c:	b.n	4482 <ExFatFile::truncate()+0x52>
    } else {
      toFree = m_firstCluster;
    447e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4480:	str	r6, [r4, #28]
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4482:	cbz	r2, 44cc <ExFatFile::truncate()+0x9c>
    4484:	movs	r3, #0
    4486:	ldr	r1, [sp, #4]
    4488:	ldr	r0, [r4, #32]
    448a:	bl	39f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    448e:	b.n	44c4 <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4490:	cbz	r6, 44b6 <ExFatFile::truncate()+0x86>
      toFree = 0;
    4492:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4494:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4496:	str.w	r1, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    449a:	mov	r1, r6
    449c:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    44a0:	cmp	r0, #0
    44a2:	blt.n	443c <ExFatFile::truncate()+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    44a4:	beq.n	44ba <ExFatFile::truncate()+0x8a>
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    44a6:	mov.w	r2, #4294967295
    44aa:	ldr	r1, [r4, #24]
    44ac:	ldr	r0, [r4, #32]
    44ae:	bl	3b78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    44b2:	cbnz	r0, 44ba <ExFatFile::truncate()+0x8a>
    44b4:	b.n	443c <ExFatFile::truncate()+0xc>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    44b6:	str	r5, [sp, #4]
      m_firstCluster = 0;
    44b8:	str	r6, [r0, #28]
    }
    if (toFree) {
    44ba:	ldr	r1, [sp, #4]
    44bc:	cbz	r1, 44cc <ExFatFile::truncate()+0x9c>
      if (!m_vol->freeChain(toFree)) {
    44be:	ldr	r0, [r4, #32]
    44c0:	bl	3bb2 <ExFatPartition::freeChain(unsigned long)>
    44c4:	cbnz	r0, 44cc <ExFatFile::truncate()+0x9c>
    44c6:	b.n	443c <ExFatFile::truncate()+0xc>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    44c8:	movs	r0, #1
    44ca:	b.n	44ea <ExFatFile::truncate()+0xba>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    44cc:	ldrd	r2, r3, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    44d0:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    44d2:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    44d6:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    44da:	ldrb.w	r3, [r4, #51]	; 0x33
    44de:	orn	r3, r3, #127	; 0x7f
    44e2:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    44e6:	bl	4050 <ExFatFile::sync()>

 fail:
  return false;
}
    44ea:	add	sp, #8
    44ec:	pop	{r4, r5, r6, pc}
	...

000044f0 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    44f0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f4:	ldrb.w	r3, [r0, #51]	; 0x33
    44f8:	mov	r9, r1
    44fa:	mov	r4, r0
    44fc:	mov	sl, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    44fe:	lsls	r1, r3, #30
    4500:	bpl.w	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4504:	lsls	r2, r3, #28
    4506:	bmi.n	4516 <ExFatFile::write(void const*, unsigned int)+0x26>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4508:	add.w	r3, r4, #24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    450c:	mov	r8, sl
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    450e:	mov.w	fp, #1
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4512:	str	r3, [sp, #0]
    4514:	b.n	45dc <ExFatFile::write(void const*, unsigned int)+0xec>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    4516:	ldrd	r2, r3, [r0, #16]
    451a:	bl	3436 <ExFatFile::seekSet(unsigned long long)>
    451e:	cmp	r0, #0
    4520:	bne.n	4508 <ExFatFile::write(void const*, unsigned int)+0x18>
    4522:	b.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4524:	ldr	r0, [r4, #32]
    4526:	ldr	r6, [r4, #0]
    4528:	ldr.w	r3, [r0, #1080]	; 0x438
    452c:	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    452e:	ubfx	r5, r6, #0, #9
    if (clusterOffset == 0) {
    4532:	cmp	r6, #0
    4534:	beq.n	45e4 <ExFatFile::write(void const*, unsigned int)+0xf4>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
    4536:	ldr.w	lr, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    453a:	lsrs	r6, r6, #9
    453c:	ldr	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    453e:	ldrb.w	r2, [lr, #1093]	; 0x445
    4542:	subs	r1, #2
    4544:	ldr.w	r3, [lr, #1068]	; 0x42c
    4548:	lsls	r1, r2
    454a:	add	r1, r3
    454c:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    454e:	cmp	r5, #0
    4550:	bne.n	464c <ExFatFile::write(void const*, unsigned int)+0x15c>
    4552:	cmp.w	r8, #512	; 0x200
    4556:	bcs.w	468e <ExFatFile::write(void const*, unsigned int)+0x19e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    455a:	ldrd	r2, r3, [r4, #16]
    455e:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4562:	cmp	r7, r3
    4564:	it	eq
    4566:	cmpeq	r6, r2
    4568:	ite	cc
    456a:	movcc	r2, #1
    456c:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    456e:	add.w	r0, lr, #528	; 0x210
    4572:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4576:	cmp	r0, #0
    4578:	beq.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    457a:	rsb	r6, r5, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    457e:	add	r0, r5
    4580:	mov	r1, r9
    4582:	cmp	r6, r8
    4584:	it	cs
    4586:	movcs	r6, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4588:	add	r5, r6
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    458a:	mov	r2, r6
    458c:	bl	7fb0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4590:	cmp.w	r5, #512	; 0x200
    4594:	bne.n	45a4 <ExFatFile::write(void const*, unsigned int)+0xb4>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4596:	ldr	r0, [r4, #32]
    4598:	add.w	r0, r0, #528	; 0x210
    459c:	bl	2906 <FsCache::sync()>
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    45a0:	cmp	r0, #0
    45a2:	beq.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    45a4:	add	r9, r6
    toWrite -= n;
    45a6:	rsb	r8, r6, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    45aa:	ldrd	r0, r1, [r4]
    45ae:	adds	r2, r0, r6
    45b0:	adc.w	r3, r1, #0
    45b4:	mov	r0, r2
    45b6:	mov	r1, r3
    45b8:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    45bc:	ldrd	r2, r3, [r4, #16]
    45c0:	cmp	r3, r1
    45c2:	it	eq
    45c4:	cmpeq	r2, r0
    45c6:	bcs.n	45dc <ExFatFile::write(void const*, unsigned int)+0xec>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    45c8:	ldrb.w	r3, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    45cc:	mov	r2, r0
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    45ce:	orn	r3, r3, #127	; 0x7f
    45d2:	strb.w	r3, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    45d6:	mov	r3, r1
    45d8:	strd	r2, r3, [r4, #16]
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    45dc:	cmp.w	r8, #0
    45e0:	bne.n	4524 <ExFatFile::write(void const*, unsigned int)+0x34>
    45e2:	b.n	4650 <ExFatFile::write(void const*, unsigned int)+0x160>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    45e4:	ldr	r7, [r4, #24]
    45e6:	cbz	r7, 4636 <ExFatFile::write(void const*, unsigned int)+0x146>
        int fg;

        if (isContiguous()) {
    45e8:	ldrb.w	r3, [r4, #51]	; 0x33
    45ec:	lsls	r3, r3, #25
    45ee:	bpl.n	4626 <ExFatFile::write(void const*, unsigned int)+0x136>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    45f0:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    45f4:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    45f6:	adds	r2, #9
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    45f8:	str	r3, [sp, #4]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    45fa:	uxtb	r2, r2
    45fc:	ldrd	r0, r1, [r4, #8]
    4600:	adds.w	r0, r0, #4294967295
    4604:	adc.w	r1, r1, #4294967295
    4608:	bl	9b08 <__aeabi_llsr>
    460c:	ldr	r3, [sp, #4]
    460e:	add	r0, r3
    4610:	cmp	r7, r0
    4612:	bcc.n	4620 <ExFatFile::write(void const*, unsigned int)+0x130>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4614:	mov	r0, r4
    4616:	bl	3e06 <ExFatFile::addCluster()>
    461a:	cmp	r0, #0
    461c:	bne.n	4536 <ExFatFile::write(void const*, unsigned int)+0x46>
    461e:	b.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    4620:	adds	r7, #1
    4622:	str	r7, [r4, #24]
    4624:	b.n	4536 <ExFatFile::write(void const*, unsigned int)+0x46>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4626:	ldr	r2, [sp, #0]
    4628:	mov	r1, r7
    462a:	bl	3acc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    462e:	cmp	r0, #0
    4630:	blt.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    4632:	bne.n	4536 <ExFatFile::write(void const*, unsigned int)+0x46>
    4634:	b.n	4614 <ExFatFile::write(void const*, unsigned int)+0x124>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    4636:	ldr	r3, [r4, #28]
    4638:	cbnz	r3, 4648 <ExFatFile::write(void const*, unsigned int)+0x158>
          // allocate first cluster of file
          if (!addCluster()) {
    463a:	mov	r0, r4
    463c:	bl	3e06 <ExFatFile::addCluster()>
    4640:	cbz	r0, 467a <ExFatFile::write(void const*, unsigned int)+0x18a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    4642:	ldr	r3, [r4, #24]
    4644:	str	r3, [r4, #28]
    4646:	b.n	4536 <ExFatFile::write(void const*, unsigned int)+0x46>
        } else {
          m_curCluster = m_firstCluster;
    4648:	str	r3, [r4, #24]
    464a:	b.n	4536 <ExFatFile::write(void const*, unsigned int)+0x46>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    464c:	movs	r2, #1
    464e:	b.n	456e <ExFatFile::write(void const*, unsigned int)+0x7e>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4650:	ldrd	r0, r1, [r4]
    4654:	ldrd	r2, r3, [r4, #8]
    4658:	cmp	r3, r1
    465a:	it	eq
    465c:	cmpeq	r2, r0
    465e:	bcs.n	4666 <ExFatFile::write(void const*, unsigned int)+0x176>
    m_dataLength = m_curPosition;
    4660:	strd	r0, r1, [r4, #8]
    4664:	b.n	466c <ExFatFile::write(void const*, unsigned int)+0x17c>
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4666:	ldr	r3, [pc, #148]	; (46fc <ExFatFile::write(void const*, unsigned int)+0x20c>)
    4668:	ldr	r3, [r3, #0]
    466a:	cbz	r3, 468a <ExFatFile::write(void const*, unsigned int)+0x19a>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    466c:	ldrb.w	r3, [r4, #51]	; 0x33
    4670:	orn	r3, r3, #127	; 0x7f
    4674:	strb.w	r3, [r4, #51]	; 0x33
    4678:	b.n	468a <ExFatFile::write(void const*, unsigned int)+0x19a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    467a:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    467e:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4680:	orr.w	r3, r3, #1
    4684:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    4688:	b.n	46f6 <ExFatFile::write(void const*, unsigned int)+0x206>
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
  }
  return nbyte;
    468a:	mov	r0, sl
    468c:	b.n	46f6 <ExFatFile::write(void const*, unsigned int)+0x206>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    468e:	cmp.w	r8, #1024	; 0x400
    4692:	ldr.w	r7, [lr, #540]	; 0x21c
    4696:	ldr.w	r0, [lr, #532]	; 0x214
    469a:	bcc.n	46c6 <ExFatFile::write(void const*, unsigned int)+0x1d6>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    469c:	lsl.w	r3, fp, r2
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    46a0:	mov.w	ip, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    46a4:	subs	r6, r3, r6
    46a6:	mov	r3, ip
    46a8:	cmp	ip, r6
    46aa:	it	cs
    46ac:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    46ae:	cmp	r1, r7
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    46b0:	mov.w	r6, r3, lsl #9
    46b4:	bhi.n	46bc <ExFatFile::write(void const*, unsigned int)+0x1cc>
    46b6:	adds	r2, r1, r3
    46b8:	cmp	r7, r2
    46ba:	bcc.n	46e8 <ExFatFile::write(void const*, unsigned int)+0x1f8>
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    46bc:	ldr	r2, [r0, #0]
    46be:	ldr	r5, [r2, #36]	; 0x24
    46c0:	mov	r2, r9
    46c2:	blx	r5
    46c4:	b.n	45a0 <ExFatFile::write(void const*, unsigned int)+0xb0>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    46c6:	cmp	r1, r7
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    46c8:	mov	r2, r9
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    46ca:	ittt	eq
    46cc:	moveq.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    46d0:	strbeq.w	r5, [lr, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    46d4:	streq.w	r3, [lr, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    46d8:	ldr	r3, [r0, #0]
    46da:	ldr	r3, [r3, #32]
    46dc:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    46de:	cmp	r0, #0
    46e0:	beq.n	467a <ExFatFile::write(void const*, unsigned int)+0x18a>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    46e2:	mov.w	r6, #512	; 0x200
    46e6:	b.n	45a4 <ExFatFile::write(void const*, unsigned int)+0xb4>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    46e8:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    46ec:	strb.w	r5, [lr, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    46f0:	str.w	r2, [lr, #540]	; 0x21c
    46f4:	b.n	46bc <ExFatFile::write(void const*, unsigned int)+0x1cc>

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return 0;
}
    46f6:	add	sp, #12
    46f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46fc:	.word	0x20003548

00004700 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    4700:	ldr	r0, [r1, #4]
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    4702:	push	{r4, lr}
    4704:	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    4706:	cbz	r0, 4720 <initFatDirCallback(unsigned long, void*)+0x20>
    4708:	ldrh	r3, [r1, #8]
    470a:	ldrh	r2, [r1, #10]
    470c:	adds	r3, #1
    470e:	uxth	r3, r3
    4710:	cmp	r2, r3
    4712:	strh	r3, [r1, #8]
    4714:	bhi.n	4720 <initFatDirCallback(unsigned long, void*)+0x20>
    state->pr->write(".");
    4716:	ldr	r1, [pc, #12]	; (4724 <initFatDirCallback(unsigned long, void*)+0x24>)
    4718:	bl	674 <Print::write(char const*)>
    state->count = 0;
    471c:	movs	r3, #0
    471e:	strh	r3, [r4, #8]
  }
  return state->buffer;
    4720:	ldr	r0, [r4, #0]
}
    4722:	pop	{r4, pc}
    4724:	.word	0x200012fc

00004728 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    4728:	push	{r4, r5, r6, r7, lr}
    472a:	mov	r4, r0
    472c:	sub	sp, #28
    472e:	mov	r6, r1
    4730:	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4732:	movs	r1, #0
    4734:	mov.w	r2, #512	; 0x200
    4738:	ldr	r0, [r0, #36]	; 0x24
    473a:	bl	7f6c <memset>
  writeMsg("Writing FAT ");
    473e:	ldr	r0, [r4, #32]
    4740:	cbz	r0, 4748 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x20>
    4742:	ldr	r1, [pc, #128]	; (47c4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>)
    4744:	bl	674 <Print::write(char const*)>
  struct initFatDirState state;
  state.buffer = m_secBuf;
    4748:	ldr	r3, [r4, #36]	; 0x24
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    474a:	add	r2, sp, #12
    474c:	ldr	r0, [r4, #28]
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
    474e:	str	r3, [sp, #12]
  state.pr = m_pr;
    4750:	ldr	r3, [r4, #32]
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4752:	ldr	r1, [r4, #12]
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    4754:	str	r3, [sp, #16]
  state.count = 0;
    4756:	movs	r3, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4758:	adds	r1, #1
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
    475a:	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    475e:	lsrs	r3, r5, #5
    4760:	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4764:	ldr	r3, [r0, #0]
    4766:	str	r2, [sp, #0]
    4768:	subs	r2, r5, #1
    476a:	ldr	r7, [r3, #40]	; 0x28
    476c:	ldr	r3, [pc, #88]	; (47c8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa0>)
    476e:	blx	r7
    4770:	cbnz	r0, 4776 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x4e>
     return false;
    4772:	movs	r0, #0
    4774:	b.n	47c0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x98>
  }
  writeMsg("\r\n");
    4776:	ldr	r0, [r4, #32]
    4778:	cbz	r0, 4780 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x58>
    477a:	ldr	r1, [pc, #80]	; (47cc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    477c:	bl	674 <Print::write(char const*)>
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    4780:	movs	r2, #248	; 0xf8
    4782:	ldr	r3, [r4, #36]	; 0x24
  n = fatType == 16 ? 4 : 12;
    4784:	cmp	r6, #16
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    4786:	mov.w	r0, #255	; 0xff
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    478a:	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    478c:	mov.w	r3, #1
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    4790:	ite	eq
    4792:	moveq	r2, #4
    4794:	movne	r2, #12
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    4796:	ldr	r1, [r4, #36]	; 0x24
    4798:	strb	r0, [r1, r3]
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    479a:	adds	r3, #1
    479c:	cmp	r2, r3
    479e:	bne.n	4796 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6e>
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    47a0:	ldr	r0, [r4, #28]
    47a2:	ldr	r2, [r4, #36]	; 0x24
    47a4:	ldr	r3, [r0, #0]
    47a6:	ldr	r1, [r4, #12]
    47a8:	ldr	r3, [r3, #32]
    47aa:	blx	r3
    47ac:	cmp	r0, #0
    47ae:	beq.n	4772 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x4a>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    47b0:	ldr	r0, [r4, #28]
    47b2:	ldr	r5, [r4, #12]
    47b4:	ldr	r1, [r4, #8]
    47b6:	ldr	r3, [r0, #0]
    47b8:	ldr	r2, [r4, #36]	; 0x24
    47ba:	add	r1, r5
    47bc:	ldr	r3, [r3, #32]
    47be:	blx	r3
}
    47c0:	add	sp, #28
    47c2:	pop	{r4, r5, r6, r7, pc}
    47c4:	.word	0x200012ef
    47c8:	.word	0x00004701
    47cc:	.word	0x2000136e

000047d0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    47d0:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    47d2:	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    47d4:	mov.w	r2, #512	; 0x200
    47d8:	movs	r1, #0
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    47da:	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    47dc:	mov	r0, r4
    47de:	bl	7f6c <memset>
  pbs->jmpInstruction[0] = 0XEB;
    47e2:	movs	r3, #235	; 0xeb
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
    47e4:	movs	r2, #144	; 0x90
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    47e6:	movs	r1, #32
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
    47e8:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    47ea:	movs	r3, #118	; 0x76
    47ec:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    47ee:	mov	r3, r4
    47f0:	strb.w	r2, [r3, #2]!
    47f4:	add.w	r2, r4, #10
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    47f8:	strb.w	r1, [r3, #1]!
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    47fc:	cmp	r3, r2
    47fe:	bne.n	47f8 <FatFormatter::initPbs()+0x28>
    4800:	mov.w	r3, #512	; 0x200
    4804:	strh.w	r3, [r4, #11]
    pbs->oemName[i] = ' ';
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    4808:	ldrb.w	r3, [r5, #43]	; 0x2b
    480c:	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    480e:	ldrh	r3, [r5, #40]	; 0x28
    4810:	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    4812:	movs	r3, #2
    4814:	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    4816:	movs	r3, #248	; 0xf8
    4818:	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    481a:	ldr	r3, [r5, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    481c:	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    481e:	ldr	r3, [r5, #24]
    4820:	str	r3, [r4, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4822:	movw	r3, #43605	; 0xaa55
    4826:	strh.w	r3, [r4, #510]	; 0x1fe
    482a:	pop	{r3, r4, r5, pc}

0000482c <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    482c:	push	{r4, r5, r6, lr}
    482e:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4830:	mov.w	r2, #512	; 0x200
    4834:	movs	r1, #0
    4836:	ldr	r0, [r0, #36]	; 0x24
    4838:	bl	7f6c <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    483c:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    483e:	ldr	r2, [r4, #16]
    4840:	ldr	r1, [r4, #0]
    4842:	addw	r0, r5, #447	; 0x1bf
    4846:	bl	2878 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    484a:	ldr	r3, [r4, #24]
    484c:	ldr	r2, [r4, #16]
    484e:	addw	r0, r5, #451	; 0x1c3
    4852:	ldr	r1, [r4, #0]
    4854:	add	r2, r3
    4856:	subs	r2, #1
    4858:	bl	2878 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    485c:	ldrb.w	r3, [r4, #42]	; 0x2a
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    4860:	movs	r1, #0
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    4862:	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    4866:	ldr	r3, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    4868:	ldr	r0, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    486a:	str.w	r3, [r5, #454]	; 0x1c6
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
    486e:	ldr	r3, [r4, #24]
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    4870:	ldr	r2, [r4, #36]	; 0x24
    4872:	str.w	r3, [r5, #458]	; 0x1ca
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4876:	movw	r3, #43605	; 0xaa55
    487a:	strh.w	r3, [r5, #510]	; 0x1fe
    487e:	ldr	r3, [r0, #0]
}
    4880:	ldmia.w	sp!, {r4, r5, r6, lr}

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    4884:	ldr	r3, [r3, #32]
    4886:	bx	r3

00004888 <FatFormatter::makeFat16()>:
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    4888:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    488a:	mov.w	r3, #256	; 0x100
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    488e:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    4890:	ldr	r5, [r0, #36]	; 0x24

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    4892:	ldr.w	lr, [r0, #20]
    4896:	ldrb.w	r2, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    489a:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    489c:	ldr	r3, [r4, #4]
    489e:	rsb	r1, r3, lr
    48a2:	udiv	r1, r1, r2
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    48a6:	addw	r6, r1, #257	; 0x101
    48aa:	lsrs	r6, r6, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    48ac:	lsls	r0, r6, #1
    48ae:	add.w	r7, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    48b2:	cmp	r3, r7
    48b4:	bcc.n	48cc <FatFormatter::makeFat16()+0x44>
      m_relativeSectors = m_dataStart - r + BU16;
    48b6:	subs	r3, r3, r7
    48b8:	str	r6, [r4, #8]
    48ba:	add.w	r6, r3, #128	; 0x80
    48be:	str	r6, [r4, #16]
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    48c0:	subw	r6, r1, #4085	; 0xff5
    48c4:	cmp.w	r6, #61440	; 0xf000
    48c8:	bcs.n	48d2 <FatFormatter::makeFat16()+0x4a>
    48ca:	b.n	48e0 <FatFormatter::makeFat16()+0x58>
bool FatFormatter::makeFat16() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    48cc:	adds	r3, #128	; 0x80
    48ce:	str	r3, [r4, #4]
    48d0:	b.n	489c <FatFormatter::makeFat16()+0x14>
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    48d2:	ldr	r0, [r4, #32]
    48d4:	cmp	r0, #0
    48d6:	beq.n	497e <FatFormatter::makeFat16()+0xf6>
    48d8:	ldr	r1, [pc, #168]	; (4984 <FatFormatter::makeFat16()+0xfc>)
    48da:	bl	674 <Print::write(char const*)>
    48de:	b.n	497e <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    48e0:	adds	r3, #129	; 0x81
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    48e2:	movs	r6, #1
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    48e4:	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    48e6:	add.w	r3, r0, #33	; 0x21
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    48ea:	strh	r6, [r4, #40]	; 0x28
    m_partType = 0X04;
  } else {
    m_partType = 0X06;
  }
  // write MBR
  if (!writeMbr()) {
    48ec:	mov	r0, r4
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    48ee:	mla	r3, r1, r2, r3
  if (m_totalSectors < 65536) {
    48f2:	cmp.w	r3, #65536	; 0x10000
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    48f6:	str	r3, [r4, #24]
  if (m_totalSectors < 65536) {
    m_partType = 0X04;
    48f8:	ite	cc
    48fa:	movcc	r3, #4
  } else {
    m_partType = 0X06;
    48fc:	movcs	r3, #6
    48fe:	strb.w	r3, [r4, #42]	; 0x2a
  }
  // write MBR
  if (!writeMbr()) {
    4902:	bl	482c <FatFormatter::writeMbr()>
    4906:	cmp	r0, #0
    4908:	beq.n	497e <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  initPbs();
    490a:	mov	r0, r4
    490c:	bl	47d0 <FatFormatter::initPbs()>
    4910:	mov.w	r3, #512	; 0x200
    4914:	add.w	r2, r5, #53	; 0x35
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    4918:	movs	r1, #32
    491a:	strh.w	r3, [r5, #17]
    491e:	ldr	r3, [r4, #8]
    4920:	strh	r3, [r5, #22]
    return false;
  }
  initPbs();
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    4922:	movs	r3, #128	; 0x80
    4924:	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    4928:	movs	r3, #41	; 0x29
    492a:	strb.w	r3, [r5, #38]	; 0x26
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    492e:	ldr	r3, [pc, #88]	; (4988 <FatFormatter::makeFat16()+0x100>)
    4930:	str.w	r3, [r5, #39]	; 0x27
    4934:	add.w	r3, r5, #42	; 0x2a
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    4938:	strb.w	r1, [r3, #1]!
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    493c:	cmp	r3, r2
    493e:	bne.n	4938 <FatFormatter::makeFat16()+0xb0>
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb16.volumeType[0] = 'F';
    4940:	movs	r3, #70	; 0x46
    4942:	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    4946:	movs	r3, #65	; 0x41
    4948:	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    494c:	movs	r3, #84	; 0x54
    494e:	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    4952:	movs	r3, #49	; 0x31
    4954:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    4958:	movs	r3, #54	; 0x36
    495a:	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    495e:	ldr	r0, [r4, #28]
    4960:	ldr	r2, [r4, #36]	; 0x24
    4962:	ldr	r3, [r0, #0]
    4964:	ldr	r1, [r4, #16]
    4966:	ldr	r3, [r3, #32]
    4968:	blx	r3
    496a:	cbz	r0, 497e <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    496c:	ldr	r2, [r4, #4]
    496e:	mov	r0, r4
    4970:	ldr	r3, [r4, #12]
    4972:	movs	r1, #16
    4974:	subs	r2, r2, r3
}
    4976:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbs->bpb.bpb16.volumeType[3] = '1';
  pbs->bpb.bpb16.volumeType[4] = '6';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    497a:	b.w	4728 <FatFormatter::initFatDir(unsigned char, unsigned long)>
}
    497e:	movs	r0, #0
    4980:	pop	{r3, r4, r5, r6, r7, pc}
    4982:	nop
    4984:	.word	0x20001348
    4988:	.word	0x0012d687

0000498c <FatFormatter::makeFat32()>:
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
    498c:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    498e:	mov.w	r3, #8192	; 0x2000
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
    4992:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    4994:	ldr	r5, [r0, #36]	; 0x24
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    4996:	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    4998:	mov.w	r3, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    499c:	ldrb.w	r1, [r0, #43]	; 0x2b
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    49a0:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    49a2:	ldr	r3, [r0, #20]
    49a4:	ldr	r2, [r4, #4]
    49a6:	subs	r0, r3, r2
    49a8:	udiv	r0, r0, r1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    49ac:	add.w	r6, r0, #129	; 0x81
    49b0:	lsrs	r6, r6, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    49b2:	mov.w	lr, r6, lsl #1
    49b6:	add.w	r7, lr, #8192	; 0x2000
    49ba:	adds	r7, #9
    49bc:	cmp	r2, r7
    49be:	bcs.n	49c8 <FatFormatter::makeFat32()+0x3c>
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    49c0:	add.w	r2, r2, #8192	; 0x2000
    49c4:	str	r2, [r4, #4]
    49c6:	b.n	49a4 <FatFormatter::makeFat32()+0x18>
    if (m_dataStart >= r) {
      break;
    }
  }
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    49c8:	movw	r3, #65524	; 0xfff4
    49cc:	str	r6, [r4, #8]
    49ce:	cmp	r0, r3
    49d0:	bhi.n	49e2 <FatFormatter::makeFat32()+0x56>
    writeMsg("Bad cluster count\r\n");
    49d2:	ldr	r0, [r4, #32]
    49d4:	cmp	r0, #0
    49d6:	beq.w	4b1a <FatFormatter::makeFat32()+0x18e>
    49da:	ldr	r1, [pc, #324]	; (4b20 <FatFormatter::makeFat32()+0x194>)
    49dc:	bl	674 <Print::write(char const*)>
    49e0:	b.n	4b1a <FatFormatter::makeFat32()+0x18e>
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    49e2:	sub.w	r3, r2, #8192	; 0x2000
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    49e6:	mla	r2, r0, r1, r2
    m_partType = 0X0B;
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
  }
  if (!writeMbr()) {
    49ea:	mov	r0, r4
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    49ec:	rsb	r3, lr, r3
    49f0:	uxth	r3, r3
    49f2:	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    49f4:	add.w	r3, r3, #8192	; 0x2000
    49f8:	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    49fa:	sub.w	r3, r2, #8192	; 0x2000
    49fe:	str	r3, [r4, #24]
  // type depends on address of end sector
  // max CHS has lba = 16450560 = 1024*255*63
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    4a00:	ldr	r3, [pc, #288]	; (4b24 <FatFormatter::makeFat32()+0x198>)
    4a02:	cmp	r2, r3
    // FAT32 with CHS and LBA
    m_partType = 0X0B;
    4a04:	ite	ls
    4a06:	movls	r3, #11
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
    4a08:	movhi	r3, #12
    4a0a:	strb.w	r3, [r4, #42]	; 0x2a
  }
  if (!writeMbr()) {
    4a0e:	bl	482c <FatFormatter::writeMbr()>
    4a12:	cmp	r0, #0
    4a14:	beq.w	4b1a <FatFormatter::makeFat32()+0x18e>
    return false;
  }
  initPbs();
    4a18:	mov	r0, r4
    4a1a:	bl	47d0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    4a1e:	ldr	r3, [r4, #8]
    4a20:	add.w	r2, r5, #81	; 0x51
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    4a24:	movs	r1, #32
    4a26:	str	r3, [r5, #36]	; 0x24
    4a28:	movs	r3, #2
    4a2a:	str	r3, [r5, #44]	; 0x2c
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4a2c:	movs	r3, #1
    4a2e:	strh	r3, [r5, #48]	; 0x30
    4a30:	movs	r3, #6
    4a32:	strh	r3, [r5, #50]	; 0x32
  initPbs();
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
  setLe32(pbs->bpb.bpb32.fat32RootCluster, 2);
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    4a34:	movs	r3, #128	; 0x80
    4a36:	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    4a3a:	movs	r3, #41	; 0x29
    4a3c:	strb.w	r3, [r5, #66]	; 0x42
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4a40:	ldr	r3, [pc, #228]	; (4b28 <FatFormatter::makeFat32()+0x19c>)
    4a42:	str.w	r3, [r5, #67]	; 0x43
    4a46:	add.w	r3, r5, #70	; 0x46
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    4a4a:	strb.w	r1, [r3, #1]!
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    4a4e:	cmp	r3, r2
    4a50:	bne.n	4a4a <FatFormatter::makeFat32()+0xbe>
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb32.volumeType[0] = 'F';
    4a52:	movs	r3, #70	; 0x46
    4a54:	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    4a58:	movs	r3, #65	; 0x41
    4a5a:	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    4a5e:	movs	r3, #84	; 0x54
    4a60:	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    4a64:	movs	r3, #51	; 0x33
    4a66:	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    4a6a:	movs	r3, #50	; 0x32
    4a6c:	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    4a70:	ldr	r0, [r4, #28]
    4a72:	ldr	r2, [r4, #36]	; 0x24
    4a74:	ldr	r3, [r0, #0]
    4a76:	ldr	r1, [r4, #16]
    4a78:	ldr	r3, [r3, #32]
    4a7a:	blx	r3
    4a7c:	cmp	r0, #0
    4a7e:	beq.n	4b1a <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    4a80:	ldr	r0, [r4, #28]
    4a82:	ldr	r1, [r4, #16]
    4a84:	ldr	r3, [r0, #0]
    4a86:	ldr	r2, [r4, #36]	; 0x24
    4a88:	adds	r1, #6
    4a8a:	ldr	r3, [r3, #32]
    4a8c:	blx	r3
  pbs->bpb.bpb32.volumeType[0] = 'F';
  pbs->bpb.bpb32.volumeType[1] = 'A';
  pbs->bpb.bpb32.volumeType[2] = 'T';
  pbs->bpb.bpb32.volumeType[3] = '3';
  pbs->bpb.bpb32.volumeType[4] = '2';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    4a8e:	cmp	r0, #0
    4a90:	beq.n	4b1a <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    4a92:	mov.w	r2, #512	; 0x200
    4a96:	movs	r1, #0
    4a98:	ldr	r0, [r4, #36]	; 0x24
    4a9a:	bl	7f6c <memset>
    4a9e:	ldr	r3, [pc, #140]	; (4b2c <FatFormatter::makeFat32()+0x1a0>)
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    4aa0:	ldr	r0, [r4, #28]
    4aa2:	str.w	r3, [r5, #508]	; 0x1fc
    4aa6:	ldr	r3, [r0, #0]
    4aa8:	ldr	r1, [r4, #16]
    4aaa:	ldr	r3, [r3, #32]
    4aac:	ldr	r2, [r4, #36]	; 0x24
    4aae:	adds	r1, #2
    4ab0:	blx	r3
    4ab2:	cmp	r0, #0
    4ab4:	beq.n	4b1a <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    4ab6:	ldr	r0, [r4, #28]
    4ab8:	ldr	r1, [r4, #16]
    4aba:	ldr	r3, [r0, #0]
    4abc:	ldr	r2, [r4, #36]	; 0x24
    4abe:	adds	r1, #8
    4ac0:	ldr	r3, [r3, #32]
    4ac2:	blx	r3
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    4ac4:	cbz	r0, 4b1a <FatFormatter::makeFat32()+0x18e>
    4ac6:	ldr	r3, [pc, #104]	; (4b30 <FatFormatter::makeFat32()+0x1a4>)
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    4ac8:	ldr	r0, [r4, #28]
    4aca:	str	r3, [r5, #0]
    4acc:	add.w	r3, r3, #534773760	; 0x1fe00000
    4ad0:	ldr	r2, [r4, #36]	; 0x24
    4ad2:	add.w	r3, r3, #8192	; 0x2000
    4ad6:	adds	r3, #32
    4ad8:	str.w	r3, [r5, #484]	; 0x1e4
    4adc:	mov.w	r3, #4294967295
    4ae0:	str.w	r3, [r5, #488]	; 0x1e8
    4ae4:	str.w	r3, [r5, #492]	; 0x1ec
    4ae8:	ldr	r3, [r0, #0]
    4aea:	ldr	r1, [r4, #16]
    4aec:	ldr	r3, [r3, #32]
    4aee:	adds	r1, #1
    4af0:	blx	r3
    4af2:	cbz	r0, 4b1a <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    4af4:	ldr	r0, [r4, #28]
    4af6:	ldr	r1, [r4, #16]
    4af8:	ldr	r3, [r0, #0]
    4afa:	ldr	r2, [r4, #36]	; 0x24
    4afc:	adds	r1, #7
    4afe:	ldr	r3, [r3, #32]
    4b00:	blx	r3
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    4b02:	cbz	r0, 4b1a <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    4b04:	ldr	r2, [r4, #8]
    4b06:	mov	r0, r4
    4b08:	ldrb.w	r3, [r4, #43]	; 0x2b
    4b0c:	movs	r1, #32
    4b0e:	add.w	r2, r3, r2, lsl #1
}
    4b12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    4b16:	b.w	4728 <FatFormatter::initFatDir(unsigned char, unsigned long)>
}
    4b1a:	movs	r0, #0
    4b1c:	pop	{r3, r4, r5, r6, r7, pc}
    4b1e:	nop
    4b20:	.word	0x20001348
    4b24:	.word	0x00fb0400
    4b28:	.word	0x0012d687
    4b2c:	.word	0xaa550000
    4b30:	.word	0x41615252

00004b34 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(str) if (m_pr) m_pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    4b34:	push	{r3, r4, r5, lr}
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
    4b36:	str	r3, [r0, #32]
#define writeMsg(str) if (m_pr) m_pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    4b38:	mov	r4, r0
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    4b3a:	ldr	r3, [r1, #0]
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
    4b3c:	str	r1, [r0, #28]
  m_secBuf = secBuf;
    4b3e:	str	r2, [r0, #36]	; 0x24
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    4b40:	mov	r0, r1
    4b42:	ldr	r3, [r3, #24]
    4b44:	blx	r3
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    4b46:	addw	r3, r0, #2047	; 0x7ff
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    4b4a:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    4b4c:	lsrs	r3, r3, #11

  if (m_capacityMB <= 6) {
    4b4e:	cmp	r3, #6
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    4b50:	str	r3, [r4, #0]

  if (m_capacityMB <= 6) {
    4b52:	bhi.n	4b62 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2e>
    writeMsg("Card is too small.\r\n");
    4b54:	ldr	r0, [r4, #32]
    4b56:	cbz	r0, 4b5e <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2a>
    4b58:	ldr	r1, [pc, #108]	; (4bc8 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x94>)
    4b5a:	bl	674 <Print::write(char const*)>
    return false;
    4b5e:	movs	r0, #0
    4b60:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 16) {
    4b62:	cmp	r3, #16
    4b64:	bhi.n	4b6a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x36>
    m_sectorsPerCluster = 2;
    4b66:	movs	r3, #2
    4b68:	b.n	4b96 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 32) {
    4b6a:	cmp	r3, #32
    4b6c:	bhi.n	4b72 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3e>
    m_sectorsPerCluster = 4;
    4b6e:	movs	r3, #4
    4b70:	b.n	4b96 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 64) {
    4b72:	cmp	r3, #64	; 0x40
    4b74:	bhi.n	4b7a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x46>
    m_sectorsPerCluster = 8;
    4b76:	movs	r3, #8
    4b78:	b.n	4b96 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 128) {
    4b7a:	cmp	r3, #128	; 0x80
    4b7c:	bhi.n	4b82 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    m_sectorsPerCluster = 16;
    4b7e:	movs	r3, #16
    4b80:	b.n	4b96 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 1024) {
    4b82:	cmp.w	r3, #1024	; 0x400
    4b86:	bhi.n	4b8c <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x58>
    m_sectorsPerCluster = 32;
    4b88:	movs	r3, #32
    4b8a:	b.n	4b96 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 32768) {
    4b8c:	cmp.w	r3, #32768	; 0x8000
    m_sectorsPerCluster = 64;
    4b90:	ite	ls
    4b92:	movls	r3, #64	; 0x40
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
    4b94:	movhi	r3, #128	; 0x80
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    4b96:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 32;
  } else if (m_capacityMB <= 32768) {
    m_sectorsPerCluster = 64;
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
    4b9a:	strb.w	r3, [r4, #43]	; 0x2b
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    4b9e:	mov	r0, r4
    4ba0:	bcs.n	4ba8 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x74>
    4ba2:	bl	4888 <FatFormatter::makeFat16()>
    4ba6:	b.n	4bac <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x78>
    4ba8:	bl	498c <FatFormatter::makeFat32()>
    4bac:	mov	r5, r0
    4bae:	ldr	r0, [r4, #32]
  if (rtn) {
    4bb0:	cbz	r5, 4bbc <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x88>
    writeMsg("Format Done\r\n");
    4bb2:	cbz	r0, 4bc4 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x90>
    4bb4:	ldr	r1, [pc, #20]	; (4bcc <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x98>)
    4bb6:	bl	674 <Print::write(char const*)>
    4bba:	b.n	4bc4 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else {
    writeMsg("Format Failed\r\n");
    4bbc:	cmp	r0, #0
    4bbe:	beq.n	4b5e <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2a>
    4bc0:	ldr	r1, [pc, #12]	; (4bd0 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x9c>)
    4bc2:	b.n	4b5a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x26>
    4bc4:	movs	r0, #1
  }
  return rtn;
}
    4bc6:	pop	{r3, r4, r5, pc}
    4bc8:	.word	0x2000135c
    4bcc:	.word	0x20001371
    4bd0:	.word	0x2000137f

00004bd4 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    4bd4:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4bd6:	lsls	r1, r1, #5

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    4bd8:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4bda:	bl	50ca <FatFile::seekSet(unsigned long)>
    4bde:	cbz	r0, 4bec <FatFile::cacheDir(unsigned short)+0x18>
    4be0:	mov	r0, r4
    4be2:	movs	r1, #0
  }
    4be4:	ldmia.w	sp!, {r4, lr}
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4be8:	b.w	5090 <FatFile::readDirCache(bool)>
  }
    4bec:	pop	{r4, pc}

00004bee <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "FatFile.h"
#include "FatVolume.h"

//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    4bee:	cmp	r2, #4
    4bf0:	bhi.n	4bfc <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4bf2:	add.w	r1, r1, r2, lsl #1
    4bf6:	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    4bfa:	bx	lr
  } else if (i < 11) {
    4bfc:	cmp	r2, #10
    4bfe:	bhi.n	4c08 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    4c00:	add.w	r1, r1, r2, lsl #1
    4c04:	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    4c06:	bx	lr
  } else if (i < 13) {
    4c08:	cmp	r2, #12
    4c0a:	itte	ls
    4c0c:	addls.w	r1, r1, r2, lsl #1
    4c10:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    4c12:	movhi	r0, #0
}
    4c14:	bx	lr

00004c16 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    4c16:	push	{r3, r4, r5, r6, r7, lr}
    4c18:	mov	r6, r1
    4c1a:	ldrb	r1, [r0, #0]
    4c1c:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    4c1e:	cbz	r1, 4c96 <FatFile::getSFN(char*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    4c20:	ands.w	r4, r1, #96	; 0x60
    4c24:	beq.n	4c36 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    4c26:	cmp	r2, #1
    4c28:	bls.n	4c96 <FatFile::getSFN(char*, unsigned int)+0x80>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    4c2a:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    4c2c:	movs	r0, #1
  if (isRoot()) {
    if (size < 2) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    4c2e:	strb	r3, [r6, #0]
    name[1] = '\0';
    4c30:	movs	r3, #0
    4c32:	strb	r3, [r6, #1]
    return 1;
    4c34:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    4c36:	mov	r1, r4
    4c38:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    4c3c:	cbz	r0, 4c96 <FatFile::getSFN(char*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    4c3e:	mov	r5, r0
    4c40:	mov	r1, r4
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
    4c42:	movs	r2, #8
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
    4c44:	mov	r3, r4
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
    4c46:	cmp	r1, #8
    4c48:	ldrb	r4, [r5, #0]
    4c4a:	bne.n	4c56 <FatFile::getSFN(char*, unsigned int)+0x40>
      if (*ptr == ' ') {
    4c4c:	cmp	r4, #32
    4c4e:	beq.n	4c8e <FatFile::getSFN(char*, unsigned int)+0x78>
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    4c50:	movs	r2, #16
      c = '.';
    4c52:	movs	r4, #46	; 0x2e
    4c54:	b.n	4c76 <FatFile::getSFN(char*, unsigned int)+0x60>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    4c56:	sub.w	lr, r4, #65	; 0x41
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
      c = '.';
    } else {
      c = *ptr++;
    4c5a:	adds	r5, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    4c5c:	cmp.w	lr, #25
    4c60:	bhi.n	4c72 <FatFile::getSFN(char*, unsigned int)+0x5c>
    4c62:	ldrb.w	lr, [r0, #12]
    4c66:	tst.w	r2, lr
    4c6a:	beq.n	4c76 <FatFile::getSFN(char*, unsigned int)+0x60>
        c += 'a' - 'A';
    4c6c:	adds	r4, #32
    4c6e:	uxtb	r4, r4
    4c70:	b.n	4c76 <FatFile::getSFN(char*, unsigned int)+0x60>
      }
      if (c == ' ') {
    4c72:	cmp	r4, #32
    4c74:	beq.n	4c88 <FatFile::getSFN(char*, unsigned int)+0x72>
        continue;
      }
    }
    if ((j + 1u) == size) {
    4c76:	add.w	lr, r3, #1
    4c7a:	mov	ip, r3
    4c7c:	cmp	r7, lr
    4c7e:	beq.n	4c8e <FatFile::getSFN(char*, unsigned int)+0x78>
      break;
    }
    name[j++] = c;
    4c80:	uxtb.w	r3, lr
    4c84:	strb.w	r4, [r6, ip]
    4c88:	adds	r1, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    4c8a:	cmp	r1, #12
    4c8c:	bne.n	4c46 <FatFile::getSFN(char*, unsigned int)+0x30>
    if ((j + 1u) == size) {
      break;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    4c8e:	movs	r2, #0
  return j;
    4c90:	mov	r0, r3
    if ((j + 1u) == size) {
      break;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    4c92:	strb	r2, [r6, r3]
  return j;
    4c94:	pop	{r3, r4, r5, r6, r7, pc}

 fail:
  name[0] = '\0';
    4c96:	movs	r0, #0
    4c98:	strb	r0, [r6, #0]
  return 0;
}
    4c9a:	pop	{r3, r4, r5, r6, r7, pc}

00004c9c <FatFile::getName8(char*, unsigned int)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    4c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    4ca0:	movs	r4, #0
    4ca2:	sub	sp, #44	; 0x2c
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    4ca4:	ldrb	r3, [r0, #0]
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    4ca6:	mov	r7, r0
    4ca8:	mov	r9, r1
    4caa:	mov	r8, r2
    4cac:	strb.w	r4, [sp, #4]
    4cb0:	strb.w	r4, [sp, #5]
    4cb4:	strb.w	r4, [sp, #6]
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    4cb8:	cmp	r3, #0
    4cba:	beq.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  if (!isLFN()) {
    4cbc:	ldrb	r3, [r0, #3]
    4cbe:	cbnz	r3, 4cc6 <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    4cc0:	bl	4c16 <FatFile::getSFN(char*, unsigned int)>
    4cc4:	b.n	4d82 <FatFile::getName8(char*, unsigned int)+0xe6>
  }
  if (!dir.openCluster(this)) {
    4cc6:	mov	r1, r0
    4cc8:	add	r0, sp, #4
    4cca:	bl	4ec6 <FatFile::openCluster(FatFile*)>
    4cce:	cmp	r0, #0
    4cd0:	beq.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4cd2:	add.w	r8, r8, #4294967295
    4cd6:	mov	r5, r9
    4cd8:	movs	r6, #1
    4cda:	add	r8, r9
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    4cdc:	ldrb	r3, [r7, #3]
    4cde:	cmp	r3, r6
    4ce0:	bcc.n	4d72 <FatFile::getName8(char*, unsigned int)+0xd6>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    4ce2:	ldrh	r1, [r7, #4]
    4ce4:	add	r0, sp, #4
    4ce6:	subs	r1, r1, r6
    4ce8:	uxth	r1, r1
    4cea:	bl	4bd4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    4cee:	mov	fp, r0
    4cf0:	cmp	r0, #0
    4cf2:	beq.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    4cf4:	ldrb	r3, [r0, #11]
    4cf6:	cmp	r3, #15
    4cf8:	bne.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
    4cfa:	ldrb	r3, [r0, #0]
    4cfc:	and.w	r3, r3, #31
    4d00:	cmp	r6, r3
    4d02:	bne.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
    4d04:	mov	r3, r4
    4d06:	mov.w	sl, #0
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t c = getLfnChar(ldir, i);
    4d0a:	uxtb.w	r2, sl
    4d0e:	mov	r1, fp
    4d10:	mov	r0, r7
    4d12:	bl	4bee <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    4d16:	mov	r4, r0
      if (hs) {
    4d18:	cbz	r3, 4d38 <FatFile::getName8(char*, unsigned int)+0x9c>
        if (!FsUtf::isLowSurrogate(c)) {
    4d1a:	add.w	r2, r0, #9216	; 0x2400
    4d1e:	uxth	r2, r2
    4d20:	cmp.w	r2, #1024	; 0x400
    4d24:	bcs.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    4d26:	lsls	r3, r3, #10
    4d28:	ldr	r0, [pc, #92]	; (4d88 <FatFile::getName8(char*, unsigned int)+0xec>)
    4d2a:	ubfx	r4, r4, #0, #10
    4d2e:	ands	r0, r3
    4d30:	orrs	r4, r0
    4d32:	add.w	r0, r4, #65536	; 0x10000
    4d36:	b.n	4d50 <FatFile::getName8(char*, unsigned int)+0xb4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    4d38:	add.w	r3, r0, #10240	; 0x2800
    4d3c:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    4d3e:	cmp.w	r3, #2048	; 0x800
    4d42:	bcc.n	4d48 <FatFile::getName8(char*, unsigned int)+0xac>
        if (c == 0) {
    4d44:	cbnz	r0, 4d50 <FatFile::getName8(char*, unsigned int)+0xb4>
    4d46:	b.n	4d72 <FatFile::getName8(char*, unsigned int)+0xd6>
          goto done;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
    4d48:	cmp.w	r3, #1024	; 0x400
    4d4c:	bcc.n	4d5e <FatFile::getName8(char*, unsigned int)+0xc2>
    4d4e:	b.n	4d7c <FatFile::getName8(char*, unsigned int)+0xe0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4d50:	mov	r2, r8
    4d52:	mov	r1, r5
    4d54:	bl	25b4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    4d58:	cbz	r0, 4d72 <FatFile::getName8(char*, unsigned int)+0xd6>
    4d5a:	mov	r5, r0
    4d5c:	movs	r4, #0
    4d5e:	add.w	sl, sl, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
    4d62:	cmp.w	sl, #13
    4d66:	beq.n	4d6c <FatFile::getName8(char*, unsigned int)+0xd0>
    4d68:	mov	r3, r4
    4d6a:	b.n	4d0a <FatFile::getName8(char*, unsigned int)+0x6e>
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    4d6c:	adds	r6, #1
    4d6e:	uxtb	r6, r6
    4d70:	b.n	4cdc <FatFile::getName8(char*, unsigned int)+0x40>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    4d72:	movs	r3, #0
  return str - name;
    4d74:	rsb	r0, r9, r5
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    4d78:	strb	r3, [r5, #0]
  return str - name;
    4d7a:	b.n	4d82 <FatFile::getName8(char*, unsigned int)+0xe6>

 fail:
  *name = 0;
    4d7c:	movs	r0, #0
    4d7e:	strb.w	r0, [r9]
  return 0;
}
    4d82:	add	sp, #44	; 0x2c
    4d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d88:	.word	0x000ffc00

00004d8c <FatFile::getName(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::getName(char* name, size_t size) {
#if !USE_LONG_FILE_NAMES
  return getSFN(name, size);
#elif USE_UTF8_LONG_NAMES
  return getName8(name, size);
    4d8c:	b.w	4c9c <FatFile::getName8(char*, unsigned int)>

00004d90 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    4d90:	push	{r4, lr}
    4d92:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    4d94:	adds	r0, #40	; 0x28
    4d96:	bl	2906 <FsCache::sync()>
    4d9a:	cbz	r0, 4db2 <FatPartition::cacheSync()+0x22>
    4d9c:	add.w	r0, r4, #568	; 0x238
    4da0:	bl	2906 <FsCache::sync()>
    4da4:	cbz	r0, 4db2 <FatPartition::cacheSync()+0x22>
    4da6:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4da8:	ldr	r3, [r0, #0]
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
  }
    4daa:	ldmia.w	sp!, {r4, lr}
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4dae:	ldr	r3, [r3, #28]
    4db0:	bx	r3
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
  }
    4db2:	movs	r0, #0
    4db4:	pop	{r4, pc}

00004db6 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    4db6:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    4db8:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    4dba:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    4dbe:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    4dc0:	ldr	r0, [r0, #8]
    4dc2:	mov	r1, r5
    4dc4:	bl	5c3a <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    4dc8:	cbz	r0, 4dea <FatFile::addCluster()+0x34>
    4dca:	ldrb	r3, [r4, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    4dcc:	cbnz	r5, 4dd4 <FatFile::addCluster()+0x1e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4dce:	orr.w	r3, r3, #64	; 0x40
    4dd2:	b.n	4de0 <FatFile::addCluster()+0x2a>
  } else if (m_curCluster != (cc + 1)) {
    4dd4:	adds	r5, #1
    4dd6:	ldr	r2, [r4, #16]
    4dd8:	cmp	r2, r5
    4dda:	beq.n	4de2 <FatFile::addCluster()+0x2c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4ddc:	bic.w	r3, r3, #64	; 0x40
    4de0:	strb	r3, [r4, #2]
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4de2:	ldrb	r3, [r4, #2]
    4de4:	orn	r3, r3, #127	; 0x7f
    4de8:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    4dea:	pop	{r3, r4, r5, pc}

00004dec <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    4dec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    4df0:	ldrb	r3, [r0, #0]
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    4df2:	mov	r4, r0
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    4df4:	and.w	r3, r3, #32
    4df8:	and.w	r5, r3, #255	; 0xff
    4dfc:	cbz	r3, 4e02 <FatFile::addDirCluster()+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    4dfe:	movs	r6, #0
    4e00:	b.n	4e6e <FatFile::addDirCluster()+0x82>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    4e02:	ldr	r2, [r0, #20]
    4e04:	ldr	r3, [pc, #108]	; (4e74 <FatFile::addDirCluster()+0x88>)
    4e06:	cmp	r2, r3
    4e08:	bhi.n	4dfe <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4e0a:	bl	4db6 <FatFile::addCluster()>
    4e0e:	mov	r6, r0
    4e10:	cmp	r0, #0
    4e12:	beq.n	4dfe <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    4e14:	ldr	r0, [r4, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    4e16:	movs	r2, #5
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4e18:	ldr	r1, [r4, #16]
    4e1a:	ldrb	r3, [r0, #6]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    4e1c:	adds	r0, #40	; 0x28
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4e1e:	subs	r1, #2
    4e20:	ldr.w	r7, [r0, #-20]
    4e24:	lsls	r1, r3
    4e26:	add	r7, r1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    4e28:	mov	r1, r7
    4e2a:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    4e2e:	mov	r8, r0
    4e30:	cmp	r0, #0
    4e32:	beq.n	4dfe <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    4e34:	mov	r1, r5
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    4e36:	movs	r5, #1
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    4e38:	mov.w	r2, #512	; 0x200
    4e3c:	bl	7f6c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    4e40:	ldr	r3, [r4, #8]
    4e42:	ldrb	r2, [r3, #4]
    4e44:	cmp	r2, r5
    4e46:	bls.n	4e5e <FatFile::addDirCluster()+0x72>
    4e48:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4e4a:	mov	r2, r8
    4e4c:	adds	r1, r5, r7
    4e4e:	ldr	r3, [r0, #0]
    4e50:	ldr	r3, [r3, #32]
    4e52:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    4e54:	cmp	r0, #0
    4e56:	beq.n	4dfe <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    4e58:	adds	r5, #1
    4e5a:	uxtb	r5, r5
    4e5c:	b.n	4e40 <FatFile::addDirCluster()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    4e5e:	ldrb	r2, [r3, #6]
    4e60:	mov.w	r3, #512	; 0x200
    4e64:	lsls	r3, r2
    4e66:	ldr	r2, [r4, #20]
    4e68:	uxtah	r3, r2, r3
    4e6c:	str	r3, [r4, #20]
  return true;

 fail:
  return false;
}
    4e6e:	mov	r0, r6
    4e70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e74:	.word	0x001ffdff

00004e78 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    4e78:	push	{r4, lr}
    4e7a:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    4e7c:	ldr	r0, [r0, #8]
    4e7e:	mov	r2, r1
    4e80:	adds	r0, #40	; 0x28
    4e82:	ldr	r1, [r4, #24]
    4e84:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    4e88:	cbz	r0, 4e94 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    4e8a:	ldrh	r3, [r4, #4]
    4e8c:	and.w	r3, r3, #15
    4e90:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    4e94:	pop	{r4, pc}

00004e96 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    4e96:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    4e98:	ldrb	r4, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    4e9a:	mov	r5, r0
    4e9c:	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
    4e9e:	cbnz	r4, 4ec2 <FatFile::openRoot(FatVolume*)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    4ea0:	movs	r2, #36	; 0x24
    4ea2:	mov	r1, r4
    4ea4:	bl	7f6c <memset>

  m_vol = vol;
    4ea8:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    4eaa:	ldrb	r3, [r6, #7]
    4eac:	cmp	r3, #16
    4eae:	beq.n	4eb8 <FatFile::openRoot(FatVolume*)+0x22>
    4eb0:	cmp	r3, #32
    4eb2:	bne.n	4ec2 <FatFile::openRoot(FatVolume*)+0x2c>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    4eb4:	movs	r3, #64	; 0x40
    4eb6:	b.n	4eba <FatFile::openRoot(FatVolume*)+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    4eb8:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    4eba:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    4ebc:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    4ebe:	strb	r0, [r5, #2]
    4ec0:	pop	{r4, r5, r6, pc}
  return true;

 fail:
  return false;
    4ec2:	movs	r0, #0
    4ec4:	pop	{r4, r5, r6, pc}

00004ec6 <FatFile::openCluster(FatFile*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    4ec6:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    4ec8:	ldr	r3, [r1, #12]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    4eca:	mov	r4, r0
    4ecc:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    4ece:	cbnz	r3, 4eda <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    4ed0:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    4ed2:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    4ed6:	b.w	4e96 <FatFile::openRoot(FatVolume*)>
  }
  memset(this, 0, sizeof(FatFile));
    4eda:	movs	r2, #36	; 0x24
    4edc:	movs	r1, #0
    4ede:	bl	7f6c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    4ee2:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    4ee4:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    4ee6:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    4ee8:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    4eea:	ldr	r3, [r5, #8]
    4eec:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    4eee:	ldr	r3, [r5, #12]
    4ef0:	str	r3, [r4, #32]
  return true;
}
    4ef2:	pop	{r3, r4, r5, pc}

00004ef4 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    4ef4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    4ef8:	ldrb	r3, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    4efa:	mov	r4, r0
    4efc:	mov	r9, r1
    4efe:	mov	r6, r2
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    4f00:	lsls	r5, r3, #31
    4f02:	bpl.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
    4f04:	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    4f06:	lsls	r0, r3, #28
    4f08:	bpl.n	4f12 <FatFile::read(void*, unsigned int)+0x1e>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    4f0a:	ldr	r3, [r4, #28]
    4f0c:	ldr	r2, [r4, #20]
    4f0e:	subs	r3, r3, r2
    4f10:	b.n	4f22 <FatFile::read(void*, unsigned int)+0x2e>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    4f12:	lsls	r1, r3, #26
    4f14:	bpl.n	4f28 <FatFile::read(void*, unsigned int)+0x34>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    4f16:	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
    4f18:	ldrh	r2, [r3, #8]
    4f1a:	ldr	r3, [r4, #20]
    4f1c:	rsb	r3, r3, r2, lsl #5
    4f20:	uxth	r3, r3
    4f22:	cmp	r6, r3
    4f24:	it	cs
    4f26:	movcs	r6, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
    4f28:	mov	r7, r6
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t sectorOfCluster = 0;
    4f2a:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4f2e:	add.w	sl, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    4f32:	cmp	r7, #0
    4f34:	beq.n	4fba <FatFile::read(void*, unsigned int)+0xc6>
    4f36:	ldrb	r3, [r4, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    4f38:	ldr	r2, [r4, #20]
    if (isRootFixed()) {
    4f3a:	tst.w	r3, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    4f3e:	ldr	r0, [r4, #8]
    4f40:	ubfx	r5, r2, #0, #9
    4f44:	mov.w	r1, r2, lsr #9
    if (isRootFixed()) {
    4f48:	beq.n	4f50 <FatFile::read(void*, unsigned int)+0x5c>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    4f4a:	ldr	r3, [r0, #32]
    4f4c:	add	r1, r3
    4f4e:	b.n	4f9a <FatFile::read(void*, unsigned int)+0xa6>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    4f50:	ldrb.w	r8, [r0, #5]
    4f54:	and.w	r8, r1, r8
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    4f58:	cbnz	r5, 4f8a <FatFile::read(void*, unsigned int)+0x96>
    4f5a:	cmp.w	r8, #0
    4f5e:	bne.n	4f8a <FatFile::read(void*, unsigned int)+0x96>
        // start of new cluster
        if (m_curPosition == 0) {
    4f60:	cbnz	r2, 4f6c <FatFile::read(void*, unsigned int)+0x78>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    4f62:	lsls	r2, r3, #25
    4f64:	ite	mi
    4f66:	ldrmi	r3, [r0, #32]
    4f68:	ldrpl	r3, [r4, #32]
    4f6a:	b.n	5000 <FatFile::read(void*, unsigned int)+0x10c>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    4f6c:	lsls	r3, r3, #28
    4f6e:	bpl.n	4f7c <FatFile::read(void*, unsigned int)+0x88>
    4f70:	ldrb	r3, [r4, #2]
    4f72:	lsls	r1, r3, #25
    4f74:	bpl.n	4f7c <FatFile::read(void*, unsigned int)+0x88>
          m_curCluster++;
    4f76:	ldr	r3, [r4, #16]
    4f78:	adds	r3, #1
    4f7a:	b.n	5000 <FatFile::read(void*, unsigned int)+0x10c>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4f7c:	mov	r2, sl
    4f7e:	ldr	r1, [r4, #16]
    4f80:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4f84:	cmp	r0, #0
    4f86:	blt.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    4f88:	beq.n	4fb2 <FatFile::read(void*, unsigned int)+0xbe>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    4f8a:	ldr	r3, [r4, #8]
    4f8c:	ldr	r1, [r4, #16]
    4f8e:	ldrb	r2, [r3, #6]
    4f90:	subs	r1, #2
    4f92:	ldr	r3, [r3, #20]
    4f94:	lsls	r1, r2
    4f96:	add	r1, r3
    4f98:	add	r1, r8
    4f9a:	ldr.w	fp, [r4, #8]
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    4f9e:	cmp	r5, #0
    4fa0:	bne.n	5040 <FatFile::read(void*, unsigned int)+0x14c>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    4fa2:	cmp.w	r7, #512	; 0x200
    4fa6:	bcc.n	5040 <FatFile::read(void*, unsigned int)+0x14c>
    4fa8:	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    4fac:	cmp	r1, r3
    4fae:	bne.n	4fbe <FatFile::read(void*, unsigned int)+0xca>
    4fb0:	b.n	5040 <FatFile::read(void*, unsigned int)+0x14c>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    4fb2:	ldrb	r3, [r4, #0]
    4fb4:	tst.w	r3, #112	; 0x70
    4fb8:	beq.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    4fba:	subs	r0, r6, r7
    4fbc:	b.n	5064 <FatFile::read(void*, unsigned int)+0x170>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4fbe:	cmp.w	r7, #1024	; 0x400
    4fc2:	bcc.n	501e <FatFile::read(void*, unsigned int)+0x12a>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    4fc4:	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    4fc6:	lsrs	r5, r7, #9
      if (!isRootFixed()) {
    4fc8:	lsls	r2, r2, #26
    4fca:	bmi.n	4fda <FatFile::read(void*, unsigned int)+0xe6>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    4fcc:	ldrb.w	r2, [fp, #4]
    4fd0:	rsb	r2, r8, r2
    4fd4:	cmp	r5, r2
    4fd6:	it	cs
    4fd8:	movcs	r5, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    4fda:	cmp	r1, r3
    4fdc:	bhi.n	5004 <FatFile::read(void*, unsigned int)+0x110>
    4fde:	adds	r2, r1, r5
    4fe0:	cmp	r3, r2
    4fe2:	bcs.n	5004 <FatFile::read(void*, unsigned int)+0x110>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    4fe4:	add.w	r0, fp, #40	; 0x28
    4fe8:	str	r1, [sp, #4]
    4fea:	bl	2906 <FsCache::sync()>
    4fee:	ldr	r1, [sp, #4]
    4ff0:	cbnz	r0, 5004 <FatFile::read(void*, unsigned int)+0x110>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    4ff2:	ldrb	r3, [r4, #1]
  return -1;
    4ff4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    4ff8:	orr.w	r3, r3, #2
    4ffc:	strb	r3, [r4, #1]
  return -1;
    4ffe:	b.n	5064 <FatFile::read(void*, unsigned int)+0x170>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5000:	str	r3, [r4, #16]
    5002:	b.n	4f8a <FatFile::read(void*, unsigned int)+0x96>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    5004:	ldr.w	r0, [fp, #44]	; 0x2c
    5008:	mov	r2, r9
    500a:	ldr	r3, [r0, #0]
    500c:	ldr.w	fp, [r3, #16]
    5010:	mov	r3, r5
    5012:	blx	fp
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5014:	cmp	r0, #0
    5016:	beq.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5018:	mov.w	fp, r5, lsl #9
    501c:	b.n	5032 <FatFile::read(void*, unsigned int)+0x13e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    501e:	ldr.w	r0, [fp, #44]	; 0x2c
    5022:	mov	r2, r9
    5024:	ldr	r3, [r0, #0]
    5026:	ldr	r3, [r3, #12]
    5028:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    502a:	cmp	r0, #0
    502c:	beq.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    502e:	mov.w	fp, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5032:	ldr	r3, [r4, #20]
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5034:	add	r9, fp
    m_curPosition += n;
    toRead -= n;
    5036:	rsb	r7, fp, r7
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    503a:	add	r3, fp
    503c:	str	r3, [r4, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    503e:	b.n	4f32 <FatFile::read(void*, unsigned int)+0x3e>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5040:	movs	r2, #0
    5042:	add.w	r0, fp, #40	; 0x28
    5046:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    504a:	cmp	r0, #0
    504c:	beq.n	4ff2 <FatFile::read(void*, unsigned int)+0xfe>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    504e:	rsb	fp, r5, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5052:	adds	r1, r0, r5
    5054:	mov	r0, r9
    5056:	cmp	fp, r7
    5058:	it	cs
    505a:	movcs	fp, r7
    505c:	mov	r2, fp
    505e:	bl	7fb0 <memcpy>
    5062:	b.n	5032 <FatFile::read(void*, unsigned int)+0x13e>
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5064:	add	sp, #12
    5066:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000506a <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    506a:	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    506c:	movs	r2, #1
    506e:	add.w	r1, sp, #7
    5072:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5074:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5076:	ldr	r5, [r0, #16]
    5078:	bl	4ef4 <FatFile::read(void*, unsigned int)>
    507c:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    507e:	str	r6, [r4, #20]
  m_curCluster = curCluster;
    5080:	str	r5, [r4, #16]
    5082:	ite	eq
    5084:	ldrbeq.w	r0, [sp, #7]
    5088:	movne.w	r0, #4294967295
  return c;
}
    508c:	add	sp, #8
    508e:	pop	{r4, r5, r6, pc}

00005090 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5090:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5092:	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5094:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5098:	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    509a:	cbz	r5, 509e <FatFile::readDirCache(bool)+0xe>
    509c:	cbnz	r1, 50ba <FatFile::readDirCache(bool)+0x2a>
    int8_t n = read(&n, 1);
    509e:	movs	r2, #1
    50a0:	add.w	r1, sp, #7
    50a4:	mov	r0, r4
    50a6:	bl	4ef4 <FatFile::read(void*, unsigned int)>
    50aa:	sxtb	r0, r0
    if  (n != 1) {
    50ac:	cmp	r0, #1
    50ae:	beq.n	50b4 <FatFile::readDirCache(bool)+0x24>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    50b0:	movs	r0, #0
    50b2:	b.n	50c6 <FatFile::readDirCache(bool)+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    50b4:	ldr	r3, [r4, #20]
    50b6:	adds	r3, #31
    50b8:	b.n	50bc <FatFile::readDirCache(bool)+0x2c>
  } else {
    m_curPosition += 32;
    50ba:	adds	r3, #32
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    50bc:	ldr	r0, [r4, #8]
    50be:	str	r3, [r4, #20]
    50c0:	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    50c2:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    50c6:	add	sp, #12
    50c8:	pop	{r4, r5, pc}

000050ca <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    50ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50ce:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    50d0:	ldr	r7, [r0, #16]
    50d2:	ldrb	r0, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    50d4:	mov	r6, r1
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    50d6:	cmp	r0, #0
    50d8:	beq.n	5168 <FatFile::seekSet(unsigned long)+0x9e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    50da:	ldr	r5, [r4, #20]
    50dc:	cmp	r5, r1
    50de:	beq.n	5170 <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    50e0:	cbnz	r1, 50e6 <FatFile::seekSet(unsigned long)+0x1c>
    // set position to start of file
    m_curCluster = 0;
    50e2:	str	r1, [r4, #16]
    goto done;
    50e4:	b.n	515c <FatFile::seekSet(unsigned long)+0x92>
  }
  if (isFile()) {
    50e6:	lsls	r2, r0, #28
    50e8:	bpl.n	50f2 <FatFile::seekSet(unsigned long)+0x28>
    if (pos > m_fileSize) {
    50ea:	ldr	r3, [r4, #28]
    50ec:	cmp	r1, r3
    50ee:	bhi.n	5168 <FatFile::seekSet(unsigned long)+0x9e>
    50f0:	b.n	5102 <FatFile::seekSet(unsigned long)+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    50f2:	lsls	r3, r0, #26
    50f4:	bpl.n	5102 <FatFile::seekSet(unsigned long)+0x38>
    50f6:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    50f8:	ldrh	r3, [r3, #8]
    50fa:	cmp.w	r1, r3, lsl #5
    50fe:	bhi.n	5168 <FatFile::seekSet(unsigned long)+0x9e>
    5100:	b.n	515c <FatFile::seekSet(unsigned long)+0x92>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5102:	ldr.w	lr, [r4, #8]
    5106:	subs	r3, r6, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5108:	ldrb	r1, [r4, #2]
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    510a:	ldrb.w	r2, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    510e:	lsls	r1, r1, #25
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5110:	add.w	r2, r2, #9
    5114:	uxtb	r2, r2
    5116:	lsr.w	r3, r3, r2
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    511a:	bpl.n	5124 <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = m_firstCluster + nNew;
    511c:	ldr	r2, [r4, #32]
    511e:	add	r3, r2
    5120:	str	r3, [r4, #16]
    goto done;
    5122:	b.n	515c <FatFile::seekSet(unsigned long)+0x92>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5124:	subs	r1, r5, #1
    5126:	lsr.w	r2, r1, r2

  if (nNew < nCur || m_curPosition == 0) {
    512a:	cmp	r3, r2
    512c:	bcc.n	5130 <FatFile::seekSet(unsigned long)+0x66>
    512e:	cbnz	r5, 5144 <FatFile::seekSet(unsigned long)+0x7a>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5130:	lsls	r2, r0, #25
    5132:	ite	mi
    5134:	ldrmi.w	r2, [lr, #32]
    5138:	ldrpl	r2, [r4, #32]
    513a:	str	r2, [r4, #16]
    513c:	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    513e:	add.w	r8, r4, #16
    5142:	b.n	5158 <FatFile::seekSet(unsigned long)+0x8e>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5144:	subs	r3, r3, r2
    5146:	b.n	513c <FatFile::seekSet(unsigned long)+0x72>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5148:	mov	r2, r8
    514a:	ldr	r1, [r4, #16]
    514c:	ldr	r0, [r4, #8]
    514e:	subs	r5, #1
    5150:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5154:	cmp	r0, #0
    5156:	ble.n	5168 <FatFile::seekSet(unsigned long)+0x9e>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5158:	cmp	r5, #0
    515a:	bne.n	5148 <FatFile::seekSet(unsigned long)+0x7e>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    515c:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    515e:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5160:	bic.w	r3, r3, #32
    5164:	strb	r3, [r4, #2]
    5166:	b.n	5170 <FatFile::seekSet(unsigned long)+0xa6>
  return true;

 fail:
  m_curCluster = tmp;
    5168:	str	r7, [r4, #16]
  return false;
    516a:	movs	r0, #0
    516c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5170:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    5172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005176 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5176:	push	{r3, r4, r5, r6, r7, lr}
    5178:	mov	r7, r1
    517a:	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    517c:	movs	r1, #0
    517e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5180:	mov	r4, r0
    5182:	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5184:	bl	7f6c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5188:	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
    518a:	strh	r6, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    518c:	and.w	r6, r6, #15
    5190:	add.w	r2, r0, #56	; 0x38
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5194:	ldr	r3, [r7, #32]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5196:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5198:	add.w	r2, r2, r6, lsl #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    519c:	str	r3, [r4, #12]
    519e:	ldrb	r1, [r2, #11]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    51a0:	lsls	r6, r1, #28
    51a2:	bmi.n	5224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    51a4:	and.w	r1, r1, #23
    51a8:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    51aa:	ldrb	r3, [r2, #11]
    51ac:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    51b0:	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    51b4:	it	eq
    51b6:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
    51ba:	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
    51bc:	and.w	r3, r5, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    51c0:	it	eq
    51c2:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    51c4:	cmp	r3, #1
    51c6:	beq.n	51da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    51c8:	cmp	r3, #2
    51ca:	beq.n	51d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
    51cc:	cbnz	r3, 5224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    51ce:	lsls	r3, r5, #21
    51d0:	bmi.n	5224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = FILE_FLAG_READ;
    51d2:	movs	r3, #1
    51d4:	b.n	51dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    51d6:	movs	r3, #3
    51d8:	b.n	51dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    51da:	movs	r3, #2
    51dc:	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    51de:	ldrb	r3, [r4, #2]
    51e0:	lsls	r7, r3, #30
    51e2:	bpl.n	51ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x76>
    if (isSubDir() || isReadOnly()) {
    51e4:	ldrb	r1, [r4, #0]
    51e6:	tst.w	r1, #17
    51ea:	bne.n	5224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    51ec:	and.w	r1, r5, #8

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    51f0:	lsls	r6, r5, #21
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    51f2:	orr.w	r3, r3, r1
    51f6:	strb	r3, [r4, #2]
    51f8:	ldr	r3, [r0, #52]	; 0x34

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    51fa:	ldrh	r1, [r2, #20]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    51fc:	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    51fe:	ldrh	r3, [r2, #26]
    5200:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    5204:	bpl.n	5210 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5206:	cbz	r1, 522c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    5208:	bl	5cba <FatPartition::freeChain(unsigned long)>
    520c:	cbnz	r0, 522c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    520e:	b.n	5224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5210:	str	r1, [r4, #32]
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5212:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5214:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5216:	lsls	r3, r5, #17
    5218:	bpl.n	5236 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
    521a:	ldr	r1, [r4, #28]
    521c:	mov	r0, r4
    521e:	bl	50ca <FatFile::seekSet(unsigned long)>
    5222:	cbnz	r0, 5236 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    5224:	movs	r0, #0
    5226:	strb	r0, [r4, #0]
  m_flags = 0;
    5228:	strb	r0, [r4, #2]
  return false;
    522a:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    522c:	ldrb	r3, [r4, #2]
    522e:	orn	r3, r3, #127	; 0x7f
    5232:	strb	r3, [r4, #2]
    5234:	b.n	5216 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5236:	movs	r0, #1

 fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    5238:	pop	{r3, r4, r5, r6, r7, pc}

0000523a <FatFile::openNext(FatFile*, int)>:
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    523a:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    523e:	ldrb	r3, [r0, #0]
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5240:	mov	r6, r0
    5242:	mov	r5, r1
    5244:	mov	r9, r2
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5246:	cbnz	r3, 52b8 <FatFile::openNext(FatFile*, int)+0x7e>
    5248:	ldrb	r3, [r1, #0]
    524a:	tst.w	r3, #112	; 0x70
    524e:	beq.n	52b8 <FatFile::openNext(FatFile*, int)+0x7e>
    5250:	ldr	r4, [r1, #20]
    5252:	ands.w	r4, r4, #31
    5256:	bne.n	52b8 <FatFile::openNext(FatFile*, int)+0x7e>
    5258:	mov	r7, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    525a:	movs	r1, #0
    525c:	mov	r0, r5
    525e:	ldr.w	r8, [r5, #20]
    5262:	bl	5090 <FatFile::readDirCache(bool)>
    if (!dir) {
    5266:	cbz	r0, 52b8 <FatFile::openNext(FatFile*, int)+0x7e>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5268:	ldrb	r3, [r0, #0]
    526a:	cbz	r3, 52b8 <FatFile::openNext(FatFile*, int)+0x7e>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    526c:	cmp	r3, #46	; 0x2e
    526e:	bne.n	5274 <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5270:	movs	r4, #0
    5272:	b.n	525a <FatFile::openNext(FatFile*, int)+0x20>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5274:	cmp	r3, #229	; 0xe5
    5276:	beq.n	5270 <FatFile::openNext(FatFile*, int)+0x36>
    5278:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    527a:	and.w	lr, r2, #8
    527e:	and.w	r1, lr, #255	; 0xff
    5282:	cmp.w	lr, #0
    5286:	bne.n	52a8 <FatFile::openNext(FatFile*, int)+0x6e>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5288:	cbz	r4, 52bc <FatFile::openNext(FatFile*, int)+0x82>
    528a:	subs	r2, r0, #1
    528c:	adds	r0, #10
    528e:	lsls	r3, r1, #7
    5290:	orr.w	r1, r3, r1, lsr #1
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5294:	ldrb.w	r3, [r2, #1]!
    5298:	uxtab	r1, r3, r1
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    529c:	cmp	r0, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    529e:	uxtb	r1, r1
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    52a0:	bne.n	528e <FatFile::openNext(FatFile*, int)+0x54>
    52a2:	cmp	r7, r1
    52a4:	bne.n	52b8 <FatFile::openNext(FatFile*, int)+0x7e>
    52a6:	b.n	52bc <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    52a8:	cmp	r2, #15
    52aa:	bne.n	5270 <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    52ac:	lsls	r2, r3, #25
    52ae:	bpl.n	525a <FatFile::openNext(FatFile*, int)+0x20>
        lfnOrd = ldir->order & 0X1F;
    52b0:	and.w	r4, r3, #31
        checksum = ldir->checksum;
    52b4:	ldrb	r7, [r0, #13]
    52b6:	b.n	525a <FatFile::openNext(FatFile*, int)+0x20>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    52b8:	movs	r0, #0
    52ba:	b.n	52cc <FatFile::openNext(FatFile*, int)+0x92>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    52bc:	str	r4, [sp, #0]
    52be:	mov	r3, r9
    52c0:	ubfx	r2, r8, #5, #16
    52c4:	mov	r1, r5
    52c6:	mov	r0, r6
    52c8:	bl	5176 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    }
  }

 fail:
  return false;
}
    52cc:	add	sp, #12
    52ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000052d2 <FatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    52d2:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    52d4:	ldrb	r3, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    52d6:	mov	r4, r0
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    52d8:	lsls	r2, r3, #27
    52da:	bpl.n	531c <FatFile::rmdir()+0x4a>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    52dc:	movs	r1, #0
    52de:	bl	50ca <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    52e2:	movs	r1, #1
    52e4:	mov	r0, r4
    52e6:	bl	5090 <FatFile::readDirCache(bool)>
    if (!dir) {
    52ea:	cbnz	r0, 52f2 <FatFile::rmdir()+0x20>
      // EOF if no error.
      if (!getError()) {
    52ec:	ldrb	r3, [r4, #1]
    52ee:	cbz	r3, 5306 <FatFile::rmdir()+0x34>
    52f0:	b.n	531c <FatFile::rmdir()+0x4a>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    52f2:	ldrb	r3, [r0, #0]
    52f4:	cbz	r3, 5306 <FatFile::rmdir()+0x34>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    52f6:	cmp	r3, #229	; 0xe5
    52f8:	beq.n	52e2 <FatFile::rmdir()+0x10>
    52fa:	cmp	r3, #46	; 0x2e
    52fc:	beq.n	52e2 <FatFile::rmdir()+0x10>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    52fe:	ldrb	r3, [r0, #11]
    5300:	lsls	r3, r3, #28
    5302:	bmi.n	52e2 <FatFile::rmdir()+0x10>
    5304:	b.n	531c <FatFile::rmdir()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5306:	movs	r3, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5308:	mov	r0, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    530a:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    530c:	ldrb	r3, [r4, #2]
    530e:	orr.w	r3, r3, #2
    5312:	strb	r3, [r4, #2]
  return remove();

 fail:
  return false;
}
    5314:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5318:	b.w	64dc <FatFile::remove()>

 fail:
  return false;
}
    531c:	movs	r0, #0
    531e:	pop	{r4, pc}

00005320 <FatFile::sync()>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5320:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5322:	ldrb	r3, [r0, #0]
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5324:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5326:	cmp	r3, #0
    5328:	beq.n	5394 <FatFile::sync()+0x74>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    532a:	ldrsb.w	r3, [r0, #2]
    532e:	cmp	r3, #0
    5330:	bge.n	5388 <FatFile::sync()+0x68>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5332:	movs	r1, #1
    5334:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5338:	mov	r5, r0
    533a:	cbnz	r0, 5348 <FatFile::sync()+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    533c:	ldrb	r3, [r4, #1]
  return false;
    533e:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5340:	orr.w	r3, r3, #1
    5344:	strb	r3, [r4, #1]
    5346:	b.n	5396 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5348:	ldrb	r3, [r0, #0]
    534a:	cmp	r3, #229	; 0xe5
    534c:	beq.n	533c <FatFile::sync()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    534e:	ldrb	r3, [r4, #0]
    5350:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5352:	itt	mi
    5354:	ldrmi	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5356:	strmi	r3, [r0, #28]
    }
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5358:	ldr	r3, [r4, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    535a:	strh	r3, [r0, #26]
    535c:	lsrs	r3, r3, #16
    535e:	strh	r3, [r0, #20]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5360:	ldr	r3, [pc, #56]	; (539c <FatFile::sync()+0x7c>)
    5362:	ldr	r3, [r3, #0]
    5364:	cbz	r3, 5380 <FatFile::sync()+0x60>
      FsDateTime::callback(&date, &time, &ms10);
    5366:	add.w	r2, sp, #3
    536a:	add.w	r1, sp, #6
    536e:	add	r0, sp, #4
    5370:	blx	r3
      setLe16(dir->modifyDate, date);
    5372:	ldrh.w	r3, [sp, #4]
    5376:	strh	r3, [r5, #24]
    5378:	strh	r3, [r5, #18]
    537a:	ldrh.w	r3, [sp, #6]
    537e:	strh	r3, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5380:	ldrb	r3, [r4, #2]
    5382:	and.w	r3, r3, #127	; 0x7f
    5386:	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
    5388:	ldr	r0, [r4, #8]
    538a:	bl	4d90 <FatPartition::cacheSync()>
    538e:	cmp	r0, #0
    5390:	beq.n	533c <FatFile::sync()+0x1c>
    5392:	b.n	5396 <FatFile::sync()+0x76>
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5394:	movs	r0, #1
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5396:	add	sp, #12
    5398:	pop	{r4, r5, pc}
    539a:	nop
    539c:	.word	0x20003548

000053a0 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    53a0:	push	{r4, lr}
    53a2:	mov	r4, r0
  bool rtn = sync();
    53a4:	bl	5320 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    53a8:	movs	r3, #0
    53aa:	strb	r3, [r4, #0]
  m_flags = 0;
    53ac:	strb	r3, [r4, #2]
  return rtn;
}
    53ae:	pop	{r4, pc}

000053b0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    53b0:	push	{r4, r5, r6, r7, lr}
    53b2:	mov	r7, r3
    53b4:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    53b6:	movs	r3, #0
    53b8:	mov	r6, r0
    53ba:	mov	r4, r1
    53bc:	str	r2, [sp, #4]
    53be:	strb.w	r3, [sp, #8]
    53c2:	strb.w	r3, [sp, #9]
    53c6:	strb.w	r3, [sp, #10]
    53ca:	strh.w	r3, [sp, #56]	; 0x38
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    53ce:	ldrb	r3, [r0, #0]
    53d0:	cbz	r3, 53d6 <FatFile::open(FatFile*, char const*, int)+0x26>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    53d2:	movs	r0, #0
    53d4:	b.n	5454 <FatFile::open(FatFile*, char const*, int)+0xa4>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    53d6:	ldrb	r3, [r1, #0]
    53d8:	tst.w	r3, #112	; 0x70
    53dc:	beq.n	53d2 <FatFile::open(FatFile*, char const*, int)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    53de:	ldrb	r3, [r2, #0]
    53e0:	cmp	r3, #47	; 0x2f
    53e2:	bne.n	540a <FatFile::open(FatFile*, char const*, int)+0x5a>
    while (isDirSeparator(*path)) {
    53e4:	ldr	r3, [sp, #4]
    53e6:	ldrb	r2, [r3, #0]
    53e8:	cmp	r2, #47	; 0x2f
    53ea:	bne.n	53f2 <FatFile::open(FatFile*, char const*, int)+0x42>
      path++;
    53ec:	adds	r3, #1
    53ee:	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    53f0:	b.n	53e4 <FatFile::open(FatFile*, char const*, int)+0x34>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    53f2:	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    53f4:	cbnz	r2, 53fe <FatFile::open(FatFile*, char const*, int)+0x4e>
      return openRoot(dirFile->m_vol);
    53f6:	mov	r0, r6
    53f8:	bl	4e96 <FatFile::openRoot(FatVolume*)>
    53fc:	b.n	5454 <FatFile::open(FatFile*, char const*, int)+0xa4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    53fe:	add	r0, sp, #8
    5400:	bl	4e96 <FatFile::openRoot(FatVolume*)>
    5404:	cmp	r0, #0
    5406:	beq.n	53d2 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5408:	add	r4, sp, #8
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    540a:	add	r3, sp, #4
    540c:	add	r2, sp, #44	; 0x2c
    540e:	ldr	r1, [sp, #4]
    5410:	mov	r0, r6
    5412:	bl	6444 <FatFile::parsePathName(char const*, FatName_t*, char const**)>
    5416:	cmp	r0, #0
    5418:	beq.n	53d2 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    541a:	ldr	r3, [sp, #4]
    541c:	ldrb	r3, [r3, #0]
    541e:	cbz	r3, 5448 <FatFile::open(FatFile*, char const*, int)+0x98>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5420:	movs	r3, #0
    5422:	add	r2, sp, #44	; 0x2c
    5424:	mov	r1, r4
    5426:	mov	r0, r6
    5428:	bl	61f4 <FatFile::open(FatFile*, FatName_t*, int)>
    542c:	cmp	r0, #0
    542e:	beq.n	53d2 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5430:	mov	r5, r6
    5432:	add	r4, sp, #8
    5434:	ldmia	r5!, {r0, r1, r2, r3}
    5436:	stmia	r4!, {r0, r1, r2, r3}
    5438:	ldmia	r5!, {r0, r1, r2, r3}
    543a:	stmia	r4!, {r0, r1, r2, r3}
    543c:	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
    543e:	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5440:	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
    5442:	bl	53a0 <FatFile::close()>
    5446:	b.n	5408 <FatFile::open(FatFile*, char const*, int)+0x58>
  }
  return open(dirFile, &fname, oflag);
    5448:	mov	r3, r7
    544a:	add	r2, sp, #44	; 0x2c
    544c:	mov	r1, r4
    544e:	mov	r0, r6
    5450:	bl	61f4 <FatFile::open(FatFile*, FatName_t*, int)>

 fail:
  return false;
}
    5454:	add	sp, #84	; 0x54
    5456:	pop	{r4, r5, r6, r7, pc}

00005458 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5458:	cbz	r1, 5462 <FatFile::open(FatVolume*, char const*, int)+0xa>
    545a:	add.w	r1, r1, #1096	; 0x448
    545e:	b.w	53b0 <FatFile::open(FatFile*, char const*, int)>
}
    5462:	mov	r0, r1
    5464:	bx	lr

00005466 <FatFile::dirEntry(DirFat_t*)>:
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    5466:	push	{r4, r5, r6, lr}
    5468:	mov	r6, r0
    546a:	mov	r4, r1
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    546c:	bl	5320 <FatFile::sync()>
    5470:	mov	r5, r0
    5472:	cbnz	r0, 5478 <FatFile::dirEntry(DirFat_t*)+0x12>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

 fail:
  return false;
    5474:	movs	r5, #0
    5476:	b.n	5496 <FatFile::dirEntry(DirFat_t*)+0x30>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5478:	movs	r1, #0
    547a:	mov	r0, r6
    547c:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5480:	cmp	r0, #0
    5482:	beq.n	5474 <FatFile::dirEntry(DirFat_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    5484:	mov	r1, r4
    5486:	add.w	r3, r0, #32
    548a:	ldr.w	r2, [r0], #4
    548e:	cmp	r0, r3
    5490:	str.w	r2, [r1], #4
    5494:	bne.n	548a <FatFile::dirEntry(DirFat_t*)+0x24>
  return true;

 fail:
  return false;
}
    5496:	mov	r0, r5
    5498:	pop	{r4, r5, r6, pc}

0000549a <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    549a:	push	{r4, r5, lr}
    549c:	sub	sp, #36	; 0x24
    549e:	mov	r5, r1
    54a0:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    54a2:	mov	r1, sp
    54a4:	bl	5466 <FatFile::dirEntry(DirFat_t*)>
    54a8:	cbz	r0, 54b6 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.createDate);
    54aa:	ldrh.w	r3, [sp, #16]
    54ae:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    54b0:	ldrh.w	r3, [sp, #14]
    54b4:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    54b6:	add	sp, #36	; 0x24
    54b8:	pop	{r4, r5, pc}

000054ba <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    54ba:	push	{r4, r5, lr}
    54bc:	sub	sp, #36	; 0x24
    54be:	mov	r5, r1
    54c0:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    54c2:	mov	r1, sp
    54c4:	bl	5466 <FatFile::dirEntry(DirFat_t*)>
    54c8:	cbz	r0, 54d6 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    54ca:	ldrh.w	r3, [sp, #24]
    54ce:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    54d0:	ldrh.w	r3, [sp, #22]
    54d4:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    54d6:	add	sp, #36	; 0x24
    54d8:	pop	{r4, r5, pc}

000054da <FatFile::mkdir(FatFile*, FatName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    54da:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    54de:	ldrb	r3, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    54e0:	sub	sp, #32
    54e2:	mov	r4, r0
    54e4:	mov	r6, r1
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    54e6:	tst.w	r3, #112	; 0x70
    54ea:	beq.n	5526 <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    54ec:	movw	r3, #2562	; 0xa02
    54f0:	bl	61f4 <FatFile::open(FatFile*, FatName_t*, int)>
    54f4:	cbz	r0, 5526 <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    54f6:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    54f8:	movs	r5, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    54fa:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    54fc:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    54fe:	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5500:	bl	4dec <FatFile::addDirCluster()>
    5504:	cbz	r0, 5526 <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5506:	ldr	r3, [r4, #16]
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5508:	movs	r1, #0
    550a:	mov	r0, r4
    550c:	str	r3, [r4, #32]
    550e:	bl	50ca <FatFile::seekSet(unsigned long)>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    5512:	mov	r0, r4
    5514:	bl	5320 <FatFile::sync()>
    5518:	cbz	r0, 5526 <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    551a:	mov	r1, r7
    551c:	mov	r0, r4
    551e:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5522:	mov	r3, r0
    5524:	cbnz	r0, 552a <FatFile::mkdir(FatFile*, FatName_t*)+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
    5526:	movs	r0, #0
    5528:	b.n	55d6 <FatFile::mkdir(FatFile*, FatName_t*)+0xfc>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    552a:	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    552c:	mov	r2, r0
    552e:	mov	r7, sp
    5530:	add.w	ip, r0, #32
    5534:	mov	r5, sp
    5536:	ldr	r0, [r2, #0]
    5538:	adds	r2, #8
    553a:	ldr.w	r1, [r2, #-4]
    553e:	mov	lr, r7
    5540:	cmp	r2, ip
    5542:	stmia.w	lr!, {r0, r1}
    5546:	mov	r7, lr
    5548:	bne.n	5536 <FatFile::mkdir(FatFile*, FatName_t*)+0x5c>
    554a:	ldrh	r7, [r3, #20]
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    554c:	movs	r1, #32
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    554e:	ldrh.w	r8, [r3, #26]
  dot.name[0] = '.';
    5552:	movs	r3, #46	; 0x2e
    5554:	strb.w	r3, [sp]
    5558:	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    555a:	adds	r2, r5, r3
    555c:	adds	r3, #1
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    555e:	cmp	r3, #10
    dot.name[i] = ' ';
    5560:	strb	r1, [r2, #1]
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5562:	bne.n	555a <FatFile::mkdir(FatFile*, FatName_t*)+0x80>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5564:	ldr	r0, [r4, #8]
    5566:	movs	r2, #1
    5568:	ldr	r1, [r4, #32]
    556a:	ldrb	r3, [r0, #6]
    556c:	adds	r0, #40	; 0x28
    556e:	subs	r1, #2
    5570:	lsls	r1, r3
    5572:	ldr.w	r3, [r0, #-20]
    5576:	add	r1, r3
    5578:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    557c:	mov	r3, r0
    557e:	cmp	r0, #0
    5580:	beq.n	5526 <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    5582:	strh.w	r7, [sp, #20]
    5586:	mov	lr, r5
    5588:	mov	r7, r0
    558a:	add.w	ip, sp, #32
    558e:	strh.w	r8, [sp, #26]
    5592:	mov	r2, lr
    5594:	adds	r7, #8
    5596:	ldmia	r2!, {r0, r1}
    5598:	cmp	r2, ip
    559a:	str.w	r0, [r7, #-8]
    559e:	str.w	r1, [r7, #-4]
    55a2:	mov	lr, r2
    55a4:	bne.n	5592 <FatFile::mkdir(FatFile*, FatName_t*)+0xb8>
  // make entry for '..'
  dot.name[1] = '.';
    55a6:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    55a8:	adds	r3, #32
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    55aa:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    55ae:	ldr	r2, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    55b0:	add	r6, sp, #32
    55b2:	lsrs	r1, r2, #16
    55b4:	strh.w	r2, [sp, #26]
    55b8:	strh.w	r1, [sp, #20]
    55bc:	mov	r2, r5
    55be:	adds	r3, #8
    55c0:	ldmia	r2!, {r0, r1}
    55c2:	cmp	r2, r6
    55c4:	str.w	r0, [r3, #-8]
    55c8:	str.w	r1, [r3, #-4]
    55cc:	mov	r5, r2
    55ce:	bne.n	55bc <FatFile::mkdir(FatFile*, FatName_t*)+0xe2>
  // write first sector
  return m_vol->cacheSync();
    55d0:	ldr	r0, [r4, #8]
    55d2:	bl	4d90 <FatPartition::cacheSync()>

 fail:
  return false;
}
    55d6:	add	sp, #32
    55d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055dc <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    55dc:	push	{r4, r5, r6, r7, lr}
    55de:	mov	r7, r3
    55e0:	sub	sp, #84	; 0x54
    55e2:	movs	r3, #0
    55e4:	mov	r6, r0
    55e6:	mov	r4, r1
    55e8:	str	r2, [sp, #4]
    55ea:	strh.w	r3, [sp, #20]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    55ee:	strb.w	r3, [sp, #44]	; 0x2c
    55f2:	strb.w	r3, [sp, #45]	; 0x2d
    55f6:	strb.w	r3, [sp, #46]	; 0x2e
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    55fa:	ldrb	r3, [r0, #0]
    55fc:	cmp	r3, #0
    55fe:	bne.n	5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    5600:	ldrb	r3, [r1, #0]
    5602:	tst.w	r3, #112	; 0x70
    5606:	beq.n	5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5608:	ldrb	r3, [r2, #0]
    560a:	cmp	r3, #47	; 0x2f
    560c:	bne.n	5628 <FatFile::mkdir(FatFile*, char const*, bool)+0x4c>
    while (isDirSeparator(*path)) {
    560e:	ldr	r3, [sp, #4]
    5610:	ldrb	r2, [r3, #0]
    5612:	cmp	r2, #47	; 0x2f
    5614:	bne.n	561c <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    5616:	adds	r3, #1
    5618:	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    561a:	b.n	560e <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    561c:	ldr	r1, [r4, #8]
    561e:	add	r0, sp, #44	; 0x2c
    5620:	bl	4e96 <FatFile::openRoot(FatVolume*)>
    5624:	cbz	r0, 5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5626:	add	r4, sp, #44	; 0x2c
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5628:	add	r3, sp, #4
    562a:	add	r2, sp, #8
    562c:	ldr	r1, [sp, #4]
    562e:	mov	r0, r6
    5630:	bl	6444 <FatFile::parsePathName(char const*, FatName_t*, char const**)>
    5634:	cbz	r0, 5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5636:	ldr	r3, [sp, #4]
    5638:	ldrb	r3, [r3, #0]
    563a:	cbz	r3, 5674 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    563c:	movs	r3, #0
    563e:	add	r2, sp, #8
    5640:	mov	r1, r4
    5642:	mov	r0, r6
    5644:	bl	61f4 <FatFile::open(FatFile*, FatName_t*, int)>
    5648:	cbz	r0, 5662 <FatFile::mkdir(FatFile*, char const*, bool)+0x86>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    564a:	mov	r5, r6
    564c:	add	r4, sp, #44	; 0x2c
    564e:	ldmia	r5!, {r0, r1, r2, r3}
    5650:	stmia	r4!, {r0, r1, r2, r3}
    5652:	ldmia	r5!, {r0, r1, r2, r3}
    5654:	stmia	r4!, {r0, r1, r2, r3}
    5656:	ldr	r3, [r5, #0]
    parent = &tmpDir;
    close();
    5658:	mov	r0, r6
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    565a:	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
    565c:	bl	53a0 <FatFile::close()>
    5660:	b.n	5626 <FatFile::mkdir(FatFile*, char const*, bool)+0x4a>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    5662:	cbz	r7, 5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    5664:	add	r2, sp, #8
    5666:	mov	r1, r4
    5668:	mov	r0, r6
    566a:	bl	54da <FatFile::mkdir(FatFile*, FatName_t*)>
    566e:	cmp	r0, #0
    5670:	bne.n	564a <FatFile::mkdir(FatFile*, char const*, bool)+0x6e>
    5672:	b.n	5680 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5674:	add	r2, sp, #8
    5676:	mov	r1, r4
    5678:	mov	r0, r6
    567a:	bl	54da <FatFile::mkdir(FatFile*, FatName_t*)>
    567e:	b.n	5682 <FatFile::mkdir(FatFile*, char const*, bool)+0xa6>

 fail:
  return false;
    5680:	movs	r0, #0
}
    5682:	add	sp, #84	; 0x54
    5684:	pop	{r4, r5, r6, r7, pc}

00005686 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5686:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    568a:	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    568c:	sub	sp, #108	; 0x6c
    568e:	movs	r7, #0
    5690:	mov	r4, r0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5692:	tst.w	r3, #24
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5696:	mov	r8, r1
    5698:	mov	r9, r2
    569a:	strb.w	r7, [sp, #32]
    569e:	strb.w	r7, [sp, #33]	; 0x21
    56a2:	strb.w	r7, [sp, #34]	; 0x22
    56a6:	strb.w	r7, [sp, #68]	; 0x44
    56aa:	strb.w	r7, [sp, #69]	; 0x45
    56ae:	strb.w	r7, [sp, #70]	; 0x46
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    56b2:	bne.n	56b8 <FatFile::rename(FatFile*, char const*)+0x32>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    56b4:	movs	r0, #0
    56b6:	b.n	5820 <FatFile::rename(FatFile*, char const*)+0x19a>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    56b8:	ldr	r2, [r0, #8]
    56ba:	ldr	r3, [r1, #8]
    56bc:	cmp	r2, r3
    56be:	bne.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    56c0:	mov	r6, r4
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
    56c2:	bl	5320 <FatFile::sync()>
  oldFile = *this;
    56c6:	add	r5, sp, #68	; 0x44
    56c8:	ldmia	r6!, {r0, r1, r2, r3}
    56ca:	stmia	r5!, {r0, r1, r2, r3}
    56cc:	ldmia	r6!, {r0, r1, r2, r3}
    56ce:	stmia	r5!, {r0, r1, r2, r3}
    56d0:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    56d2:	mov	r1, r7
    56d4:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    56d6:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    56d8:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    56dc:	cmp	r0, #0
    56de:	beq.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    56e0:	mov	r3, r0
    56e2:	mov	r2, sp
    56e4:	add.w	r7, r0, #32
    56e8:	mov	r5, sp
    56ea:	ldr	r0, [r3, #0]
    56ec:	adds	r3, #8
    56ee:	ldr.w	r1, [r3, #-4]
    56f2:	mov	r6, r2
    56f4:	cmp	r3, r7
    56f6:	stmia	r6!, {r0, r1}
    56f8:	mov	r2, r6
    56fa:	bne.n	56ea <FatFile::rename(FatFile*, char const*)+0x64>
  // make directory entry for new path
  if (isFile()) {
    56fc:	ldrb	r2, [r4, #0]
    56fe:	add	r6, sp, #32
    5700:	and.w	r2, r2, #8
    5704:	and.w	r3, r2, #255	; 0xff
    5708:	cbz	r2, 5720 <FatFile::rename(FatFile*, char const*)+0x9a>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    570a:	movw	r3, #2561	; 0xa01
    570e:	mov	r2, r9
    5710:	mov	r1, r8
    5712:	mov	r0, r6
    5714:	bl	53b0 <FatFile::open(FatFile*, char const*, int)>
    5718:	cmp	r0, #0
    571a:	beq.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
  DirFat_t entry;
  uint32_t dirCluster = 0;
    571c:	movs	r7, #0
    571e:	b.n	5730 <FatFile::rename(FatFile*, char const*)+0xaa>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    5720:	mov	r2, r9
    5722:	mov	r1, r8
    5724:	mov	r0, r6
    5726:	bl	55dc <FatFile::mkdir(FatFile*, char const*, bool)>
    572a:	cmp	r0, #0
    572c:	beq.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    572e:	ldr	r7, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5730:	ldr	r3, [sp, #56]	; 0x38
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5732:	movs	r1, #1
    5734:	mov	r0, r4
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5736:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    5738:	ldrh.w	r3, [sp, #36]	; 0x24
    573c:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    573e:	ldrb.w	r3, [sp, #35]	; 0x23
    5742:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    5744:	ldr	r3, [sp, #44]	; 0x2c
    5746:	str	r3, [r4, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5748:	movs	r3, #0
    574a:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    574e:	strb.w	r3, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5752:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5756:	cmp	r0, #0
    5758:	beq.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    575a:	add.w	r3, sp, #13
    575e:	add.w	r2, r0, #13
    5762:	add.w	r1, sp, #29
    5766:	ldr.w	lr, [r3], #4
    576a:	cmp	r3, r1
    576c:	str.w	lr, [r2], #4
    5770:	bne.n	5766 <FatFile::rename(FatFile*, char const*)+0xe0>
    5772:	ldrh	r1, [r3, #0]
    5774:	strh	r1, [r2, #0]
    5776:	ldrb	r3, [r3, #2]
    5778:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    577a:	ldrb.w	r3, [sp, #11]
    577e:	strb	r3, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    5780:	cmp	r7, #0
    5782:	beq.n	57fe <FatFile::rename(FatFile*, char const*)+0x178>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5784:	ldr	r0, [r4, #8]
    5786:	subs	r3, r7, #2
    5788:	movs	r2, #0
    578a:	ldrb	r1, [r0, #6]
    578c:	adds	r0, #40	; 0x28
    578e:	lsls	r3, r1
    5790:	ldr.w	r1, [r0, #-20]
    5794:	add	r1, r3
    5796:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    579a:	cmp	r0, #0
    579c:	beq.n	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    579e:	add.w	r3, r0, #32
    57a2:	mov	lr, r5
    57a4:	add.w	ip, r0, #64	; 0x40
    57a8:	ldr	r0, [r3, #0]
    57aa:	adds	r3, #8
    57ac:	ldr.w	r1, [r3, #-4]
    57b0:	mov	r2, lr
    57b2:	cmp	r3, ip
    57b4:	stmia	r2!, {r0, r1}
    57b6:	mov	lr, r2
    57b8:	bne.n	57a8 <FatFile::rename(FatFile*, char const*)+0x122>

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    57ba:	mov	r1, r7
    57bc:	ldr	r0, [r4, #8]
    57be:	bl	5cba <FatPartition::freeChain(unsigned long)>
    57c2:	cmp	r0, #0
    57c4:	beq.w	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    57c8:	ldr	r0, [r4, #8]
    57ca:	movs	r2, #1
    57cc:	ldr	r1, [r4, #32]
    57ce:	ldrb	r3, [r0, #6]
    57d0:	adds	r0, #40	; 0x28
    57d2:	subs	r1, #2
    57d4:	lsls	r1, r3
    57d6:	ldr.w	r3, [r0, #-20]
    57da:	add	r1, r3
    57dc:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    57e0:	cmp	r0, #0
    57e2:	beq.w	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    57e6:	add.w	r3, r0, #32
    57ea:	mov	r2, r5
    57ec:	adds	r3, #8
    57ee:	ldmia	r2!, {r0, r1}
    57f0:	cmp	r2, r6
    57f2:	str.w	r0, [r3, #-8]
    57f6:	str.w	r1, [r3, #-4]
    57fa:	mov	r5, r2
    57fc:	bne.n	57ea <FatFile::rename(FatFile*, char const*)+0x164>
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    57fe:	movs	r3, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    5800:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5802:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    5804:	movs	r3, #2
    5806:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    580a:	movs	r3, #8
    580c:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    5810:	bl	64dc <FatFile::remove()>
    5814:	cmp	r0, #0
    5816:	beq.w	56b4 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    581a:	ldr	r0, [r4, #8]
    581c:	bl	4d90 <FatPartition::cacheSync()>

 fail:
  return false;
}
    5820:	add	sp, #108	; 0x6c
    5822:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005826 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5826:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    582a:	mov	r4, r3
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    582c:	ldrb	r3, [r0, #0]
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    582e:	mov	r6, r0
    5830:	mov	r7, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    5832:	lsls	r3, r3, #28
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    5834:	ldrb.w	fp, [sp, #40]	; 0x28
    5838:	ldrb.w	r9, [sp, #44]	; 0x2c
    583c:	ldrb.w	sl, [sp, #48]	; 0x30
    5840:	ldrb.w	r5, [sp, #52]	; 0x34
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    5844:	bmi.n	584c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    5846:	movs	r0, #0
    5848:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile()
      || year < 1980
    584c:	subw	r2, r2, #1980	; 0x7bc
    5850:	uxth.w	r8, r2
    5854:	cmp.w	r8, #127	; 0x7f
    5858:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || year > 2107
      || month < 1
    585a:	subs	r3, r4, #1
    585c:	cmp	r3, #11
    585e:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || month > 12
      || day < 1
    5860:	add.w	r3, fp, #4294967295
    5864:	cmp	r3, #30
    5866:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || day > 31
      || hour > 23
    5868:	cmp.w	r9, #23
    586c:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || minute > 59
    586e:	cmp.w	sl, #59	; 0x3b
    5872:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || second > 59) {
    5874:	cmp	r5, #59	; 0x3b
    5876:	bhi.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    5878:	bl	5320 <FatFile::sync()>
    587c:	cmp	r0, #0
    587e:	beq.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5880:	movs	r1, #1
    5882:	mov	r0, r6
    5884:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5888:	cmp	r0, #0
    588a:	beq.n	5846 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    588c:	orr.w	r4, fp, r4, lsl #5
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    5890:	asrs	r3, r5, #1
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    5892:	orr.w	r8, r4, r8, lsl #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  dirDate = FS_DATE(year, month, day);
  dirTime = FS_TIME(hour, minute, second);
  if (flags & T_ACCESS) {
    5896:	lsls	r4, r7, #31
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    5898:	orr.w	r3, r3, sl, lsl #5
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    589c:	uxth.w	r8, r8
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    58a0:	orr.w	r3, r3, r9, lsl #11
    58a4:	it	mi
    58a6:	strhmi.w	r8, [r0, #18]
    setLe16(dir->accessDate, dirDate);
  }
  if (flags & T_CREATE) {
    58aa:	lsls	r1, r7, #30
    58ac:	uxth	r3, r3
    58ae:	bpl.n	58c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9a>
    setLe16(dir->createDate, dirDate);
    setLe16(dir->createTime, dirTime);
    // units of 10 ms
    dir->createTimeMs = second & 1 ? 100 : 0;
    58b0:	ands.w	r5, r5, #1
    58b4:	strh.w	r8, [r0, #16]
    58b8:	strh	r3, [r0, #14]
    58ba:	it	ne
    58bc:	movne	r5, #100	; 0x64
    58be:	strb	r5, [r0, #13]
  }
  if (flags & T_WRITE) {
    58c0:	lsls	r2, r7, #29
    58c2:	itt	mi
    58c4:	strhmi.w	r8, [r0, #24]
    58c8:	strhmi	r3, [r0, #22]
    setLe16(dir->modifyDate, dirDate);
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();
    58ca:	ldr	r0, [r6, #8]
    58cc:	bl	4d90 <FatPartition::cacheSync()>
    58d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000058d4 <FatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    58d4:	push	{r0, r1, r4, lr}
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    58d6:	ldrb	r3, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    58d8:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    58da:	lsls	r3, r3, #30
    58dc:	bmi.n	58e2 <FatFile::truncate()+0xe>
  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    58de:	movs	r0, #0
    58e0:	b.n	5938 <FatFile::truncate()+0x64>
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    58e2:	ldr	r3, [r0, #32]
    58e4:	cbz	r3, 5936 <FatFile::truncate()+0x62>
      return true;
  }
  if (m_curCluster) {
    58e6:	ldr	r1, [r0, #16]
    58e8:	cbz	r1, 590e <FatFile::truncate()+0x3a>
    toFree = 0;
    58ea:	add	r2, sp, #8
    58ec:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58ee:	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    58f0:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58f4:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    58f8:	cmp	r0, #0
    58fa:	blt.n	58de <FatFile::truncate()+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    58fc:	beq.n	5912 <FatFile::truncate()+0x3e>
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    58fe:	mvn.w	r2, #4026531840	; 0xf0000000
    5902:	ldr	r1, [r4, #16]
    5904:	ldr	r0, [r4, #8]
    5906:	bl	5bde <FatPartition::fatPut(unsigned long, unsigned long)>
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    590a:	cbnz	r0, 5912 <FatFile::truncate()+0x3e>
    590c:	b.n	58de <FatFile::truncate()+0xa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    590e:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5910:	str	r1, [r0, #32]
  }
  if (toFree) {
    5912:	ldr	r1, [sp, #4]
    5914:	cbnz	r1, 592a <FatFile::truncate()+0x56>
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5916:	ldr	r3, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    5918:	mov	r0, r4
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    591a:	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    591c:	ldrb	r3, [r4, #2]
    591e:	orn	r3, r3, #127	; 0x7f
    5922:	strb	r3, [r4, #2]
  return sync();
    5924:	bl	5320 <FatFile::sync()>
    5928:	b.n	5938 <FatFile::truncate()+0x64>
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    592a:	ldr	r0, [r4, #8]
    592c:	bl	5cba <FatPartition::freeChain(unsigned long)>
    5930:	cmp	r0, #0
    5932:	bne.n	5916 <FatFile::truncate()+0x42>
    5934:	b.n	58de <FatFile::truncate()+0xa>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5936:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5938:	add	sp, #8
    593a:	pop	{r4, pc}

0000593c <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    593c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5940:	ldrb	r3, [r0, #2]
    5942:	mov	r9, r1
    5944:	mov	r4, r0
    5946:	mov	r5, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5948:	lsls	r1, r3, #30
    594a:	bpl.w	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    594e:	lsls	r2, r3, #28
    5950:	bmi.n	5968 <FatFile::write(void const*, unsigned int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5952:	ldr	r3, [r4, #20]
    5954:	mvns	r3, r3
    5956:	cmp	r5, r3
    5958:	bhi.w	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
    595c:	mov	r7, r5
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    595e:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    5962:	mov.w	fp, #4294967295
    5966:	b.n	59f6 <FatFile::write(void const*, unsigned int)+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5968:	ldr	r1, [r0, #28]
    596a:	bl	50ca <FatFile::seekSet(unsigned long)>
    596e:	cmp	r0, #0
    5970:	bne.n	5952 <FatFile::write(void const*, unsigned int)+0x16>
    5972:	b.n	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5974:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5976:	ubfx	r8, r2, #0, #9
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    597a:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    597c:	ands.w	r6, r6, r2, lsr #9
    5980:	beq.n	59fe <FatFile::write(void const*, unsigned int)+0xc2>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5982:	ldr.w	lr, [r4, #8]
                      + sectorOfCluster;
    5986:	ldr	r1, [r4, #16]
    5988:	ldrb.w	r3, [lr, #6]
    598c:	subs	r1, #2
    598e:	lsls	r1, r3
    5990:	ldr.w	r3, [lr, #20]
    5994:	add	r1, r3
    5996:	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5998:	cmp.w	r8, #0
    599c:	bne.n	5a30 <FatFile::write(void const*, unsigned int)+0xf4>
    599e:	cmp.w	r7, #512	; 0x200
    59a2:	bcs.n	5a7e <FatFile::write(void const*, unsigned int)+0x142>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    59a4:	ldr	r2, [r4, #20]
    59a6:	ldr	r3, [r4, #28]
    59a8:	cmp	r2, r3
    59aa:	bcs.n	5a34 <FatFile::write(void const*, unsigned int)+0xf8>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    59ac:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    59ae:	tst.w	r3, #32
    59b2:	ite	eq
    59b4:	moveq	r2, #1
    59b6:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    59b8:	add.w	r0, lr, #40	; 0x28
    59bc:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    59c0:	cmp	r0, #0
    59c2:	beq.n	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    59c4:	rsb	r6, r8, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    59c8:	add	r0, r8
    59ca:	mov	r1, r9
    59cc:	cmp	r6, r7
    59ce:	it	cs
    59d0:	movcs	r6, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    59d2:	add	r8, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    59d4:	mov	r2, r6
    59d6:	bl	7fb0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    59da:	cmp.w	r8, #512	; 0x200
    59de:	bne.n	59ec <FatFile::write(void const*, unsigned int)+0xb0>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    59e0:	ldr	r0, [r4, #8]
    59e2:	adds	r0, #40	; 0x28
    59e4:	bl	2906 <FsCache::sync()>
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    59e8:	cmp	r0, #0
    59ea:	beq.n	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    59ec:	ldr	r3, [r4, #20]
    src += n;
    59ee:	add	r9, r6
    nToWrite -= n;
    59f0:	subs	r7, r7, r6
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    59f2:	add	r3, r6
    59f4:	str	r3, [r4, #20]
    59f6:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    59f8:	cmp	r7, #0
    59fa:	bne.n	5974 <FatFile::write(void const*, unsigned int)+0x38>
    59fc:	b.n	5a38 <FatFile::write(void const*, unsigned int)+0xfc>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    59fe:	cmp.w	r8, #0
    5a02:	bne.n	5982 <FatFile::write(void const*, unsigned int)+0x46>
      // start of new cluster
      if (m_curCluster != 0) {
    5a04:	ldr	r1, [r4, #16]
    5a06:	cbz	r1, 5a1a <FatFile::write(void const*, unsigned int)+0xde>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5a08:	ldrb	r3, [r4, #2]
    5a0a:	lsls	r3, r3, #25
    5a0c:	bpl.n	5a52 <FatFile::write(void const*, unsigned int)+0x116>
    5a0e:	ldr	r3, [r4, #28]
    5a10:	cmp	r2, r3
    5a12:	bcs.n	5a52 <FatFile::write(void const*, unsigned int)+0x116>
          m_curCluster++;
    5a14:	adds	r1, #1
    5a16:	str	r1, [r4, #16]
    5a18:	b.n	5982 <FatFile::write(void const*, unsigned int)+0x46>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5a1a:	ldr	r3, [r4, #32]
    5a1c:	cbnz	r3, 5a2c <FatFile::write(void const*, unsigned int)+0xf0>
          // allocate first cluster of file
          if (!addCluster()) {
    5a1e:	mov	r0, r4
    5a20:	bl	4db6 <FatFile::addCluster()>
    5a24:	cbz	r0, 5a6a <FatFile::write(void const*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5a26:	ldr	r3, [r4, #16]
    5a28:	str	r3, [r4, #32]
    5a2a:	b.n	5982 <FatFile::write(void const*, unsigned int)+0x46>
        } else {
          m_curCluster = m_firstCluster;
    5a2c:	str	r3, [r4, #16]
    5a2e:	b.n	5982 <FatFile::write(void const*, unsigned int)+0x46>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5a30:	movs	r2, #1
    5a32:	b.n	59b8 <FatFile::write(void const*, unsigned int)+0x7c>
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5a34:	movs	r2, #5
    5a36:	b.n	59b8 <FatFile::write(void const*, unsigned int)+0x7c>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5a38:	ldr	r3, [r4, #28]
    5a3a:	cmp	r2, r3
    5a3c:	bls.n	5a42 <FatFile::write(void const*, unsigned int)+0x106>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5a3e:	str	r2, [r4, #28]
    5a40:	b.n	5a48 <FatFile::write(void const*, unsigned int)+0x10c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5a42:	ldr	r3, [pc, #180]	; (5af8 <FatFile::write(void const*, unsigned int)+0x1bc>)
    5a44:	ldr	r3, [r3, #0]
    5a46:	cbz	r3, 5a78 <FatFile::write(void const*, unsigned int)+0x13c>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5a48:	ldrb	r3, [r4, #2]
    5a4a:	orn	r3, r3, #127	; 0x7f
    5a4e:	strb	r3, [r4, #2]
    5a50:	b.n	5a78 <FatFile::write(void const*, unsigned int)+0x13c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a52:	add.w	r2, r4, #16
    5a56:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5a5a:	cmp	r0, #0
    5a5c:	blt.n	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5a5e:	bne.n	5ae0 <FatFile::write(void const*, unsigned int)+0x1a4>
          // add cluster if at end of chain
          if (!addCluster()) {
    5a60:	mov	r0, r4
    5a62:	bl	4db6 <FatFile::addCluster()>
    5a66:	cmp	r0, #0
    5a68:	bne.n	5ae0 <FatFile::write(void const*, unsigned int)+0x1a4>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5a6a:	ldrb	r3, [r4, #1]
  return 0;
    5a6c:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5a6e:	orr.w	r3, r3, #1
    5a72:	strb	r3, [r4, #1]
  return 0;
    5a74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a78:	mov	r0, r5
    5a7a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5a7e:	cmp.w	r7, #1024	; 0x400
    5a82:	ldr.w	r2, [lr, #52]	; 0x34
    5a86:	ldr.w	r0, [lr, #44]	; 0x2c
    5a8a:	bcc.n	5ab6 <FatFile::write(void const*, unsigned int)+0x17a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5a8c:	ldrb.w	r3, [lr, #4]
    5a90:	subs	r6, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5a92:	lsrs	r3, r7, #9
    5a94:	cmp	r3, r6
    5a96:	it	cs
    5a98:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    5a9a:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5a9c:	mov.w	r6, r3, lsl #9
    5aa0:	bcc.n	5aaa <FatFile::write(void const*, unsigned int)+0x16e>
    5aa2:	add.w	ip, r3, r1
    5aa6:	cmp	r2, ip
    5aa8:	bcc.n	5ad6 <FatFile::write(void const*, unsigned int)+0x19a>
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    5aaa:	ldr	r2, [r0, #0]
    5aac:	ldr.w	r8, [r2, #36]	; 0x24
    5ab0:	mov	r2, r9
    5ab2:	blx	r8
    5ab4:	b.n	59e8 <FatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    5ab6:	cmp	r2, r1
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5ab8:	mov	r2, r9
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5aba:	it	eq
    5abc:	strbeq.w	sl, [lr, #40]	; 0x28
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5ac0:	ldr	r3, [r0, #0]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5ac2:	it	eq
    5ac4:	streq.w	fp, [lr, #52]	; 0x34
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5ac8:	ldr	r3, [r3, #32]
    5aca:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5acc:	cmp	r0, #0
    5ace:	beq.n	5a6a <FatFile::write(void const*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5ad0:	mov.w	r6, #512	; 0x200
    5ad4:	b.n	59ec <FatFile::write(void const*, unsigned int)+0xb0>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5ad6:	strb.w	sl, [lr, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    5ada:	str.w	fp, [lr, #52]	; 0x34
    5ade:	b.n	5aaa <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5ae0:	ldr.w	lr, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5ae4:	ldr	r1, [r4, #16]
    5ae6:	ldrb.w	r3, [lr, #6]
    5aea:	subs	r1, #2
    5aec:	lsls	r1, r3
    5aee:	ldr.w	r3, [lr, #20]
    5af2:	add	r1, r3
    5af4:	b.n	599e <FatFile::write(void const*, unsigned int)+0x62>
    5af6:	nop
    5af8:	.word	0x20003548

00005afc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    5afc:	ldr	r3, [r2, #0]
    5afe:	cmp.w	r3, #256	; 0x100
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    5b02:	push	{r4, r5, lr}
    5b04:	mov	r4, r3
    5b06:	it	cs
    5b08:	movcs.w	r4, #256	; 0x100
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 256) n = 256;
  uint16_t *e = p + n;
    5b0c:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    5b10:	cmp	r1, r5
    5b12:	bcs.n	5b24 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    5b14:	ldrh.w	r0, [r1], #2
    5b18:	cmp	r0, #0
    5b1a:	bne.n	5b10 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    5b1c:	ldr	r0, [r2, #4]
    5b1e:	adds	r0, #1
    5b20:	str	r0, [r2, #4]
    5b22:	b.n	5b10 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
  }
  state->clusters_to_do -= n;
    5b24:	subs	r3, r3, r4
    5b26:	str	r3, [r2, #0]
    5b28:	pop	{r4, r5, pc}

00005b2a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    5b2a:	ldr	r3, [r2, #0]
    5b2c:	cmp	r3, #128	; 0x80
  }
  state->clusters_to_do -= n;
}

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    5b2e:	push	{r4, r5, lr}
    5b30:	mov	r4, r3
    5b32:	it	cs
    5b34:	movcs	r4, #128	; 0x80
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 128) n = 128;
  uint32_t *e = p + n;
    5b36:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    5b3a:	cmp	r1, r5
    5b3c:	bcs.n	5b4e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x24>
    if (*p++ == 0) state->free_count++;
    5b3e:	ldr.w	r0, [r1], #4
    5b42:	cmp	r0, #0
    5b44:	bne.n	5b3a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    5b46:	ldr	r0, [r2, #4]
    5b48:	adds	r0, #1
    5b4a:	str	r0, [r2, #4]
    5b4c:	b.n	5b3a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
  }
  state->clusters_to_do -= n;
    5b4e:	subs	r3, r3, r4
    5b50:	str	r3, [r2, #0]
    5b52:	pop	{r4, r5, pc}

00005b54 <FsCache::clear()>:
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    5b54:	push	{r4, lr}
    if (isDirty() && !sync()) {
    5b56:	ldrb	r3, [r0, #0]
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    5b58:	mov	r4, r0
    if (isDirty() && !sync()) {
    5b5a:	lsls	r3, r3, #31
    5b5c:	bpl.n	5b64 <FsCache::clear()+0x10>
    5b5e:	bl	2906 <FsCache::sync()>
    5b62:	cbz	r0, 5b72 <FsCache::clear()+0x1e>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5b64:	movs	r3, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    5b66:	add.w	r0, r4, #16
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5b6a:	strb	r3, [r4, #0]
    m_sector = 0XFFFFFFFF;
    5b6c:	mov.w	r3, #4294967295
    5b70:	str	r3, [r4, #12]
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
  }
    5b72:	pop	{r4, pc}

00005b74 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5b74:	cmp	r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5b76:	push	{r4, r5, r6, lr}
    5b78:	mov	r5, r0
    5b7a:	mov	r4, r1
    5b7c:	mov	r6, r2
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5b7e:	bhi.n	5b86 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    5b80:	mov.w	r0, #4294967295
    5b84:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5b86:	ldr	r3, [r0, #28]
    5b88:	cmp	r1, r3
    5b8a:	bhi.n	5b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    5b8c:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5b8e:	cmp	r3, #32
    5b90:	bne.n	5bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3c>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    5b92:	ldr	r1, [r0, #24]
    5b94:	movs	r2, #2
    5b96:	add.w	r0, r0, #568	; 0x238
    5b9a:	add.w	r1, r1, r4, lsr #7
    5b9e:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5ba2:	cmp	r0, #0
    5ba4:	beq.n	5b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5ba6:	and.w	r4, r4, #127	; 0x7f
    5baa:	ldr.w	r3, [r0, r4, lsl #2]
    5bae:	b.n	5bd0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5bb0:	cmp	r3, #16
    5bb2:	bne.n	5b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    5bb4:	ldr	r3, [r0, #24]
    5bb6:	ubfx	r1, r1, #8, #8
    5bba:	movs	r2, #2
    5bbc:	add.w	r0, r0, #568	; 0x238
    5bc0:	add	r1, r3
    5bc2:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5bc6:	cmp	r0, #0
    5bc8:	beq.n	5b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5bca:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5bcc:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5bd0:	ldr	r2, [r5, #28]
    5bd2:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5bd4:	itte	ls
    5bd6:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5bd8:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5bda:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    5bdc:	pop	{r4, r5, r6, pc}

00005bde <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5bde:	cmp	r1, #1
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5be0:	push	{r3, r4, r5, lr}
    5be2:	mov	r4, r1
    5be4:	mov	r5, r2
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5be6:	bhi.n	5bec <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    5be8:	movs	r0, #0
    5bea:	pop	{r3, r4, r5, pc}
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5bec:	ldr	r3, [r0, #28]
    5bee:	cmp	r1, r3
    5bf0:	bhi.n	5be8 <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    5bf2:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5bf4:	cmp	r3, #32
    5bf6:	bne.n	5c16 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
    5bf8:	ldr	r1, [r0, #24]
    5bfa:	movs	r2, #3
    5bfc:	add.w	r0, r0, #568	; 0x238
    5c00:	add.w	r1, r1, r4, lsr #7
    5c04:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5c08:	cmp	r0, #0
    5c0a:	beq.n	5be8 <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5c0c:	and.w	r4, r4, #127	; 0x7f
    5c10:	str.w	r5, [r0, r4, lsl #2]
    5c14:	b.n	5c36 <FatPartition::fatPut(unsigned long, unsigned long)+0x58>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5c16:	cmp	r3, #16
    5c18:	bne.n	5be8 <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    5c1a:	ldr	r3, [r0, #24]
    5c1c:	ubfx	r1, r1, #8, #8
    5c20:	movs	r2, #3
    5c22:	add.w	r0, r0, #568	; 0x238
    5c26:	add	r1, r3
    5c28:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5c2c:	cmp	r0, #0
    5c2e:	beq.n	5be8 <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5c30:	uxtb	r4, r4
    5c32:	strh.w	r5, [r0, r4, lsl #1]
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5c36:	movs	r0, #1
    goto fail;
  }

 fail:
  return false;
}
    5c38:	pop	{r3, r4, r5, pc}

00005c3a <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5c3a:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5c3e:	ldr	r4, [r0, #12]
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5c40:	mov	r5, r0
    5c42:	mov	r6, r1
    5c44:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5c46:	cmp	r4, r1
    5c48:	bcs.n	5c5a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x20>
    5c4a:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    5c4c:	movs	r7, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    5c4e:	adds	r4, #1
    if (find > m_lastCluster) {
    5c50:	ldr	r3, [r5, #28]
    5c52:	cmp	r4, r3
    5c54:	bls.n	5c5e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      if (setStart) {
    5c56:	cbnz	r7, 5c8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    5c58:	ldr	r4, [r5, #12]
      setStart = true;
    5c5a:	movs	r7, #1
    5c5c:	b.n	5c4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      continue;
    }
    if (find == current) {
    5c5e:	cmp	r6, r4
    5c60:	beq.n	5c8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5c62:	add	r2, sp, #4
    5c64:	mov	r1, r4
    5c66:	mov	r0, r5
    5c68:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5c6c:	cmp	r0, #0
    5c6e:	blt.n	5c8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5c70:	beq.n	5c4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    5c72:	ldr	r3, [sp, #4]
    5c74:	cmp	r3, #0
    5c76:	bne.n	5c4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      break;
    }
  }
  if (setStart) {
    5c78:	cbz	r7, 5c7c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x42>
    m_allocSearchStart = find;
    5c7a:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5c7c:	mvn.w	r2, #4026531840	; 0xf0000000
    5c80:	mov	r1, r4
    5c82:	mov	r0, r5
    5c84:	bl	5bde <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    5c88:	mov	r7, r0
    5c8a:	cbnz	r0, 5c90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    5c8c:	movs	r7, #0
    5c8e:	b.n	5cb2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5c90:	cbnz	r6, 5c9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    5c92:	ldr	r3, [r5, #36]	; 0x24
    5c94:	cmp	r3, #0
    5c96:	blt.n	5cae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      m_freeClusterCount += change;
    5c98:	subs	r3, #1
    5c9a:	str	r3, [r5, #36]	; 0x24
    5c9c:	b.n	5cae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    // Link clusters.
    if (!fatPut(current, find)) {
    5c9e:	mov	r2, r4
    5ca0:	mov	r1, r6
    5ca2:	mov	r0, r5
    5ca4:	bl	5bde <FatPartition::fatPut(unsigned long, unsigned long)>
    5ca8:	cmp	r0, #0
    5caa:	bne.n	5c92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    5cac:	b.n	5c8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    5cae:	str.w	r4, [r8]
  return true;

 fail:
  return false;
}
    5cb2:	mov	r0, r7
    5cb4:	add	sp, #8
    5cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005cba <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    5cba:	push	{r0, r1, r4, r5, r6, lr}
    5cbc:	mov	r5, r0
    5cbe:	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    5cc0:	add	r2, sp, #4
    5cc2:	mov	r1, r4
    5cc4:	mov	r0, r5
    5cc6:	bl	5b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5cca:	subs	r6, r0, #0
    5ccc:	bge.n	5cd2 <FatPartition::freeChain(unsigned long)+0x18>
  } while (fg);

  return true;

 fail:
  return false;
    5cce:	movs	r0, #0
    5cd0:	b.n	5cfc <FatPartition::freeChain(unsigned long)+0x42>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    5cd2:	movs	r2, #0
    5cd4:	mov	r1, r4
    5cd6:	mov	r0, r5
    5cd8:	bl	5bde <FatPartition::fatPut(unsigned long, unsigned long)>
    5cdc:	cmp	r0, #0
    5cde:	beq.n	5cce <FatPartition::freeChain(unsigned long)+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    5ce0:	ldr	r3, [r5, #36]	; 0x24
    5ce2:	cmp	r3, #0
      m_freeClusterCount += change;
    5ce4:	itt	ge
    5ce6:	addge	r3, #1
    5ce8:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    5cea:	ldr	r3, [r5, #12]
    5cec:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    5cee:	itt	cc
    5cf0:	addcc.w	r4, r4, #4294967295
    5cf4:	strcc	r4, [r5, #12]
    }
    cluster = next;
    5cf6:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    5cf8:	cmp	r6, #0
    5cfa:	bne.n	5cc0 <FatPartition::freeChain(unsigned long)+0x6>

  return true;

 fail:
  return false;
}
    5cfc:	add	sp, #8
    5cfe:	pop	{r4, r5, r6, pc}

00005d00 <FatPartition::freeClusterCount()>:
  }
  state->clusters_to_do -= n;
}

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    5d00:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5d02:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    5d04:	ldr	r0, [r0, #36]	; 0x24
    5d06:	cmp	r0, #0
    5d08:	bge.n	5d4e <FatPartition::freeClusterCount()+0x4e>
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    5d0a:	movs	r3, #0
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
  //Serial.printf("  num_sectors = %u\n", num_sectors);
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
    5d0c:	add.w	r0, r4, #568	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    5d10:	ldr	r5, [r4, #16]
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    5d12:	str	r3, [sp, #12]
  state.clusters_to_do = m_lastCluster + 1;
    5d14:	ldr	r3, [r4, #28]
    5d16:	adds	r3, #1
    5d18:	str	r3, [sp, #8]
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
  //Serial.printf("  num_sectors = %u\n", num_sectors);
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
    5d1a:	bl	5b54 <FsCache::clear()>
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    5d1e:	mov	r2, r0
    5d20:	cbnz	r0, 5d28 <FatPartition::freeClusterCount()+0x28>
    5d22:	mov.w	r0, #4294967295
    5d26:	b.n	5d4e <FatPartition::freeClusterCount()+0x4e>
  if (fatType() == FAT_TYPE_FAT32) {
    5d28:	ldrb	r3, [r4, #7]
    5d2a:	ldr	r0, [r4, #0]
    5d2c:	cmp	r3, #32
    5d2e:	add	r3, sp, #8
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    5d30:	ldr	r1, [r0, #0]
    5d32:	str	r3, [sp, #4]
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    5d34:	bne.n	5d3a <FatPartition::freeClusterCount()+0x3a>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    5d36:	ldr	r3, [pc, #28]	; (5d54 <FatPartition::freeClusterCount()+0x54>)
    5d38:	b.n	5d3c <FatPartition::freeClusterCount()+0x3c>
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    5d3a:	ldr	r3, [pc, #28]	; (5d58 <FatPartition::freeClusterCount()+0x58>)
    5d3c:	str	r3, [sp, #0]
    5d3e:	mov	r3, r5
    5d40:	ldr	r6, [r1, #20]
    5d42:	ldr	r1, [r4, #24]
    5d44:	blx	r6
    5d46:	cmp	r0, #0
    5d48:	beq.n	5d22 <FatPartition::freeClusterCount()+0x22>
  }

  setFreeClusterCount(state.free_count);
    5d4a:	ldr	r0, [sp, #12]
    return m_blockDev->writeSector(sector, src);
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    5d4c:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    5d4e:	add	sp, #16
    5d50:	pop	{r4, r5, r6, pc}
    5d52:	nop
    5d54:	.word	0x00005b2b
    5d58:	.word	0x00005afd

00005d5c <FatPartition::init(BlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    5d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5d60:	mov.w	r3, #4294967295
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
    5d64:	movs	r7, #0
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    5d66:	mov	r4, r0
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    5d68:	movs	r6, #1
  }
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_cache.clear();
    5d6a:	add.w	r8, r0, #40	; 0x28
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    5d6e:	sub	sp, #28
    5d70:	mov	r5, r1
    5d72:	mov	r9, r2
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    5d74:	str	r1, [r4, #0]
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
    5d76:	strb	r7, [r0, #7]
  m_allocSearchStart = 1;
    5d78:	str	r6, [r0, #12]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    5d7a:	str	r1, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5d7c:	str	r3, [r0, #52]	; 0x34
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5d7e:	strb.w	r7, [r0, #40]	; 0x28
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    5d82:	str.w	r1, [r4, #572]	; 0x23c
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5d86:	str.w	r3, [r0, #580]	; 0x244
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5d8a:	strb.w	r7, [r0, #568]	; 0x238
    5d8e:	mov	r0, r8
    5d90:	bl	5b54 <FsCache::clear()>
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE

  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part, cacheClear(), &firstLBA);
    5d94:	str	r7, [sp, #8]
    5d96:	mov	r2, r0
    5d98:	str	r7, [sp, #4]
    5d9a:	str	r7, [sp, #0]
    5d9c:	add	r3, sp, #20
    5d9e:	mov	r1, r9
    5da0:	mov	r0, r5
    5da2:	bl	26cc <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    5da6:	tst.w	r0, #251	; 0xfb
    5daa:	beq.n	5e30 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    DBG_FAIL_MACRO;
    goto fail;    
  }
  volumeStartSector = firstLBA;
    5dac:	ldr	r5, [sp, #20]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5dae:	mov	r2, r7
    5db0:	mov	r0, r8
    5db2:	mov	r1, r5
    5db4:	bl	2952 <FsCache::get(unsigned long, unsigned char)>
  #endif

  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    5db8:	cmp	r0, #0
    5dba:	beq.n	5e30 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    5dbc:	ldrb	r3, [r0, #16]
    5dbe:	cmp	r3, #2
    5dc0:	bne.n	5e30 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    5dc2:	ldrh.w	r3, [r0, #11]
    5dc6:	cmp.w	r3, #512	; 0x200
    5dca:	bne.n	5e30 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    5dcc:	b.n	5e34 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd8>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
    5dce:	subs	r2, #1
    5dd0:	beq.n	5e30 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    5dd2:	ldrb	r6, [r4, #6]
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    5dd4:	lsls	r3, r3, #1
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    5dd6:	adds	r6, #1
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    5dd8:	uxtb	r3, r3
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    5dda:	strb	r6, [r4, #6]
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    5ddc:	cmp	r3, r1
    5dde:	bne.n	5dce <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    5de0:	ldrh	r3, [r0, #22]
    5de2:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    5de4:	cbnz	r3, 5dea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x8e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5de6:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    5de8:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    5dea:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5dec:	ldrh.w	r2, [r0, #17]
    5df0:	add	r1, r5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    5df2:	ldr	r6, [r4, #16]
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    5df4:	strh	r2, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    5df6:	add.w	r3, r1, r6, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    5dfa:	str	r1, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    5dfc:	lsls	r1, r2, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    5dfe:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    5e00:	addw	r1, r1, #511	; 0x1ff
    5e04:	add.w	r1, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    5e08:	ldrh.w	r3, [r0, #19]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    5e0c:	str	r1, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    5e0e:	cbnz	r3, 5e12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5e10:	ldr	r3, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    5e12:	subs	r1, r5, r1
    5e14:	add	r1, r3

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    5e16:	ldrb	r3, [r4, #6]
    5e18:	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
    5e1a:	adds	r3, r1, #1
    5e1c:	str	r3, [r4, #28]
    return m_blockDev->writeSector(sector, src);
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    5e1e:	mov.w	r3, #4294967295
    5e22:	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    5e24:	movw	r3, #4084	; 0xff4
    5e28:	cmp	r1, r3
    5e2a:	bhi.n	5e44 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>
    m_fatType = 12;
    5e2c:	movs	r3, #12
    5e2e:	strb	r3, [r4, #7]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    5e30:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    5e32:	b.n	5e62 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    5e34:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    5e36:	movs	r2, #9
    5e38:	strb	r7, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    5e3a:	subs	r3, r1, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    5e3c:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    5e3e:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    5e40:	mov	r3, r6
    5e42:	b.n	5ddc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x80>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    5e44:	movw	r3, #65524	; 0xfff4
    5e48:	cmp	r1, r3
    5e4a:	ite	hi
    5e4c:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
    5e4e:	movls	r3, #16
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    5e50:	mov.w	r0, #1
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    5e54:	str	r6, [r4, #48]	; 0x30
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    5e56:	itt	hi
    5e58:	strhi	r3, [r4, #32]
    m_fatType = 32;
    5e5a:	movhi	r3, #32
    5e5c:	str.w	r6, [r4, #576]	; 0x240
    5e60:	strb	r3, [r4, #7]
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
}
    5e62:	add	sp, #28
    5e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005e68 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatVolume.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    5e68:	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5e6a:	add.w	r4, r0, #1096	; 0x448
    5e6e:	sub	sp, #40	; 0x28
    5e70:	movs	r3, #0
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    5e72:	mov	r2, r1
    5e74:	add	r0, sp, #4
    5e76:	mov	r1, r4
    5e78:	strb.w	r3, [sp, #4]
    5e7c:	strb.w	r3, [sp, #5]
    5e80:	strb.w	r3, [sp, #6]
    5e84:	bl	53b0 <FatFile::open(FatFile*, char const*, int)>
    5e88:	mov	r6, r0
    5e8a:	cbz	r0, 5ea8 <FatVolume::chdir(char const*)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    5e8c:	ldrb.w	r3, [sp, #4]
    5e90:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    5e94:	itett	ne
    5e96:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    5e98:	moveq	r6, r3
  }
  if (!dir.isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    5e9a:	ldmiane	r5!, {r0, r1, r2, r3}
    5e9c:	stmiane	r4!, {r0, r1, r2, r3}
    5e9e:	itttt	ne
    5ea0:	ldmiane	r5!, {r0, r1, r2, r3}
    5ea2:	stmiane	r4!, {r0, r1, r2, r3}
    5ea4:	ldrne	r3, [r5, #0]
    5ea6:	strne	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    5ea8:	mov	r0, r6
    5eaa:	add	sp, #40	; 0x28
    5eac:	pop	{r4, r5, r6, pc}

00005eae <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>:
  }
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    5eae:	subs	r1, r0, #1
    5eb0:	add.w	r2, r0, #10
    uint8_t sum = 0;
    5eb4:	movs	r0, #0
    5eb6:	lsls	r3, r0, #7
    5eb8:	orr.w	r0, r3, r0, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5ebc:	ldrb.w	r3, [r1, #1]!
    5ec0:	uxtab	r0, r3, r0
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    5ec4:	cmp	r1, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5ec6:	uxtb	r0, r0
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    5ec8:	bne.n	5eb6 <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]+0x8>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    }
    return sum;
  }
    5eca:	bx	lr

00005ecc <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    5ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5ed0:	mov	r5, r0
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    5ed2:	sub	sp, #52	; 0x34
    5ed4:	mov	r6, r2
    5ed6:	mov	r7, r0
    5ed8:	mov	r8, r1
    5eda:	mov	r9, r3
  FatFile dir = *this;
    5edc:	add	r4, sp, #12
    5ede:	ldmia	r5!, {r0, r1, r2, r3}
    5ee0:	stmia	r4!, {r0, r1, r2, r3}
    5ee2:	ldmia	r5!, {r0, r1, r2, r3}
    5ee4:	stmia	r4!, {r0, r1, r2, r3}
    5ee6:	ldr	r3, [r5, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5ee8:	movs	r5, #1
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    5eea:	str	r3, [r4, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5eec:	ldr	r3, [r6, #0]
    5eee:	str	r3, [r6, #4]
    ls = 0;
    5ef0:	movs	r3, #0
    5ef2:	strh	r3, [r6, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5ef4:	cmp	r5, r9
    5ef6:	bhi.n	5f32 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x66>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5ef8:	rsb	r1, r5, r8
    5efc:	add	r0, sp, #12
    5efe:	uxth	r1, r1
    5f00:	bl	4bd4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    5f04:	mov	fp, r0
    5f06:	cbnz	r0, 5f0c <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x40>
    }
  }
  return true;

 fail:
  return false;
    5f08:	movs	r0, #0
    5f0a:	b.n	5f62 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
    5f0c:	mov.w	sl, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    5f10:	uxtb.w	r2, sl
    5f14:	mov	r1, fp
    5f16:	mov	r0, r7
    5f18:	bl	4bee <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5f1c:	ldrh	r3, [r6, #12]
    5f1e:	mov	r4, r0
    5f20:	cbnz	r3, 5f36 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x6a>
    5f22:	ldr	r2, [r6, #4]
    5f24:	ldr	r3, [r6, #8]
    5f26:	cmp	r2, r3
    5f28:	bne.n	5f36 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x6a>
      if (fname->atEnd()) {
        return u == 0;
    5f2a:	clz	r0, r0
    5f2e:	lsrs	r0, r0, #5
    5f30:	b.n	5f62 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    5f32:	movs	r0, #1
    5f34:	b.n	5f62 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    5f36:	mov	r0, r6
    5f38:	bl	2a44 <FsName::get16()>
    5f3c:	str	r0, [sp, #4]
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    5f3e:	mov	r0, r4
    5f40:	bl	29a0 <toUpcase(unsigned short)>
    5f44:	ldr	r3, [sp, #4]
    5f46:	mov	r4, r0
    5f48:	mov	r0, r3
    5f4a:	bl	29a0 <toUpcase(unsigned short)>
    5f4e:	cmp	r4, r0
    5f50:	bne.n	5f08 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x3c>
    5f52:	add.w	sl, sl, #1
      goto fail;
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
    5f56:	cmp.w	sl, #13
    5f5a:	bne.n	5f10 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x44>
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5f5c:	adds	r5, #1
    5f5e:	uxtb	r5, r5
    5f60:	b.n	5ef4 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x28>
  }
  return true;

 fail:
  return false;
}
    5f62:	add	sp, #52	; 0x34
    5f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005f68 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    5f68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5f6c:	mov	r5, r0

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    5f6e:	sub	sp, #52	; 0x34
    5f70:	mov	r6, r2
    5f72:	mov	sl, r1
    5f74:	mov	r7, r3
  FatFile dir = *this;
    5f76:	add	r4, sp, #12
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5f78:	mov.w	fp, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    5f7c:	ldmia	r5!, {r0, r1, r2, r3}
    5f7e:	stmia	r4!, {r0, r1, r2, r3}
    5f80:	ldmia	r5!, {r0, r1, r2, r3}
    5f82:	stmia	r4!, {r0, r1, r2, r3}
    5f84:	ldr	r3, [r5, #0]
  }
  void reset() {
    next = begin;
    ls = 0;
    5f86:	movs	r5, #0
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
    5f88:	add.w	r0, r6, #22
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    5f8c:	str	r3, [r4, #0]
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    5f8e:	mov	r8, r5
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
    5f90:	bl	5eae <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5f94:	ldr	r3, [r6, #0]
    5f96:	mov	r9, r0
    ls = 0;
    5f98:	strh	r5, [r6, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5f9a:	str	r3, [r6, #4]
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5f9c:	cmp	fp, r7
    5f9e:	bhi.n	5ff2 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5fa0:	rsb	r1, fp, sl
    5fa4:	add	r0, sp, #12
    5fa6:	uxth	r1, r1
    5fa8:	bl	4bd4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    5fac:	cmp	r0, #0
    5fae:	beq.n	6038 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xd0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    5fb0:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5fb2:	cmp	fp, r7
    5fb4:	add.w	r4, r0, #4
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    5fb8:	mov.w	r1, #0
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    5fbc:	ldrb.w	r3, [r2, #40]	; 0x28
    5fc0:	orr.w	r3, r3, #1
    5fc4:	strb.w	r3, [r2, #40]	; 0x28
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5fc8:	ite	eq
    5fca:	orreq.w	r3, fp, #64	; 0x40
    5fce:	movne	r3, fp
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    5fd0:	strb.w	r8, [r0, #12]
    ldir->checksum = checksum;
    5fd4:	strb.w	r9, [r0, #13]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5fd8:	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    5fda:	mov.w	r3, #15
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5fde:	strh.w	r8, [r0, #26]
    5fe2:	strb	r3, [r0, #11]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5fe4:	ldrh	r3, [r6, #12]
    5fe6:	cbnz	r3, 5ff6 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8e>
    5fe8:	ldr	r2, [r6, #4]
    5fea:	ldr	r3, [r6, #8]
    5fec:	cmp	r2, r3
    5fee:	bne.n	5ff6 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8e>
    5ff0:	b.n	6026 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xbe>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    5ff2:	movs	r0, #1
    5ff4:	b.n	6038 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xd0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    5ff6:	mov	r0, r6
    5ff8:	str	r1, [sp, #4]
    5ffa:	bl	2a44 <FsName::get16()>
    5ffe:	ldr	r1, [sp, #4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6000:	cmp	r1, #4
    6002:	bhi.n	600a <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xa2>
    6004:	strh.w	r0, [r4, #-3]
    6008:	b.n	6012 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xaa>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    600a:	cmp	r1, #10
    600c:	ite	ls
    600e:	strhls	r0, [r4, #0]
    6010:	strhhi	r0, [r4, #2]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    6012:	adds	r1, #1
    6014:	adds	r4, #2
    6016:	uxtb	r1, r1
    6018:	cmp	r1, #13
    601a:	bne.n	5fe4 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x7c>
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    601c:	add.w	fp, fp, #1
    6020:	uxtb.w	fp, fp
    6024:	b.n	5f9c <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x34>
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
    6026:	cbz	r5, 6032 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xca>
    6028:	adds	r5, #1
    602a:	movw	r0, #65535	; 0xffff
    602e:	uxtb	r5, r5
    6030:	b.n	6000 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x98>
    6032:	mov	r0, r5
    6034:	movs	r5, #1
    6036:	b.n	6000 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x98>
  }
  return true;

 fail:
  return false;
}
    6038:	add	sp, #52	; 0x34
    603a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000603e <FatFile::makeSFN(FatName_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    603e:	mov	r2, r0
    6040:	add.w	r1, r0, #32

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatName_t* fname) {
    6044:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    6048:	ldr.w	r3, [r2], #21
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    604c:	movs	r4, #32
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    604e:	ldr	r7, [r0, #8]
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6050:	strb.w	r4, [r2, #1]!
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6054:	cmp	r1, r2
    6056:	bne.n	6050 <FatFile::makeSFN(FatName_t*)+0x12>
    fname->sfn[k] = ' ';
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    6058:	ldrb	r6, [r3, #0]
    605a:	subs	r6, #46	; 0x2e
    605c:	it	ne
    605e:	movne	r6, #1
    6060:	mov	r5, r3
    6062:	adds	r3, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    6064:	ldrb	r2, [r5, #0]
    6066:	cmp	r2, #46	; 0x2e
    6068:	beq.n	6060 <FatFile::makeSFN(FatName_t*)+0x22>
    606a:	subs	r3, r7, #1
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    606c:	cmp	r3, r5
    606e:	mov	lr, r3
    6070:	bhi.n	6082 <FatFile::makeSFN(FatName_t*)+0x44>
    6072:	movs	r2, #0
    6074:	mov.w	ip, #7
    6078:	mov.w	r9, #8
    607c:	mov	r1, r2
    607e:	mov	r8, r2
    6080:	b.n	60a4 <FatFile::makeSFN(FatName_t*)+0x66>
    6082:	ldrb.w	r2, [lr]
    6086:	subs	r3, #1
    6088:	cmp	r2, #46	; 0x2e
    608a:	bne.n	606c <FatFile::makeSFN(FatName_t*)+0x2e>
    608c:	b.n	6072 <FatFile::makeSFN(FatName_t*)+0x34>

  for (; ptr < end; ptr++) {
    c = *ptr;
    608e:	ldrb	r3, [r5, #0]
//  Could skip UTF-8 units where (0XC0 & c) == 0X80

    if (c == '.' && ptr == dot) {
    6090:	cmp	r3, #46	; 0x2e
    6092:	bne.n	60aa <FatFile::makeSFN(FatName_t*)+0x6c>
    6094:	cmp	lr, r5
    6096:	bne.n	60b2 <FatFile::makeSFN(FatName_t*)+0x74>
      in = 10;  // Max index for full 8.3 name.
    6098:	mov.w	ip, #10
      i = 8;    // Place for extension.
    609c:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    609e:	mov.w	r9, #16
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    60a2:	adds	r5, #1
    60a4:	cmp	r5, r7
    60a6:	bcc.n	608e <FatFile::makeSFN(FatName_t*)+0x50>
    60a8:	b.n	6134 <FatFile::makeSFN(FatName_t*)+0xf6>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    60aa:	cmp	r3, #34	; 0x22
    60ac:	beq.n	60d6 <FatFile::makeSFN(FatName_t*)+0x98>
    60ae:	cmp	r3, #124	; 0x7c
    60b0:	beq.n	60d6 <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    60b2:	sub.w	r4, r3, #42	; 0x2a
    60b6:	cmp	r4, #5
    60b8:	bhi.n	60be <FatFile::makeSFN(FatName_t*)+0x80>
    60ba:	cmp	r3, #45	; 0x2d
    60bc:	bne.n	60d6 <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    60be:	sub.w	r4, r3, #58	; 0x3a
    60c2:	cmp	r4, #5
    60c4:	bls.n	60d6 <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    60c6:	sub.w	r4, r3, #91	; 0x5b
    60ca:	cmp	r4, #2
    60cc:	bls.n	60d6 <FatFile::makeSFN(FatName_t*)+0x98>
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
    60ce:	sub.w	r4, r3, #33	; 0x21
    60d2:	cmp	r4, #93	; 0x5d
    60d4:	bls.n	60e0 <FatFile::makeSFN(FatName_t*)+0xa2>
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    60d6:	and.w	r3, r3, #192	; 0xc0
    60da:	cmp	r3, #128	; 0x80
    60dc:	bne.n	6106 <FatFile::makeSFN(FatName_t*)+0xc8>
    60de:	b.n	612a <FatFile::makeSFN(FatName_t*)+0xec>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    60e0:	cmp	r1, ip
    60e2:	bls.n	60f4 <FatFile::makeSFN(FatName_t*)+0xb6>
        is83 = false;
        if (in == 10 || ptr > dot) {
    60e4:	cmp.w	ip, #10
    60e8:	beq.n	6132 <FatFile::makeSFN(FatName_t*)+0xf4>
    60ea:	cmp	lr, r5
    60ec:	bcc.n	6132 <FatFile::makeSFN(FatName_t*)+0xf4>
         // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    60ee:	add.w	r5, lr, #4294967295
    60f2:	b.n	612a <FatFile::makeSFN(FatName_t*)+0xec>
        continue;
      }
      if (isLower(c)) {
    60f4:	sub.w	r4, r3, #97	; 0x61
    60f8:	cmp	r4, #25
    60fa:	bhi.n	610e <FatFile::makeSFN(FatName_t*)+0xd0>
        c += 'A' - 'a';
    60fc:	subs	r3, #32
        lc |= bit;
    60fe:	orr.w	r2, r9, r2
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
    6102:	uxtb	r3, r3
    6104:	b.n	611a <FatFile::makeSFN(FatName_t*)+0xdc>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
    6106:	cmp	r1, ip
    6108:	bhi.n	60e4 <FatFile::makeSFN(FatName_t*)+0xa6>
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    610a:	movs	r3, #95	; 0x5f
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
        is83 = false;
    610c:	movs	r6, #0
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
    610e:	sub.w	r4, r3, #65	; 0x41
    6112:	cmp	r4, #25
        uc |= bit;
    6114:	it	ls
    6116:	orrls.w	r8, r9, r8
      }
      fname->sfn[i++] = c;
    611a:	adds	r4, r1, #1
    611c:	add	r1, r0
    611e:	uxtb	r4, r4
    6120:	strb	r3, [r1, #22]
      if (i < 7) {
    6122:	cmp	r4, #6
    6124:	bhi.n	612e <FatFile::makeSFN(FatName_t*)+0xf0>
        fname->seqPos = i;
    6126:	strb	r4, [r0, #20]
    6128:	b.n	612e <FatFile::makeSFN(FatName_t*)+0xf0>
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
        is83 = false;
    612a:	movs	r6, #0
    612c:	b.n	60a2 <FatFile::makeSFN(FatName_t*)+0x64>
    612e:	mov	r1, r4
    6130:	b.n	60a2 <FatFile::makeSFN(FatName_t*)+0x64>
          continue;
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
    6132:	movs	r6, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6134:	ldrb	r3, [r0, #22]
    6136:	cmp	r3, #32
    6138:	beq.n	615e <FatFile::makeSFN(FatName_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    613a:	cbz	r6, 614c <FatFile::makeSFN(FatName_t*)+0x10e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    613c:	tst.w	r8, r2
    6140:	it	ne
    6142:	movne	r2, #2
    6144:	strb	r2, [r0, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6146:	movs	r0, #1
    6148:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    614c:	ldrb	r2, [r0, #20]
    goto fail;
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    614e:	movs	r3, #1
    6150:	strb	r3, [r0, #21]
    fname->sfn[fname->seqPos] = '~';
    6152:	add	r0, r2
    6154:	movs	r2, #126	; 0x7e
    6156:	strb	r2, [r0, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    6158:	movs	r2, #49	; 0x31
    615a:	strb	r2, [r0, #23]
    615c:	b.n	6146 <FatFile::makeSFN(FatName_t*)+0x108>
  }
  return true;

 fail:
  return false;
    615e:	movs	r0, #0
    6160:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006164 <FatFile::makeUniqueSfn(FatName_t*)>:
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatName_t* fname) {
    6164:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6168:	mov	r7, r0
    616a:	mov	r6, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    616c:	ldrb	r5, [r1, #20]
    616e:	movs	r4, #98	; 0x62
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    6170:	mov.w	r8, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6174:	add.w	r9, r1, #22
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
     DBG_WARN_IF(seq > FIRST_HASH_SEQ);
#ifdef USE_LFN_HASH
    hex = Bernstein(fname->begin, fname->end, seq);
#else
    hex = micros();
    6178:	bl	91a8 <micros>
    617c:	cmp	r5, #3
    617e:	uxth	r0, r0
    6180:	it	cs
    6182:	movcs	r5, #3
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6184:	adds	r3, r5, #4
    6186:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    6188:	and.w	r2, r0, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    618c:	adds	r1, r6, r3
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    618e:	subs	r3, #1
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    6190:	lsrs	r0, r0, #4
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6192:	cmp	r2, #9
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6194:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6196:	ite	ls
    6198:	addls	r2, #48	; 0x30
    619a:	addhi	r2, #55	; 0x37
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    619c:	cmp	r5, r3
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    619e:	strb	r2, [r1, #22]
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    61a0:	bcc.n	6188 <FatFile::makeUniqueSfn(FatName_t*)+0x24>
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    61a2:	adds	r3, r6, r5
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    61a4:	movs	r1, #0
    61a6:	mov	r0, r7
    61a8:	strb.w	r8, [r3, #22]
    61ac:	bl	50ca <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    61b0:	movs	r1, #1
    61b2:	mov	r0, r7
    61b4:	bl	5090 <FatFile::readDirCache(bool)>
      if (!dir) {
    61b8:	mov	r1, r0
    61ba:	cbnz	r0, 61c8 <FatFile::makeUniqueSfn(FatName_t*)+0x64>
        if (!getError()) {
    61bc:	ldrb	r0, [r7, #1]
    61be:	clz	r0, r0
    61c2:	lsrs	r0, r0, #5
    61c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    61c8:	ldrb	r3, [r0, #0]
    61ca:	cbz	r3, 61e0 <FatFile::makeUniqueSfn(FatName_t*)+0x7c>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    61cc:	ldrb	r3, [r0, #11]
    61ce:	lsls	r3, r3, #28
    61d0:	bmi.n	61b0 <FatFile::makeUniqueSfn(FatName_t*)+0x4c>
    61d2:	movs	r2, #11
    61d4:	mov	r0, r9
    61d6:	bl	a550 <memcmp>
    61da:	cmp	r0, #0
    61dc:	bne.n	61b0 <FatFile::makeUniqueSfn(FatName_t*)+0x4c>
    61de:	b.n	61e6 <FatFile::makeUniqueSfn(FatName_t*)+0x82>

 fail:
  return false;

 done:
  return true;
    61e0:	movs	r0, #1
    61e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61e6:	subs	r0, r4, #1
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    61e8:	ands.w	r4, r0, #255	; 0xff
    61ec:	bne.n	6178 <FatFile::makeUniqueSfn(FatName_t*)+0x14>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    61ee:	mov	r0, r4
    61f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000061f4 <FatFile::open(FatFile*, FatName_t*, int)>:

 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
    61f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61f8:	sub	sp, #44	; 0x2c
    61fa:	mov	r6, r1
    61fc:	mov	sl, r2
    61fe:	str	r3, [sp, #12]
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    6200:	ldrb	r3, [r1, #0]

 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
    6202:	str	r0, [sp, #24]
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    6204:	tst.w	r3, #112	; 0x70
    6208:	bne.n	620e <FatFile::open(FatFile*, FatName_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    620a:	movs	r0, #0
    620c:	b.n	6438 <FatFile::open(FatFile*, FatName_t*, int)+0x244>
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    620e:	ldr	r3, [sp, #24]
    6210:	ldrb	r3, [r3, #0]
    6212:	cmp	r3, #0
    6214:	bne.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    6216:	ldr	r3, [r2, #16]
    6218:	movs	r2, #13
    621a:	adds	r3, #12
    621c:	udiv	r3, r3, r2
    6220:	uxtb	r3, r3
    6222:	str	r3, [sp, #8]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6224:	ldrb.w	r3, [sl, #21]
    6228:	lsls	r3, r3, #30
    622a:	beq.w	6432 <FatFile::open(FatFile*, FatName_t*, int)+0x23e>
    622e:	ldr	r3, [sp, #8]
    6230:	add.w	fp, r3, #1
    6234:	uxtb.w	fp, fp
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint8_t nameOrd;
  uint16_t freeIndex = 0;
    6238:	mov.w	r9, #0
    623c:	movs	r1, #0
    623e:	mov	r0, r6
    6240:	bl	50ca <FatFile::seekSet(unsigned long)>
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6244:	mov	r8, r9
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6246:	add.w	r3, sl, #22
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    624a:	mov	r4, r9
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    624c:	mov	r5, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    624e:	str.w	r9, [sp, #16]
 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6252:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6256:	str	r3, [sp, #28]
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6258:	ldr	r7, [r6, #20]
    dir = dirFile->readDirCache();
    625a:	movs	r1, #0
    625c:	mov	r0, r6
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    625e:	ubfx	r7, r7, #5, #16
    dir = dirFile->readDirCache();
    6262:	bl	5090 <FatFile::readDirCache(bool)>
    if (!dir) {
    6266:	cbnz	r0, 6270 <FatFile::open(FatFile*, FatName_t*, int)+0x7c>
      if (dirFile->getError()) {
    6268:	ldrb	r3, [r6, #1]
    626a:	cmp	r3, #0
    626c:	beq.n	6330 <FatFile::open(FatFile*, FatName_t*, int)+0x13c>
    626e:	b.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6270:	ldrb	r3, [r0, #0]
    6272:	cmp	r3, #229	; 0xe5
    6274:	beq.n	6278 <FatFile::open(FatFile*, FatName_t*, int)+0x84>
    6276:	cbnz	r3, 628a <FatFile::open(FatFile*, FatName_t*, int)+0x96>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6278:	cmp	r4, #0
    627a:	it	eq
    627c:	moveq	r9, r7
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    627e:	cmp	r4, fp
        freeFound++;
    6280:	itt	cc
    6282:	addcc	r4, #1
    6284:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6286:	cbnz	r3, 6292 <FatFile::open(FatFile*, FatName_t*, int)+0x9e>
    6288:	b.n	6330 <FatFile::open(FatFile*, FatName_t*, int)+0x13c>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    628a:	cmp	r4, fp
    628c:	it	cc
    628e:	movcc	r4, #0
    6290:	b.n	629a <FatFile::open(FatFile*, FatName_t*, int)+0xa6>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6292:	cmp	r3, #229	; 0xe5
    6294:	bne.n	629a <FatFile::open(FatFile*, FatName_t*, int)+0xa6>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6296:	movs	r5, #0
    6298:	b.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    629a:	cmp	r3, #46	; 0x2e
    629c:	beq.n	6296 <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
    629e:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    62a0:	cmp	r2, #15
    62a2:	bne.n	62f4 <FatFile::open(FatFile*, FatName_t*, int)+0x100>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    62a4:	cbnz	r5, 62c4 <FatFile::open(FatFile*, FatName_t*, int)+0xd0>
        order = ldir->order & 0X1F;
    62a6:	and.w	r8, r3, #31
        if (order != nameOrd ||
    62aa:	ldr	r2, [sp, #8]
    62ac:	cmp	r2, r8
    62ae:	bne.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
    62b0:	lsls	r1, r3, #25
    62b2:	bmi.n	62ba <FatFile::open(FatFile*, FatName_t*, int)+0xc6>
    62b4:	ldr.w	r8, [sp, #8]
    62b8:	b.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
          (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
    62ba:	ldrb	r3, [r0, #13]
    62bc:	mov	r8, r2
    62be:	mov	r5, r2
    62c0:	str	r3, [sp, #16]
    62c2:	b.n	62d8 <FatFile::open(FatFile*, FatName_t*, int)+0xe4>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    62c4:	add.w	r8, r8, #4294967295
    62c8:	uxtb.w	r8, r8
    62cc:	cmp	r3, r8
    62ce:	bne.n	6296 <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
    62d0:	ldrb	r3, [r0, #13]
    62d2:	ldr	r2, [sp, #16]
    62d4:	cmp	r2, r3
    62d6:	bne.n	6296 <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
        lfnOrd = 0;
        continue;
      }
      if (order == 1) {
    62d8:	cmp.w	r8, #1
    62dc:	bne.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    62de:	adds	r1, r7, #1
    62e0:	mov	r3, r5
    62e2:	mov	r2, sl
    62e4:	mov	r0, r6
    62e6:	uxth	r1, r1
    62e8:	bl	5ecc <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)>
          lfnOrd = 0;
    62ec:	cmp	r0, #0
    62ee:	it	eq
    62f0:	moveq	r5, #0
    62f2:	b.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        }
      }
    } else if (isFileOrSubdir(dir)) {
    62f4:	lsls	r3, r2, #28
    62f6:	bmi.n	6296 <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
      if (lfnOrd) {
    62f8:	cbz	r5, 630e <FatFile::open(FatFile*, FatName_t*, int)+0x11a>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    62fa:	cmp.w	r8, #1
    62fe:	bne.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    6300:	bl	5eae <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>
    6304:	ldr	r3, [sp, #16]
    6306:	cmp	r3, r0
    6308:	bne.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    630c:	b.n	6328 <FatFile::open(FatFile*, FatName_t*, int)+0x134>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    630e:	movs	r2, #11
    6310:	ldr	r1, [sp, #28]
    6312:	bl	a550 <memcmp>
    6316:	cmp	r0, #0
    6318:	bne.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    631a:	ldrb.w	r3, [sl, #21]
    631e:	lsls	r0, r3, #31
    6320:	bpl.n	6328 <FatFile::open(FatFile*, FatName_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
    6322:	movs	r3, #1
    6324:	str	r3, [sp, #20]
    6326:	b.n	6258 <FatFile::open(FatFile*, FatName_t*, int)+0x64>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6328:	ldr	r3, [sp, #12]
    632a:	lsls	r1, r3, #20
    632c:	bpl.n	6422 <FatFile::open(FatFile*, FatName_t*, int)+0x22e>
    632e:	b.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6330:	ldr	r3, [sp, #12]
    6332:	lsls	r2, r3, #22
    6334:	bpl.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    6338:	and.w	r3, r3, #3
    633c:	subs	r3, #1
    633e:	cmp	r3, #1
    6340:	bhi.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    6344:	cmp	r4, #0
    6346:	it	eq
    6348:	moveq	r9, r7
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    634a:	cmp	r4, fp
    634c:	bcc.n	6354 <FatFile::open(FatFile*, FatName_t*, int)+0x160>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
  }
  if (fnameFound) {
    634e:	ldr	r3, [sp, #20]
    6350:	cbnz	r3, 6382 <FatFile::open(FatFile*, FatName_t*, int)+0x18e>
    6352:	b.n	6390 <FatFile::open(FatFile*, FatName_t*, int)+0x19c>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    6354:	movs	r1, #0
    6356:	mov	r0, r6
    6358:	bl	5090 <FatFile::readDirCache(bool)>
    if (!dir) {
    635c:	cbnz	r0, 6364 <FatFile::open(FatFile*, FatName_t*, int)+0x170>
      if (dirFile->getError()) {
    635e:	ldrb	r3, [r6, #1]
    6360:	cbz	r3, 6376 <FatFile::open(FatFile*, FatName_t*, int)+0x182>
    6362:	b.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6364:	adds	r4, #1
    6366:	uxtb	r4, r4
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6368:	b.n	634a <FatFile::open(FatFile*, FatName_t*, int)+0x156>
    636a:	ldr	r3, [r6, #8]
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
    636c:	ldrb	r3, [r3, #4]
    636e:	add	r4, r3
    6370:	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6372:	cmp	fp, r4
    6374:	bls.n	634e <FatFile::open(FatFile*, FatName_t*, int)+0x15a>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6376:	mov	r0, r6
    6378:	bl	4dec <FatFile::addDirCluster()>
    637c:	cmp	r0, #0
    637e:	bne.n	636a <FatFile::open(FatFile*, FatName_t*, int)+0x176>
    6380:	b.n	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
  }
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
    6382:	mov	r1, sl
    6384:	mov	r0, r6
    6386:	bl	6164 <FatFile::makeUniqueSfn(FatName_t*)>
    638a:	cmp	r0, #0
    638c:	beq.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    6390:	add.w	r5, fp, #4294967295
  curIndex = freeIndex + lfnOrd;
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    6394:	mov	r2, sl
    6396:	mov	r0, r6
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    6398:	uxtb	r5, r5
  curIndex = freeIndex + lfnOrd;
    639a:	add.w	r7, r9, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    639e:	mov	r3, r5
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
  curIndex = freeIndex + lfnOrd;
    63a0:	uxth	r7, r7
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    63a2:	mov	r1, r7
    63a4:	bl	5f68 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)>
    63a8:	cmp	r0, #0
    63aa:	beq.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
    63ae:	mov	r1, r7
    63b0:	mov	r0, r6
    63b2:	bl	4bd4 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    63b6:	mov	r4, r0
    63b8:	cmp	r0, #0
    63ba:	beq.w	620a <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    63be:	movs	r2, #32
    63c0:	movs	r1, #0
    63c2:	bl	7f6c <memset>
  memcpy(dir->name, fname->sfn, 11);
    63c6:	mov	r3, sl
    63c8:	ldr.w	r2, [r3, #22]!
    63cc:	str	r2, [r4, #0]
    63ce:	ldr	r2, [r3, #4]
    63d0:	str	r2, [r4, #4]
    63d2:	ldrh	r2, [r3, #8]
    63d4:	strh	r2, [r4, #8]
    63d6:	ldrb	r3, [r3, #10]
    63d8:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    63da:	ldrb.w	r3, [sl, #21]
    63de:	and.w	r3, r3, #24
    63e2:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    63e4:	ldr	r3, [pc, #88]	; (6440 <FatFile::open(FatFile*, FatName_t*, int)+0x24c>)
    63e6:	ldr	r3, [r3, #0]
    63e8:	cbz	r3, 640a <FatFile::open(FatFile*, FatName_t*, int)+0x216>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    63ea:	add.w	r2, sp, #35	; 0x23
    63ee:	add.w	r1, sp, #38	; 0x26
    63f2:	add	r0, sp, #36	; 0x24
    63f4:	blx	r3
    63f6:	ldrh.w	r3, [sp, #36]	; 0x24
    63fa:	strh	r3, [r4, #16]
    63fc:	ldrh.w	r3, [sp, #38]	; 0x26
    6400:	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    6402:	ldrb.w	r3, [sp, #35]	; 0x23
    6406:	strb	r3, [r4, #13]
    6408:	b.n	6414 <FatFile::open(FatFile*, FatName_t*, int)+0x220>
    640a:	movw	r3, #21537	; 0x5421
    640e:	strh	r3, [r4, #16]
    6410:	strh	r3, [r4, #24]
    6412:	strh	r3, [r4, #18]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6414:	ldr	r2, [r6, #8]
    6416:	ldrb.w	r3, [r2, #40]	; 0x28
    641a:	orr.w	r3, r3, #1
    641e:	strb.w	r3, [r2, #40]	; 0x28

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6422:	str	r5, [sp, #0]
    6424:	mov	r2, r7
    6426:	ldr	r3, [sp, #12]
    6428:	mov	r1, r6
    642a:	ldr	r0, [sp, #24]
    642c:	bl	5176 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6430:	b.n	6438 <FatFile::open(FatFile*, FatName_t*, int)+0x244>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6432:	mov.w	fp, #1
    6436:	b.n	6238 <FatFile::open(FatFile*, FatName_t*, int)+0x44>
  }
  return true;

 fail:
  return false;
}
    6438:	add	sp, #44	; 0x2c
    643a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    643e:	nop
    6440:	.word	0x20003548

00006444 <FatFile::parsePathName(char const*, FatName_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatName_t* fname, const char** ptr) {
    6444:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6446:	mov	r4, r2
    6448:	mov	r6, r3
    644a:	mov	r0, r1
    644c:	adds	r1, #1
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    644e:	ldrb	r3, [r0, #0]
    6450:	cmp	r3, #32
    6452:	beq.n	644a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatName_t* fname, const char** ptr) {
  size_t len = 0;
    6454:	movs	r5, #0
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    6456:	ldr	r7, [pc, #128]	; (64d8 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x94>)
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
    6458:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    645a:	ldrb	r3, [r0, #0]
    645c:	cbz	r3, 64b0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6c>
    645e:	cmp	r3, #47	; 0x2f
    6460:	beq.n	64b0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6c>
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    6462:	add	r2, sp, #4
    6464:	adds	r1, r0, #4
    6466:	bl	2648 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    646a:	cbz	r0, 64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    646c:	ldr	r2, [sp, #4]
    646e:	cmp.w	r2, #65536	; 0x10000
    6472:	ite	cs
    6474:	movcs	r3, #2
    6476:	movcc	r3, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    6478:	cmp	r2, #127	; 0x7f
    path = FsUtf::mbToCp(path, path + 4, &cp);
    if (!path) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    647a:	add	r5, r3
    if (cp < 0X80 && lfnReservedChar(cp)) {
    647c:	bhi.n	64a6 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x62>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    647e:	cmp	r2, #31
    6480:	bls.n	64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    6482:	uxtb	r3, r2
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    6484:	sub.w	r1, r3, #34	; 0x22
    6488:	uxtb	r1, r1
    648a:	cmp	r1, #29
    648c:	bhi.n	6496 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x52>
    648e:	lsr.w	r1, r7, r1
    6492:	lsls	r1, r1, #31
    6494:	bmi.n	64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    6496:	and.w	r3, r3, #191	; 0xbf
    649a:	cmp	r3, #60	; 0x3c
    649c:	beq.n	64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    649e:	cmp	r2, #92	; 0x5c
    64a0:	beq.n	64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
    64a2:	cmp	r2, #46	; 0x2e
    64a4:	beq.n	645a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
    64a6:	cmp	r2, #32
    64a8:	beq.n	645a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
      // Need to trim trailing dots spaces.
      fname->len = len;
    64aa:	str	r5, [r4, #16]
      fname->end = path;
    64ac:	str	r0, [r4, #8]
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
  while (*path && !isDirSeparator(*path)) {
    64ae:	b.n	645a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    64b0:	ldr	r3, [r4, #16]
    64b2:	subs	r3, #1
    64b4:	cmp	r3, #254	; 0xfe
    64b6:	bhi.n	64d0 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    64b8:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    64ba:	ldrb.w	r3, [r0], #1
    64be:	cmp	r3, #32
    64c0:	beq.n	64b8 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x74>
    64c2:	cmp	r3, #47	; 0x2f
    64c4:	beq.n	64b8 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x74>
  *ptr = path;
    64c6:	str	r2, [r6, #0]
  return makeSFN(fname);
    64c8:	mov	r0, r4
    64ca:	bl	603e <FatFile::makeSFN(FatName_t*)>
    64ce:	b.n	64d2 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8e>

 fail:
  return false;
    64d0:	movs	r0, #0
}
    64d2:	add	sp, #12
    64d4:	pop	{r4, r5, r6, r7, pc}
    64d6:	nop
    64d8:	.word	0x31002101

000064dc <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    64dc:	push	{r4, r5, r6, r7, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    64de:	movs	r3, #0
    64e0:	sub	sp, #44	; 0x2c
    64e2:	mov	r4, r0
    64e4:	strb.w	r3, [sp, #4]
    64e8:	strb.w	r3, [sp, #5]
    64ec:	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    64f0:	ldrb	r3, [r0, #2]
    64f2:	lsls	r2, r3, #30
    64f4:	bpl.n	6526 <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    64f6:	ldr	r1, [r0, #32]
    64f8:	cbz	r1, 6502 <FatFile::remove()+0x26>
    64fa:	ldr	r0, [r0, #8]
    64fc:	bl	5cba <FatPartition::freeChain(unsigned long)>
    6500:	cbz	r0, 6526 <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6502:	movs	r1, #1
    6504:	mov	r0, r4
    6506:	bl	4e78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    650a:	mov	r5, r0
    650c:	cbz	r0, 6526 <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  checksum = lfnChecksum(dir->name);
    650e:	bl	5eae <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    6512:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6514:	movs	r3, #0
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  checksum = lfnChecksum(dir->name);
    6516:	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    6518:	strb	r6, [r5, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    651a:	strb	r3, [r4, #0]
  m_flags = 0;
    651c:	strb	r3, [r4, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    651e:	ldr	r0, [r4, #8]
    6520:	bl	4d90 <FatPartition::cacheSync()>
    6524:	cbnz	r0, 652a <FatFile::remove()+0x4e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    6526:	movs	r0, #0
    6528:	b.n	658a <FatFile::remove()+0xae>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    652a:	ldrb	r3, [r4, #3]
    652c:	cbz	r3, 658a <FatFile::remove()+0xae>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    652e:	mov	r1, r4
    6530:	add	r0, sp, #4
    6532:	bl	4ec6 <FatFile::openCluster(FatFile*)>
    6536:	cmp	r0, #0
    6538:	beq.n	6526 <FatFile::remove()+0x4a>
    653a:	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    653c:	ldrb	r3, [r4, #3]
    653e:	cmp	r3, r5
    6540:	bcc.n	6526 <FatFile::remove()+0x4a>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    6542:	ldrh	r1, [r4, #4]
    6544:	add	r0, sp, #4
    6546:	subs	r1, r1, r5
    6548:	uxth	r1, r1
    654a:	bl	4bd4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    654e:	cmp	r0, #0
    6550:	beq.n	6526 <FatFile::remove()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6552:	ldrb	r3, [r0, #11]
    6554:	cmp	r3, #15
    6556:	bne.n	6526 <FatFile::remove()+0x4a>
        order != (ldir->order & 0X1F) ||
    6558:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    655a:	and.w	r3, r2, #31
    655e:	cmp	r5, r3
    6560:	bne.n	6526 <FatFile::remove()+0x4a>
        order != (ldir->order & 0X1F) ||
    6562:	ldrb	r3, [r0, #13]
    6564:	cmp	r3, r7
    6566:	bne.n	6526 <FatFile::remove()+0x4a>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    6568:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    656a:	ldr	r1, [r4, #8]
    656c:	ldrb.w	r3, [r1, #40]	; 0x28
    6570:	orr.w	r3, r3, #1
    6574:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    6578:	lsls	r3, r2, #25
    657a:	bpl.n	6584 <FatFile::remove()+0xa8>
      if (!m_vol->cacheSync()) {
    657c:	ldr	r0, [r4, #8]
    657e:	bl	4d90 <FatPartition::cacheSync()>
    6582:	b.n	658a <FatFile::remove()+0xae>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6584:	adds	r5, #1
    6586:	uxtb	r5, r5
    6588:	b.n	653c <FatFile::remove()+0x60>
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
}
    658a:	add	sp, #44	; 0x2c
    658c:	pop	{r4, r5, r6, r7, pc}

0000658e <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    658e:	push	{r3, r4, r5, r6, r7, lr}
    6590:	movs	r4, #0
    6592:	mov	r6, r0
    6594:	mov	r5, r1
    6596:	str	r4, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6598:	ldr	r7, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    659a:	str	r4, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    659c:	cbz	r7, 65c0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x32>
    m_fFile = new (m_fileMem) FatFile;
    659e:	mov	r1, r0
    65a0:	movs	r0, #36	; 0x24
    65a2:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    65a6:	strb	r4, [r0, #0]
    65a8:	strb	r4, [r0, #1]
    65aa:	strb	r4, [r0, #2]
    *m_fFile = *from.m_fFile;
    65ac:	mov	r4, r0
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    65ae:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    65b0:	ldr	r5, [r5, #56]	; 0x38
    65b2:	ldmia	r5!, {r0, r1, r2, r3}
    65b4:	stmia	r4!, {r0, r1, r2, r3}
    65b6:	ldmia	r5!, {r0, r1, r2, r3}
    65b8:	stmia	r4!, {r0, r1, r2, r3}
    65ba:	ldr	r3, [r5, #0]
    65bc:	str	r3, [r4, #0]
    65be:	b.n	65ec <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x5e>
  } else if (from.m_xFile) {
    65c0:	ldr	r3, [r1, #60]	; 0x3c
    65c2:	cbz	r3, 65ec <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x5e>
    m_xFile = new (m_fileMem) ExFatFile;
    65c4:	mov	r1, r0
    65c6:	movs	r0, #56	; 0x38
    65c8:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    65cc:	strb.w	r7, [r0, #49]	; 0x31
    65d0:	strb.w	r7, [r0, #50]	; 0x32
    65d4:	strb.w	r7, [r0, #51]	; 0x33
    65d8:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    65da:	ldr	r3, [r5, #60]	; 0x3c
    65dc:	add.w	r2, r3, #52	; 0x34
    65e0:	ldr.w	r1, [r3], #4
    65e4:	cmp	r3, r2
    65e6:	str.w	r1, [r0], #4
    65ea:	bne.n	65e0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x52>
  }
}
    65ec:	mov	r0, r6
    65ee:	pop	{r3, r4, r5, r6, r7, pc}

000065f0 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    65f0:	push	{r4, lr}
    65f2:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    65f4:	ldr	r0, [r0, #56]	; 0x38
    65f6:	cbz	r0, 65fe <FsBaseFile::close()+0xe>
    65f8:	bl	53a0 <FatFile::close()>
    65fc:	cbnz	r0, 660e <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    65fe:	ldr	r0, [r4, #60]	; 0x3c
    6600:	cbz	r0, 6614 <FsBaseFile::close()+0x24>
    6602:	bl	3192 <ExFatFile::close()>
    6606:	cbz	r0, 6614 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6608:	movs	r3, #0
    660a:	str	r3, [r4, #60]	; 0x3c
    660c:	pop	{r4, pc}
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    m_fFile = nullptr;
    660e:	movs	r3, #0
    6610:	str	r3, [r4, #56]	; 0x38
    return true;
    6612:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
    6614:	movs	r0, #0
}
    6616:	pop	{r4, pc}

00006618 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6618:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    661c:	mov	r4, r0
    661e:	mov	r7, r2
    6620:	mov	r8, r3
  if (!vol) {
    6622:	mov	r5, r1
    6624:	cbnz	r1, 662c <FsBaseFile::open(FsVolume*, char const*, int)+0x14>
    return false;
    6626:	movs	r0, #0
    6628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  close();
    662c:	bl	65f0 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6630:	ldr.w	r6, [r5, #1152]	; 0x480
    6634:	cbz	r6, 665c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6636:	mov	r1, r4
    6638:	movs	r0, #36	; 0x24
    663a:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    663e:	movs	r2, #0
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6640:	mov	r3, r8
    6642:	strb	r2, [r0, #0]
    6644:	strb	r2, [r0, #1]
    6646:	strb	r2, [r0, #2]
    6648:	mov	r2, r7
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    664a:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    664c:	ldr.w	r1, [r5, #1152]	; 0x480
    6650:	bl	5458 <FatFile::open(FatVolume*, char const*, int)>
    6654:	cbz	r0, 6690 <FsBaseFile::open(FsVolume*, char const*, int)+0x78>
      return true;
    6656:	movs	r0, #1
    6658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    665c:	ldr.w	r3, [r5, #1156]	; 0x484
    6660:	cmp	r3, #0
    6662:	beq.n	6626 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    m_xFile = new (m_fileMem) ExFatFile;
    6664:	mov	r1, r4
    6666:	movs	r0, #56	; 0x38
    6668:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    666c:	mov	r3, r8
    666e:	strb.w	r6, [r0, #49]	; 0x31
    6672:	mov	r2, r7
    6674:	strb.w	r6, [r0, #50]	; 0x32
    6678:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    667c:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    667e:	ldr.w	r1, [r5, #1156]	; 0x484
    6682:	bl	3910 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6686:	cmp	r0, #0
    6688:	bne.n	6656 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    }
    m_xFile = nullptr;
    668a:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    668c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    6690:	str	r0, [r4, #56]	; 0x38
    6692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006696 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    6696:	push	{r3, r4, r5, r6, r7, lr}
    6698:	mov	r5, r1
    669a:	mov	r4, r0
    669c:	mov	r7, r2
  close();
    669e:	bl	65f0 <FsBaseFile::close()>
  if (dir->m_fFile) {
    66a2:	ldr	r6, [r5, #56]	; 0x38
    66a4:	cbz	r6, 66ca <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    66a6:	mov	r1, r4
    66a8:	movs	r0, #36	; 0x24
    66aa:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    66ae:	movs	r2, #0
    66b0:	strb	r2, [r0, #0]
    66b2:	strb	r2, [r0, #1]
    66b4:	strb	r2, [r0, #2]
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    66b6:	mov	r2, r7
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    66b8:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    66ba:	ldr	r1, [r5, #56]	; 0x38
    66bc:	bl	523a <FatFile::openNext(FatFile*, int)>
    66c0:	cbz	r0, 66c6 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    66c2:	movs	r0, #1
    66c4:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    66c6:	str	r0, [r4, #56]	; 0x38
    66c8:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    66ca:	ldr	r0, [r5, #60]	; 0x3c
    66cc:	cbz	r0, 66f2 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    66ce:	mov	r1, r4
    66d0:	movs	r0, #56	; 0x38
    66d2:	bl	67d8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    66d6:	mov	r2, r7
    66d8:	strb.w	r6, [r0, #49]	; 0x31
    66dc:	strb.w	r6, [r0, #50]	; 0x32
    66e0:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    66e4:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    66e6:	ldr	r1, [r5, #60]	; 0x3c
    66e8:	bl	391e <ExFatFile::openNext(ExFatFile*, int)>
    66ec:	cmp	r0, #0
    66ee:	bne.n	66c2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    66f0:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    66f2:	pop	{r3, r4, r5, r6, r7, pc}

000066f4 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    66f4:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    66f6:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    66f8:	mov	r4, r0
  m_blockDev = blockDev;
    66fa:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    66fe:	mov	r1, r0
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6700:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    6704:	mov.w	r0, #1152	; 0x480
    6708:	bl	67d8 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    670c:	movs	r2, #1
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    670e:	strb.w	r6, [r0, #1092]	; 0x444
    6712:	mov	r5, r0
    6714:	strb.w	r6, [r0, #1145]	; 0x479
    6718:	strb.w	r6, [r0, #1146]	; 0x47a
    671c:	strb.w	r6, [r0, #1147]	; 0x47b
    6720:	str.w	r0, [r4, #1156]	; 0x484
    6724:	ldr.w	r1, [r4, #1160]	; 0x488
    6728:	bl	3c78 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    672c:	ldr	r7, [pc, #116]	; (67a4 <FsVolume::begin(BlockDeviceInterface*)+0xb0>)
    672e:	cbz	r0, 6748 <FsVolume::begin(BlockDeviceInterface*)+0x54>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6730:	add.w	r6, r5, #1096	; 0x448
    6734:	mov	r0, r6
    6736:	bl	3192 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    673a:	mov	r1, r5
    673c:	mov	r0, r6
    673e:	bl	31e6 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6742:	cbz	r0, 6748 <FsVolume::begin(BlockDeviceInterface*)+0x54>
      return false;
    }
    if (setCwv || !m_cwv) {
    6744:	ldr	r3, [pc, #96]	; (67a8 <FsVolume::begin(BlockDeviceInterface*)+0xb4>)
    6746:	b.n	678e <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6748:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    674a:	mov	r1, r4
    674c:	movw	r0, #1132	; 0x46c
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6750:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6754:	bl	67d8 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6758:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    675a:	strb	r6, [r0, #7]
    675c:	mov	r5, r0
    675e:	strb.w	r6, [r0, #1096]	; 0x448
    6762:	strb.w	r6, [r0, #1097]	; 0x449
    6766:	strb.w	r6, [r0, #1098]	; 0x44a
    676a:	str.w	r0, [r4, #1152]	; 0x480
    676e:	ldr.w	r1, [r4, #1160]	; 0x488
    6772:	bl	5d5c <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6776:	cbz	r0, 679a <FsVolume::begin(BlockDeviceInterface*)+0xa6>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6778:	add.w	r6, r5, #1096	; 0x448
    677c:	mov	r0, r6
    677e:	bl	53a0 <FatFile::close()>
    return m_vwd.openRoot(this);
    6782:	mov	r1, r5
    6784:	mov	r0, r6
    6786:	bl	4e96 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    678a:	cbz	r0, 679a <FsVolume::begin(BlockDeviceInterface*)+0xa6>
      return false;
    }
    if (setCwv || !m_cwv) {
    678c:	ldr	r3, [pc, #28]	; (67ac <FsVolume::begin(BlockDeviceInterface*)+0xb8>)
    678e:	ldr	r2, [r3, #0]
    6790:	cbnz	r2, 6794 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
      m_cwv = this;
    6792:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6794:	str	r4, [r7, #0]
  return true;
    6796:	movs	r0, #1
    6798:	pop	{r3, r4, r5, r6, r7, pc}
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    679a:	movs	r0, #0
    679c:	str	r0, [r7, #0]
  m_fVol = nullptr;
    679e:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    67a2:	pop	{r3, r4, r5, r6, r7, pc}
    67a4:	.word	0x20003580
    67a8:	.word	0x2000354c
    67ac:	.word	0x20003584

000067b0 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    67b0:	push	{r3, r4, r5, lr}
    67b2:	mov	r4, r0
    67b4:	mov.w	r5, #1000	; 0x3e8
    67b8:	movs	r0, #0
    67ba:	str	r5, [r4, #8]
    67bc:	strb	r0, [r4, #4]
    67be:	strb	r0, [r4, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    67c0:	str	r0, [r4, #72]	; 0x48
    67c2:	str	r0, [r4, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    67c4:	mov	r0, r4
    67c6:	ldr	r5, [pc, #12]	; (67d4 <FsVolume::open(char const*, int)+0x24>)
    67c8:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    67cc:	bl	6618 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    67d0:	mov	r0, r4
    67d2:	pop	{r3, r4, r5, pc}
    67d4:	.word	0x200004cc

000067d8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    67d8:	mov	r0, r1
    67da:	bx	lr

000067dc <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    67dc:	ldrb	r0, [r0, #15]
    67de:	bx	lr

000067e0 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    67e0:	ldrb	r0, [r0, #17]
    67e2:	bx	lr

000067e4 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    67e4:	ldr	r3, [r0, #0]
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    67e6:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    67e8:	ldr	r4, [r3, #16]
    67ea:	movs	r3, #1
    67ec:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    67ee:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    67f2:	bx	ip

000067f4 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    67f4:	ldrb	r0, [r0, #18]
    67f6:	bx	lr

000067f8 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    67f8:	bx	lr

000067fa <SdSpiCard::~SdSpiCard()>:
    67fa:	push	{r4, lr}
    67fc:	mov	r4, r0
    67fe:	movs	r1, #20
    6800:	bl	9ab6 <operator delete(void*, unsigned int)>
    6804:	mov	r0, r4
    6806:	pop	{r4, pc}

00006808 <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6808:	push	{r0, r1, r2, r3, r4, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    680a:	ldr	r3, [r0, #0]
    680c:	mov	r1, sp
    680e:	ldr	r3, [r3, #60]	; 0x3c
    6810:	blx	r3
    6812:	cbz	r0, 6882 <SdSpiCard::sectorCount()+0x7a>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    6814:	ldrb.w	r3, [sp]
    6818:	ands.w	r3, r3, #192	; 0xc0
    681c:	bne.n	685e <SdSpiCard::sectorCount()+0x56>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    681e:	ldrb.w	r0, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6822:	ldrb.w	r3, [sp, #7]
    6826:	and.w	r0, r0, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    682a:	ldrb.w	r2, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    682e:	lsls	r3, r3, #2
    6830:	orr.w	r3, r3, r0, lsl #10
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6834:	ldrb.w	r0, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6838:	orr.w	r0, r3, r0, lsr #6
    683c:	adds	r3, r0, #1
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    683e:	ldrb.w	r0, [sp, #9]
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6842:	and.w	r0, r0, #3
    6846:	lsls	r0, r0, #1
    6848:	orr.w	r0, r0, r2, lsr #7
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    684c:	ldrb.w	r2, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6850:	and.w	r2, r2, #15
    6854:	add	r0, r2
    6856:	subs	r0, #7
    6858:	lsl.w	r0, r3, r0
    685c:	b.n	6882 <SdSpiCard::sectorCount()+0x7a>
  } else if (csd->v2.csd_ver == 1) {
    685e:	cmp	r3, #64	; 0x40
    6860:	bne.n	6880 <SdSpiCard::sectorCount()+0x78>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6862:	ldrb.w	r0, [sp, #9]
    6866:	adds	r3, r0, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6868:	ldrb.w	r0, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    686c:	and.w	r0, r0, #63	; 0x3f
    6870:	add.w	r0, r3, r0, lsl #16
    6874:	ldrb.w	r3, [sp, #8]
    6878:	add.w	r0, r0, r3, lsl #8
    687c:	lsls	r0, r0, #10
    687e:	b.n	6882 <SdSpiCard::sectorCount()+0x7a>
    6880:	movs	r0, #0
}
    6882:	add	sp, #20
    6884:	ldr.w	pc, [sp], #4

00006888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriverPtr->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriverPtr->send(data);
    6888:	ldr	r3, [r0, #0]
    688a:	ldr	r3, [r3, #20]
    688c:	bx	r3

0000688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>:
  }
  void spiDeactivate() {
    m_spiDriverPtr->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriverPtr->receive();
    688e:	ldr	r3, [r0, #0]
    6890:	ldr	r3, [r3, #12]
    6892:	bx	r3

00006894 <SdSpiCard::spiStart()>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6894:	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    6896:	ldrb	r5, [r0, #16]
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6898:	mov	r4, r0
  if (!m_spiActive) {
    689a:	cbnz	r5, 68b8 <SdSpiCard::spiStart()+0x24>
    689c:	ldr	r0, [r0, #4]
    m_spiDriver.setSckSpeed(maxSck);
  }
  SdSpiDriver m_spiDriver;
#else  // SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriverPtr->activate();
    689e:	ldr	r3, [r0, #0]
    68a0:	ldr	r3, [r3, #0]
    68a2:	blx	r3
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    68a4:	mov	r1, r5
    68a6:	ldrb	r0, [r4, #14]
    68a8:	bl	15c4 <sdCsWrite(unsigned char, bool)>
    spiActivate();
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);    
    68ac:	movs	r1, #255	; 0xff
    68ae:	ldr	r0, [r4, #4]
    68b0:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    m_spiActive = true;
    68b4:	movs	r3, #1
    68b6:	strb	r3, [r4, #16]
    68b8:	pop	{r3, r4, r5, pc}

000068ba <SdSpiCard::spiStop()>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    68ba:	ldrb	r3, [r0, #16]
    spiSend(0XFF);    
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    68bc:	push	{r4, lr}
    68be:	mov	r4, r0
  if (m_spiActive) {
    68c0:	cbz	r3, 68de <SdSpiCard::spiStop()+0x24>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    68c2:	movs	r1, #1
    68c4:	ldrb	r0, [r0, #14]
    68c6:	bl	15c4 <sdCsWrite(unsigned char, bool)>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);        
    68ca:	movs	r1, #255	; 0xff
    68cc:	ldr	r0, [r4, #4]
    68ce:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    68d2:	ldr	r0, [r4, #4]
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriverPtr->begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriverPtr->deactivate();
    68d4:	ldr	r3, [r0, #0]
    68d6:	ldr	r3, [r3, #8]
    68d8:	blx	r3
    spiDeactivate();
    m_spiActive = false;
    68da:	movs	r3, #0
    68dc:	strb	r3, [r4, #16]
    68de:	pop	{r4, pc}

000068e0 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    68e0:	push	{r4, r5, r6, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    68e2:	ldrb	r3, [r0, #12]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    68e4:	mov	r5, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    68e6:	cmp	r3, #1
    68e8:	beq.n	690a <SdSpiCard::isBusy()+0x2a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool spiActive = m_spiActive;
    68ea:	ldrb	r6, [r0, #16]
  if (!spiActive) {
    68ec:	cbnz	r6, 68f2 <SdSpiCard::isBusy()+0x12>
    spiStart();
    68ee:	bl	6894 <SdSpiCard::spiStart()>
  }
  bool rtn = 0XFF != spiReceive();
    68f2:	ldr	r0, [r5, #4]
    68f4:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    68f8:	subs.w	r4, r0, #255	; 0xff
    68fc:	it	ne
    68fe:	movne	r4, #1
  if (!spiActive) {
    6900:	cbnz	r6, 690e <SdSpiCard::isBusy()+0x2e>
    spiStop();
    6902:	mov	r0, r5
    6904:	bl	68ba <SdSpiCard::spiStop()>
    6908:	b.n	690e <SdSpiCard::isBusy()+0x2e>
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    690a:	movs	r0, #0
    690c:	pop	{r4, r5, r6, pc}
  }
  bool rtn = 0XFF != spiReceive();
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    690e:	mov	r0, r4
}
    6910:	pop	{r4, r5, r6, pc}
	...

00006914 <SdSpiCard::readData(unsigned char*, unsigned int)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    6914:	ldr	r3, [pc, #100]	; (697c <SdSpiCard::readData(unsigned char*, unsigned int)+0x68>)
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    6916:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691a:	ldr	r6, [r3, #0]
    691c:	mov	r4, r0
    691e:	mov	r7, r1
    6920:	mov	r8, r2
    6922:	mov	r5, r3

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    6924:	uxth	r6, r6
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    6926:	ldr	r0, [r4, #4]
    6928:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    692c:	cmp	r0, #255	; 0xff
    692e:	strb	r0, [r4, #17]
    6930:	bne.n	6942 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2e>
    6932:	ldr	r3, [r5, #0]
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    6934:	uxth	r3, r3
    6936:	subs	r3, r3, r6
    6938:	cmp.w	r3, #300	; 0x12c
    693c:	ble.n	6926 <SdSpiCard::readData(unsigned char*, unsigned int)+0x12>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    693e:	movs	r3, #29
    6940:	b.n	695c <SdSpiCard::readData(unsigned char*, unsigned int)+0x48>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    6942:	cmp	r0, #254	; 0xfe
    6944:	beq.n	694a <SdSpiCard::readData(unsigned char*, unsigned int)+0x36>
    6946:	movs	r3, #24
    6948:	b.n	695c <SdSpiCard::readData(unsigned char*, unsigned int)+0x48>
    694a:	ldr	r0, [r4, #4]
  }
  uint8_t spiReceive() {
    return m_spiDriverPtr->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriverPtr->receive(buf, n);
    694c:	mov	r2, r8
    694e:	mov	r1, r7
    6950:	ldr	r3, [r0, #0]
    6952:	ldr	r3, [r3, #16]
    6954:	blx	r3
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    6956:	strb	r0, [r4, #17]
    6958:	cbz	r0, 696a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    695a:	movs	r3, #37	; 0x25
  spiReceive();
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
    695c:	mov	r0, r4
    695e:	strb	r3, [r4, #15]
    6960:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6964:	movs	r0, #0
}
    6966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
    696a:	ldr	r0, [r4, #4]
    696c:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
  spiReceive();
    6970:	ldr	r0, [r4, #4]
    6972:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6976:	movs	r0, #1
    6978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    697c:	.word	0x200087fc

00006980 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6980:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6984:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6986:	ldrb	r3, [r0, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6988:	mov	r4, r0
    698a:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    698c:	cmp	r3, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    698e:	mov	r6, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6990:	bne.n	6998 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    6992:	ldr	r3, [r0, #8]
    6994:	cmp	r3, r1
    6996:	beq.n	69aa <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    if (!writeStart(sector)) {
    6998:	ldr	r3, [r4, #0]
    699a:	mov	r1, r5
    699c:	mov	r0, r4
    699e:	ldr	r3, [r3, #80]	; 0x50
    69a0:	blx	r3
    69a2:	cbz	r0, 69d8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    69a4:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    69a6:	str	r5, [r4, #8]
    m_curState = WRITE_STATE;
    69a8:	strb	r3, [r4, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    69aa:	movs	r5, #0
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    69ac:	cmp	r5, r7
    69ae:	add.w	r1, r6, r5, lsl #9
    69b2:	beq.n	69c2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
    if (!writeData(src)) {
    69b4:	ldr	r3, [r4, #0]
    69b6:	mov	r0, r4
    69b8:	ldr	r3, [r3, #76]	; 0x4c
    69ba:	blx	r3
    69bc:	cbz	r0, 69d8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    69be:	adds	r5, #1
    69c0:	b.n	69ac <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    69c2:	ldr	r3, [r4, #8]
    69c4:	add	r5, r3
  return m_sharedSpi ? syncDevice() : true;
    69c6:	ldrb	r3, [r4, #13]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    69c8:	str	r5, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    69ca:	cbz	r3, 69e4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x64>
    69cc:	ldr	r3, [r4, #0]
    69ce:	mov	r0, r4
    69d0:	ldr	r3, [r3, #28]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    69d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    69d6:	bx	r3
  }
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
    69d8:	mov	r0, r4
    69da:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    69de:	movs	r0, #0
    69e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    69e4:	movs	r0, #1
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    69e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000069ea <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    69ea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69ee:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    69f0:	ldrb	r3, [r0, #12]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    69f2:	mov	r4, r0
    69f4:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    69f6:	cmp	r3, #2
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    69f8:	mov	r6, r2
    69fa:	ldr.w	r8, [sp, #32]
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    69fe:	bne.n	6a06 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    6a00:	ldr	r3, [r0, #8]
    6a02:	cmp	r3, r1
    6a04:	beq.n	6a18 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
    if (!writeStart(sector)) {
    6a06:	ldr	r3, [r4, #0]
    6a08:	mov	r1, r5
    6a0a:	mov	r0, r4
    6a0c:	ldr	r3, [r3, #80]	; 0x50
    6a0e:	blx	r3
    6a10:	cbz	r0, 6a4e <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    6a12:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    6a14:	str	r5, [r4, #8]
    m_curState = WRITE_STATE;
    6a16:	strb	r3, [r4, #12]
    6a18:	add.w	r9, r5, r6
  }
  for (size_t i = 0; i < ns; i++) {
    6a1c:	cmp	r5, r9
    6a1e:	beq.n	6a38 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    6a20:	mov	r1, r8
    6a22:	mov	r0, r5
    6a24:	blx	r7
    if (!writeData(src)) {
    6a26:	ldr	r3, [r4, #0]
    6a28:	mov	r1, r0
    6a2a:	mov	r0, r4
    6a2c:	ldr	r3, [r3, #76]	; 0x4c
    6a2e:	adds	r5, #1
    6a30:	blx	r3
    6a32:	cmp	r0, #0
    6a34:	bne.n	6a1c <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    6a36:	b.n	6a4e <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
      goto fail;
    }
  }
  m_curSector += ns;
    6a38:	ldr	r3, [r4, #8]
    6a3a:	add	r6, r3
  return m_sharedSpi ? syncDevice() : true;
    6a3c:	ldrb	r3, [r4, #13]
    const uint8_t *src = callback(sector + i, context);
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    6a3e:	str	r6, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    6a40:	cbz	r3, 6a5a <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x70>
    6a42:	ldr	r3, [r4, #0]
    6a44:	mov	r0, r4
    6a46:	ldr	r3, [r3, #28]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    6a48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6a4c:	bx	r3
  }
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
    6a4e:	mov	r0, r4
    6a50:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6a54:	movs	r0, #0
    6a56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6a5a:	movs	r0, #1
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    6a5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006a60 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    6a60:	push	{r3, r4, r5, r6, r7, lr}
    6a62:	ldr	r3, [pc, #40]	; (6a8c <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    6a64:	mov	r7, r0
    6a66:	mov	r6, r1
    6a68:	ldr	r5, [r3, #0]
    6a6a:	mov	r4, r3
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6a6c:	uxth	r5, r5
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6a6e:	ldr	r0, [r7, #4]
    6a70:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6a74:	cmp	r0, #255	; 0xff
    6a76:	beq.n	6a86 <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    6a78:	ldr	r3, [r4, #0]
    if (isTimedOut(t0, timeoutMS)) {
    6a7a:	uxth	r3, r3
    6a7c:	subs	r3, r3, r5
    6a7e:	cmp	r3, r6
    6a80:	ble.n	6a6e <SdSpiCard::waitNotBusy(unsigned short)+0xe>
      return false;
    6a82:	movs	r0, #0
    6a84:	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  return true;
    6a86:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    6a88:	pop	{r3, r4, r5, r6, r7, pc}
    6a8a:	nop
    6a8c:	.word	0x200087fc

00006a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6a90:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6a92:	ldrb	r3, [r0, #12]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6a94:	mov	r4, r0
    6a96:	mov	r5, r1
    6a98:	str	r2, [sp, #4]
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6a9a:	cbz	r3, 6aa8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>
    6a9c:	ldr	r3, [r0, #0]
    6a9e:	ldr	r3, [r3, #28]
    6aa0:	blx	r3
    6aa2:	cbnz	r0, 6aa8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>
    return 0XFF;
    6aa4:	movs	r0, #255	; 0xff
    6aa6:	b.n	6b0a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7a>
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    6aa8:	ldrb	r3, [r4, #16]
    6aaa:	cbnz	r3, 6ab2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    spiStart();
    6aac:	mov	r0, r4
    6aae:	bl	6894 <SdSpiCard::spiStart()>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    6ab2:	cbz	r5, 6abe <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    6ab4:	mov.w	r1, #300	; 0x12c
    6ab8:	mov	r0, r4
    6aba:	bl	6a60 <SdSpiCard::waitNotBusy(unsigned short)>
    6abe:	add.w	r6, sp, #7
    6ac2:	add.w	r7, sp, #3

  // send message
  spiSend(buf, 6);
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
    6ac6:	orr.w	r1, r5, #64	; 0x40
    6aca:	ldr	r0, [r4, #4]
    6acc:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
    6ad0:	ldrb.w	r1, [r6], #-1
    6ad4:	ldr	r0, [r4, #4]
    6ad6:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6ada:	cmp	r7, r6
    6adc:	bne.n	6ad0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x40>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6ade:	cmp	r5, #0
    6ae0:	ldr	r0, [r4, #4]
#endif  // USE_SD_CRC

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();
    6ae2:	mov.w	r5, #11
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6ae6:	ite	eq
    6ae8:	moveq	r1, #149	; 0x95
    6aea:	movne	r1, #135	; 0x87
    6aec:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
#endif  // USE_SD_CRC

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();
    6af0:	ldr	r0, [r4, #4]
    6af2:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6af6:	ldr	r0, [r4, #4]
    6af8:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6afc:	lsls	r3, r0, #24
    6afe:	strb	r0, [r4, #17]
    6b00:	bpl.n	6b0a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7a>
    6b02:	subs	r5, #1
    6b04:	ands.w	r5, r5, #255	; 0xff
    6b08:	bne.n	6af6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x66>
  }
  return m_status;
}
    6b0a:	add	sp, #12
    6b0c:	pop	{r4, r5, r6, r7, pc}

00006b0e <SdSpiCard::cardAcmd(unsigned char, unsigned long)>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    6b0e:	push	{r4, r5, r6, lr}
    6b10:	mov	r4, r0
    6b12:	mov	r5, r1
    6b14:	mov	r6, r2
    cardCommand(CMD55, 0);
    6b16:	movs	r1, #55	; 0x37
    6b18:	movs	r2, #0
    6b1a:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    6b1e:	mov	r2, r6
    6b20:	mov	r1, r5
    6b22:	mov	r0, r4
  }
    6b24:	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
    6b28:	b.w	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>

00006b2c <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    6b2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b30:	sub	sp, #32
    6b32:	mov	r4, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    6b34:	mov.w	sl, #0
    6b38:	ldr	r6, [pc, #408]	; (6cd4 <SdSpiCard::begin(SdSpiConfig)+0x1a8>)
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    6b3a:	add	r5, sp, #4
    6b3c:	ldr.w	r8, [r6]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    6b40:	strb.w	sl, [r4, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    6b44:	strb.w	sl, [r4, #15]
  m_type = 0;
    6b48:	strb.w	sl, [r4, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    6b4c:	stmia.w	r5, {r1, r2, r3}
    6b50:	ldrb.w	r0, [sp, #4]
    6b54:	ldr	r3, [sp, #12]
    6b56:	ldrb.w	r9, [sp, #5]
    6b5a:	ldr	r7, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    6b5c:	strb	r0, [r4, #14]
#if SPI_DRIVER_SELECT >= 2
  m_spiDriverPtr = spiConfig.spiPort;
    6b5e:	str	r3, [r4, #4]
  if (!m_spiDriverPtr) {
    6b60:	cbnz	r3, 6b66 <SdSpiCard::begin(SdSpiConfig)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6b62:	movs	r3, #42	; 0x2a
    6b64:	b.n	6c9c <SdSpiCard::begin(SdSpiConfig)+0x170>
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    6b66:	bl	15a4 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6b6a:	movs	r1, #1
    6b6c:	ldrb	r0, [r4, #14]
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    6b6e:	and.w	r9, r9, #1
    6b72:	bl	15c4 <sdCsWrite(unsigned char, bool)>
    6b76:	ldr	r0, [r4, #4]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
  }
  void spiSetSckSpeed(uint32_t maxSck) {
    m_spiDriverPtr->setSckSpeed(maxSck);
    6b78:	ldr	r1, [pc, #348]	; (6cd8 <SdSpiCard::begin(SdSpiConfig)+0x1ac>)
    6b7a:	eor.w	r9, r9, #1
    6b7e:	ldr	r3, [r0, #0]
    6b80:	ldr	r3, [r3, #28]
    6b82:	blx	r3
    6b84:	ldr.w	lr, [r4, #4]
    6b88:	add	r3, sp, #20
    6b8a:	ldmia.w	r5, {r0, r1, r2}
    6b8e:	stmia.w	r3, {r0, r1, r2}
#else  // SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriverPtr->activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriverPtr->begin(spiConfig);
    6b92:	ldr.w	r2, [lr]
    6b96:	mov	r0, lr
    6b98:	ldr	r5, [r2, #4]
    6b9a:	ldmia	r3, {r1, r2, r3}
    6b9c:	blx	r5
#else  // ENABLE_DEDICATED_SPI
  // m_sharedSpi is a static const bool in this case.
  static_assert(m_sharedSpi == true, "m_sharedSpi bug");
#endif  // ENABLE_DEDICATED_SPI
  spiStart();
    6b9e:	mov	r0, r4
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    6ba0:	strb.w	sl, [r4, #12]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6ba4:	movs	r5, #10
  m_sharedSpi = spiOptionShared(spiConfig.options);
    6ba6:	strb.w	r9, [r4, #13]
#else  // ENABLE_DEDICATED_SPI
  // m_sharedSpi is a static const bool in this case.
  static_assert(m_sharedSpi == true, "m_sharedSpi bug");
#endif  // ENABLE_DEDICATED_SPI
  spiStart();
    6baa:	bl	6894 <SdSpiCard::spiStart()>
    6bae:	movs	r1, #1
    6bb0:	ldrb	r0, [r4, #14]
    6bb2:	bl	15c4 <sdCsWrite(unsigned char, bool)>
    6bb6:	subs	r5, #1

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
    6bb8:	movs	r1, #255	; 0xff
    6bba:	ldr	r0, [r4, #4]
    6bbc:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    6bc0:	ands.w	r5, r5, #255	; 0xff
    6bc4:	bne.n	6bb6 <SdSpiCard::begin(SdSpiConfig)+0x8a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    6bc6:	mov	r1, r5
    6bc8:	movs	r5, #10
    6bca:	ldrb	r0, [r4, #14]
    6bcc:	bl	15c4 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    6bd0:	movs	r2, #0
    6bd2:	mov	r0, r4
    6bd4:	mov	r1, r2
    6bd6:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6bda:	cmp	r0, #1
    6bdc:	mov	r9, r0
    6bde:	beq.n	6c06 <SdSpiCard::begin(SdSpiConfig)+0xda>
    6be0:	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    6be2:	ands.w	r5, r5, #255	; 0xff
    6be6:	bne.n	6bec <SdSpiCard::begin(SdSpiConfig)+0xc0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6be8:	movs	r3, #1
    6bea:	b.n	6c9c <SdSpiCard::begin(SdSpiConfig)+0x170>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    6bec:	mov.w	r9, #520	; 0x208
    6bf0:	movs	r1, #253	; 0xfd
    6bf2:	ldr	r0, [r4, #4]
    6bf4:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    // finish block transfer
    for (int i = 0; i < 520; i++) {
      spiReceive();
    6bf8:	ldr	r0, [r4, #4]
    6bfa:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    6bfe:	subs.w	r9, r9, #1
    6c02:	bne.n	6bf8 <SdSpiCard::begin(SdSpiConfig)+0xcc>
    6c04:	b.n	6bd0 <SdSpiCard::begin(SdSpiConfig)+0xa4>
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    6c06:	mov.w	r2, #426	; 0x1aa
    6c0a:	movs	r1, #8
    6c0c:	mov	r0, r4
    6c0e:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6c12:	lsls	r3, r0, #29
    6c14:	bmi.n	6c34 <SdSpiCard::begin(SdSpiConfig)+0x108>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    6c16:	movs	r3, #2
    6c18:	movs	r5, #4
    6c1a:	strb	r3, [r4, #18]
    6c1c:	subs	r5, #1
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    6c1e:	ldr	r0, [r4, #4]
    6c20:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6c24:	strb	r0, [r4, #17]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    6c26:	ands.w	r5, r5, #255	; 0xff
    6c2a:	bne.n	6c1c <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    6c2c:	cmp	r0, #170	; 0xaa
    6c2e:	beq.n	6c38 <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c30:	movs	r3, #6
    6c32:	b.n	6c9c <SdSpiCard::begin(SdSpiConfig)+0x170>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    6c34:	strb.w	r9, [r4, #18]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    6c38:	ldr	r3, [r4, #0]
    6c3a:	mov	r0, r4
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    6c3c:	uxth.w	r8, r8
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    6c40:	ldr	r3, [r3, #72]	; 0x48
    6c42:	blx	r3
    6c44:	cmp	r0, #2
    6c46:	ite	eq
    6c48:	moveq.w	r5, #1073741824	; 0x40000000
    6c4c:	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    6c4e:	mov	r2, r5
    6c50:	movs	r1, #41	; 0x29
    6c52:	mov	r0, r4
    6c54:	bl	6b0e <SdSpiCard::cardAcmd(unsigned char, unsigned long)>
    6c58:	mov	r9, r0
    6c5a:	cbz	r0, 6c6e <SdSpiCard::begin(SdSpiConfig)+0x142>
    6c5c:	ldr	r3, [r6, #0]
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    6c5e:	uxth	r3, r3
    6c60:	rsb	r3, r8, r3
    6c64:	cmp.w	r3, #2000	; 0x7d0
    6c68:	ble.n	6c4e <SdSpiCard::begin(SdSpiConfig)+0x122>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c6a:	movs	r3, #23
    6c6c:	b.n	6c9c <SdSpiCard::begin(SdSpiConfig)+0x170>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    6c6e:	ldr	r3, [r4, #0]
    6c70:	mov	r0, r4
    6c72:	ldr	r3, [r3, #72]	; 0x48
    6c74:	blx	r3
    6c76:	cmp	r0, #2
    6c78:	beq.n	6c8e <SdSpiCard::begin(SdSpiConfig)+0x162>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
    6c7a:	mov	r0, r4
    6c7c:	bl	68ba <SdSpiCard::spiStop()>
    6c80:	ldr	r0, [r4, #4]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
  }
  void spiSetSckSpeed(uint32_t maxSck) {
    m_spiDriverPtr->setSckSpeed(maxSck);
    6c82:	mov	r1, r7
    6c84:	ldr	r3, [r0, #0]
    6c86:	ldr	r3, [r3, #28]
    6c88:	blx	r3
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    6c8a:	movs	r0, #1
    6c8c:	b.n	6cce <SdSpiCard::begin(SdSpiConfig)+0x1a2>
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    6c8e:	mov	r2, r9
    6c90:	movs	r1, #58	; 0x3a
    6c92:	mov	r0, r4
    6c94:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6c98:	cbz	r0, 6ca8 <SdSpiCard::begin(SdSpiConfig)+0x17c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c9a:	movs	r3, #18
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
    6c9c:	mov	r0, r4
    6c9e:	strb	r3, [r4, #15]
    6ca0:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6ca4:	movs	r0, #0
    6ca6:	b.n	6cce <SdSpiCard::begin(SdSpiConfig)+0x1a2>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    6ca8:	ldr	r0, [r4, #4]
    6caa:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6cae:	and.w	r0, r0, #192	; 0xc0
    6cb2:	cmp	r0, #192	; 0xc0
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    6cb4:	ldr	r0, [r4, #4]
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    6cb6:	itt	eq
    6cb8:	moveq	r3, #3
    6cba:	strbeq	r3, [r4, #18]
    6cbc:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6cc0:	ldr	r0, [r4, #4]
    6cc2:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6cc6:	ldr	r0, [r4, #4]
    6cc8:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6ccc:	b.n	6c7a <SdSpiCard::begin(SdSpiConfig)+0x14e>
  return true;

 fail:
  spiStop();
  return false;
}
    6cce:	add	sp, #32
    6cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cd4:	.word	0x200087fc
    6cd8:	.word	0x00061a80

00006cdc <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6cdc:	push	{r4, r5, r6, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    6cde:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6ce0:	mov	r6, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    6ce2:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6ce4:	mov	r4, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    6ce6:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6cea:	cbz	r0, 6cfa <SdSpiCard::readOCR(unsigned long*)+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6cec:	movs	r3, #18
  }
  spiStop();
  return true;

 fail:
  spiStop();
    6cee:	mov	r0, r4
    6cf0:	strb	r3, [r4, #15]
    6cf2:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6cf6:	movs	r0, #0
    6cf8:	pop	{r4, r5, r6, pc}
    6cfa:	adds	r5, r6, #4
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    6cfc:	ldr	r0, [r4, #4]
    6cfe:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6d02:	strb.w	r0, [r5, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    6d06:	cmp	r5, r6
    6d08:	bne.n	6cfc <SdSpiCard::readOCR(unsigned long*)+0x20>
    p[3 - i] = spiReceive();
  }
  spiStop();
    6d0a:	mov	r0, r4
    6d0c:	bl	68ba <SdSpiCard::spiStop()>
  return true;
    6d10:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    6d12:	pop	{r4, r5, r6, pc}

00006d14 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6d14:	push	{r3, r4, r5, lr}
    6d16:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    6d18:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6d1a:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    6d1c:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6d20:	cbz	r0, 6d28 <SdSpiCard::readRegister(unsigned char, void*)+0x14>
    6d22:	movs	r3, #27
    6d24:	strb	r3, [r4, #15]
    6d26:	b.n	6d3e <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    6d28:	mov	r1, r5
    6d2a:	movs	r2, #16
    6d2c:	mov	r0, r4
    6d2e:	bl	6914 <SdSpiCard::readData(unsigned char*, unsigned int)>
    6d32:	mov	r5, r0
    6d34:	cbz	r0, 6d3e <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    goto fail;
  }
  spiStop();
    6d36:	mov	r0, r4
    6d38:	bl	68ba <SdSpiCard::spiStop()>
  return true;
    6d3c:	b.n	6d46 <SdSpiCard::readRegister(unsigned char, void*)+0x32>

 fail:
  spiStop();
  return false;
    6d3e:	movs	r5, #0
  }
  spiStop();
  return true;

 fail:
  spiStop();
    6d40:	mov	r0, r4
    6d42:	bl	68ba <SdSpiCard::spiStop()>
  return false;
}
    6d46:	mov	r0, r5
    6d48:	pop	{r3, r4, r5, pc}

00006d4a <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6d4a:	mov	r2, r1
    6d4c:	movs	r1, #9
    6d4e:	b.w	6d14 <SdSpiCard::readRegister(unsigned char, void*)>

00006d52 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    6d52:	mov	r2, r1
    6d54:	movs	r1, #10
    6d56:	b.w	6d14 <SdSpiCard::readRegister(unsigned char, void*)>

00006d5a <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6d5a:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    6d5c:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6d5e:	mov	r5, r1
    6d60:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    6d62:	ldr	r3, [r3, #72]	; 0x48
    6d64:	blx	r3
    6d66:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    6d68:	mov.w	r1, #18
    6d6c:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    6d6e:	it	ne
    6d70:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD18, sector)) {
    6d72:	mov	r2, r5
    6d74:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6d78:	cbz	r0, 6d88 <SdSpiCard::readStart(unsigned long)+0x2e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6d7a:	movs	r3, #12
    goto fail;
  }
  return true;

 fail:
  spiStop();
    6d7c:	mov	r0, r4
    6d7e:	strb	r3, [r4, #15]
    6d80:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6d84:	movs	r0, #0
    6d86:	pop	{r3, r4, r5, pc}
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
    6d88:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    6d8a:	pop	{r3, r4, r5, pc}

00006d8c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6d8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d90:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6d92:	ldrb	r3, [r0, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6d94:	mov	r4, r0
    6d96:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6d98:	cmp	r3, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6d9a:	mov	r6, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6d9c:	bne.n	6da4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    6d9e:	ldr	r3, [r0, #8]
    6da0:	cmp	r3, r1
    6da2:	beq.n	6dba <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!readStart(sector)) {
    6da4:	mov	r1, r5
    6da6:	mov	r0, r4
    6da8:	bl	6d5a <SdSpiCard::readStart(unsigned long)>
    6dac:	cbnz	r0, 6db4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    6dae:	movs	r0, #0
    6db0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    6db4:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    6db6:	str	r5, [r4, #8]
    m_curState = READ_STATE;
    6db8:	strb	r3, [r4, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6dba:	movs	r5, #0
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6dbc:	cmp	r5, r7
    6dbe:	add.w	r1, r6, r5, lsl #9
    6dc2:	beq.n	6dd6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if (!readData(dst, 512)) {
    6dc4:	mov.w	r2, #512	; 0x200
    6dc8:	mov	r0, r4
    6dca:	bl	6914 <SdSpiCard::readData(unsigned char*, unsigned int)>
    6dce:	cmp	r0, #0
    6dd0:	beq.n	6dae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6dd2:	adds	r5, #1
    6dd4:	b.n	6dbc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x30>
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    6dd6:	ldr	r3, [r4, #8]
    6dd8:	add	r5, r3
  return m_sharedSpi ? syncDevice() : true;
    6dda:	ldrb	r3, [r4, #13]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    6ddc:	str	r5, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    6dde:	cbz	r3, 6dec <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    6de0:	ldr	r3, [r4, #0]
    6de2:	mov	r0, r4
    6de4:	ldr	r3, [r3, #28]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    6de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6dea:	bx	r3
    6dec:	movs	r0, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    6dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006df2 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6df2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6df6:	mov	r6, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6df8:	ldrb	r3, [r0, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6dfa:	mov	r4, r0
    6dfc:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6dfe:	cmp	r3, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    6e00:	mov	r7, r2
    6e02:	ldr.w	r8, [sp, #32]
    6e06:	ldr.w	r9, [sp, #36]	; 0x24
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6e0a:	bne.n	6e12 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    6e0c:	ldr	r3, [r0, #8]
    6e0e:	cmp	r3, r1
    6e10:	beq.n	6e28 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
    if (!readStart(sector)) {
    6e12:	mov	r1, r5
    6e14:	mov	r0, r4
    6e16:	bl	6d5a <SdSpiCard::readStart(unsigned long)>
    6e1a:	cbnz	r0, 6e22 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x30>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    6e1c:	movs	r0, #0
    6e1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    6e22:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    6e24:	str	r5, [r4, #8]
    m_curState = READ_STATE;
    6e26:	strb	r3, [r4, #12]
    6e28:	add.w	sl, r5, r6
  }
  for (size_t i = 0; i < ns; i++) {
    6e2c:	cmp	r5, sl
    6e2e:	beq.n	6e4c <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    if (readData(dst, 512)) {
    6e30:	mov.w	r2, #512	; 0x200
    6e34:	mov	r1, r7
    6e36:	mov	r0, r4
    6e38:	bl	6914 <SdSpiCard::readData(unsigned char*, unsigned int)>
    6e3c:	cmp	r0, #0
    6e3e:	beq.n	6e1c <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2a>
      callback(sector + i, dst, context);
    6e40:	mov	r0, r5
    6e42:	mov	r2, r9
    6e44:	mov	r1, r7
    6e46:	adds	r5, #1
    6e48:	blx	r8
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++) {
    6e4a:	b.n	6e2c <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3a>
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    6e4c:	ldr	r3, [r4, #8]
    6e4e:	add	r6, r3
  return m_sharedSpi ? syncDevice() : true;
    6e50:	ldrb	r3, [r4, #13]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    6e52:	str	r6, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    6e54:	cbz	r3, 6e62 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x70>
    6e56:	ldr	r3, [r4, #0]
    6e58:	mov	r0, r4
    6e5a:	ldr	r3, [r3, #28]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    6e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6e60:	bx	r3
    6e62:	movs	r0, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    6e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006e68 <SdSpiCard::readStop()>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e68:	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
    6e6a:	movs	r2, #0
    6e6c:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e6e:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    6e70:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6e74:	cbz	r0, 6e84 <SdSpiCard::readStop()+0x1c>
    6e76:	movs	r3, #9
  }
  spiStop();
  return true;

 fail:
  spiStop();
    6e78:	mov	r0, r4
    6e7a:	strb	r3, [r4, #15]
    6e7c:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6e80:	movs	r0, #0
    6e82:	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
    6e84:	mov	r0, r4
    6e86:	bl	68ba <SdSpiCard::spiStop()>
  return true;
    6e8a:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    6e8c:	pop	{r4, pc}

00006e8e <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    6e8e:	ldrb	r2, [r0, #12]
  m_curState = IDLE_STATE;
    6e90:	movs	r1, #0
  if (state == WRITE_STATE) {
    6e92:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    6e94:	strb	r1, [r0, #12]
  if (state == WRITE_STATE) {
    6e96:	bne.n	6e9e <SdSpiCard::syncDevice()+0x10>
    return writeStop();
    6e98:	ldr	r3, [r0, #0]
    6e9a:	ldr	r3, [r3, #84]	; 0x54
    6e9c:	bx	r3
  }
  if (state == READ_STATE) {
    6e9e:	cmp	r2, #1
    6ea0:	bne.n	6ea6 <SdSpiCard::syncDevice()+0x18>
    return readStop();
    6ea2:	b.w	6e68 <SdSpiCard::readStop()>
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    6ea6:	movs	r0, #1
    6ea8:	bx	lr

00006eaa <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6eaa:	push	{r3, r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6eac:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6eae:	mov	r5, r1
    6eb0:	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6eb2:	ldr	r3, [r3, #72]	; 0x48
    6eb4:	blx	r3
    6eb6:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    6eb8:	mov.w	r1, #25
    6ebc:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    6ebe:	it	ne
    6ec0:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, sector)) {
    6ec2:	mov	r2, r5
    6ec4:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6ec8:	cbz	r0, 6ed8 <SdSpiCard::writeStart(unsigned long)+0x2e>
    6eca:	movs	r3, #14
    goto fail;
  }
  return true;

 fail:
  spiStop();
    6ecc:	mov	r0, r4
    6ece:	strb	r3, [r4, #15]
    6ed0:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6ed4:	movs	r0, #0
    6ed6:	pop	{r3, r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    6ed8:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    6eda:	pop	{r3, r4, r5, pc}

00006edc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6edc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    6ede:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6ee0:	mov	r6, r1
  csd_t csd;
  if (!readCSD(&csd)) {
    6ee2:	mov	r1, sp
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6ee4:	mov	r4, r0
  csd_t csd;
  if (!readCSD(&csd)) {
    6ee6:	ldr	r3, [r3, #60]	; 0x3c
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6ee8:	mov	r5, r2
  csd_t csd;
  if (!readCSD(&csd)) {
    6eea:	blx	r3
    6eec:	cbz	r0, 6f50 <SdSpiCard::erase(unsigned long, unsigned long)+0x74>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    6eee:	ldrb.w	r3, [sp, #10]
    6ef2:	lsls	r2, r3, #25
    6ef4:	bmi.n	6f10 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6ef6:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    6efa:	ldrb.w	r2, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6efe:	lsls	r3, r3, #1
    6f00:	orr.w	r3, r3, r2, lsr #7
    6f04:	adds	r2, r5, #1
    6f06:	orrs	r2, r6
    6f08:	tst	r3, r2
    6f0a:	beq.n	6f10 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    6f0c:	movs	r3, #39	; 0x27
    6f0e:	b.n	6f4e <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    6f10:	ldrb	r3, [r4, #18]
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    6f12:	movs	r1, #32
    6f14:	mov	r0, r4
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    6f16:	cmp	r3, #3
    firstSector <<= 9;
    6f18:	itt	ne
    6f1a:	lslne	r6, r6, #9
    lastSector <<= 9;
    6f1c:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD32, firstSector)
    6f1e:	mov	r2, r6
    6f20:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    6f24:	cbnz	r0, 6f5a <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    6f26:	mov	r2, r5
    6f28:	movs	r1, #33	; 0x21
    6f2a:	mov	r0, r4
    6f2c:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f30:	mov	r2, r0
    6f32:	cbnz	r0, 6f5a <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
      || cardCommand(CMD38, 0)) {
    6f34:	movs	r1, #38	; 0x26
    6f36:	mov	r0, r4
    6f38:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f3c:	cbnz	r0, 6f5a <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    6f3e:	movw	r1, #10000	; 0x2710
    6f42:	mov	r0, r4
    6f44:	bl	6a60 <SdSpiCard::waitNotBusy(unsigned short)>
    6f48:	mov	r5, r0
    6f4a:	cbnz	r0, 6f5e <SdSpiCard::erase(unsigned long, unsigned long)+0x82>
    6f4c:	movs	r3, #40	; 0x28
    6f4e:	strb	r3, [r4, #15]
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;

 fail:
  spiStop();
    6f50:	mov	r0, r4
  return false;
    6f52:	movs	r5, #0
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;

 fail:
  spiStop();
    6f54:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6f58:	b.n	6f64 <SdSpiCard::erase(unsigned long, unsigned long)+0x88>
    6f5a:	movs	r3, #38	; 0x26
    6f5c:	b.n	6f4e <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
    6f5e:	mov	r0, r4
    6f60:	bl	68ba <SdSpiCard::spiStop()>
  return true;

 fail:
  spiStop();
  return false;
}
    6f64:	mov	r0, r5
    6f66:	add	sp, #16
    6f68:	pop	{r4, r5, r6, pc}

00006f6a <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6f6a:	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6f6c:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6f70:	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6f72:	bl	6a60 <SdSpiCard::waitNotBusy(unsigned short)>
    6f76:	mov	r5, r0
    6f78:	cbz	r0, 6f84 <SdSpiCard::writeStop()+0x1a>
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
    6f7a:	movs	r1, #253	; 0xfd
    6f7c:	ldr	r0, [r4, #4]
    6f7e:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    6f82:	b.n	6f88 <SdSpiCard::writeStop()+0x1e>
    6f84:	movs	r3, #30
    6f86:	strb	r3, [r4, #15]
  spiStop();
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
    6f88:	mov	r0, r4
    6f8a:	bl	68ba <SdSpiCard::spiStop()>
  return false;
}
    6f8e:	mov	r0, r5
    6f90:	pop	{r3, r4, r5, pc}

00006f92 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    6f92:	push	{r3, r4, r5, lr}
    6f94:	mov	r4, r0
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
    6f96:	ldr	r0, [r0, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    6f98:	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
    6f9a:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    6f9e:	ldr	r0, [r4, #4]
  }
  void spiSend(uint8_t data) {
    m_spiDriverPtr->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
    6fa0:	mov.w	r2, #512	; 0x200
    6fa4:	mov	r1, r5
    6fa6:	ldr	r3, [r0, #0]
    6fa8:	ldr	r3, [r3, #24]
    6faa:	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
    6fac:	movs	r1, #255	; 0xff
    6fae:	ldr	r0, [r4, #4]
    6fb0:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
  spiSend(crc & 0XFF);
    6fb4:	movs	r1, #255	; 0xff
    6fb6:	ldr	r0, [r4, #4]
    6fb8:	bl	6888 <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>

  m_status = spiReceive();
    6fbc:	ldr	r0, [r4, #4]
    6fbe:	bl	688e <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    6fc2:	strb	r0, [r4, #17]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6fc4:	and.w	r0, r0, #31
    6fc8:	cmp	r0, #5
    6fca:	beq.n	6fda <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6fcc:	movs	r3, #32
    goto fail;
  }
  return true;

 fail:
  spiStop();
    6fce:	mov	r0, r4
    6fd0:	strb	r3, [r4, #15]
    6fd2:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    6fd6:	movs	r0, #0
    6fd8:	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    6fda:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    6fdc:	pop	{r3, r4, r5, pc}

00006fde <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    6fde:	push	{r3, r4, r5, lr}
    6fe0:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6fe2:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    6fe6:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6fe8:	bl	6a60 <SdSpiCard::waitNotBusy(unsigned short)>
    6fec:	cbnz	r0, 6ff4 <SdSpiCard::writeData(unsigned char const*)+0x16>
    6fee:	movs	r3, #36	; 0x24
    6ff0:	strb	r3, [r4, #15]
    6ff2:	b.n	7000 <SdSpiCard::writeData(unsigned char const*)+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    6ff4:	mov	r2, r5
    6ff6:	movs	r1, #252	; 0xfc
    6ff8:	mov	r0, r4
    6ffa:	bl	6f92 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    6ffe:	cbnz	r0, 7008 <SdSpiCard::writeData(unsigned char const*)+0x2a>
    goto fail;
  }
  return true;

 fail:
  spiStop();
    7000:	mov	r0, r4
    7002:	bl	68ba <SdSpiCard::spiStop()>
  return false;
    7006:	movs	r0, #0
}
    7008:	pop	{r3, r4, r5, pc}

0000700a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    700a:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    700c:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    700e:	ldr	r3, [r3, #72]	; 0x48
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7010:	mov	r5, r1
    7012:	mov	r4, r0
    7014:	mov	r6, r2
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7016:	blx	r3
    7018:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    701a:	mov.w	r1, #24
    701e:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    7020:	it	ne
    7022:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD24, sector)) {
    7024:	mov	r2, r5
    7026:	bl	6a90 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    702a:	cbz	r0, 7032 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x28>
    702c:	movs	r3, #13
    702e:	strb	r3, [r4, #15]
    7030:	b.n	7048 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3e>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    7032:	mov	r2, r6
    7034:	movs	r1, #254	; 0xfe
    7036:	mov	r0, r4
    7038:	bl	6f92 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    703c:	mov	r5, r0
    703e:	cbz	r0, 7048 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3e>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_FLASH_PROGRAMMING

  spiStop();
    7040:	mov	r0, r4
    7042:	bl	68ba <SdSpiCard::spiStop()>
  return true;
    7046:	b.n	7050 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x46>

 fail:
  spiStop();
  return false;
    7048:	movs	r5, #0

  spiStop();
  return true;

 fail:
  spiStop();
    704a:	mov	r0, r4
    704c:	bl	68ba <SdSpiCard::spiStop()>
  return false;
}
    7050:	mov	r0, r5
    7052:	pop	{r4, r5, r6, pc}

00007054 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7054:	push	{r4}
    if (m_sharedSpi) {
    7056:	ldrb	r4, [r0, #13]
    7058:	cbz	r4, 7062 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    }
  }
    705a:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    705e:	b.w	700a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    } else {
      return writeSectors(sector, src, 1);
    7062:	ldr	r3, [r0, #0]
    7064:	ldr	r4, [r3, #36]	; 0x24
    7066:	movs	r3, #1
    7068:	mov	ip, r4
    }
  }
    706a:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    706e:	bx	ip

00007070 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7070:	ldr	r3, [pc, #28]	; (7090 <sdIrs()+0x20>)
    7072:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    7074:	ldr	r2, [pc, #28]	; (7094 <sdIrs()+0x24>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7076:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    7078:	ldr	r0, [r3, #48]	; 0x30
    707a:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    707c:	ldr	r2, [r2, #0]
    707e:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    7080:	ldr	r2, [r3, #72]	; 0x48
    7082:	bic.w	r2, r2, #129	; 0x81
    7086:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    7088:	ldr	r3, [pc, #12]	; (7098 <sdIrs()+0x28>)
    708a:	strb	r1, [r3, #0]
    708c:	bx	lr
    708e:	nop
    7090:	.word	0x402c0000
    7094:	.word	0x20003544
    7098:	.word	0x20008872

0000709c <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    709c:	ldr	r3, [pc, #24]	; (70b8 <gpioMux(unsigned char)+0x1c>)
    709e:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    70a2:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    70a6:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    70aa:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    70ae:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    70b2:	str.w	r0, [r3, #456]	; 0x1c8
    70b6:	bx	lr
    70b8:	.word	0x401f8000

000070bc <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    70bc:	ldr	r3, [pc, #12]	; (70cc <isBusyCommandComplete()+0x10>)
    70be:	ldr	r0, [pc, #16]	; (70d0 <isBusyCommandComplete()+0x14>)
    70c0:	ldr	r3, [r3, #48]	; 0x30
    70c2:	ands	r0, r3
}
    70c4:	clz	r0, r0
    70c8:	lsrs	r0, r0, #5
    70ca:	bx	lr
    70cc:	.word	0x402c0000
    70d0:	.word	0x000f0001

000070d4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    70d4:	ldr	r3, [pc, #8]	; (70e0 <isBusyCommandInhibit()+0xc>)
    70d6:	ldr	r0, [r3, #36]	; 0x24
}
    70d8:	and.w	r0, r0, #1
    70dc:	bx	lr
    70de:	nop
    70e0:	.word	0x402c0000

000070e4 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    70e4:	ldr	r3, [pc, #12]	; (70f4 <isBusyDat()+0x10>)
    70e6:	ldr	r0, [r3, #36]	; 0x24
    70e8:	eor.w	r0, r0, #16777216	; 0x1000000
}
    70ec:	ubfx	r0, r0, #24, #1
    70f0:	bx	lr
    70f2:	nop
    70f4:	.word	0x402c0000

000070f8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    70f8:	ldr	r3, [pc, #4]	; (7100 <isBusyDMA()+0x8>)
    70fa:	ldrb	r0, [r3, #0]
}
    70fc:	bx	lr
    70fe:	nop
    7100:	.word	0x20008872

00007104 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7104:	ldr	r3, [pc, #12]	; (7114 <isBusyFifoRead()+0x10>)
    7106:	ldr	r0, [r3, #36]	; 0x24
    7108:	eor.w	r0, r0, #2048	; 0x800
}
    710c:	ubfx	r0, r0, #11, #1
    7110:	bx	lr
    7112:	nop
    7114:	.word	0x402c0000

00007118 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    7118:	ldr	r3, [pc, #12]	; (7128 <isBusyFifoWrite()+0x10>)
    711a:	ldr	r0, [r3, #36]	; 0x24
    711c:	eor.w	r0, r0, #1024	; 0x400
}
    7120:	ubfx	r0, r0, #10, #1
    7124:	bx	lr
    7126:	nop
    7128:	.word	0x402c0000

0000712c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    712c:	ldr	r3, [pc, #12]	; (713c <isBusyTransferComplete()+0x10>)
    712e:	ldr	r0, [pc, #16]	; (7140 <isBusyTransferComplete()+0x14>)
    7130:	ldr	r3, [r3, #48]	; 0x30
    7132:	ands	r0, r3
}
    7134:	clz	r0, r0
    7138:	lsrs	r0, r0, #5
    713a:	bx	lr
    713c:	.word	0x402c0000
    7140:	.word	0x117f0002

00007144 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7144:	mov.w	r3, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7148:	movs	r2, #6
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    714a:	muls	r0, r3
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    714c:	ldr	r3, [pc, #136]	; (71d8 <setSdclk(unsigned long)+0x94>)
    714e:	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7150:	sub.w	r3, r3, #147456	; 0x24000
    7154:	ldr.w	r3, [r3, #256]	; 0x100
    7158:	ubfx	r1, r1, #11, #3
    715c:	and.w	r3, r3, #63	; 0x3f
    7160:	adds	r1, #1
    7162:	udiv	r2, r3, r2
    7166:	ldr	r3, [pc, #116]	; (71dc <setSdclk(unsigned long)+0x98>)
    7168:	udiv	r3, r3, r2
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    716c:	movs	r2, #1
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    716e:	udiv	r1, r3, r1
    7172:	movs	r3, #9
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7174:	push	{r4, r5, lr}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7176:	lsls	r4, r2, #4
    7178:	udiv	r4, r1, r4
    717c:	cmp	r0, r4
    717e:	bcc.n	7186 <setSdclk(unsigned long)+0x42>
    7180:	movs	r4, #1
    7182:	mov	r3, r2
    7184:	b.n	719a <setSdclk(unsigned long)+0x56>
    7186:	subs	r3, #1
    7188:	beq.n	7180 <setSdclk(unsigned long)+0x3c>
    sdclkfs <<= 1;
    718a:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    718c:	b.n	7176 <setSdclk(unsigned long)+0x32>
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    718e:	cmp	r4, #16
    7190:	add.w	r5, r3, r2
    7194:	beq.n	71a2 <setSdclk(unsigned long)+0x5e>
    dvs++;
    7196:	adds	r4, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7198:	mov	r3, r5
    719a:	udiv	r5, r1, r3
    719e:	cmp	r0, r5
    71a0:	bcc.n	718e <setSdclk(unsigned long)+0x4a>
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71a2:	mov.w	r0, #1000	; 0x3e8
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71a6:	lsls	r2, r2, #7
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71a8:	muls	r3, r0
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    71aa:	ldr	r0, [pc, #52]	; (71e0 <setSdclk(unsigned long)+0x9c>)
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71ac:	and.w	r2, r2, #65280	; 0xff00
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71b0:	udiv	r1, r1, r3
    71b4:	ldr	r3, [pc, #44]	; (71e4 <setSdclk(unsigned long)+0xa0>)
    71b6:	str	r1, [r3, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    71b8:	ldr	r1, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71ba:	bic.w	r3, r1, #1044480	; 0xff000
    71be:	bic.w	r3, r3, #4080	; 0xff0
    71c2:	orr.w	r3, r3, #917504	; 0xe0000
    71c6:	orrs	r2, r3
    71c8:	subs	r3, r4, #1
    71ca:	orr.w	r3, r2, r3, lsl #4
    71ce:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    71d0:	ldr	r3, [r0, #36]	; 0x24
    71d2:	lsls	r3, r3, #28
    71d4:	bpl.n	71d0 <setSdclk(unsigned long)+0x8c>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    71d6:	pop	{r4, r5, pc}
    71d8:	.word	0x400fc000
    71dc:	.word	0x5e69ec00
    71e0:	.word	0x402c0000
    71e4:	.word	0x20002930

000071e8 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    71e8:	ldr	r3, [pc, #4]	; (71f0 <SdioCard::errorCode() const+0x8>)
    71ea:	ldrb	r0, [r3, #0]
    71ec:	bx	lr
    71ee:	nop
    71f0:	.word	0x20001dec

000071f4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    71f4:	ldr	r3, [pc, #4]	; (71fc <SdioCard::errorData() const+0x8>)
    71f6:	ldr	r0, [r3, #0]
}
    71f8:	bx	lr
    71fa:	nop
    71fc:	.word	0x20003544

00007200 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    7200:	ldr	r3, [pc, #20]	; (7218 <SdioCard::readCID(CID*)+0x18>)
    7202:	add.w	r2, r3, #16
    7206:	ldr.w	r0, [r3], #4
    720a:	cmp	r3, r2
    720c:	str.w	r0, [r1], #4
    7210:	bne.n	7206 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    7212:	movs	r0, #1
    7214:	bx	lr
    7216:	nop
    7218:	.word	0x20008852

0000721c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    721c:	ldr	r3, [pc, #20]	; (7234 <SdioCard::readCSD(csd_t*)+0x18>)
    721e:	add.w	r2, r3, #16
    7222:	ldr.w	r0, [r3], #4
    7226:	cmp	r3, r2
    7228:	str.w	r0, [r1], #4
    722c:	bne.n	7222 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    722e:	movs	r0, #1
    7230:	bx	lr
    7232:	nop
    7234:	.word	0x20008862

00007238 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7238:	ldr	r3, [pc, #8]	; (7244 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    723a:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    723c:	ldr	r3, [r3, #0]
    723e:	str	r3, [r1, #0]
  return true;
}
    7240:	bx	lr
    7242:	nop
    7244:	.word	0x20003538

00007248 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7248:	bx	lr
	...

0000724c <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    724c:	push	{r3, r4, r5, r6, r7, lr}
    724e:	mov	r7, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7250:	ldr	r5, [pc, #24]	; (726c <waitTimeout(bool (*)())+0x20>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7252:	bl	91a8 <micros>
    7256:	mov	r6, r0
  while (fcn()) {
    7258:	blx	r7
    725a:	mov	r4, r0
    725c:	cbz	r0, 7268 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    725e:	bl	91a8 <micros>
    7262:	subs	r0, r0, r6
    7264:	cmp	r0, r5
    7266:	bls.n	7258 <waitTimeout(bool (*)())+0xc>
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7268:	mov	r0, r4
    726a:	pop	{r3, r4, r5, r6, r7, pc}
    726c:	.word	0x000f4240

00007270 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7270:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    7274:	ldr	r4, [pc, #48]	; (72a8 <yieldTimeout(bool (*)())+0x38>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7276:	mov	r6, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7278:	ldr.w	r8, [pc, #48]	; 72ac <yieldTimeout(bool (*)())+0x3c>
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    727c:	str	r0, [r4, #0]
  uint32_t m = micros();
    727e:	bl	91a8 <micros>
    7282:	mov	r7, r0
  while (fcn()) {
    7284:	blx	r6
    7286:	mov	r5, r0
    7288:	cbz	r0, 72a0 <yieldTimeout(bool (*)())+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    728a:	bl	91a8 <micros>
    728e:	subs	r0, r0, r7
    7290:	cmp	r0, r8
    7292:	bls.n	729a <yieldTimeout(bool (*)())+0x2a>
      m_busyFcn = 0;
    7294:	movs	r3, #0
    7296:	str	r3, [r4, #0]
      return true;
    7298:	b.n	72a2 <yieldTimeout(bool (*)())+0x32>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    729a:	bl	9724 <yield>
    729e:	b.n	7284 <yieldTimeout(bool (*)())+0x14>
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    72a0:	str	r0, [r4, #0]
  return false;  // Caller will set errorCode.
}
    72a2:	mov	r0, r5
    72a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72a8:	.word	0x20003540
    72ac:	.word	0x000f4240

000072b0 <SdioCard::~SdioCard()>:
    72b0:	push	{r4, lr}
    72b2:	mov	r4, r0
    72b4:	movs	r1, #12
    72b6:	bl	9ab6 <operator delete(void*, unsigned int)>
    72ba:	mov	r0, r4
    72bc:	pop	{r4, pc}
	...

000072c0 <enableGPIO(bool) [clone .part.0]>:
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
}
//------------------------------------------------------------------------------
// add speed strength args?
static void enableGPIO(bool enable) {
    72c0:	push	{r3, lr}
                              IOMUXC_SW_PAD_CTL_PAD_SPEED(2);

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    72c2:	movs	r0, #0
    72c4:	bl	709c <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    72c8:	ldr	r3, [pc, #32]	; (72ec <enableGPIO(bool) [clone .part.0]+0x2c>)
    72ca:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    72ce:	movw	r1, #4280	; 0x10b8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    72d2:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    72d6:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    72da:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    72de:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    72e2:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    72e6:	str.w	r2, [r3, #952]	; 0x3b8
    72ea:	pop	{r3, pc}
    72ec:	.word	0x401f8000

000072f0 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    72f0:	ldr	r3, [pc, #20]	; (7308 <SdioCard::type() const+0x18>)
    72f2:	ldrb	r3, [r3, #0]
    72f4:	cbz	r3, 7304 <SdioCard::type() const+0x14>
    72f6:	ldr	r3, [pc, #20]	; (730c <SdioCard::type() const+0x1c>)
    72f8:	ldrb	r3, [r3, #0]
    72fa:	cmp	r3, #0
    72fc:	ite	ne
    72fe:	movne	r0, #3
    7300:	moveq	r0, #2
    7302:	bx	lr
    7304:	movs	r0, #1
}
    7306:	bx	lr
    7308:	.word	0x2000884f
    730c:	.word	0x20008850

00007310 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7310:	push	{r3, r4, r5, lr}
    7312:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7314:	ldr	r0, [pc, #80]	; (7368 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7316:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7318:	bl	724c <waitTimeout(bool (*)())>
    731c:	cbnz	r0, 735e <cardCommand(unsigned long, unsigned long)+0x4e>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    731e:	ldr	r3, [pc, #76]	; (736c <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7320:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7322:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7324:	bpl.n	7336 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    7326:	ldr	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7328:	uxtb	r1, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    732a:	bic.w	r2, r2, #255	; 0xff
    732e:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7330:	ldr	r2, [r3, #72]	; 0x48
    7332:	orrs	r2, r1
    7334:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    7336:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    733a:	ldr	r5, [pc, #48]	; (736c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    733c:	ldr	r0, [pc, #48]	; (7370 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    733e:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    7340:	bl	724c <waitTimeout(bool (*)())>
    7344:	cbnz	r0, 735e <cardCommand(unsigned long, unsigned long)+0x4e>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7346:	ldr	r2, [r5, #48]	; 0x30
    7348:	ldr	r3, [pc, #40]	; (7374 <cardCommand(unsigned long, unsigned long)+0x64>)
    734a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    734c:	ldr	r2, [r3, #0]
    734e:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7350:	ldr	r2, [r3, #0]
    7352:	lsls	r2, r2, #31
    7354:	bpl.n	735e <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7356:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7358:	tst.w	r3, #983040	; 0xf0000
    735c:	beq.n	7362 <cardCommand(unsigned long, unsigned long)+0x52>
    735e:	movs	r0, #0
    7360:	pop	{r3, r4, r5, pc}
    7362:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    7364:	pop	{r3, r4, r5, pc}
    7366:	nop
    7368:	.word	0x000070d5
    736c:	.word	0x402c0000
    7370:	.word	0x000070bd
    7374:	.word	0x20003544

00007378 <statusCMD13()>:
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
    7378:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    737a:	ldr	r3, [pc, #16]	; (738c <statusCMD13()+0x14>)
    737c:	ldr	r0, [pc, #16]	; (7390 <statusCMD13()+0x18>)
    737e:	ldr	r1, [r3, #0]
    7380:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7384:	cbz	r0, 738a <statusCMD13()+0x12>
    7386:	ldr	r3, [pc, #12]	; (7394 <statusCMD13()+0x1c>)
    7388:	ldr	r0, [r3, #16]
}
    738a:	pop	{r3, pc}
    738c:	.word	0x2000353c
    7390:	.word	0x0d1a0000
    7394:	.word	0x402c0000

00007398 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7398:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    739a:	bl	7378 <statusCMD13()>
    739e:	eor.w	r0, r0, #256	; 0x100
}
    73a2:	ubfx	r0, r0, #8, #1
    73a6:	pop	{r3, pc}

000073a8 <SdioCard::status()>:
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
    73a8:	b.w	7378 <statusCMD13()>

000073ac <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    73ac:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73ae:	ldr	r3, [pc, #76]	; (73fc <readReg16(unsigned long, void*)+0x50>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    73b0:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73b2:	ldr	r1, [r3, #0]
    73b4:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    73b8:	cbz	r0, 73f6 <readReg16(unsigned long, void*)+0x4a>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    73ba:	ldr	r3, [pc, #68]	; (7400 <readReg16(unsigned long, void*)+0x54>)
    73bc:	add.w	r6, r5, #15
    73c0:	ldr	r2, [r3, #16]
    73c2:	str	r2, [sp, #0]
    73c4:	ldr	r2, [r3, #20]
    73c6:	str	r2, [sp, #4]
    73c8:	ldr	r2, [r3, #24]
    73ca:	str	r2, [sp, #8]
    73cc:	ldr	r3, [r3, #28]
    73ce:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    73d0:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73d2:	bic.w	r4, r3, #3
    73d6:	add	r2, sp, #16
    73d8:	add	r4, r2
    73da:	and.w	r2, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73de:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73e0:	lsls	r1, r2, #3
    73e2:	ldr.w	r2, [r4, #-16]
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73e6:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73e8:	lsr.w	r2, r2, r1
    73ec:	strb.w	r2, [r6, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73f0:	bne.n	73d2 <readReg16(unsigned long, void*)+0x26>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    73f2:	movs	r3, #0
    73f4:	strb	r3, [r5, #15]
  return true;
}
    73f6:	add	sp, #16
    73f8:	pop	{r4, r5, r6, pc}
    73fa:	nop
    73fc:	.word	0x2000353c
    7400:	.word	0x402c0000

00007404 <waitDmaStatus() [clone .part.5]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7404:	ldr	r3, [pc, #20]	; (741c <waitDmaStatus() [clone .part.5]+0x18>)
    7406:	ldr	r0, [r3, #0]
    7408:	ands.w	r0, r0, #2
    740c:	beq.n	741a <waitDmaStatus() [clone .part.5]+0x16>
    740e:	ldr	r3, [r3, #0]
    7410:	ldr	r0, [pc, #12]	; (7420 <waitDmaStatus() [clone .part.5]+0x1c>)
    7412:	ands	r0, r3
    7414:	clz	r0, r0
    7418:	lsrs	r0, r0, #5
}
    741a:	bx	lr
    741c:	.word	0x20003544
    7420:	.word	0x117f0000

00007424 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7424:	push	{r3, r4, r5, r6, r7, lr}
    7426:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    7428:	lsls	r3, r2, #30
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    742a:	mov	r6, r0
    742c:	mov	r4, r1
    742e:	mov	r7, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    7430:	bne.n	7434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    7432:	cbnz	r5, 7440 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7434:	movs	r2, #37	; 0x25
    7436:	ldr	r3, [pc, #104]	; (74a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    7438:	strb	r2, [r3, #0]
  m_errorLine = line;
    743a:	mov.w	r2, #506	; 0x1fa
    743e:	b.n	7452 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2e>
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7440:	ldr	r0, [pc, #96]	; (74a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    7442:	bl	7270 <yieldTimeout(bool (*)())>
    7446:	cbz	r0, 7458 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7448:	movs	r2, #10
    744a:	ldr	r3, [pc, #84]	; (74a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    744c:	strb	r2, [r3, #0]
  m_errorLine = line;
    744e:	movw	r2, #509	; 0x1fd
    7452:	ldr	r3, [pc, #84]	; (74a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
    7454:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7456:	b.n	749a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7458:	movs	r2, #1
    745a:	ldr	r3, [pc, #80]	; (74ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    745c:	lsls	r5, r5, #16
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    745e:	strb	r2, [r3, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7460:	ldr	r2, [pc, #76]	; (74b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7462:	ldr	r3, [pc, #80]	; (74b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7464:	ands	r2, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7466:	str	r0, [r3, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7468:	orr.w	r2, r2, #512	; 0x200
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    746c:	ldr	r3, [pc, #72]	; (74b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    746e:	str	r7, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7470:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7472:	ldr	r2, [pc, #72]	; (74bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    7474:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7476:	ldr	r3, [pc, #72]	; (74c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    7478:	ldrb	r3, [r3, #0]
    747a:	cbnz	r3, 7480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5c>
    747c:	lsls	r1, r4, #9
    747e:	b.n	7482 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    7480:	mov	r1, r4
    7482:	mov	r0, r6
    7484:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7488:	cbz	r0, 749a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    748a:	ldr	r0, [pc, #56]	; (74c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    748c:	bl	7270 <yieldTimeout(bool (*)())>
    7490:	cbnz	r0, 749a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7492:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7496:	b.w	7404 <waitDmaStatus() [clone .part.5]>
    749a:	movs	r0, #0
    749c:	pop	{r3, r4, r5, r6, r7, pc}
    749e:	nop
    74a0:	.word	0x20001dec
    74a4:	.word	0x00007399
    74a8:	.word	0x20002934
    74ac:	.word	0x20008872
    74b0:	.word	0x1fff0000
    74b4:	.word	0x20003544
    74b8:	.word	0x402c0000
    74bc:	.word	0x117f0002
    74c0:	.word	0x20008850
    74c4:	.word	0x000070f9

000074c8 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    74c8:	ldr	r2, [pc, #92]	; (7528 <SdioCard::sectorCount()+0x60>)
    74ca:	ldrb	r3, [r2, #0]
    74cc:	ands.w	r3, r3, #192	; 0xc0
    74d0:	bne.n	7506 <SdioCard::sectorCount()+0x3e>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    74d2:	ldrb	r0, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    74d4:	ldrb	r3, [r2, #7]
    74d6:	and.w	r0, r0, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    74da:	ldrb	r1, [r2, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    74dc:	lsls	r3, r3, #2
    74de:	orr.w	r3, r3, r0, lsl #10
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    74e2:	ldrb	r0, [r2, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    74e4:	orr.w	r0, r3, r0, lsr #6
    74e8:	adds	r3, r0, #1
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    74ea:	ldrb	r0, [r2, #9]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    74ec:	ldrb	r2, [r2, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    74ee:	and.w	r0, r0, #3
    74f2:	and.w	r2, r2, #15
    74f6:	lsls	r0, r0, #1
    74f8:	orr.w	r0, r0, r1, lsr #7
    74fc:	add	r0, r2
    74fe:	subs	r0, #7
    7500:	lsl.w	r0, r3, r0
    7504:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    7506:	cmp	r3, #64	; 0x40
    7508:	bne.n	7522 <SdioCard::sectorCount()+0x5a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    750a:	ldrb	r0, [r2, #9]
    750c:	adds	r3, r0, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    750e:	ldrb	r0, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7510:	and.w	r0, r0, #63	; 0x3f
    7514:	add.w	r0, r3, r0, lsl #16
    7518:	ldrb	r3, [r2, #8]
    751a:	add.w	r0, r0, r3, lsl #8
    751e:	lsls	r0, r0, #10
    7520:	bx	lr
  } else {
    return 0;
    7522:	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    7524:	bx	lr
    7526:	nop
    7528:	.word	0x20008862

0000752c <SdioCard::isBusy()>:
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    752c:	ldrb	r3, [r0, #8]
    752e:	lsls	r3, r3, #31
    7530:	bpl.n	7544 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7532:	ldr	r3, [pc, #40]	; (755c <SdioCard::isBusy()+0x30>)
    7534:	ldr	r3, [r3, #0]
    7536:	cbz	r3, 753a <SdioCard::isBusy()+0xe>
    7538:	bx	r3
    753a:	ldr	r3, [pc, #36]	; (7560 <SdioCard::isBusy()+0x34>)
    753c:	ldrb	r0, [r3, #0]
    753e:	cbz	r0, 755a <SdioCard::isBusy()+0x2e>
    7540:	b.w	7398 <isBusyCMD13()>
  } else {
    if (m_transferActive) {
    7544:	ldr	r3, [pc, #28]	; (7564 <SdioCard::isBusy()+0x38>)
    7546:	ldrb	r3, [r3, #0]
    7548:	cbz	r3, 754e <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    754a:	b.w	712c <isBusyTransferComplete()>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    754e:	ldr	r3, [pc, #24]	; (7568 <SdioCard::isBusy()+0x3c>)
    7550:	ldr	r0, [r3, #36]	; 0x24
    7552:	eor.w	r0, r0, #16777216	; 0x1000000
    7556:	ubfx	r0, r0, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    755a:	bx	lr
    755c:	.word	0x20003540
    7560:	.word	0x2000884e
    7564:	.word	0x20008851
    7568:	.word	0x402c0000

0000756c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    756c:	push	{r4, r5, r6, lr}
    756e:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7570:	ldrb	r2, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7572:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7574:	cbz	r2, 7582 <SdioCard::erase(unsigned long, unsigned long)+0x16>
    7576:	ldr	r3, [r0, #0]
    7578:	ldr	r3, [r3, #28]
    757a:	blx	r3
    757c:	mov	r4, r0
    757e:	cmp	r0, #0
    7580:	beq.n	761e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7582:	ldr	r1, [pc, #160]	; (7624 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    7584:	ldrb	r3, [r1, #10]
    7586:	and.w	r2, r3, #64	; 0x40
    758a:	and.w	r4, r2, #255	; 0xff
    758e:	cbnz	r2, 75b0 <SdioCard::erase(unsigned long, unsigned long)+0x44>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7590:	and.w	r3, r3, #63	; 0x3f
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7594:	ldrb	r2, [r1, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7596:	lsls	r3, r3, #1
    7598:	orr.w	r3, r3, r2, lsr #7
    759c:	adds	r2, r6, #1
    759e:	orrs	r2, r5
    75a0:	tst	r3, r2
    75a2:	beq.n	75b0 <SdioCard::erase(unsigned long, unsigned long)+0x44>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75a4:	movs	r2, #39	; 0x27
    75a6:	ldr	r3, [pc, #128]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75a8:	strb	r2, [r3, #0]
  m_errorLine = line;
    75aa:	movw	r2, #747	; 0x2eb
    75ae:	b.n	7600 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    75b0:	ldr	r3, [pc, #120]	; (762c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    75b2:	ldrb	r3, [r3, #0]
    75b4:	cbnz	r3, 75ba <SdioCard::erase(unsigned long, unsigned long)+0x4e>
    firstSector <<= 9;
    75b6:	lsls	r5, r5, #9
    lastSector <<= 9;
    75b8:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    75ba:	mov	r1, r5
    75bc:	ldr	r0, [pc, #112]	; (7630 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    75be:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    75c2:	mov	r4, r0
    75c4:	cbnz	r0, 75d2 <SdioCard::erase(unsigned long, unsigned long)+0x66>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75c6:	movs	r2, #15
    75c8:	ldr	r3, [pc, #92]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75ca:	strb	r2, [r3, #0]
  m_errorLine = line;
    75cc:	movw	r2, #755	; 0x2f3
    75d0:	b.n	7600 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    75d2:	mov	r1, r6
    75d4:	ldr	r0, [pc, #92]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    75d6:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    75da:	mov	r4, r0
    75dc:	cbnz	r0, 75ea <SdioCard::erase(unsigned long, unsigned long)+0x7e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75de:	movs	r2, #16
    75e0:	ldr	r3, [pc, #68]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    75e4:	movw	r2, #758	; 0x2f6
    75e8:	b.n	7600 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    75ea:	movs	r1, #0
    75ec:	ldr	r0, [pc, #72]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    75ee:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    75f2:	mov	r4, r0
    75f4:	cbnz	r0, 7606 <SdioCard::erase(unsigned long, unsigned long)+0x9a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75f6:	movs	r2, #17
    75f8:	ldr	r3, [pc, #44]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75fa:	strb	r2, [r3, #0]
  m_errorLine = line;
    75fc:	movw	r2, #761	; 0x2f9
    7600:	ldr	r3, [pc, #56]	; (763c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7602:	str	r2, [r3, #0]
    7604:	b.n	761e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7606:	ldr	r0, [pc, #56]	; (7640 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7608:	bl	724c <waitTimeout(bool (*)())>
    760c:	cbz	r0, 761e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    760e:	movs	r2, #40	; 0x28
    7610:	ldr	r3, [pc, #20]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7612:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7614:	strb	r2, [r3, #0]
  m_errorLine = line;
    7616:	mov.w	r2, #764	; 0x2fc
    761a:	ldr	r3, [pc, #32]	; (763c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    761c:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    761e:	mov	r0, r4
    7620:	pop	{r4, r5, r6, pc}
    7622:	nop
    7624:	.word	0x20008862
    7628:	.word	0x20001dec
    762c:	.word	0x20008850
    7630:	.word	0x201a0000
    7634:	.word	0x211a0000
    7638:	.word	0x261b0000
    763c:	.word	0x20002934
    7640:	.word	0x00007399

00007644 <waitTransferComplete()>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    7644:	push	{r4, lr}
  if (!m_transferActive) {
    7646:	ldr	r4, [pc, #60]	; (7684 <waitTransferComplete()+0x40>)
    7648:	ldrb	r3, [r4, #0]
    764a:	cbnz	r3, 7650 <waitTransferComplete()+0xc>
    return true;
    764c:	movs	r0, #1
    764e:	pop	{r4, pc}
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    7650:	ldr	r0, [pc, #52]	; (7688 <waitTransferComplete()+0x44>)
    7652:	bl	724c <waitTimeout(bool (*)())>
  m_transferActive = false;
    7656:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    7658:	ldr	r2, [pc, #48]	; (768c <waitTransferComplete()+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    765a:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    765c:	ldr	r1, [r2, #48]	; 0x30
    765e:	ldr	r3, [pc, #48]	; (7690 <waitTransferComplete()+0x4c>)
    7660:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7662:	ldr	r1, [r3, #0]
    7664:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7666:	cbnz	r0, 7672 <waitTransferComplete()+0x2e>
    7668:	ldr	r2, [r3, #0]
    766a:	ldr	r3, [pc, #40]	; (7694 <waitTransferComplete()+0x50>)
    766c:	ands	r3, r2
    766e:	cmp	r3, #0
    7670:	beq.n	764c <waitTransferComplete()+0x8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7672:	movs	r2, #31
    7674:	ldr	r3, [pc, #32]	; (7698 <waitTransferComplete()+0x54>)
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    7676:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7678:	strb	r2, [r3, #0]
  m_errorLine = line;
    767a:	movw	r2, #641	; 0x281
    767e:	ldr	r3, [pc, #28]	; (769c <waitTransferComplete()+0x58>)
    7680:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    7682:	pop	{r4, pc}
    7684:	.word	0x20008851
    7688:	.word	0x0000712d
    768c:	.word	0x402c0000
    7690:	.word	0x20003544
    7694:	.word	0x117f0000
    7698:	.word	0x20001dec
    769c:	.word	0x20002934

000076a0 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    76a0:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    76a2:	ldr	r4, [pc, #92]	; (7700 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    76a4:	movs	r1, #0
    76a6:	ldr	r0, [pc, #92]	; (7704 <SdioCard::readStop()+0x64>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    76a8:	ldr	r3, [r4, #40]	; 0x28
    76aa:	bic.w	r3, r3, #65536	; 0x10000
    76ae:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    76b0:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    76b4:	mov	r5, r0
    76b6:	cbnz	r0, 76c8 <SdioCard::readStop()+0x28>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76b8:	movs	r2, #9
    76ba:	ldr	r3, [pc, #76]	; (7708 <SdioCard::readStop()+0x68>)
    76bc:	strb	r2, [r3, #0]
  m_errorLine = line;
    76be:	movw	r2, #578	; 0x242
    76c2:	ldr	r3, [pc, #72]	; (770c <SdioCard::readStop()+0x6c>)
    76c4:	str	r2, [r3, #0]
    76c6:	b.n	76fc <SdioCard::readStop()+0x5c>
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    76c8:	ldr	r0, [pc, #68]	; (7710 <SdioCard::readStop()+0x70>)
    76ca:	bl	7270 <yieldTimeout(bool (*)())>
    76ce:	cbz	r0, 76e2 <SdioCard::readStop()+0x42>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76d0:	movs	r2, #10
    76d2:	ldr	r3, [pc, #52]	; (7708 <SdioCard::readStop()+0x68>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    76d4:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76d6:	strb	r2, [r3, #0]
  m_errorLine = line;
    76d8:	movw	r2, #582	; 0x246
    76dc:	ldr	r3, [pc, #44]	; (770c <SdioCard::readStop()+0x6c>)
    76de:	str	r2, [r3, #0]
    76e0:	b.n	76fc <SdioCard::readStop()+0x5c>
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    76e2:	ldr	r3, [r4, #36]	; 0x24
    76e4:	lsls	r3, r3, #30
    76e6:	bpl.n	76fc <SdioCard::readStop()+0x5c>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    76e8:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    76ea:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    76ec:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    76ee:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    76f2:	orr.w	r2, r2, #67108864	; 0x4000000
    76f6:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    76f8:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    76fa:	str	r3, [r4, #40]	; 0x28
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    76fc:	mov	r0, r5
    76fe:	pop	{r3, r4, r5, pc}
    7700:	.word	0x402c0000
    7704:	.word	0x0cdb0000
    7708:	.word	0x20001dec
    770c:	.word	0x20002934
    7710:	.word	0x000070e5

00007714 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7714:	push	{r3, r4, r5, lr}
    7716:	mov	r4, r1
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7718:	bl	7644 <waitTransferComplete()>
    771c:	mov	r5, r0
    771e:	cmp	r0, #0
    7720:	beq.n	7784 <SdioCard::writeData(unsigned char const*)+0x70>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7722:	ldr	r3, [pc, #100]	; (7788 <SdioCard::writeData(unsigned char const*)+0x74>)
    7724:	ldr	r2, [r3, #36]	; 0x24
    7726:	lsls	r1, r2, #23
    7728:	bmi.n	773a <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    772a:	ldr	r2, [r3, #40]	; 0x28
    772c:	bic.w	r2, r2, #65536	; 0x10000
    7730:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7732:	ldr	r2, [r3, #40]	; 0x28
    7734:	orr.w	r2, r2, #131072	; 0x20000
    7738:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    773a:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    773c:	ldr	r0, [pc, #76]	; (778c <SdioCard::writeData(unsigned char const*)+0x78>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    773e:	orr.w	r2, r2, #65536	; 0x10000
    7742:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    7744:	bl	724c <waitTimeout(bool (*)())>
    7748:	cbnz	r0, 7774 <SdioCard::writeData(unsigned char const*)+0x60>
    774a:	subs	r3, r4, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    774c:	ldr	r1, [pc, #56]	; (7788 <SdioCard::writeData(unsigned char const*)+0x74>)
    774e:	add.w	r4, r4, #508	; 0x1fc
    7752:	ldr	r2, [r1, #36]	; 0x24
    7754:	lsls	r2, r2, #21
    7756:	bpl.n	7752 <SdioCard::writeData(unsigned char const*)+0x3e>
    7758:	add.w	r2, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    775c:	ldr.w	r0, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7760:	cmp	r2, r3
      SDHC_DATPORT = p32[i];
    7762:	str	r0, [r1, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7764:	bne.n	775c <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7766:	cmp	r4, r2
    7768:	mov	r3, r2
    776a:	bne.n	7752 <SdioCard::writeData(unsigned char const*)+0x3e>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    776c:	movs	r2, #1
    776e:	ldr	r3, [pc, #32]	; (7790 <SdioCard::writeData(unsigned char const*)+0x7c>)
    7770:	strb	r2, [r3, #0]
    7772:	b.n	7784 <SdioCard::writeData(unsigned char const*)+0x70>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7774:	movs	r2, #33	; 0x21
    7776:	ldr	r3, [pc, #28]	; (7794 <SdioCard::writeData(unsigned char const*)+0x80>)
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7778:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    777a:	strb	r2, [r3, #0]
  m_errorLine = line;
    777c:	movw	r2, #1015	; 0x3f7
    7780:	ldr	r3, [pc, #20]	; (7798 <SdioCard::writeData(unsigned char const*)+0x84>)
    7782:	str	r2, [r3, #0]
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7784:	mov	r0, r5
    7786:	pop	{r3, r4, r5, pc}
    7788:	.word	0x402c0000
    778c:	.word	0x00007119
    7790:	.word	0x20008851
    7794:	.word	0x20001dec
    7798:	.word	0x20002934

0000779c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    779c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    779e:	ldr	r0, [pc, #80]	; (77f0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    77a0:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    77a2:	bl	7270 <yieldTimeout(bool (*)())>
    77a6:	cbz	r0, 77ba <SdioCard::writeStart(unsigned long)+0x1e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77a8:	movs	r2, #10
    77aa:	ldr	r3, [pc, #72]	; (77f4 <SdioCard::writeStart(unsigned long)+0x58>)
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    77ac:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77ae:	strb	r2, [r3, #0]
  m_errorLine = line;
    77b0:	movw	r2, #1119	; 0x45f
    77b4:	ldr	r3, [pc, #64]	; (77f8 <SdioCard::writeStart(unsigned long)+0x5c>)
    77b6:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    77b8:	pop	{r4, pc}
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77ba:	ldr	r3, [pc, #64]	; (77fc <SdioCard::writeStart(unsigned long)+0x60>)
    77bc:	ldr	r2, [r3, #40]	; 0x28
    77be:	bic.w	r2, r2, #65536	; 0x10000
    77c2:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    77c4:	mov.w	r2, #512	; 0x200
    77c8:	str	r2, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77ca:	ldr	r3, [pc, #52]	; (7800 <SdioCard::writeStart(unsigned long)+0x64>)
    77cc:	ldrb	r3, [r3, #0]
    77ce:	cbnz	r3, 77d4 <SdioCard::writeStart(unsigned long)+0x38>
    77d0:	lsls	r1, r4, #9
    77d2:	b.n	77d6 <SdioCard::writeStart(unsigned long)+0x3a>
    77d4:	mov	r1, r4
    77d6:	ldr	r0, [pc, #44]	; (7804 <SdioCard::writeStart(unsigned long)+0x68>)
    77d8:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    77dc:	cbnz	r0, 77ec <SdioCard::writeStart(unsigned long)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77de:	movs	r2, #14
    77e0:	ldr	r3, [pc, #16]	; (77f4 <SdioCard::writeStart(unsigned long)+0x58>)
    77e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    77e4:	movw	r2, #1131	; 0x46b
    77e8:	ldr	r3, [pc, #12]	; (77f8 <SdioCard::writeStart(unsigned long)+0x5c>)
    77ea:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    77ec:	pop	{r4, pc}
    77ee:	nop
    77f0:	.word	0x00007399
    77f4:	.word	0x20001dec
    77f8:	.word	0x20002934
    77fc:	.word	0x402c0000
    7800:	.word	0x20008850
    7804:	.word	0x193a0020

00007808 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7808:	push	{r3, r4, r5, r6, r7, lr}
    780a:	mov	r7, r0
    780c:	mov	r4, r1
    780e:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7810:	ldrb	r6, [r7, #8]
    7812:	lsls	r6, r6, #31
    7814:	bpl.n	7852 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    7816:	lsls	r6, r2, #30
    7818:	beq.n	783a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    781a:	adds	r6, r1, r3
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    781c:	cmp	r4, r6
    781e:	beq.n	7870 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
        if (!writeSector(sector, ptr)) {
    7820:	ldr	r3, [r7, #0]
    7822:	mov	r2, r5
    7824:	mov	r1, r4
    7826:	mov	r0, r7
    7828:	ldr	r3, [r3, #32]
    782a:	blx	r3
    782c:	cbnz	r0, 7832 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
          return false;  // writeSector will set errorCode.
    782e:	movs	r0, #0
    7830:	pop	{r3, r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7832:	adds	r4, #1
    7834:	add.w	r5, r5, #512	; 0x200
    7838:	b.n	781c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
          return false;  // writeSector will set errorCode.
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    783a:	ldr	r0, [pc, #56]	; (7874 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6c>)
    783c:	bl	7424 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7840:	cbnz	r0, 7870 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7842:	movs	r2, #14
    7844:	ldr	r3, [pc, #48]	; (7878 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    7846:	strb	r2, [r3, #0]
  m_errorLine = line;
    7848:	movw	r2, #1105	; 0x451
    784c:	ldr	r3, [pc, #44]	; (787c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    784e:	str	r2, [r3, #0]
    7850:	pop	{r3, r4, r5, r6, r7, pc}
    7852:	adds	r6, r1, r3
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7854:	cmp	r4, r6
    7856:	beq.n	7870 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
      if (!writeSector(sector + i, src + i*512UL)) {
    7858:	ldr	r3, [r7, #0]
    785a:	mov	r2, r5
    785c:	mov	r1, r4
    785e:	mov	r0, r7
    7860:	ldr	r3, [r3, #32]
    7862:	adds	r4, #1
    7864:	blx	r3
    7866:	add.w	r5, r5, #512	; 0x200
    786a:	cmp	r0, #0
    786c:	bne.n	7854 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    786e:	b.n	782e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
        }
      }
      return true;
    7870:	movs	r0, #1
        return false;
      }
    }
  }
  return true;
}
    7872:	pop	{r3, r4, r5, r6, r7, pc}
    7874:	.word	0x193a0027
    7878:	.word	0x20001dec
    787c:	.word	0x20002934

00007880 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7880:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7882:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7884:	mov	r5, r2
    7886:	sub.w	sp, sp, #512	; 0x200
    788a:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    788c:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    788e:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7890:	bpl.n	78c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7892:	lsls	r3, r5, #30
    7894:	beq.n	78a4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x24>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7896:	mov	r1, r5
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7898:	mov	r5, sp
      memcpy(aligned, src, 512);
    789a:	mov.w	r2, #512	; 0x200
    789e:	mov	r0, sp
    78a0:	bl	7fb0 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    78a4:	movs	r3, #1
    78a6:	mov	r2, r5
    78a8:	mov	r1, r6
    78aa:	ldr	r0, [pc, #104]	; (7914 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    78ac:	bl	7424 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    78b0:	cmp	r0, #0
    78b2:	bne.n	790e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78b4:	movs	r2, #13
    78b6:	ldr	r3, [pc, #96]	; (7918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    78b8:	strb	r2, [r3, #0]
  m_errorLine = line;
    78ba:	movw	r2, #1049	; 0x419
    78be:	ldr	r3, [pc, #92]	; (791c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    78c0:	str	r2, [r3, #0]
    78c2:	b.n	790e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    78c4:	bl	7644 <waitTransferComplete()>
    78c8:	cbnz	r0, 78ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4e>
      return false;
    78ca:	movs	r0, #0
    78cc:	b.n	790e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    78ce:	ldrb	r3, [r4, #9]
    78d0:	cmp	r3, #2
    78d2:	bne.n	78da <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    78d4:	ldr	r3, [r4, #4]
    78d6:	cmp	r6, r3
    78d8:	beq.n	78fa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    78da:	ldr	r3, [r4, #0]
    78dc:	mov	r0, r4
    78de:	ldr	r3, [r3, #28]
    78e0:	blx	r3
    78e2:	cmp	r0, #0
    78e4:	beq.n	78ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
        return false;
      }
      if (!writeStart(sector )) {
    78e6:	ldr	r3, [r4, #0]
    78e8:	mov	r1, r6
    78ea:	mov	r0, r4
    78ec:	ldr	r3, [r3, #80]	; 0x50
    78ee:	blx	r3
    78f0:	cmp	r0, #0
    78f2:	beq.n	78ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    78f4:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    78f6:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    78f8:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    78fa:	ldr	r3, [r4, #0]
    78fc:	mov	r1, r5
    78fe:	mov	r0, r4
    7900:	ldr	r3, [r3, #76]	; 0x4c
    7902:	blx	r3
    7904:	cmp	r0, #0
    7906:	beq.n	78ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
      return false;
    }
    m_curSector++;
    7908:	ldr	r3, [r4, #4]
    790a:	adds	r3, #1
    790c:	str	r3, [r4, #4]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    790e:	add.w	sp, sp, #512	; 0x200
    7912:	pop	{r4, r5, r6, pc}
    7914:	.word	0x183a0001
    7918:	.word	0x20001dec
    791c:	.word	0x20002934

00007920 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7920:	push	{r3, r4, r5, r6, r7, lr}
    7922:	mov	r7, r0
    7924:	mov	r4, r1
    7926:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7928:	ldrb	r6, [r7, #8]
    792a:	lsls	r6, r6, #31
    792c:	bpl.n	796a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    792e:	lsls	r6, r2, #30
    7930:	beq.n	7952 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    7932:	adds	r6, r1, r3
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7934:	cmp	r4, r6
    7936:	beq.n	7988 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
        if (!readSector(sector, dst)) {
    7938:	ldr	r3, [r7, #0]
    793a:	mov	r2, r5
    793c:	mov	r1, r4
    793e:	mov	r0, r7
    7940:	ldr	r3, [r3, #12]
    7942:	blx	r3
    7944:	cbnz	r0, 794a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
          return false;  // readSector will set errorCode.
    7946:	movs	r0, #0
    7948:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    794a:	adds	r4, #1
    794c:	add.w	r5, r5, #512	; 0x200
    7950:	b.n	7934 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
          return false;  // readSector will set errorCode.
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7952:	ldr	r0, [pc, #56]	; (798c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6c>)
    7954:	bl	7424 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7958:	cbnz	r0, 7988 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    795a:	movs	r2, #12
    795c:	ldr	r3, [pc, #48]	; (7990 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    795e:	strb	r2, [r3, #0]
  m_errorLine = line;
    7960:	mov.w	r2, #912	; 0x390
    7964:	ldr	r3, [pc, #44]	; (7994 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    7966:	str	r2, [r3, #0]
    7968:	pop	{r3, r4, r5, r6, r7, pc}
    796a:	adds	r6, r1, r3
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    796c:	cmp	r4, r6
    796e:	beq.n	7988 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
      if (!readSector(sector + i, dst + i*512UL)) {
    7970:	ldr	r3, [r7, #0]
    7972:	mov	r2, r5
    7974:	mov	r1, r4
    7976:	mov	r0, r7
    7978:	ldr	r3, [r3, #12]
    797a:	adds	r4, #1
    797c:	blx	r3
    797e:	add.w	r5, r5, #512	; 0x200
    7982:	cmp	r0, #0
    7984:	bne.n	796c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    7986:	b.n	7946 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
        }
      }
      return true;
    7988:	movs	r0, #1
        return false;
      }
    }
  }
  return true;
}
    798a:	pop	{r3, r4, r5, r6, r7, pc}
    798c:	.word	0x123a0037
    7990:	.word	0x20001dec
    7994:	.word	0x20002934

00007998 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7998:	push	{r3, r4, r5, lr}
    799a:	mov	r4, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    799c:	ldr	r0, [pc, #104]	; (7a08 <cardCMD6(unsigned long, unsigned char*)+0x70>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    799e:	mov	r5, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    79a0:	bl	724c <waitTimeout(bool (*)())>
    79a4:	cbz	r0, 79b2 <cardCMD6(unsigned long, unsigned char*)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79a6:	movs	r2, #10
    79a8:	ldr	r3, [pc, #96]	; (7a0c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    79aa:	strb	r2, [r3, #0]
  m_errorLine = line;
    79ac:	movw	r2, #413	; 0x19d
    79b0:	b.n	79f4 <cardCMD6(unsigned long, unsigned char*)+0x5c>
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    79b2:	movs	r2, #1
    79b4:	ldr	r3, [pc, #88]	; (7a10 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    79b6:	mov	r1, r4
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    79b8:	strb	r2, [r3, #0]
  m_irqstat = 0;
    79ba:	ldr	r3, [pc, #88]	; (7a14 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    79bc:	ldr	r2, [pc, #88]	; (7a18 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    79be:	str	r0, [r3, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    79c0:	ldr	r3, [pc, #88]	; (7a1c <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    79c2:	ldr	r0, [pc, #92]	; (7a20 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    79c4:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    79c6:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    79c8:	ldr	r2, [pc, #88]	; (7a24 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    79ca:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    79cc:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    79d0:	cbnz	r0, 79e2 <cardCMD6(unsigned long, unsigned char*)+0x4a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79d2:	movs	r2, #4
    79d4:	ldr	r3, [pc, #52]	; (7a0c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    79d6:	strb	r2, [r3, #0]
  m_errorLine = line;
    79d8:	mov.w	r2, #420	; 0x1a4
    79dc:	ldr	r3, [pc, #72]	; (7a28 <cardCMD6(unsigned long, unsigned char*)+0x90>)
    79de:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    79e0:	pop	{r3, r4, r5, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    79e2:	ldr	r0, [pc, #72]	; (7a2c <cardCMD6(unsigned long, unsigned char*)+0x94>)
    79e4:	bl	7270 <yieldTimeout(bool (*)())>
    79e8:	cbz	r0, 79fc <cardCMD6(unsigned long, unsigned char*)+0x64>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79ea:	movs	r2, #37	; 0x25
    79ec:	ldr	r3, [pc, #28]	; (7a0c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    79ee:	strb	r2, [r3, #0]
  m_errorLine = line;
    79f0:	movw	r2, #423	; 0x1a7
    79f4:	ldr	r3, [pc, #48]	; (7a28 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    79f6:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    79f8:	str	r2, [r3, #0]
    79fa:	pop	{r3, r4, r5, pc}
    79fc:	bl	7404 <waitDmaStatus() [clone .part.5]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7a00:	cmp	r0, #0
    7a02:	beq.n	79ea <cardCMD6(unsigned long, unsigned char*)+0x52>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7a04:	pop	{r3, r4, r5, pc}
    7a06:	nop
    7a08:	.word	0x00007399
    7a0c:	.word	0x20001dec
    7a10:	.word	0x20008872
    7a14:	.word	0x20003544
    7a18:	.word	0x00010040
    7a1c:	.word	0x402c0000
    7a20:	.word	0x063a0011
    7a24:	.word	0x117f0002
    7a28:	.word	0x20002934
    7a2c:	.word	0x000070f9

00007a30 <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7a34:	movs	r3, #0
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    7a36:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
  m_initDone = false;
    7a38:	ldr	r7, [pc, #636]	; (7cb8 <SdioCard::begin(SdioConfig)+0x288>)
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7a3a:	sub	sp, #68	; 0x44
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7a3c:	ldr	r1, [pc, #636]	; (7cbc <SdioCard::begin(SdioConfig)+0x28c>)
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7a3e:	ldr	r5, [pc, #640]	; (7cc0 <SdioCard::begin(SdioConfig)+0x290>)
  m_highCapacity = false;
  m_version2 = false;
    7a40:	ldr	r6, [pc, #640]	; (7cc4 <SdioCard::begin(SdioConfig)+0x294>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7a42:	strb	r3, [r0, #9]
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    7a44:	movs	r0, #5
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7a46:	strb	r3, [r5, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7a48:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7a4a:	strb	r3, [r1, #0]
  m_version2 = false;
    7a4c:	strb	r3, [r6, #0]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    7a4e:	ldr	r3, [pc, #632]	; (7cc8 <SdioCard::begin(SdioConfig)+0x298>)
    7a50:	ldr.w	r2, [r3, #256]	; 0x100
    7a54:	orr.w	r2, r2, #128	; 0x80
    7a58:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7a5c:	ldr.w	r2, [r3, #256]	; 0x100
    7a60:	bic.w	r2, r2, #63	; 0x3f
    7a64:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    7a68:	ldr.w	r2, [r3, #256]	; 0x100
    7a6c:	orr.w	r2, r2, #24
    7a70:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    7a74:	ldr.w	r2, [r3, #256]	; 0x100
    7a78:	bic.w	r2, r2, #128	; 0x80
    7a7c:	str.w	r2, [r3, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7a80:	add.w	r3, r3, #147456	; 0x24000
    7a84:	ldr.w	r2, [r3, #128]	; 0x80
    7a88:	orr.w	r2, r2, #12
    7a8c:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    7a90:	ldr	r2, [r3, #36]	; 0x24
    7a92:	bic.w	r2, r2, #14336	; 0x3800
    7a96:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    7a98:	ldr	r2, [r3, #28]
    7a9a:	orr.w	r2, r2, #65536	; 0x10000
    7a9e:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    7aa0:	ldr	r2, [r3, #36]	; 0x24
    7aa2:	orr.w	r2, r2, #2048	; 0x800
    7aa6:	str	r2, [r3, #36]	; 0x24
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    7aa8:	bl	709c <gpioMux(unsigned char)>

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    7aac:	ldr	r3, [pc, #540]	; (7ccc <SdioCard::begin(SdioConfig)+0x29c>)
    7aae:	mov	r8, r1
    7ab0:	ldr	r2, [r3, #72]	; 0x48
    7ab2:	orr.w	r2, r2, #2147483648	; 0x80000000
    7ab6:	str	r2, [r3, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7ab8:	ldr	r2, [r3, #44]	; 0x2c
    7aba:	orr.w	r2, r2, #16777216	; 0x1000000
    7abe:	orr.w	r2, r2, #32768	; 0x8000
    7ac2:	str	r2, [r3, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7ac4:	ldr	r2, [r3, #44]	; 0x2c
    7ac6:	ldr	r4, [pc, #516]	; (7ccc <SdioCard::begin(SdioConfig)+0x29c>)
    7ac8:	lsls	r1, r2, #7
    7aca:	bmi.n	7ac4 <SdioCard::begin(SdioConfig)+0x94>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7acc:	mov.w	r0, #400	; 0x190
    7ad0:	bl	7144 <setSdclk(unsigned long)>
    7ad4:	bl	72c0 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7ad8:	ldr	r3, [pc, #500]	; (7cd0 <SdioCard::begin(SdioConfig)+0x2a0>)


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    7ada:	ldr	r2, [pc, #504]	; (7cd4 <SdioCard::begin(SdioConfig)+0x2a4>)
    7adc:	str	r3, [r4, #52]	; 0x34
    7ade:	ldr	r3, [pc, #504]	; (7cd8 <SdioCard::begin(SdioConfig)+0x2a8>)
    7ae0:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7ae4:	movs	r2, #96	; 0x60
    7ae6:	ldr	r3, [pc, #500]	; (7cdc <SdioCard::begin(SdioConfig)+0x2ac>)
    7ae8:	strb	r2, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7aea:	subw	r3, r3, #866	; 0x362
    7aee:	mov.w	r2, #16384	; 0x4000
    7af2:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    7af4:	ldr	r3, [r4, #44]	; 0x2c
    7af6:	orr.w	r3, r3, #134217728	; 0x8000000
    7afa:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7afc:	ldr	r1, [r4, #44]	; 0x2c
    7afe:	ands.w	r1, r1, #134217728	; 0x8000000
    7b02:	bne.n	7afc <SdioCard::begin(SdioConfig)+0xcc>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    7b04:	mov	r0, r1
    7b06:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7b0a:	mov	r4, r0
    7b0c:	cbnz	r0, 7b18 <SdioCard::begin(SdioConfig)+0xe8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b0e:	movs	r3, #1
  m_errorLine = line;
    7b10:	movw	r2, #662	; 0x296
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b14:	strb	r3, [r5, #0]
    7b16:	b.n	7baa <SdioCard::begin(SdioConfig)+0x17a>
    7b18:	movs	r4, #3
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    7b1a:	mov.w	r1, #426	; 0x1aa
    7b1e:	ldr	r0, [pc, #448]	; (7ce0 <SdioCard::begin(SdioConfig)+0x2b0>)
    7b20:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7b24:	cbz	r0, 7b40 <SdioCard::begin(SdioConfig)+0x110>
      if (SDHC_CMDRSP0 != 0X1AA) {
    7b26:	ldr	r3, [pc, #420]	; (7ccc <SdioCard::begin(SdioConfig)+0x29c>)
    7b28:	ldr	r3, [r3, #16]
    7b2a:	cmp.w	r3, #426	; 0x1aa
    7b2e:	beq.n	7b3a <SdioCard::begin(SdioConfig)+0x10a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b30:	movs	r3, #6
  m_errorLine = line;
    7b32:	mov.w	r2, #668	; 0x29c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b36:	strb	r3, [r5, #0]
    7b38:	b.n	7c46 <SdioCard::begin(SdioConfig)+0x216>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    7b3a:	movs	r3, #1
    7b3c:	strb	r3, [r6, #0]
      break;
    7b3e:	b.n	7b44 <SdioCard::begin(SdioConfig)+0x114>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    7b40:	subs	r4, #1
    7b42:	bne.n	7b1a <SdioCard::begin(SdioConfig)+0xea>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7b44:	ldrb	r3, [r6, #0]
    7b46:	ldr	r4, [pc, #412]	; (7ce4 <SdioCard::begin(SdioConfig)+0x2b4>)
    7b48:	cmp	r3, #0
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7b4a:	ldr	r6, [pc, #412]	; (7ce8 <SdioCard::begin(SdioConfig)+0x2b8>)
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7b4c:	it	eq
    7b4e:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    7b52:	bl	91a8 <micros>
    7b56:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7b58:	movs	r1, #0
    7b5a:	ldr	r0, [pc, #400]	; (7cec <SdioCard::begin(SdioConfig)+0x2bc>)
    7b5c:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7b60:	cmp	r0, #0
    7b62:	beq.n	7c34 <SdioCard::begin(SdioConfig)+0x204>
    7b64:	mov	r1, r4
    7b66:	ldr	r0, [pc, #392]	; (7cf0 <SdioCard::begin(SdioConfig)+0x2c0>)
    7b68:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7b6c:	cmp	r0, #0
    7b6e:	beq.n	7c34 <SdioCard::begin(SdioConfig)+0x204>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    7b70:	bl	91a8 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7b74:	rsb	r0, r9, r0
    7b78:	cmp	r0, r6
    7b7a:	bhi.n	7c34 <SdioCard::begin(SdioConfig)+0x204>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7b7c:	ldr	r3, [pc, #332]	; (7ccc <SdioCard::begin(SdioConfig)+0x29c>)
    7b7e:	ldr	r2, [r3, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    7b80:	cmp	r2, #0
    7b82:	bge.n	7b58 <SdioCard::begin(SdioConfig)+0x128>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7b84:	ldr	r1, [r3, #16]
    7b86:	ldr	r2, [pc, #364]	; (7cf4 <SdioCard::begin(SdioConfig)+0x2c4>)
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7b88:	ldr	r0, [pc, #364]	; (7cf8 <SdioCard::begin(SdioConfig)+0x2c8>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7b8a:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7b8c:	movs	r1, #0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    7b8e:	ldr	r3, [r3, #16]
    7b90:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    7b92:	itt	mi
    7b94:	movmi	r3, #1
    7b96:	strbmi.w	r3, [r8]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7b9a:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7b9e:	mov	r4, r0
    7ba0:	cbnz	r0, 7bb0 <SdioCard::begin(SdioConfig)+0x180>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ba2:	movs	r3, #2
  m_errorLine = line;
    7ba4:	mov.w	r2, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ba8:	strb	r3, [r5, #0]
  m_errorLine = line;
    7baa:	ldr	r3, [pc, #336]	; (7cfc <SdioCard::begin(SdioConfig)+0x2cc>)
    7bac:	str	r2, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
    7bae:	b.n	7cae <SdioCard::begin(SdioConfig)+0x27e>
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    7bb0:	movs	r1, #0
    7bb2:	ldr	r0, [pc, #332]	; (7d00 <SdioCard::begin(SdioConfig)+0x2d0>)
    7bb4:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7bb8:	mov	r4, r0
    7bba:	cbnz	r0, 7bc6 <SdioCard::begin(SdioConfig)+0x196>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bbc:	movs	r3, #3
  m_errorLine = line;
    7bbe:	movw	r2, #691	; 0x2b3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bc2:	strb	r3, [r5, #0]
    7bc4:	b.n	7baa <SdioCard::begin(SdioConfig)+0x17a>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7bc6:	ldr	r6, [pc, #260]	; (7ccc <SdioCard::begin(SdioConfig)+0x29c>)
    7bc8:	ldr.w	r8, [pc, #340]	; 7d20 <SdioCard::begin(SdioConfig)+0x2f0>
    7bcc:	ldr	r3, [r6, #16]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7bce:	ldr	r1, [pc, #308]	; (7d04 <SdioCard::begin(SdioConfig)+0x2d4>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7bd0:	lsrs	r3, r3, #16

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7bd2:	ldr	r0, [pc, #308]	; (7d08 <SdioCard::begin(SdioConfig)+0x2d8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7bd4:	lsls	r3, r3, #16
    7bd6:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7bda:	bl	73ac <readReg16(unsigned long, void*)>
    7bde:	mov	r4, r0
    7be0:	cbnz	r0, 7bec <SdioCard::begin(SdioConfig)+0x1bc>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be2:	movs	r3, #7
  m_errorLine = line;
    7be4:	mov.w	r2, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be8:	strb	r3, [r5, #0]
    7bea:	b.n	7baa <SdioCard::begin(SdioConfig)+0x17a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    7bec:	ldr	r1, [pc, #284]	; (7d0c <SdioCard::begin(SdioConfig)+0x2dc>)
    7bee:	ldr	r0, [pc, #288]	; (7d10 <SdioCard::begin(SdioConfig)+0x2e0>)
    7bf0:	bl	73ac <readReg16(unsigned long, void*)>
    7bf4:	mov	r4, r0
    7bf6:	cbnz	r0, 7c02 <SdioCard::begin(SdioConfig)+0x1d2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bf8:	movs	r3, #8
  m_errorLine = line;
    7bfa:	movw	r2, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bfe:	strb	r3, [r5, #0]
    7c00:	b.n	7baa <SdioCard::begin(SdioConfig)+0x17a>
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    7c02:	ldr.w	r1, [r8]
    7c06:	ldr	r0, [pc, #268]	; (7d14 <SdioCard::begin(SdioConfig)+0x2e4>)
    7c08:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7c0c:	mov	r4, r0
    7c0e:	cbnz	r0, 7c1a <SdioCard::begin(SdioConfig)+0x1ea>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c10:	movs	r3, #5
  m_errorLine = line;
    7c12:	movw	r2, #702	; 0x2be
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c16:	strb	r3, [r5, #0]
    7c18:	b.n	7baa <SdioCard::begin(SdioConfig)+0x17a>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7c1a:	ldr.w	r1, [r8]
    7c1e:	ldr	r0, [pc, #204]	; (7cec <SdioCard::begin(SdioConfig)+0x2bc>)
    7c20:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7c24:	cbz	r0, 7c3e <SdioCard::begin(SdioConfig)+0x20e>
    7c26:	movs	r1, #2
    7c28:	ldr	r0, [pc, #236]	; (7d18 <SdioCard::begin(SdioConfig)+0x2e8>)
    7c2a:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7c2e:	mov	r4, r0
    7c30:	cbz	r0, 7c3e <SdioCard::begin(SdioConfig)+0x20e>
    7c32:	b.n	7c4e <SdioCard::begin(SdioConfig)+0x21e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c34:	movs	r3, #23
  m_errorLine = line;
    7c36:	movw	r2, #679	; 0x2a7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c3a:	strb	r3, [r5, #0]
    7c3c:	b.n	7c46 <SdioCard::begin(SdioConfig)+0x216>
    7c3e:	movs	r3, #20
  m_errorLine = line;
    7c40:	movw	r2, #706	; 0x2c2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c44:	strb	r3, [r5, #0]
  m_errorLine = line;
    7c46:	ldr	r3, [pc, #180]	; (7cfc <SdioCard::begin(SdioConfig)+0x2cc>)
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7c48:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c4a:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7c4c:	b.n	7cae <SdioCard::begin(SdioConfig)+0x27e>
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7c4e:	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7c50:	mov	r1, sp
    7c52:	mvn.w	r0, #4278190080	; 0xff000000
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7c56:	bic.w	r3, r3, #6
    7c5a:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7c5c:	ldr	r3, [r6, #40]	; 0x28
    7c5e:	orr.w	r3, r3, #2
    7c62:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7c64:	mov.w	r3, #1048592	; 0x100010
    7c68:	str	r3, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7c6a:	bl	7998 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7c6e:	cbz	r0, 7c78 <SdioCard::begin(SdioConfig)+0x248>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7c70:	ldrb.w	r3, [sp, #13]
    7c74:	lsls	r3, r3, #30
    7c76:	bmi.n	7c7e <SdioCard::begin(SdioConfig)+0x24e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    7c78:	movw	r2, #25000	; 0x61a8
    7c7c:	b.n	7c9a <SdioCard::begin(SdioConfig)+0x26a>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7c7e:	mov	r1, sp
    7c80:	ldr	r0, [pc, #152]	; (7d1c <SdioCard::begin(SdioConfig)+0x2ec>)
    7c82:	bl	7998 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7c86:	cmp	r0, #0
    7c88:	beq.n	7c78 <SdioCard::begin(SdioConfig)+0x248>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7c8a:	ldrb.w	r3, [sp, #16]
    7c8e:	and.w	r3, r3, #15
    7c92:	cmp	r3, #1
    7c94:	bne.n	7c78 <SdioCard::begin(SdioConfig)+0x248>
    kHzSdClk = 50000;
    7c96:	movw	r2, #50000	; 0xc350
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    7c9a:	movs	r0, #5
    7c9c:	bl	709c <gpioMux(unsigned char)>
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    7ca0:	mov	r0, r2
    7ca2:	bl	7144 <setSdclk(unsigned long)>
    7ca6:	bl	72c0 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7caa:	movs	r3, #1
    7cac:	strb	r3, [r7, #0]
  return true;
}
    7cae:	mov	r0, r4
    7cb0:	add	sp, #68	; 0x44
    7cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7cb6:	nop
    7cb8:	.word	0x2000884e
    7cbc:	.word	0x20008850
    7cc0:	.word	0x20001dec
    7cc4:	.word	0x2000884f
    7cc8:	.word	0x400d8000
    7ccc:	.word	0x402c0000
    7cd0:	.word	0x117f000b
    7cd4:	.word	0x00007071
    7cd8:	.word	0x20002000
    7cdc:	.word	0xe000e46e
    7ce0:	.word	0x081a0000
    7ce4:	.word	0x40300000
    7ce8:	.word	0x000f4240
    7cec:	.word	0x371a0000
    7cf0:	.word	0x29020000
    7cf4:	.word	0x20003538
    7cf8:	.word	0x02090000
    7cfc:	.word	0x20002934
    7d00:	.word	0x031a0000
    7d04:	.word	0x20008862
    7d08:	.word	0x09090000
    7d0c:	.word	0x20008852
    7d10:	.word	0x0a090000
    7d14:	.word	0x071b0000
    7d18:	.word	0x061a0000
    7d1c:	.word	0x80fffff1
    7d20:	.word	0x2000353c

00007d24 <SdioCard::readData(unsigned char*)>:
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7d24:	ldr	r3, [pc, #152]	; (7dc0 <SdioCard::readData(unsigned char*)+0x9c>)
    7d26:	ldr	r2, [r3, #36]	; 0x24
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    7d28:	push	{r4, r5, r6, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7d2a:	lsls	r6, r2, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    7d2c:	mov	r4, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7d2e:	bmi.n	7d4c <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d30:	ldr	r2, [r3, #40]	; 0x28
    7d32:	bic.w	r2, r2, #65536	; 0x10000
    7d36:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    7d38:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7d3a:	ldr	r2, [r3, #40]	; 0x28
    7d3c:	orr.w	r2, r2, #131072	; 0x20000
    7d40:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7d42:	ldr	r2, [r3, #40]	; 0x28
    7d44:	orr.w	r2, r2, #65536	; 0x10000
    7d48:	str	r2, [r3, #40]	; 0x28
    interrupts();
    7d4a:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    7d4c:	ldr	r0, [pc, #116]	; (7dc4 <SdioCard::readData(unsigned char*)+0xa0>)
    7d4e:	bl	724c <waitTimeout(bool (*)())>
    7d52:	cbnz	r0, 7dac <SdioCard::readData(unsigned char*)+0x88>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7d54:	ldr	r1, [pc, #104]	; (7dc0 <SdioCard::readData(unsigned char*)+0x9c>)
    7d56:	subs	r3, r4, #4
    7d58:	add.w	r4, r4, #508	; 0x1fc
    7d5c:	mov	r0, r1
    7d5e:	ldr	r2, [r1, #36]	; 0x24
    7d60:	lsls	r5, r2, #20
    7d62:	bpl.n	7d5e <SdioCard::readData(unsigned char*)+0x3a>
    7d64:	add.w	r2, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7d68:	ldr	r6, [r0, #32]
    7d6a:	ldr	r5, [pc, #84]	; (7dc0 <SdioCard::readData(unsigned char*)+0x9c>)
    7d6c:	str.w	r6, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7d70:	cmp	r2, r3
    7d72:	bne.n	7d68 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7d74:	cmp	r4, r2
    7d76:	mov	r3, r2
    7d78:	bne.n	7d5e <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7d7a:	ldr	r0, [pc, #76]	; (7dc8 <SdioCard::readData(unsigned char*)+0xa4>)
    7d7c:	bl	724c <waitTimeout(bool (*)())>
    7d80:	cbz	r0, 7d8e <SdioCard::readData(unsigned char*)+0x6a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d82:	movs	r2, #29
    7d84:	ldr	r3, [pc, #68]	; (7dcc <SdioCard::readData(unsigned char*)+0xa8>)
    7d86:	strb	r2, [r3, #0]
  m_errorLine = line;
    7d88:	movw	r2, #846	; 0x34e
    7d8c:	b.n	7db6 <SdioCard::readData(unsigned char*)+0x92>
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7d8e:	ldr	r2, [r5, #48]	; 0x30
    7d90:	ldr	r3, [pc, #60]	; (7dd0 <SdioCard::readData(unsigned char*)+0xac>)
    7d92:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7d94:	ldr	r2, [r3, #0]
    7d96:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7d98:	ldr	r2, [r3, #0]
    7d9a:	lsls	r2, r2, #30
    7d9c:	bpl.n	7dbc <SdioCard::readData(unsigned char*)+0x98>
    7d9e:	ldr	r3, [r3, #0]
    7da0:	ldr	r0, [pc, #48]	; (7dd4 <SdioCard::readData(unsigned char*)+0xb0>)
    7da2:	ands	r0, r3
    7da4:	clz	r0, r0
    7da8:	lsrs	r0, r0, #5
    7daa:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dac:	movs	r2, #26
    7dae:	ldr	r3, [pc, #28]	; (7dcc <SdioCard::readData(unsigned char*)+0xa8>)
    7db0:	strb	r2, [r3, #0]
  m_errorLine = line;
    7db2:	movw	r2, #835	; 0x343
    7db6:	ldr	r3, [pc, #32]	; (7dd8 <SdioCard::readData(unsigned char*)+0xb4>)
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    7db8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7dba:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7dbc:	pop	{r4, r5, r6, pc}
    7dbe:	nop
    7dc0:	.word	0x402c0000
    7dc4:	.word	0x00007105
    7dc8:	.word	0x0000712d
    7dcc:	.word	0x20001dec
    7dd0:	.word	0x20003544
    7dd4:	.word	0x117f0000
    7dd8:	.word	0x20002934

00007ddc <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7ddc:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7dde:	ldr	r0, [pc, #80]	; (7e30 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7de0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7de2:	bl	7270 <yieldTimeout(bool (*)())>
    7de6:	cbz	r0, 7dfa <SdioCard::readStart(unsigned long)+0x1e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7de8:	movs	r2, #10
    7dea:	ldr	r3, [pc, #72]	; (7e34 <SdioCard::readStart(unsigned long)+0x58>)
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7dec:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dee:	strb	r2, [r3, #0]
  m_errorLine = line;
    7df0:	mov.w	r2, #928	; 0x3a0
    7df4:	ldr	r3, [pc, #64]	; (7e38 <SdioCard::readStart(unsigned long)+0x5c>)
    7df6:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7df8:	pop	{r4, pc}
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7dfa:	ldr	r3, [pc, #64]	; (7e3c <SdioCard::readStart(unsigned long)+0x60>)
    7dfc:	ldr	r2, [r3, #40]	; 0x28
    7dfe:	orr.w	r2, r2, #65536	; 0x10000
    7e02:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7e04:	mov.w	r2, #512	; 0x200
    7e08:	str	r2, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7e0a:	ldr	r3, [pc, #52]	; (7e40 <SdioCard::readStart(unsigned long)+0x64>)
    7e0c:	ldrb	r3, [r3, #0]
    7e0e:	cbnz	r3, 7e14 <SdioCard::readStart(unsigned long)+0x38>
    7e10:	lsls	r1, r4, #9
    7e12:	b.n	7e16 <SdioCard::readStart(unsigned long)+0x3a>
    7e14:	mov	r1, r4
    7e16:	ldr	r0, [pc, #44]	; (7e44 <SdioCard::readStart(unsigned long)+0x68>)
    7e18:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7e1c:	cbnz	r0, 7e2c <SdioCard::readStart(unsigned long)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e1e:	movs	r2, #12
    7e20:	ldr	r3, [pc, #16]	; (7e34 <SdioCard::readStart(unsigned long)+0x58>)
    7e22:	strb	r2, [r3, #0]
  m_errorLine = line;
    7e24:	mov.w	r2, #940	; 0x3ac
    7e28:	ldr	r3, [pc, #12]	; (7e38 <SdioCard::readStart(unsigned long)+0x5c>)
    7e2a:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    7e2c:	pop	{r4, pc}
    7e2e:	nop
    7e30:	.word	0x00007399
    7e34:	.word	0x20001dec
    7e38:	.word	0x20002934
    7e3c:	.word	0x402c0000
    7e40:	.word	0x20008850
    7e44:	.word	0x123a0030

00007e48 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7e48:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7e4a:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7e4c:	mov	r6, r2
    7e4e:	sub.w	sp, sp, #512	; 0x200
    7e52:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    7e54:	lsls	r2, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7e56:	mov	r5, r1
  if (m_sdioConfig.useDma()) {
    7e58:	bpl.n	7e94 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7e5a:	lsls	r3, r6, #30

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7e5c:	ldr	r0, [pc, #132]	; (7ee4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    7e5e:	mov.w	r3, #1
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7e62:	ite	eq
    7e64:	moveq	r4, r6
    7e66:	movne	r4, sp

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7e68:	mov	r2, r4
    7e6a:	bl	7424 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7e6e:	mov	r5, r0
    7e70:	cbnz	r0, 7e82 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e72:	movs	r2, #11
    7e74:	ldr	r3, [pc, #112]	; (7ee8 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    7e76:	strb	r2, [r3, #0]
  m_errorLine = line;
    7e78:	movw	r2, #865	; 0x361
    7e7c:	ldr	r3, [pc, #108]	; (7eec <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    7e7e:	str	r2, [r3, #0]
    7e80:	b.n	7edc <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
    7e82:	cmp	r4, r6
    7e84:	beq.n	7edc <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
      memcpy(dst, aligned, 512);
    7e86:	mov.w	r2, #512	; 0x200
    7e8a:	mov	r1, sp
    7e8c:	mov	r0, r6
    7e8e:	bl	7fb0 <memcpy>
    7e92:	b.n	7edc <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    7e94:	bl	7644 <waitTransferComplete()>
    7e98:	cbnz	r0, 7e9e <SdioCard::readSector(unsigned long, unsigned char*)+0x56>
      return false;
    7e9a:	movs	r5, #0
    7e9c:	b.n	7edc <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    7e9e:	ldrb	r3, [r4, #9]
    7ea0:	cmp	r3, #1
    7ea2:	bne.n	7eaa <SdioCard::readSector(unsigned long, unsigned char*)+0x62>
    7ea4:	ldr	r3, [r4, #4]
    7ea6:	cmp	r5, r3
    7ea8:	beq.n	7ec8 <SdioCard::readSector(unsigned long, unsigned char*)+0x80>
      if (!syncDevice()) {
    7eaa:	ldr	r3, [r4, #0]
    7eac:	mov	r0, r4
    7eae:	ldr	r3, [r3, #28]
    7eb0:	blx	r3
    7eb2:	cmp	r0, #0
    7eb4:	beq.n	7e9a <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
        return false;
      }
      if (!readStart(sector)) {
    7eb6:	mov	r1, r5
    7eb8:	mov	r0, r4
    7eba:	bl	7ddc <SdioCard::readStart(unsigned long)>
    7ebe:	cmp	r0, #0
    7ec0:	beq.n	7e9a <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    7ec2:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    7ec4:	str	r5, [r4, #4]
      m_curState = READ_STATE;
    7ec6:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    7ec8:	mov	r1, r6
    7eca:	mov	r0, r4
    7ecc:	bl	7d24 <SdioCard::readData(unsigned char*)>
    7ed0:	mov	r5, r0
    7ed2:	cmp	r0, #0
    7ed4:	beq.n	7e9a <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    7ed6:	ldr	r3, [r4, #4]
    7ed8:	adds	r3, #1
    7eda:	str	r3, [r4, #4]
  }
  return true;
}
    7edc:	mov	r0, r5
    7ede:	add.w	sp, sp, #512	; 0x200
    7ee2:	pop	{r4, r5, r6, pc}
    7ee4:	.word	0x113a0011
    7ee8:	.word	0x20001dec
    7eec:	.word	0x20002934

00007ef0 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    7ef0:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7ef2:	ldr	r2, [pc, #72]	; (7f3c <SdioCard::stopTransmission(bool)+0x4c>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    7ef4:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    7ef6:	mov	r6, r1
  m_curState = IDLE_STATE;
    7ef8:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7efa:	mov	r1, r5
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7efc:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7efe:	ldr	r0, [pc, #64]	; (7f40 <SdioCard::stopTransmission(bool)+0x50>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7f00:	bic.w	r3, r3, #65536	; 0x10000
    7f04:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7f06:	bl	7310 <cardCommand(unsigned long, unsigned long)>
    7f0a:	mov	r4, r0
    7f0c:	cbnz	r0, 7f1e <SdioCard::stopTransmission(bool)+0x2e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f0e:	movs	r2, #9
    7f10:	ldr	r3, [pc, #48]	; (7f44 <SdioCard::stopTransmission(bool)+0x54>)
    7f12:	strb	r2, [r3, #0]
  m_errorLine = line;
    7f14:	movw	r2, #962	; 0x3c2
    7f18:	ldr	r3, [pc, #44]	; (7f48 <SdioCard::stopTransmission(bool)+0x58>)
    7f1a:	str	r2, [r3, #0]
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
    7f1c:	b.n	7f38 <SdioCard::stopTransmission(bool)+0x48>
  }
  if (blocking) {
    7f1e:	cbz	r6, 7f38 <SdioCard::stopTransmission(bool)+0x48>
    if (yieldTimeout(isBusyDat)) {
    7f20:	ldr	r0, [pc, #40]	; (7f4c <SdioCard::stopTransmission(bool)+0x5c>)
    7f22:	bl	7270 <yieldTimeout(bool (*)())>
    7f26:	cbz	r0, 7f38 <SdioCard::stopTransmission(bool)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f28:	movs	r2, #10
    7f2a:	ldr	r3, [pc, #24]	; (7f44 <SdioCard::stopTransmission(bool)+0x54>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    7f2c:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f2e:	strb	r2, [r3, #0]
  m_errorLine = line;
    7f30:	movw	r2, #966	; 0x3c6
    7f34:	ldr	r3, [pc, #16]	; (7f48 <SdioCard::stopTransmission(bool)+0x58>)
    7f36:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    7f38:	mov	r0, r4
    7f3a:	pop	{r4, r5, r6, pc}
    7f3c:	.word	0x402c0000
    7f40:	.word	0x0cdb0000
    7f44:	.word	0x20001dec
    7f48:	.word	0x20002934
    7f4c:	.word	0x000070e5

00007f50 <SdioCard::syncDevice()>:
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    7f50:	push	{r4, lr}
    7f52:	mov	r4, r0
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7f54:	bl	7644 <waitTransferComplete()>
    7f58:	cbz	r0, 7f6a <SdioCard::syncDevice()+0x1a>
    return false;
  }
  if (m_curState != IDLE_STATE) {
    7f5a:	ldrb	r3, [r4, #9]
    7f5c:	cbz	r3, 7f6a <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    7f5e:	mov	r0, r4
    7f60:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    7f62:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    7f66:	b.w	7ef0 <SdioCard::stopTransmission(bool)>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    7f6a:	pop	{r4, pc}

00007f6c <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    7f6c:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    7f6e:	cbz	r2, 7fac <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    7f70:	cmp	r2, #16
    blt     .L_bytewise
    7f72:	blt.n	7fa4 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    7f74:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    7f78:	cbz	r3, 7f88 <memset+0x1c>
    rsb     r3, #8
    7f7a:	rsb	r3, r3, #8
    subs    r2, r3
    7f7e:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    7f80:	subs	r3, #1
    strb    r1, [r0], #1
    7f82:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    7f86:	bgt.n	7f80 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    7f88:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    7f8a:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    7f8e:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    7f92:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    7f94:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    7f96:	subs	r3, #1
    strd    r1, r12, [r0], #8
    7f98:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    7f9c:	bgt.n	7f96 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    7f9e:	ands.w	r2, r2, #7
    beq     .L_done
    7fa2:	beq.n	7fac <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    7fa4:	subs	r2, #1
    strb    r1, [r0], #1
    7fa6:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    7faa:	bgt.n	7fa4 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    7fac:	pop	{r0, pc}
    7fae:	nop

00007fb0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7fb0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7fb2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7fb6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7fba:	bne.n	8098 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7fbc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7fbe:	bcc.n	8044 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7fc0:	ldr.w	r3, [r1], #4
    7fc4:	str.w	r3, [r0], #4
    7fc8:	ldr.w	r3, [r1], #4
    7fcc:	str.w	r3, [r0], #4
    7fd0:	ldr.w	r3, [r1], #4
    7fd4:	str.w	r3, [r0], #4
    7fd8:	ldr.w	r3, [r1], #4
    7fdc:	str.w	r3, [r0], #4
    7fe0:	ldr.w	r3, [r1], #4
    7fe4:	str.w	r3, [r0], #4
    7fe8:	ldr.w	r3, [r1], #4
    7fec:	str.w	r3, [r0], #4
    7ff0:	ldr.w	r3, [r1], #4
    7ff4:	str.w	r3, [r0], #4
    7ff8:	ldr.w	r3, [r1], #4
    7ffc:	str.w	r3, [r0], #4
    8000:	ldr.w	r3, [r1], #4
    8004:	str.w	r3, [r0], #4
    8008:	ldr.w	r3, [r1], #4
    800c:	str.w	r3, [r0], #4
    8010:	ldr.w	r3, [r1], #4
    8014:	str.w	r3, [r0], #4
    8018:	ldr.w	r3, [r1], #4
    801c:	str.w	r3, [r0], #4
    8020:	ldr.w	r3, [r1], #4
    8024:	str.w	r3, [r0], #4
    8028:	ldr.w	r3, [r1], #4
    802c:	str.w	r3, [r0], #4
    8030:	ldr.w	r3, [r1], #4
    8034:	str.w	r3, [r0], #4
    8038:	ldr.w	r3, [r1], #4
    803c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8040:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8042:	bcs.n	7fc0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8044:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8046:	bcc.n	806c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8048:	ldr.w	r3, [r1], #4
    804c:	str.w	r3, [r0], #4
    8050:	ldr.w	r3, [r1], #4
    8054:	str.w	r3, [r0], #4
    8058:	ldr.w	r3, [r1], #4
    805c:	str.w	r3, [r0], #4
    8060:	ldr.w	r3, [r1], #4
    8064:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8068:	subs	r2, #16
	bhs	.Lmid_block_loop
    806a:	bcs.n	8048 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    806c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    806e:	bcc.n	807c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8070:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8074:	str.w	r3, [r0], #4
	subs	r2, #4
    8078:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    807a:	bcs.n	8070 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    807c:	adds	r2, #4
	beq	.Ldone
    807e:	beq.n	8092 <memcpy+0xe2>

	lsls	r2, r2, #31
    8080:	lsls	r2, r2, #31
	itt ne
    8082:	itt	ne
	ldrbne  r3, [r1], #1
    8084:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8088:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    808c:	bcc.n	8092 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    808e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8090:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8092:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8094:	bx	lr
    8096:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8098:	cmp	r2, #8
	blo	.Lbyte_copy
    809a:	bcc.n	80c4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    809c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    809e:	beq.n	7fbc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    80a0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    80a4:	beq.n	7fbc <memcpy+0xc>

	rsb	r3, #4
    80a6:	rsb	r3, r3, #4
	subs	r2, r3
    80aa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    80ac:	lsls	r3, r3, #31
	itt ne
    80ae:	itt	ne
	ldrbne  r3, [r1], #1
    80b0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    80b4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    80b8:	bcc.n	7fbc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    80ba:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    80be:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    80c2:	b.n	7fbc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    80c4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    80c6:	bcc.n	807c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    80c8:	subs	r2, #1
	ldrb    r3, [r1], #1
    80ca:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    80ce:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    80d2:	bcs.n	80c8 <memcpy+0x118>

	ldrb	r3, [r1]
    80d4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    80d6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    80d8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    80da:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    80dc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    80de:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    80e0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    80e2:	bx	lr

000080e4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    80e4:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    80e6:	ldr	r4, [pc, #80]	; (8138 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    80e8:	mov.w	r1, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    80ec:	ldr	r5, [pc, #76]	; (813c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    80ee:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    80f0:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    80f4:	ldr	r6, [pc, #72]	; (8140 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    80f6:	ldr	r2, [pc, #76]	; (8144 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    80f8:	add.w	r5, r5, r0, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    80fc:	str	r1, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    80fe:	mov	r0, r5
    8100:	ldrh	r2, [r6, #0]
    8102:	mov	r1, r4
    8104:	bl	9130 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8108:	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    810a:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    810e:	add	r4, r2
	asm volatile("": : :"memory");
	asm("dsb");
    8110:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8114:	ldr	r2, [pc, #48]	; (8148 <rx_queue_transfer+0x64>)
    8116:	str	r3, [r2, #0]
		location += 32;
    8118:	adds	r3, #32
	} while (location < end_addr);
    811a:	cmp	r4, r3
    811c:	bhi.n	8116 <rx_queue_transfer+0x32>
	asm("dsb");
    811e:	dsb	sy
	asm("isb");
    8122:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8126:	movs	r0, #3
    8128:	mov	r1, r5
    812a:	bl	9188 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    812e:	mov.w	r2, #131072	; 0x20000
    8132:	ldr	r3, [pc, #24]	; (814c <rx_queue_transfer+0x68>)
    8134:	str	r2, [r3, #0]
    8136:	pop	{r4, r5, r6, pc}
    8138:	.word	0x20200800
    813c:	.word	0x200022c0
    8140:	.word	0x20008828
    8144:	.word	0xe000e18c
    8148:	.word	0xe000ef5c
    814c:	.word	0xe000e10c

00008150 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8150:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8154:	ldr	r2, [pc, #132]	; (81dc <rx_event+0x8c>)
    8156:	ldr	r3, [r0, #4]
    8158:	ldrh	r4, [r2, #0]
    815a:	ubfx	r3, r3, #16, #15
	int i = t->callback_param;
    815e:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8160:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8162:	cmp	r4, #0
    8164:	ble.n	81d0 <rx_event+0x80>
		// received a packet with data
		uint32_t head = rx_head;
    8166:	ldr	r2, [pc, #120]	; (81e0 <rx_event+0x90>)
		if (head != rx_tail) {
    8168:	ldr	r1, [pc, #120]	; (81e4 <rx_event+0x94>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    816a:	ldrb	r3, [r2, #0]
		if (head != rx_tail) {
    816c:	ldrb	r1, [r1, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    816e:	uxtb	r3, r3
    8170:	ldr.w	r8, [pc, #132]	; 81f8 <rx_event+0xa8>
    8174:	ldr	r7, [pc, #112]	; (81e8 <rx_event+0x98>)
		if (head != rx_tail) {
    8176:	cmp	r3, r1
    8178:	ldr	r1, [pc, #112]	; (81ec <rx_event+0x9c>)
    817a:	beq.n	81ac <rx_event+0x5c>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    817c:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    8180:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8184:	rsb	r0, r6, #512	; 0x200
    8188:	cmp	r4, r0
    818a:	bhi.n	81ac <rx_event+0x5c>
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    818c:	ldr	r3, [pc, #96]	; (81f0 <rx_event+0xa0>)
    818e:	add.w	r0, r6, r9, lsl #9
    8192:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    8194:	add	r6, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8196:	add.w	r1, r3, r5, lsl #9
    819a:	add	r0, r3
    819c:	bl	7fb0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    81a0:	ldr	r3, [r7, #0]
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    81a2:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    81a6:	add	r4, r3
    81a8:	str	r4, [r7, #0]
    81aa:	b.n	81d0 <rx_event+0x80>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    81ac:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    81ae:	movs	r6, #0
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    81b0:	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    81b4:	cmp	r3, #9
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    81b6:	ldr	r0, [pc, #60]	; (81f4 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    81b8:	it	cs
    81ba:	movcs	r3, r6
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    81bc:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    81c0:	strb	r5, [r1, r3]
		rx_head = head;
    81c2:	uxtb	r3, r3
    81c4:	strb	r3, [r2, #0]
		rx_available += len;
    81c6:	ldr	r3, [r7, #0]
    81c8:	add	r4, r3
    81ca:	str	r4, [r7, #0]
    81cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    81d0:	mov	r0, r5
	}
}
    81d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    81d6:	b.w	80e4 <rx_queue_transfer>
    81da:	nop
    81dc:	.word	0x20008828
    81e0:	.word	0x20008b29
    81e4:	.word	0x20008b33
    81e8:	.word	0x20006668
    81ec:	.word	0x20008b2a
    81f0:	.word	0x20200800
    81f4:	.word	0x20008818
    81f8:	.word	0x20008808

000081fc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    81fc:	ldr	r3, [pc, #112]	; (8270 <usb_serial_flush_callback+0x74>)
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    81fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    8202:	ldrb	r2, [r3, #0]
    8204:	and.w	r3, r2, #255	; 0xff
    8208:	cbnz	r2, 826c <usb_serial_flush_callback+0x70>
	if (!usb_configuration) return;
    820a:	ldr	r2, [pc, #104]	; (8274 <usb_serial_flush_callback+0x78>)
    820c:	ldrb	r2, [r2, #0]
    820e:	cbz	r2, 826c <usb_serial_flush_callback+0x70>
	if (tx_available == 0) return;
    8210:	ldr	r6, [pc, #100]	; (8278 <usb_serial_flush_callback+0x7c>)
    8212:	ldrh	r5, [r6, #0]
    8214:	cbz	r5, 826c <usb_serial_flush_callback+0x70>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8216:	ldr	r7, [pc, #100]	; (827c <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8218:	rsb	r5, r5, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    821c:	ldr	r2, [pc, #96]	; (8280 <usb_serial_flush_callback+0x84>)
    821e:	ldrb	r4, [r7, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8220:	ldr	r1, [pc, #96]	; (8284 <usb_serial_flush_callback+0x88>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8222:	add.w	r8, r2, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8226:	mov	r2, r5
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8228:	add.w	r4, r1, r4, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    822c:	mov	r0, r8
    822e:	mov	r1, r4
    8230:	bl	9130 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8234:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8238:	add	r4, r5
	asm volatile("": : :"memory");
	asm("dsb");
    823a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    823e:	ldr	r2, [pc, #72]	; (8288 <usb_serial_flush_callback+0x8c>)
    8240:	str	r3, [r2, #0]
		location += 32;
    8242:	adds	r3, #32
	} while (location < end_addr);
    8244:	cmp	r4, r3
    8246:	bhi.n	8240 <usb_serial_flush_callback+0x44>
	asm("dsb");
    8248:	dsb	sy
	asm("isb");
    824c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8250:	movs	r0, #4
    8252:	mov	r1, r8
    8254:	bl	915c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8258:	ldrb	r3, [r7, #0]
    825a:	ldr	r1, [pc, #32]	; (827c <usb_serial_flush_callback+0x80>)
    825c:	movs	r2, #0
    825e:	adds	r3, #1
	tx_available = 0;
    8260:	strh	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    8262:	uxtb	r3, r3
    8264:	cmp	r3, #3
    8266:	ite	ls
    8268:	strbls	r3, [r1, #0]
    826a:	strbhi	r2, [r1, #0]
    826c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8270:	.word	0x20008b37
    8274:	.word	0x20008b39
    8278:	.word	0x2000884a
    827c:	.word	0x20008b36
    8280:	.word	0x200023c0
    8284:	.word	0x20201800
    8288:	.word	0xe000ef70

0000828c <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    828c:	bx	lr
	...

00008290 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8290:	ldr	r3, [pc, #168]	; (833c <usb_serial_configure+0xac>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    8292:	push	{r4, r5, r6, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8294:	ldrb	r3, [r3, #0]
    8296:	ldr	r5, [pc, #168]	; (8340 <usb_serial_configure+0xb0>)
    8298:	ldr	r6, [pc, #168]	; (8344 <usb_serial_configure+0xb4>)
    829a:	cbz	r3, 82a2 <usb_serial_configure+0x12>
		tx_packet_size = CDC_TX_SIZE_480;
    829c:	mov.w	r3, #512	; 0x200
    82a0:	b.n	82a4 <usb_serial_configure+0x14>
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    82a2:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    82a4:	movs	r2, #128	; 0x80
    82a6:	movs	r1, #0
    82a8:	ldr	r0, [pc, #156]	; (8348 <usb_serial_configure+0xb8>)
	tx_head = 0;
    82aa:	movs	r4, #0
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    82ac:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    82ae:	strh	r3, [r6, #0]
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    82b0:	bl	7f6c <memset>
	tx_head = 0;
    82b4:	ldr	r3, [pc, #148]	; (834c <usb_serial_configure+0xbc>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    82b6:	mov.w	r2, #256	; 0x100
    82ba:	mov	r1, r4
    82bc:	ldr	r0, [pc, #144]	; (8350 <usb_serial_configure+0xc0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    82be:	strb	r4, [r3, #0]
	tx_available = 0;
    82c0:	ldr	r3, [pc, #144]	; (8354 <usb_serial_configure+0xc4>)
    82c2:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    82c4:	bl	7f6c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    82c8:	movs	r2, #16
    82ca:	mov	r1, r4
    82cc:	ldr	r0, [pc, #136]	; (8358 <usb_serial_configure+0xc8>)
    82ce:	bl	7f6c <memset>
	memset(rx_index, 0, sizeof(rx_index));
    82d2:	movs	r2, #16
    82d4:	mov	r1, r4
    82d6:	ldr	r0, [pc, #132]	; (835c <usb_serial_configure+0xcc>)
    82d8:	bl	7f6c <memset>
	rx_head = 0;
    82dc:	ldr	r3, [pc, #128]	; (8360 <usb_serial_configure+0xd0>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    82de:	mov	r2, r4
    82e0:	movs	r1, #16
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    82e2:	strb	r4, [r3, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    82e4:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    82e6:	ldr	r3, [pc, #124]	; (8364 <usb_serial_configure+0xd4>)
    82e8:	strb	r4, [r3, #0]
	rx_available = 0;
    82ea:	ldr	r3, [pc, #124]	; (8368 <usb_serial_configure+0xd8>)
    82ec:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    82ee:	mov	r3, r4
    82f0:	bl	90cc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    82f4:	ldr	r3, [pc, #116]	; (836c <usb_serial_configure+0xdc>)
    82f6:	mov	r2, r4
    82f8:	ldrh	r1, [r6, #0]
    82fa:	movs	r0, #3
    82fc:	bl	9074 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8300:	mov	r3, r4
    8302:	movs	r2, #1
    8304:	ldrh	r1, [r5, #0]
    8306:	movs	r0, #4
    8308:	bl	90cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    830c:	mov	r0, r4
    830e:	adds	r4, #1
    8310:	bl	80e4 <rx_queue_transfer>
    8314:	cmp	r4, #8
    8316:	bne.n	830c <usb_serial_configure+0x7c>
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8318:	ldr	r2, [pc, #84]	; (8370 <usb_serial_configure+0xe0>)
    831a:	ldr	r3, [pc, #88]	; (8374 <usb_serial_configure+0xe4>)
    831c:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    831e:	movs	r2, #0
    8320:	ldr	r3, [pc, #84]	; (8378 <usb_serial_configure+0xe8>)
    8322:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8326:	movs	r2, #74	; 0x4a
    8328:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    832c:	ldr.w	r2, [r3, #328]	; 0x148
    8330:	orr.w	r2, r2, #16777216	; 0x1000000
    8334:	str.w	r2, [r3, #328]	; 0x148
    8338:	pop	{r4, r5, r6, pc}
    833a:	nop
    833c:	.word	0x20008b3a
    8340:	.word	0x2000884c
    8344:	.word	0x20008828
    8348:	.word	0x200023c0
    834c:	.word	0x20008b36
    8350:	.word	0x200022c0
    8354:	.word	0x2000884a
    8358:	.word	0x20008808
    835c:	.word	0x20008818
    8360:	.word	0x20008b29
    8364:	.word	0x20008b33
    8368:	.word	0x20006668
    836c:	.word	0x00008151
    8370:	.word	0x000081fd
    8374:	.word	0x20008800
    8378:	.word	0x402e0000

0000837c <usb_serial_read>:

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    837c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8380:	ldr	r3, [pc, #172]	; (8430 <usb_serial_read+0xb4>)
    8382:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8386:	mov	r8, r0
    8388:	mov	fp, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    838a:	str	r2, [r3, #0]

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;
    838c:	movs	r6, #0

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    838e:	ldr	r3, [pc, #164]	; (8434 <usb_serial_read+0xb8>)
    8390:	ldrb	r4, [r3, #0]
    8392:	str	r3, [sp, #0]
    8394:	uxtb	r4, r4
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8396:	ldr	r3, [pc, #160]	; (8438 <usb_serial_read+0xbc>)

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8398:	cmp	r6, fp
    839a:	bcs.n	841e <usb_serial_read+0xa2>
    839c:	ldr	r2, [pc, #156]	; (843c <usb_serial_read+0xc0>)
    839e:	ldrb	r2, [r2, #0]
    83a0:	cmp	r4, r2
    83a2:	beq.n	841e <usb_serial_read+0xa2>
		if (++tail > RX_NUM) tail = 0;
    83a4:	adds	r4, #1
		uint32_t i = rx_list[tail];
    83a6:	ldr	r2, [pc, #152]	; (8440 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    83a8:	ldr	r1, [pc, #152]	; (8444 <usb_serial_read+0xc8>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    83aa:	rsb	sl, r6, fp
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    83ae:	cmp	r4, #9
    83b0:	ldr.w	r9, [pc, #156]	; 8450 <usb_serial_read+0xd4>
    83b4:	str	r3, [sp, #4]
    83b6:	it	cs
    83b8:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    83ba:	ldrb	r7, [r2, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    83bc:	ldrh.w	r2, [r3, r7, lsl #1]
    83c0:	lsls	r0, r7, #9
    83c2:	ldrh.w	r5, [r1, r7, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    83c6:	add	r0, r2
    83c8:	ldr	r1, [pc, #124]	; (8448 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    83ca:	subs	r5, r5, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    83cc:	cmp	sl, r5
    83ce:	bcs.n	83f6 <usb_serial_read+0x7a>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    83d0:	mov	r2, sl
    83d2:	add	r1, r0
    83d4:	mov	r0, r8
    83d6:	mov	r6, fp
    83d8:	bl	7fb0 <memcpy>
			rx_available -= len;
    83dc:	ldr.w	r2, [r9]
			rx_index[i] += len;
    83e0:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    83e2:	rsb	r2, sl, r2
    83e6:	str.w	r2, [r9]
			rx_index[i] += len;
    83ea:	ldrh.w	r2, [r3, r7, lsl #1]
    83ee:	add	sl, r2
    83f0:	strh.w	sl, [r3, r7, lsl #1]
    83f4:	b.n	8398 <usb_serial_read+0x1c>
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    83f6:	add	r1, r0
    83f8:	mov	r2, r5
    83fa:	mov	r0, r8
			p += avail;
			rx_available -= avail;
			count += avail;
    83fc:	add	r6, r5
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    83fe:	bl	7fb0 <memcpy>
			p += avail;
			rx_available -= avail;
    8402:	ldr.w	r2, [r9]
			count += avail;
			rx_tail = tail;
    8406:	ldr	r3, [sp, #0]
			rx_queue_transfer(i);
    8408:	mov	r0, r7
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    840a:	subs	r2, r2, r5
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    840c:	add	r8, r5
			rx_available -= avail;
    840e:	str.w	r2, [r9]
			count += avail;
			rx_tail = tail;
    8412:	uxtb	r2, r4
    8414:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    8416:	bl	80e4 <rx_queue_transfer>
    841a:	ldr	r3, [sp, #4]
    841c:	b.n	8398 <usb_serial_read+0x1c>
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    841e:	mov.w	r2, #131072	; 0x20000
    8422:	ldr	r3, [pc, #40]	; (844c <usb_serial_read+0xd0>)
	return count;
}
    8424:	mov	r0, r6
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8426:	str	r2, [r3, #0]
	return count;
}
    8428:	add	sp, #12
    842a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    842e:	nop
    8430:	.word	0xe000e18c
    8434:	.word	0x20008b33
    8438:	.word	0x20008818
    843c:	.word	0x20008b29
    8440:	.word	0x20008b2a
    8444:	.word	0x20008808
    8448:	.word	0x20200800
    844c:	.word	0xe000e10c
    8450:	.word	0x20006668

00008454 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8454:	ldr	r3, [pc, #44]	; (8484 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8456:	ldr	r2, [pc, #48]	; (8488 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8458:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    845a:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    845c:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    845e:	cmp	r3, r2
    8460:	beq.n	847e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8462:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8464:	ldr	r2, [pc, #36]	; (848c <usb_serial_peekchar+0x38>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8466:	cmp	r3, #9
    8468:	it	cs
    846a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    846c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    846e:	ldr	r3, [pc, #32]	; (8490 <usb_serial_peekchar+0x3c>)
    8470:	ldrh.w	r1, [r3, r2, lsl #1]
    8474:	ldr	r3, [pc, #28]	; (8494 <usb_serial_peekchar+0x40>)
    8476:	add.w	r3, r3, r2, lsl #9
    847a:	ldrb	r0, [r3, r1]
    847c:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    847e:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    8482:	bx	lr
    8484:	.word	0x20008b33
    8488:	.word	0x20008b29
    848c:	.word	0x20008b2a
    8490:	.word	0x20008818
    8494:	.word	0x20200800

00008498 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8498:	ldr	r3, [pc, #4]	; (84a0 <usb_serial_available+0x8>)
    849a:	ldr	r0, [r3, #0]
}
    849c:	bx	lr
    849e:	nop
    84a0:	.word	0x20006668

000084a4 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    84a4:	ldr	r3, [pc, #68]	; (84ec <usb_serial_flush_input+0x48>)
	return rx_available;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    84a6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    84aa:	ldrb	r4, [r3, #0]
    84ac:	mov	r5, r3
	while (tail != rx_head) {
    84ae:	ldr	r7, [pc, #64]	; (84f0 <usb_serial_flush_input+0x4c>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    84b0:	uxtb	r4, r4
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    84b2:	ldr.w	r8, [pc, #76]	; 8500 <usb_serial_flush_input+0x5c>
		rx_available -= rx_count[i] - rx_index[i];
    84b6:	ldr	r6, [pc, #60]	; (84f4 <usb_serial_flush_input+0x50>)

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    84b8:	ldrb	r3, [r7, #0]
    84ba:	cmp	r4, r3
    84bc:	beq.n	84e8 <usb_serial_flush_input+0x44>
		if (++tail > RX_NUM) tail = 0;
    84be:	adds	r4, #1
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    84c0:	ldr	r3, [pc, #52]	; (84f8 <usb_serial_flush_input+0x54>)
    84c2:	ldr	r1, [pc, #56]	; (84fc <usb_serial_flush_input+0x58>)
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    84c4:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    84c6:	ldr	r2, [r6, #0]
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    84c8:	it	cs
    84ca:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    84cc:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    84d0:	ldrh.w	r3, [r3, r0, lsl #1]
    84d4:	ldrh.w	r1, [r1, r0, lsl #1]
    84d8:	subs	r3, r3, r1
    84da:	subs	r3, r2, r3
    84dc:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    84de:	bl	80e4 <rx_queue_transfer>
		rx_tail = tail;
    84e2:	uxtb	r3, r4
    84e4:	strb	r3, [r5, #0]
    84e6:	b.n	84b8 <usb_serial_flush_input+0x14>
	}
}
    84e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84ec:	.word	0x20008b33
    84f0:	.word	0x20008b29
    84f4:	.word	0x20006668
    84f8:	.word	0x20008808
    84fc:	.word	0x20008818
    8500:	.word	0x20008b2a

00008504 <usb_serial_getchar>:


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8504:	push	{r0, r1, r2, lr}
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    8506:	movs	r1, #1
    8508:	add.w	r0, sp, #7
    850c:	bl	837c <usb_serial_read>
    8510:	cbz	r0, 8518 <usb_serial_getchar+0x14>
    8512:	ldrb.w	r0, [sp, #7]
    8516:	b.n	851c <usb_serial_getchar+0x18>
	return -1;
    8518:	mov.w	r0, #4294967295
}
    851c:	add	sp, #12
    851e:	ldr.w	pc, [sp], #4
	...

00008524 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8524:	ldr	r2, [pc, #336]	; (8678 <usb_serial_write+0x154>)
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8526:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    852a:	sub	sp, #20
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    852c:	ldrb	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    852e:	mov	r9, r0
    8530:	mov	r6, r1
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8532:	and.w	r4, r3, #255	; 0xff
    8536:	str	r2, [sp, #4]
    8538:	cmp	r3, #0
    853a:	beq.w	8670 <usb_serial_write+0x14c>
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    853e:	ldr.w	sl, [pc, #328]	; 8688 <usb_serial_write+0x164>
    8542:	movs	r4, #0
    8544:	mov	fp, sl
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8546:	cmp	r6, #0
    8548:	beq.w	8670 <usb_serial_write+0x14c>
		tx_noautoflush = 1;
    854c:	movs	r3, #1
    854e:	ldr	r2, [pc, #300]	; (867c <usb_serial_write+0x158>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
    8550:	movs	r7, #0
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    8552:	strb	r3, [r2, #0]
    8554:	mov	r5, r2
		transfer_t *xfer = tx_transfer + tx_head;
    8556:	ldr	r3, [pc, #296]	; (8680 <usb_serial_write+0x15c>)
    8558:	ldrb.w	r8, [r3]
    855c:	ldr	r3, [pc, #292]	; (8684 <usb_serial_write+0x160>)
    855e:	add.w	r8, r3, r8, lsl #5
		int waiting=0;
    8562:	mov	r3, r7
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8564:	ldrh.w	r1, [sl]
    8568:	cmp	r1, #0
    856a:	bne.n	85c6 <usb_serial_write+0xa2>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    856c:	mov	r0, r8
    856e:	str	r1, [sp, #12]
    8570:	str	r3, [sp, #8]
    8572:	bl	91a4 <usb_transfer_status>
			if (!(status & 0x80)) {
    8576:	ands.w	r0, r0, #128	; 0x80
    857a:	ldr	r3, [sp, #8]
    857c:	ldr	r1, [sp, #12]
    857e:	bne.n	858e <usb_serial_write+0x6a>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8580:	mov.w	r3, #2048	; 0x800
    8584:	ldr	r2, [pc, #256]	; (8688 <usb_serial_write+0x164>)
    8586:	strh	r3, [r2, #0]
				transmit_previous_timeout = 0;
    8588:	ldr	r3, [pc, #256]	; (868c <usb_serial_write+0x168>)
    858a:	strb	r0, [r3, #0]
    858c:	b.n	85c6 <usb_serial_write+0xa2>
				break;
			}
			asm("dsb" ::: "memory");
    858e:	dsb	sy
			tx_noautoflush = 0;
    8592:	strb	r1, [r5, #0]
			if (!waiting) {
    8594:	cbnz	r3, 859a <usb_serial_write+0x76>
				wait_begin_at = systick_millis_count;
    8596:	ldr	r3, [pc, #248]	; (8690 <usb_serial_write+0x16c>)
    8598:	ldr	r7, [r3, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    859a:	ldr	r3, [pc, #240]	; (868c <usb_serial_write+0x168>)
    859c:	ldrb	r3, [r3, #0]
    859e:	cmp	r3, #0
    85a0:	bne.n	8670 <usb_serial_write+0x14c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    85a2:	ldr	r3, [pc, #236]	; (8690 <usb_serial_write+0x16c>)
    85a4:	ldr	r3, [r3, #0]
    85a6:	subs	r3, r3, r7
    85a8:	cmp	r3, #120	; 0x78
    85aa:	bls.n	85b4 <usb_serial_write+0x90>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    85ac:	movs	r2, #1
    85ae:	ldr	r3, [pc, #220]	; (868c <usb_serial_write+0x168>)
    85b0:	strb	r2, [r3, #0]
    85b2:	b.n	8670 <usb_serial_write+0x14c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    85b4:	ldr	r3, [sp, #4]
    85b6:	ldrb	r3, [r3, #0]
    85b8:	cmp	r3, #0
    85ba:	beq.n	8670 <usb_serial_write+0x14c>
			yield();
    85bc:	bl	9724 <yield>
			tx_noautoflush = 1;
    85c0:	movs	r3, #1
    85c2:	strb	r3, [r5, #0]
    85c4:	b.n	8564 <usb_serial_write+0x40>
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    85c6:	ldr	r3, [pc, #184]	; (8680 <usb_serial_write+0x15c>)
    85c8:	ldrh.w	r7, [fp]
    85cc:	ldrb	r5, [r3, #0]
    85ce:	rsb	r0, r7, #2048	; 0x800
    85d2:	ldr	r3, [pc, #192]	; (8694 <usb_serial_write+0x170>)
    85d4:	lsls	r5, r5, #11
		if (size >= tx_available) {
    85d6:	cmp	r7, r6
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    85d8:	str	r3, [sp, #8]
    85da:	add	r0, r5
    85dc:	add	r0, r3
		if (size >= tx_available) {
    85de:	bhi.n	8648 <usb_serial_write+0x124>
			memcpy(txdata, data, tx_available);
    85e0:	mov	r2, r7
    85e2:	mov	r1, r9
    85e4:	bl	7fb0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    85e8:	ldr	r3, [sp, #8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    85ea:	mov.w	r2, #2048	; 0x800
    85ee:	mov	r0, r8
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    85f0:	add	r5, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    85f2:	movs	r3, #0
    85f4:	mov	r1, r5
    85f6:	bl	9130 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    85fa:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    85fe:	add.w	r5, r5, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8602:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8606:	ldr	r2, [pc, #144]	; (8698 <usb_serial_write+0x174>)
    8608:	str	r3, [r2, #0]
		location += 32;
    860a:	adds	r3, #32
	} while (location < end_addr);
    860c:	cmp	r5, r3
    860e:	bhi.n	8608 <usb_serial_write+0xe4>
	asm("dsb");
    8610:	dsb	sy
	asm("isb");
    8614:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8618:	movs	r0, #4
    861a:	mov	r1, r8
    861c:	bl	915c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8620:	ldr	r2, [pc, #92]	; (8680 <usb_serial_write+0x15c>)
    8622:	ldrb	r3, [r2, #0]
    8624:	adds	r3, #1
    8626:	uxtb	r3, r3
    8628:	cmp	r3, #3
    862a:	it	hi
    862c:	movhi	r3, #0
    862e:	strb	r3, [r2, #0]
			size -= tx_available;
    8630:	ldrh.w	r3, [fp]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8634:	ldr	r2, [pc, #100]	; (869c <usb_serial_write+0x178>)
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    8636:	subs	r6, r6, r3
			sent += tx_available;
    8638:	add	r4, r3
			data += tx_available;
    863a:	add	r9, r3
			tx_available = 0;
    863c:	movs	r3, #0
    863e:	strh.w	r3, [fp]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8642:	str.w	r3, [r2, #132]	; 0x84
    8646:	b.n	8664 <usb_serial_write+0x140>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    8648:	mov	r2, r6
    864a:	mov	r1, r9
    864c:	bl	7fb0 <memcpy>
			tx_available -= size;
    8650:	subs	r7, r7, r6
			sent += size;
    8652:	add	r4, r6
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8654:	mov.w	r2, #3221225472	; 0xc0000000
    8658:	ldr	r3, [pc, #64]	; (869c <usb_serial_write+0x178>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    865a:	movs	r6, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    865c:	strh.w	r7, [sl]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8660:	str.w	r2, [r3, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    8664:	dsb	sy
		tx_noautoflush = 0;
    8668:	movs	r3, #0
    866a:	ldr	r2, [pc, #16]	; (867c <usb_serial_write+0x158>)
    866c:	strb	r3, [r2, #0]
    866e:	b.n	8546 <usb_serial_write+0x22>
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8670:	mov	r0, r4
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    8672:	add	sp, #20
    8674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8678:	.word	0x20008b39
    867c:	.word	0x20008b37
    8680:	.word	0x20008b36
    8684:	.word	0x200023c0
    8688:	.word	0x2000884a
    868c:	.word	0x20008b35
    8690:	.word	0x200087fc
    8694:	.word	0x20201800
    8698:	.word	0xe000ef70
    869c:	.word	0x402e0000

000086a0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    86a0:	push	{r0, r1, r2, lr}
    86a2:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    86a4:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    86a6:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    86aa:	mov	r0, r3
    86ac:	bl	8524 <usb_serial_write>
}
    86b0:	add	sp, #12
    86b2:	ldr.w	pc, [sp], #4
	...

000086b8 <usb_serial_write_buffer_free>:
	}
	return sent;
}

int usb_serial_write_buffer_free(void)
{
    86b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
    86bc:	ldr	r3, [pc, #56]	; (86f8 <usb_serial_write_buffer_free+0x40>)
	for (uint32_t i=0; i < TX_NUM; i++) {
    86be:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    86c0:	movs	r2, #1
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    86c2:	ldr	r7, [pc, #56]	; (86fc <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    86c4:	mov	r6, r4
    86c6:	mov	r5, r3
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    86c8:	ldr.w	r8, [pc, #52]	; 8700 <usb_serial_write_buffer_free+0x48>
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    86cc:	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    86ce:	ldrb	r3, [r7, #0]
    86d0:	cmp	r3, r4
    86d2:	beq.n	86e4 <usb_serial_write_buffer_free+0x2c>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    86d4:	add.w	r0, r8, r4, lsl #5
    86d8:	bl	91a4 <usb_transfer_status>
    86dc:	lsls	r3, r0, #24
    86de:	it	pl
    86e0:	addpl.w	r6, r6, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    86e4:	adds	r4, #1
    86e6:	cmp	r4, #4
    86e8:	bne.n	86ce <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    86ea:	dsb	sy
	tx_noautoflush = 0;
    86ee:	movs	r3, #0
	return sum;
}
    86f0:	mov	r0, r6
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    86f2:	strb	r3, [r5, #0]
	return sum;
}
    86f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86f8:	.word	0x20008b37
    86fc:	.word	0x20008b36
    8700:	.word	0x200023c0

00008704 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8704:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8708:	ldr	r3, [pc, #120]	; (8784 <usb_serial_flush_output+0x80>)
    870a:	ldrb	r3, [r3, #0]
    870c:	cmp	r3, #0
    870e:	beq.n	8780 <usb_serial_flush_output+0x7c>
	if (tx_available == 0) return;
    8710:	ldr	r6, [pc, #116]	; (8788 <usb_serial_flush_output+0x84>)
    8712:	ldrh	r5, [r6, #0]
    8714:	cbz	r5, 8780 <usb_serial_flush_output+0x7c>
	tx_noautoflush = 1;
    8716:	ldr	r7, [pc, #116]	; (878c <usb_serial_flush_output+0x88>)
    8718:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    871a:	ldr.w	r8, [pc, #128]	; 879c <usb_serial_flush_output+0x98>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    871e:	rsb	r5, r5, #2048	; 0x800
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8722:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    8724:	ldrb.w	r4, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8728:	mov	r2, r5
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    872a:	ldr	r3, [pc, #100]	; (8790 <usb_serial_flush_output+0x8c>)
    872c:	add.w	r9, r3, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8730:	ldr	r3, [pc, #96]	; (8794 <usb_serial_flush_output+0x90>)
    8732:	add.w	r4, r3, r4, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8736:	mov	r0, r9
    8738:	movs	r3, #0
    873a:	mov	r1, r4
    873c:	bl	9130 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8740:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8744:	add	r4, r5
	asm volatile("": : :"memory");
	asm("dsb");
    8746:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    874a:	ldr	r2, [pc, #76]	; (8798 <usb_serial_flush_output+0x94>)
    874c:	str	r3, [r2, #0]
		location += 32;
    874e:	adds	r3, #32
	} while (location < end_addr);
    8750:	cmp	r4, r3
    8752:	bhi.n	874c <usb_serial_flush_output+0x48>
	asm("dsb");
    8754:	dsb	sy
	asm("isb");
    8758:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    875c:	movs	r0, #4
    875e:	mov	r1, r9
    8760:	bl	915c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8764:	ldrb.w	r3, [r8]
    8768:	ldr	r1, [pc, #48]	; (879c <usb_serial_flush_output+0x98>)
    876a:	movs	r2, #0
    876c:	adds	r3, #1
	tx_available = 0;
    876e:	strh	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    8770:	uxtb	r3, r3
    8772:	cmp	r3, #3
    8774:	ite	ls
    8776:	strbls	r3, [r1, #0]
    8778:	strbhi	r2, [r1, #0]
	tx_available = 0;
	asm("dsb" ::: "memory");
    877a:	dsb	sy
	tx_noautoflush = 0;
    877e:	strb	r2, [r7, #0]
    8780:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8784:	.word	0x20008b39
    8788:	.word	0x2000884a
    878c:	.word	0x20008b37
    8790:	.word	0x200023c0
    8794:	.word	0x20201800
    8798:	.word	0xe000ef70
    879c:	.word	0x20008b36

000087a0 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    87a0:	ldr	r2, [pc, #520]	; (89ac <set_arm_clock+0x20c>)
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    87a2:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    87a4:	ldr	r3, [r2, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    87a6:	ldr	r6, [r2, #24]
	uint32_t dcdc = DCDC_REG3;
    87a8:	sub.w	r2, r2, #507904	; 0x7c000
    87ac:	ldr	r4, [r2, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    87ae:	ldr	r2, [pc, #512]	; (89b0 <set_arm_clock+0x210>)
    87b0:	cmp	r0, r2
    87b2:	bls.n	87d8 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    87b4:	ldr	r2, [pc, #508]	; (89b4 <set_arm_clock+0x214>)
    87b6:	cmp	r0, r2
    87b8:	bls.n	87ea <set_arm_clock+0x4a>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    87ba:	ldr	r1, [pc, #508]	; (89b8 <set_arm_clock+0x218>)
    87bc:	movs	r5, #25
    87be:	ldr	r2, [pc, #508]	; (89bc <set_arm_clock+0x21c>)
    87c0:	add	r1, r0
    87c2:	udiv	r1, r1, r2
    87c6:	muls	r1, r5
    87c8:	movw	r2, #1575	; 0x627
    87cc:	addw	r1, r1, #1250	; 0x4e2
    87d0:	cmp	r2, r1
    87d2:	it	cs
    87d4:	movcs	r2, r1
    87d6:	b.n	87ee <set_arm_clock+0x4e>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    87d8:	movw	r2, #950	; 0x3b6
    87dc:	movw	r1, #1150	; 0x47e
    87e0:	ldr	r5, [pc, #476]	; (89c0 <set_arm_clock+0x220>)
    87e2:	cmp	r0, r5
    87e4:	it	hi
    87e6:	movhi	r2, r1
    87e8:	b.n	87ee <set_arm_clock+0x4e>
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
		voltage = 1250; // 1.25V
    87ea:	movw	r2, #1250	; 0x4e2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    87ee:	ldr	r5, [pc, #444]	; (89ac <set_arm_clock+0x20c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    87f0:	sub.w	r2, r2, #800	; 0x320
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    87f4:	ldr.w	r1, [r5, #128]	; 0x80
    87f8:	orr.w	r1, r1, #192	; 0xc0
    87fc:	str.w	r1, [r5, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8800:	movs	r1, #25
    8802:	udiv	r1, r2, r1
    8806:	and.w	r2, r4, #31
    880a:	cmp	r2, r1
    880c:	bcs.n	881e <set_arm_clock+0x7e>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    880e:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8812:	ldr	r2, [pc, #432]	; (89c4 <set_arm_clock+0x224>)
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8814:	orrs	r4, r1
		DCDC_REG3 = dcdc;
    8816:	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8818:	ldr	r5, [r2, #0]
    881a:	cmp	r5, #0
    881c:	bge.n	8818 <set_arm_clock+0x78>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    881e:	lsls	r7, r3, #6
    8820:	bmi.n	887c <set_arm_clock+0xdc>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    8822:	ldr	r2, [pc, #420]	; (89c8 <set_arm_clock+0x228>)
    8824:	ldr	r5, [r2, #16]
    8826:	ldr	r2, [pc, #420]	; (89cc <set_arm_clock+0x22c>)
    8828:	ands	r2, r5
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    882a:	ldr	r5, [pc, #416]	; (89cc <set_arm_clock+0x22c>)
    882c:	cmp	r2, r5
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    882e:	itete	eq
    8830:	moveq.w	r5, #402653184	; 0x18000000
    8834:	movne	r5, #0
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    8836:	moveq	r2, #0
    8838:	movne	r2, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    883a:	eor.w	r7, r3, r5
    883e:	tst.w	r7, #939524096	; 0x38000000
    8842:	beq.n	884e <set_arm_clock+0xae>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8844:	bic.w	r3, r3, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8848:	orrs	r3, r5
			CCM_CBCDR = cbcdr;
    884a:	ldr	r5, [pc, #352]	; (89ac <set_arm_clock+0x20c>)
    884c:	str	r3, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    884e:	lsls	r5, r2, #12
    8850:	eor.w	r2, r6, r5
    8854:	tst.w	r2, #12288	; 0x3000
    8858:	bne.n	8864 <set_arm_clock+0xc4>
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    885a:	orr.w	r3, r3, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    885e:	ldr	r2, [pc, #332]	; (89ac <set_arm_clock+0x20c>)
    8860:	str	r3, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8862:	b.n	8876 <set_arm_clock+0xd6>
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8864:	bic.w	r2, r6, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8868:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    886a:	ldr	r5, [pc, #320]	; (89ac <set_arm_clock+0x20c>)
    886c:	str	r2, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    886e:	ldr	r2, [r5, #72]	; 0x48
    8870:	lsls	r6, r2, #28
    8872:	bmi.n	886e <set_arm_clock+0xce>
    8874:	b.n	885a <set_arm_clock+0xba>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8876:	ldr	r5, [r2, #72]	; 0x48
    8878:	lsls	r5, r5, #26
    887a:	bmi.n	8876 <set_arm_clock+0xd6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    887c:	movs	r5, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    887e:	ldr	r7, [pc, #336]	; (89d0 <set_arm_clock+0x230>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8880:	mov	r6, r5
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8882:	mul.w	r2, r5, r6
    8886:	muls	r2, r0
    8888:	cmp	r2, r7
    888a:	bhi.n	8898 <set_arm_clock+0xf8>
		if (div_arm < 8) {
    888c:	cmp	r6, #7
    888e:	bhi.n	8894 <set_arm_clock+0xf4>
			div_arm = div_arm + 1;
    8890:	adds	r6, #1
    8892:	b.n	8882 <set_arm_clock+0xe2>
		} else {
			if (div_ahb < 5) {
    8894:	cmp	r5, #4
    8896:	bls.n	88b2 <set_arm_clock+0x112>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8898:	add.w	r2, r2, #5996544	; 0x5b8000
    889c:	ldr	r0, [pc, #308]	; (89d4 <set_arm_clock+0x234>)
    889e:	add.w	r2, r2, #3456	; 0xd80
    88a2:	udiv	r2, r2, r0
	if (mult > 108) mult = 108;
    88a6:	cmp	r2, #108	; 0x6c
    88a8:	bhi.n	88b8 <set_arm_clock+0x118>
	if (mult < 54) mult = 54;
    88aa:	cmp	r2, #53	; 0x35
    88ac:	it	ls
    88ae:	movls	r2, #54	; 0x36
    88b0:	b.n	88ba <set_arm_clock+0x11a>
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
				div_ahb = div_ahb + 1;
    88b2:	adds	r5, #1
				div_arm = 1;
    88b4:	movs	r6, #1
    88b6:	b.n	8882 <set_arm_clock+0xe2>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    88b8:	movs	r2, #108	; 0x6c

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    88ba:	ldr	r7, [pc, #268]	; (89c8 <set_arm_clock+0x228>)
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    88bc:	muls	r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    88be:	ldr.w	ip, [pc, #304]	; 89f0 <set_arm_clock+0x250>
    88c2:	ldr.w	lr, [r7]
    88c6:	and.w	ip, lr, ip
    88ca:	orr.w	lr, r2, #2147483648	; 0x80000000
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    88ce:	udiv	r0, r0, r6

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    88d2:	orr.w	lr, lr, #8192	; 0x2000
    88d6:	cmp	ip, lr
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    88d8:	udiv	r0, r0, r5

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    88dc:	bne.n	88f2 <set_arm_clock+0x152>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    88de:	ldr	r7, [pc, #204]	; (89ac <set_arm_clock+0x20c>)
    88e0:	subs	r2, r6, #1
    88e2:	ldr.w	lr, [r7, #16]
    88e6:	and.w	r6, lr, #7
    88ea:	cmp	r6, r2
    88ec:	mov	r6, r7
    88ee:	bne.n	8908 <set_arm_clock+0x168>
    88f0:	b.n	8914 <set_arm_clock+0x174>
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    88f2:	mov.w	lr, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    88f6:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    88fa:	str.w	lr, [r7]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    88fe:	str	r2, [r7, #0]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8900:	ldr	r2, [r7, #0]
    8902:	cmp	r2, #0
    8904:	bge.n	8900 <set_arm_clock+0x160>
    8906:	b.n	88de <set_arm_clock+0x13e>
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8908:	and.w	r2, r2, #7
    890c:	str	r2, [r7, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    890e:	ldr	r2, [r6, #72]	; 0x48
    8910:	lsls	r7, r2, #15
    8912:	bmi.n	890e <set_arm_clock+0x16e>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8914:	subs	r5, #1
    8916:	lsls	r5, r5, #10
    8918:	eor.w	r2, r3, r5
    891c:	tst.w	r2, #7168	; 0x1c00
    8920:	beq.n	8936 <set_arm_clock+0x196>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8922:	bic.w	r3, r3, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8926:	and.w	r5, r5, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    892a:	ldr	r2, [pc, #128]	; (89ac <set_arm_clock+0x20c>)
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    892c:	orrs	r3, r5
		CCM_CBCDR = cbcdr;
    892e:	str	r3, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8930:	ldr	r5, [r2, #72]	; 0x48
    8932:	lsls	r5, r5, #30
    8934:	bmi.n	8930 <set_arm_clock+0x190>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8936:	ldr	r2, [pc, #160]	; (89d8 <set_arm_clock+0x238>)
    8938:	ldr	r5, [pc, #160]	; (89dc <set_arm_clock+0x23c>)
    893a:	add	r2, r0
    893c:	udiv	r5, r2, r5
    8940:	cmp	r5, #4
    8942:	it	cs
    8944:	movcs	r5, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    8946:	subs	r2, r5, #1
    8948:	lsls	r2, r2, #8
    894a:	eor.w	r6, r3, r2
    894e:	tst.w	r6, #768	; 0x300
    8952:	ldr	r6, [pc, #88]	; (89ac <set_arm_clock+0x20c>)
    8954:	beq.n	8962 <set_arm_clock+0x1c2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8956:	bic.w	r3, r3, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    895a:	and.w	r2, r2, #768	; 0x300
    895e:	orrs	r3, r2
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8960:	str	r3, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8962:	ldr	r3, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8964:	ldr	r2, [pc, #68]	; (89ac <set_arm_clock+0x20c>)
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8966:	bic.w	r3, r3, #33554432	; 0x2000000
    896a:	str	r3, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    896c:	ldr	r3, [r2, #72]	; 0x48
    896e:	lsls	r3, r3, #26
    8970:	bmi.n	896c <set_arm_clock+0x1cc>

	F_CPU_ACTUAL = frequency;
    8972:	ldr	r3, [pc, #108]	; (89e0 <set_arm_clock+0x240>)
	F_BUS_ACTUAL = frequency / div_ipg;
    8974:	udiv	r5, r0, r5
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8978:	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    897a:	ldr	r3, [pc, #104]	; (89e4 <set_arm_clock+0x244>)
    897c:	str	r5, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    897e:	ldr	r3, [pc, #104]	; (89e8 <set_arm_clock+0x248>)
    8980:	udiv	r2, r0, r3
    8984:	mov.w	r3, #4294967295
    8988:	udiv	r3, r3, r2
    898c:	ldr	r2, [pc, #92]	; (89ec <set_arm_clock+0x24c>)
    898e:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8990:	and.w	r3, r4, #31
    8994:	cmp	r1, r3
    8996:	bcs.n	89a8 <set_arm_clock+0x208>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8998:	bic.w	r3, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    899c:	ldr	r2, [pc, #36]	; (89c4 <set_arm_clock+0x224>)

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    899e:	orrs	r3, r1
		DCDC_REG3 = dcdc;
    89a0:	str	r3, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    89a2:	ldr	r3, [r2, #0]
    89a4:	cmp	r3, #0
    89a6:	bge.n	89a2 <set_arm_clock+0x202>
	}

	return frequency;
}
    89a8:	pop	{r4, r5, r6, r7, pc}
    89aa:	nop
    89ac:	.word	0x400fc000
    89b0:	.word	0x1f78a400
    89b4:	.word	0x23c34600
    89b8:	.word	0xdc3cba00
    89bc:	.word	0x01ab3f00
    89c0:	.word	0x016e3600
    89c4:	.word	0x40080000
    89c8:	.word	0x400d8000
    89cc:	.word	0x80003040
    89d0:	.word	0x269fb1ff
    89d4:	.word	0x00b71b00
    89d8:	.word	0x08f0d17f
    89dc:	.word	0x08f0d180
    89e0:	.word	0x200017c0
    89e4:	.word	0x200017bc
    89e8:	.word	0x000f4240
    89ec:	.word	0x2000667c
    89f0:	.word	0x8001307f

000089f4 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    89f4:	push	{r4, r5, lr}
    89f6:	ldr	r4, [pc, #148]	; (8a8c <endpoint0_receive+0x98>)
	//printf("rx %lu\n", len);
	if (len > 0) {
    89f8:	cbnz	r1, 8a3e <endpoint0_receive+0x4a>
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89fa:	cmp	r2, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    89fc:	ldr	r3, [pc, #144]	; (8a90 <endpoint0_receive+0x9c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89fe:	movw	r2, #32896	; 0x8080
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8a02:	mov.w	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a06:	it	eq
    8a08:	moveq	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a0a:	str	r3, [r4, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8a0c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a0e:	it	ne
    8a10:	movne.w	r1, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a14:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    8a16:	mov.w	r2, #0
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a1a:	it	eq
    8a1c:	moveq	r1, #0
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8a1e:	str	r2, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8a20:	str	r2, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a22:	mov.w	r2, #65537	; 0x10001
    8a26:	ldr	r3, [pc, #108]	; (8a94 <endpoint0_receive+0xa0>)
    8a28:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a2c:	ldr.w	r2, [r3, #432]	; 0x1b0
    8a30:	orr.w	r2, r2, #65536	; 0x10000
    8a34:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a38:	ldr	r2, [pc, #92]	; (8a98 <endpoint0_receive+0xa4>)
    8a3a:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    8a3c:	b.n	8a82 <endpoint0_receive+0x8e>
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a3e:	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8a40:	ldr	r3, [pc, #88]	; (8a9c <endpoint0_receive+0xa8>)
    8a42:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a44:	orr.w	r1, r1, #128	; 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8a48:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8a4a:	str	r3, [r4, #8]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a4c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8a4e:	add.w	r1, r0, #4096	; 0x1000
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8a52:	str	r5, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8a54:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8a56:	add.w	r1, r0, #8192	; 0x2000
    8a5a:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8a5c:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8a60:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8a64:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8a66:	str	r0, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    8a68:	movs	r3, #0
    8a6a:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    8a6c:	ldr	r3, [pc, #36]	; (8a94 <endpoint0_receive+0xa0>)
    8a6e:	ldr.w	r1, [r3, #432]	; 0x1b0
    8a72:	orrs	r1, r5
    8a74:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8a78:	ldr.w	r1, [r3, #432]	; 0x1b0
    8a7c:	cmp	r1, #0
    8a7e:	bne.n	8a78 <endpoint0_receive+0x84>
    8a80:	b.n	89fa <endpoint0_receive+0x6>
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8a82:	ldr.w	r2, [r3, #432]	; 0x1b0
    8a86:	cmp	r2, #0
    8a88:	bne.n	8a82 <endpoint0_receive+0x8e>
}
    8a8a:	pop	{r4, r5, pc}
    8a8c:	.word	0x20000000
    8a90:	.word	0x20008b60
    8a94:	.word	0x402e0000
    8a98:	.word	0x20006624
    8a9c:	.word	0x20008b40

00008aa0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8aa0:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8aa2:	push	{r4, r5, r6, r7, lr}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8aa4:	cbz	r3, 8aae <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8aa6:	ldr	r3, [r2, #4]
    8aa8:	orr.w	r3, r3, #32768	; 0x8000
    8aac:	str	r3, [r2, #4]
	}
	__disable_irq();
    8aae:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8ab0:	ldr	r4, [r0, #52]	; 0x34
    8ab2:	ldr	r3, [pc, #100]	; (8b18 <schedule_transfer+0x78>)
	if (last) {
    8ab4:	cbz	r4, 8b00 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    8ab6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8ab8:	ldr.w	r4, [r3, #432]	; 0x1b0
    8abc:	tst	r4, r1
    8abe:	bne.n	8b10 <schedule_transfer+0x70>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8ac0:	ldr	r4, [pc, #88]	; (8b1c <schedule_transfer+0x7c>)
    8ac2:	ldr	r7, [r4, #0]
    8ac4:	mov	r5, r4
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8ac6:	ldr.w	r4, [r3, #320]	; 0x140
    8aca:	orr.w	r4, r4, #16384	; 0x4000
    8ace:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8ad2:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8ad6:	ldr.w	r6, [r3, #320]	; 0x140
    8ada:	lsls	r6, r6, #17
    8adc:	bpl.n	8af4 <schedule_transfer+0x54>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8ade:	ands	r4, r1
    8ae0:	bne.n	8b10 <schedule_transfer+0x70>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    8ae2:	str	r4, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    8ae4:	ldr	r4, [pc, #48]	; (8b18 <schedule_transfer+0x78>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    8ae6:	str	r2, [r0, #8]
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8ae8:	ldr.w	r3, [r4, #432]	; 0x1b0
    8aec:	orrs	r1, r3
    8aee:	str.w	r1, [r4, #432]	; 0x1b0
		goto end;
    8af2:	b.n	8b10 <schedule_transfer+0x70>
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8af4:	ldr	r6, [r5, #0]
    8af6:	subs	r6, r6, r7
    8af8:	cmp.w	r6, #2400	; 0x960
    8afc:	bcc.n	8ac6 <schedule_transfer+0x26>
    8afe:	b.n	8ade <schedule_transfer+0x3e>
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8b00:	str	r2, [r0, #8]
	endpoint->status = 0;
    8b02:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8b04:	ldr.w	r4, [r3, #432]	; 0x1b0
    8b08:	orrs	r1, r4
    8b0a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8b0e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8b10:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8b12:	cpsie	i
    8b14:	pop	{r4, r5, r6, r7, pc}
    8b16:	nop
    8b18:	.word	0x402e0000
    8b1c:	.word	0xe0001004

00008b20 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8b20:	push	{r4, r5, r6, lr}
    8b22:	mov	r5, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8b24:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    8b26:	cbz	r0, 8b52 <run_callbacks+0x32>
    8b28:	mov	r2, r0
    8b2a:	movs	r4, #0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    8b2c:	ldr	r3, [r2, #4]
    8b2e:	ands.w	r3, r3, #128	; 0x80
    8b32:	beq.n	8b38 <run_callbacks+0x18>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8b34:	str	r2, [r5, #48]	; 0x30
			break;
    8b36:	b.n	8b44 <run_callbacks+0x24>
		}
		count++;
		t = (transfer_t *)t->next;
    8b38:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8b3a:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8b3c:	cmp	r2, #1
    8b3e:	bne.n	8b2c <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8b40:	str	r3, [r5, #48]	; 0x30
			ep->last_transfer = NULL;
    8b42:	str	r3, [r5, #52]	; 0x34
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8b44:	cbz	r4, 8b52 <run_callbacks+0x32>
		transfer_t *next = (transfer_t *)first->next;
    8b46:	ldr	r6, [r0, #0]
		ep->callback_function(first);
		first = next;
		count--;
    8b48:	subs	r4, #1
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8b4a:	ldr	r3, [r5, #56]	; 0x38
    8b4c:	blx	r3
		first = next;
    8b4e:	mov	r0, r6
    8b50:	b.n	8b44 <run_callbacks+0x24>
    8b52:	pop	{r4, r5, r6, pc}

00008b54 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8b54:	push	{r4, lr}
    8b56:	ldr	r2, [pc, #128]	; (8bd8 <endpoint0_transmit.constprop.1+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8b58:	cbnz	r1, 8b88 <endpoint0_transmit.constprop.1+0x34>
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8b5a:	ldr	r3, [pc, #128]	; (8bdc <endpoint0_transmit.constprop.1+0x88>)
    8b5c:	movs	r1, #1
    8b5e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b60:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8b62:	str	r3, [r2, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b64:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    8b66:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8b68:	str	r1, [r2, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b6a:	mov.w	r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8b6e:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b70:	ldr	r3, [pc, #108]	; (8be0 <endpoint0_transmit.constprop.1+0x8c>)
    8b72:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8b76:	ldr.w	r2, [r3, #432]	; 0x1b0
    8b7a:	orr.w	r2, r2, #1
    8b7e:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8b82:	ldr	r2, [pc, #96]	; (8be4 <endpoint0_transmit.constprop.1+0x90>)
    8b84:	str	r1, [r2, #0]
    8b86:	b.n	8bce <endpoint0_transmit.constprop.1+0x7a>
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b88:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8b8a:	ldr	r3, [pc, #92]	; (8be8 <endpoint0_transmit.constprop.1+0x94>)
    8b8c:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b8e:	orr.w	r1, r1, #128	; 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8b92:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8b94:	str	r3, [r2, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b96:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8b98:	add.w	r1, r0, #4096	; 0x1000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8b9c:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8b9e:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8ba0:	add.w	r1, r0, #8192	; 0x2000
    8ba4:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8ba6:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8baa:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8bae:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8bb0:	str	r0, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8bb2:	movs	r3, #0
    8bb4:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8bb6:	ldr	r3, [pc, #40]	; (8be0 <endpoint0_transmit.constprop.1+0x8c>)
    8bb8:	ldr.w	r1, [r3, #432]	; 0x1b0
    8bbc:	orr.w	r1, r1, #65536	; 0x10000
    8bc0:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8bc4:	ldr.w	r1, [r3, #432]	; 0x1b0
    8bc8:	cmp	r1, #0
    8bca:	bne.n	8bc4 <endpoint0_transmit.constprop.1+0x70>
    8bcc:	b.n	8b5a <endpoint0_transmit.constprop.1+0x6>
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8bce:	ldr.w	r2, [r3, #432]	; 0x1b0
    8bd2:	cmp	r2, #0
    8bd4:	bne.n	8bce <endpoint0_transmit.constprop.1+0x7a>
}
    8bd6:	pop	{r4, pc}
    8bd8:	.word	0x20000000
    8bdc:	.word	0x20008b60
    8be0:	.word	0x402e0000
    8be4:	.word	0x20006624
    8be8:	.word	0x20008b40

00008bec <usb_start_sof_interrupts>:
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    8bec:	cpsid	i
	sof_usage |= (1 << interface);
    8bee:	ldr	r2, [pc, #40]	; (8c18 <usb_start_sof_interrupts+0x2c>)
    8bf0:	movs	r3, #1
    8bf2:	lsl.w	r0, r3, r0
    8bf6:	ldrb	r3, [r2, #0]
    8bf8:	orrs	r0, r3
    8bfa:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    8bfc:	ldr	r2, [pc, #28]	; (8c1c <usb_start_sof_interrupts+0x30>)
    8bfe:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8c02:	lsls	r1, r3, #24
    8c04:	bmi.n	8c12 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8c06:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8c08:	orrs	r3, r1
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8c0a:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8c0e:	str.w	r3, [r2, #328]	; 0x148
	}
	__enable_irq();
    8c12:	cpsie	i
    8c14:	bx	lr
    8c16:	nop
    8c18:	.word	0x20008b34
    8c1c:	.word	0x402e0000

00008c20 <usb_stop_sof_interrupts>:
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    8c20:	movs	r3, #1
    8c22:	ldr	r2, [pc, #32]	; (8c44 <usb_stop_sof_interrupts+0x24>)
    8c24:	lsl.w	r0, r3, r0
    8c28:	ldrb	r3, [r2, #0]
    8c2a:	bic.w	r0, r3, r0
    8c2e:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    8c30:	cbnz	r0, 8c40 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8c32:	ldr	r2, [pc, #20]	; (8c48 <usb_stop_sof_interrupts+0x28>)
    8c34:	ldr.w	r3, [r2, #328]	; 0x148
    8c38:	bic.w	r3, r3, #128	; 0x80
    8c3c:	str.w	r3, [r2, #328]	; 0x148
    8c40:	bx	lr
    8c42:	nop
    8c44:	.word	0x20008b34
    8c48:	.word	0x402e0000

00008c4c <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    8c4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8c50:	ldr	r5, [pc, #648]	; (8edc <usb_isr+0x290>)
    8c52:	ldr.w	r6, [r5, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8c56:	lsls	r0, r6, #31
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8c58:	str.w	r6, [r5, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8c5c:	bmi.n	8c78 <usb_isr+0x2c>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8c5e:	lsls	r1, r6, #25
    8c60:	bpl.w	8ff0 <usb_isr+0x3a4>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8c64:	ldr	r3, [pc, #628]	; (8edc <usb_isr+0x290>)
    8c66:	ldr.w	r2, [r3, #428]	; 0x1ac
    8c6a:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8c6e:	ldr.w	r2, [r3, #444]	; 0x1bc
    8c72:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8c76:	b.n	8fd2 <usb_isr+0x386>
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8c78:	ldr.w	r3, [r5, #428]	; 0x1ac
    8c7c:	mov	r8, r5
    8c7e:	mov	r9, r5
    8c80:	ldr	r2, [pc, #600]	; (8edc <usb_isr+0x290>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8c82:	cmp	r3, #0
    8c84:	beq.w	8f2c <usb_isr+0x2e0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8c88:	str.w	r3, [r5, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
    8c8c:	ldr	r3, [pc, #592]	; (8ee0 <usb_isr+0x294>)
    8c8e:	ldr	r4, [r3, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    8c90:	ldr	r3, [r3, #44]	; 0x2c
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8c92:	ldr.w	r2, [r5, #320]	; 0x140
    8c96:	orr.w	r2, r2, #8192	; 0x2000
    8c9a:	str.w	r2, [r5, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8c9e:	ldr.w	r2, [r5, #320]	; 0x140
    8ca2:	lsls	r2, r2, #18
    8ca4:	bpl.n	8c92 <usb_isr+0x46>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8ca6:	ldr.w	r2, [r8, #320]	; 0x140
    8caa:	bic.w	r2, r2, #8192	; 0x2000
    8cae:	str.w	r2, [r8, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8cb2:	mov.w	r2, #65537	; 0x10001
    8cb6:	str.w	r2, [r8, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8cba:	ldr.w	r7, [r9, #436]	; 0x1b4
    8cbe:	ands.w	r7, r7, #65537	; 0x10001
    8cc2:	bne.n	8cba <usb_isr+0x6e>
			endpoint0_notify_mask = 0;
    8cc4:	ldr	r2, [pc, #540]	; (8ee4 <usb_isr+0x298>)
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8cc6:	uxth	r1, r4
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8cc8:	str	r7, [r2, #0]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8cca:	movw	r2, #1665	; 0x681
    8cce:	cmp	r1, r2
    8cd0:	bhi.n	8d14 <usb_isr+0xc8>
    8cd2:	cmp.w	r1, #1664	; 0x680
    8cd6:	bcs.n	8d64 <usb_isr+0x118>
    8cd8:	cmp.w	r1, #258	; 0x102
    8cdc:	beq.w	8de6 <usb_isr+0x19a>
    8ce0:	bhi.n	8cec <usb_isr+0xa0>
    8ce2:	cmp	r1, #128	; 0x80
    8ce4:	beq.n	8d78 <usb_isr+0x12c>
    8ce6:	cmp	r1, #130	; 0x82
    8ce8:	beq.n	8d82 <usb_isr+0x136>
    8cea:	b.n	8ecc <usb_isr+0x280>
    8cec:	movw	r2, #770	; 0x302
    8cf0:	cmp	r1, r2
    8cf2:	beq.n	8db8 <usb_isr+0x16c>
    8cf4:	cmp.w	r1, #1280	; 0x500
    8cf8:	bne.w	8ecc <usb_isr+0x280>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8cfc:	lsrs	r4, r4, #16
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
    8cfe:	mov	r2, r7
    8d00:	mov	r1, r7
    8d02:	mov	r0, r7
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8d04:	lsls	r4, r4, #25
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
    8d06:	bl	89f4 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8d0a:	orr.w	r4, r4, #16777216	; 0x1000000
    8d0e:	str.w	r4, [r8, #340]	; 0x154
    8d12:	b.n	8ed4 <usb_isr+0x288>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d14:	movw	r2, #8225	; 0x2021
    8d18:	cmp	r1, r2
    8d1a:	beq.w	8eb6 <usb_isr+0x26a>
    8d1e:	bhi.n	8d50 <usb_isr+0x104>
    8d20:	cmp.w	r1, #2176	; 0x880
    8d24:	beq.n	8d6c <usb_isr+0x120>
    8d26:	cmp.w	r1, #2304	; 0x900
    8d2a:	bne.w	8ecc <usb_isr+0x280>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8d2e:	ldr	r3, [pc, #440]	; (8ee8 <usb_isr+0x29c>)
    8d30:	ubfx	r4, r4, #16, #8
    8d34:	strb	r4, [r3, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8d36:	ldr	r3, [pc, #436]	; (8eec <usb_isr+0x2a0>)
    8d38:	str.w	r3, [r8, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8d3c:	ldr	r3, [pc, #432]	; (8ef0 <usb_isr+0x2a4>)
    8d3e:	str.w	r3, [r8, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8d42:	ldr	r3, [pc, #432]	; (8ef4 <usb_isr+0x2a8>)
    8d44:	str.w	r3, [r8, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    8d48:	bl	8290 <usb_serial_configure>
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
    8d4c:	mov	r2, r7
    8d4e:	b.n	8de0 <usb_isr+0x194>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d50:	movw	r2, #8737	; 0x2221
    8d54:	cmp	r1, r2
    8d56:	beq.w	8e9e <usb_isr+0x252>
    8d5a:	movw	r3, #8993	; 0x2321
    8d5e:	cmp	r1, r3
    8d60:	beq.n	8dde <usb_isr+0x192>
    8d62:	b.n	8ecc <usb_isr+0x280>
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8d64:	lsrs	r4, r4, #16
    8d66:	ldr	r2, [pc, #400]	; (8ef8 <usb_isr+0x2ac>)
    8d68:	uxth	r0, r3
    8d6a:	b.n	8e58 <usb_isr+0x20c>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    8d6c:	ldr	r3, [pc, #376]	; (8ee8 <usb_isr+0x29c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8d6e:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    8d70:	ldr	r0, [pc, #392]	; (8efc <usb_isr+0x2b0>)
    8d72:	ldrb	r3, [r3, #0]
    8d74:	strb	r3, [r0, #0]
    8d76:	b.n	8e4a <usb_isr+0x1fe>
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8d78:	ldr	r0, [pc, #384]	; (8efc <usb_isr+0x2b0>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    8d7a:	movs	r1, #2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8d7c:	strb	r7, [r0, #0]
		reply_buffer[1] = 0;
    8d7e:	strb	r7, [r0, #1]
    8d80:	b.n	8e4a <usb_isr+0x1fe>
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8d82:	uxth	r3, r3
    8d84:	and.w	r2, r3, #127	; 0x7f
		if (endpoint > 7) break;
    8d88:	cmp	r2, #7
    8d8a:	bhi.w	8ecc <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8d8e:	lsls	r2, r2, #2
    8d90:	ldr	r1, [pc, #364]	; (8f00 <usb_isr+0x2b4>)
    8d92:	ldr	r1, [r1, r2]
		reply_buffer[0] = 0;
    8d94:	ldr	r2, [pc, #356]	; (8efc <usb_isr+0x2b0>)
    8d96:	strb	r7, [r2, #0]
		reply_buffer[1] = 0;
    8d98:	strb	r7, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8d9a:	lsls	r7, r3, #24
    8d9c:	bpl.n	8da4 <usb_isr+0x158>
    8d9e:	tst.w	r1, #65536	; 0x10000
    8da2:	b.n	8da8 <usb_isr+0x15c>
    8da4:	tst.w	r1, #1
			reply_buffer[0] = 1;
    8da8:	it	ne
    8daa:	movne	r3, #1
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    8dac:	mov.w	r1, #2
    8db0:	ldr	r0, [pc, #328]	; (8efc <usb_isr+0x2b0>)
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
    8db2:	it	ne
    8db4:	strbne	r3, [r2, #0]
    8db6:	b.n	8e4a <usb_isr+0x1fe>
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8db8:	uxth	r2, r3
    8dba:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8dbe:	cmp	r3, #7
    8dc0:	bhi.w	8ecc <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		if (dir) {
    8dc4:	tst.w	r2, #128	; 0x80
    8dc8:	mov.w	r3, r3, lsl #2
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8dcc:	ldr	r2, [pc, #304]	; (8f00 <usb_isr+0x2b4>)
    8dce:	add	r2, r3
    8dd0:	ldr	r3, [r2, #0]
    8dd2:	ite	ne
    8dd4:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8dd8:	orreq.w	r3, r3, #1
    8ddc:	str	r3, [r2, #0]
		}
		endpoint0_receive(NULL, 0, 0);
    8dde:	movs	r2, #0
    8de0:	mov	r1, r2
    8de2:	mov	r0, r2
    8de4:	b.n	8ec6 <usb_isr+0x27a>
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8de6:	uxth	r2, r3
    8de8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8dec:	cmp	r3, #7
    8dee:	bhi.n	8ecc <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		if (dir) {
    8df0:	tst.w	r2, #128	; 0x80
    8df4:	mov.w	r3, r3, lsl #2
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8df8:	ldr	r2, [pc, #260]	; (8f00 <usb_isr+0x2b4>)
    8dfa:	add	r2, r3
    8dfc:	ldr	r3, [r2, #0]
    8dfe:	ite	ne
    8e00:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8e04:	biceq.w	r3, r3, #1
    8e08:	b.n	8ddc <usb_isr+0x190>
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    8e0a:	cmp.w	r4, #1792	; 0x700
    8e0e:	bne.n	8e94 <usb_isr+0x248>
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    8e10:	ldr	r3, [pc, #240]	; (8f04 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8e12:	mov	r2, sl
    8e14:	ldr	r1, [pc, #240]	; (8f08 <usb_isr+0x2bc>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    8e16:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    8e18:	ldr	r3, [pc, #240]	; (8f0c <usb_isr+0x2c0>)
    8e1a:	cmp	r0, #0
    8e1c:	it	ne
    8e1e:	movne	r1, r3
    8e20:	mov	r0, r7
    8e22:	bl	7fb0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    8e26:	movs	r3, #7
    8e28:	strb	r3, [r7, #1]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8e2a:	bic.w	r3, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8e2e:	add	r7, sl
	asm volatile("": : :"memory");
	asm("dsb");
    8e30:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8e34:	ldr	r2, [pc, #216]	; (8f10 <usb_isr+0x2c4>)
    8e36:	str	r3, [r2, #0]
		location += 32;
    8e38:	adds	r3, #32
	} while (location < end_addr);
    8e3a:	cmp	r7, r3
    8e3c:	bhi.n	8e36 <usb_isr+0x1ea>
	asm("dsb");
    8e3e:	dsb	sy
	asm("isb");
    8e42:	isb	sy
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8e46:	ldr	r0, [pc, #204]	; (8f14 <usb_isr+0x2c8>)
    8e48:	mov	r1, sl
    8e4a:	bl	8b54 <endpoint0_transmit.constprop.1>
    8e4e:	b.n	8ed4 <usb_isr+0x288>
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8e50:	ldrh	r7, [r2, #0]
    8e52:	cmp	r7, r4
    8e54:	beq.n	8e60 <usb_isr+0x214>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8e56:	adds	r2, #12
    8e58:	ldr	r1, [r2, #4]
    8e5a:	cmp	r1, #0
    8e5c:	bne.n	8e50 <usb_isr+0x204>
    8e5e:	b.n	8ecc <usb_isr+0x280>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8e60:	ldrh	r7, [r2, #2]
    8e62:	cmp	r7, r0
    8e64:	bne.n	8e56 <usb_isr+0x20a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    8e66:	lsrs	r0, r4, #8
    8e68:	ldr	r7, [pc, #168]	; (8f14 <usb_isr+0x2c8>)
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    8e6a:	mov.w	sl, r3, lsr #16
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    8e6e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    8e70:	ite	eq
    8e72:	ldrbeq	r2, [r1, #0]
				} else {
					datalen = list->length;
    8e74:	ldrhne	r2, [r2, #8]
    8e76:	cmp	sl, r2
    8e78:	it	cs
    8e7a:	movcs	sl, r2
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    8e7c:	cmp.w	r4, #512	; 0x200
    8e80:	bne.n	8e0a <usb_isr+0x1be>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    8e82:	ldr	r3, [pc, #128]	; (8f04 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8e84:	mov	r2, sl
    8e86:	ldr	r1, [pc, #132]	; (8f0c <usb_isr+0x2c0>)

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    8e88:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    8e8a:	ldr	r3, [pc, #124]	; (8f08 <usb_isr+0x2bc>)
    8e8c:	cmp	r0, #0
    8e8e:	it	ne
    8e90:	movne	r1, r3
    8e92:	b.n	8e96 <usb_isr+0x24a>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8e94:	mov	r2, sl
    8e96:	mov	r0, r7
    8e98:	bl	7fb0 <memcpy>
    8e9c:	b.n	8e2a <usb_isr+0x1de>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8e9e:	uxth	r3, r3
    8ea0:	cmp	r3, #0
    8ea2:	bne.n	8dde <usb_isr+0x192>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8ea4:	ldr	r3, [pc, #112]	; (8f18 <usb_isr+0x2cc>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8ea6:	ubfx	r4, r4, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8eaa:	ldr	r2, [r3, #0]
    8eac:	ldr	r3, [pc, #108]	; (8f1c <usb_isr+0x2d0>)
    8eae:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8eb0:	ldr	r3, [pc, #108]	; (8f20 <usb_isr+0x2d4>)
    8eb2:	strb	r4, [r3, #0]
    8eb4:	b.n	8dde <usb_isr+0x192>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    8eb6:	lsrs	r1, r3, #16
    8eb8:	cmp	r1, #7
    8eba:	bne.n	8ecc <usb_isr+0x280>
		endpoint0_setupdata.bothwords = setupdata;
    8ebc:	ldr	r2, [pc, #100]	; (8f24 <usb_isr+0x2d8>)
		endpoint0_receive(endpoint0_buffer, 7, 1);
    8ebe:	ldr	r0, [pc, #104]	; (8f28 <usb_isr+0x2dc>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    8ec0:	str	r4, [r2, #0]
    8ec2:	str	r3, [r2, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    8ec4:	movs	r2, #1
    8ec6:	bl	89f4 <endpoint0_receive>
    8eca:	b.n	8ed4 <usb_isr+0x288>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8ecc:	mov.w	r3, #65537	; 0x10001
    8ed0:	str.w	r3, [r5, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8ed4:	ldr.w	r3, [r5, #428]	; 0x1ac
    8ed8:	b.n	8c80 <usb_isr+0x34>
    8eda:	nop
    8edc:	.word	0x402e0000
    8ee0:	.word	0x20000000
    8ee4:	.word	0x20006624
    8ee8:	.word	0x20008b39
    8eec:	.word	0x00cc0002
    8ef0:	.word	0x000200c8
    8ef4:	.word	0x00c80002
    8ef8:	.word	0x20000cc4
    8efc:	.word	0x20008b21
    8f00:	.word	0x402e01c0
    8f04:	.word	0x20008b3a
    8f08:	.word	0x60001ea5
    8f0c:	.word	0x60001e5a
    8f10:	.word	0xe000ef70
    8f14:	.word	0x20203800
    8f18:	.word	0x200087fc
    8f1c:	.word	0x20008b88
    8f20:	.word	0x20008b38
    8f24:	.word	0x20002440
    8f28:	.word	0x20008b18
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8f2c:	ldr.w	r4, [r2, #444]	; 0x1bc
		if (completestatus) {
    8f30:	cmp	r4, #0
    8f32:	beq.w	8c5e <usb_isr+0x12>
			USB1_ENDPTCOMPLETE = completestatus;
    8f36:	str.w	r4, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8f3a:	ldr	r2, [pc, #268]	; (9048 <usb_isr+0x3fc>)
    8f3c:	ldr	r1, [r2, #0]
    8f3e:	tst	r4, r1
    8f40:	beq.n	8f78 <usb_isr+0x32c>
				endpoint0_notify_mask = 0;
    8f42:	str	r3, [r2, #0]

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    8f44:	ldr	r2, [pc, #260]	; (904c <usb_isr+0x400>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8f46:	ldrh	r1, [r2, #0]

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    8f48:	ldr	r3, [r2, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8f4a:	movw	r2, #8225	; 0x2021
    8f4e:	cmp	r1, r2
    8f50:	bne.n	8f78 <usb_isr+0x32c>
    8f52:	uxth	r3, r3
    8f54:	cbnz	r3, 8f78 <usb_isr+0x32c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8f56:	ldr	r2, [pc, #248]	; (9050 <usb_isr+0x404>)
    8f58:	ldr	r3, [pc, #248]	; (9054 <usb_isr+0x408>)
    8f5a:	ldr	r0, [r2, #0]
    8f5c:	ldrh	r1, [r2, #4]
    8f5e:	ldrb	r2, [r2, #6]
    8f60:	str	r0, [r3, #0]
    8f62:	strh	r1, [r3, #4]
    8f64:	strb	r2, [r3, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    8f66:	ldr	r3, [r3, #0]
    8f68:	cmp	r3, #134	; 0x86
    8f6a:	bne.n	8f78 <usb_isr+0x32c>
			usb_start_sof_interrupts(NUM_INTERFACE);
    8f6c:	movs	r0, #2
    8f6e:	bl	8bec <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8f72:	movs	r2, #80	; 0x50
    8f74:	ldr	r3, [pc, #224]	; (9058 <usb_isr+0x40c>)
    8f76:	strb	r2, [r3, #0]
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    8f78:	ldr	r3, [pc, #224]	; (905c <usb_isr+0x410>)
    8f7a:	ldr	r3, [r3, #0]
#if 1
			if (completestatus) {
    8f7c:	ands	r4, r3
    8f7e:	beq.w	8c5e <usb_isr+0x12>

				// transmit:
				uint32_t tx = completestatus >> 16;
    8f82:	lsrs	r7, r4, #16
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8f84:	ldr.w	r8, [pc, #216]	; 9060 <usb_isr+0x414>
					tx &= ~(1<<p);
    8f88:	mov.w	r9, #1
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8f8c:	cbz	r7, 8faa <usb_isr+0x35e>
					int p=__builtin_ctz(tx);
    8f8e:	rbit	r5, r7
    8f92:	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8f96:	add.w	r0, r8, r5, lsl #7
					tx &= ~(1<<p);
    8f9a:	lsl.w	r5, r9, r5

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8f9e:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    8fa0:	bic.w	r7, r7, r5

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8fa4:	bl	8b20 <run_callbacks>
    8fa8:	b.n	8f8c <usb_isr+0x340>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    8faa:	uxth	r4, r4
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    8fac:	ldr	r7, [pc, #176]	; (9060 <usb_isr+0x414>)
					rx &= ~(1<<p);
    8fae:	mov.w	r8, #1
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    8fb2:	cmp	r4, #0
    8fb4:	beq.w	8c5e <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    8fb8:	rbit	r5, r4
    8fbc:	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8fc0:	add.w	r0, r7, r5, lsl #7
					rx &= ~(1<<p);
    8fc4:	lsl.w	r5, r8, r5

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    8fc8:	bl	8b20 <run_callbacks>
					rx &= ~(1<<p);
    8fcc:	bic.w	r4, r4, r5
    8fd0:	b.n	8fb2 <usb_isr+0x366>
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8fd2:	ldr.w	r4, [r3, #432]	; 0x1b0
    8fd6:	ldr	r2, [pc, #140]	; (9064 <usb_isr+0x418>)
    8fd8:	cmp	r4, #0
    8fda:	bne.n	8fd2 <usb_isr+0x386>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8fdc:	mov.w	r3, #4294967295
    8fe0:	str.w	r3, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8fe4:	ldr.w	r3, [r2, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    8fe8:	bl	828c <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    8fec:	ldr	r3, [pc, #108]	; (905c <usb_isr+0x410>)
    8fee:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    8ff0:	lsls	r4, r6, #7
    8ff2:	bpl.n	8ffc <usb_isr+0x3b0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8ff4:	ldr	r3, [pc, #112]	; (9068 <usb_isr+0x41c>)
    8ff6:	ldr	r3, [r3, #0]
    8ff8:	cbz	r3, 8ffc <usb_isr+0x3b0>
    8ffa:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8ffc:	lsls	r0, r6, #6
    8ffe:	bpl.n	9008 <usb_isr+0x3bc>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    9000:	ldr	r3, [pc, #104]	; (906c <usb_isr+0x420>)
    9002:	ldr	r3, [r3, #0]
    9004:	cbz	r3, 9008 <usb_isr+0x3bc>
    9006:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    9008:	lsls	r1, r6, #29
    900a:	bpl.n	901e <usb_isr+0x3d2>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    900c:	ldr	r3, [pc, #84]	; (9064 <usb_isr+0x418>)
    900e:	ldr	r2, [pc, #96]	; (9070 <usb_isr+0x424>)
    9010:	ldr.w	r3, [r3, #388]	; 0x184
    9014:	ands.w	r3, r3, #512	; 0x200
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    9018:	it	ne
    901a:	movne	r3, #1
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    901c:	strb	r3, [r2, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    901e:	ldr	r3, [pc, #68]	; (9064 <usb_isr+0x418>)
    9020:	ldr.w	r3, [r3, #328]	; 0x148
    9024:	lsls	r2, r3, #24
    9026:	bpl.n	9044 <usb_isr+0x3f8>
    9028:	lsls	r3, r6, #24
    902a:	bpl.n	9044 <usb_isr+0x3f8>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    902c:	ldr	r2, [pc, #40]	; (9058 <usb_isr+0x40c>)
    902e:	ldrb	r3, [r2, #0]
    9030:	cbz	r3, 9044 <usb_isr+0x3f8>
			if (--usb_reboot_timer == 0) {
    9032:	subs	r3, #1
    9034:	uxtb	r3, r3
    9036:	strb	r3, [r2, #0]
    9038:	cbnz	r3, 9044 <usb_isr+0x3f8>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    903a:	movs	r0, #2
    903c:	bl	8c20 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9040:	bl	10c98 <___reboot_Teensyduino__veneer>
    9044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9048:	.word	0x20006624
    904c:	.word	0x20002440
    9050:	.word	0x20008b18
    9054:	.word	0x20008b80
    9058:	.word	0x20008b3b
    905c:	.word	0x20006628
    9060:	.word	0x20000000
    9064:	.word	0x402e0000
    9068:	.word	0x20008800
    906c:	.word	0x20008804
    9070:	.word	0x20008b3a

00009074 <usb_config_rx>:
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9078:	cmp	r2, #0
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    907a:	mov	r7, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    907c:	sub.w	r3, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9080:	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9082:	ite	ne
    9084:	movne	r6, #0
    9086:	moveq.w	r6, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    908a:	cmp	r3, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    908c:	mov	sl, r1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    908e:	bhi.n	90c0 <usb_config_rx+0x4c>
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9090:	mov.w	r8, r0, lsl #7
    9094:	ldr.w	r9, [pc, #48]	; 90c8 <usb_config_rx+0x54>
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9098:	movs	r2, #64	; 0x40
    909a:	movs	r1, #0

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    909c:	add.w	r5, r9, r8
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    90a0:	orr.w	r6, r6, sl, lsl #16
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    90a4:	mov	r0, r5
    90a6:	bl	7f6c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    90aa:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    90ac:	str.w	r6, [r9, r8]
	qh->next = 1; // Terminate bit = 1
    90b0:	str	r0, [r5, #8]
	qh->callback_function = callback;
    90b2:	str	r7, [r5, #56]	; 0x38
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    90b4:	cbz	r7, 90c0 <usb_config_rx+0x4c>
    90b6:	ldr	r2, [pc, #12]	; (90c4 <usb_config_rx+0x50>)
    90b8:	lsls	r0, r4
    90ba:	ldr	r3, [r2, #0]
    90bc:	orrs	r0, r3
    90be:	str	r0, [r2, #0]
    90c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    90c4:	.word	0x20006628
    90c8:	.word	0x20000000

000090cc <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    90cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    90d0:	cmp	r2, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    90d2:	mov	r8, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    90d4:	sub.w	r3, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    90d8:	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    90da:	ite	ne
    90dc:	movne	r7, #0
    90de:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    90e2:	cmp	r3, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    90e4:	mov	sl, r1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    90e6:	bhi.n	9122 <usb_config_tx+0x56>
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    90e8:	lsls	r5, r0, #7
    90ea:	ldr.w	r9, [pc, #64]	; 912c <usb_config_tx+0x60>
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    90ee:	movs	r2, #64	; 0x40
    90f0:	movs	r1, #0

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    90f2:	adds	r5, #64	; 0x40
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    90f4:	orr.w	r7, r7, sl, lsl #16

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    90f8:	add.w	r6, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    90fc:	mov	r0, r6
    90fe:	bl	7f6c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9102:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9104:	str.w	r7, [r9, r5]
	qh->next = 1; // Terminate bit = 1
    9108:	str	r2, [r6, #8]
	qh->callback_function = callback;
    910a:	str.w	r8, [r6, #56]	; 0x38
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    910e:	cmp.w	r8, #0
    9112:	beq.n	9122 <usb_config_tx+0x56>
    9114:	ldr	r3, [pc, #16]	; (9128 <usb_config_tx+0x5c>)
    9116:	adds	r4, #16
    9118:	lsl.w	r4, r2, r4
    911c:	ldr	r2, [r3, #0]
    911e:	orrs	r4, r2
    9120:	str	r4, [r3, #0]
    9122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9126:	nop
    9128:	.word	0x20006628
    912c:	.word	0x20000000

00009130 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9130:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9132:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9134:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9136:	orr.w	r2, r2, #128	; 0x80
    913a:	str	r2, [r0, #4]
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    913c:	add.w	r2, r1, #4096	; 0x1000
    9140:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9142:	add.w	r2, r1, #8192	; 0x2000
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    9146:	push	{r4, lr}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
    9148:	str	r2, [r0, #16]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    914a:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
    914c:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9150:	add.w	r1, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9154:	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
    9156:	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9158:	str	r1, [r0, #24]
	transfer->callback_param = param;
    915a:	pop	{r4, pc}

0000915c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    915c:	subs	r3, r0, #2
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    915e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9160:	cmp	r3, #2
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9162:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9164:	bhi.n	917e <usb_transmit+0x22>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9166:	ldr	r3, [pc, #28]	; (9184 <usb_transmit+0x28>)
    9168:	add.w	r4, r0, #16
    916c:	movs	r1, #1
    916e:	add.w	r0, r3, r0, lsl #7
    9172:	lsls	r1, r4
}
    9174:	ldr.w	r4, [sp], #4
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9178:	adds	r0, #64	; 0x40
    917a:	b.w	8aa0 <schedule_transfer>
}
    917e:	ldr.w	r4, [sp], #4
    9182:	bx	lr
    9184:	.word	0x20000000

00009188 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9188:	subs	r3, r0, #2
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    918a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    918c:	cmp	r3, #2
    918e:	bhi.n	919e <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9190:	movs	r1, #1
    9192:	ldr	r3, [pc, #12]	; (91a0 <usb_receive+0x18>)
    9194:	lsls	r1, r0
    9196:	add.w	r0, r3, r0, lsl #7
    919a:	b.w	8aa0 <schedule_transfer>
    919e:	bx	lr
    91a0:	.word	0x20000000

000091a4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    91a4:	ldr	r0, [r0, #4]
#endif
}
    91a6:	bx	lr

000091a8 <micros>:
	}
	// TODO...
}

uint32_t micros(void)
{
    91a8:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    91aa:	ldr	r2, [pc, #68]	; (91f0 <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    91ac:	movs	r3, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    91ae:	ldr	r6, [pc, #68]	; (91f4 <micros+0x4c>)
		scc = systick_cycle_count;
    91b0:	ldr	r5, [pc, #68]	; (91f8 <micros+0x50>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    91b2:	ldrex	r1, [r2]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    91b6:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    91b8:	ldr	r4, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    91ba:	strex	r1, r3, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    91be:	cmp	r1, #0
    91c0:	bne.n	91b2 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    91c2:	ldr	r3, [pc, #56]	; (91fc <micros+0x54>)
    91c4:	ldr	r3, [r3, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91c6:	ldr	r2, [pc, #56]	; (9200 <micros+0x58>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    91c8:	subs	r3, r3, r4
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91ca:	ldr	r4, [r2, #0]
    91cc:	umull	r4, r5, r3, r4
	if (frac > 1000) frac = 1000;
    91d0:	mov.w	r4, #1000	; 0x3e8
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    91d4:	mov.w	r3, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91d8:	mov	r2, r5
	if (frac > 1000) frac = 1000;
    91da:	movs	r5, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91dc:	cmp	r5, r1
    91de:	it	eq
    91e0:	cmpeq	r4, r2
    91e2:	it	cc
    91e4:	movcc.w	r2, #1000	; 0x3e8
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    91e8:	mla	r0, r3, r0, r2
    91ec:	pop	{r4, r5, r6, pc}
    91ee:	nop
    91f0:	.word	0x20008b8c
    91f4:	.word	0x200087fc
    91f8:	.word	0x200087f8
    91fc:	.word	0xe0001004
    9200:	.word	0x2000667c

00009204 <delay>:
{

}*/

void delay(uint32_t msec)
{
    9204:	push	{r3, r4, r5, lr}
	uint32_t start;

	if (msec == 0) return;
    9206:	mov	r4, r0
    9208:	cbz	r0, 922c <delay+0x28>
	start = micros();
    920a:	bl	91a8 <micros>
    920e:	mov	r5, r0
	while (1) {
		while ((micros() - start) >= 1000) {
    9210:	bl	91a8 <micros>
    9214:	subs	r0, r0, r5
    9216:	cmp.w	r0, #1000	; 0x3e8
    921a:	bcc.n	9226 <delay+0x22>
			if (--msec == 0) return;
    921c:	subs	r4, #1
    921e:	beq.n	922c <delay+0x28>
			start += 1000;
    9220:	add.w	r5, r5, #1000	; 0x3e8
    9224:	b.n	9210 <delay+0xc>
		}
		yield();
    9226:	bl	9724 <yield>
	}
    922a:	b.n	9210 <delay+0xc>
    922c:	pop	{r3, r4, r5, pc}
	...

00009230 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    9230:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    9232:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    9236:	ldr	r4, [pc, #260]	; (933c <unused_interrupt_vector+0x10c>)
    9238:	str	r3, [r4, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    923a:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    923e:	ldr	r2, [pc, #256]	; (9340 <unused_interrupt_vector+0x110>)
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9240:	ldr	r6, [pc, #256]	; (9344 <unused_interrupt_vector+0x114>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    9242:	ldr	r2, [r2, #0]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9244:	ldr	r5, [pc, #256]	; (9348 <unused_interrupt_vector+0x118>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    9246:	str	r2, [r4, #8]
	info->hfsr = SCB_HFSR;
    9248:	ldr	r2, [pc, #256]	; (934c <unused_interrupt_vector+0x11c>)
    924a:	ldr	r2, [r2, #0]
    924c:	str	r2, [r4, #12]
	info->mmfar = SCB_MMFAR;
    924e:	ldr	r2, [pc, #256]	; (9350 <unused_interrupt_vector+0x120>)
    9250:	ldr	r2, [r2, #0]
    9252:	str	r2, [r4, #16]
	info->bfar = SCB_BFAR;
    9254:	ldr	r2, [pc, #252]	; (9354 <unused_interrupt_vector+0x124>)
    9256:	ldr	r2, [r2, #0]
    9258:	str	r2, [r4, #20]
	info->ret = stack[6];
    925a:	ldr	r2, [r3, #24]
    925c:	str	r2, [r4, #24]
	info->xpsr = stack[7];
    925e:	ldr	r3, [r3, #28]
    9260:	str	r3, [r4, #28]
	info->temp = tempmonGetTemp();
    9262:	bl	94f8 <tempmonGetTemp>
    9266:	vstr	s0, [r4, #32]
	info->time = rtc_get();
    926a:	bl	93c4 <rtc_get>
	info->len = sizeof(*info) / 4;
    926e:	movs	r3, #11
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    9270:	str	r0, [r4, #36]	; 0x24
    9272:	mov	r0, r4
	info->len = sizeof(*info) / 4;
    9274:	str	r3, [r4, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    9276:	mov.w	r3, #4294967295
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    927a:	ldr.w	r2, [r4], #4
    927e:	eors	r3, r2
    9280:	movs	r2, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9282:	and.w	r1, r3, #1
    9286:	subs	r2, #1
    9288:	mul.w	r1, r6, r1
    928c:	eor.w	r3, r1, r3, lsr #1
    9290:	bne.n	9282 <unused_interrupt_vector+0x52>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9292:	cmp	r4, r5
    9294:	bne.n	927a <unused_interrupt_vector+0x4a>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    9296:	str	r3, [r0, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9298:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    929c:	ldr	r3, [pc, #184]	; (9358 <unused_interrupt_vector+0x128>)
    929e:	ldr	r2, [pc, #188]	; (935c <unused_interrupt_vector+0x12c>)
    92a0:	str	r0, [r3, #0]
    92a2:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    92a4:	dsb	sy
	asm("isb");
    92a8:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    92ac:	ldr	r2, [pc, #176]	; (9360 <unused_interrupt_vector+0x130>)
	PIT_MCR = PIT_MCR_MDIS;
    92ae:	ldr	r5, [pc, #180]	; (9364 <unused_interrupt_vector+0x134>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    92b0:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    92b2:	ldr	r0, [pc, #180]	; (9368 <unused_interrupt_vector+0x138>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    92b4:	orr.w	r3, r3, #12288	; 0x3000
    92b8:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    92ba:	movs	r3, #2
    92bc:	str	r3, [r5, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    92be:	ldr	r3, [r2, #28]
    92c0:	bic.w	r3, r3, #127	; 0x7f
    92c4:	orr.w	r3, r3, #64	; 0x40
    92c8:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    92ca:	ldr	r3, [pc, #160]	; (936c <unused_interrupt_vector+0x13c>)
    92cc:	ldr	r3, [r3, #0]
    92ce:	cmp	r3, r0
    92d0:	bls.n	92d6 <unused_interrupt_vector+0xa6>
    92d2:	bl	87a0 <set_arm_clock>
	PIT_MCR = 0;
    92d6:	movs	r4, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    92d8:	ldr	r3, [pc, #148]	; (9370 <unused_interrupt_vector+0x140>)
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    92da:	movs	r2, #1
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    92dc:	ldr	r1, [pc, #148]	; (9374 <unused_interrupt_vector+0x144>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    92de:	str	r4, [r5, #0]
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    92e0:	ldr	r6, [pc, #128]	; (9364 <unused_interrupt_vector+0x134>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    92e2:	str.w	r4, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    92e6:	str.w	r3, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    92ea:	mov.w	r3, #4294967295
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    92ee:	str.w	r2, [r5, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    92f2:	mov	r5, r2
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    92f4:	str	r3, [r1, #0]
	NVIC_ICER1 = 0xFFFFFFFF;
    92f6:	str	r3, [r1, #4]
	NVIC_ICER2 = 0xFFFFFFFF;
    92f8:	str	r3, [r1, #8]
	NVIC_ICER3 = 0xFFFFFFFF;
    92fa:	str	r3, [r1, #12]
	NVIC_ICER4 = 0xFFFFFFFF;
    92fc:	str	r3, [r1, #16]
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    92fe:	ldr.w	r3, [r6, #268]	; 0x10c
    9302:	cbz	r3, 930e <unused_interrupt_vector+0xde>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    9304:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    9306:	str.w	r5, [r6, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    930a:	cmp	r4, #79	; 0x4f
    930c:	bhi.n	9314 <unused_interrupt_vector+0xe4>
		}
		usb_isr();
    930e:	bl	8c4c <usb_isr>
		// TODO: should other data flush / cleanup tasks be done here?
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
    9312:	b.n	92fe <unused_interrupt_vector+0xce>
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    9314:	movs	r2, #2
    9316:	ldr	r3, [pc, #96]	; (9378 <unused_interrupt_vector+0x148>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9318:	ldr	r1, [pc, #96]	; (937c <unused_interrupt_vector+0x14c>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    931a:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    931e:	mov.w	r2, #2147483648	; 0x80000000
    9322:	ldr	r3, [pc, #92]	; (9380 <unused_interrupt_vector+0x150>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9324:	ldr	r0, [pc, #92]	; (9384 <unused_interrupt_vector+0x154>)
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9326:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9328:	ldr	r2, [pc, #56]	; (9364 <unused_interrupt_vector+0x134>)
    932a:	ldr.w	r3, [r2, #268]	; 0x10c
    932e:	cbnz	r3, 9334 <unused_interrupt_vector+0x104>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9330:	str	r0, [r1, #48]	; 0x30
    9332:	b.n	932a <unused_interrupt_vector+0xfa>
	SCB_AIRCR = 0x05FA0004;
    9334:	ldr	r2, [pc, #80]	; (9388 <unused_interrupt_vector+0x158>)
    9336:	ldr	r3, [pc, #84]	; (938c <unused_interrupt_vector+0x15c>)
    9338:	str	r2, [r3, #0]
    933a:	b.n	933a <unused_interrupt_vector+0x10a>
    933c:	.word	0x2027ff80
    9340:	.word	0xe000ed28
    9344:	.word	0xedb88320
    9348:	.word	0x2027ffa8
    934c:	.word	0xe000ed2c
    9350:	.word	0xe000ed34
    9354:	.word	0xe000ed38
    9358:	.word	0xe000ef70
    935c:	.word	0x2027ffa0
    9360:	.word	0x400fc000
    9364:	.word	0x40084000
    9368:	.word	0x0bcd3d80
    936c:	.word	0x200017c0
    9370:	.word	0x00249f00
    9374:	.word	0xe000e180
    9378:	.word	0x402e0000
    937c:	.word	0x400f8000
    9380:	.word	0x400d9000
    9384:	.word	0x0bad00f1
    9388:	.word	0x05fa0004
    938c:	.word	0xe000ed0c

00009390 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9390:	ldr	r2, [pc, #36]	; (93b8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9392:	push	{r3, lr}
        char *prev = __brkval;
    9394:	ldr	r3, [r2, #0]
        if (incr != 0) {
    9396:	cbz	r0, 93b4 <_sbrk+0x24>
                if (prev + incr > (char *)&_heap_end) {
    9398:	add	r0, r3
    939a:	ldr	r1, [pc, #32]	; (93bc <_sbrk+0x2c>)
    939c:	cmp	r0, r1
    939e:	bls.n	93ae <_sbrk+0x1e>
                        errno = ENOMEM;
    93a0:	bl	9e44 <__errno>
    93a4:	movs	r3, #12
    93a6:	str	r3, [r0, #0]
                        return (void *)-1;
    93a8:	mov.w	r0, #4294967295
    93ac:	pop	{r3, pc}
                }
                __brkval = prev + incr;
    93ae:	str	r0, [r2, #0]
        }
        return prev;
    93b0:	mov	r0, r3
    93b2:	pop	{r3, pc}
    93b4:	mov	r0, r3
}
    93b6:	pop	{r3, pc}
    93b8:	.word	0x2000182c
    93bc:	.word	0x20280000

000093c0 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    93c0:	wfi
    93c2:	b.n	93c0 <__cxa_pure_virtual>

000093c4 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    93c4:	ldr	r3, [pc, #32]	; (93e8 <rtc_get+0x24>)
    93c6:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    93c8:	ldr	r2, [r3, #40]	; 0x28
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    93ca:	push	{r4, lr}
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    93cc:	ldr	r1, [r3, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    93ce:	ldr	r4, [r3, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    93d0:	cmp	r2, r4
    93d2:	beq.n	93da <rtc_get+0x16>
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    93d4:	mov	r2, r4
    93d6:	mov	r0, r1
    93d8:	b.n	93cc <rtc_get+0x8>
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
    93da:	cmp	r0, r1
    93dc:	bne.n	93d4 <rtc_get+0x10>
			return (hi2 << 17) | (lo2 >> 15);
    93de:	lsrs	r2, r2, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    93e0:	orr.w	r0, r2, r0, lsl #17
    93e4:	pop	{r4, pc}
    93e6:	nop
    93e8:	.word	0x400d4000

000093ec <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    93ec:	ldr	r3, [pc, #72]	; (9438 <rtc_set+0x4c>)
    93ee:	ldr	r2, [r3, #8]
    93f0:	bic.w	r2, r2, #65537	; 0x10001
    93f4:	str	r2, [r3, #8]
    93f6:	mov	r2, r3
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    93f8:	ldr	r1, [r2, #8]
    93fa:	ldr	r3, [pc, #60]	; (9438 <rtc_set+0x4c>)
    93fc:	lsls	r1, r1, #31
    93fe:	bmi.n	93f8 <rtc_set+0xc>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    9400:	ldr	r2, [r3, #56]	; 0x38
    9402:	bic.w	r2, r2, #1
    9406:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    9408:	mov	r2, r3
    940a:	ldr	r3, [r2, #56]	; 0x38
    940c:	tst.w	r3, #1
    9410:	ldr	r3, [pc, #36]	; (9438 <rtc_set+0x4c>)
    9412:	bne.n	940a <rtc_set+0x1e>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    9414:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    9416:	lsrs	r0, r0, #17
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    9418:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    941a:	str	r0, [r3, #80]	; 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    941c:	ldr	r2, [r3, #56]	; 0x38
    941e:	orr.w	r2, r2, #1
    9422:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    9424:	ldr	r1, [r3, #56]	; 0x38
    9426:	ldr	r2, [pc, #16]	; (9438 <rtc_set+0x4c>)
    9428:	lsls	r1, r1, #31
    942a:	bpl.n	9424 <rtc_set+0x38>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    942c:	ldr	r3, [r2, #8]
    942e:	orr.w	r3, r3, #65537	; 0x10001
    9432:	str	r3, [r2, #8]
    9434:	bx	lr
    9436:	nop
    9438:	.word	0x400d4000

0000943c <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    943c:	ldr	r3, [r0, #0]
    943e:	cbz	r3, 9456 <smalloc_verify_pool+0x1a>
    9440:	ldr	r0, [r0, #4]
    9442:	cbz	r0, 9458 <smalloc_verify_pool+0x1c>
    9444:	movs	r2, #12
    9446:	udiv	r3, r0, r2
    944a:	mls	r0, r2, r3, r0
    944e:	clz	r0, r0
    9452:	lsrs	r0, r0, #5
    9454:	bx	lr
    9456:	mov	r0, r3
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}
    9458:	bx	lr

0000945a <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    945a:	push	{r4, lr}
    945c:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    945e:	bl	943c <smalloc_verify_pool>
    9462:	mov	r4, r0
    9464:	cbz	r0, 946a <sm_align_pool+0x10>
    9466:	movs	r4, #1
    9468:	b.n	948a <sm_align_pool+0x30>

	x = spool->pool_size % HEADER_SZ;
    946a:	ldr	r3, [r1, #4]
    946c:	movs	r0, #12
    946e:	udiv	r2, r3, r0
    9472:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    9476:	cbz	r2, 947c <sm_align_pool+0x22>
    9478:	subs	r3, r3, r2
    947a:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    947c:	ldr	r3, [r1, #4]
    947e:	cmp	r3, #240	; 0xf0
    9480:	bhi.n	9466 <sm_align_pool+0xc>
		errno = ENOSPC;
    9482:	bl	9e44 <__errno>
    9486:	movs	r3, #28
    9488:	str	r3, [r0, #0]
		return 0;
	}

	return 1;
}
    948a:	mov	r0, r4
    948c:	pop	{r4, pc}

0000948e <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    948e:	push	{r4, r5, r6, lr}
    9490:	mov	r6, r3
	if (!spool) {
    9492:	mov	r4, r0
    9494:	cbnz	r0, 94a2 <sm_set_pool+0x14>
		errno = EINVAL;
    9496:	bl	9e44 <__errno>
    949a:	movs	r3, #22
		return 0;
    949c:	mov	r5, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    949e:	str	r3, [r0, #0]
		return 0;
    94a0:	b.n	94f0 <sm_set_pool+0x62>
	}

	if (!new_pool || !new_pool_size) {
    94a2:	cbz	r1, 94a6 <sm_set_pool+0x18>
    94a4:	cbnz	r2, 94d0 <sm_set_pool+0x42>
		if (smalloc_verify_pool(spool)) {
    94a6:	mov	r0, r4
    94a8:	bl	943c <smalloc_verify_pool>
    94ac:	mov	r5, r0
    94ae:	cbz	r0, 94c6 <sm_set_pool+0x38>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    94b0:	ldr	r3, [r4, #8]
    94b2:	cbz	r3, 94be <sm_set_pool+0x30>
    94b4:	ldr	r2, [r4, #4]
    94b6:	movs	r1, #0
    94b8:	ldr	r0, [r4, #0]
    94ba:	bl	7f6c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    94be:	movs	r2, #16
    94c0:	movs	r1, #0
    94c2:	mov	r0, r4
    94c4:	b.n	94ea <sm_set_pool+0x5c>
			return 1;
		}

		errno = EINVAL;
    94c6:	bl	9e44 <__errno>
    94ca:	movs	r3, #22
    94cc:	str	r3, [r0, #0]
		return 0;
    94ce:	b.n	94f0 <sm_set_pool+0x62>
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    94d0:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    94d2:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    94d6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    94d8:	bl	945a <sm_align_pool>
    94dc:	mov	r5, r0
    94de:	cbz	r0, 94f0 <sm_set_pool+0x62>

	if (do_zero) {
    94e0:	cbz	r6, 94ee <sm_set_pool+0x60>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    94e2:	ldr	r2, [r4, #4]
    94e4:	movs	r1, #0
    94e6:	ldr	r0, [r4, #0]
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    94e8:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    94ea:	bl	7f6c <memset>
	}

	return 1;
    94ee:	movs	r5, #1
}
    94f0:	mov	r0, r5
    94f2:	pop	{r4, r5, r6, pc}

000094f4 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    94f4:	b.w	9230 <unused_interrupt_vector>

000094f8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    94f8:	ldr	r2, [pc, #72]	; (9544 <tempmonGetTemp+0x4c>)
    94fa:	ldr	r3, [r2, #0]
    94fc:	lsls	r3, r3, #29
    94fe:	bpl.n	94fa <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9500:	ldr	r3, [pc, #64]	; (9544 <tempmonGetTemp+0x4c>)
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9502:	ldr	r2, [pc, #68]	; (9548 <tempmonGetTemp+0x50>)
    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9504:	ldr	r3, [r3, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
    9506:	vldr	s0, [r2]
    950a:	ubfx	r3, r3, #8, #12
    950e:	vcvt.f32.u32	s0, s0
    9512:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9516:	ldr	r3, [pc, #52]	; (954c <tempmonGetTemp+0x54>)

    return tmeas;
    9518:	vcvt.f32.s32	s14, s15
    951c:	vldr	s15, [r3]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9520:	ldr	r3, [pc, #44]	; (9550 <tempmonGetTemp+0x58>)

    return tmeas;
    9522:	vcvt.f32.u32	s15, s15
    9526:	vsub.f32	s15, s14, s15
    952a:	vldr	s14, [r3]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    952e:	ldr	r3, [pc, #36]	; (9554 <tempmonGetTemp+0x5c>)

    return tmeas;
    9530:	vmul.f32	s15, s15, s14
    9534:	vldr	s13, [r3]
    9538:	vdiv.f32	s14, s15, s13
}
    953c:	vsub.f32	s0, s0, s14
    9540:	bx	lr
    9542:	nop
    9544:	.word	0x400d8180
    9548:	.word	0x20006670
    954c:	.word	0x2000666c
    9550:	.word	0x20006674
    9554:	.word	0x20006678

00009558 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9558:	cmp	r0, #54	; 0x36
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    955a:	push	{r4, r5, lr}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    955c:	bhi.n	95ae <pinMode+0x56>
	p = digital_pin_to_info_PGM + pin;
    955e:	ldr	r5, [pc, #80]	; (95b0 <pinMode+0x58>)
    9560:	lsls	r0, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9562:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9564:	add.w	r4, r5, r0
    9568:	ldr	r2, [r4, #12]
    956a:	ldr	r3, [r4, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    956c:	beq.n	9572 <pinMode+0x1a>
    956e:	cmp	r1, #4
    9570:	bne.n	9586 <pinMode+0x2e>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9572:	ldr	r0, [r5, r0]
		if (mode == OUTPUT) {
    9574:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9576:	ldr	r5, [r0, #4]
    9578:	orr.w	r2, r2, r5
    957c:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
    957e:	beq.n	9592 <pinMode+0x3a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9580:	movw	r2, #2104	; 0x838
    9584:	b.n	95a6 <pinMode+0x4e>
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9586:	ldr	r5, [r5, r0]
    9588:	ldr	r0, [r5, #4]
    958a:	bic.w	r2, r0, r2
    958e:	str	r2, [r5, #4]
		if (mode == INPUT) {
    9590:	cbnz	r1, 9596 <pinMode+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9592:	movs	r2, #56	; 0x38
    9594:	b.n	95a6 <pinMode+0x4e>
		} else if (mode == INPUT_PULLUP) {
    9596:	cmp	r1, #2
    9598:	bne.n	959e <pinMode+0x46>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    959a:	ldr	r2, [pc, #24]	; (95b4 <pinMode+0x5c>)
    959c:	b.n	95a6 <pinMode+0x4e>
		} else if (mode == INPUT_PULLDOWN) {
    959e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    95a0:	ite	eq
    95a2:	ldreq	r2, [pc, #20]	; (95b8 <pinMode+0x60>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    95a4:	ldrne	r2, [pc, #20]	; (95bc <pinMode+0x64>)
    95a6:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    95a8:	movs	r2, #21
    95aa:	ldr	r3, [r4, #4]
    95ac:	str	r2, [r3, #0]
    95ae:	pop	{r4, r5, pc}
    95b0:	.word	0x200008a4
    95b4:	.word	0x0001f038
    95b8:	.word	0x00013038
    95bc:	.word	0x00010038

000095c0 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95c0:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    95c4:	movs	r2, #0

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95c6:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    95ca:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    95cc:	mov	r1, r2
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    95ce:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    95d2:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    95d6:	ldrh.w	r3, [r0, #392]	; 0x188
    95da:	uxth	r3, r3
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
    95dc:	push	{r4, r5, r6, r7, lr}
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    95de:	orr.w	r3, r3, #240	; 0xf0
    95e2:	movs	r7, #96	; 0x60
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    95e4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    95e8:	mov.w	r5, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    95ec:	movw	r4, #33464	; 0x82b8
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    95f0:	strh.w	r3, [r0, #392]	; 0x188
    95f4:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    95f8:	adds	r2, #1
    95fa:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    95fc:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    95fe:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    9600:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9602:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9604:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    9606:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9608:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    960a:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    960c:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    960e:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    9610:	strh	r1, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9612:	bne.n	95f4 <flexpwm_init+0x34>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9614:	ldrh.w	r3, [r0, #392]	; 0x188
    9618:	uxth	r3, r3
    961a:	orr.w	r3, r3, #15
    961e:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9622:	ldrh.w	r3, [r0, #392]	; 0x188
    9626:	uxth	r3, r3
    9628:	orr.w	r3, r3, #3840	; 0xf00
    962c:	strh.w	r3, [r0, #392]	; 0x188
    9630:	pop	{r4, r5, r6, r7, pc}

00009632 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9632:	movs	r2, #0
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
{
    9634:	push	{r4, r5, r6, r7, lr}
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9636:	mov	r1, r2
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9638:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    963c:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9640:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9644:	movw	r5, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9648:	lsls	r4, r2, #5

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    964a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    964c:	adds	r3, r0, r4

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    964e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9650:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9652:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9654:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9658:	strh	r7, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    965a:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    965c:	strh	r1, [r0, r4]
		p->CH[i].CMPLD1 = 0;
    965e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9660:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9662:	bne.n	9648 <quadtimer_init+0x16>
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    9664:	pop	{r4, r5, r6, r7, pc}
	...

00009668 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9668:	ldr	r2, [pc, #72]	; (96b4 <pwm_init+0x4c>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    966a:	ldr	r0, [pc, #76]	; (96b8 <pwm_init+0x50>)
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    966c:	push	{r3, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    966e:	ldr	r3, [r2, #120]	; 0x78
    9670:	orr.w	r3, r3, #16711680	; 0xff0000
    9674:	str	r3, [r2, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9676:	ldr.w	r3, [r2, #128]	; 0x80
    967a:	orr.w	r3, r3, #4227858432	; 0xfc000000
    967e:	orr.w	r3, r3, #196608	; 0x30000
    9682:	str.w	r3, [r2, #128]	; 0x80
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9686:	bl	95c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    968a:	ldr	r0, [pc, #48]	; (96bc <pwm_init+0x54>)
    968c:	bl	95c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    9690:	ldr	r0, [pc, #44]	; (96c0 <pwm_init+0x58>)
    9692:	bl	95c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    9696:	ldr	r0, [pc, #44]	; (96c4 <pwm_init+0x5c>)
    9698:	bl	95c0 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    969c:	ldr	r0, [pc, #40]	; (96c8 <pwm_init+0x60>)
    969e:	bl	9632 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    96a2:	ldr	r0, [pc, #40]	; (96cc <pwm_init+0x64>)
    96a4:	bl	9632 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    96a8:	ldr	r0, [pc, #36]	; (96d0 <pwm_init+0x68>)
}
    96aa:	ldmia.w	sp!, {r3, lr}
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
    96ae:	b.w	9632 <quadtimer_init>
    96b2:	nop
    96b4:	.word	0x400fc000
    96b8:	.word	0x403dc000
    96bc:	.word	0x403e0000
    96c0:	.word	0x403e4000
    96c4:	.word	0x403e8000
    96c8:	.word	0x401dc000
    96cc:	.word	0x401e0000
    96d0:	.word	0x401e4000

000096d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    96d4:	push	{r0, r1, r2, r3, r4, lr}
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    96d6:	ldr	r3, [pc, #60]	; (9714 <usb_init_serialnumber+0x40>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    96d8:	add	r4, sp, #4
    96da:	movs	r2, #10
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    96dc:	ldr.w	r0, [r3, #544]	; 0x220
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    96e0:	mov	r1, r4
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    96e2:	ldr	r3, [pc, #52]	; (9718 <usb_init_serialnumber+0x44>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    96e4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    96e8:	cmp	r0, r3
    96ea:	itt	ls
    96ec:	movls	r3, #10
    96ee:	mulls	r0, r3
	ultoa(num, buf, 10);
    96f0:	bl	9aba <ultoa>
    96f4:	ldr	r2, [pc, #36]	; (971c <usb_init_serialnumber+0x48>)
	for (i=0; i<10; i++) {
    96f6:	movs	r3, #0
		char c = buf[i];
    96f8:	ldrb	r1, [r4, r3]
		if (!c) break;
    96fa:	cbz	r1, 9706 <usb_init_serialnumber+0x32>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    96fc:	adds	r3, #1
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    96fe:	strh.w	r1, [r2], #2

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9702:	cmp	r3, #10
    9704:	bne.n	96f8 <usb_init_serialnumber+0x24>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9706:	adds	r3, #1
    9708:	ldr	r2, [pc, #20]	; (9720 <usb_init_serialnumber+0x4c>)
    970a:	lsls	r3, r3, #1
    970c:	strb	r3, [r2, #0]
}
    970e:	add	sp, #16
    9710:	pop	{r4, pc}
    9712:	nop
    9714:	.word	0x401f4400
    9718:	.word	0x0098967f
    971c:	.word	0x20001dd8
    9720:	.word	0x20001dd6

00009724 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9724:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9728:	ldr	r4, [pc, #176]	; (97dc <yield+0xb8>)
    972a:	ldrb	r3, [r4, #0]
    972c:	cmp	r3, #0
    972e:	beq.n	97d8 <yield+0xb4>
	if (running) return; // TODO: does this need to be atomic?
    9730:	ldr	r5, [pc, #172]	; (97e0 <yield+0xbc>)
    9732:	ldrb	r2, [r5, #0]
    9734:	cmp	r2, #0
    9736:	bne.n	97d8 <yield+0xb4>
	running = 1;
    9738:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    973a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    973c:	strb	r2, [r5, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    973e:	bpl.n	9758 <yield+0x34>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9740:	bl	8498 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9744:	cbz	r0, 974a <yield+0x26>
    9746:	bl	9ab0 <serialEvent()>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    974a:	ldr	r3, [pc, #152]	; (97e4 <yield+0xc0>)
    974c:	ldrb	r3, [r3, #0]
    974e:	cbz	r3, 9758 <yield+0x34>
    9750:	ldrb	r3, [r4, #0]
    9752:	bic.w	r3, r3, #1
    9756:	strb	r3, [r4, #0]
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9758:	ldrb	r3, [r4, #0]
    975a:	lsls	r2, r3, #30
    975c:	bpl.n	978a <yield+0x66>
    975e:	movs	r6, #0
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9760:	ldr.w	r8, [pc, #144]	; 97f4 <yield+0xd0>
			s_serials_with_serial_events[i]->doYieldCode();
    9764:	ldr.w	r9, [pc, #144]	; 97f8 <yield+0xd4>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9768:	ldrb.w	r2, [r8]
    976c:	uxtb	r3, r6
    976e:	cmp	r2, r3
    9770:	bls.n	978a <yield+0x66>
			s_serials_with_serial_events[i]->doYieldCode();
    9772:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9776:	ldr	r3, [r7, #0]
    9778:	mov	r0, r7
    977a:	ldr	r3, [r3, #16]
    977c:	blx	r3
    977e:	cbz	r0, 9786 <yield+0x62>
    9780:	ldr	r3, [r7, #20]
    9782:	ldr	r3, [r3, #8]
    9784:	blx	r3
    9786:	adds	r6, #1
    9788:	b.n	9768 <yield+0x44>

	running = 0;
    978a:	movs	r3, #0
    978c:	strb	r3, [r5, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    978e:	ldrb	r3, [r4, #0]
    9790:	lsls	r3, r3, #29
    9792:	bpl.n	97d8 <yield+0xb4>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    9794:	ldr	r1, [pc, #80]	; (97e8 <yield+0xc4>)
    9796:	ldr	r3, [r1, #0]
    9798:	cbz	r3, 97d8 <yield+0xb4>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    979a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    979e:	cbnz	r3, 97d8 <yield+0xb4>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    97a0:	mrs	r2, PRIMASK
		__disable_irq();
    97a4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    97a6:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    97a8:	cbz	r0, 97b0 <yield+0x8c>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    97aa:	ldr	r4, [pc, #64]	; (97ec <yield+0xc8>)
    97ac:	ldrb	r5, [r4, #0]
    97ae:	cbz	r5, 97b8 <yield+0x94>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    97b0:	cbnz	r2, 97d8 <yield+0xb4>
    97b2:	cpsie	i
    97b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    97b8:	movs	r3, #1
    97ba:	strb	r3, [r4, #0]
		firstYield = first->_next;
    97bc:	ldr	r3, [r0, #20]
    97be:	str	r3, [r1, #0]
		if (firstYield) {
    97c0:	cbz	r3, 97c6 <yield+0xa2>
			firstYield->_prev = nullptr;
    97c2:	str	r5, [r3, #24]
    97c4:	b.n	97ca <yield+0xa6>
		} else {
			lastYield = nullptr;
    97c6:	ldr	r1, [pc, #40]	; (97f0 <yield+0xcc>)
    97c8:	str	r3, [r1, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    97ca:	cbnz	r2, 97ce <yield+0xaa>
    97cc:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    97ce:	movs	r5, #0
		(*(first->_function))(*first);
    97d0:	ldr	r3, [r0, #8]
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    97d2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    97d4:	blx	r3
		runningFromYield = false;
    97d6:	strb	r5, [r4, #0]
    97d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    97dc:	.word	0x20001dff
    97e0:	.word	0x20008875
    97e4:	.word	0x60001efa
    97e8:	.word	0x20003550
    97ec:	.word	0x20008873
    97f0:	.word	0x2000355c
    97f4:	.word	0x20008874
    97f8:	.word	0x20003560

000097fc <MillisTimer::disableTimerInterrupt()>:
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    97fc:	mrs	r0, PRIMASK
		__disable_irq();
    9800:	cpsid	i
		return (primask == 0) ? true : false;
	}
    9802:	clz	r0, r0
    9806:	lsrs	r0, r0, #5
    9808:	bx	lr

0000980a <MillisTimer::enableTimerInterrupt(bool)>:
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    980a:	cbz	r0, 980e <MillisTimer::enableTimerInterrupt(bool)+0x4>
    980c:	cpsie	i
    980e:	bx	lr

00009810 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9810:	push	{r3, r4, r5, r6, r7, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9812:	ldr	r6, [pc, #48]	; (9844 <EventResponder::runFromInterrupt()+0x34>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9814:	movs	r5, #0
			} else {
				lastInterrupt = nullptr;
    9816:	ldr	r7, [pc, #48]	; (9848 <EventResponder::runFromInterrupt()+0x38>)
}

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
    9818:	bl	97fc <MillisTimer::disableTimerInterrupt()>
		EventResponder *first = firstInterrupt;
    981c:	ldr	r4, [r6, #0]
}

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
    981e:	mov	r2, r0
		EventResponder *first = firstInterrupt;
		if (first) {
    9820:	cbz	r4, 983e <EventResponder::runFromInterrupt()+0x2e>
			firstInterrupt = first->_next;
    9822:	ldr	r3, [r4, #20]
    9824:	str	r3, [r6, #0]
			if (firstInterrupt) {
    9826:	cbz	r3, 982c <EventResponder::runFromInterrupt()+0x1c>
				firstInterrupt->_prev = nullptr;
    9828:	str	r5, [r3, #24]
    982a:	b.n	982e <EventResponder::runFromInterrupt()+0x1e>
			} else {
				lastInterrupt = nullptr;
    982c:	str	r3, [r7, #0]
			}
			enableInterrupts(irq);
    982e:	mov	r0, r2
    9830:	bl	980a <MillisTimer::enableTimerInterrupt(bool)>
			first->_triggered = false;
    9834:	strb	r5, [r4, #29]
			(*(first->_function))(*first);
    9836:	ldr	r3, [r4, #8]
    9838:	mov	r0, r4
    983a:	blx	r3
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
	while (1) {
    983c:	b.n	9818 <EventResponder::runFromInterrupt()+0x8>
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
		} else {
			enableInterrupts(irq);
    983e:	bl	980a <MillisTimer::enableTimerInterrupt(bool)>
    9842:	pop	{r3, r4, r5, r6, r7, pc}
    9844:	.word	0x20003558
    9848:	.word	0x20003554

0000984c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    984c:	b.w	9810 <EventResponder::runFromInterrupt()>

00009850 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9850:	ldr	r3, [pc, #16]	; (9864 <systick_isr+0x14>)
    9852:	ldr	r2, [r3, #0]
    9854:	ldr	r3, [pc, #16]	; (9868 <systick_isr+0x18>)
    9856:	str	r2, [r3, #0]
	systick_millis_count++;
    9858:	ldr	r2, [pc, #16]	; (986c <systick_isr+0x1c>)
    985a:	ldr	r3, [r2, #0]
    985c:	adds	r3, #1
    985e:	str	r3, [r2, #0]
    9860:	bx	lr
    9862:	nop
    9864:	.word	0xe0001004
    9868:	.word	0x200087f8
    986c:	.word	0x200087fc

00009870 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9870:	b.w	84a4 <usb_serial_flush_input>

00009874 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9874:	b.w	8454 <usb_serial_peekchar>

00009878 <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9878:	b.w	8504 <usb_serial_getchar>

0000987c <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    987c:	b.w	8498 <usb_serial_available>

00009880 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9880:	b.w	8704 <usb_serial_flush_output>

00009884 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9884:	b.w	86b8 <usb_serial_write_buffer_free>

00009888 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9888:	mov	r0, r1
    988a:	mov	r1, r2
    988c:	b.w	8524 <usb_serial_write>

00009890 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9890:	mov	r0, r1
    9892:	b.w	86a0 <usb_serial_putchar>

00009896 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9896:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9898:	bl	338 <setup>
	while (1) {
		loop();
    989c:	bl	39c <loop>
		yield();
    98a0:	bl	9724 <yield>
    98a4:	b.n	989c <main+0x6>
	...

000098a8 <Stream::timedRead()>:
    98a8:	ldr	r3, [pc, #40]	; (98d4 <Stream::timedRead()+0x2c>)
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    98aa:	push	{r4, r5, r6, lr}
    98ac:	mov	r4, r0
    98ae:	ldr	r6, [r3, #0]
    98b0:	mov	r5, r3
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    98b2:	ldr	r3, [r4, #0]
    98b4:	mov	r0, r4
    98b6:	ldr	r3, [r3, #20]
    98b8:	blx	r3
    if (c >= 0) return c;
    98ba:	cmp	r0, #0
    98bc:	bge.n	98d0 <Stream::timedRead()+0x28>
    yield();
    98be:	bl	9724 <yield>
    98c2:	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    98c4:	ldr	r2, [r4, #8]
    98c6:	subs	r3, r3, r6
    98c8:	cmp	r3, r2
    98ca:	bcc.n	98b2 <Stream::timedRead()+0xa>
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    98cc:	mov.w	r0, #4294967295
}
    98d0:	pop	{r4, r5, r6, pc}
    98d2:	nop
    98d4:	.word	0x200087fc

000098d8 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    98d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    98dc:	mov	r7, r0
    98de:	mov	r9, r1
	if (buffer == nullptr) return 0;
    98e0:	mov	r5, r2
    98e2:	cbz	r2, 9912 <Stream::readBytesUntil(char, char*, unsigned int)+0x3a>
	if (length < 1) return 0;
    98e4:	cbz	r3, 9916 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	length--;
    98e6:	add.w	r8, r3, #4294967295
    98ea:	mov	r6, r2
    98ec:	subs	r4, r6, r5
	size_t index = 0;
	while (index < length) {
    98ee:	cmp	r8, r4
    98f0:	bls.n	990c <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
		int c = timedRead();
    98f2:	mov	r0, r7
    98f4:	bl	98a8 <Stream::timedRead()>
		if (c == terminator) break;
    98f8:	cmp	r0, r9
    98fa:	beq.n	990c <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
		if (c < 0) {
    98fc:	cmp	r0, #0
    98fe:	bge.n	9906 <Stream::readBytesUntil(char, char*, unsigned int)+0x2e>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    9900:	movs	r3, #1
    9902:	strb	r3, [r7, #12]
    9904:	b.n	990c <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    9906:	strb.w	r0, [r6], #1
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
	while (index < length) {
    990a:	b.n	98ec <Stream::readBytesUntil(char, char*, unsigned int)+0x14>
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    990c:	movs	r3, #0
    990e:	strb	r3, [r6, #0]
	return index; // return number of characters, not including null terminator
    9910:	b.n	9918 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
    9912:	mov	r4, r2
    9914:	b.n	9918 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
    9916:	mov	r4, r3
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    9918:	mov	r0, r4
    991a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000991e <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    991e:	push	{r3, r4, r5, r6, r7, lr}
    9920:	mov	r7, r0
	if (buffer == nullptr) return 0;
    9922:	mov	r5, r1
    9924:	cbz	r1, 993e <Print::write(unsigned char const*, unsigned int)+0x20>
    9926:	adds	r6, r1, r2
    9928:	movs	r4, #0
	size_t count = 0;
	while (size--) count += write(*buffer++);
    992a:	cmp	r5, r6
    992c:	beq.n	9942 <Print::write(unsigned char const*, unsigned int)+0x24>
    992e:	ldr	r3, [r7, #0]
    9930:	mov	r0, r7
    9932:	ldrb.w	r1, [r5], #1
    9936:	ldr	r3, [r3, #0]
    9938:	blx	r3
    993a:	add	r4, r0
    993c:	b.n	992a <Print::write(unsigned char const*, unsigned int)+0xc>
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    993e:	mov	r0, r1
    9940:	pop	{r3, r4, r5, r6, r7, pc}
    9942:	mov	r0, r4
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9944:	pop	{r3, r4, r5, r6, r7, pc}
	...

00009948 <Print::println()>:
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9948:	ldr	r3, [pc, #24]	; (9964 <Print::println()+0x1c>)
    994a:	ldrh	r3, [r3, #0]
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    994c:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    994e:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    9952:	movs	r2, #2
    9954:	ldr	r3, [r0, #0]
    9956:	add	r1, sp, #4
    9958:	ldr	r3, [r3, #4]
    995a:	blx	r3
}
    995c:	add	sp, #12
    995e:	ldr.w	pc, [sp], #4
    9962:	nop
    9964:	.word	0x20000f40

00009968 <Print::printf(char const*, ...)>:
	return len;
}
}

int Print::printf(const char *format, ...)
{
    9968:	push	{r1, r2, r3}
    996a:	push	{r0, r1, lr}
    996c:	add	r2, sp, #12
    996e:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9972:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    9974:	bl	e118 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    9978:	add	sp, #8
    997a:	ldr.w	lr, [sp], #4
    997e:	add	sp, #12
    9980:	bx	lr

00009982 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9982:	push	{r4, r5, r6, lr}
    9984:	mov	r5, r0
    9986:	sub	sp, #40	; 0x28
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9988:	cbnz	r2, 9994 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    998a:	ldr	r3, [r0, #0]
    998c:	uxtb	r1, r1
    998e:	ldr	r3, [r3, #0]
    9990:	blx	r3
    9992:	b.n	99f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
	} else if (base == 1) {
		base = 10;
    9994:	cmp	r2, #1
    9996:	it	eq
    9998:	moveq	r2, #10
	}


	if (n == 0) {
    999a:	cbz	r1, 99a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    999c:	movs	r0, #33	; 0x21
    999e:	b.n	99aa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x28>
		buf[sizeof(buf) - 1] = '0';
    99a0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    99a2:	movs	r0, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    99a4:	strb.w	r2, [sp, #37]	; 0x25
    99a8:	b.n	99d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x52>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    99aa:	udiv	r6, r1, r2
    99ae:	mls	r1, r2, r6, r1
    99b2:	uxtb	r4, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    99b4:	cmp	r1, #9
    99b6:	ite	ls
    99b8:	addls.w	r1, r4, #48	; 0x30
    99bc:	addhi.w	r1, r4, #55	; 0x37
    99c0:	add	r4, sp, #40	; 0x28
    99c2:	uxtb	r1, r1
    99c4:	add	r4, r0
    99c6:	strb.w	r1, [r4, #-36]
			n /= base;
			if (n == 0) break;
    99ca:	mov	r1, r6
    99cc:	cbz	r6, 99d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x52>
			i--;
    99ce:	subs	r0, #1
    99d0:	uxtb	r0, r0
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
    99d2:	b.n	99aa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x28>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    99d4:	cbz	r3, 99e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
		i--;
    99d6:	subs	r0, #1
		buf[i] = '-';
    99d8:	add	r3, sp, #40	; 0x28
    99da:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    99dc:	uxtb	r0, r0
		buf[i] = '-';
    99de:	add	r3, r0
    99e0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    99e4:	ldr	r3, [r5, #0]
    99e6:	add	r1, sp, #4
    99e8:	rsb	r2, r0, #34	; 0x22
    99ec:	add	r1, r0
    99ee:	ldr	r3, [r3, #4]
    99f0:	mov	r0, r5
    99f2:	blx	r3
}
    99f4:	add	sp, #40	; 0x28
    99f6:	pop	{r4, r5, r6, pc}

000099f8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    99f8:	cmp	r1, #0
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    99fa:	mov.w	r2, #10
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    99fe:	itte	lt
    9a00:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    9a02:	movlt	r3, #45	; 0x2d
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    9a04:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    9a06:	b.w	9982 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00009a0a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    9a0a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a0e:	sub	sp, #72	; 0x48
    9a10:	mov	r5, r0
    9a12:	mov	r6, r2
    9a14:	mov	r7, r3
    9a16:	ldrb.w	r8, [sp, #104]	; 0x68
    9a1a:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    9a1e:	cmp.w	r8, #1
    9a22:	bls.n	9aa8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9e>
	if (n == 0) {
    9a24:	orrs.w	r3, r6, r7
    9a28:	beq.n	9a36 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
    9a2a:	movs	r4, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9a2c:	uxtb.w	r8, r8
    9a30:	mov.w	r9, #0
    9a34:	b.n	9a40 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x36>
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9a36:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    9a38:	movs	r4, #65	; 0x41
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9a3a:	strb.w	r3, [sp, #69]	; 0x45
    9a3e:	b.n	9a82 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9a40:	mov	r0, r6
    9a42:	mov	r1, r7
    9a44:	mov	r2, r8
    9a46:	mov	r3, r9
    9a48:	bl	9b20 <__aeabi_uldivmod>
    9a4c:	mov	r1, r3
    9a4e:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    9a50:	mov	r0, r6
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a52:	cmp	r1, #0
			n /= base;
    9a54:	mov	r1, r7
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a56:	it	eq
    9a58:	cmpeq	r2, #10
    9a5a:	add	r2, sp, #72	; 0x48
    9a5c:	ite	cc
    9a5e:	addcc	r3, #48	; 0x30
    9a60:	addcs	r3, #55	; 0x37
    9a62:	add	r2, r4
    9a64:	uxtb	r3, r3
    9a66:	strb.w	r3, [r2, #-68]
			n /= base;
    9a6a:	mov	r3, r9
    9a6c:	mov	r2, r8
    9a6e:	bl	9b20 <__aeabi_uldivmod>
    9a72:	mov	r6, r0
    9a74:	mov	r7, r1
			if (n == 0) break;
    9a76:	orrs.w	r3, r6, r7
    9a7a:	beq.n	9a82 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
			i--;
    9a7c:	subs	r4, #1
    9a7e:	uxtb	r4, r4
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
    9a80:	b.n	9a40 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x36>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    9a82:	cmp.w	sl, #0
    9a86:	beq.n	9a96 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    9a88:	subs	r4, #1
		buf[i] = '-';
    9a8a:	add	r3, sp, #72	; 0x48
    9a8c:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    9a8e:	uxtb	r4, r4
		buf[i] = '-';
    9a90:	add	r3, r4
    9a92:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    9a96:	ldr	r3, [r5, #0]
    9a98:	add	r1, sp, #4
    9a9a:	rsb	r2, r4, #66	; 0x42
    9a9e:	mov	r0, r5
    9aa0:	ldr	r3, [r3, #4]
    9aa2:	add	r1, r4
    9aa4:	blx	r3
    9aa6:	b.n	9aaa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa0>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    9aa8:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9aaa:	add	sp, #72	; 0x48
    9aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009ab0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    9ab0:	bx	lr

00009ab2 <operator new(unsigned int)>:
    9ab2:	b.w	9ef0 <malloc>

00009ab6 <operator delete(void*, unsigned int)>:
    9ab6:	b.w	9f00 <free>

00009aba <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9aba:	mov	r3, r0
	unsigned digit;
	int i=0, j;
    9abc:	movs	r0, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9abe:	push	{r4, r5, lr}
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    9ac0:	udiv	r4, r3, r2
    9ac4:	mls	r3, r2, r4, r3
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9ac8:	cmp	r3, #9
    9aca:	ite	ls
    9acc:	addls	r3, #48	; 0x30
    9ace:	addhi	r3, #55	; 0x37
    9ad0:	uxtb	r3, r3
    9ad2:	strb	r3, [r1, r0]
		val /= radix;
		if (val == 0) break;
    9ad4:	mov	r3, r4
    9ad6:	cbz	r4, 9adc <ultoa+0x22>
		i++;
    9ad8:	adds	r0, #1
	}
    9ada:	b.n	9ac0 <ultoa+0x6>
	buf[i + 1] = 0;
    9adc:	adds	r2, r1, r0
	for (j=0; j < i; j++, i--) {
    9ade:	mov	r3, r4
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
    9ae0:	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9ae2:	subs	r4, r0, r3
    9ae4:	cmp	r3, r4
    9ae6:	bge.n	9af6 <ultoa+0x3c>
		t = buf[j];
    9ae8:	ldrb	r4, [r1, r3]
		buf[j] = buf[i];
    9aea:	ldrb	r5, [r2, #0]
    9aec:	strb	r5, [r1, r3]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9aee:	adds	r3, #1
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9af0:	strb.w	r4, [r2], #-1
    9af4:	b.n	9ae2 <ultoa+0x28>
	}
	return buf;
}
    9af6:	mov	r0, r1
    9af8:	pop	{r4, r5, pc}
	...

00009afc <__aeabi_atexit>:
    9afc:	mov	r3, r1
    9afe:	mov	r1, r0
    9b00:	mov	r0, r3
    9b02:	b.w	9e38 <__cxa_atexit>
    9b06:	nop

00009b08 <__aeabi_llsr>:
    9b08:	lsrs	r0, r2
    9b0a:	adds	r3, r1, #0
    9b0c:	lsrs	r1, r2
    9b0e:	mov	ip, r3
    9b10:	subs	r2, #32
    9b12:	lsrs	r3, r2
    9b14:	orrs	r0, r3
    9b16:	negs	r2, r2
    9b18:	mov	r3, ip
    9b1a:	lsls	r3, r2
    9b1c:	orrs	r0, r3
    9b1e:	bx	lr

00009b20 <__aeabi_uldivmod>:
    9b20:	cbnz	r3, 9b38 <__aeabi_uldivmod+0x18>
    9b22:	cbnz	r2, 9b38 <__aeabi_uldivmod+0x18>
    9b24:	cmp	r1, #0
    9b26:	it	eq
    9b28:	cmpeq	r0, #0
    9b2a:	itt	ne
    9b2c:	movne.w	r1, #4294967295
    9b30:	movne.w	r0, #4294967295
    9b34:	b.w	9e34 <__aeabi_idiv0>
    9b38:	sub.w	ip, sp, #8
    9b3c:	strd	ip, lr, [sp, #-16]!
    9b40:	bl	9b50 <__udivmoddi4>
    9b44:	ldr.w	lr, [sp, #4]
    9b48:	ldrd	r2, r3, [sp, #8]
    9b4c:	add	sp, #16
    9b4e:	bx	lr

00009b50 <__udivmoddi4>:
    9b50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b54:	mov	ip, r1
    9b56:	mov	r6, r1
    9b58:	mov	r4, r0
    9b5a:	ldr	r5, [sp, #32]
    9b5c:	cmp	r3, #0
    9b5e:	bne.n	9c02 <__udivmoddi4+0xb2>
    9b60:	cmp	r2, r1
    9b62:	mov	r7, r2
    9b64:	bls.n	9c40 <__udivmoddi4+0xf0>
    9b66:	clz	lr, r2
    9b6a:	cmp.w	lr, #0
    9b6e:	beq.n	9b88 <__udivmoddi4+0x38>
    9b70:	rsb	r4, lr, #32
    9b74:	lsr.w	r4, r0, r4
    9b78:	lsl.w	r6, r1, lr
    9b7c:	orr.w	ip, r4, r6
    9b80:	lsl.w	r7, r2, lr
    9b84:	lsl.w	r4, r0, lr
    9b88:	mov.w	r9, r7, lsr #16
    9b8c:	lsrs	r2, r4, #16
    9b8e:	udiv	r0, ip, r9
    9b92:	uxth.w	r8, r7
    9b96:	mls	r6, r9, r0, ip
    9b9a:	orr.w	r6, r2, r6, lsl #16
    9b9e:	mul.w	r3, r0, r8
    9ba2:	cmp	r3, r6
    9ba4:	bls.n	9bba <__udivmoddi4+0x6a>
    9ba6:	adds	r6, r6, r7
    9ba8:	add.w	r2, r0, #4294967295
    9bac:	bcs.w	9df4 <__udivmoddi4+0x2a4>
    9bb0:	cmp	r3, r6
    9bb2:	bls.w	9df4 <__udivmoddi4+0x2a4>
    9bb6:	subs	r0, #2
    9bb8:	add	r6, r7
    9bba:	subs	r6, r6, r3
    9bbc:	uxth	r2, r4
    9bbe:	udiv	r3, r6, r9
    9bc2:	mls	r6, r9, r3, r6
    9bc6:	orr.w	r4, r2, r6, lsl #16
    9bca:	mul.w	r8, r3, r8
    9bce:	cmp	r8, r4
    9bd0:	bls.n	9be6 <__udivmoddi4+0x96>
    9bd2:	adds	r4, r4, r7
    9bd4:	add.w	r2, r3, #4294967295
    9bd8:	bcs.w	9df0 <__udivmoddi4+0x2a0>
    9bdc:	cmp	r8, r4
    9bde:	bls.w	9df0 <__udivmoddi4+0x2a0>
    9be2:	subs	r3, #2
    9be4:	add	r4, r7
    9be6:	rsb	r4, r8, r4
    9bea:	orr.w	r0, r3, r0, lsl #16
    9bee:	movs	r1, #0
    9bf0:	cmp	r5, #0
    9bf2:	beq.n	9cba <__udivmoddi4+0x16a>
    9bf4:	lsr.w	r4, r4, lr
    9bf8:	movs	r3, #0
    9bfa:	str	r4, [r5, #0]
    9bfc:	str	r3, [r5, #4]
    9bfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c02:	cmp	r3, r1
    9c04:	bls.n	9c16 <__udivmoddi4+0xc6>
    9c06:	cmp	r5, #0
    9c08:	beq.n	9cb6 <__udivmoddi4+0x166>
    9c0a:	movs	r1, #0
    9c0c:	stmia.w	r5, {r0, r6}
    9c10:	mov	r0, r1
    9c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c16:	clz	r1, r3
    9c1a:	cmp	r1, #0
    9c1c:	bne.w	9d40 <__udivmoddi4+0x1f0>
    9c20:	cmp	r3, r6
    9c22:	bcc.n	9c2a <__udivmoddi4+0xda>
    9c24:	cmp	r2, r0
    9c26:	bhi.w	9e1a <__udivmoddi4+0x2ca>
    9c2a:	subs	r4, r0, r2
    9c2c:	sbc.w	r6, r6, r3
    9c30:	movs	r0, #1
    9c32:	mov	ip, r6
    9c34:	cmp	r5, #0
    9c36:	beq.n	9cba <__udivmoddi4+0x16a>
    9c38:	stmia.w	r5, {r4, ip}
    9c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c40:	cbnz	r2, 9c48 <__udivmoddi4+0xf8>
    9c42:	movs	r7, #1
    9c44:	udiv	r7, r7, r2
    9c48:	clz	lr, r7
    9c4c:	cmp.w	lr, #0
    9c50:	bne.n	9cbe <__udivmoddi4+0x16e>
    9c52:	subs	r3, r6, r7
    9c54:	mov.w	r8, r7, lsr #16
    9c58:	uxth.w	ip, r7
    9c5c:	movs	r1, #1
    9c5e:	udiv	r0, r3, r8
    9c62:	lsrs	r2, r4, #16
    9c64:	mls	r6, r8, r0, r3
    9c68:	orr.w	r6, r2, r6, lsl #16
    9c6c:	mul.w	r3, ip, r0
    9c70:	cmp	r3, r6
    9c72:	bls.n	9c84 <__udivmoddi4+0x134>
    9c74:	adds	r6, r6, r7
    9c76:	add.w	r2, r0, #4294967295
    9c7a:	bcs.n	9c82 <__udivmoddi4+0x132>
    9c7c:	cmp	r3, r6
    9c7e:	bhi.w	9e1e <__udivmoddi4+0x2ce>
    9c82:	mov	r0, r2
    9c84:	subs	r6, r6, r3
    9c86:	uxth	r2, r4
    9c88:	udiv	r3, r6, r8
    9c8c:	mls	r6, r8, r3, r6
    9c90:	orr.w	r4, r2, r6, lsl #16
    9c94:	mul.w	ip, ip, r3
    9c98:	cmp	ip, r4
    9c9a:	bls.n	9cac <__udivmoddi4+0x15c>
    9c9c:	adds	r4, r4, r7
    9c9e:	add.w	r2, r3, #4294967295
    9ca2:	bcs.n	9caa <__udivmoddi4+0x15a>
    9ca4:	cmp	ip, r4
    9ca6:	bhi.w	9e14 <__udivmoddi4+0x2c4>
    9caa:	mov	r3, r2
    9cac:	rsb	r4, ip, r4
    9cb0:	orr.w	r0, r3, r0, lsl #16
    9cb4:	b.n	9bf0 <__udivmoddi4+0xa0>
    9cb6:	mov	r1, r5
    9cb8:	mov	r0, r5
    9cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cbe:	rsb	r1, lr, #32
    9cc2:	lsl.w	r3, r6, lr
    9cc6:	lsl.w	r7, r7, lr
    9cca:	lsr.w	r9, r0, r1
    9cce:	mov.w	r8, r7, lsr #16
    9cd2:	lsrs	r6, r1
    9cd4:	orr.w	r9, r9, r3
    9cd8:	udiv	sl, r6, r8
    9cdc:	mov.w	r4, r9, lsr #16
    9ce0:	mls	r6, r8, sl, r6
    9ce4:	uxth.w	ip, r7
    9ce8:	orr.w	r3, r4, r6, lsl #16
    9cec:	mul.w	r2, sl, ip
    9cf0:	cmp	r2, r3
    9cf2:	lsl.w	r4, r0, lr
    9cf6:	bls.n	9d0e <__udivmoddi4+0x1be>
    9cf8:	adds	r3, r3, r7
    9cfa:	add.w	r1, sl, #4294967295
    9cfe:	bcs.w	9e10 <__udivmoddi4+0x2c0>
    9d02:	cmp	r2, r3
    9d04:	bls.w	9e10 <__udivmoddi4+0x2c0>
    9d08:	sub.w	sl, sl, #2
    9d0c:	add	r3, r7
    9d0e:	subs	r3, r3, r2
    9d10:	uxth.w	r9, r9
    9d14:	udiv	r1, r3, r8
    9d18:	mls	r3, r8, r1, r3
    9d1c:	orr.w	r3, r9, r3, lsl #16
    9d20:	mul.w	r6, r1, ip
    9d24:	cmp	r6, r3
    9d26:	bls.n	9d38 <__udivmoddi4+0x1e8>
    9d28:	adds	r3, r3, r7
    9d2a:	add.w	r2, r1, #4294967295
    9d2e:	bcs.n	9e08 <__udivmoddi4+0x2b8>
    9d30:	cmp	r6, r3
    9d32:	bls.n	9e08 <__udivmoddi4+0x2b8>
    9d34:	subs	r1, #2
    9d36:	add	r3, r7
    9d38:	subs	r3, r3, r6
    9d3a:	orr.w	r1, r1, sl, lsl #16
    9d3e:	b.n	9c5e <__udivmoddi4+0x10e>
    9d40:	rsb	lr, r1, #32
    9d44:	lsr.w	r4, r2, lr
    9d48:	lsls	r3, r1
    9d4a:	orrs	r3, r4
    9d4c:	lsr.w	r7, r0, lr
    9d50:	lsl.w	r4, r6, r1
    9d54:	mov.w	ip, r3, lsr #16
    9d58:	lsr.w	r6, r6, lr
    9d5c:	orrs	r4, r7
    9d5e:	udiv	r9, r6, ip
    9d62:	lsrs	r7, r4, #16
    9d64:	mls	r6, ip, r9, r6
    9d68:	uxth.w	r8, r3
    9d6c:	orr.w	r6, r7, r6, lsl #16
    9d70:	mul.w	r7, r9, r8
    9d74:	cmp	r7, r6
    9d76:	lsl.w	r2, r2, r1
    9d7a:	lsl.w	sl, r0, r1
    9d7e:	bls.n	9d92 <__udivmoddi4+0x242>
    9d80:	adds	r6, r6, r3
    9d82:	add.w	r0, r9, #4294967295
    9d86:	bcs.n	9e0c <__udivmoddi4+0x2bc>
    9d88:	cmp	r7, r6
    9d8a:	bls.n	9e0c <__udivmoddi4+0x2bc>
    9d8c:	sub.w	r9, r9, #2
    9d90:	add	r6, r3
    9d92:	subs	r6, r6, r7
    9d94:	uxth	r0, r4
    9d96:	udiv	r4, r6, ip
    9d9a:	mls	r6, ip, r4, r6
    9d9e:	orr.w	r7, r0, r6, lsl #16
    9da2:	mul.w	r8, r4, r8
    9da6:	cmp	r8, r7
    9da8:	bls.n	9dba <__udivmoddi4+0x26a>
    9daa:	adds	r7, r7, r3
    9dac:	add.w	r0, r4, #4294967295
    9db0:	bcs.n	9e04 <__udivmoddi4+0x2b4>
    9db2:	cmp	r8, r7
    9db4:	bls.n	9e04 <__udivmoddi4+0x2b4>
    9db6:	subs	r4, #2
    9db8:	add	r7, r3
    9dba:	orr.w	r0, r4, r9, lsl #16
    9dbe:	rsb	r7, r8, r7
    9dc2:	umull	r8, r9, r0, r2
    9dc6:	cmp	r7, r9
    9dc8:	mov	r4, r8
    9dca:	mov	r6, r9
    9dcc:	bcc.n	9df8 <__udivmoddi4+0x2a8>
    9dce:	beq.n	9e24 <__udivmoddi4+0x2d4>
    9dd0:	cbz	r5, 9e2c <__udivmoddi4+0x2dc>
    9dd2:	subs.w	r3, sl, r4
    9dd6:	sbc.w	r7, r7, r6
    9dda:	lsl.w	lr, r7, lr
    9dde:	lsrs	r3, r1
    9de0:	lsrs	r7, r1
    9de2:	orr.w	r3, lr, r3
    9de6:	stmia.w	r5, {r3, r7}
    9dea:	movs	r1, #0
    9dec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9df0:	mov	r3, r2
    9df2:	b.n	9be6 <__udivmoddi4+0x96>
    9df4:	mov	r0, r2
    9df6:	b.n	9bba <__udivmoddi4+0x6a>
    9df8:	subs.w	r4, r8, r2
    9dfc:	sbc.w	r6, r9, r3
    9e00:	subs	r0, #1
    9e02:	b.n	9dd0 <__udivmoddi4+0x280>
    9e04:	mov	r4, r0
    9e06:	b.n	9dba <__udivmoddi4+0x26a>
    9e08:	mov	r1, r2
    9e0a:	b.n	9d38 <__udivmoddi4+0x1e8>
    9e0c:	mov	r9, r0
    9e0e:	b.n	9d92 <__udivmoddi4+0x242>
    9e10:	mov	sl, r1
    9e12:	b.n	9d0e <__udivmoddi4+0x1be>
    9e14:	subs	r3, #2
    9e16:	add	r4, r7
    9e18:	b.n	9cac <__udivmoddi4+0x15c>
    9e1a:	mov	r0, r1
    9e1c:	b.n	9c34 <__udivmoddi4+0xe4>
    9e1e:	subs	r0, #2
    9e20:	add	r6, r7
    9e22:	b.n	9c84 <__udivmoddi4+0x134>
    9e24:	cmp	sl, r8
    9e26:	bcc.n	9df8 <__udivmoddi4+0x2a8>
    9e28:	mov	r6, r7
    9e2a:	b.n	9dd0 <__udivmoddi4+0x280>
    9e2c:	mov	r1, r5
    9e2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e32:	nop

00009e34 <__aeabi_idiv0>:
    9e34:	bx	lr
    9e36:	nop

00009e38 <__cxa_atexit>:
    9e38:	mov	r3, r2
    9e3a:	mov	r2, r1
    9e3c:	mov	r1, r0
    9e3e:	movs	r0, #2
    9e40:	b.w	e178 <__register_exitproc>

00009e44 <__errno>:
    9e44:	ldr	r3, [pc, #4]	; (9e4c <__errno+0x8>)
    9e46:	ldr	r0, [r3, #0]
    9e48:	bx	lr
    9e4a:	nop
    9e4c:	.word	0x20001dac

00009e50 <__libc_init_array>:
    9e50:	push	{r4, r5, r6, lr}
    9e52:	ldr	r6, [pc, #60]	; (9e90 <__libc_init_array+0x40>)
    9e54:	ldr	r5, [pc, #60]	; (9e94 <__libc_init_array+0x44>)
    9e56:	subs	r6, r6, r5
    9e58:	asrs	r6, r6, #2
    9e5a:	it	ne
    9e5c:	movne	r4, #0
    9e5e:	beq.n	9e6c <__libc_init_array+0x1c>
    9e60:	adds	r4, #1
    9e62:	ldr.w	r3, [r5], #4
    9e66:	blx	r3
    9e68:	cmp	r6, r4
    9e6a:	bne.n	9e60 <__libc_init_array+0x10>
    9e6c:	ldr	r6, [pc, #40]	; (9e98 <__libc_init_array+0x48>)
    9e6e:	ldr	r5, [pc, #44]	; (9e9c <__libc_init_array+0x4c>)
    9e70:	subs	r6, r6, r5
    9e72:	bl	10c90 <___init_veneer>
    9e76:	asrs	r6, r6, #2
    9e78:	it	ne
    9e7a:	movne	r4, #0
    9e7c:	beq.n	9e8c <__libc_init_array+0x3c>
    9e7e:	adds	r4, #1
    9e80:	ldr.w	r3, [r5], #4
    9e84:	blx	r3
    9e86:	cmp	r6, r4
    9e88:	bne.n	9e7e <__libc_init_array+0x2e>
    9e8a:	pop	{r4, r5, r6, pc}
    9e8c:	pop	{r4, r5, r6, pc}
    9e8e:	nop
    9e90:	.word	0x60001d60
    9e94:	.word	0x60001d60
    9e98:	.word	0x60001d6c
    9e9c:	.word	0x60001d60

00009ea0 <__get_current_locale>:
    9ea0:	ldr	r2, [pc, #12]	; (9eb0 <__get_current_locale+0x10>)
    9ea2:	ldr	r3, [pc, #16]	; (9eb4 <__get_current_locale+0x14>)
    9ea4:	ldr	r2, [r2, #0]
    9ea6:	ldr	r0, [r2, #52]	; 0x34
    9ea8:	cmp	r0, #0
    9eaa:	it	eq
    9eac:	moveq	r0, r3
    9eae:	bx	lr
    9eb0:	.word	0x20001dac
    9eb4:	.word	0x20001830

00009eb8 <__locale_mb_cur_max>:
    9eb8:	ldr	r3, [pc, #16]	; (9ecc <__locale_mb_cur_max+0x14>)
    9eba:	ldr	r2, [pc, #20]	; (9ed0 <__locale_mb_cur_max+0x18>)
    9ebc:	ldr	r3, [r3, #0]
    9ebe:	ldr	r3, [r3, #52]	; 0x34
    9ec0:	cmp	r3, #0
    9ec2:	it	eq
    9ec4:	moveq	r3, r2
    9ec6:	ldrb.w	r0, [r3, #296]	; 0x128
    9eca:	bx	lr
    9ecc:	.word	0x20001dac
    9ed0:	.word	0x20001830

00009ed4 <__locale_ctype_ptr_l>:
    9ed4:	ldr.w	r0, [r0, #236]	; 0xec
    9ed8:	bx	lr
    9eda:	nop

00009edc <__locale_ctype_ptr>:
    9edc:	push	{r3, lr}
    9ede:	ldr	r3, [pc, #12]	; (9eec <__locale_ctype_ptr+0x10>)
    9ee0:	ldr	r0, [r3, #0]
    9ee2:	bl	9ea0 <__get_current_locale>
    9ee6:	ldr.w	r0, [r0, #236]	; 0xec
    9eea:	pop	{r3, pc}
    9eec:	.word	0x20001dac

00009ef0 <malloc>:
    9ef0:	ldr	r3, [pc, #8]	; (9efc <malloc+0xc>)
    9ef2:	mov	r1, r0
    9ef4:	ldr	r0, [r3, #0]
    9ef6:	b.w	9f10 <_malloc_r>
    9efa:	nop
    9efc:	.word	0x20001dac

00009f00 <free>:
    9f00:	ldr	r3, [pc, #8]	; (9f0c <free+0xc>)
    9f02:	mov	r1, r0
    9f04:	ldr	r0, [r3, #0]
    9f06:	b.w	f068 <_free_r>
    9f0a:	nop
    9f0c:	.word	0x20001dac

00009f10 <_malloc_r>:
    9f10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f14:	add.w	r5, r1, #11
    9f18:	cmp	r5, #22
    9f1a:	sub	sp, #12
    9f1c:	mov	r6, r0
    9f1e:	bls.w	a060 <_malloc_r+0x150>
    9f22:	bics.w	r5, r5, #7
    9f26:	bmi.w	a0a8 <_malloc_r+0x198>
    9f2a:	cmp	r1, r5
    9f2c:	bhi.w	a0a8 <_malloc_r+0x198>
    9f30:	bl	a67c <__malloc_lock>
    9f34:	cmp.w	r5, #504	; 0x1f8
    9f38:	bcc.w	a474 <_malloc_r+0x564>
    9f3c:	lsrs	r3, r5, #9
    9f3e:	beq.w	a0b6 <_malloc_r+0x1a6>
    9f42:	cmp	r3, #4
    9f44:	bhi.w	a24e <_malloc_r+0x33e>
    9f48:	lsrs	r0, r5, #6
    9f4a:	add.w	lr, r0, #57	; 0x39
    9f4e:	mov.w	r3, lr, lsl #1
    9f52:	adds	r0, #56	; 0x38
    9f54:	ldr	r7, [pc, #784]	; (a268 <_malloc_r+0x358>)
    9f56:	add.w	r3, r7, r3, lsl #2
    9f5a:	sub.w	r1, r3, #8
    9f5e:	ldr	r4, [r3, #4]
    9f60:	cmp	r1, r4
    9f62:	bne.n	9f74 <_malloc_r+0x64>
    9f64:	b.n	a0c0 <_malloc_r+0x1b0>
    9f66:	cmp	r2, #0
    9f68:	bge.w	a0c4 <_malloc_r+0x1b4>
    9f6c:	ldr	r4, [r4, #12]
    9f6e:	cmp	r1, r4
    9f70:	beq.w	a0c0 <_malloc_r+0x1b0>
    9f74:	ldr	r3, [r4, #4]
    9f76:	bic.w	r3, r3, #3
    9f7a:	subs	r2, r3, r5
    9f7c:	cmp	r2, #15
    9f7e:	ble.n	9f66 <_malloc_r+0x56>
    9f80:	ldr	r1, [pc, #740]	; (a268 <_malloc_r+0x358>)
    9f82:	ldr	r4, [r7, #16]
    9f84:	add.w	lr, r1, #8
    9f88:	cmp	r4, lr
    9f8a:	beq.w	a2f4 <_malloc_r+0x3e4>
    9f8e:	ldr	r3, [r4, #4]
    9f90:	bic.w	r3, r3, #3
    9f94:	subs	r2, r3, r5
    9f96:	cmp	r2, #15
    9f98:	bgt.w	a2ce <_malloc_r+0x3be>
    9f9c:	cmp	r2, #0
    9f9e:	str.w	lr, [r1, #20]
    9fa2:	str.w	lr, [r1, #16]
    9fa6:	bge.w	a0e6 <_malloc_r+0x1d6>
    9faa:	cmp.w	r3, #512	; 0x200
    9fae:	bcs.w	a280 <_malloc_r+0x370>
    9fb2:	lsrs	r3, r3, #3
    9fb4:	add.w	ip, r3, #1
    9fb8:	movs	r2, #1
    9fba:	asrs	r3, r3, #2
    9fbc:	lsl.w	r3, r2, r3
    9fc0:	ldr	r2, [r1, #4]
    9fc2:	ldr.w	r8, [r1, ip, lsl #3]
    9fc6:	str.w	r8, [r4, #8]
    9fca:	add.w	r9, r1, ip, lsl #3
    9fce:	orrs	r2, r3
    9fd0:	sub.w	r3, r9, #8
    9fd4:	str	r3, [r4, #12]
    9fd6:	str	r2, [r1, #4]
    9fd8:	str.w	r4, [r1, ip, lsl #3]
    9fdc:	str.w	r4, [r8, #12]
    9fe0:	asrs	r3, r0, #2
    9fe2:	movs	r4, #1
    9fe4:	lsls	r4, r3
    9fe6:	cmp	r4, r2
    9fe8:	bhi.w	a100 <_malloc_r+0x1f0>
    9fec:	tst	r4, r2
    9fee:	bne.n	9ffe <_malloc_r+0xee>
    9ff0:	bic.w	r0, r0, #3
    9ff4:	lsls	r4, r4, #1
    9ff6:	tst	r4, r2
    9ff8:	add.w	r0, r0, #4
    9ffc:	beq.n	9ff4 <_malloc_r+0xe4>
    9ffe:	add.w	r9, r7, r0, lsl #3
    a002:	mov	ip, r9
    a004:	mov	r8, r0
    a006:	ldr.w	r1, [ip, #12]
    a00a:	cmp	ip, r1
    a00c:	bne.n	a01e <_malloc_r+0x10e>
    a00e:	b.n	a2f8 <_malloc_r+0x3e8>
    a010:	cmp	r2, #0
    a012:	bge.w	a318 <_malloc_r+0x408>
    a016:	ldr	r1, [r1, #12]
    a018:	cmp	ip, r1
    a01a:	beq.w	a2f8 <_malloc_r+0x3e8>
    a01e:	ldr	r3, [r1, #4]
    a020:	bic.w	r3, r3, #3
    a024:	subs	r2, r3, r5
    a026:	cmp	r2, #15
    a028:	ble.n	a010 <_malloc_r+0x100>
    a02a:	mov	r4, r1
    a02c:	ldr.w	ip, [r1, #12]
    a030:	ldr.w	r8, [r4, #8]!
    a034:	adds	r3, r1, r5
    a036:	orr.w	r5, r5, #1
    a03a:	str	r5, [r1, #4]
    a03c:	orr.w	r1, r2, #1
    a040:	str.w	ip, [r8, #12]
    a044:	mov	r0, r6
    a046:	str.w	r8, [ip, #8]
    a04a:	str	r3, [r7, #20]
    a04c:	str	r3, [r7, #16]
    a04e:	str.w	lr, [r3, #12]
    a052:	str.w	lr, [r3, #8]
    a056:	str	r1, [r3, #4]
    a058:	str	r2, [r3, r2]
    a05a:	bl	a680 <__malloc_unlock>
    a05e:	b.n	a0a0 <_malloc_r+0x190>
    a060:	cmp	r1, #16
    a062:	bhi.n	a0a8 <_malloc_r+0x198>
    a064:	bl	a67c <__malloc_lock>
    a068:	movs	r5, #16
    a06a:	movs	r3, #6
    a06c:	movs	r0, #2
    a06e:	ldr	r7, [pc, #504]	; (a268 <_malloc_r+0x358>)
    a070:	add.w	r3, r7, r3, lsl #2
    a074:	sub.w	r2, r3, #8
    a078:	ldr	r4, [r3, #4]
    a07a:	cmp	r4, r2
    a07c:	beq.w	a30a <_malloc_r+0x3fa>
    a080:	ldr	r3, [r4, #4]
    a082:	ldr	r1, [r4, #12]
    a084:	ldr	r5, [r4, #8]
    a086:	bic.w	r3, r3, #3
    a08a:	add	r3, r4
    a08c:	mov	r0, r6
    a08e:	ldr	r2, [r3, #4]
    a090:	str	r1, [r5, #12]
    a092:	orr.w	r2, r2, #1
    a096:	str	r5, [r1, #8]
    a098:	str	r2, [r3, #4]
    a09a:	bl	a680 <__malloc_unlock>
    a09e:	adds	r4, #8
    a0a0:	mov	r0, r4
    a0a2:	add	sp, #12
    a0a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0a8:	movs	r4, #0
    a0aa:	movs	r3, #12
    a0ac:	mov	r0, r4
    a0ae:	str	r3, [r6, #0]
    a0b0:	add	sp, #12
    a0b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0b6:	movs	r3, #128	; 0x80
    a0b8:	mov.w	lr, #64	; 0x40
    a0bc:	movs	r0, #63	; 0x3f
    a0be:	b.n	9f54 <_malloc_r+0x44>
    a0c0:	mov	r0, lr
    a0c2:	b.n	9f80 <_malloc_r+0x70>
    a0c4:	add	r3, r4
    a0c6:	ldr	r1, [r4, #12]
    a0c8:	ldr	r2, [r3, #4]
    a0ca:	ldr	r5, [r4, #8]
    a0cc:	orr.w	r2, r2, #1
    a0d0:	str	r1, [r5, #12]
    a0d2:	mov	r0, r6
    a0d4:	str	r5, [r1, #8]
    a0d6:	str	r2, [r3, #4]
    a0d8:	bl	a680 <__malloc_unlock>
    a0dc:	adds	r4, #8
    a0de:	mov	r0, r4
    a0e0:	add	sp, #12
    a0e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0e6:	add	r3, r4
    a0e8:	mov	r0, r6
    a0ea:	ldr	r2, [r3, #4]
    a0ec:	orr.w	r2, r2, #1
    a0f0:	str	r2, [r3, #4]
    a0f2:	bl	a680 <__malloc_unlock>
    a0f6:	adds	r4, #8
    a0f8:	mov	r0, r4
    a0fa:	add	sp, #12
    a0fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a100:	ldr	r4, [r7, #8]
    a102:	ldr	r3, [r4, #4]
    a104:	bic.w	r8, r3, #3
    a108:	cmp	r8, r5
    a10a:	bcc.n	a116 <_malloc_r+0x206>
    a10c:	rsb	r3, r5, r8
    a110:	cmp	r3, #15
    a112:	bgt.w	a22e <_malloc_r+0x31e>
    a116:	ldr	r3, [pc, #340]	; (a26c <_malloc_r+0x35c>)
    a118:	ldr.w	r9, [pc, #352]	; a27c <_malloc_r+0x36c>
    a11c:	ldr	r2, [r3, #0]
    a11e:	ldr.w	r3, [r9]
    a122:	adds	r3, #1
    a124:	add	r2, r5
    a126:	add.w	sl, r4, r8
    a12a:	beq.w	a3ee <_malloc_r+0x4de>
    a12e:	add.w	r2, r2, #4096	; 0x1000
    a132:	adds	r2, #15
    a134:	bic.w	r2, r2, #4080	; 0xff0
    a138:	bic.w	r2, r2, #15
    a13c:	mov	r1, r2
    a13e:	mov	r0, r6
    a140:	str	r2, [sp, #4]
    a142:	bl	aa64 <_sbrk_r>
    a146:	cmp.w	r0, #4294967295
    a14a:	mov	fp, r0
    a14c:	ldr	r2, [sp, #4]
    a14e:	beq.w	a402 <_malloc_r+0x4f2>
    a152:	cmp	sl, r0
    a154:	bhi.w	a350 <_malloc_r+0x440>
    a158:	ldr	r3, [pc, #276]	; (a270 <_malloc_r+0x360>)
    a15a:	ldr	r1, [r3, #0]
    a15c:	cmp	sl, fp
    a15e:	add	r1, r2
    a160:	str	r1, [r3, #0]
    a162:	beq.w	a40c <_malloc_r+0x4fc>
    a166:	ldr.w	r0, [r9]
    a16a:	ldr.w	lr, [pc, #272]	; a27c <_malloc_r+0x36c>
    a16e:	adds	r0, #1
    a170:	ittet	ne
    a172:	rsbne	sl, sl, fp
    a176:	addne	r1, sl
    a178:	streq.w	fp, [lr]
    a17c:	strne	r1, [r3, #0]
    a17e:	ands.w	r1, fp, #7
    a182:	beq.w	a3b4 <_malloc_r+0x4a4>
    a186:	rsb	r0, r1, #8
    a18a:	rsb	r1, r1, #4096	; 0x1000
    a18e:	add	fp, r0
    a190:	adds	r1, #8
    a192:	add	r2, fp
    a194:	ubfx	r2, r2, #0, #12
    a198:	rsb	r9, r2, r1
    a19c:	mov	r1, r9
    a19e:	mov	r0, r6
    a1a0:	str	r3, [sp, #4]
    a1a2:	bl	aa64 <_sbrk_r>
    a1a6:	adds	r3, r0, #1
    a1a8:	ldr	r3, [sp, #4]
    a1aa:	beq.w	a42c <_malloc_r+0x51c>
    a1ae:	rsb	r2, fp, r0
    a1b2:	add	r2, r9
    a1b4:	orr.w	r2, r2, #1
    a1b8:	ldr	r1, [r3, #0]
    a1ba:	str.w	fp, [r7, #8]
    a1be:	add	r1, r9
    a1c0:	cmp	r4, r7
    a1c2:	str.w	r2, [fp, #4]
    a1c6:	str	r1, [r3, #0]
    a1c8:	ldr.w	r9, [pc, #164]	; a270 <_malloc_r+0x360>
    a1cc:	beq.n	a1fc <_malloc_r+0x2ec>
    a1ce:	cmp.w	r8, #15
    a1d2:	bls.w	a3d0 <_malloc_r+0x4c0>
    a1d6:	ldr	r2, [r4, #4]
    a1d8:	sub.w	r3, r8, #12
    a1dc:	bic.w	r3, r3, #7
    a1e0:	adds	r0, r4, r3
    a1e2:	and.w	r2, r2, #1
    a1e6:	mov.w	lr, #5
    a1ea:	orrs	r2, r3
    a1ec:	cmp	r3, #15
    a1ee:	str	r2, [r4, #4]
    a1f0:	str.w	lr, [r0, #4]
    a1f4:	str.w	lr, [r0, #8]
    a1f8:	bhi.w	a434 <_malloc_r+0x524>
    a1fc:	ldr	r3, [pc, #116]	; (a274 <_malloc_r+0x364>)
    a1fe:	ldr	r4, [r7, #8]
    a200:	ldr	r2, [r3, #0]
    a202:	cmp	r1, r2
    a204:	it	hi
    a206:	strhi	r1, [r3, #0]
    a208:	ldr	r3, [pc, #108]	; (a278 <_malloc_r+0x368>)
    a20a:	ldr	r2, [r3, #0]
    a20c:	cmp	r1, r2
    a20e:	ldr	r2, [r4, #4]
    a210:	it	hi
    a212:	strhi	r1, [r3, #0]
    a214:	bic.w	r2, r2, #3
    a218:	cmp	r5, r2
    a21a:	sub.w	r3, r2, r5
    a21e:	bhi.n	a224 <_malloc_r+0x314>
    a220:	cmp	r3, #15
    a222:	bgt.n	a22e <_malloc_r+0x31e>
    a224:	mov	r0, r6
    a226:	bl	a680 <__malloc_unlock>
    a22a:	movs	r4, #0
    a22c:	b.n	a0a0 <_malloc_r+0x190>
    a22e:	adds	r2, r4, r5
    a230:	orr.w	r3, r3, #1
    a234:	orr.w	r5, r5, #1
    a238:	str	r5, [r4, #4]
    a23a:	mov	r0, r6
    a23c:	str	r2, [r7, #8]
    a23e:	str	r3, [r2, #4]
    a240:	bl	a680 <__malloc_unlock>
    a244:	adds	r4, #8
    a246:	mov	r0, r4
    a248:	add	sp, #12
    a24a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a24e:	cmp	r3, #20
    a250:	bls.n	a336 <_malloc_r+0x426>
    a252:	cmp	r3, #84	; 0x54
    a254:	bhi.w	a3a0 <_malloc_r+0x490>
    a258:	lsrs	r0, r5, #12
    a25a:	add.w	lr, r0, #111	; 0x6f
    a25e:	mov.w	r3, lr, lsl #1
    a262:	adds	r0, #110	; 0x6e
    a264:	b.n	9f54 <_malloc_r+0x44>
    a266:	nop
    a268:	.word	0x2000199c
    a26c:	.word	0x200035c0
    a270:	.word	0x20003590
    a274:	.word	0x200035b8
    a278:	.word	0x200035bc
    a27c:	.word	0x20001da4
    a280:	lsrs	r2, r3, #9
    a282:	cmp	r2, #4
    a284:	bls.n	a344 <_malloc_r+0x434>
    a286:	cmp	r2, #20
    a288:	bhi.w	a3f2 <_malloc_r+0x4e2>
    a28c:	add.w	r1, r2, #92	; 0x5c
    a290:	lsls	r1, r1, #1
    a292:	adds	r2, #91	; 0x5b
    a294:	add.w	ip, r7, r1, lsl #2
    a298:	ldr.w	r1, [r7, r1, lsl #2]
    a29c:	ldr.w	r8, [pc, #476]	; a47c <_malloc_r+0x56c>
    a2a0:	sub.w	ip, ip, #8
    a2a4:	cmp	ip, r1
    a2a6:	beq.w	a3ba <_malloc_r+0x4aa>
    a2aa:	ldr	r2, [r1, #4]
    a2ac:	bic.w	r2, r2, #3
    a2b0:	cmp	r3, r2
    a2b2:	bcs.n	a2ba <_malloc_r+0x3aa>
    a2b4:	ldr	r1, [r1, #8]
    a2b6:	cmp	ip, r1
    a2b8:	bne.n	a2aa <_malloc_r+0x39a>
    a2ba:	ldr.w	ip, [r1, #12]
    a2be:	ldr	r2, [r7, #4]
    a2c0:	str.w	ip, [r4, #12]
    a2c4:	str	r1, [r4, #8]
    a2c6:	str.w	r4, [ip, #8]
    a2ca:	str	r4, [r1, #12]
    a2cc:	b.n	9fe0 <_malloc_r+0xd0>
    a2ce:	adds	r3, r4, r5
    a2d0:	orr.w	r7, r2, #1
    a2d4:	orr.w	r5, r5, #1
    a2d8:	str	r5, [r4, #4]
    a2da:	mov	r0, r6
    a2dc:	str	r3, [r1, #20]
    a2de:	str	r3, [r1, #16]
    a2e0:	str.w	lr, [r3, #12]
    a2e4:	str.w	lr, [r3, #8]
    a2e8:	str	r7, [r3, #4]
    a2ea:	str	r2, [r3, r2]
    a2ec:	adds	r4, #8
    a2ee:	bl	a680 <__malloc_unlock>
    a2f2:	b.n	a0a0 <_malloc_r+0x190>
    a2f4:	ldr	r2, [r1, #4]
    a2f6:	b.n	9fe0 <_malloc_r+0xd0>
    a2f8:	add.w	r8, r8, #1
    a2fc:	tst.w	r8, #3
    a300:	add.w	ip, ip, #8
    a304:	bne.w	a006 <_malloc_r+0xf6>
    a308:	b.n	a36c <_malloc_r+0x45c>
    a30a:	ldr	r4, [r3, #12]
    a30c:	cmp	r3, r4
    a30e:	it	eq
    a310:	addeq	r0, #2
    a312:	beq.w	9f80 <_malloc_r+0x70>
    a316:	b.n	a080 <_malloc_r+0x170>
    a318:	add	r3, r1
    a31a:	mov	r4, r1
    a31c:	ldr	r2, [r3, #4]
    a31e:	ldr	r1, [r1, #12]
    a320:	ldr.w	r5, [r4, #8]!
    a324:	orr.w	r2, r2, #1
    a328:	str	r2, [r3, #4]
    a32a:	mov	r0, r6
    a32c:	str	r1, [r5, #12]
    a32e:	str	r5, [r1, #8]
    a330:	bl	a680 <__malloc_unlock>
    a334:	b.n	a0a0 <_malloc_r+0x190>
    a336:	add.w	lr, r3, #92	; 0x5c
    a33a:	add.w	r0, r3, #91	; 0x5b
    a33e:	mov.w	r3, lr, lsl #1
    a342:	b.n	9f54 <_malloc_r+0x44>
    a344:	lsrs	r2, r3, #6
    a346:	add.w	r1, r2, #57	; 0x39
    a34a:	lsls	r1, r1, #1
    a34c:	adds	r2, #56	; 0x38
    a34e:	b.n	a294 <_malloc_r+0x384>
    a350:	cmp	r4, r7
    a352:	ldr	r3, [pc, #296]	; (a47c <_malloc_r+0x56c>)
    a354:	beq.w	a158 <_malloc_r+0x248>
    a358:	ldr	r4, [r3, #8]
    a35a:	ldr	r2, [r4, #4]
    a35c:	bic.w	r2, r2, #3
    a360:	b.n	a218 <_malloc_r+0x308>
    a362:	ldr.w	r3, [r9], #-8
    a366:	cmp	r9, r3
    a368:	bne.w	a470 <_malloc_r+0x560>
    a36c:	tst.w	r0, #3
    a370:	add.w	r0, r0, #4294967295
    a374:	bne.n	a362 <_malloc_r+0x452>
    a376:	ldr	r3, [r7, #4]
    a378:	bic.w	r3, r3, r4
    a37c:	str	r3, [r7, #4]
    a37e:	lsls	r4, r4, #1
    a380:	cmp	r4, r3
    a382:	bhi.w	a100 <_malloc_r+0x1f0>
    a386:	cmp	r4, #0
    a388:	beq.w	a100 <_malloc_r+0x1f0>
    a38c:	tst	r4, r3
    a38e:	mov	r0, r8
    a390:	bne.w	9ffe <_malloc_r+0xee>
    a394:	lsls	r4, r4, #1
    a396:	tst	r4, r3
    a398:	add.w	r0, r0, #4
    a39c:	beq.n	a394 <_malloc_r+0x484>
    a39e:	b.n	9ffe <_malloc_r+0xee>
    a3a0:	cmp.w	r3, #340	; 0x154
    a3a4:	bhi.n	a3d8 <_malloc_r+0x4c8>
    a3a6:	lsrs	r0, r5, #15
    a3a8:	add.w	lr, r0, #120	; 0x78
    a3ac:	mov.w	r3, lr, lsl #1
    a3b0:	adds	r0, #119	; 0x77
    a3b2:	b.n	9f54 <_malloc_r+0x44>
    a3b4:	mov.w	r1, #4096	; 0x1000
    a3b8:	b.n	a192 <_malloc_r+0x282>
    a3ba:	movs	r1, #1
    a3bc:	ldr.w	r3, [r8, #4]
    a3c0:	asrs	r2, r2, #2
    a3c2:	lsl.w	r2, r1, r2
    a3c6:	orrs	r2, r3
    a3c8:	str.w	r2, [r8, #4]
    a3cc:	mov	r1, ip
    a3ce:	b.n	a2c0 <_malloc_r+0x3b0>
    a3d0:	movs	r3, #1
    a3d2:	str.w	r3, [fp, #4]
    a3d6:	b.n	a224 <_malloc_r+0x314>
    a3d8:	movw	r2, #1364	; 0x554
    a3dc:	cmp	r3, r2
    a3de:	bhi.n	a422 <_malloc_r+0x512>
    a3e0:	lsrs	r0, r5, #18
    a3e2:	add.w	lr, r0, #125	; 0x7d
    a3e6:	mov.w	r3, lr, lsl #1
    a3ea:	adds	r0, #124	; 0x7c
    a3ec:	b.n	9f54 <_malloc_r+0x44>
    a3ee:	adds	r2, #16
    a3f0:	b.n	a13c <_malloc_r+0x22c>
    a3f2:	cmp	r2, #84	; 0x54
    a3f4:	bhi.n	a444 <_malloc_r+0x534>
    a3f6:	lsrs	r2, r3, #12
    a3f8:	add.w	r1, r2, #111	; 0x6f
    a3fc:	lsls	r1, r1, #1
    a3fe:	adds	r2, #110	; 0x6e
    a400:	b.n	a294 <_malloc_r+0x384>
    a402:	ldr	r4, [r7, #8]
    a404:	ldr	r2, [r4, #4]
    a406:	bic.w	r2, r2, #3
    a40a:	b.n	a218 <_malloc_r+0x308>
    a40c:	ubfx	r0, sl, #0, #12
    a410:	cmp	r0, #0
    a412:	bne.w	a166 <_malloc_r+0x256>
    a416:	add	r2, r8
    a418:	ldr	r3, [r7, #8]
    a41a:	orr.w	r2, r2, #1
    a41e:	str	r2, [r3, #4]
    a420:	b.n	a1fc <_malloc_r+0x2ec>
    a422:	movs	r3, #254	; 0xfe
    a424:	mov.w	lr, #127	; 0x7f
    a428:	movs	r0, #126	; 0x7e
    a42a:	b.n	9f54 <_malloc_r+0x44>
    a42c:	movs	r2, #1
    a42e:	mov.w	r9, #0
    a432:	b.n	a1b8 <_malloc_r+0x2a8>
    a434:	add.w	r1, r4, #8
    a438:	mov	r0, r6
    a43a:	bl	f068 <_free_r>
    a43e:	ldr.w	r1, [r9]
    a442:	b.n	a1fc <_malloc_r+0x2ec>
    a444:	cmp.w	r2, #340	; 0x154
    a448:	bhi.n	a456 <_malloc_r+0x546>
    a44a:	lsrs	r2, r3, #15
    a44c:	add.w	r1, r2, #120	; 0x78
    a450:	lsls	r1, r1, #1
    a452:	adds	r2, #119	; 0x77
    a454:	b.n	a294 <_malloc_r+0x384>
    a456:	movw	r1, #1364	; 0x554
    a45a:	cmp	r2, r1
    a45c:	bhi.n	a46a <_malloc_r+0x55a>
    a45e:	lsrs	r2, r3, #18
    a460:	add.w	r1, r2, #125	; 0x7d
    a464:	lsls	r1, r1, #1
    a466:	adds	r2, #124	; 0x7c
    a468:	b.n	a294 <_malloc_r+0x384>
    a46a:	movs	r1, #254	; 0xfe
    a46c:	movs	r2, #126	; 0x7e
    a46e:	b.n	a294 <_malloc_r+0x384>
    a470:	ldr	r3, [r7, #4]
    a472:	b.n	a37e <_malloc_r+0x46e>
    a474:	lsrs	r0, r5, #3
    a476:	adds	r3, r0, #1
    a478:	lsls	r3, r3, #1
    a47a:	b.n	a06e <_malloc_r+0x15e>
    a47c:	.word	0x2000199c

0000a480 <__ascii_mbtowc>:
    a480:	sub	sp, #8
    a482:	cbz	r1, a498 <__ascii_mbtowc+0x18>
    a484:	cbz	r2, a49e <__ascii_mbtowc+0x1e>
    a486:	cbz	r3, a4a4 <__ascii_mbtowc+0x24>
    a488:	ldrb	r3, [r2, #0]
    a48a:	str	r3, [r1, #0]
    a48c:	ldrb	r2, [r2, #0]
    a48e:	adds	r0, r2, #0
    a490:	it	ne
    a492:	movne	r0, #1
    a494:	add	sp, #8
    a496:	bx	lr
    a498:	add	r1, sp, #4
    a49a:	cmp	r2, #0
    a49c:	bne.n	a486 <__ascii_mbtowc+0x6>
    a49e:	mov	r0, r2
    a4a0:	add	sp, #8
    a4a2:	bx	lr
    a4a4:	mvn.w	r0, #1
    a4a8:	b.n	a494 <__ascii_mbtowc+0x14>
    a4aa:	nop
    a4ac:	movs	r0, r0
	...

0000a4b0 <memchr>:
    a4b0:	and.w	r1, r1, #255	; 0xff
    a4b4:	cmp	r2, #16
    a4b6:	blt.n	a510 <memchr+0x60>
    a4b8:	tst.w	r0, #7
    a4bc:	beq.n	a4d0 <memchr+0x20>
    a4be:	ldrb.w	r3, [r0], #1
    a4c2:	subs	r2, #1
    a4c4:	cmp	r3, r1
    a4c6:	beq.n	a524 <memchr+0x74>
    a4c8:	tst.w	r0, #7
    a4cc:	cbz	r2, a520 <memchr+0x70>
    a4ce:	bne.n	a4be <memchr+0xe>
    a4d0:	push	{r4, r5, r6, r7}
    a4d2:	orr.w	r1, r1, r1, lsl #8
    a4d6:	orr.w	r1, r1, r1, lsl #16
    a4da:	bic.w	r4, r2, #7
    a4de:	mvns.w	r7, #0
    a4e2:	movs	r3, #0
    a4e4:	ldrd	r5, r6, [r0], #8
    a4e8:	subs	r4, #8
    a4ea:	eor.w	r5, r5, r1
    a4ee:	eor.w	r6, r6, r1
    a4f2:	uadd8	r5, r5, r7
    a4f6:	sel	r5, r3, r7
    a4fa:	uadd8	r6, r6, r7
    a4fe:	sel	r6, r5, r7
    a502:	cbnz	r6, a528 <memchr+0x78>
    a504:	bne.n	a4e4 <memchr+0x34>
    a506:	pop	{r4, r5, r6, r7}
    a508:	and.w	r1, r1, #255	; 0xff
    a50c:	and.w	r2, r2, #7
    a510:	cbz	r2, a520 <memchr+0x70>
    a512:	ldrb.w	r3, [r0], #1
    a516:	subs	r2, #1
    a518:	eor.w	r3, r3, r1
    a51c:	cbz	r3, a524 <memchr+0x74>
    a51e:	bne.n	a512 <memchr+0x62>
    a520:	movs	r0, #0
    a522:	bx	lr
    a524:	subs	r0, #1
    a526:	bx	lr
    a528:	cmp	r5, #0
    a52a:	itte	eq
    a52c:	moveq	r5, r6
    a52e:	subeq	r0, #3
    a530:	subne	r0, #7
    a532:	tst.w	r5, #1
    a536:	bne.n	a548 <memchr+0x98>
    a538:	adds	r0, #1
    a53a:	tst.w	r5, #256	; 0x100
    a53e:	ittt	eq
    a540:	addeq	r0, #1
    a542:	tsteq.w	r5, #98304	; 0x18000
    a546:	addeq	r0, #1
    a548:	pop	{r4, r5, r6, r7}
    a54a:	subs	r0, #1
    a54c:	bx	lr
    a54e:	nop

0000a550 <memcmp>:
    a550:	cmp	r2, #3
    a552:	push	{r4, r5, r6}
    a554:	bls.n	a5a4 <memcmp+0x54>
    a556:	orr.w	r3, r0, r1
    a55a:	lsls	r3, r3, #30
    a55c:	beq.n	a582 <memcmp+0x32>
    a55e:	ldrb	r4, [r0, #0]
    a560:	ldrb	r5, [r1, #0]
    a562:	cmp	r4, r5
    a564:	bne.n	a5ac <memcmp+0x5c>
    a566:	add	r2, r0
    a568:	adds	r3, r0, #1
    a56a:	b.n	a578 <memcmp+0x28>
    a56c:	ldrb.w	r4, [r3], #1
    a570:	ldrb.w	r5, [r1, #1]!
    a574:	cmp	r4, r5
    a576:	bne.n	a5ac <memcmp+0x5c>
    a578:	cmp	r3, r2
    a57a:	bne.n	a56c <memcmp+0x1c>
    a57c:	movs	r0, #0
    a57e:	pop	{r4, r5, r6}
    a580:	bx	lr
    a582:	mov	r4, r1
    a584:	mov	r3, r0
    a586:	ldr	r6, [r3, #0]
    a588:	ldr	r5, [r4, #0]
    a58a:	cmp	r6, r5
    a58c:	mov	r0, r3
    a58e:	mov	r1, r4
    a590:	add.w	r3, r3, #4
    a594:	add.w	r4, r4, #4
    a598:	bne.n	a55e <memcmp+0xe>
    a59a:	subs	r2, #4
    a59c:	cmp	r2, #3
    a59e:	mov	r0, r3
    a5a0:	mov	r1, r4
    a5a2:	bhi.n	a586 <memcmp+0x36>
    a5a4:	cmp	r2, #0
    a5a6:	bne.n	a55e <memcmp+0xe>
    a5a8:	mov	r0, r2
    a5aa:	b.n	a57e <memcmp+0x2e>
    a5ac:	subs	r0, r4, r5
    a5ae:	pop	{r4, r5, r6}
    a5b0:	bx	lr
    a5b2:	nop

0000a5b4 <memmove>:
    a5b4:	cmp	r0, r1
    a5b6:	push	{r4, r5, r6, r7, lr}
    a5b8:	bls.n	a5d6 <memmove+0x22>
    a5ba:	adds	r3, r1, r2
    a5bc:	cmp	r0, r3
    a5be:	bcs.n	a5d6 <memmove+0x22>
    a5c0:	adds	r1, r0, r2
    a5c2:	cmp	r2, #0
    a5c4:	beq.n	a66a <memmove+0xb6>
    a5c6:	subs	r2, r3, r2
    a5c8:	ldrb.w	r4, [r3, #-1]!
    a5cc:	strb.w	r4, [r1, #-1]!
    a5d0:	cmp	r3, r2
    a5d2:	bne.n	a5c8 <memmove+0x14>
    a5d4:	pop	{r4, r5, r6, r7, pc}
    a5d6:	cmp	r2, #15
    a5d8:	bls.n	a66c <memmove+0xb8>
    a5da:	orr.w	r3, r1, r0
    a5de:	lsls	r3, r3, #30
    a5e0:	bne.n	a670 <memmove+0xbc>
    a5e2:	add.w	r4, r0, #16
    a5e6:	add.w	r3, r1, #16
    a5ea:	mov	r5, r2
    a5ec:	ldr.w	r6, [r3, #-16]
    a5f0:	str.w	r6, [r4, #-16]
    a5f4:	ldr.w	r6, [r3, #-12]
    a5f8:	str.w	r6, [r4, #-12]
    a5fc:	ldr.w	r6, [r3, #-8]
    a600:	str.w	r6, [r4, #-8]
    a604:	subs	r5, #16
    a606:	ldr.w	r6, [r3, #-4]
    a60a:	str.w	r6, [r4, #-4]
    a60e:	cmp	r5, #15
    a610:	add.w	r3, r3, #16
    a614:	add.w	r4, r4, #16
    a618:	bhi.n	a5ec <memmove+0x38>
    a61a:	sub.w	r3, r2, #16
    a61e:	bic.w	r3, r3, #15
    a622:	and.w	lr, r2, #15
    a626:	adds	r3, #16
    a628:	cmp.w	lr, #3
    a62c:	add	r1, r3
    a62e:	add	r3, r0
    a630:	bls.n	a676 <memmove+0xc2>
    a632:	subs	r6, r3, #4
    a634:	mov	r5, r1
    a636:	mov	r4, lr
    a638:	subs	r4, #4
    a63a:	ldr.w	r7, [r5], #4
    a63e:	str.w	r7, [r6, #4]!
    a642:	cmp	r4, #3
    a644:	bhi.n	a638 <memmove+0x84>
    a646:	sub.w	r4, lr, #4
    a64a:	bic.w	r4, r4, #3
    a64e:	adds	r4, #4
    a650:	add	r3, r4
    a652:	add	r1, r4
    a654:	and.w	r2, r2, #3
    a658:	cbz	r2, a674 <memmove+0xc0>
    a65a:	subs	r3, #1
    a65c:	add	r2, r1
    a65e:	ldrb.w	r4, [r1], #1
    a662:	strb.w	r4, [r3, #1]!
    a666:	cmp	r2, r1
    a668:	bne.n	a65e <memmove+0xaa>
    a66a:	pop	{r4, r5, r6, r7, pc}
    a66c:	mov	r3, r0
    a66e:	b.n	a658 <memmove+0xa4>
    a670:	mov	r3, r0
    a672:	b.n	a65a <memmove+0xa6>
    a674:	pop	{r4, r5, r6, r7, pc}
    a676:	mov	r2, lr
    a678:	b.n	a658 <memmove+0xa4>
    a67a:	nop

0000a67c <__malloc_lock>:
    a67c:	bx	lr
    a67e:	nop

0000a680 <__malloc_unlock>:
    a680:	bx	lr
    a682:	nop

0000a684 <_realloc_r>:
    a684:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a688:	mov	r7, r2
    a68a:	sub	sp, #12
    a68c:	cmp	r1, #0
    a68e:	beq.w	a814 <_realloc_r+0x190>
    a692:	mov	r6, r1
    a694:	mov	r9, r0
    a696:	add.w	r5, r7, #11
    a69a:	bl	a67c <__malloc_lock>
    a69e:	ldr.w	lr, [r6, #-4]
    a6a2:	cmp	r5, #22
    a6a4:	bic.w	r4, lr, #3
    a6a8:	sub.w	r8, r6, #8
    a6ac:	bhi.n	a730 <_realloc_r+0xac>
    a6ae:	movs	r2, #16
    a6b0:	mov	r5, r2
    a6b2:	cmp	r7, r5
    a6b4:	bhi.n	a73a <_realloc_r+0xb6>
    a6b6:	cmp	r4, r2
    a6b8:	bge.n	a7a6 <_realloc_r+0x122>
    a6ba:	ldr	r3, [pc, #804]	; (a9e0 <_realloc_r+0x35c>)
    a6bc:	ldr	r1, [r3, #8]
    a6be:	add.w	r0, r8, r4
    a6c2:	cmp	r0, r1
    a6c4:	ldr	r1, [r0, #4]
    a6c6:	beq.w	a87c <_realloc_r+0x1f8>
    a6ca:	bic.w	r3, r1, #1
    a6ce:	add	r3, r0
    a6d0:	ldr	r3, [r3, #4]
    a6d2:	lsls	r3, r3, #31
    a6d4:	bpl.n	a7d2 <_realloc_r+0x14e>
    a6d6:	tst.w	lr, #1
    a6da:	beq.n	a748 <_realloc_r+0xc4>
    a6dc:	mov	r1, r7
    a6de:	mov	r0, r9
    a6e0:	bl	9f10 <_malloc_r>
    a6e4:	mov	r7, r0
    a6e6:	cbz	r0, a722 <_realloc_r+0x9e>
    a6e8:	ldr.w	r3, [r6, #-4]
    a6ec:	bic.w	r3, r3, #1
    a6f0:	add	r3, r8
    a6f2:	sub.w	r2, r0, #8
    a6f6:	cmp	r2, r3
    a6f8:	beq.w	a984 <_realloc_r+0x300>
    a6fc:	subs	r2, r4, #4
    a6fe:	cmp	r2, #36	; 0x24
    a700:	bhi.w	a966 <_realloc_r+0x2e2>
    a704:	cmp	r2, #19
    a706:	bhi.w	a912 <_realloc_r+0x28e>
    a70a:	mov	r3, r0
    a70c:	mov	r2, r6
    a70e:	ldr	r1, [r2, #0]
    a710:	str	r1, [r3, #0]
    a712:	ldr	r1, [r2, #4]
    a714:	str	r1, [r3, #4]
    a716:	ldr	r2, [r2, #8]
    a718:	str	r2, [r3, #8]
    a71a:	mov	r1, r6
    a71c:	mov	r0, r9
    a71e:	bl	f068 <_free_r>
    a722:	mov	r0, r9
    a724:	bl	a680 <__malloc_unlock>
    a728:	mov	r0, r7
    a72a:	add	sp, #12
    a72c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a730:	bic.w	r5, r5, #7
    a734:	cmp	r5, #0
    a736:	mov	r2, r5
    a738:	bge.n	a6b2 <_realloc_r+0x2e>
    a73a:	movs	r3, #12
    a73c:	movs	r0, #0
    a73e:	str.w	r3, [r9]
    a742:	add	sp, #12
    a744:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a748:	ldr.w	r3, [r6, #-8]
    a74c:	rsb	sl, r3, r8
    a750:	ldr.w	r3, [sl, #4]
    a754:	bic.w	ip, r3, #3
    a758:	add.w	r3, r4, ip
    a75c:	cmp	r3, r2
    a75e:	blt.n	a6dc <_realloc_r+0x58>
    a760:	mov	r7, sl
    a762:	ldr.w	r1, [sl, #12]
    a766:	ldr.w	r0, [r7, #8]!
    a76a:	subs	r2, r4, #4
    a76c:	cmp	r2, #36	; 0x24
    a76e:	str	r1, [r0, #12]
    a770:	str	r0, [r1, #8]
    a772:	bhi.w	a9a4 <_realloc_r+0x320>
    a776:	cmp	r2, #19
    a778:	bls.w	a9a0 <_realloc_r+0x31c>
    a77c:	ldr	r1, [r6, #0]
    a77e:	str.w	r1, [sl, #8]
    a782:	ldr	r1, [r6, #4]
    a784:	str.w	r1, [sl, #12]
    a788:	cmp	r2, #27
    a78a:	bhi.w	a9e4 <_realloc_r+0x360>
    a78e:	adds	r6, #8
    a790:	add.w	r2, sl, #16
    a794:	ldr	r1, [r6, #0]
    a796:	str	r1, [r2, #0]
    a798:	ldr	r1, [r6, #4]
    a79a:	str	r1, [r2, #4]
    a79c:	ldr	r1, [r6, #8]
    a79e:	str	r1, [r2, #8]
    a7a0:	mov	r6, r7
    a7a2:	mov	r4, r3
    a7a4:	mov	r8, sl
    a7a6:	subs	r3, r4, r5
    a7a8:	cmp	r3, #15
    a7aa:	bhi.n	a7e8 <_realloc_r+0x164>
    a7ac:	ldr.w	r3, [r8, #4]
    a7b0:	and.w	r3, r3, #1
    a7b4:	orrs	r3, r4
    a7b6:	add	r4, r8
    a7b8:	str.w	r3, [r8, #4]
    a7bc:	ldr	r3, [r4, #4]
    a7be:	orr.w	r3, r3, #1
    a7c2:	str	r3, [r4, #4]
    a7c4:	mov	r0, r9
    a7c6:	bl	a680 <__malloc_unlock>
    a7ca:	mov	r0, r6
    a7cc:	add	sp, #12
    a7ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7d2:	bic.w	r1, r1, #3
    a7d6:	add	r1, r4
    a7d8:	cmp	r1, r2
    a7da:	blt.n	a820 <_realloc_r+0x19c>
    a7dc:	ldr	r3, [r0, #12]
    a7de:	ldr	r2, [r0, #8]
    a7e0:	mov	r4, r1
    a7e2:	str	r3, [r2, #12]
    a7e4:	str	r2, [r3, #8]
    a7e6:	b.n	a7a6 <_realloc_r+0x122>
    a7e8:	ldr.w	r2, [r8, #4]
    a7ec:	add.w	r1, r8, r5
    a7f0:	and.w	r2, r2, #1
    a7f4:	orrs	r5, r2
    a7f6:	orr.w	r2, r3, #1
    a7fa:	add	r3, r1
    a7fc:	str.w	r5, [r8, #4]
    a800:	str	r2, [r1, #4]
    a802:	ldr	r2, [r3, #4]
    a804:	orr.w	r2, r2, #1
    a808:	adds	r1, #8
    a80a:	str	r2, [r3, #4]
    a80c:	mov	r0, r9
    a80e:	bl	f068 <_free_r>
    a812:	b.n	a7c4 <_realloc_r+0x140>
    a814:	mov	r1, r2
    a816:	add	sp, #12
    a818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a81c:	b.w	9f10 <_malloc_r>
    a820:	tst.w	lr, #1
    a824:	bne.w	a6dc <_realloc_r+0x58>
    a828:	ldr.w	r3, [r6, #-8]
    a82c:	rsb	sl, r3, r8
    a830:	ldr.w	r3, [sl, #4]
    a834:	bic.w	ip, r3, #3
    a838:	add.w	lr, r1, ip
    a83c:	cmp	lr, r2
    a83e:	blt.n	a758 <_realloc_r+0xd4>
    a840:	ldr	r3, [r0, #12]
    a842:	ldr	r2, [r0, #8]
    a844:	mov	r7, sl
    a846:	str	r3, [r2, #12]
    a848:	str	r2, [r3, #8]
    a84a:	ldr.w	r1, [r7, #8]!
    a84e:	ldr.w	r3, [sl, #12]
    a852:	str	r3, [r1, #12]
    a854:	subs	r2, r4, #4
    a856:	cmp	r2, #36	; 0x24
    a858:	str	r1, [r3, #8]
    a85a:	bhi.w	a990 <_realloc_r+0x30c>
    a85e:	cmp	r2, #19
    a860:	bls.n	a928 <_realloc_r+0x2a4>
    a862:	ldr	r3, [r6, #0]
    a864:	str.w	r3, [sl, #8]
    a868:	ldr	r3, [r6, #4]
    a86a:	str.w	r3, [sl, #12]
    a86e:	cmp	r2, #27
    a870:	bhi.w	a9b4 <_realloc_r+0x330>
    a874:	adds	r6, #8
    a876:	add.w	r3, sl, #16
    a87a:	b.n	a92a <_realloc_r+0x2a6>
    a87c:	bic.w	fp, r1, #3
    a880:	add	fp, r4
    a882:	add.w	r0, r5, #16
    a886:	cmp	fp, r0
    a888:	bge.n	a93e <_realloc_r+0x2ba>
    a88a:	tst.w	lr, #1
    a88e:	bne.w	a6dc <_realloc_r+0x58>
    a892:	ldr.w	r1, [r6, #-8]
    a896:	rsb	sl, r1, r8
    a89a:	ldr.w	r1, [sl, #4]
    a89e:	bic.w	ip, r1, #3
    a8a2:	add	fp, ip
    a8a4:	cmp	r0, fp
    a8a6:	bgt.w	a758 <_realloc_r+0xd4>
    a8aa:	mov	r7, sl
    a8ac:	ldr.w	r1, [sl, #12]
    a8b0:	ldr.w	r0, [r7, #8]!
    a8b4:	subs	r2, r4, #4
    a8b6:	cmp	r2, #36	; 0x24
    a8b8:	str	r1, [r0, #12]
    a8ba:	str	r0, [r1, #8]
    a8bc:	bhi.w	aa28 <_realloc_r+0x3a4>
    a8c0:	cmp	r2, #19
    a8c2:	bls.w	aa10 <_realloc_r+0x38c>
    a8c6:	ldr	r1, [r6, #0]
    a8c8:	str.w	r1, [sl, #8]
    a8cc:	ldr	r1, [r6, #4]
    a8ce:	str.w	r1, [sl, #12]
    a8d2:	cmp	r2, #27
    a8d4:	bhi.w	aa36 <_realloc_r+0x3b2>
    a8d8:	adds	r6, #8
    a8da:	add.w	r2, sl, #16
    a8de:	ldr	r1, [r6, #0]
    a8e0:	str	r1, [r2, #0]
    a8e2:	ldr	r1, [r6, #4]
    a8e4:	str	r1, [r2, #4]
    a8e6:	ldr	r1, [r6, #8]
    a8e8:	str	r1, [r2, #8]
    a8ea:	add.w	r1, sl, r5
    a8ee:	rsb	r2, r5, fp
    a8f2:	orr.w	r2, r2, #1
    a8f6:	str	r1, [r3, #8]
    a8f8:	str	r2, [r1, #4]
    a8fa:	ldr.w	r3, [sl, #4]
    a8fe:	and.w	r3, r3, #1
    a902:	orrs	r5, r3
    a904:	mov	r0, r9
    a906:	str.w	r5, [sl, #4]
    a90a:	bl	a680 <__malloc_unlock>
    a90e:	mov	r0, r7
    a910:	b.n	a7cc <_realloc_r+0x148>
    a912:	ldr	r3, [r6, #0]
    a914:	str	r3, [r0, #0]
    a916:	ldr	r3, [r6, #4]
    a918:	str	r3, [r0, #4]
    a91a:	cmp	r2, #27
    a91c:	bhi.n	a96e <_realloc_r+0x2ea>
    a91e:	add.w	r3, r0, #8
    a922:	add.w	r2, r6, #8
    a926:	b.n	a70e <_realloc_r+0x8a>
    a928:	mov	r3, r7
    a92a:	ldr	r2, [r6, #0]
    a92c:	str	r2, [r3, #0]
    a92e:	ldr	r2, [r6, #4]
    a930:	str	r2, [r3, #4]
    a932:	ldr	r2, [r6, #8]
    a934:	str	r2, [r3, #8]
    a936:	mov	r6, r7
    a938:	mov	r4, lr
    a93a:	mov	r8, sl
    a93c:	b.n	a7a6 <_realloc_r+0x122>
    a93e:	add.w	r1, r8, r5
    a942:	rsb	fp, r5, fp
    a946:	orr.w	r2, fp, #1
    a94a:	str	r1, [r3, #8]
    a94c:	str	r2, [r1, #4]
    a94e:	ldr.w	r3, [r6, #-4]
    a952:	and.w	r3, r3, #1
    a956:	orrs	r5, r3
    a958:	mov	r0, r9
    a95a:	str.w	r5, [r6, #-4]
    a95e:	bl	a680 <__malloc_unlock>
    a962:	mov	r0, r6
    a964:	b.n	a7cc <_realloc_r+0x148>
    a966:	mov	r1, r6
    a968:	bl	a5b4 <memmove>
    a96c:	b.n	a71a <_realloc_r+0x96>
    a96e:	ldr	r3, [r6, #8]
    a970:	str	r3, [r0, #8]
    a972:	ldr	r3, [r6, #12]
    a974:	str	r3, [r0, #12]
    a976:	cmp	r2, #36	; 0x24
    a978:	beq.n	a9cc <_realloc_r+0x348>
    a97a:	add.w	r3, r0, #16
    a97e:	add.w	r2, r6, #16
    a982:	b.n	a70e <_realloc_r+0x8a>
    a984:	ldr.w	r3, [r0, #-4]
    a988:	bic.w	r3, r3, #3
    a98c:	add	r4, r3
    a98e:	b.n	a7a6 <_realloc_r+0x122>
    a990:	mov	r1, r6
    a992:	mov	r0, r7
    a994:	mov	r4, lr
    a996:	mov	r8, sl
    a998:	bl	a5b4 <memmove>
    a99c:	mov	r6, r7
    a99e:	b.n	a7a6 <_realloc_r+0x122>
    a9a0:	mov	r2, r7
    a9a2:	b.n	a794 <_realloc_r+0x110>
    a9a4:	mov	r1, r6
    a9a6:	mov	r0, r7
    a9a8:	mov	r4, r3
    a9aa:	mov	r8, sl
    a9ac:	bl	a5b4 <memmove>
    a9b0:	mov	r6, r7
    a9b2:	b.n	a7a6 <_realloc_r+0x122>
    a9b4:	ldr	r3, [r6, #8]
    a9b6:	str.w	r3, [sl, #16]
    a9ba:	ldr	r3, [r6, #12]
    a9bc:	str.w	r3, [sl, #20]
    a9c0:	cmp	r2, #36	; 0x24
    a9c2:	beq.n	a9fc <_realloc_r+0x378>
    a9c4:	adds	r6, #16
    a9c6:	add.w	r3, sl, #24
    a9ca:	b.n	a92a <_realloc_r+0x2a6>
    a9cc:	ldr	r3, [r6, #16]
    a9ce:	str	r3, [r0, #16]
    a9d0:	ldr	r3, [r6, #20]
    a9d2:	str	r3, [r0, #20]
    a9d4:	add.w	r2, r6, #24
    a9d8:	add.w	r3, r0, #24
    a9dc:	b.n	a70e <_realloc_r+0x8a>
    a9de:	nop
    a9e0:	.word	0x2000199c
    a9e4:	ldr	r1, [r6, #8]
    a9e6:	str.w	r1, [sl, #16]
    a9ea:	ldr	r1, [r6, #12]
    a9ec:	str.w	r1, [sl, #20]
    a9f0:	cmp	r2, #36	; 0x24
    a9f2:	beq.n	aa14 <_realloc_r+0x390>
    a9f4:	adds	r6, #16
    a9f6:	add.w	r2, sl, #24
    a9fa:	b.n	a794 <_realloc_r+0x110>
    a9fc:	ldr	r3, [r6, #16]
    a9fe:	str.w	r3, [sl, #24]
    aa02:	ldr	r3, [r6, #20]
    aa04:	str.w	r3, [sl, #28]
    aa08:	adds	r6, #24
    aa0a:	add.w	r3, sl, #32
    aa0e:	b.n	a92a <_realloc_r+0x2a6>
    aa10:	mov	r2, r7
    aa12:	b.n	a8de <_realloc_r+0x25a>
    aa14:	ldr	r2, [r6, #16]
    aa16:	str.w	r2, [sl, #24]
    aa1a:	ldr	r2, [r6, #20]
    aa1c:	str.w	r2, [sl, #28]
    aa20:	adds	r6, #24
    aa22:	add.w	r2, sl, #32
    aa26:	b.n	a794 <_realloc_r+0x110>
    aa28:	mov	r1, r6
    aa2a:	mov	r0, r7
    aa2c:	str	r3, [sp, #4]
    aa2e:	bl	a5b4 <memmove>
    aa32:	ldr	r3, [sp, #4]
    aa34:	b.n	a8ea <_realloc_r+0x266>
    aa36:	ldr	r1, [r6, #8]
    aa38:	str.w	r1, [sl, #16]
    aa3c:	ldr	r1, [r6, #12]
    aa3e:	str.w	r1, [sl, #20]
    aa42:	cmp	r2, #36	; 0x24
    aa44:	beq.n	aa4e <_realloc_r+0x3ca>
    aa46:	adds	r6, #16
    aa48:	add.w	r2, sl, #24
    aa4c:	b.n	a8de <_realloc_r+0x25a>
    aa4e:	ldr	r2, [r6, #16]
    aa50:	str.w	r2, [sl, #24]
    aa54:	ldr	r2, [r6, #20]
    aa56:	str.w	r2, [sl, #28]
    aa5a:	adds	r6, #24
    aa5c:	add.w	r2, sl, #32
    aa60:	b.n	a8de <_realloc_r+0x25a>
    aa62:	nop

0000aa64 <_sbrk_r>:
    aa64:	push	{r3, r4, r5, lr}
    aa66:	ldr	r4, [pc, #28]	; (aa84 <_sbrk_r+0x20>)
    aa68:	movs	r3, #0
    aa6a:	mov	r5, r0
    aa6c:	mov	r0, r1
    aa6e:	str	r3, [r4, #0]
    aa70:	bl	9390 <_sbrk>
    aa74:	adds	r3, r0, #1
    aa76:	beq.n	aa7a <_sbrk_r+0x16>
    aa78:	pop	{r3, r4, r5, pc}
    aa7a:	ldr	r3, [r4, #0]
    aa7c:	cmp	r3, #0
    aa7e:	beq.n	aa78 <_sbrk_r+0x14>
    aa80:	str	r3, [r5, #0]
    aa82:	pop	{r3, r4, r5, pc}
    aa84:	.word	0x20008ba0

0000aa88 <sprintf>:
    aa88:	push	{r1, r2, r3}
    aa8a:	push	{r4, r5, r6, r7, lr}
    aa8c:	sub	sp, #112	; 0x70
    aa8e:	add	r3, sp, #132	; 0x84
    aa90:	ldr	r1, [pc, #60]	; (aad0 <sprintf+0x48>)
    aa92:	ldr.w	r2, [r3], #4
    aa96:	str	r3, [sp, #4]
    aa98:	mov	r5, r0
    aa9a:	mvn.w	r4, #2147483648	; 0x80000000
    aa9e:	ldr	r0, [r1, #0]
    aaa0:	str	r5, [sp, #8]
    aaa2:	mov.w	r7, #520	; 0x208
    aaa6:	movw	r6, #65535	; 0xffff
    aaaa:	add	r1, sp, #8
    aaac:	str	r5, [sp, #24]
    aaae:	strh.w	r7, [sp, #20]
    aab2:	str	r4, [sp, #16]
    aab4:	str	r4, [sp, #28]
    aab6:	strh.w	r6, [sp, #22]
    aaba:	bl	bce0 <_svfprintf_r>
    aabe:	ldr	r3, [sp, #8]
    aac0:	movs	r2, #0
    aac2:	strb	r2, [r3, #0]
    aac4:	add	sp, #112	; 0x70
    aac6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    aaca:	add	sp, #12
    aacc:	bx	lr
    aace:	nop
    aad0:	.word	0x20001dac

0000aad4 <sscanf>:
    aad4:	push	{r1, r2, r3}
    aad6:	push	{r4, r5, r6, r7, lr}
    aad8:	sub	sp, #112	; 0x70
    aada:	add	r4, sp, #132	; 0x84
    aadc:	mov.w	r2, #516	; 0x204
    aae0:	ldr.w	r6, [r4], #4
    aae4:	strh.w	r2, [sp, #20]
    aae8:	str	r0, [sp, #8]
    aaea:	str	r0, [sp, #24]
    aaec:	bl	ab40 <strlen>
    aaf0:	ldr	r3, [pc, #48]	; (ab24 <sscanf+0x50>)
    aaf2:	str	r4, [sp, #4]
    aaf4:	mov	r5, r0
    aaf6:	mov	r2, r6
    aaf8:	ldr	r7, [pc, #44]	; (ab28 <sscanf+0x54>)
    aafa:	ldr	r0, [r3, #0]
    aafc:	str	r5, [sp, #12]
    aafe:	mov	r3, r4
    ab00:	movw	r6, #65535	; 0xffff
    ab04:	movs	r4, #0
    ab06:	add	r1, sp, #8
    ab08:	str	r5, [sp, #28]
    ab0a:	str	r7, [sp, #40]	; 0x28
    ab0c:	str	r4, [sp, #56]	; 0x38
    ab0e:	str	r4, [sp, #76]	; 0x4c
    ab10:	strh.w	r6, [sp, #22]
    ab14:	bl	d250 <__ssvfscanf_r>
    ab18:	add	sp, #112	; 0x70
    ab1a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ab1e:	add	sp, #12
    ab20:	bx	lr
    ab22:	nop
    ab24:	.word	0x20001dac
    ab28:	.word	0x0000ab2d

0000ab2c <__seofread>:
    ab2c:	movs	r0, #0
    ab2e:	bx	lr
	...

0000ab40 <strlen>:
    ab40:	pld	[r0]
    ab44:	strd	r4, r5, [sp, #-8]!
    ab48:	bic.w	r1, r0, #7
    ab4c:	mvn.w	ip, #0
    ab50:	ands.w	r4, r0, #7
    ab54:	pld	[r1, #32]
    ab58:	bne.w	abee <strlen+0xae>
    ab5c:	mov.w	r4, #0
    ab60:	mvn.w	r0, #7
    ab64:	ldrd	r2, r3, [r1]
    ab68:	pld	[r1, #64]	; 0x40
    ab6c:	add.w	r0, r0, #8
    ab70:	uadd8	r2, r2, ip
    ab74:	sel	r2, r4, ip
    ab78:	uadd8	r3, r3, ip
    ab7c:	sel	r3, r2, ip
    ab80:	cbnz	r3, abd6 <strlen+0x96>
    ab82:	ldrd	r2, r3, [r1, #8]
    ab86:	uadd8	r2, r2, ip
    ab8a:	add.w	r0, r0, #8
    ab8e:	sel	r2, r4, ip
    ab92:	uadd8	r3, r3, ip
    ab96:	sel	r3, r2, ip
    ab9a:	cbnz	r3, abd6 <strlen+0x96>
    ab9c:	ldrd	r2, r3, [r1, #16]
    aba0:	uadd8	r2, r2, ip
    aba4:	add.w	r0, r0, #8
    aba8:	sel	r2, r4, ip
    abac:	uadd8	r3, r3, ip
    abb0:	sel	r3, r2, ip
    abb4:	cbnz	r3, abd6 <strlen+0x96>
    abb6:	ldrd	r2, r3, [r1, #24]
    abba:	add.w	r1, r1, #32
    abbe:	uadd8	r2, r2, ip
    abc2:	add.w	r0, r0, #8
    abc6:	sel	r2, r4, ip
    abca:	uadd8	r3, r3, ip
    abce:	sel	r3, r2, ip
    abd2:	cmp	r3, #0
    abd4:	beq.n	ab64 <strlen+0x24>
    abd6:	cmp	r2, #0
    abd8:	itt	eq
    abda:	addeq	r0, #4
    abdc:	moveq	r2, r3
    abde:	rev	r2, r2
    abe0:	clz	r2, r2
    abe4:	ldrd	r4, r5, [sp], #8
    abe8:	add.w	r0, r0, r2, lsr #3
    abec:	bx	lr
    abee:	ldrd	r2, r3, [r1]
    abf2:	and.w	r5, r4, #3
    abf6:	rsb	r0, r4, #0
    abfa:	mov.w	r5, r5, lsl #3
    abfe:	tst.w	r4, #4
    ac02:	pld	[r1, #64]	; 0x40
    ac06:	lsl.w	r5, ip, r5
    ac0a:	orn	r2, r2, r5
    ac0e:	itt	ne
    ac10:	ornne	r3, r3, r5
    ac14:	movne	r2, ip
    ac16:	mov.w	r4, #0
    ac1a:	b.n	ab70 <strlen+0x30>

0000ac1c <strncmp>:
    ac1c:	cmp	r2, #0
    ac1e:	beq.n	aca4 <strncmp+0x88>
    ac20:	orr.w	r3, r0, r1
    ac24:	ands.w	r3, r3, #3
    ac28:	push	{r4, r5, r6, r7}
    ac2a:	bne.n	ac78 <strncmp+0x5c>
    ac2c:	cmp	r2, #3
    ac2e:	bls.n	ac78 <strncmp+0x5c>
    ac30:	ldr	r4, [r0, #0]
    ac32:	ldr	r5, [r1, #0]
    ac34:	cmp	r4, r5
    ac36:	bne.n	ac78 <strncmp+0x5c>
    ac38:	subs	r2, #4
    ac3a:	beq.n	aca8 <strncmp+0x8c>
    ac3c:	sub.w	r5, r4, #16843009	; 0x1010101
    ac40:	bic.w	r4, r5, r4
    ac44:	tst.w	r4, #2155905152	; 0x80808080
    ac48:	bne.n	acae <strncmp+0x92>
    ac4a:	adds	r7, r0, #4
    ac4c:	adds	r5, r1, #4
    ac4e:	b.n	ac6c <strncmp+0x50>
    ac50:	ldr.w	r3, [r7], #4
    ac54:	ldr	r6, [r1, #0]
    ac56:	sub.w	r4, r3, #16843009	; 0x1010101
    ac5a:	cmp	r3, r6
    ac5c:	bic.w	r4, r4, r3
    ac60:	bne.n	ac78 <strncmp+0x5c>
    ac62:	subs	r2, #4
    ac64:	beq.n	aca8 <strncmp+0x8c>
    ac66:	tst.w	r4, #2155905152	; 0x80808080
    ac6a:	bne.n	acb4 <strncmp+0x98>
    ac6c:	cmp	r2, #3
    ac6e:	mov	r1, r5
    ac70:	mov	r0, r7
    ac72:	add.w	r5, r5, #4
    ac76:	bhi.n	ac50 <strncmp+0x34>
    ac78:	ldrb	r3, [r0, #0]
    ac7a:	ldrb	r4, [r1, #0]
    ac7c:	cmp	r4, r3
    ac7e:	add.w	r2, r2, #4294967295
    ac82:	bne.n	ac9e <strncmp+0x82>
    ac84:	cbz	r2, aca8 <strncmp+0x8c>
    ac86:	cbnz	r4, ac8e <strncmp+0x72>
    ac88:	b.n	acb8 <strncmp+0x9c>
    ac8a:	cbz	r2, aca8 <strncmp+0x8c>
    ac8c:	cbz	r3, acae <strncmp+0x92>
    ac8e:	ldrb.w	r3, [r0, #1]!
    ac92:	ldrb.w	r4, [r1, #1]!
    ac96:	cmp	r3, r4
    ac98:	add.w	r2, r2, #4294967295
    ac9c:	beq.n	ac8a <strncmp+0x6e>
    ac9e:	subs	r0, r3, r4
    aca0:	pop	{r4, r5, r6, r7}
    aca2:	bx	lr
    aca4:	mov	r0, r2
    aca6:	bx	lr
    aca8:	mov	r0, r2
    acaa:	pop	{r4, r5, r6, r7}
    acac:	bx	lr
    acae:	mov	r0, r3
    acb0:	pop	{r4, r5, r6, r7}
    acb2:	bx	lr
    acb4:	movs	r0, #0
    acb6:	b.n	aca0 <strncmp+0x84>
    acb8:	mov	r0, r4
    acba:	b.n	aca0 <strncmp+0x84>

0000acbc <sulp>:
    acbc:	push	{r4, r5, r6, lr}
    acbe:	mov	r4, r0
    acc0:	mov	r5, r1
    acc2:	mov	r6, r2
    acc4:	vmov	d0, r4, r5
    acc8:	bl	10038 <__ulp>
    accc:	cbz	r6, acee <sulp+0x32>
    acce:	ubfx	r3, r5, #20, #11
    acd2:	rsb	r3, r3, #107	; 0x6b
    acd6:	cmp	r3, #0
    acd8:	ble.n	acee <sulp+0x32>
    acda:	lsls	r3, r3, #20
    acdc:	add.w	r1, r3, #1069547520	; 0x3fc00000
    ace0:	movs	r0, #0
    ace2:	add.w	r1, r1, #3145728	; 0x300000
    ace6:	vmov	d7, r0, r1
    acea:	vmul.f64	d0, d0, d7
    acee:	pop	{r4, r5, r6, pc}

0000acf0 <_strtod_l>:
    acf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acf4:	vpush	{d8-d14}
    acf8:	mov	r6, r3
    acfa:	sub	sp, #100	; 0x64
    acfc:	movs	r3, #0
    acfe:	mov	r9, r0
    ad00:	mov	r0, r6
    ad02:	mov	r8, r1
    ad04:	mov	sl, r2
    ad06:	str	r3, [sp, #80]	; 0x50
    ad08:	bl	f9bc <__localeconv_l>
    ad0c:	movs	r4, #0
    ad0e:	movs	r3, #0
    ad10:	mov	fp, r0
    ad12:	ldr	r0, [r0, #0]
    ad14:	strd	r3, r4, [sp, #24]
    ad18:	bl	ab40 <strlen>
    ad1c:	str.w	r8, [sp, #76]	; 0x4c
    ad20:	str	r0, [sp, #16]
    ad22:	mov	r3, r8
    ad24:	mov	r5, r3
    ad26:	ldrb.w	r4, [r3], #1
    ad2a:	cmp	r4, #45	; 0x2d
    ad2c:	bhi.w	af66 <_strtod_l+0x276>
    ad30:	tbh	[pc, r4, lsl #1]
    ad34:	.word	0x0119002e
    ad38:	.word	0x01190119
    ad3c:	.word	0x01190119
    ad40:	.word	0x01190119
    ad44:	.word	0x00ef0119
    ad48:	.word	0x00ef00ef
    ad4c:	.word	0x00ef00ef
    ad50:	.word	0x01190119
    ad54:	.word	0x01190119
    ad58:	.word	0x01190119
    ad5c:	.word	0x01190119
    ad60:	.word	0x01190119
    ad64:	.word	0x01190119
    ad68:	.word	0x01190119
    ad6c:	.word	0x01190119
    ad70:	.word	0x01190119
    ad74:	.word	0x011900ef
    ad78:	.word	0x01190119
    ad7c:	.word	0x01190119
    ad80:	.word	0x01190119
    ad84:	.word	0x01190119
    ad88:	.word	0x00490119
    ad8c:	.word	0x00ec0119
    ad90:	vldr	d7, [pc, #700]	; b050 <_strtod_l+0x360>
    ad94:	vstr	d7, [sp, #16]
    ad98:	cmp.w	sl, #0
    ad9c:	beq.n	adb8 <_strtod_l+0xc8>
    ad9e:	movs	r2, #0
    ada0:	mov	r3, r8
    ada2:	str	r2, [sp, #32]
    ada4:	str.w	r3, [sl]
    ada8:	ldr	r3, [sp, #32]
    adaa:	cbz	r3, adb8 <_strtod_l+0xc8>
    adac:	vldr	d7, [sp, #16]
    adb0:	vneg.f64	d7, d7
    adb4:	vstr	d7, [sp, #16]
    adb8:	vldr	d0, [sp, #16]
    adbc:	add	sp, #100	; 0x64
    adbe:	vpop	{d8-d14}
    adc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adc6:	movs	r3, #0
    adc8:	str	r3, [sp, #32]
    adca:	adds	r3, r5, #1
    adcc:	str	r3, [sp, #76]	; 0x4c
    adce:	ldrb	r4, [r5, #1]
    add0:	cmp	r4, #0
    add2:	beq.n	ad90 <_strtod_l+0xa0>
    add4:	cmp	r4, #48	; 0x30
    add6:	mov	r5, r3
    add8:	beq.w	af70 <_strtod_l+0x280>
    addc:	movs	r3, #0
    adde:	str	r5, [sp, #40]	; 0x28
    ade0:	str	r3, [sp, #36]	; 0x24
    ade2:	sub.w	r3, r4, #48	; 0x30
    ade6:	cmp	r3, #9
    ade8:	bhi.w	b596 <_strtod_l+0x8a6>
    adec:	movs	r7, #0
    adee:	mov	r0, r5
    adf0:	mov	r6, r7
    adf2:	mov	r5, r7
    adf4:	cmp	r5, #8
    adf6:	it	gt
    adf8:	addgt.w	r7, r7, r7, lsl #2
    adfc:	add.w	r3, r6, r6, lsl #2
    ae00:	add.w	r0, r0, #1
    ae04:	add.w	r3, r4, r3, lsl #1
    ae08:	str	r0, [sp, #76]	; 0x4c
    ae0a:	itt	gt
    ae0c:	addgt.w	r4, r4, r7, lsl #1
    ae10:	subgt.w	r7, r4, #48	; 0x30
    ae14:	ldrb	r4, [r0, #0]
    ae16:	it	le
    ae18:	suble.w	r6, r3, #48	; 0x30
    ae1c:	sub.w	r3, r4, #48	; 0x30
    ae20:	cmp	r3, #9
    ae22:	add.w	r5, r5, #1
    ae26:	bls.n	adf4 <_strtod_l+0x104>
    ae28:	ldr.w	r1, [fp]
    ae2c:	ldr	r2, [sp, #16]
    ae2e:	bl	ac1c <strncmp>
    ae32:	cmp	r0, #0
    ae34:	beq.n	af16 <_strtod_l+0x226>
    ae36:	movs	r0, #0
    ae38:	mov	ip, r0
    ae3a:	mov	fp, r0
    ae3c:	mov	r2, r5
    ae3e:	cmp	r4, #101	; 0x65
    ae40:	beq.w	b068 <_strtod_l+0x378>
    ae44:	cmp	r4, #69	; 0x45
    ae46:	beq.w	b068 <_strtod_l+0x378>
    ae4a:	movs	r3, #0
    ae4c:	cmp	r5, #0
    ae4e:	bne.w	afa6 <_strtod_l+0x2b6>
    ae52:	cmp	r0, #0
    ae54:	bne.w	af92 <_strtod_l+0x2a2>
    ae58:	ldr	r3, [sp, #36]	; 0x24
    ae5a:	cmp	r3, #0
    ae5c:	bne.w	af92 <_strtod_l+0x2a2>
    ae60:	cmp.w	fp, #0
    ae64:	bne.n	ad90 <_strtod_l+0xa0>
    ae66:	subs	r4, #73	; 0x49
    ae68:	cmp	r4, #37	; 0x25
    ae6a:	bhi.n	ad90 <_strtod_l+0xa0>
    ae6c:	add	r3, pc, #4	; (adr r3, ae74 <_strtod_l+0x184>)
    ae6e:	ldr.w	pc, [r3, r4, lsl #2]
    ae72:	nop
    ae74:	.word	0x0000b01b
    ae78:	.word	0x0000ad91
    ae7c:	.word	0x0000ad91
    ae80:	.word	0x0000ad91
    ae84:	.word	0x0000ad91
    ae88:	.word	0x0000b52f
    ae8c:	.word	0x0000ad91
    ae90:	.word	0x0000ad91
    ae94:	.word	0x0000ad91
    ae98:	.word	0x0000ad91
    ae9c:	.word	0x0000ad91
    aea0:	.word	0x0000ad91
    aea4:	.word	0x0000ad91
    aea8:	.word	0x0000ad91
    aeac:	.word	0x0000ad91
    aeb0:	.word	0x0000ad91
    aeb4:	.word	0x0000ad91
    aeb8:	.word	0x0000ad91
    aebc:	.word	0x0000ad91
    aec0:	.word	0x0000ad91
    aec4:	.word	0x0000ad91
    aec8:	.word	0x0000ad91
    aecc:	.word	0x0000ad91
    aed0:	.word	0x0000ad91
    aed4:	.word	0x0000ad91
    aed8:	.word	0x0000ad91
    aedc:	.word	0x0000ad91
    aee0:	.word	0x0000ad91
    aee4:	.word	0x0000ad91
    aee8:	.word	0x0000ad91
    aeec:	.word	0x0000ad91
    aef0:	.word	0x0000ad91
    aef4:	.word	0x0000b01b
    aef8:	.word	0x0000ad91
    aefc:	.word	0x0000ad91
    af00:	.word	0x0000ad91
    af04:	.word	0x0000ad91
    af08:	.word	0x0000b52f
    af0c:	movs	r3, #1
    af0e:	str	r3, [sp, #32]
    af10:	b.n	adca <_strtod_l+0xda>
    af12:	str	r3, [sp, #76]	; 0x4c
    af14:	b.n	ad24 <_strtod_l+0x34>
    af16:	ldr	r3, [sp, #76]	; 0x4c
    af18:	ldr	r1, [sp, #16]
    af1a:	adds	r2, r3, r1
    af1c:	str	r2, [sp, #76]	; 0x4c
    af1e:	ldrb	r4, [r3, r1]
    af20:	mov	ip, r0
    af22:	mov	r2, r5
    af24:	sub.w	r3, r4, #48	; 0x30
    af28:	cmp	r3, #9
    af2a:	bhi.w	b3b6 <_strtod_l+0x6c6>
    af2e:	adds	r1, r0, #1
    af30:	mov	r4, r3
    af32:	cmp	r3, #0
    af34:	beq.w	bb46 <_strtod_l+0xe56>
    af38:	cmp	r1, #1
    af3a:	add	ip, r1
    af3c:	it	ne
    af3e:	addne	r0, r0, r5
    af40:	bne.n	af4e <_strtod_l+0x25e>
    af42:	b.w	bb2a <_strtod_l+0xe3a>
    af46:	lsls	r6, r1, #1
    af48:	cmp	r5, r0
    af4a:	beq.w	b7d2 <_strtod_l+0xae2>
    af4e:	adds	r5, #1
    af50:	subs	r1, r5, #1
    af52:	cmp	r1, #8
    af54:	add.w	r1, r6, r6, lsl #2
    af58:	ble.n	af46 <_strtod_l+0x256>
    af5a:	cmp	r5, #16
    af5c:	itt	le
    af5e:	addle.w	r7, r7, r7, lsl #2
    af62:	lslle	r7, r7, #1
    af64:	b.n	af48 <_strtod_l+0x258>
    af66:	movs	r3, #0
    af68:	cmp	r4, #48	; 0x30
    af6a:	str	r3, [sp, #32]
    af6c:	bne.w	addc <_strtod_l+0xec>
    af70:	ldrb	r3, [r5, #1]
    af72:	cmp	r3, #88	; 0x58
    af74:	beq.w	b55e <_strtod_l+0x86e>
    af78:	cmp	r3, #120	; 0x78
    af7a:	beq.w	b55e <_strtod_l+0x86e>
    af7e:	adds	r5, #1
    af80:	str	r5, [sp, #76]	; 0x4c
    af82:	ldrb	r4, [r5, #0]
    af84:	cmp	r4, #48	; 0x30
    af86:	beq.n	af7e <_strtod_l+0x28e>
    af88:	cbz	r4, af92 <_strtod_l+0x2a2>
    af8a:	movs	r3, #1
    af8c:	str	r5, [sp, #40]	; 0x28
    af8e:	str	r3, [sp, #36]	; 0x24
    af90:	b.n	ade2 <_strtod_l+0xf2>
    af92:	vldr	d7, [pc, #188]	; b050 <_strtod_l+0x360>
    af96:	vstr	d7, [sp, #16]
    af9a:	cmp.w	sl, #0
    af9e:	beq.w	ada8 <_strtod_l+0xb8>
    afa2:	ldr	r3, [sp, #76]	; 0x4c
    afa4:	b.n	ada4 <_strtod_l+0xb4>
    afa6:	vmov	s15, r6
    afaa:	vcvt.f64.u32	d7, s15
    afae:	cmp	r5, #16
    afb0:	vstr	d7, [sp, #16]
    afb4:	rsb	r4, ip, r3
    afb8:	ldrd	fp, ip, [sp, #16]
    afbc:	mov	r1, r5
    afbe:	it	ge
    afc0:	movge	r1, #16
    afc2:	cmp	r2, #0
    afc4:	it	eq
    afc6:	moveq	r2, r5
    afc8:	cmp	r1, #9
    afca:	strd	fp, ip, [sp, #24]
    afce:	ble.n	afee <_strtod_l+0x2fe>
    afd0:	ldr	r3, [pc, #132]	; (b058 <_strtod_l+0x368>)
    afd2:	add.w	r3, r3, r1, lsl #3
    afd6:	vldr	d6, [r3, #-72]	; 0xffffffb8
    afda:	vldr	d5, [sp, #16]
    afde:	vmov	s15, r7
    afe2:	vcvt.f64.u32	d7, s15
    afe6:	vfma.f64	d7, d5, d6
    afea:	vstr	d7, [sp, #24]
    afee:	cmp	r5, #15
    aff0:	bgt.w	b10a <_strtod_l+0x41a>
    aff4:	cmp	r4, #0
    aff6:	beq.n	b046 <_strtod_l+0x356>
    aff8:	ble.w	b8fe <_strtod_l+0xc0e>
    affc:	cmp	r4, #22
    affe:	bgt.w	b804 <_strtod_l+0xb14>
    b002:	ldr	r3, [pc, #84]	; (b058 <_strtod_l+0x368>)
    b004:	add.w	r4, r3, r4, lsl #3
    b008:	vldr	d7, [r4]
    b00c:	vldr	d6, [sp, #24]
    b010:	vmul.f64	d7, d7, d6
    b014:	vstr	d7, [sp, #16]
    b018:	b.n	af9a <_strtod_l+0x2aa>
    b01a:	add	r0, sp, #76	; 0x4c
    b01c:	ldr	r1, [pc, #60]	; (b05c <_strtod_l+0x36c>)
    b01e:	bl	f7f0 <__match>
    b022:	cmp	r0, #0
    b024:	beq.w	ad90 <_strtod_l+0xa0>
    b028:	ldr	r3, [sp, #76]	; 0x4c
    b02a:	ldr	r1, [pc, #52]	; (b060 <_strtod_l+0x370>)
    b02c:	subs	r3, #1
    b02e:	add	r0, sp, #76	; 0x4c
    b030:	str	r3, [sp, #76]	; 0x4c
    b032:	bl	f7f0 <__match>
    b036:	cbnz	r0, b03e <_strtod_l+0x34e>
    b038:	ldr	r3, [sp, #76]	; 0x4c
    b03a:	adds	r3, #1
    b03c:	str	r3, [sp, #76]	; 0x4c
    b03e:	ldr	r3, [pc, #36]	; (b064 <_strtod_l+0x374>)
    b040:	str	r3, [sp, #28]
    b042:	movs	r3, #0
    b044:	str	r3, [sp, #24]
    b046:	vldr	d7, [sp, #24]
    b04a:	vstr	d7, [sp, #16]
    b04e:	b.n	af9a <_strtod_l+0x2aa>
	...
    b058:	.word	0x200002a8
    b05c:	.word	0x20000c58
    b060:	.word	0x20000c5c
    b064:	.word	0x7ff00000
    b068:	cmp	r5, #0
    b06a:	beq.w	b3a0 <_strtod_l+0x6b0>
    b06e:	ldr.w	r8, [sp, #76]	; 0x4c
    b072:	add.w	r3, r8, #1
    b076:	str	r3, [sp, #76]	; 0x4c
    b078:	ldrb.w	r4, [r8, #1]
    b07c:	cmp	r4, #43	; 0x2b
    b07e:	beq.w	b558 <_strtod_l+0x868>
    b082:	cmp	r4, #45	; 0x2d
    b084:	beq.w	b3f2 <_strtod_l+0x702>
    b088:	movs	r3, #0
    b08a:	str	r3, [sp, #16]
    b08c:	sub.w	r3, r4, #48	; 0x30
    b090:	cmp	r3, #9
    b092:	bhi.w	b550 <_strtod_l+0x860>
    b096:	cmp	r4, #48	; 0x30
    b098:	bne.n	b0a6 <_strtod_l+0x3b6>
    b09a:	ldr	r3, [sp, #76]	; 0x4c
    b09c:	adds	r3, #1
    b09e:	str	r3, [sp, #76]	; 0x4c
    b0a0:	ldrb	r4, [r3, #0]
    b0a2:	cmp	r4, #48	; 0x30
    b0a4:	beq.n	b09c <_strtod_l+0x3ac>
    b0a6:	sub.w	r3, r4, #49	; 0x31
    b0aa:	cmp	r3, #8
    b0ac:	bhi.w	ae4a <_strtod_l+0x15a>
    b0b0:	ldr	r3, [sp, #76]	; 0x4c
    b0b2:	str	r3, [sp, #48]	; 0x30
    b0b4:	adds	r1, r3, #1
    b0b6:	subs	r4, #48	; 0x30
    b0b8:	str	r1, [sp, #76]	; 0x4c
    b0ba:	str	r4, [sp, #44]	; 0x2c
    b0bc:	ldrb	r4, [r3, #1]
    b0be:	sub.w	lr, r4, #48	; 0x30
    b0c2:	cmp.w	lr, #9
    b0c6:	bhi.n	b0e8 <_strtod_l+0x3f8>
    b0c8:	ldr	r3, [sp, #44]	; 0x2c
    b0ca:	adds	r1, #1
    b0cc:	str	r1, [sp, #76]	; 0x4c
    b0ce:	add.w	r3, r3, r3, lsl #2
    b0d2:	add.w	r3, r4, r3, lsl #1
    b0d6:	ldrb	r4, [r1, #0]
    b0d8:	sub.w	lr, r4, #48	; 0x30
    b0dc:	cmp.w	lr, #9
    b0e0:	sub.w	r3, r3, #48	; 0x30
    b0e4:	bls.n	b0ca <_strtod_l+0x3da>
    b0e6:	str	r3, [sp, #44]	; 0x2c
    b0e8:	ldr	r3, [sp, #48]	; 0x30
    b0ea:	subs	r1, r1, r3
    b0ec:	cmp	r1, #8
    b0ee:	bgt.w	b7f4 <_strtod_l+0xb04>
    b0f2:	ldr	r3, [sp, #44]	; 0x2c
    b0f4:	movw	r1, #19999	; 0x4e1f
    b0f8:	cmp	r3, r1
    b0fa:	it	ge
    b0fc:	movge	r3, r1
    b0fe:	ldr	r1, [sp, #16]
    b100:	cmp	r1, #0
    b102:	beq.w	ae4c <_strtod_l+0x15c>
    b106:	negs	r3, r3
    b108:	b.n	ae4c <_strtod_l+0x15c>
    b10a:	subs	r3, r5, r1
    b10c:	add	r3, r4
    b10e:	cmp	r3, #0
    b110:	ble.w	b718 <_strtod_l+0xa28>
    b114:	ands.w	r0, r3, #15
    b118:	beq.n	b130 <_strtod_l+0x440>
    b11a:	ldr	r1, [pc, #780]	; (b428 <_strtod_l+0x738>)
    b11c:	add.w	r1, r1, r0, lsl #3
    b120:	vldr	d6, [sp, #24]
    b124:	vldr	d7, [r1]
    b128:	vmul.f64	d7, d7, d6
    b12c:	vstr	d7, [sp, #24]
    b130:	bics.w	r3, r3, #15
    b134:	bne.w	b444 <_strtod_l+0x754>
    b138:	movs	r3, #0
    b13a:	str	r3, [sp, #36]	; 0x24
    b13c:	str	r6, [sp, #0]
    b13e:	mov	r3, r5
    b140:	ldr	r1, [sp, #40]	; 0x28
    b142:	mov	r0, r9
    b144:	bl	fb18 <__s2b>
    b148:	mov	fp, r0
    b14a:	cmp	r0, #0
    b14c:	beq.w	b63c <_strtod_l+0x94c>
    b150:	cmp	r4, #0
    b152:	mov.w	r8, #0
    b156:	rsb	r3, r4, #0
    b15a:	vldr	d10, [pc, #684]	; b408 <_strtod_l+0x718>
    b15e:	it	ge
    b160:	movge	r3, r8
    b162:	vldr	d9, [pc, #684]	; b410 <_strtod_l+0x720>
    b166:	vldr	d11, [pc, #688]	; b418 <_strtod_l+0x728>
    b16a:	vldr	d8, [pc, #692]	; b420 <_strtod_l+0x730>
    b16e:	str	r3, [sp, #44]	; 0x2c
    b170:	bic.w	r3, r4, r4, asr #31
    b174:	str	r3, [sp, #40]	; 0x28
    b176:	mov	r4, r8
    b178:	str.w	sl, [sp, #60]	; 0x3c
    b17c:	ldr.w	r1, [fp, #4]
    b180:	mov	r0, r9
    b182:	bl	fa38 <_Balloc>
    b186:	mov	r6, r0
    b188:	cmp	r0, #0
    b18a:	beq.w	b6b8 <_strtod_l+0x9c8>
    b18e:	ldr.w	r2, [fp, #16]
    b192:	vldr	d7, [sp, #24]
    b196:	adds	r2, #2
    b198:	lsls	r2, r2, #2
    b19a:	add.w	r1, fp, #12
    b19e:	adds	r0, #12
    b1a0:	vstr	d7, [sp, #16]
    b1a4:	bl	7fb0 <memcpy>
    b1a8:	vldr	d0, [sp, #16]
    b1ac:	add	r2, sp, #88	; 0x58
    b1ae:	add	r1, sp, #84	; 0x54
    b1b0:	mov	r0, r9
    b1b2:	bl	1015c <__d2b>
    b1b6:	str	r0, [sp, #80]	; 0x50
    b1b8:	cmp	r0, #0
    b1ba:	beq.w	b920 <_strtod_l+0xc30>
    b1be:	movs	r1, #1
    b1c0:	mov	r0, r9
    b1c2:	bl	fc4c <__i2b>
    b1c6:	mov	r4, r0
    b1c8:	cmp	r0, #0
    b1ca:	beq.w	b6b8 <_strtod_l+0x9c8>
    b1ce:	ldr	r2, [sp, #84]	; 0x54
    b1d0:	cmp	r2, #0
    b1d2:	blt.w	b3ae <_strtod_l+0x6be>
    b1d6:	ldr	r3, [sp, #44]	; 0x2c
    b1d8:	ldr	r5, [sp, #40]	; 0x28
    b1da:	adds	r7, r3, r2
    b1dc:	ldr	r1, [sp, #36]	; 0x24
    b1de:	ldr	r3, [sp, #88]	; 0x58
    b1e0:	subs	r2, r2, r1
    b1e2:	add	r2, r3
    b1e4:	ldr	r1, [pc, #580]	; (b42c <_strtod_l+0x73c>)
    b1e6:	subs	r2, #1
    b1e8:	cmp	r2, r1
    b1ea:	rsb	r3, r3, #54	; 0x36
    b1ee:	bge.w	b37c <_strtod_l+0x68c>
    b1f2:	subs	r1, r1, r2
    b1f4:	cmp	r1, #31
    b1f6:	sub.w	r3, r3, r1
    b1fa:	bgt.w	b3bc <_strtod_l+0x6cc>
    b1fe:	movs	r2, #1
    b200:	lsls	r2, r1
    b202:	str	r2, [sp, #52]	; 0x34
    b204:	movs	r2, #0
    b206:	str	r2, [sp, #56]	; 0x38
    b208:	add.w	sl, r7, r3
    b20c:	add	r5, r3
    b20e:	ldr	r3, [sp, #36]	; 0x24
    b210:	cmp	r7, sl
    b212:	mov	r2, r7
    b214:	add	r5, r3
    b216:	it	ge
    b218:	movge	r2, sl
    b21a:	cmp	r2, r5
    b21c:	it	ge
    b21e:	movge	r2, r5
    b220:	cmp	r2, #0
    b222:	ble.n	b22c <_strtod_l+0x53c>
    b224:	rsb	sl, r2, sl
    b228:	subs	r5, r5, r2
    b22a:	subs	r7, r7, r2
    b22c:	ldr	r3, [sp, #44]	; 0x2c
    b22e:	cbz	r3, b260 <_strtod_l+0x570>
    b230:	mov	r1, r4
    b232:	mov	r2, r3
    b234:	mov	r0, r9
    b236:	bl	fd90 <__pow5mult>
    b23a:	mov	r4, r0
    b23c:	cmp	r0, #0
    b23e:	beq.w	b6b8 <_strtod_l+0x9c8>
    b242:	mov	r1, r0
    b244:	ldr	r2, [sp, #80]	; 0x50
    b246:	mov	r0, r9
    b248:	bl	fc60 <__multiply>
    b24c:	cmp	r0, #0
    b24e:	beq.w	b6b8 <_strtod_l+0x9c8>
    b252:	str	r0, [sp, #48]	; 0x30
    b254:	ldr	r1, [sp, #80]	; 0x50
    b256:	mov	r0, r9
    b258:	bl	fa84 <_Bfree>
    b25c:	ldr	r2, [sp, #48]	; 0x30
    b25e:	str	r2, [sp, #80]	; 0x50
    b260:	cmp.w	sl, #0
    b264:	ble.n	b278 <_strtod_l+0x588>
    b266:	mov	r2, sl
    b268:	ldr	r1, [sp, #80]	; 0x50
    b26a:	mov	r0, r9
    b26c:	bl	fe30 <__lshift>
    b270:	str	r0, [sp, #80]	; 0x50
    b272:	cmp	r0, #0
    b274:	beq.w	b920 <_strtod_l+0xc30>
    b278:	ldr	r3, [sp, #40]	; 0x28
    b27a:	cbz	r3, b28e <_strtod_l+0x59e>
    b27c:	mov	r1, r6
    b27e:	ldr	r2, [sp, #40]	; 0x28
    b280:	mov	r0, r9
    b282:	bl	fd90 <__pow5mult>
    b286:	mov	r6, r0
    b288:	cmp	r0, #0
    b28a:	beq.w	b6b8 <_strtod_l+0x9c8>
    b28e:	cmp	r5, #0
    b290:	ble.n	b2a4 <_strtod_l+0x5b4>
    b292:	mov	r1, r6
    b294:	mov	r2, r5
    b296:	mov	r0, r9
    b298:	bl	fe30 <__lshift>
    b29c:	mov	r6, r0
    b29e:	cmp	r0, #0
    b2a0:	beq.w	b6b8 <_strtod_l+0x9c8>
    b2a4:	cmp	r7, #0
    b2a6:	ble.n	b2ba <_strtod_l+0x5ca>
    b2a8:	mov	r1, r4
    b2aa:	mov	r2, r7
    b2ac:	mov	r0, r9
    b2ae:	bl	fe30 <__lshift>
    b2b2:	mov	r4, r0
    b2b4:	cmp	r0, #0
    b2b6:	beq.w	b6b8 <_strtod_l+0x9c8>
    b2ba:	mov	r2, r6
    b2bc:	ldr	r1, [sp, #80]	; 0x50
    b2be:	mov	r0, r9
    b2c0:	bl	ff24 <__mdiff>
    b2c4:	mov	r8, r0
    b2c6:	cmp	r0, #0
    b2c8:	beq.w	b6b8 <_strtod_l+0x9c8>
    b2cc:	movs	r3, #0
    b2ce:	ldr	r5, [r0, #12]
    b2d0:	str	r3, [r0, #12]
    b2d2:	mov	r1, r4
    b2d4:	bl	fee0 <__mcmp>
    b2d8:	cmp	r0, #0
    b2da:	blt.w	b926 <_strtod_l+0xc36>
    b2de:	beq.w	b9e8 <_strtod_l+0xcf8>
    b2e2:	mov	r1, r4
    b2e4:	mov	r0, r8
    b2e6:	bl	10218 <__ratio>
    b2ea:	vmov.f64	d7, #0	; 0x40000000  2.0
    b2ee:	vcmpe.f64	d0, d7
    b2f2:	vmrs	APSR_nzcv, fpscr
    b2f6:	bhi.n	b386 <_strtod_l+0x696>
    b2f8:	cmp	r5, #0
    b2fa:	beq.n	b3cc <_strtod_l+0x6dc>
    b2fc:	vmov.f64	d13, #112	; 0x3f800000  1.0
    b300:	ldr	r3, [pc, #300]	; (b430 <_strtod_l+0x740>)
    b302:	ldr	r1, [sp, #28]
    b304:	movs	r2, #0
    b306:	ldr	r7, [pc, #300]	; (b434 <_strtod_l+0x744>)
    b308:	ldr	r0, [pc, #300]	; (b438 <_strtod_l+0x748>)
    b30a:	ands	r7, r1
    b30c:	cmp	r7, r0
    b30e:	beq.w	b5f0 <_strtod_l+0x900>
    b312:	ldr	r1, [sp, #36]	; 0x24
    b314:	cbz	r1, b32e <_strtod_l+0x63e>
    b316:	cmp.w	r7, #111149056	; 0x6a00000
    b31a:	bhi.n	b32e <_strtod_l+0x63e>
    b31c:	vcmpe.f64	d13, d8
    b320:	vmrs	APSR_nzcv, fpscr
    b324:	bls.w	b50c <_strtod_l+0x81c>
    b328:	add.w	r1, r3, #112197632	; 0x6b00000
    b32c:	subs	r3, r1, r7
    b32e:	vldr	d0, [sp, #16]
    b332:	vmov	d12, r2, r3
    b336:	bl	10038 <__ulp>
    b33a:	vldr	d7, [sp, #16]
    b33e:	vfma.f64	d7, d12, d0
    b342:	vmov	r2, r3, d7
    b346:	strd	r2, r3, [sp, #24]
    b34a:	mov	r2, r3
    b34c:	ldr	r3, [sp, #36]	; 0x24
    b34e:	cbnz	r3, b35a <_strtod_l+0x66a>
    b350:	ldr	r3, [pc, #224]	; (b434 <_strtod_l+0x744>)
    b352:	ands	r3, r2
    b354:	cmp	r7, r3
    b356:	beq.w	b654 <_strtod_l+0x964>
    b35a:	ldr	r1, [sp, #80]	; 0x50
    b35c:	mov	r0, r9
    b35e:	bl	fa84 <_Bfree>
    b362:	mov	r1, r6
    b364:	mov	r0, r9
    b366:	bl	fa84 <_Bfree>
    b36a:	mov	r1, r4
    b36c:	mov	r0, r9
    b36e:	bl	fa84 <_Bfree>
    b372:	mov	r1, r8
    b374:	mov	r0, r9
    b376:	bl	fa84 <_Bfree>
    b37a:	b.n	b17c <_strtod_l+0x48c>
    b37c:	movs	r2, #0
    b37e:	str	r2, [sp, #56]	; 0x38
    b380:	movs	r2, #1
    b382:	str	r2, [sp, #52]	; 0x34
    b384:	b.n	b208 <_strtod_l+0x518>
    b386:	vmov.f64	d7, #96	; 0x3f000000  0.5
    b38a:	vmul.f64	d13, d0, d7
    b38e:	cbnz	r5, b3ec <_strtod_l+0x6fc>
    b390:	vneg.f64	d7, d13
    b394:	vmov	r2, r3, d7
    b398:	ldr	r1, [sp, #28]
    b39a:	b.n	b306 <_strtod_l+0x616>
    b39c:	mov.w	fp, #1
    b3a0:	cbnz	r0, b402 <_strtod_l+0x712>
    b3a2:	ldr	r3, [sp, #36]	; 0x24
    b3a4:	cmp	r3, #0
    b3a6:	beq.w	ad90 <_strtod_l+0xa0>
    b3aa:	mov	r5, r0
    b3ac:	b.n	b06e <_strtod_l+0x37e>
    b3ae:	ldr	r3, [sp, #40]	; 0x28
    b3b0:	ldr	r7, [sp, #44]	; 0x2c
    b3b2:	subs	r5, r3, r2
    b3b4:	b.n	b1dc <_strtod_l+0x4ec>
    b3b6:	mov.w	fp, #1
    b3ba:	b.n	ae3e <_strtod_l+0x14e>
    b3bc:	ldr	r1, [pc, #124]	; (b43c <_strtod_l+0x74c>)
    b3be:	subs	r1, r1, r2
    b3c0:	movs	r2, #1
    b3c2:	lsl.w	r1, r2, r1
    b3c6:	str	r1, [sp, #56]	; 0x38
    b3c8:	str	r2, [sp, #52]	; 0x34
    b3ca:	b.n	b208 <_strtod_l+0x518>
    b3cc:	ldrd	r1, r2, [sp, #24]
    b3d0:	cmp	r1, #0
    b3d2:	beq.w	b4de <_strtod_l+0x7ee>
    b3d6:	ldrd	r1, r2, [sp, #24]
    b3da:	cmp	r1, #1
    b3dc:	beq.w	b8bc <_strtod_l+0xbcc>
    b3e0:	mov	r1, r2
    b3e2:	vmov.f64	d13, #112	; 0x3f800000  1.0
    b3e6:	movs	r2, #0
    b3e8:	ldr	r3, [pc, #84]	; (b440 <_strtod_l+0x750>)
    b3ea:	b.n	b306 <_strtod_l+0x616>
    b3ec:	vmov	r2, r3, d13
    b3f0:	b.n	b398 <_strtod_l+0x6a8>
    b3f2:	movs	r3, #1
    b3f4:	str	r3, [sp, #16]
    b3f6:	add.w	r3, r8, #2
    b3fa:	str	r3, [sp, #76]	; 0x4c
    b3fc:	ldrb.w	r4, [r8, #2]
    b400:	b.n	b08c <_strtod_l+0x39c>
    b402:	movs	r5, #0
    b404:	b.n	b06e <_strtod_l+0x37e>
    b406:	nop
    b408:	.word	0x94a03595
    b40c:	.word	0x3fdfffff
    b410:	.word	0x35afe535
    b414:	.word	0x3fe00000
    b418:	.word	0x94a03595
    b41c:	.word	0x3fcfffff
    b420:	.word	0xffc00000
    b424:	.word	0x41dfffff
    b428:	.word	0x200002a8
    b42c:	.word	0xfffffc02
    b430:	.word	0x3ff00000
    b434:	.word	0x7ff00000
    b438:	.word	0x7fe00000
    b43c:	.word	0xfffffbe2
    b440:	.word	0xbff00000
    b444:	cmp.w	r3, #308	; 0x134
    b448:	bgt.w	b63c <_strtod_l+0x94c>
    b44c:	asrs	r3, r3, #4
    b44e:	cmp	r3, #1
    b450:	ldr.w	lr, [pc, #704]	; b714 <_strtod_l+0xa24>
    b454:	ble.w	ba52 <_strtod_l+0xd62>
    b458:	vldr	d7, [sp, #24]
    b45c:	vstr	d7, [sp, #16]
    b460:	movs	r7, #0
    b462:	mov	r1, lr
    b464:	mov	r0, r7
    b466:	tst.w	r3, #1
    b46a:	add.w	r0, r0, #1
    b46e:	mov.w	r3, r3, asr #1
    b472:	beq.n	b486 <_strtod_l+0x796>
    b474:	vldr	d6, [sp, #16]
    b478:	vldr	d7, [r1]
    b47c:	vmul.f64	d7, d6, d7
    b480:	vstr	d7, [sp, #16]
    b484:	movs	r7, #1
    b486:	cmp	r3, #1
    b488:	add.w	r1, r1, #8
    b48c:	bne.n	b466 <_strtod_l+0x776>
    b48e:	cmp	r7, #0
    b490:	bne.w	bb32 <_strtod_l+0xe42>
    b494:	ldr	r3, [sp, #28]
    b496:	ldr	r1, [pc, #608]	; (b6f8 <_strtod_l+0xa08>)
    b498:	sub.w	r3, r3, #55574528	; 0x3500000
    b49c:	str	r3, [sp, #28]
    b49e:	add.w	r0, lr, r0, lsl #3
    b4a2:	vldr	d6, [sp, #24]
    b4a6:	vldr	d7, [r0]
    b4aa:	vmul.f64	d7, d7, d6
    b4ae:	vmov	r7, r8, d7
    b4b2:	bic.w	r3, r8, #2147483648	; 0x80000000
    b4b6:	lsrs	r3, r3, #20
    b4b8:	lsls	r3, r3, #20
    b4ba:	cmp	r3, r1
    b4bc:	strd	r7, r8, [sp, #24]
    b4c0:	bhi.w	b63c <_strtod_l+0x94c>
    b4c4:	sub.w	r1, r1, #1048576	; 0x100000
    b4c8:	cmp	r3, r1
    b4ca:	bls.w	ba20 <_strtod_l+0xd30>
    b4ce:	ldr	r3, [pc, #556]	; (b6fc <_strtod_l+0xa0c>)
    b4d0:	str	r3, [sp, #28]
    b4d2:	movs	r3, #0
    b4d4:	str	r3, [sp, #36]	; 0x24
    b4d6:	mov.w	r3, #4294967295
    b4da:	str	r3, [sp, #24]
    b4dc:	b.n	b13c <_strtod_l+0x44c>
    b4de:	ubfx	r3, r2, #0, #20
    b4e2:	mov	r1, r2
    b4e4:	cmp	r3, #0
    b4e6:	bne.w	b3e2 <_strtod_l+0x6f2>
    b4ea:	vmov.f64	d7, #112	; 0x3f800000  1.0
    b4ee:	vcmpe.f64	d0, d7
    b4f2:	vmrs	APSR_nzcv, fpscr
    b4f6:	bmi.w	ba2a <_strtod_l+0xd3a>
    b4fa:	vmov.f64	d7, #96	; 0x3f000000  0.5
    b4fe:	vmul.f64	d13, d0, d7
    b502:	vneg.f64	d7, d13
    b506:	vmov	r2, r3, d7
    b50a:	b.n	b306 <_strtod_l+0x616>
    b50c:	vcvt.u32.f64	s0, d13
    b510:	vmov	r3, s0
    b514:	cmp	r3, #0
    b516:	beq.w	b83a <_strtod_l+0xb4a>
    b51a:	vcvt.f64.u32	d13, s0
    b51e:	cmp	r5, #0
    b520:	bne.w	b8b6 <_strtod_l+0xbc6>
    b524:	vneg.f64	d7, d13
    b528:	vmov	r2, r3, d7
    b52c:	b.n	b328 <_strtod_l+0x638>
    b52e:	add	r0, sp, #76	; 0x4c
    b530:	ldr	r1, [pc, #460]	; (b700 <_strtod_l+0xa10>)
    b532:	bl	f7f0 <__match>
    b536:	cmp	r0, #0
    b538:	beq.w	ad90 <_strtod_l+0xa0>
    b53c:	ldr	r3, [sp, #76]	; 0x4c
    b53e:	ldrb	r3, [r3, #0]
    b540:	cmp	r3, #40	; 0x28
    b542:	beq.w	bad4 <_strtod_l+0xde4>
    b546:	ldr	r3, [pc, #444]	; (b704 <_strtod_l+0xa14>)
    b548:	str	r3, [sp, #28]
    b54a:	movs	r3, #0
    b54c:	str	r3, [sp, #24]
    b54e:	b.n	b046 <_strtod_l+0x356>
    b550:	str.w	r8, [sp, #76]	; 0x4c
    b554:	movs	r3, #0
    b556:	b.n	ae4c <_strtod_l+0x15c>
    b558:	movs	r3, #0
    b55a:	str	r3, [sp, #16]
    b55c:	b.n	b3f6 <_strtod_l+0x706>
    b55e:	ldr	r2, [sp, #32]
    b560:	str	r6, [sp, #8]
    b562:	add	r3, sp, #80	; 0x50
    b564:	str	r2, [sp, #4]
    b566:	str	r3, [sp, #0]
    b568:	ldr	r2, [pc, #412]	; (b708 <_strtod_l+0xa18>)
    b56a:	add	r3, sp, #84	; 0x54
    b56c:	add	r1, sp, #76	; 0x4c
    b56e:	mov	r0, r9
    b570:	bl	f2e0 <__gethex>
    b574:	ands.w	r6, r0, #7
    b578:	mov	r4, r0
    b57a:	beq.w	af92 <_strtod_l+0x2a2>
    b57e:	cmp	r6, #6
    b580:	bne.w	b840 <_strtod_l+0xb50>
    b584:	vldr	d7, [pc, #360]	; b6f0 <_strtod_l+0xa00>
    b588:	adds	r5, #1
    b58a:	movs	r3, #0
    b58c:	str	r5, [sp, #76]	; 0x4c
    b58e:	vstr	d7, [sp, #16]
    b592:	str	r3, [sp, #32]
    b594:	b.n	af9a <_strtod_l+0x2aa>
    b596:	ldr.w	r1, [fp]
    b59a:	ldr	r2, [sp, #16]
    b59c:	mov	r0, r5
    b59e:	bl	ac1c <strncmp>
    b5a2:	cbz	r0, b5b4 <_strtod_l+0x8c4>
    b5a4:	movs	r2, #0
    b5a6:	mov	r7, r2
    b5a8:	mov	r6, r2
    b5aa:	mov	r0, r2
    b5ac:	mov	ip, r2
    b5ae:	mov	r5, r2
    b5b0:	mov	fp, r2
    b5b2:	b.n	ae3e <_strtod_l+0x14e>
    b5b4:	ldr	r2, [sp, #76]	; 0x4c
    b5b6:	ldr	r1, [sp, #16]
    b5b8:	adds	r3, r2, r1
    b5ba:	str	r3, [sp, #76]	; 0x4c
    b5bc:	ldrb	r4, [r2, r1]
    b5be:	cmp	r4, #48	; 0x30
    b5c0:	bne.n	b5d0 <_strtod_l+0x8e0>
    b5c2:	adds	r3, #1
    b5c4:	str	r3, [sp, #76]	; 0x4c
    b5c6:	ldrb	r4, [r3, #0]
    b5c8:	cmp	r4, #48	; 0x30
    b5ca:	add.w	r0, r0, #1
    b5ce:	beq.n	b5c2 <_strtod_l+0x8d2>
    b5d0:	sub.w	r3, r4, #49	; 0x31
    b5d4:	cmp	r3, #8
    b5d6:	bls.w	b8de <_strtod_l+0xbee>
    b5da:	movs	r2, #0
    b5dc:	cmp	r4, #101	; 0x65
    b5de:	mov	r7, r2
    b5e0:	mov	r6, r2
    b5e2:	mov	ip, r2
    b5e4:	beq.w	b39c <_strtod_l+0x6ac>
    b5e8:	mov	r5, r2
    b5ea:	mov.w	fp, #1
    b5ee:	b.n	ae44 <_strtod_l+0x154>
    b5f0:	sub.w	r1, r1, #55574528	; 0x3500000
    b5f4:	str	r1, [sp, #28]
    b5f6:	vldr	d14, [sp, #24]
    b5fa:	vmov.f64	d0, d14
    b5fe:	vmov	d12, r2, r3
    b602:	bl	10038 <__ulp>
    b606:	vfma.f64	d14, d12, d0
    b60a:	vmov	r2, r3, d14
    b60e:	strd	r2, r3, [sp, #24]
    b612:	bic.w	r3, r3, #2147483648	; 0x80000000
    b616:	lsrs	r3, r3, #20
    b618:	ldr	r2, [pc, #240]	; (b70c <_strtod_l+0xa1c>)
    b61a:	ldrd	r0, r1, [sp, #16]
    b61e:	lsls	r3, r3, #20
    b620:	cmp	r3, r2
    b622:	strd	r0, r1, [sp, #64]	; 0x40
    b626:	bls.w	b7fa <_strtod_l+0xb0a>
    b62a:	ldr	r3, [pc, #208]	; (b6fc <_strtod_l+0xa0c>)
    b62c:	cmp	r1, r3
    b62e:	beq.n	b6b2 <_strtod_l+0x9c2>
    b630:	ldr	r3, [pc, #200]	; (b6fc <_strtod_l+0xa0c>)
    b632:	str	r3, [sp, #28]
    b634:	mov.w	r3, #4294967295
    b638:	str	r3, [sp, #24]
    b63a:	b.n	b35a <_strtod_l+0x66a>
    b63c:	ldr	r3, [pc, #208]	; (b710 <_strtod_l+0xa20>)
    b63e:	str	r3, [sp, #28]
    b640:	movs	r2, #0
    b642:	str	r2, [sp, #24]
    b644:	vldr	d7, [sp, #24]
    b648:	movs	r3, #34	; 0x22
    b64a:	vstr	d7, [sp, #16]
    b64e:	str.w	r3, [r9]
    b652:	b.n	af9a <_strtod_l+0x2aa>
    b654:	vcvt.s32.f64	s14, d13
    b658:	vcvt.f64.s32	d7, s14
    b65c:	vsub.f64	d7, d13, d7
    b660:	cmp	r5, #0
    b662:	bne.n	b6d6 <_strtod_l+0x9e6>
    b664:	ldr	r3, [sp, #24]
    b666:	cbnz	r3, b6d6 <_strtod_l+0x9e6>
    b668:	ubfx	r2, r2, #0, #20
    b66c:	cbnz	r2, b6d6 <_strtod_l+0x9e6>
    b66e:	vcmpe.f64	d7, d11
    b672:	vmrs	APSR_nzcv, fpscr
    b676:	bpl.w	b35a <_strtod_l+0x66a>
    b67a:	vldr	d7, [sp, #24]
    b67e:	vstr	d7, [sp, #16]
    b682:	ldr.w	sl, [sp, #60]	; 0x3c
    b686:	ldr	r0, [sp, #80]	; 0x50
    b688:	mov	r1, r0
    b68a:	mov	r0, r9
    b68c:	bl	fa84 <_Bfree>
    b690:	mov	r1, r6
    b692:	mov	r0, r9
    b694:	bl	fa84 <_Bfree>
    b698:	mov	r1, r4
    b69a:	mov	r0, r9
    b69c:	bl	fa84 <_Bfree>
    b6a0:	mov	r1, fp
    b6a2:	mov	r0, r9
    b6a4:	bl	fa84 <_Bfree>
    b6a8:	mov	r1, r8
    b6aa:	mov	r0, r9
    b6ac:	bl	fa84 <_Bfree>
    b6b0:	b.n	af9a <_strtod_l+0x2aa>
    b6b2:	ldr	r3, [sp, #64]	; 0x40
    b6b4:	adds	r3, #1
    b6b6:	bne.n	b630 <_strtod_l+0x940>
    b6b8:	ldr.w	sl, [sp, #60]	; 0x3c
    b6bc:	ldr	r0, [sp, #80]	; 0x50
    b6be:	ldr	r3, [pc, #80]	; (b710 <_strtod_l+0xa20>)
    b6c0:	str	r3, [sp, #28]
    b6c2:	movs	r2, #0
    b6c4:	str	r2, [sp, #24]
    b6c6:	vldr	d7, [sp, #24]
    b6ca:	movs	r3, #34	; 0x22
    b6cc:	vstr	d7, [sp, #16]
    b6d0:	str.w	r3, [r9]
    b6d4:	b.n	b688 <_strtod_l+0x998>
    b6d6:	vcmpe.f64	d7, d10
    b6da:	vmrs	APSR_nzcv, fpscr
    b6de:	bmi.n	b67a <_strtod_l+0x98a>
    b6e0:	vcmpe.f64	d7, d9
    b6e4:	vmrs	APSR_nzcv, fpscr
    b6e8:	ble.w	b35a <_strtod_l+0x66a>
    b6ec:	b.n	b67a <_strtod_l+0x98a>
    b6ee:	nop
	...
    b6f8:	.word	0x7ca00000
    b6fc:	.word	0x7fefffff
    b700:	.word	0x20000c64
    b704:	.word	0xfff80000
    b708:	.word	0x20000c14
    b70c:	.word	0x7c9fffff
    b710:	.word	0x7ff00000
    b714:	.word	0x20000280
    b718:	beq.w	b138 <_strtod_l+0x448>
    b71c:	negs	r3, r3
    b71e:	ands.w	r0, r3, #15
    b722:	beq.n	b73a <_strtod_l+0xa4a>
    b724:	ldr	r1, [pc, #688]	; (b9d8 <_strtod_l+0xce8>)
    b726:	add.w	r1, r1, r0, lsl #3
    b72a:	vldr	d5, [sp, #24]
    b72e:	vldr	d7, [r1]
    b732:	vdiv.f64	d6, d5, d7
    b736:	vstr	d6, [sp, #24]
    b73a:	asrs	r3, r3, #4
    b73c:	beq.w	b138 <_strtod_l+0x448>
    b740:	cmp	r3, #31
    b742:	bgt.n	b7c0 <_strtod_l+0xad0>
    b744:	ands.w	r1, r3, #16
    b748:	beq.w	baba <_strtod_l+0xdca>
    b74c:	cmp	r3, #0
    b74e:	ble.w	bb24 <_strtod_l+0xe34>
    b752:	movs	r1, #106	; 0x6a
    b754:	str	r1, [sp, #36]	; 0x24
    b756:	vldr	d7, [sp, #24]
    b75a:	vstr	d7, [sp, #16]
    b75e:	ldr	r1, [pc, #636]	; (b9dc <_strtod_l+0xcec>)
    b760:	movs	r0, #0
    b762:	lsls	r7, r3, #31
    b764:	bpl.n	b778 <_strtod_l+0xa88>
    b766:	vldr	d6, [sp, #16]
    b76a:	vldr	d7, [r1]
    b76e:	vmul.f64	d7, d6, d7
    b772:	vstr	d7, [sp, #16]
    b776:	movs	r0, #1
    b778:	asrs	r3, r3, #1
    b77a:	add.w	r1, r1, #8
    b77e:	bne.n	b762 <_strtod_l+0xa72>
    b780:	cmp	r0, #0
    b782:	bne.w	bb3c <_strtod_l+0xe4c>
    b786:	ldr	r3, [sp, #36]	; 0x24
    b788:	cbz	r3, b7b0 <_strtod_l+0xac0>
    b78a:	ldrd	r0, r1, [sp, #24]
    b78e:	ubfx	r3, r1, #20, #11
    b792:	rsb	r3, r3, #107	; 0x6b
    b796:	cmp	r3, #0
    b798:	ble.n	b7b0 <_strtod_l+0xac0>
    b79a:	cmp	r3, #31
    b79c:	ble.w	bac4 <_strtod_l+0xdd4>
    b7a0:	movs	r0, #0
    b7a2:	cmp	r3, #52	; 0x34
    b7a4:	str	r0, [sp, #24]
    b7a6:	ble.w	bb0e <_strtod_l+0xe1e>
    b7aa:	mov.w	r3, #57671680	; 0x3700000
    b7ae:	str	r3, [sp, #28]
    b7b0:	vldr	d7, [sp, #24]
    b7b4:	vcmp.f64	d7, #0.0
    b7b8:	vmrs	APSR_nzcv, fpscr
    b7bc:	bne.w	b13c <_strtod_l+0x44c>
    b7c0:	vldr	d7, [pc, #524]	; b9d0 <_strtod_l+0xce0>
    b7c4:	movs	r3, #34	; 0x22
    b7c6:	str.w	r3, [r9]
    b7ca:	vstr	d7, [sp, #16]
    b7ce:	b.w	af9a <_strtod_l+0x2aa>
    b7d2:	ldr	r1, [sp, #76]	; 0x4c
    b7d4:	adds	r5, #1
    b7d6:	cmp	r0, #8
    b7d8:	ble.w	b8f2 <_strtod_l+0xc02>
    b7dc:	cmp	r5, #16
    b7de:	itt	le
    b7e0:	addle.w	r7, r7, r7, lsl #2
    b7e4:	addle.w	r7, r3, r7, lsl #1
    b7e8:	movs	r0, #0
    b7ea:	adds	r3, r1, #1
    b7ec:	str	r3, [sp, #76]	; 0x4c
    b7ee:	ldrb	r4, [r1, #1]
    b7f0:	b.w	af24 <_strtod_l+0x234>
    b7f4:	movw	r3, #19999	; 0x4e1f
    b7f8:	b.n	b0fe <_strtod_l+0x40e>
    b7fa:	ldr	r3, [sp, #28]
    b7fc:	add.w	r2, r3, #55574528	; 0x3500000
    b800:	str	r2, [sp, #28]
    b802:	b.n	b34c <_strtod_l+0x65c>
    b804:	rsb	r3, r5, #37	; 0x25
    b808:	cmp	r4, r3
    b80a:	bgt.w	b10a <_strtod_l+0x41a>
    b80e:	rsb	r5, r5, #15
    b812:	ldr	r3, [pc, #452]	; (b9d8 <_strtod_l+0xce8>)
    b814:	subs	r2, r4, r5
    b816:	add.w	r2, r3, r2, lsl #3
    b81a:	add.w	r3, r3, r5, lsl #3
    b81e:	vldr	d6, [r2]
    b822:	vldr	d7, [r3]
    b826:	vldr	d5, [sp, #24]
    b82a:	vmul.f64	d7, d7, d5
    b82e:	vmul.f64	d7, d7, d6
    b832:	vstr	d7, [sp, #16]
    b836:	b.w	af9a <_strtod_l+0x2aa>
    b83a:	vmov.f64	d13, #112	; 0x3f800000  1.0
    b83e:	b.n	b51e <_strtod_l+0x82e>
    b840:	ldr	r2, [sp, #80]	; 0x50
    b842:	cbz	r2, b854 <_strtod_l+0xb64>
    b844:	movs	r1, #53	; 0x35
    b846:	add	r0, sp, #88	; 0x58
    b848:	bl	10274 <__copybits>
    b84c:	mov	r0, r9
    b84e:	ldr	r1, [sp, #80]	; 0x50
    b850:	bl	fa84 <_Bfree>
    b854:	cmp	r6, #6
    b856:	bhi.n	b870 <_strtod_l+0xb80>
    b858:	tbb	[pc, r6]
    b85c:	.word	0x13181d29
    b860:	.short	0x1d04
    b862:	.byte	0x29
    b863:	.byte	0x00
    b864:	mvn.w	r3, #2147483648	; 0x80000000
    b868:	str	r3, [sp, #28]
    b86a:	mov.w	r3, #4294967295
    b86e:	str	r3, [sp, #24]
    b870:	lsls	r3, r4, #28
    b872:	bpl.w	b046 <_strtod_l+0x356>
    b876:	ldr	r3, [sp, #28]
    b878:	orr.w	r3, r3, #2147483648	; 0x80000000
    b87c:	str	r3, [sp, #28]
    b87e:	b.w	b046 <_strtod_l+0x356>
    b882:	ldr	r3, [pc, #348]	; (b9e0 <_strtod_l+0xcf0>)
    b884:	str	r3, [sp, #28]
    b886:	movs	r3, #0
    b888:	str	r3, [sp, #24]
    b88a:	b.n	b870 <_strtod_l+0xb80>
    b88c:	ldr	r3, [sp, #88]	; 0x58
    b88e:	str	r3, [sp, #24]
    b890:	ldr	r3, [sp, #92]	; 0x5c
    b892:	str	r3, [sp, #28]
    b894:	b.n	b870 <_strtod_l+0xb80>
    b896:	ldr	r2, [sp, #84]	; 0x54
    b898:	ldr	r3, [sp, #92]	; 0x5c
    b89a:	ldr	r1, [sp, #88]	; 0x58
    b89c:	str	r1, [sp, #24]
    b89e:	addw	r2, r2, #1075	; 0x433
    b8a2:	bic.w	r3, r3, #1048576	; 0x100000
    b8a6:	orr.w	r3, r3, r2, lsl #20
    b8aa:	str	r3, [sp, #28]
    b8ac:	b.n	b870 <_strtod_l+0xb80>
    b8ae:	movs	r3, #0
    b8b0:	str	r3, [sp, #28]
    b8b2:	str	r3, [sp, #24]
    b8b4:	b.n	b870 <_strtod_l+0xb80>
    b8b6:	vmov	r2, r3, d13
    b8ba:	b.n	b328 <_strtod_l+0x638>
    b8bc:	ldrd	r2, r3, [sp, #24]
    b8c0:	mov	r1, r3
    b8c2:	cmp	r3, #0
    b8c4:	bne.w	b3e2 <_strtod_l+0x6f2>
    b8c8:	ldr.w	sl, [sp, #60]	; 0x3c
    b8cc:	ldr	r0, [sp, #80]	; 0x50
    b8ce:	vldr	d7, [pc, #256]	; b9d0 <_strtod_l+0xce0>
    b8d2:	movs	r3, #34	; 0x22
    b8d4:	str.w	r3, [r9]
    b8d8:	vstr	d7, [sp, #16]
    b8dc:	b.n	b688 <_strtod_l+0x998>
    b8de:	ldr	r3, [sp, #76]	; 0x4c
    b8e0:	str	r3, [sp, #40]	; 0x28
    b8e2:	movs	r6, #0
    b8e4:	subs	r4, #48	; 0x30
    b8e6:	add.w	ip, r0, #1
    b8ea:	mov	r1, r3
    b8ec:	mov	r2, r6
    b8ee:	mov	r7, r6
    b8f0:	movs	r5, #1
    b8f2:	add.w	r6, r6, r6, lsl #2
    b8f6:	add.w	r6, r4, r6, lsl #1
    b8fa:	movs	r0, #0
    b8fc:	b.n	b7ea <_strtod_l+0xafa>
    b8fe:	cmn.w	r4, #22
    b902:	blt.w	b10a <_strtod_l+0x41a>
    b906:	ldr	r3, [pc, #208]	; (b9d8 <_strtod_l+0xce8>)
    b908:	sub.w	r4, r3, r4, lsl #3
    b90c:	vldr	d7, [r4]
    b910:	vldr	d5, [sp, #24]
    b914:	vdiv.f64	d6, d5, d7
    b918:	vstr	d6, [sp, #16]
    b91c:	b.w	af9a <_strtod_l+0x2aa>
    b920:	ldr.w	sl, [sp, #60]	; 0x3c
    b924:	b.n	b6be <_strtod_l+0x9ce>
    b926:	ldr.w	sl, [sp, #60]	; 0x3c
    b92a:	cbnz	r5, b994 <_strtod_l+0xca4>
    b92c:	ldrd	r1, r2, [sp, #24]
    b930:	cbnz	r1, b994 <_strtod_l+0xca4>
    b932:	ubfx	r3, r2, #0, #20
    b936:	mov	r7, r2
    b938:	cbnz	r3, b994 <_strtod_l+0xca4>
    b93a:	bic.w	r3, r2, #2147483648	; 0x80000000
    b93e:	lsrs	r3, r3, #20
    b940:	lsls	r3, r3, #20
    b942:	cmp.w	r3, #112197632	; 0x6b00000
    b946:	bls.n	b994 <_strtod_l+0xca4>
    b948:	ldr.w	r3, [r8, #20]
    b94c:	cbnz	r3, b956 <_strtod_l+0xc66>
    b94e:	ldr.w	r3, [r8, #16]
    b952:	cmp	r3, #1
    b954:	ble.n	b994 <_strtod_l+0xca4>
    b956:	mov	r1, r8
    b958:	movs	r2, #1
    b95a:	mov	r0, r9
    b95c:	bl	fe30 <__lshift>
    b960:	mov	r1, r4
    b962:	mov	r8, r0
    b964:	bl	fee0 <__mcmp>
    b968:	cmp	r0, #0
    b96a:	ble.n	b994 <_strtod_l+0xca4>
    b96c:	ldr	r3, [sp, #36]	; 0x24
    b96e:	cmp	r3, #0
    b970:	bne.w	baf8 <_strtod_l+0xe08>
    b974:	ldr	r3, [pc, #104]	; (b9e0 <_strtod_l+0xcf0>)
    b976:	ands	r3, r7
    b978:	sub.w	r3, r3, #1048576	; 0x100000
    b97c:	mvn.w	r3, r3, lsr #20
    b980:	mvn.w	r3, r3, lsl #20
    b984:	str	r3, [sp, #28]
    b986:	mov.w	r3, #4294967295
    b98a:	str	r3, [sp, #24]
    b98c:	vldr	d7, [sp, #24]
    b990:	vstr	d7, [sp, #16]
    b994:	ldr	r3, [sp, #36]	; 0x24
    b996:	cbz	r3, b9c8 <_strtod_l+0xcd8>
    b998:	ldr	r3, [pc, #72]	; (b9e4 <_strtod_l+0xcf4>)
    b99a:	str	r3, [sp, #68]	; 0x44
    b99c:	movs	r3, #0
    b99e:	str	r3, [sp, #64]	; 0x40
    b9a0:	vldr	d7, [sp, #16]
    b9a4:	vldr	d6, [sp, #64]	; 0x40
    b9a8:	vmul.f64	d7, d7, d6
    b9ac:	vstr	d7, [sp, #16]
    b9b0:	ldrd	r2, r3, [sp, #16]
    b9b4:	strd	r2, r3, [sp, #24]
    b9b8:	cbnz	r3, b9c8 <_strtod_l+0xcd8>
    b9ba:	ldr	r3, [sp, #24]
    b9bc:	cbnz	r3, b9c8 <_strtod_l+0xcd8>
    b9be:	movs	r3, #34	; 0x22
    b9c0:	ldr	r0, [sp, #80]	; 0x50
    b9c2:	str.w	r3, [r9]
    b9c6:	b.n	b688 <_strtod_l+0x998>
    b9c8:	ldr	r0, [sp, #80]	; 0x50
    b9ca:	b.n	b688 <_strtod_l+0x998>
    b9cc:	nop.w
	...
    b9d8:	.word	0x200002a8
    b9dc:	.word	0x20000370
    b9e0:	.word	0x7ff00000
    b9e4:	.word	0x39500000
    b9e8:	ldr.w	sl, [sp, #60]	; 0x3c
    b9ec:	cbz	r5, ba34 <_strtod_l+0xd44>
    b9ee:	ldr	r2, [sp, #28]
    b9f0:	ldr	r3, [pc, #344]	; (bb4c <_strtod_l+0xe5c>)
    b9f2:	ubfx	r1, r2, #0, #20
    b9f6:	cmp	r1, r3
    b9f8:	beq.n	ba56 <_strtod_l+0xd66>
    b9fa:	ldr	r3, [sp, #56]	; 0x38
    b9fc:	cbz	r3, ba48 <_strtod_l+0xd58>
    b9fe:	ldr	r2, [sp, #28]
    ba00:	tst	r3, r2
    ba02:	beq.n	b994 <_strtod_l+0xca4>
    ba04:	ldrd	r0, r1, [sp, #24]
    ba08:	ldr	r2, [sp, #36]	; 0x24
    ba0a:	cmp	r5, #0
    ba0c:	beq.n	ba96 <_strtod_l+0xda6>
    ba0e:	bl	acbc <sulp>
    ba12:	vldr	d7, [sp, #16]
    ba16:	vadd.f64	d7, d7, d0
    ba1a:	vstr	d7, [sp, #16]
    ba1e:	b.n	b994 <_strtod_l+0xca4>
    ba20:	add.w	r3, r8, #55574528	; 0x3500000
    ba24:	str	r3, [sp, #28]
    ba26:	b.w	b138 <_strtod_l+0x448>
    ba2a:	movs	r2, #0
    ba2c:	ldr	r3, [pc, #288]	; (bb50 <_strtod_l+0xe60>)
    ba2e:	vmov.f64	d13, #96	; 0x3f000000  0.5
    ba32:	b.n	b306 <_strtod_l+0x616>
    ba34:	ldrd	r1, r2, [sp, #24]
    ba38:	ubfx	r3, r2, #0, #20
    ba3c:	mov	r7, r2
    ba3e:	cmp	r3, #0
    ba40:	bne.n	b9fa <_strtod_l+0xd0a>
    ba42:	cmp	r1, #0
    ba44:	bne.n	b9fa <_strtod_l+0xd0a>
    ba46:	b.n	b96c <_strtod_l+0xc7c>
    ba48:	ldr	r3, [sp, #52]	; 0x34
    ba4a:	ldr	r2, [sp, #24]
    ba4c:	tst	r3, r2
    ba4e:	beq.n	b994 <_strtod_l+0xca4>
    ba50:	b.n	ba04 <_strtod_l+0xd14>
    ba52:	movs	r0, #0
    ba54:	b.n	b494 <_strtod_l+0x7a4>
    ba56:	ldr	r3, [sp, #36]	; 0x24
    ba58:	ldr	r1, [sp, #24]
    ba5a:	cbz	r3, bab4 <_strtod_l+0xdc4>
    ba5c:	ldr	r3, [pc, #244]	; (bb54 <_strtod_l+0xe64>)
    ba5e:	ands	r3, r2
    ba60:	cmp.w	r3, #111149056	; 0x6a00000
    ba64:	bhi.n	bab4 <_strtod_l+0xdc4>
    ba66:	lsrs	r3, r3, #20
    ba68:	rsb	r3, r3, #107	; 0x6b
    ba6c:	mov.w	r0, #4294967295
    ba70:	lsl.w	r3, r0, r3
    ba74:	cmp	r3, r1
    ba76:	bne.n	b9fa <_strtod_l+0xd0a>
    ba78:	ldr	r1, [pc, #220]	; (bb58 <_strtod_l+0xe68>)
    ba7a:	cmp	r2, r1
    ba7c:	beq.n	bb1e <_strtod_l+0xe2e>
    ba7e:	ldr	r3, [pc, #212]	; (bb54 <_strtod_l+0xe64>)
    ba80:	ands	r3, r2
    ba82:	add.w	r3, r3, #1048576	; 0x100000
    ba86:	str	r3, [sp, #28]
    ba88:	movs	r3, #0
    ba8a:	str	r3, [sp, #24]
    ba8c:	vldr	d7, [sp, #24]
    ba90:	vstr	d7, [sp, #16]
    ba94:	b.n	b994 <_strtod_l+0xca4>
    ba96:	bl	acbc <sulp>
    ba9a:	vldr	d7, [sp, #16]
    ba9e:	vsub.f64	d7, d7, d0
    baa2:	vcmp.f64	d7, #0.0
    baa6:	vmrs	APSR_nzcv, fpscr
    baaa:	vstr	d7, [sp, #16]
    baae:	beq.w	b8cc <_strtod_l+0xbdc>
    bab2:	b.n	b994 <_strtod_l+0xca4>
    bab4:	mov.w	r3, #4294967295
    bab8:	b.n	ba74 <_strtod_l+0xd84>
    baba:	cmp	r3, #0
    babc:	str	r1, [sp, #36]	; 0x24
    babe:	bgt.w	b756 <_strtod_l+0xa66>
    bac2:	b.n	b7b0 <_strtod_l+0xac0>
    bac4:	mov.w	r1, #4294967295
    bac8:	lsl.w	r3, r1, r3
    bacc:	ldr	r1, [sp, #24]
    bace:	ands	r1, r3
    bad0:	str	r1, [sp, #24]
    bad2:	b.n	b7b0 <_strtod_l+0xac0>
    bad4:	add	r0, sp, #76	; 0x4c
    bad6:	add	r2, sp, #88	; 0x58
    bad8:	ldr	r1, [pc, #128]	; (bb5c <_strtod_l+0xe6c>)
    bada:	bl	f820 <__hexnan>
    bade:	cmp	r0, #5
    bae0:	bne.w	b546 <_strtod_l+0x856>
    bae4:	ldr	r3, [sp, #92]	; 0x5c
    bae6:	orr.w	r3, r3, #2139095040	; 0x7f800000
    baea:	orr.w	r3, r3, #7340032	; 0x700000
    baee:	str	r3, [sp, #28]
    baf0:	ldr	r3, [sp, #88]	; 0x58
    baf2:	str	r3, [sp, #24]
    baf4:	b.w	b046 <_strtod_l+0x356>
    baf8:	ldr	r3, [pc, #88]	; (bb54 <_strtod_l+0xe64>)
    bafa:	ands	r3, r7
    bafc:	cmp.w	r3, #112197632	; 0x6b00000
    bb00:	bgt.w	b978 <_strtod_l+0xc88>
    bb04:	cmp.w	r3, #57671680	; 0x3700000
    bb08:	bgt.w	b998 <_strtod_l+0xca8>
    bb0c:	b.n	b8cc <_strtod_l+0xbdc>
    bb0e:	subs	r3, #32
    bb10:	mov.w	r0, #4294967295
    bb14:	lsl.w	r3, r0, r3
    bb18:	ands	r3, r1
    bb1a:	str	r3, [sp, #28]
    bb1c:	b.n	b7b0 <_strtod_l+0xac0>
    bb1e:	adds	r3, #1
    bb20:	bne.n	ba7e <_strtod_l+0xd8e>
    bb22:	b.n	b6bc <_strtod_l+0x9cc>
    bb24:	movs	r3, #106	; 0x6a
    bb26:	str	r3, [sp, #36]	; 0x24
    bb28:	b.n	b78a <_strtod_l+0xa9a>
    bb2a:	mov	r0, r5
    bb2c:	ldr	r1, [sp, #76]	; 0x4c
    bb2e:	adds	r5, #1
    bb30:	b.n	b7d6 <_strtod_l+0xae6>
    bb32:	ldrd	r7, r8, [sp, #16]
    bb36:	strd	r7, r8, [sp, #24]
    bb3a:	b.n	b494 <_strtod_l+0x7a4>
    bb3c:	ldrd	r0, r1, [sp, #16]
    bb40:	strd	r0, r1, [sp, #24]
    bb44:	b.n	b786 <_strtod_l+0xa96>
    bb46:	mov	r0, r1
    bb48:	ldr	r1, [sp, #76]	; 0x4c
    bb4a:	b.n	b7ea <_strtod_l+0xafa>
    bb4c:	.word	0x000fffff
    bb50:	.word	0xbfe00000
    bb54:	.word	0x7ff00000
    bb58:	.word	0x7fefffff
    bb5c:	.word	0x20000c28

0000bb60 <_strtod_r>:
    bb60:	ldr	r3, [pc, #20]	; (bb78 <_strtod_r+0x18>)
    bb62:	ldr	r3, [r3, #0]
    bb64:	push	{r4}
    bb66:	ldr	r3, [r3, #52]	; 0x34
    bb68:	ldr	r4, [pc, #16]	; (bb7c <_strtod_r+0x1c>)
    bb6a:	cmp	r3, #0
    bb6c:	it	eq
    bb6e:	moveq	r3, r4
    bb70:	ldr.w	r4, [sp], #4
    bb74:	b.w	acf0 <_strtod_l>
    bb78:	.word	0x20001dac
    bb7c:	.word	0x20001830

0000bb80 <_strtol_l.isra.0>:
    bb80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb84:	ldr.w	r9, [sp, #40]	; 0x28
    bb88:	mov	r7, r1
    bb8a:	mov	r8, r0
    bb8c:	mov	r6, r2
    bb8e:	mov	r5, r3
    bb90:	mov	fp, r1
    bb92:	b.n	bb96 <_strtol_l.isra.0+0x16>
    bb94:	mov	fp, r4
    bb96:	mov	r4, fp
    bb98:	mov	r0, r9
    bb9a:	ldrb.w	sl, [r4], #1
    bb9e:	bl	9ed4 <__locale_ctype_ptr_l>
    bba2:	add	r0, sl
    bba4:	ldrb	r1, [r0, #1]
    bba6:	and.w	r1, r1, #8
    bbaa:	and.w	ip, r1, #255	; 0xff
    bbae:	cmp	r1, #0
    bbb0:	bne.n	bb94 <_strtol_l.isra.0+0x14>
    bbb2:	mov	r2, sl
    bbb4:	cmp	r2, #45	; 0x2d
    bbb6:	beq.n	bc7c <_strtol_l.isra.0+0xfc>
    bbb8:	cmp	r2, #43	; 0x2b
    bbba:	itt	eq
    bbbc:	ldrbeq.w	r2, [fp, #1]
    bbc0:	addeq.w	r4, fp, #2
    bbc4:	cmp	r5, #0
    bbc6:	beq.n	bc50 <_strtol_l.isra.0+0xd0>
    bbc8:	cmp	r5, #16
    bbca:	beq.n	bc98 <_strtol_l.isra.0+0x118>
    bbcc:	mov	r9, r5
    bbce:	cmp.w	ip, #0
    bbd2:	ite	eq
    bbd4:	mvneq.w	sl, #2147483648	; 0x80000000
    bbd8:	movne.w	sl, #2147483648	; 0x80000000
    bbdc:	movs	r1, #0
    bbde:	udiv	lr, sl, r9
    bbe2:	mov	r0, r1
    bbe4:	mls	sl, r9, lr, sl
    bbe8:	b.n	bbf6 <_strtol_l.isra.0+0x76>
    bbea:	beq.n	bc40 <_strtol_l.isra.0+0xc0>
    bbec:	mla	r0, r9, r0, r3
    bbf0:	movs	r1, #1
    bbf2:	ldrb.w	r2, [r4], #1
    bbf6:	sub.w	r3, r2, #48	; 0x30
    bbfa:	cmp	r3, #9
    bbfc:	bls.n	bc0a <_strtol_l.isra.0+0x8a>
    bbfe:	sub.w	r3, r2, #65	; 0x41
    bc02:	cmp	r3, #25
    bc04:	bhi.n	bc1c <_strtol_l.isra.0+0x9c>
    bc06:	sub.w	r3, r2, #55	; 0x37
    bc0a:	cmp	r5, r3
    bc0c:	ble.n	bc2c <_strtol_l.isra.0+0xac>
    bc0e:	adds	r2, r1, #1
    bc10:	beq.n	bbf2 <_strtol_l.isra.0+0x72>
    bc12:	cmp	lr, r0
    bc14:	bcs.n	bbea <_strtol_l.isra.0+0x6a>
    bc16:	mov.w	r1, #4294967295
    bc1a:	b.n	bbf2 <_strtol_l.isra.0+0x72>
    bc1c:	sub.w	r3, r2, #97	; 0x61
    bc20:	cmp	r3, #25
    bc22:	bhi.n	bc2c <_strtol_l.isra.0+0xac>
    bc24:	sub.w	r3, r2, #87	; 0x57
    bc28:	cmp	r5, r3
    bc2a:	bgt.n	bc0e <_strtol_l.isra.0+0x8e>
    bc2c:	adds	r3, r1, #1
    bc2e:	beq.n	bc5c <_strtol_l.isra.0+0xdc>
    bc30:	cmp.w	ip, #0
    bc34:	bne.n	bc58 <_strtol_l.isra.0+0xd8>
    bc36:	cbz	r6, bc4c <_strtol_l.isra.0+0xcc>
    bc38:	cbnz	r1, bc74 <_strtol_l.isra.0+0xf4>
    bc3a:	str	r7, [r6, #0]
    bc3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc40:	cmp	sl, r3
    bc42:	bge.n	bbec <_strtol_l.isra.0+0x6c>
    bc44:	mov	r0, lr
    bc46:	mov.w	r1, #4294967295
    bc4a:	b.n	bbf2 <_strtol_l.isra.0+0x72>
    bc4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc50:	cmp	r2, #48	; 0x30
    bc52:	beq.n	bc8a <_strtol_l.isra.0+0x10a>
    bc54:	movs	r5, #10
    bc56:	b.n	bbcc <_strtol_l.isra.0+0x4c>
    bc58:	negs	r0, r0
    bc5a:	b.n	bc36 <_strtol_l.isra.0+0xb6>
    bc5c:	cmp.w	ip, #0
    bc60:	mov.w	r3, #34	; 0x22
    bc64:	ite	eq
    bc66:	mvneq.w	r0, #2147483648	; 0x80000000
    bc6a:	movne.w	r0, #2147483648	; 0x80000000
    bc6e:	str.w	r3, [r8]
    bc72:	cbz	r6, bcb2 <_strtol_l.isra.0+0x132>
    bc74:	subs	r7, r4, #1
    bc76:	str	r7, [r6, #0]
    bc78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc7c:	add.w	r4, fp, #2
    bc80:	ldrb.w	r2, [fp, #1]
    bc84:	mov.w	ip, #1
    bc88:	b.n	bbc4 <_strtol_l.isra.0+0x44>
    bc8a:	ldrb	r3, [r4, #0]
    bc8c:	and.w	r3, r3, #223	; 0xdf
    bc90:	cmp	r3, #88	; 0x58
    bc92:	beq.n	bca6 <_strtol_l.isra.0+0x126>
    bc94:	movs	r5, #8
    bc96:	b.n	bbcc <_strtol_l.isra.0+0x4c>
    bc98:	cmp	r2, #48	; 0x30
    bc9a:	bne.n	bbcc <_strtol_l.isra.0+0x4c>
    bc9c:	ldrb	r3, [r4, #0]
    bc9e:	and.w	r3, r3, #223	; 0xdf
    bca2:	cmp	r3, #88	; 0x58
    bca4:	bne.n	bbcc <_strtol_l.isra.0+0x4c>
    bca6:	mov.w	r9, #16
    bcaa:	ldrb	r2, [r4, #1]
    bcac:	mov	r5, r9
    bcae:	adds	r4, #2
    bcb0:	b.n	bbce <_strtol_l.isra.0+0x4e>
    bcb2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcb6:	nop

0000bcb8 <_strtol_r>:
    bcb8:	push	{r4, r5, lr}
    bcba:	ldr	r4, [pc, #24]	; (bcd4 <_strtol_r+0x1c>)
    bcbc:	ldr	r5, [pc, #24]	; (bcd8 <_strtol_r+0x20>)
    bcbe:	ldr	r4, [r4, #0]
    bcc0:	ldr	r4, [r4, #52]	; 0x34
    bcc2:	sub	sp, #12
    bcc4:	cmp	r4, #0
    bcc6:	it	eq
    bcc8:	moveq	r4, r5
    bcca:	str	r4, [sp, #0]
    bccc:	bl	bb80 <_strtol_l.isra.0>
    bcd0:	add	sp, #12
    bcd2:	pop	{r4, r5, pc}
    bcd4:	.word	0x20001dac
    bcd8:	.word	0x20001830
    bcdc:	.word	0x00000000

0000bce0 <_svfprintf_r>:
    bce0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bce4:	vpush	{d8-d10}
    bce8:	sub	sp, #228	; 0xe4
    bcea:	mov	r4, r1
    bcec:	str	r1, [sp, #12]
    bcee:	mov	sl, r2
    bcf0:	str	r3, [sp, #36]	; 0x24
    bcf2:	str	r0, [sp, #20]
    bcf4:	bl	f9c0 <_localeconv_r>
    bcf8:	ldr	r3, [r0, #0]
    bcfa:	str	r3, [sp, #64]	; 0x40
    bcfc:	mov	r0, r3
    bcfe:	bl	ab40 <strlen>
    bd02:	ldrh	r3, [r4, #12]
    bd04:	str	r0, [sp, #60]	; 0x3c
    bd06:	lsls	r1, r3, #24
    bd08:	bpl.n	bd12 <_svfprintf_r+0x32>
    bd0a:	ldr	r3, [r4, #16]
    bd0c:	cmp	r3, #0
    bd0e:	beq.w	ce0c <_svfprintf_r+0x112c>
    bd12:	movs	r3, #0
    bd14:	vldr	d8, [pc, #656]	; bfa8 <_svfprintf_r+0x2c8>
    bd18:	vldr	d9, [pc, #660]	; bfb0 <_svfprintf_r+0x2d0>
    bd1c:	str	r3, [sp, #52]	; 0x34
    bd1e:	str	r3, [sp, #116]	; 0x74
    bd20:	str	r3, [sp, #112]	; 0x70
    bd22:	str	r3, [sp, #68]	; 0x44
    bd24:	str	r3, [sp, #24]
    bd26:	add	r3, sp, #160	; 0xa0
    bd28:	str	r3, [sp, #108]	; 0x6c
    bd2a:	mov	r9, r3
    bd2c:	ldrb.w	r3, [sl]
    bd30:	mov	r4, sl
    bd32:	cbz	r3, bd70 <_svfprintf_r+0x90>
    bd34:	cmp	r3, #37	; 0x25
    bd36:	bne.n	bd3e <_svfprintf_r+0x5e>
    bd38:	b.n	bd70 <_svfprintf_r+0x90>
    bd3a:	cmp	r3, #37	; 0x25
    bd3c:	beq.n	bd46 <_svfprintf_r+0x66>
    bd3e:	ldrb.w	r3, [r4, #1]!
    bd42:	cmp	r3, #0
    bd44:	bne.n	bd3a <_svfprintf_r+0x5a>
    bd46:	rsb	r5, sl, r4
    bd4a:	cbz	r5, bd70 <_svfprintf_r+0x90>
    bd4c:	ldr	r3, [sp, #112]	; 0x70
    bd4e:	ldr	r2, [sp, #116]	; 0x74
    bd50:	str.w	sl, [r9]
    bd54:	adds	r3, #1
    bd56:	add	r2, r5
    bd58:	cmp	r3, #7
    bd5a:	str.w	r5, [r9, #4]
    bd5e:	str	r2, [sp, #116]	; 0x74
    bd60:	str	r3, [sp, #112]	; 0x70
    bd62:	bgt.w	beac <_svfprintf_r+0x1cc>
    bd66:	add.w	r9, r9, #8
    bd6a:	ldr	r3, [sp, #24]
    bd6c:	add	r3, r5
    bd6e:	str	r3, [sp, #24]
    bd70:	ldrb	r3, [r4, #0]
    bd72:	cmp	r3, #0
    bd74:	beq.w	bebe <_svfprintf_r+0x1de>
    bd78:	movs	r3, #0
    bd7a:	mov	r2, r3
    bd7c:	strb.w	r3, [sp, #79]	; 0x4f
    bd80:	mov	r1, r3
    bd82:	str	r3, [sp, #28]
    bd84:	mov	fp, r3
    bd86:	mov.w	r8, #4294967295
    bd8a:	ldrb	r3, [r4, #1]
    bd8c:	add.w	sl, r4, #1
    bd90:	mov	r5, r8
    bd92:	add.w	sl, sl, #1
    bd96:	sub.w	r0, r3, #32
    bd9a:	cmp	r0, #88	; 0x58
    bd9c:	bhi.w	c590 <_svfprintf_r+0x8b0>
    bda0:	tbh	[pc, r0, lsl #1]
    bda4:	.word	0x03f60363
    bda8:	.word	0x036b03f6
    bdac:	.word	0x03f603f6
    bdb0:	.word	0x03f603f6
    bdb4:	.word	0x03f603f6
    bdb8:	.word	0x037e0370
    bdbc:	.word	0x005d03f6
    bdc0:	.word	0x03f600df
    bdc4:	.word	0x010c00fb
    bdc8:	.word	0x010c010c
    bdcc:	.word	0x010c010c
    bdd0:	.word	0x010c010c
    bdd4:	.word	0x010c010c
    bdd8:	.word	0x03f603f6
    bddc:	.word	0x03f603f6
    bde0:	.word	0x03f603f6
    bde4:	.word	0x03f603f6
    bde8:	.word	0x03f603f6
    bdec:	.word	0x015e011c
    bdf0:	.word	0x015e03f6
    bdf4:	.word	0x03f603f6
    bdf8:	.word	0x03f603f6
    bdfc:	.word	0x03f602a1
    be00:	.word	0x02a603f6
    be04:	.word	0x03f603f6
    be08:	.word	0x03f603f6
    be0c:	.word	0x02d803f6
    be10:	.word	0x03f603f6
    be14:	.word	0x03f60305
    be18:	.word	0x03f603f6
    be1c:	.word	0x03f603f6
    be20:	.word	0x03f603f6
    be24:	.word	0x03f603f6
    be28:	.word	0x034303f6
    be2c:	.word	0x015e0356
    be30:	.word	0x015e015e
    be34:	.word	0x0356035e
    be38:	.word	0x03f603f6
    be3c:	.word	0x03f603a4
    be40:	.word	0x00a203b1
    be44:	.word	0x03c30062
    be48:	.word	0x03c803f6
    be4c:	.word	0x038303f6
    be50:	.word	0x03f603f6
    be54:	.short	0x038b
    be56:	ldr	r0, [sp, #28]
    be58:	str	r3, [sp, #36]	; 0x24
    be5a:	negs	r0, r0
    be5c:	str	r0, [sp, #28]
    be5e:	orr.w	fp, fp, #4
    be62:	ldrb.w	r3, [sl]
    be66:	b.n	bd92 <_svfprintf_r+0xb2>
    be68:	mov	r8, r5
    be6a:	ldr	r0, [sp, #36]	; 0x24
    be6c:	movs	r1, #0
    be6e:	movs	r3, #48	; 0x30
    be70:	movs	r2, #120	; 0x78
    be72:	cmp	r8, r1
    be74:	strb.w	r3, [sp, #80]	; 0x50
    be78:	ldr	r4, [r0, #0]
    be7a:	strb.w	r2, [sp, #81]	; 0x51
    be7e:	add.w	r7, r0, #4
    be82:	mov.w	r5, #0
    be86:	strb.w	r1, [sp, #79]	; 0x4f
    be8a:	orr.w	r3, fp, #2
    be8e:	blt.w	c5ca <_svfprintf_r+0x8ea>
    be92:	bic.w	r3, fp, #128	; 0x80
    be96:	orr.w	fp, r3, #2
    be9a:	orrs.w	r3, r4, r5
    be9e:	str	r7, [sp, #36]	; 0x24
    bea0:	beq.w	c576 <_svfprintf_r+0x896>
    bea4:	mov	r7, r1
    bea6:	str	r2, [sp, #48]	; 0x30
    bea8:	ldr	r0, [pc, #268]	; (bfb8 <_svfprintf_r+0x2d8>)
    beaa:	b.n	c40a <_svfprintf_r+0x72a>
    beac:	add	r2, sp, #108	; 0x6c
    beae:	ldr	r1, [sp, #12]
    beb0:	ldr	r0, [sp, #20]
    beb2:	bl	10908 <__ssprint_r>
    beb6:	cbnz	r0, becc <_svfprintf_r+0x1ec>
    beb8:	add.w	r9, sp, #160	; 0xa0
    bebc:	b.n	bd6a <_svfprintf_r+0x8a>
    bebe:	ldr	r3, [sp, #116]	; 0x74
    bec0:	cbz	r3, becc <_svfprintf_r+0x1ec>
    bec2:	ldr	r0, [sp, #20]
    bec4:	ldr	r1, [sp, #12]
    bec6:	add	r2, sp, #108	; 0x6c
    bec8:	bl	10908 <__ssprint_r>
    becc:	ldr	r3, [sp, #12]
    bece:	ldrh	r3, [r3, #12]
    bed0:	tst.w	r3, #64	; 0x40
    bed4:	ldr	r3, [sp, #24]
    bed6:	it	ne
    bed8:	movne.w	r3, #4294967295
    bedc:	mov	r0, r3
    bede:	add	sp, #228	; 0xe4
    bee0:	vpop	{d8-d10}
    bee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bee8:	str	r3, [sp, #48]	; 0x30
    beea:	mov	r8, r5
    beec:	cmp	r2, #0
    beee:	bne.w	d226 <_svfprintf_r+0x1546>
    bef2:	ands.w	r3, fp, #32
    bef6:	beq.w	c306 <_svfprintf_r+0x626>
    befa:	ldr	r7, [sp, #36]	; 0x24
    befc:	adds	r7, #7
    befe:	bic.w	r3, r7, #7
    bf02:	movs	r7, #0
    bf04:	add.w	r2, r3, #8
    bf08:	cmp	r8, r7
    bf0a:	str	r2, [sp, #36]	; 0x24
    bf0c:	ldrd	r4, r5, [r3]
    bf10:	strb.w	r7, [sp, #79]	; 0x4f
    bf14:	blt.w	cbd4 <_svfprintf_r+0xef4>
    bf18:	orrs.w	r3, r4, r5
    bf1c:	bic.w	fp, fp, #128	; 0x80
    bf20:	beq.w	c5ba <_svfprintf_r+0x8da>
    bf24:	add	r6, sp, #160	; 0xa0
    bf26:	lsrs	r2, r4, #3
    bf28:	orr.w	r2, r2, r5, lsl #29
    bf2c:	lsrs	r1, r5, #3
    bf2e:	and.w	r3, r4, #7
    bf32:	mov	r5, r1
    bf34:	mov	r4, r2
    bf36:	adds	r3, #48	; 0x30
    bf38:	orrs.w	r2, r4, r5
    bf3c:	strb.w	r3, [r6, #-1]!
    bf40:	bne.n	bf26 <_svfprintf_r+0x246>
    bf42:	tst.w	fp, #1
    bf46:	beq.w	c398 <_svfprintf_r+0x6b8>
    bf4a:	cmp	r3, #48	; 0x30
    bf4c:	beq.w	c398 <_svfprintf_r+0x6b8>
    bf50:	movs	r2, #48	; 0x30
    bf52:	subs	r3, r6, #1
    bf54:	strb.w	r2, [r6, #-1]
    bf58:	add	r2, sp, #160	; 0xa0
    bf5a:	subs	r2, r2, r3
    bf5c:	str	r2, [sp, #32]
    bf5e:	mov	r6, r3
    bf60:	b.n	c39e <_svfprintf_r+0x6be>
    bf62:	ldrb.w	r3, [sl]
    bf66:	cmp	r3, #42	; 0x2a
    bf68:	add.w	r4, sl, #1
    bf6c:	beq.w	d1ce <_svfprintf_r+0x14ee>
    bf70:	sub.w	r0, r3, #48	; 0x30
    bf74:	cmp	r0, #9
    bf76:	it	ls
    bf78:	movls	r5, #0
    bf7a:	bhi.w	d128 <_svfprintf_r+0x1448>
    bf7e:	ldrb.w	r3, [r4], #1
    bf82:	add.w	r5, r5, r5, lsl #2
    bf86:	add.w	r5, r0, r5, lsl #1
    bf8a:	sub.w	r0, r3, #48	; 0x30
    bf8e:	cmp	r0, #9
    bf90:	bls.n	bf7e <_svfprintf_r+0x29e>
    bf92:	orr.w	r5, r5, r5, asr #31
    bf96:	mov	sl, r4
    bf98:	b.n	bd96 <_svfprintf_r+0xb6>
    bf9a:	orr.w	fp, fp, #128	; 0x80
    bf9e:	ldrb.w	r3, [sl]
    bfa2:	b.n	bd92 <_svfprintf_r+0xb2>
    bfa4:	nop.w
	...
    bfb0:	.word	0xffffffff
    bfb4:	.word	0x7fefffff
    bfb8:	.word	0x20000c8c
    bfbc:	sub.w	r0, r3, #48	; 0x30
    bfc0:	movs	r3, #0
    bfc2:	mov	r4, r3
    bfc4:	ldrb.w	r3, [sl], #1
    bfc8:	add.w	r4, r4, r4, lsl #2
    bfcc:	add.w	r4, r0, r4, lsl #1
    bfd0:	sub.w	r0, r3, #48	; 0x30
    bfd4:	cmp	r0, #9
    bfd6:	bls.n	bfc4 <_svfprintf_r+0x2e4>
    bfd8:	str	r4, [sp, #28]
    bfda:	b.n	bd96 <_svfprintf_r+0xb6>
    bfdc:	str	r3, [sp, #48]	; 0x30
    bfde:	mov	r8, r5
    bfe0:	cmp	r2, #0
    bfe2:	bne.w	d23e <_svfprintf_r+0x155e>
    bfe6:	orr.w	fp, fp, #16
    bfea:	tst.w	fp, #32
    bfee:	beq.w	c9f8 <_svfprintf_r+0xd18>
    bff2:	ldr	r7, [sp, #36]	; 0x24
    bff4:	adds	r7, #7
    bff6:	bic.w	r7, r7, #7
    bffa:	ldrd	r2, r3, [r7]
    bffe:	add.w	r1, r7, #8
    c002:	str	r1, [sp, #36]	; 0x24
    c004:	mov	r4, r2
    c006:	mov	r5, r3
    c008:	cmp	r2, #0
    c00a:	sbcs.w	r3, r3, #0
    c00e:	blt.w	ca80 <_svfprintf_r+0xda0>
    c012:	cmp.w	r8, #0
    c016:	ldrb.w	r7, [sp, #79]	; 0x4f
    c01a:	blt.w	c388 <_svfprintf_r+0x6a8>
    c01e:	orrs.w	r3, r4, r5
    c022:	bic.w	fp, fp, #128	; 0x80
    c026:	beq.w	c816 <_svfprintf_r+0xb36>
    c02a:	cmp	r5, #0
    c02c:	it	eq
    c02e:	cmpeq	r4, #10
    c030:	bcc.w	c390 <_svfprintf_r+0x6b0>
    c034:	add	r6, sp, #160	; 0xa0
    c036:	mov	r0, r4
    c038:	mov	r1, r5
    c03a:	movs	r2, #10
    c03c:	movs	r3, #0
    c03e:	bl	9b20 <__aeabi_uldivmod>
    c042:	adds	r2, #48	; 0x30
    c044:	strb.w	r2, [r6, #-1]!
    c048:	mov	r0, r4
    c04a:	mov	r1, r5
    c04c:	movs	r3, #0
    c04e:	movs	r2, #10
    c050:	bl	9b20 <__aeabi_uldivmod>
    c054:	mov	r4, r0
    c056:	mov	r5, r1
    c058:	orrs.w	r3, r4, r5
    c05c:	bne.n	c036 <_svfprintf_r+0x356>
    c05e:	b.n	c398 <_svfprintf_r+0x6b8>
    c060:	str	r3, [sp, #48]	; 0x30
    c062:	mov	r8, r5
    c064:	cmp	r2, #0
    c066:	bne.w	d236 <_svfprintf_r+0x1556>
    c06a:	ldr	r7, [sp, #36]	; 0x24
    c06c:	tst.w	fp, #8
    c070:	add.w	r7, r7, #7
    c074:	beq.w	ccf8 <_svfprintf_r+0x1018>
    c078:	bic.w	r3, r7, #7
    c07c:	vldr	d8, [r3]
    c080:	add.w	r2, r3, #8
    c084:	str	r2, [sp, #36]	; 0x24
    c086:	vabs.f64	d7, d8
    c08a:	vcmp.f64	d7, d9
    c08e:	vmrs	APSR_nzcv, fpscr
    c092:	ble.w	cc0e <_svfprintf_r+0xf2e>
    c096:	vcmpe.f64	d8, #0.0
    c09a:	vmrs	APSR_nzcv, fpscr
    c09e:	bmi.w	d036 <_svfprintf_r+0x1356>
    c0a2:	ldrb.w	r7, [sp, #79]	; 0x4f
    c0a6:	ldr	r6, [pc, #668]	; (c344 <_svfprintf_r+0x664>)
    c0a8:	ldr	r3, [pc, #668]	; (c348 <_svfprintf_r+0x668>)
    c0aa:	ldr	r1, [sp, #48]	; 0x30
    c0ac:	movs	r2, #3
    c0ae:	mov.w	r8, #0
    c0b2:	str	r2, [sp, #16]
    c0b4:	bic.w	fp, fp, #128	; 0x80
    c0b8:	cmp	r1, #71	; 0x47
    c0ba:	it	le
    c0bc:	movle	r6, r3
    c0be:	str	r2, [sp, #32]
    c0c0:	str.w	r8, [sp, #56]	; 0x38
    c0c4:	cbz	r7, c0cc <_svfprintf_r+0x3ec>
    c0c6:	ldr	r3, [sp, #16]
    c0c8:	adds	r3, #1
    c0ca:	str	r3, [sp, #16]
    c0cc:	ands.w	r3, fp, #2
    c0d0:	str	r3, [sp, #40]	; 0x28
    c0d2:	beq.n	c0da <_svfprintf_r+0x3fa>
    c0d4:	ldr	r3, [sp, #16]
    c0d6:	adds	r3, #2
    c0d8:	str	r3, [sp, #16]
    c0da:	ands.w	r3, fp, #132	; 0x84
    c0de:	str	r3, [sp, #44]	; 0x2c
    c0e0:	bne.w	c5e4 <_svfprintf_r+0x904>
    c0e4:	ldr	r3, [sp, #28]
    c0e6:	ldr	r2, [sp, #16]
    c0e8:	subs	r4, r3, r2
    c0ea:	cmp	r4, #0
    c0ec:	ble.w	c5e4 <_svfprintf_r+0x904>
    c0f0:	cmp	r4, #16
    c0f2:	ldr	r1, [sp, #116]	; 0x74
    c0f4:	ldr	r2, [sp, #112]	; 0x70
    c0f6:	ldr	r7, [pc, #596]	; (c34c <_svfprintf_r+0x66c>)
    c0f8:	ble.n	c142 <_svfprintf_r+0x462>
    c0fa:	mov	r0, r9
    c0fc:	movs	r5, #16
    c0fe:	mov	r9, r8
    c100:	mov	r8, r6
    c102:	ldr	r6, [sp, #20]
    c104:	b.n	c110 <_svfprintf_r+0x430>
    c106:	subs	r4, #16
    c108:	cmp	r4, #16
    c10a:	add.w	r0, r0, #8
    c10e:	ble.n	c13c <_svfprintf_r+0x45c>
    c110:	adds	r2, #1
    c112:	adds	r1, #16
    c114:	cmp	r2, #7
    c116:	str	r1, [sp, #116]	; 0x74
    c118:	str	r2, [sp, #112]	; 0x70
    c11a:	str	r7, [r0, #0]
    c11c:	str	r5, [r0, #4]
    c11e:	ble.n	c106 <_svfprintf_r+0x426>
    c120:	add	r2, sp, #108	; 0x6c
    c122:	ldr	r1, [sp, #12]
    c124:	mov	r0, r6
    c126:	bl	10908 <__ssprint_r>
    c12a:	cmp	r0, #0
    c12c:	bne.w	becc <_svfprintf_r+0x1ec>
    c130:	subs	r4, #16
    c132:	cmp	r4, #16
    c134:	ldr	r1, [sp, #116]	; 0x74
    c136:	ldr	r2, [sp, #112]	; 0x70
    c138:	add	r0, sp, #160	; 0xa0
    c13a:	bgt.n	c110 <_svfprintf_r+0x430>
    c13c:	mov	r6, r8
    c13e:	mov	r8, r9
    c140:	mov	r9, r0
    c142:	adds	r2, #1
    c144:	adds	r3, r4, r1
    c146:	cmp	r2, #7
    c148:	str	r3, [sp, #116]	; 0x74
    c14a:	str	r2, [sp, #112]	; 0x70
    c14c:	str.w	r7, [r9]
    c150:	str.w	r4, [r9, #4]
    c154:	bgt.w	c91c <_svfprintf_r+0xc3c>
    c158:	ldrb.w	r7, [sp, #79]	; 0x4f
    c15c:	add.w	r9, r9, #8
    c160:	cbz	r7, c180 <_svfprintf_r+0x4a0>
    c162:	ldr	r2, [sp, #112]	; 0x70
    c164:	adds	r2, #1
    c166:	adds	r3, #1
    c168:	add.w	r0, sp, #79	; 0x4f
    c16c:	movs	r1, #1
    c16e:	cmp	r2, #7
    c170:	str	r3, [sp, #116]	; 0x74
    c172:	str	r2, [sp, #112]	; 0x70
    c174:	stmia.w	r9, {r0, r1}
    c178:	bgt.w	c83a <_svfprintf_r+0xb5a>
    c17c:	add.w	r9, r9, #8
    c180:	ldr	r2, [sp, #40]	; 0x28
    c182:	cbz	r2, c1a0 <_svfprintf_r+0x4c0>
    c184:	ldr	r2, [sp, #112]	; 0x70
    c186:	adds	r2, #1
    c188:	adds	r3, #2
    c18a:	add	r0, sp, #80	; 0x50
    c18c:	movs	r1, #2
    c18e:	cmp	r2, #7
    c190:	str	r3, [sp, #116]	; 0x74
    c192:	str	r2, [sp, #112]	; 0x70
    c194:	stmia.w	r9, {r0, r1}
    c198:	bgt.w	c852 <_svfprintf_r+0xb72>
    c19c:	add.w	r9, r9, #8
    c1a0:	ldr	r2, [sp, #44]	; 0x2c
    c1a2:	cmp	r2, #128	; 0x80
    c1a4:	beq.w	c6a4 <_svfprintf_r+0x9c4>
    c1a8:	ldr	r2, [sp, #32]
    c1aa:	rsb	r4, r2, r8
    c1ae:	cmp	r4, #0
    c1b0:	ble.n	c21c <_svfprintf_r+0x53c>
    c1b2:	cmp	r4, #16
    c1b4:	ldr	r2, [sp, #112]	; 0x70
    c1b6:	ldr	r7, [pc, #408]	; (c350 <_svfprintf_r+0x670>)
    c1b8:	ble.n	c202 <_svfprintf_r+0x522>
    c1ba:	mov	r1, r9
    c1bc:	mov.w	r8, #16
    c1c0:	mov	r9, r6
    c1c2:	ldr	r5, [sp, #20]
    c1c4:	ldr	r6, [sp, #12]
    c1c6:	b.n	c1d2 <_svfprintf_r+0x4f2>
    c1c8:	subs	r4, #16
    c1ca:	cmp	r4, #16
    c1cc:	add.w	r1, r1, #8
    c1d0:	ble.n	c1fe <_svfprintf_r+0x51e>
    c1d2:	adds	r2, #1
    c1d4:	adds	r3, #16
    c1d6:	cmp	r2, #7
    c1d8:	str	r3, [sp, #116]	; 0x74
    c1da:	str	r2, [sp, #112]	; 0x70
    c1dc:	stmia.w	r1, {r7, r8}
    c1e0:	ble.n	c1c8 <_svfprintf_r+0x4e8>
    c1e2:	add	r2, sp, #108	; 0x6c
    c1e4:	mov	r1, r6
    c1e6:	mov	r0, r5
    c1e8:	bl	10908 <__ssprint_r>
    c1ec:	cmp	r0, #0
    c1ee:	bne.w	becc <_svfprintf_r+0x1ec>
    c1f2:	subs	r4, #16
    c1f4:	cmp	r4, #16
    c1f6:	ldr	r3, [sp, #116]	; 0x74
    c1f8:	ldr	r2, [sp, #112]	; 0x70
    c1fa:	add	r1, sp, #160	; 0xa0
    c1fc:	bgt.n	c1d2 <_svfprintf_r+0x4f2>
    c1fe:	mov	r6, r9
    c200:	mov	r9, r1
    c202:	adds	r2, #1
    c204:	add	r3, r4
    c206:	cmp	r2, #7
    c208:	str	r3, [sp, #116]	; 0x74
    c20a:	str	r2, [sp, #112]	; 0x70
    c20c:	str.w	r7, [r9]
    c210:	str.w	r4, [r9, #4]
    c214:	bgt.w	c822 <_svfprintf_r+0xb42>
    c218:	add.w	r9, r9, #8
    c21c:	tst.w	fp, #256	; 0x100
    c220:	bne.w	c5e8 <_svfprintf_r+0x908>
    c224:	ldr	r2, [sp, #112]	; 0x70
    c226:	ldr	r0, [sp, #32]
    c228:	str.w	r6, [r9]
    c22c:	adds	r2, #1
    c22e:	add	r3, r0
    c230:	cmp	r2, #7
    c232:	str	r3, [sp, #116]	; 0x74
    c234:	str.w	r0, [r9, #4]
    c238:	str	r2, [sp, #112]	; 0x70
    c23a:	bgt.w	c7c2 <_svfprintf_r+0xae2>
    c23e:	add.w	r9, r9, #8
    c242:	tst.w	fp, #4
    c246:	beq.n	c2c6 <_svfprintf_r+0x5e6>
    c248:	ldr	r2, [sp, #28]
    c24a:	ldr	r1, [sp, #16]
    c24c:	subs	r4, r2, r1
    c24e:	cmp	r4, #0
    c250:	ble.n	c2c6 <_svfprintf_r+0x5e6>
    c252:	cmp	r4, #16
    c254:	ldr	r2, [sp, #112]	; 0x70
    c256:	ldr	r7, [pc, #244]	; (c34c <_svfprintf_r+0x66c>)
    c258:	ble.n	c2a0 <_svfprintf_r+0x5c0>
    c25a:	movs	r5, #16
    c25c:	ldr	r6, [sp, #20]
    c25e:	ldr.w	r8, [sp, #12]
    c262:	b.n	c26e <_svfprintf_r+0x58e>
    c264:	subs	r4, #16
    c266:	cmp	r4, #16
    c268:	add.w	r9, r9, #8
    c26c:	ble.n	c2a0 <_svfprintf_r+0x5c0>
    c26e:	adds	r2, #1
    c270:	adds	r3, #16
    c272:	cmp	r2, #7
    c274:	str	r3, [sp, #116]	; 0x74
    c276:	str	r2, [sp, #112]	; 0x70
    c278:	str.w	r7, [r9]
    c27c:	str.w	r5, [r9, #4]
    c280:	ble.n	c264 <_svfprintf_r+0x584>
    c282:	add	r2, sp, #108	; 0x6c
    c284:	mov	r1, r8
    c286:	mov	r0, r6
    c288:	bl	10908 <__ssprint_r>
    c28c:	cmp	r0, #0
    c28e:	bne.w	becc <_svfprintf_r+0x1ec>
    c292:	subs	r4, #16
    c294:	cmp	r4, #16
    c296:	ldr	r3, [sp, #116]	; 0x74
    c298:	ldr	r2, [sp, #112]	; 0x70
    c29a:	add.w	r9, sp, #160	; 0xa0
    c29e:	bgt.n	c26e <_svfprintf_r+0x58e>
    c2a0:	adds	r2, #1
    c2a2:	add	r3, r4
    c2a4:	cmp	r2, #7
    c2a6:	str	r3, [sp, #116]	; 0x74
    c2a8:	str	r2, [sp, #112]	; 0x70
    c2aa:	str.w	r7, [r9]
    c2ae:	str.w	r4, [r9, #4]
    c2b2:	ble.n	c2c6 <_svfprintf_r+0x5e6>
    c2b4:	add	r2, sp, #108	; 0x6c
    c2b6:	ldr	r1, [sp, #12]
    c2b8:	ldr	r0, [sp, #20]
    c2ba:	bl	10908 <__ssprint_r>
    c2be:	cmp	r0, #0
    c2c0:	bne.w	becc <_svfprintf_r+0x1ec>
    c2c4:	ldr	r3, [sp, #116]	; 0x74
    c2c6:	ldr	r2, [sp, #24]
    c2c8:	ldr	r1, [sp, #28]
    c2ca:	ldr	r0, [sp, #16]
    c2cc:	cmp	r1, r0
    c2ce:	ite	ge
    c2d0:	addge	r2, r2, r1
    c2d2:	addlt	r2, r2, r0
    c2d4:	str	r2, [sp, #24]
    c2d6:	cmp	r3, #0
    c2d8:	bne.w	c7da <_svfprintf_r+0xafa>
    c2dc:	movs	r3, #0
    c2de:	str	r3, [sp, #112]	; 0x70
    c2e0:	add.w	r9, sp, #160	; 0xa0
    c2e4:	b.n	bd2c <_svfprintf_r+0x4c>
    c2e6:	orr.w	fp, fp, #8
    c2ea:	ldrb.w	r3, [sl]
    c2ee:	b.n	bd92 <_svfprintf_r+0xb2>
    c2f0:	str	r3, [sp, #48]	; 0x30
    c2f2:	mov	r8, r5
    c2f4:	cmp	r2, #0
    c2f6:	bne.w	d22e <_svfprintf_r+0x154e>
    c2fa:	orr.w	fp, fp, #16
    c2fe:	ands.w	r3, fp, #32
    c302:	bne.w	befa <_svfprintf_r+0x21a>
    c306:	ands.w	r2, fp, #16
    c30a:	bne.w	ca30 <_svfprintf_r+0xd50>
    c30e:	ands.w	r3, fp, #64	; 0x40
    c312:	beq.w	ca30 <_svfprintf_r+0xd50>
    c316:	ldr	r1, [sp, #36]	; 0x24
    c318:	strb.w	r2, [sp, #79]	; 0x4f
    c31c:	mov	r3, r1
    c31e:	cmp.w	r8, #0
    c322:	add.w	r3, r3, #4
    c326:	ldrh	r4, [r1, #0]
    c328:	mov.w	r5, #0
    c32c:	blt.w	ce86 <_svfprintf_r+0x11a6>
    c330:	orrs.w	r1, r4, r5
    c334:	bic.w	fp, fp, #128	; 0x80
    c338:	str	r3, [sp, #36]	; 0x24
    c33a:	beq.w	c5ba <_svfprintf_r+0x8da>
    c33e:	mov	r7, r2
    c340:	b.n	bf24 <_svfprintf_r+0x244>
    c342:	nop
    c344:	.word	0x20000c6c
    c348:	.word	0x20000c68
    c34c:	.word	0x20000894
    c350:	.word	0x20000d30
    c354:	str	r3, [sp, #48]	; 0x30
    c356:	mov	r8, r5
    c358:	cmp	r2, #0
    c35a:	bne.w	d210 <_svfprintf_r+0x1530>
    c35e:	orr.w	fp, fp, #16
    c362:	ands.w	r3, fp, #32
    c366:	beq.w	c938 <_svfprintf_r+0xc58>
    c36a:	ldr	r7, [sp, #36]	; 0x24
    c36c:	adds	r7, #7
    c36e:	bic.w	r3, r7, #7
    c372:	movs	r7, #0
    c374:	add.w	r2, r3, #8
    c378:	cmp	r8, r7
    c37a:	str	r2, [sp, #36]	; 0x24
    c37c:	ldrd	r4, r5, [r3]
    c380:	strb.w	r7, [sp, #79]	; 0x4f
    c384:	bge.w	c01e <_svfprintf_r+0x33e>
    c388:	orrs.w	r3, r4, r5
    c38c:	bne.w	c02a <_svfprintf_r+0x34a>
    c390:	add	r6, sp, #224	; 0xe0
    c392:	adds	r4, #48	; 0x30
    c394:	strb.w	r4, [r6, #-65]!
    c398:	add	r3, sp, #160	; 0xa0
    c39a:	subs	r3, r3, r6
    c39c:	str	r3, [sp, #32]
    c39e:	ldr	r3, [sp, #32]
    c3a0:	cmp	r3, r8
    c3a2:	it	lt
    c3a4:	movlt	r3, r8
    c3a6:	str	r3, [sp, #16]
    c3a8:	movs	r3, #0
    c3aa:	str	r3, [sp, #56]	; 0x38
    c3ac:	b.n	c0c4 <_svfprintf_r+0x3e4>
    c3ae:	str	r3, [sp, #48]	; 0x30
    c3b0:	mov	r8, r5
    c3b2:	cmp	r2, #0
    c3b4:	bne.w	d208 <_svfprintf_r+0x1528>
    c3b8:	tst.w	fp, #32
    c3bc:	ldr	r0, [pc, #776]	; (c6c8 <_svfprintf_r+0x9e8>)
    c3be:	beq.w	c4ce <_svfprintf_r+0x7ee>
    c3c2:	ldr	r7, [sp, #36]	; 0x24
    c3c4:	adds	r7, #7
    c3c6:	bic.w	r3, r7, #7
    c3ca:	ldrd	r4, r5, [r3]
    c3ce:	add.w	r2, r3, #8
    c3d2:	str	r2, [sp, #36]	; 0x24
    c3d4:	ands.w	r7, fp, #1
    c3d8:	beq.w	c86a <_svfprintf_r+0xb8a>
    c3dc:	orrs.w	r3, r4, r5
    c3e0:	beq.w	cd2a <_svfprintf_r+0x104a>
    c3e4:	movs	r7, #0
    c3e6:	movs	r3, #48	; 0x30
    c3e8:	ldrb.w	r2, [sp, #48]	; 0x30
    c3ec:	strb.w	r3, [sp, #80]	; 0x50
    c3f0:	cmp	r8, r7
    c3f2:	strb.w	r2, [sp, #81]	; 0x51
    c3f6:	strb.w	r7, [sp, #79]	; 0x4f
    c3fa:	orr.w	r3, fp, #2
    c3fe:	blt.w	d030 <_svfprintf_r+0x1350>
    c402:	bic.w	r3, fp, #128	; 0x80
    c406:	orr.w	fp, r3, #2
    c40a:	add	r6, sp, #160	; 0xa0
    c40c:	lsrs	r3, r4, #4
    c40e:	and.w	r1, r4, #15
    c412:	orr.w	r3, r3, r5, lsl #28
    c416:	lsrs	r2, r5, #4
    c418:	mov	r4, r3
    c41a:	mov	r5, r2
    c41c:	ldrb	r3, [r0, r1]
    c41e:	strb.w	r3, [r6, #-1]!
    c422:	orrs.w	r3, r4, r5
    c426:	bne.n	c40c <_svfprintf_r+0x72c>
    c428:	b.n	c398 <_svfprintf_r+0x6b8>
    c42a:	ldr	r1, [sp, #36]	; 0x24
    c42c:	str	r3, [sp, #48]	; 0x30
    c42e:	ldr	r2, [r1, #0]
    c430:	strb.w	r2, [sp, #120]	; 0x78
    c434:	movs	r3, #0
    c436:	mov	r2, r1
    c438:	mov	r7, r3
    c43a:	strb.w	r3, [sp, #79]	; 0x4f
    c43e:	adds	r2, #4
    c440:	movs	r3, #1
    c442:	str	r3, [sp, #16]
    c444:	mov	r8, r7
    c446:	str	r7, [sp, #56]	; 0x38
    c448:	str	r2, [sp, #36]	; 0x24
    c44a:	str	r3, [sp, #32]
    c44c:	add	r6, sp, #120	; 0x78
    c44e:	b.n	c0cc <_svfprintf_r+0x3ec>
    c450:	str	r3, [sp, #48]	; 0x30
    c452:	mov	r8, r5
    c454:	cmp	r2, #0
    c456:	beq.w	bfea <_svfprintf_r+0x30a>
    c45a:	strb.w	r1, [sp, #79]	; 0x4f
    c45e:	b.n	bfea <_svfprintf_r+0x30a>
    c460:	orr.w	fp, fp, #64	; 0x40
    c464:	ldrb.w	r3, [sl]
    c468:	b.n	bd92 <_svfprintf_r+0xb2>
    c46a:	ldrb.w	r3, [sl]
    c46e:	cmp	r1, #0
    c470:	bne.w	bd92 <_svfprintf_r+0xb2>
    c474:	movs	r2, #1
    c476:	movs	r1, #32
    c478:	b.n	bd92 <_svfprintf_r+0xb2>
    c47a:	orr.w	fp, fp, #1
    c47e:	ldrb.w	r3, [sl]
    c482:	b.n	bd92 <_svfprintf_r+0xb2>
    c484:	ldr	r4, [sp, #36]	; 0x24
    c486:	ldr	r3, [r4, #0]
    c488:	str	r3, [sp, #28]
    c48a:	mov	r0, r3
    c48c:	cmp	r0, #0
    c48e:	mov	r3, r4
    c490:	add.w	r3, r3, #4
    c494:	blt.w	be56 <_svfprintf_r+0x176>
    c498:	str	r3, [sp, #36]	; 0x24
    c49a:	ldrb.w	r3, [sl]
    c49e:	b.n	bd92 <_svfprintf_r+0xb2>
    c4a0:	ldrb.w	r3, [sl]
    c4a4:	movs	r2, #1
    c4a6:	movs	r1, #43	; 0x2b
    c4a8:	b.n	bd92 <_svfprintf_r+0xb2>
    c4aa:	str	r3, [sp, #48]	; 0x30
    c4ac:	mov	r8, r5
    c4ae:	cmp	r2, #0
    c4b0:	beq.w	c362 <_svfprintf_r+0x682>
    c4b4:	strb.w	r1, [sp, #79]	; 0x4f
    c4b8:	b.n	c362 <_svfprintf_r+0x682>
    c4ba:	str	r3, [sp, #48]	; 0x30
    c4bc:	mov	r8, r5
    c4be:	cmp	r2, #0
    c4c0:	bne.w	d218 <_svfprintf_r+0x1538>
    c4c4:	tst.w	fp, #32
    c4c8:	ldr	r0, [pc, #512]	; (c6cc <_svfprintf_r+0x9ec>)
    c4ca:	bne.w	c3c2 <_svfprintf_r+0x6e2>
    c4ce:	ldr	r2, [sp, #36]	; 0x24
    c4d0:	tst.w	fp, #16
    c4d4:	mov	r3, r2
    c4d6:	bne.w	ca5c <_svfprintf_r+0xd7c>
    c4da:	tst.w	fp, #64	; 0x40
    c4de:	beq.w	ca5c <_svfprintf_r+0xd7c>
    c4e2:	adds	r3, #4
    c4e4:	ldrh	r4, [r2, #0]
    c4e6:	str	r3, [sp, #36]	; 0x24
    c4e8:	movs	r5, #0
    c4ea:	b.n	c3d4 <_svfprintf_r+0x6f4>
    c4ec:	ldrb.w	r3, [sl]
    c4f0:	cmp	r3, #108	; 0x6c
    c4f2:	ittte	eq
    c4f4:	ldrbeq.w	r3, [sl, #1]
    c4f8:	orreq.w	fp, fp, #32
    c4fc:	addeq.w	sl, sl, #1
    c500:	orrne.w	fp, fp, #16
    c504:	b.n	bd92 <_svfprintf_r+0xb2>
    c506:	cmp	r2, #0
    c508:	bne.w	d1ea <_svfprintf_r+0x150a>
    c50c:	tst.w	fp, #32
    c510:	beq.w	cbe0 <_svfprintf_r+0xf00>
    c514:	ldr	r2, [sp, #36]	; 0x24
    c516:	ldr	r1, [sp, #24]
    c518:	ldr	r3, [r2, #0]
    c51a:	asrs	r5, r1, #31
    c51c:	mov	r0, r1
    c51e:	adds	r2, #4
    c520:	mov	r1, r5
    c522:	str	r2, [sp, #36]	; 0x24
    c524:	strd	r0, r1, [r3]
    c528:	b.n	bd2c <_svfprintf_r+0x4c>
    c52a:	orr.w	fp, fp, #32
    c52e:	ldrb.w	r3, [sl]
    c532:	b.n	bd92 <_svfprintf_r+0xb2>
    c534:	ldr	r2, [sp, #36]	; 0x24
    c536:	str	r3, [sp, #48]	; 0x30
    c538:	ldr	r6, [r2, #0]
    c53a:	movs	r4, #0
    c53c:	strb.w	r4, [sp, #79]	; 0x4f
    c540:	adds	r7, r2, #4
    c542:	cmp	r6, #0
    c544:	beq.w	d012 <_svfprintf_r+0x1332>
    c548:	cmp	r5, #0
    c54a:	blt.w	ce92 <_svfprintf_r+0x11b2>
    c54e:	mov	r2, r5
    c550:	mov	r1, r4
    c552:	mov	r0, r6
    c554:	bl	a4b0 <memchr>
    c558:	cmp	r0, #0
    c55a:	beq.w	d0f6 <_svfprintf_r+0x1416>
    c55e:	subs	r3, r0, r6
    c560:	str	r3, [sp, #32]
    c562:	mov	r8, r4
    c564:	bic.w	r3, r3, r3, asr #31
    c568:	str	r7, [sp, #36]	; 0x24
    c56a:	str	r3, [sp, #16]
    c56c:	str.w	r8, [sp, #56]	; 0x38
    c570:	ldrb.w	r7, [sp, #79]	; 0x4f
    c574:	b.n	c0c4 <_svfprintf_r+0x3e4>
    c576:	ldr	r0, [pc, #340]	; (c6cc <_svfprintf_r+0x9ec>)
    c578:	str	r2, [sp, #48]	; 0x30
    c57a:	cmp.w	r8, #0
    c57e:	bne.w	c88a <_svfprintf_r+0xbaa>
    c582:	mov	r7, r8
    c584:	mov.w	r8, #0
    c588:	str.w	r8, [sp, #32]
    c58c:	add	r6, sp, #160	; 0xa0
    c58e:	b.n	c39e <_svfprintf_r+0x6be>
    c590:	str	r3, [sp, #48]	; 0x30
    c592:	cmp	r2, #0
    c594:	bne.w	d1f2 <_svfprintf_r+0x1512>
    c598:	ldr	r2, [sp, #48]	; 0x30
    c59a:	cmp	r2, #0
    c59c:	beq.w	bebe <_svfprintf_r+0x1de>
    c5a0:	movs	r3, #0
    c5a2:	movs	r1, #1
    c5a4:	mov	r7, r3
    c5a6:	str	r1, [sp, #16]
    c5a8:	strb.w	r2, [sp, #120]	; 0x78
    c5ac:	strb.w	r3, [sp, #79]	; 0x4f
    c5b0:	mov	r8, r3
    c5b2:	str	r3, [sp, #56]	; 0x38
    c5b4:	str	r1, [sp, #32]
    c5b6:	add	r6, sp, #120	; 0x78
    c5b8:	b.n	c0cc <_svfprintf_r+0x3ec>
    c5ba:	cmp.w	r8, #0
    c5be:	beq.w	d0d8 <_svfprintf_r+0x13f8>
    c5c2:	movs	r7, #0
    c5c4:	movs	r4, #0
    c5c6:	movs	r5, #0
    c5c8:	b.n	bf24 <_svfprintf_r+0x244>
    c5ca:	ldr	r0, [pc, #256]	; (c6cc <_svfprintf_r+0x9ec>)
    c5cc:	str	r2, [sp, #48]	; 0x30
    c5ce:	mov	fp, r3
    c5d0:	orrs.w	r3, r4, r5
    c5d4:	str	r7, [sp, #36]	; 0x24
    c5d6:	mov.w	r7, #0
    c5da:	bne.w	c40a <_svfprintf_r+0x72a>
    c5de:	movs	r4, #0
    c5e0:	movs	r5, #0
    c5e2:	b.n	c40a <_svfprintf_r+0x72a>
    c5e4:	ldr	r3, [sp, #116]	; 0x74
    c5e6:	b.n	c160 <_svfprintf_r+0x480>
    c5e8:	ldr	r2, [sp, #48]	; 0x30
    c5ea:	cmp	r2, #101	; 0x65
    c5ec:	ble.w	c732 <_svfprintf_r+0xa52>
    c5f0:	vcmp.f64	d8, #0.0
    c5f4:	vmrs	APSR_nzcv, fpscr
    c5f8:	bne.w	c88e <_svfprintf_r+0xbae>
    c5fc:	ldr	r2, [sp, #112]	; 0x70
    c5fe:	ldr	r1, [pc, #208]	; (c6d0 <_svfprintf_r+0x9f0>)
    c600:	str.w	r1, [r9]
    c604:	adds	r2, #1
    c606:	adds	r3, #1
    c608:	movs	r1, #1
    c60a:	cmp	r2, #7
    c60c:	str	r3, [sp, #116]	; 0x74
    c60e:	str	r2, [sp, #112]	; 0x70
    c610:	str.w	r1, [r9, #4]
    c614:	bgt.w	cd3c <_svfprintf_r+0x105c>
    c618:	add.w	r9, r9, #8
    c61c:	ldr	r2, [sp, #84]	; 0x54
    c61e:	ldr	r1, [sp, #52]	; 0x34
    c620:	cmp	r2, r1
    c622:	blt.n	c62c <_svfprintf_r+0x94c>
    c624:	tst.w	fp, #1
    c628:	beq.w	c242 <_svfprintf_r+0x562>
    c62c:	ldr	r2, [sp, #112]	; 0x70
    c62e:	ldr	r0, [sp, #60]	; 0x3c
    c630:	ldr	r1, [sp, #64]	; 0x40
    c632:	str.w	r1, [r9]
    c636:	adds	r2, #1
    c638:	add	r3, r0
    c63a:	cmp	r2, #7
    c63c:	str	r3, [sp, #116]	; 0x74
    c63e:	str.w	r0, [r9, #4]
    c642:	str	r2, [sp, #112]	; 0x70
    c644:	bgt.w	cdf4 <_svfprintf_r+0x1114>
    c648:	add.w	r9, r9, #8
    c64c:	ldr	r2, [sp, #52]	; 0x34
    c64e:	subs	r4, r2, #1
    c650:	cmp	r4, #0
    c652:	ble.w	c242 <_svfprintf_r+0x562>
    c656:	cmp	r4, #16
    c658:	ldr	r2, [sp, #112]	; 0x70
    c65a:	ldr	r7, [pc, #120]	; (c6d4 <_svfprintf_r+0x9f4>)
    c65c:	ble.w	ca18 <_svfprintf_r+0xd38>
    c660:	movs	r5, #16
    c662:	ldr	r6, [sp, #20]
    c664:	ldr.w	r8, [sp, #12]
    c668:	b.n	c676 <_svfprintf_r+0x996>
    c66a:	add.w	r9, r9, #8
    c66e:	subs	r4, #16
    c670:	cmp	r4, #16
    c672:	ble.w	ca18 <_svfprintf_r+0xd38>
    c676:	adds	r2, #1
    c678:	adds	r3, #16
    c67a:	cmp	r2, #7
    c67c:	str	r3, [sp, #116]	; 0x74
    c67e:	str	r2, [sp, #112]	; 0x70
    c680:	str.w	r7, [r9]
    c684:	str.w	r5, [r9, #4]
    c688:	ble.n	c66a <_svfprintf_r+0x98a>
    c68a:	add	r2, sp, #108	; 0x6c
    c68c:	mov	r1, r8
    c68e:	mov	r0, r6
    c690:	bl	10908 <__ssprint_r>
    c694:	cmp	r0, #0
    c696:	bne.w	becc <_svfprintf_r+0x1ec>
    c69a:	ldr	r3, [sp, #116]	; 0x74
    c69c:	ldr	r2, [sp, #112]	; 0x70
    c69e:	add.w	r9, sp, #160	; 0xa0
    c6a2:	b.n	c66e <_svfprintf_r+0x98e>
    c6a4:	ldr	r2, [sp, #28]
    c6a6:	ldr	r1, [sp, #16]
    c6a8:	subs	r4, r2, r1
    c6aa:	cmp	r4, #0
    c6ac:	ble.w	c1a8 <_svfprintf_r+0x4c8>
    c6b0:	cmp	r4, #16
    c6b2:	ldr	r2, [sp, #112]	; 0x70
    c6b4:	ldr	r7, [pc, #28]	; (c6d4 <_svfprintf_r+0x9f4>)
    c6b6:	ble.n	c716 <_svfprintf_r+0xa36>
    c6b8:	mov	r1, r9
    c6ba:	movs	r5, #16
    c6bc:	mov	r9, r8
    c6be:	mov	r0, r3
    c6c0:	mov	r8, r6
    c6c2:	ldr	r6, [sp, #20]
    c6c4:	b.n	c6e2 <_svfprintf_r+0xa02>
    c6c6:	nop
    c6c8:	.word	0x20000c78
    c6cc:	.word	0x20000c8c
    c6d0:	.word	0x20000ca8
    c6d4:	.word	0x20000d30
    c6d8:	subs	r4, #16
    c6da:	cmp	r4, #16
    c6dc:	add.w	r1, r1, #8
    c6e0:	ble.n	c70e <_svfprintf_r+0xa2e>
    c6e2:	adds	r2, #1
    c6e4:	adds	r0, #16
    c6e6:	cmp	r2, #7
    c6e8:	str	r0, [sp, #116]	; 0x74
    c6ea:	str	r2, [sp, #112]	; 0x70
    c6ec:	str	r7, [r1, #0]
    c6ee:	str	r5, [r1, #4]
    c6f0:	ble.n	c6d8 <_svfprintf_r+0x9f8>
    c6f2:	add	r2, sp, #108	; 0x6c
    c6f4:	ldr	r1, [sp, #12]
    c6f6:	mov	r0, r6
    c6f8:	bl	10908 <__ssprint_r>
    c6fc:	cmp	r0, #0
    c6fe:	bne.w	becc <_svfprintf_r+0x1ec>
    c702:	subs	r4, #16
    c704:	cmp	r4, #16
    c706:	ldr	r0, [sp, #116]	; 0x74
    c708:	ldr	r2, [sp, #112]	; 0x70
    c70a:	add	r1, sp, #160	; 0xa0
    c70c:	bgt.n	c6e2 <_svfprintf_r+0xa02>
    c70e:	mov	r6, r8
    c710:	mov	r3, r0
    c712:	mov	r8, r9
    c714:	mov	r9, r1
    c716:	adds	r2, #1
    c718:	add	r3, r4
    c71a:	cmp	r2, #7
    c71c:	str	r3, [sp, #116]	; 0x74
    c71e:	str	r2, [sp, #112]	; 0x70
    c720:	str.w	r7, [r9]
    c724:	str.w	r4, [r9, #4]
    c728:	bgt.w	cbb8 <_svfprintf_r+0xed8>
    c72c:	add.w	r9, r9, #8
    c730:	b.n	c1a8 <_svfprintf_r+0x4c8>
    c732:	ldr	r2, [sp, #52]	; 0x34
    c734:	str.w	r6, [r9]
    c738:	cmp	r2, #1
    c73a:	ldr	r2, [sp, #112]	; 0x70
    c73c:	add.w	r3, r3, #1
    c740:	add.w	r2, r2, #1
    c744:	mov.w	r1, #1
    c748:	str	r3, [sp, #116]	; 0x74
    c74a:	str	r2, [sp, #112]	; 0x70
    c74c:	str.w	r1, [r9, #4]
    c750:	ble.w	cb74 <_svfprintf_r+0xe94>
    c754:	cmp	r2, #7
    c756:	bgt.w	cb84 <_svfprintf_r+0xea4>
    c75a:	add.w	r9, r9, #8
    c75e:	ldr	r0, [sp, #60]	; 0x3c
    c760:	ldr	r1, [sp, #64]	; 0x40
    c762:	str.w	r1, [r9]
    c766:	adds	r2, #1
    c768:	add	r3, r0
    c76a:	cmp	r2, #7
    c76c:	str	r3, [sp, #116]	; 0x74
    c76e:	str	r2, [sp, #112]	; 0x70
    c770:	str.w	r0, [r9, #4]
    c774:	bgt.w	cb9e <_svfprintf_r+0xebe>
    c778:	add.w	r9, r9, #8
    c77c:	vcmp.f64	d8, #0.0
    c780:	vmrs	APSR_nzcv, fpscr
    c784:	ldr	r1, [sp, #52]	; 0x34
    c786:	beq.w	c974 <_svfprintf_r+0xc94>
    c78a:	subs	r1, #1
    c78c:	adds	r2, #1
    c78e:	adds	r6, #1
    c790:	add	r3, r1
    c792:	cmp	r2, #7
    c794:	str.w	r6, [r9]
    c798:	str	r2, [sp, #112]	; 0x70
    c79a:	str	r3, [sp, #116]	; 0x74
    c79c:	str.w	r1, [r9, #4]
    c7a0:	bgt.w	c9de <_svfprintf_r+0xcfe>
    c7a4:	add.w	r9, r9, #8
    c7a8:	ldr	r0, [sp, #68]	; 0x44
    c7aa:	str.w	r0, [r9, #4]
    c7ae:	adds	r2, #1
    c7b0:	add	r3, r0
    c7b2:	add	r1, sp, #92	; 0x5c
    c7b4:	cmp	r2, #7
    c7b6:	str	r3, [sp, #116]	; 0x74
    c7b8:	str	r2, [sp, #112]	; 0x70
    c7ba:	str.w	r1, [r9]
    c7be:	ble.w	c23e <_svfprintf_r+0x55e>
    c7c2:	add	r2, sp, #108	; 0x6c
    c7c4:	ldr	r1, [sp, #12]
    c7c6:	ldr	r0, [sp, #20]
    c7c8:	bl	10908 <__ssprint_r>
    c7cc:	cmp	r0, #0
    c7ce:	bne.w	becc <_svfprintf_r+0x1ec>
    c7d2:	ldr	r3, [sp, #116]	; 0x74
    c7d4:	add.w	r9, sp, #160	; 0xa0
    c7d8:	b.n	c242 <_svfprintf_r+0x562>
    c7da:	add	r2, sp, #108	; 0x6c
    c7dc:	ldr	r1, [sp, #12]
    c7de:	ldr	r0, [sp, #20]
    c7e0:	bl	10908 <__ssprint_r>
    c7e4:	cmp	r0, #0
    c7e6:	beq.w	c2dc <_svfprintf_r+0x5fc>
    c7ea:	b.w	becc <_svfprintf_r+0x1ec>
    c7ee:	ldr	r1, [sp, #36]	; 0x24
    c7f0:	cmp.w	r8, #0
    c7f4:	ldr	r4, [r1, #0]
    c7f6:	strb.w	r3, [sp, #79]	; 0x4f
    c7fa:	add.w	r7, r1, #4
    c7fe:	mov.w	r5, #0
    c802:	blt.w	cee8 <_svfprintf_r+0x1208>
    c806:	orrs.w	r2, r4, r5
    c80a:	str	r7, [sp, #36]	; 0x24
    c80c:	bic.w	fp, fp, #128	; 0x80
    c810:	mov	r7, r3
    c812:	bne.w	c02a <_svfprintf_r+0x34a>
    c816:	cmp.w	r8, #0
    c81a:	beq.w	c584 <_svfprintf_r+0x8a4>
    c81e:	movs	r4, #0
    c820:	b.n	c390 <_svfprintf_r+0x6b0>
    c822:	add	r2, sp, #108	; 0x6c
    c824:	ldr	r1, [sp, #12]
    c826:	ldr	r0, [sp, #20]
    c828:	bl	10908 <__ssprint_r>
    c82c:	cmp	r0, #0
    c82e:	bne.w	becc <_svfprintf_r+0x1ec>
    c832:	ldr	r3, [sp, #116]	; 0x74
    c834:	add.w	r9, sp, #160	; 0xa0
    c838:	b.n	c21c <_svfprintf_r+0x53c>
    c83a:	add	r2, sp, #108	; 0x6c
    c83c:	ldr	r1, [sp, #12]
    c83e:	ldr	r0, [sp, #20]
    c840:	bl	10908 <__ssprint_r>
    c844:	cmp	r0, #0
    c846:	bne.w	becc <_svfprintf_r+0x1ec>
    c84a:	ldr	r3, [sp, #116]	; 0x74
    c84c:	add.w	r9, sp, #160	; 0xa0
    c850:	b.n	c180 <_svfprintf_r+0x4a0>
    c852:	add	r2, sp, #108	; 0x6c
    c854:	ldr	r1, [sp, #12]
    c856:	ldr	r0, [sp, #20]
    c858:	bl	10908 <__ssprint_r>
    c85c:	cmp	r0, #0
    c85e:	bne.w	becc <_svfprintf_r+0x1ec>
    c862:	ldr	r3, [sp, #116]	; 0x74
    c864:	add.w	r9, sp, #160	; 0xa0
    c868:	b.n	c1a0 <_svfprintf_r+0x4c0>
    c86a:	cmp.w	r8, #0
    c86e:	strb.w	r7, [sp, #79]	; 0x4f
    c872:	blt.w	cd54 <_svfprintf_r+0x1074>
    c876:	orrs.w	r3, r4, r5
    c87a:	bic.w	fp, fp, #128	; 0x80
    c87e:	bne.w	c40a <_svfprintf_r+0x72a>
    c882:	cmp.w	r8, #0
    c886:	beq.w	c582 <_svfprintf_r+0x8a2>
    c88a:	movs	r7, #0
    c88c:	b.n	c5de <_svfprintf_r+0x8fe>
    c88e:	ldr	r4, [sp, #84]	; 0x54
    c890:	cmp	r4, #0
    c892:	ble.w	cd58 <_svfprintf_r+0x1078>
    c896:	ldr	r2, [sp, #56]	; 0x38
    c898:	ldr	r1, [sp, #52]	; 0x34
    c89a:	cmp	r2, r1
    c89c:	it	ge
    c89e:	movge	r2, r1
    c8a0:	cmp	r2, #0
    c8a2:	mov	r4, r2
    c8a4:	ble.n	c8c2 <_svfprintf_r+0xbe2>
    c8a6:	ldr	r2, [sp, #112]	; 0x70
    c8a8:	str.w	r6, [r9]
    c8ac:	adds	r2, #1
    c8ae:	add	r3, r4
    c8b0:	cmp	r2, #7
    c8b2:	str	r3, [sp, #116]	; 0x74
    c8b4:	str.w	r4, [r9, #4]
    c8b8:	str	r2, [sp, #112]	; 0x70
    c8ba:	bgt.w	cfa2 <_svfprintf_r+0x12c2>
    c8be:	add.w	r9, r9, #8
    c8c2:	ldr	r2, [sp, #56]	; 0x38
    c8c4:	cmp	r4, #0
    c8c6:	it	ge
    c8c8:	subge	r2, r2, r4
    c8ca:	cmp	r2, #0
    c8cc:	mov	r4, r2
    c8ce:	ble.w	cab4 <_svfprintf_r+0xdd4>
    c8d2:	cmp	r4, #16
    c8d4:	ldr	r2, [sp, #112]	; 0x70
    c8d6:	ldr	r7, [pc, #772]	; (cbdc <_svfprintf_r+0xefc>)
    c8d8:	ble.w	cd0e <_svfprintf_r+0x102e>
    c8dc:	mov	r1, r9
    c8de:	movs	r5, #16
    c8e0:	mov	r9, r6
    c8e2:	ldr.w	r8, [sp, #20]
    c8e6:	ldr	r6, [sp, #12]
    c8e8:	b.n	c8f4 <_svfprintf_r+0xc14>
    c8ea:	adds	r1, #8
    c8ec:	subs	r4, #16
    c8ee:	cmp	r4, #16
    c8f0:	ble.w	cd0a <_svfprintf_r+0x102a>
    c8f4:	adds	r2, #1
    c8f6:	adds	r3, #16
    c8f8:	cmp	r2, #7
    c8fa:	str	r3, [sp, #116]	; 0x74
    c8fc:	str	r2, [sp, #112]	; 0x70
    c8fe:	str	r7, [r1, #0]
    c900:	str	r5, [r1, #4]
    c902:	ble.n	c8ea <_svfprintf_r+0xc0a>
    c904:	add	r2, sp, #108	; 0x6c
    c906:	mov	r1, r6
    c908:	mov	r0, r8
    c90a:	bl	10908 <__ssprint_r>
    c90e:	cmp	r0, #0
    c910:	bne.w	becc <_svfprintf_r+0x1ec>
    c914:	ldr	r3, [sp, #116]	; 0x74
    c916:	ldr	r2, [sp, #112]	; 0x70
    c918:	add	r1, sp, #160	; 0xa0
    c91a:	b.n	c8ec <_svfprintf_r+0xc0c>
    c91c:	add	r2, sp, #108	; 0x6c
    c91e:	ldr	r1, [sp, #12]
    c920:	ldr	r0, [sp, #20]
    c922:	bl	10908 <__ssprint_r>
    c926:	cmp	r0, #0
    c928:	bne.w	becc <_svfprintf_r+0x1ec>
    c92c:	ldrb.w	r7, [sp, #79]	; 0x4f
    c930:	ldr	r3, [sp, #116]	; 0x74
    c932:	add.w	r9, sp, #160	; 0xa0
    c936:	b.n	c160 <_svfprintf_r+0x480>
    c938:	ands.w	r2, fp, #16
    c93c:	bne.w	c7ee <_svfprintf_r+0xb0e>
    c940:	ands.w	r3, fp, #64	; 0x40
    c944:	beq.w	c7ee <_svfprintf_r+0xb0e>
    c948:	ldr	r1, [sp, #36]	; 0x24
    c94a:	strb.w	r2, [sp, #79]	; 0x4f
    c94e:	mov	r3, r1
    c950:	cmp.w	r8, #0
    c954:	add.w	r3, r3, #4
    c958:	ldrh	r4, [r1, #0]
    c95a:	mov.w	r5, #0
    c95e:	blt.w	ce8a <_svfprintf_r+0x11aa>
    c962:	orrs.w	r1, r4, r5
    c966:	bic.w	fp, fp, #128	; 0x80
    c96a:	str	r3, [sp, #36]	; 0x24
    c96c:	mov	r7, r2
    c96e:	bne.w	c02a <_svfprintf_r+0x34a>
    c972:	b.n	c816 <_svfprintf_r+0xb36>
    c974:	subs	r4, r1, #1
    c976:	cmp	r4, #0
    c978:	ble.w	c7a8 <_svfprintf_r+0xac8>
    c97c:	cmp	r4, #16
    c97e:	ldr	r7, [pc, #604]	; (cbdc <_svfprintf_r+0xefc>)
    c980:	ble.n	c9c8 <_svfprintf_r+0xce8>
    c982:	movs	r5, #16
    c984:	ldr	r6, [sp, #20]
    c986:	ldr.w	r8, [sp, #12]
    c98a:	b.n	c996 <_svfprintf_r+0xcb6>
    c98c:	subs	r4, #16
    c98e:	cmp	r4, #16
    c990:	add.w	r9, r9, #8
    c994:	ble.n	c9c8 <_svfprintf_r+0xce8>
    c996:	adds	r2, #1
    c998:	adds	r3, #16
    c99a:	cmp	r2, #7
    c99c:	str	r3, [sp, #116]	; 0x74
    c99e:	str	r2, [sp, #112]	; 0x70
    c9a0:	str.w	r7, [r9]
    c9a4:	str.w	r5, [r9, #4]
    c9a8:	ble.n	c98c <_svfprintf_r+0xcac>
    c9aa:	add	r2, sp, #108	; 0x6c
    c9ac:	mov	r1, r8
    c9ae:	mov	r0, r6
    c9b0:	bl	10908 <__ssprint_r>
    c9b4:	cmp	r0, #0
    c9b6:	bne.w	becc <_svfprintf_r+0x1ec>
    c9ba:	subs	r4, #16
    c9bc:	cmp	r4, #16
    c9be:	ldr	r3, [sp, #116]	; 0x74
    c9c0:	ldr	r2, [sp, #112]	; 0x70
    c9c2:	add.w	r9, sp, #160	; 0xa0
    c9c6:	bgt.n	c996 <_svfprintf_r+0xcb6>
    c9c8:	adds	r2, #1
    c9ca:	add	r3, r4
    c9cc:	cmp	r2, #7
    c9ce:	str	r3, [sp, #116]	; 0x74
    c9d0:	str	r2, [sp, #112]	; 0x70
    c9d2:	str.w	r7, [r9]
    c9d6:	str.w	r4, [r9, #4]
    c9da:	ble.w	c7a4 <_svfprintf_r+0xac4>
    c9de:	add	r2, sp, #108	; 0x6c
    c9e0:	ldr	r1, [sp, #12]
    c9e2:	ldr	r0, [sp, #20]
    c9e4:	bl	10908 <__ssprint_r>
    c9e8:	cmp	r0, #0
    c9ea:	bne.w	becc <_svfprintf_r+0x1ec>
    c9ee:	ldr	r3, [sp, #116]	; 0x74
    c9f0:	ldr	r2, [sp, #112]	; 0x70
    c9f2:	add.w	r9, sp, #160	; 0xa0
    c9f6:	b.n	c7a8 <_svfprintf_r+0xac8>
    c9f8:	tst.w	fp, #16
    c9fc:	bne.n	ca66 <_svfprintf_r+0xd86>
    c9fe:	tst.w	fp, #64	; 0x40
    ca02:	beq.n	ca66 <_svfprintf_r+0xd86>
    ca04:	ldr	r1, [sp, #36]	; 0x24
    ca06:	ldrsh.w	r4, [r1]
    ca0a:	adds	r1, #4
    ca0c:	asrs	r5, r4, #31
    ca0e:	mov	r2, r4
    ca10:	mov	r3, r5
    ca12:	str	r1, [sp, #36]	; 0x24
    ca14:	b.w	c008 <_svfprintf_r+0x328>
    ca18:	adds	r2, #1
    ca1a:	add	r3, r4
    ca1c:	cmp	r2, #7
    ca1e:	str	r3, [sp, #116]	; 0x74
    ca20:	str	r2, [sp, #112]	; 0x70
    ca22:	str.w	r7, [r9]
    ca26:	str.w	r4, [r9, #4]
    ca2a:	ble.w	c23e <_svfprintf_r+0x55e>
    ca2e:	b.n	c7c2 <_svfprintf_r+0xae2>
    ca30:	ldr	r1, [sp, #36]	; 0x24
    ca32:	cmp.w	r8, #0
    ca36:	ldr	r4, [r1, #0]
    ca38:	strb.w	r3, [sp, #79]	; 0x4f
    ca3c:	add.w	r7, r1, #4
    ca40:	mov.w	r5, #0
    ca44:	blt.w	cbd2 <_svfprintf_r+0xef2>
    ca48:	orrs.w	r2, r4, r5
    ca4c:	bic.w	fp, fp, #128	; 0x80
    ca50:	str	r7, [sp, #36]	; 0x24
    ca52:	beq.w	c5ba <_svfprintf_r+0x8da>
    ca56:	mov	r7, r3
    ca58:	b.w	bf24 <_svfprintf_r+0x244>
    ca5c:	ldr	r4, [r3, #0]
    ca5e:	adds	r3, #4
    ca60:	str	r3, [sp, #36]	; 0x24
    ca62:	movs	r5, #0
    ca64:	b.n	c3d4 <_svfprintf_r+0x6f4>
    ca66:	ldr	r2, [sp, #36]	; 0x24
    ca68:	ldr	r4, [r2, #0]
    ca6a:	mov	r3, r2
    ca6c:	adds	r3, #4
    ca6e:	asrs	r5, r4, #31
    ca70:	mov	r2, r4
    ca72:	str	r3, [sp, #36]	; 0x24
    ca74:	cmp	r2, #0
    ca76:	mov	r3, r5
    ca78:	sbcs.w	r3, r3, #0
    ca7c:	bge.w	c012 <_svfprintf_r+0x332>
    ca80:	negs	r4, r4
    ca82:	mov.w	r7, #45	; 0x2d
    ca86:	sbc.w	r5, r5, r5, lsl #1
    ca8a:	cmp.w	r8, #0
    ca8e:	strb.w	r7, [sp, #79]	; 0x4f
    ca92:	blt.w	c02a <_svfprintf_r+0x34a>
    ca96:	bic.w	fp, fp, #128	; 0x80
    ca9a:	b.w	c02a <_svfprintf_r+0x34a>
    ca9e:	add	r2, sp, #108	; 0x6c
    caa0:	ldr	r1, [sp, #12]
    caa2:	ldr	r0, [sp, #20]
    caa4:	bl	10908 <__ssprint_r>
    caa8:	cmp	r0, #0
    caaa:	bne.w	becc <_svfprintf_r+0x1ec>
    caae:	ldr	r3, [sp, #116]	; 0x74
    cab0:	add.w	r9, sp, #160	; 0xa0
    cab4:	ldr	r1, [sp, #56]	; 0x38
    cab6:	ldr	r2, [sp, #84]	; 0x54
    cab8:	add	r1, r6
    caba:	mov	r5, r1
    cabc:	ldr	r1, [sp, #52]	; 0x34
    cabe:	cmp	r2, r1
    cac0:	blt.n	cb52 <_svfprintf_r+0xe72>
    cac2:	tst.w	fp, #1
    cac6:	bne.n	cb52 <_svfprintf_r+0xe72>
    cac8:	ldr	r0, [sp, #52]	; 0x34
    caca:	add	r6, r0
    cacc:	subs	r4, r6, r5
    cace:	subs	r2, r0, r2
    cad0:	cmp	r4, r2
    cad2:	it	ge
    cad4:	movge	r4, r2
    cad6:	cmp	r4, #0
    cad8:	mov	r6, r4
    cada:	ble.n	caf8 <_svfprintf_r+0xe18>
    cadc:	ldr	r1, [sp, #112]	; 0x70
    cade:	str.w	r5, [r9]
    cae2:	adds	r1, #1
    cae4:	add	r3, r4
    cae6:	cmp	r1, #7
    cae8:	str	r3, [sp, #116]	; 0x74
    caea:	str.w	r4, [r9, #4]
    caee:	str	r1, [sp, #112]	; 0x70
    caf0:	bgt.w	cff4 <_svfprintf_r+0x1314>
    caf4:	add.w	r9, r9, #8
    caf8:	cmp	r6, #0
    cafa:	ite	ge
    cafc:	subge	r4, r2, r6
    cafe:	movlt	r4, r2
    cb00:	cmp	r4, #0
    cb02:	ble.w	c242 <_svfprintf_r+0x562>
    cb06:	cmp	r4, #16
    cb08:	ldr	r2, [sp, #112]	; 0x70
    cb0a:	ldr	r7, [pc, #208]	; (cbdc <_svfprintf_r+0xefc>)
    cb0c:	ble.n	ca18 <_svfprintf_r+0xd38>
    cb0e:	movs	r5, #16
    cb10:	ldr	r6, [sp, #20]
    cb12:	ldr.w	r8, [sp, #12]
    cb16:	b.n	cb24 <_svfprintf_r+0xe44>
    cb18:	add.w	r9, r9, #8
    cb1c:	subs	r4, #16
    cb1e:	cmp	r4, #16
    cb20:	ble.w	ca18 <_svfprintf_r+0xd38>
    cb24:	adds	r2, #1
    cb26:	adds	r3, #16
    cb28:	cmp	r2, #7
    cb2a:	str	r3, [sp, #116]	; 0x74
    cb2c:	str	r2, [sp, #112]	; 0x70
    cb2e:	str.w	r7, [r9]
    cb32:	str.w	r5, [r9, #4]
    cb36:	ble.n	cb18 <_svfprintf_r+0xe38>
    cb38:	add	r2, sp, #108	; 0x6c
    cb3a:	mov	r1, r8
    cb3c:	mov	r0, r6
    cb3e:	bl	10908 <__ssprint_r>
    cb42:	cmp	r0, #0
    cb44:	bne.w	becc <_svfprintf_r+0x1ec>
    cb48:	ldr	r3, [sp, #116]	; 0x74
    cb4a:	ldr	r2, [sp, #112]	; 0x70
    cb4c:	add.w	r9, sp, #160	; 0xa0
    cb50:	b.n	cb1c <_svfprintf_r+0xe3c>
    cb52:	ldr	r1, [sp, #112]	; 0x70
    cb54:	ldr	r4, [sp, #60]	; 0x3c
    cb56:	ldr	r0, [sp, #64]	; 0x40
    cb58:	str.w	r0, [r9]
    cb5c:	adds	r1, #1
    cb5e:	add	r3, r4
    cb60:	cmp	r1, #7
    cb62:	str	r3, [sp, #116]	; 0x74
    cb64:	str.w	r4, [r9, #4]
    cb68:	str	r1, [sp, #112]	; 0x70
    cb6a:	bgt.w	cfba <_svfprintf_r+0x12da>
    cb6e:	add.w	r9, r9, #8
    cb72:	b.n	cac8 <_svfprintf_r+0xde8>
    cb74:	tst.w	fp, #1
    cb78:	bne.w	c754 <_svfprintf_r+0xa74>
    cb7c:	cmp	r2, #7
    cb7e:	ble.w	c7a4 <_svfprintf_r+0xac4>
    cb82:	b.n	c9de <_svfprintf_r+0xcfe>
    cb84:	add	r2, sp, #108	; 0x6c
    cb86:	ldr	r1, [sp, #12]
    cb88:	ldr	r0, [sp, #20]
    cb8a:	bl	10908 <__ssprint_r>
    cb8e:	cmp	r0, #0
    cb90:	bne.w	becc <_svfprintf_r+0x1ec>
    cb94:	ldr	r3, [sp, #116]	; 0x74
    cb96:	ldr	r2, [sp, #112]	; 0x70
    cb98:	add.w	r9, sp, #160	; 0xa0
    cb9c:	b.n	c75e <_svfprintf_r+0xa7e>
    cb9e:	add	r2, sp, #108	; 0x6c
    cba0:	ldr	r1, [sp, #12]
    cba2:	ldr	r0, [sp, #20]
    cba4:	bl	10908 <__ssprint_r>
    cba8:	cmp	r0, #0
    cbaa:	bne.w	becc <_svfprintf_r+0x1ec>
    cbae:	ldr	r3, [sp, #116]	; 0x74
    cbb0:	ldr	r2, [sp, #112]	; 0x70
    cbb2:	add.w	r9, sp, #160	; 0xa0
    cbb6:	b.n	c77c <_svfprintf_r+0xa9c>
    cbb8:	add	r2, sp, #108	; 0x6c
    cbba:	ldr	r1, [sp, #12]
    cbbc:	ldr	r0, [sp, #20]
    cbbe:	bl	10908 <__ssprint_r>
    cbc2:	cmp	r0, #0
    cbc4:	bne.w	becc <_svfprintf_r+0x1ec>
    cbc8:	ldr	r3, [sp, #116]	; 0x74
    cbca:	add.w	r9, sp, #160	; 0xa0
    cbce:	b.w	c1a8 <_svfprintf_r+0x4c8>
    cbd2:	str	r7, [sp, #36]	; 0x24
    cbd4:	movs	r7, #0
    cbd6:	b.w	bf24 <_svfprintf_r+0x244>
    cbda:	nop
    cbdc:	.word	0x20000d30
    cbe0:	tst.w	fp, #16
    cbe4:	bne.n	cbfe <_svfprintf_r+0xf1e>
    cbe6:	tst.w	fp, #64	; 0x40
    cbea:	beq.n	cbfe <_svfprintf_r+0xf1e>
    cbec:	ldr	r2, [sp, #36]	; 0x24
    cbee:	ldr	r3, [r2, #0]
    cbf0:	adds	r2, #4
    cbf2:	str	r2, [sp, #36]	; 0x24
    cbf4:	ldrh.w	r2, [sp, #24]
    cbf8:	strh	r2, [r3, #0]
    cbfa:	b.w	bd2c <_svfprintf_r+0x4c>
    cbfe:	ldr	r2, [sp, #36]	; 0x24
    cc00:	ldr	r3, [r2, #0]
    cc02:	adds	r2, #4
    cc04:	str	r2, [sp, #36]	; 0x24
    cc06:	ldr	r2, [sp, #24]
    cc08:	str	r2, [r3, #0]
    cc0a:	b.w	bd2c <_svfprintf_r+0x4c>
    cc0e:	vcmp.f64	d8, d8
    cc12:	vmrs	APSR_nzcv, fpscr
    cc16:	bvs.w	d156 <_svfprintf_r+0x1476>
    cc1a:	ldr	r3, [sp, #48]	; 0x30
    cc1c:	cmp.w	r8, #4294967295
    cc20:	bic.w	r5, r3, #32
    cc24:	beq.w	d072 <_svfprintf_r+0x1392>
    cc28:	cmp	r5, #71	; 0x47
    cc2a:	beq.w	ce7a <_svfprintf_r+0x119a>
    cc2e:	orr.w	r3, fp, #256	; 0x100
    cc32:	str	r3, [sp, #40]	; 0x28
    cc34:	vmov	r3, s17
    cc38:	cmp	r3, #0
    cc3a:	blt.w	d078 <_svfprintf_r+0x1398>
    cc3e:	vmov.f64	d10, d8
    cc42:	movs	r7, #0
    cc44:	ldr	r3, [sp, #48]	; 0x30
    cc46:	cmp	r3, #102	; 0x66
    cc48:	beq.w	d050 <_svfprintf_r+0x1370>
    cc4c:	cmp	r3, #70	; 0x46
    cc4e:	beq.w	ce2a <_svfprintf_r+0x114a>
    cc52:	vmov.f64	d0, d10
    cc56:	cmp	r5, #69	; 0x45
    cc58:	ite	eq
    cc5a:	addeq.w	r4, r8, #1
    cc5e:	movne	r4, r8
    cc60:	add	r2, sp, #100	; 0x64
    cc62:	add	r3, sp, #88	; 0x58
    cc64:	str	r2, [sp, #4]
    cc66:	str	r3, [sp, #0]
    cc68:	mov	r2, r4
    cc6a:	add	r3, sp, #84	; 0x54
    cc6c:	movs	r1, #2
    cc6e:	ldr	r0, [sp, #20]
    cc70:	bl	e348 <_dtoa_r>
    cc74:	ldr	r3, [sp, #48]	; 0x30
    cc76:	cmp	r3, #103	; 0x67
    cc78:	mov	r6, r0
    cc7a:	bne.w	d09a <_svfprintf_r+0x13ba>
    cc7e:	tst.w	fp, #1
    cc82:	beq.w	d152 <_svfprintf_r+0x1472>
    cc86:	adds	r1, r6, r4
    cc88:	vcmp.f64	d10, #0.0
    cc8c:	vmrs	APSR_nzcv, fpscr
    cc90:	beq.w	cf9e <_svfprintf_r+0x12be>
    cc94:	ldr	r3, [sp, #100]	; 0x64
    cc96:	cmp	r1, r3
    cc98:	bls.n	cca8 <_svfprintf_r+0xfc8>
    cc9a:	movs	r0, #48	; 0x30
    cc9c:	adds	r2, r3, #1
    cc9e:	str	r2, [sp, #100]	; 0x64
    cca0:	strb	r0, [r3, #0]
    cca2:	ldr	r3, [sp, #100]	; 0x64
    cca4:	cmp	r1, r3
    cca6:	bhi.n	cc9c <_svfprintf_r+0xfbc>
    cca8:	subs	r3, r3, r6
    ccaa:	cmp	r5, #71	; 0x47
    ccac:	str	r3, [sp, #52]	; 0x34
    ccae:	beq.w	cef0 <_svfprintf_r+0x1210>
    ccb2:	ldr	r3, [sp, #48]	; 0x30
    ccb4:	cmp	r3, #101	; 0x65
    ccb6:	ble.w	d0b8 <_svfprintf_r+0x13d8>
    ccba:	ldr	r3, [sp, #48]	; 0x30
    ccbc:	cmp	r3, #102	; 0x66
    ccbe:	ldr	r3, [sp, #84]	; 0x54
    ccc0:	beq.w	d0bc <_svfprintf_r+0x13dc>
    ccc4:	str	r3, [sp, #56]	; 0x38
    ccc6:	ldr	r2, [sp, #56]	; 0x38
    ccc8:	ldr	r1, [sp, #52]	; 0x34
    ccca:	cmp	r2, r1
    cccc:	blt.w	d080 <_svfprintf_r+0x13a0>
    ccd0:	tst.w	fp, #1
    ccd4:	bne.w	d140 <_svfprintf_r+0x1460>
    ccd8:	bic.w	r3, r2, r2, asr #31
    ccdc:	str	r2, [sp, #32]
    ccde:	movs	r2, #103	; 0x67
    cce0:	str	r2, [sp, #48]	; 0x30
    cce2:	cmp	r7, #0
    cce4:	bne.w	ced4 <_svfprintf_r+0x11f4>
    cce8:	mov	r8, r7
    ccea:	str	r3, [sp, #16]
    ccec:	ldr.w	fp, [sp, #40]	; 0x28
    ccf0:	ldrb.w	r7, [sp, #79]	; 0x4f
    ccf4:	b.w	c0c4 <_svfprintf_r+0x3e4>
    ccf8:	bic.w	r7, r7, #7
    ccfc:	add.w	r3, r7, #8
    cd00:	vldr	d8, [r7]
    cd04:	str	r3, [sp, #36]	; 0x24
    cd06:	b.w	c086 <_svfprintf_r+0x3a6>
    cd0a:	mov	r6, r9
    cd0c:	mov	r9, r1
    cd0e:	adds	r2, #1
    cd10:	add	r3, r4
    cd12:	cmp	r2, #7
    cd14:	str	r3, [sp, #116]	; 0x74
    cd16:	str	r2, [sp, #112]	; 0x70
    cd18:	str.w	r7, [r9]
    cd1c:	str.w	r4, [r9, #4]
    cd20:	bgt.w	ca9e <_svfprintf_r+0xdbe>
    cd24:	add.w	r9, r9, #8
    cd28:	b.n	cab4 <_svfprintf_r+0xdd4>
    cd2a:	movs	r7, #0
    cd2c:	cmp	r8, r7
    cd2e:	strb.w	r7, [sp, #79]	; 0x4f
    cd32:	blt.w	c5de <_svfprintf_r+0x8fe>
    cd36:	bic.w	fp, fp, #128	; 0x80
    cd3a:	b.n	c57a <_svfprintf_r+0x89a>
    cd3c:	add	r2, sp, #108	; 0x6c
    cd3e:	ldr	r1, [sp, #12]
    cd40:	ldr	r0, [sp, #20]
    cd42:	bl	10908 <__ssprint_r>
    cd46:	cmp	r0, #0
    cd48:	bne.w	becc <_svfprintf_r+0x1ec>
    cd4c:	ldr	r3, [sp, #116]	; 0x74
    cd4e:	add.w	r9, sp, #160	; 0xa0
    cd52:	b.n	c61c <_svfprintf_r+0x93c>
    cd54:	ldr	r7, [sp, #36]	; 0x24
    cd56:	b.n	c5d0 <_svfprintf_r+0x8f0>
    cd58:	ldr	r2, [sp, #112]	; 0x70
    cd5a:	ldr	r1, [pc, #740]	; (d040 <_svfprintf_r+0x1360>)
    cd5c:	str.w	r1, [r9]
    cd60:	adds	r2, #1
    cd62:	adds	r3, #1
    cd64:	movs	r1, #1
    cd66:	cmp	r2, #7
    cd68:	str	r3, [sp, #116]	; 0x74
    cd6a:	str	r2, [sp, #112]	; 0x70
    cd6c:	str.w	r1, [r9, #4]
    cd70:	bgt.n	ce60 <_svfprintf_r+0x1180>
    cd72:	add.w	r9, r9, #8
    cd76:	cbnz	r4, cd84 <_svfprintf_r+0x10a4>
    cd78:	ldr	r2, [sp, #52]	; 0x34
    cd7a:	cbnz	r2, cd84 <_svfprintf_r+0x10a4>
    cd7c:	tst.w	fp, #1
    cd80:	beq.w	c242 <_svfprintf_r+0x562>
    cd84:	ldr	r2, [sp, #112]	; 0x70
    cd86:	ldr	r0, [sp, #60]	; 0x3c
    cd88:	ldr	r1, [sp, #64]	; 0x40
    cd8a:	str.w	r1, [r9]
    cd8e:	adds	r2, #1
    cd90:	add	r3, r0
    cd92:	cmp	r2, #7
    cd94:	str	r3, [sp, #116]	; 0x74
    cd96:	str.w	r0, [r9, #4]
    cd9a:	str	r2, [sp, #112]	; 0x70
    cd9c:	bgt.w	d10c <_svfprintf_r+0x142c>
    cda0:	add.w	r9, r9, #8
    cda4:	negs	r4, r4
    cda6:	cmp	r4, #0
    cda8:	ble.w	ceba <_svfprintf_r+0x11da>
    cdac:	cmp	r4, #16
    cdae:	ldr	r7, [pc, #660]	; (d044 <_svfprintf_r+0x1364>)
    cdb0:	ble.w	cfd8 <_svfprintf_r+0x12f8>
    cdb4:	mov	r1, r9
    cdb6:	movs	r5, #16
    cdb8:	mov	r9, r6
    cdba:	ldr.w	r8, [sp, #20]
    cdbe:	ldr	r6, [sp, #12]
    cdc0:	b.n	cdcc <_svfprintf_r+0x10ec>
    cdc2:	adds	r1, #8
    cdc4:	subs	r4, #16
    cdc6:	cmp	r4, #16
    cdc8:	ble.w	cfd4 <_svfprintf_r+0x12f4>
    cdcc:	adds	r2, #1
    cdce:	adds	r3, #16
    cdd0:	cmp	r2, #7
    cdd2:	str	r3, [sp, #116]	; 0x74
    cdd4:	str	r2, [sp, #112]	; 0x70
    cdd6:	str	r7, [r1, #0]
    cdd8:	str	r5, [r1, #4]
    cdda:	ble.n	cdc2 <_svfprintf_r+0x10e2>
    cddc:	add	r2, sp, #108	; 0x6c
    cdde:	mov	r1, r6
    cde0:	mov	r0, r8
    cde2:	bl	10908 <__ssprint_r>
    cde6:	cmp	r0, #0
    cde8:	bne.w	becc <_svfprintf_r+0x1ec>
    cdec:	ldr	r3, [sp, #116]	; 0x74
    cdee:	ldr	r2, [sp, #112]	; 0x70
    cdf0:	add	r1, sp, #160	; 0xa0
    cdf2:	b.n	cdc4 <_svfprintf_r+0x10e4>
    cdf4:	add	r2, sp, #108	; 0x6c
    cdf6:	ldr	r1, [sp, #12]
    cdf8:	ldr	r0, [sp, #20]
    cdfa:	bl	10908 <__ssprint_r>
    cdfe:	cmp	r0, #0
    ce00:	bne.w	becc <_svfprintf_r+0x1ec>
    ce04:	ldr	r3, [sp, #116]	; 0x74
    ce06:	add.w	r9, sp, #160	; 0xa0
    ce0a:	b.n	c64c <_svfprintf_r+0x96c>
    ce0c:	movs	r1, #64	; 0x40
    ce0e:	ldr	r0, [sp, #20]
    ce10:	bl	9f10 <_malloc_r>
    ce14:	ldr	r2, [sp, #12]
    ce16:	str	r0, [r2, #0]
    ce18:	str	r0, [r2, #16]
    ce1a:	cmp	r0, #0
    ce1c:	beq.w	d1fa <_svfprintf_r+0x151a>
    ce20:	ldr	r2, [sp, #12]
    ce22:	movs	r3, #64	; 0x40
    ce24:	str	r3, [r2, #20]
    ce26:	b.w	bd12 <_svfprintf_r+0x32>
    ce2a:	add	r2, sp, #100	; 0x64
    ce2c:	add	r3, sp, #88	; 0x58
    ce2e:	str	r2, [sp, #4]
    ce30:	str	r3, [sp, #0]
    ce32:	mov	r2, r8
    ce34:	add	r3, sp, #84	; 0x54
    ce36:	movs	r1, #3
    ce38:	vmov.f64	d0, d10
    ce3c:	ldr	r0, [sp, #20]
    ce3e:	bl	e348 <_dtoa_r>
    ce42:	mov	r4, r8
    ce44:	mov	r6, r0
    ce46:	ldr	r3, [sp, #48]	; 0x30
    ce48:	cmp	r3, #70	; 0x46
    ce4a:	add.w	r1, r6, r4
    ce4e:	bne.w	cc88 <_svfprintf_r+0xfa8>
    ce52:	ldrb	r3, [r6, #0]
    ce54:	cmp	r3, #48	; 0x30
    ce56:	beq.w	d174 <_svfprintf_r+0x1494>
    ce5a:	ldr	r4, [sp, #84]	; 0x54
    ce5c:	add	r1, r4
    ce5e:	b.n	cc88 <_svfprintf_r+0xfa8>
    ce60:	add	r2, sp, #108	; 0x6c
    ce62:	ldr	r1, [sp, #12]
    ce64:	ldr	r0, [sp, #20]
    ce66:	bl	10908 <__ssprint_r>
    ce6a:	cmp	r0, #0
    ce6c:	bne.w	becc <_svfprintf_r+0x1ec>
    ce70:	ldr	r4, [sp, #84]	; 0x54
    ce72:	ldr	r3, [sp, #116]	; 0x74
    ce74:	add.w	r9, sp, #160	; 0xa0
    ce78:	b.n	cd76 <_svfprintf_r+0x1096>
    ce7a:	cmp.w	r8, #0
    ce7e:	it	eq
    ce80:	moveq.w	r8, #1
    ce84:	b.n	cc2e <_svfprintf_r+0xf4e>
    ce86:	str	r3, [sp, #36]	; 0x24
    ce88:	b.n	cbd4 <_svfprintf_r+0xef4>
    ce8a:	str	r3, [sp, #36]	; 0x24
    ce8c:	mov	r7, r2
    ce8e:	b.w	c388 <_svfprintf_r+0x6a8>
    ce92:	mov	r0, r6
    ce94:	bl	ab40 <strlen>
    ce98:	mov	r8, r4
    ce9a:	mov	r3, r0
    ce9c:	str	r0, [sp, #32]
    ce9e:	b.w	c564 <_svfprintf_r+0x884>
    cea2:	add	r2, sp, #108	; 0x6c
    cea4:	ldr	r1, [sp, #12]
    cea6:	ldr	r0, [sp, #20]
    cea8:	bl	10908 <__ssprint_r>
    ceac:	cmp	r0, #0
    ceae:	bne.w	becc <_svfprintf_r+0x1ec>
    ceb2:	ldr	r3, [sp, #116]	; 0x74
    ceb4:	ldr	r2, [sp, #112]	; 0x70
    ceb6:	add.w	r9, sp, #160	; 0xa0
    ceba:	ldr	r0, [sp, #52]	; 0x34
    cebc:	str.w	r6, [r9]
    cec0:	adds	r2, #1
    cec2:	add	r3, r0
    cec4:	cmp	r2, #7
    cec6:	str	r3, [sp, #116]	; 0x74
    cec8:	str	r2, [sp, #112]	; 0x70
    ceca:	str.w	r0, [r9, #4]
    cece:	ble.w	c23e <_svfprintf_r+0x55e>
    ced2:	b.n	c7c2 <_svfprintf_r+0xae2>
    ced4:	movs	r7, #45	; 0x2d
    ced6:	str	r3, [sp, #16]
    ced8:	ldr.w	fp, [sp, #40]	; 0x28
    cedc:	strb.w	r7, [sp, #79]	; 0x4f
    cee0:	mov.w	r8, #0
    cee4:	b.w	c0c6 <_svfprintf_r+0x3e6>
    cee8:	str	r7, [sp, #36]	; 0x24
    ceea:	mov	r7, r3
    ceec:	b.w	c388 <_svfprintf_r+0x6a8>
    cef0:	ldr	r3, [sp, #84]	; 0x54
    cef2:	adds	r2, r3, #3
    cef4:	blt.n	cefc <_svfprintf_r+0x121c>
    cef6:	cmp	r8, r3
    cef8:	bge.w	ccc4 <_svfprintf_r+0xfe4>
    cefc:	ldr	r2, [sp, #48]	; 0x30
    cefe:	subs	r2, #2
    cf00:	str	r2, [sp, #48]	; 0x30
    cf02:	subs	r3, #1
    cf04:	cmp	r3, #0
    cf06:	ldrb.w	r2, [sp, #48]	; 0x30
    cf0a:	str	r3, [sp, #84]	; 0x54
    cf0c:	it	lt
    cf0e:	neglt	r3, r3
    cf10:	strb.w	r2, [sp, #92]	; 0x5c
    cf14:	ite	lt
    cf16:	movlt	r2, #45	; 0x2d
    cf18:	movge	r2, #43	; 0x2b
    cf1a:	cmp	r3, #9
    cf1c:	strb.w	r2, [sp, #93]	; 0x5d
    cf20:	ble.w	d130 <_svfprintf_r+0x1450>
    cf24:	add.w	r0, sp, #107	; 0x6b
    cf28:	mov	r4, r0
    cf2a:	ldr	r2, [pc, #284]	; (d048 <_svfprintf_r+0x1368>)
    cf2c:	smull	r2, r1, r2, r3
    cf30:	asrs	r2, r3, #31
    cf32:	rsb	r2, r2, r1, asr #2
    cf36:	add.w	r1, r2, r2, lsl #2
    cf3a:	sub.w	r3, r3, r1, lsl #1
    cf3e:	add.w	r1, r3, #48	; 0x30
    cf42:	cmp	r2, #9
    cf44:	mov	r3, r2
    cf46:	strb.w	r1, [r4, #-1]!
    cf4a:	bgt.n	cf2a <_svfprintf_r+0x124a>
    cf4c:	mov	r1, r4
    cf4e:	adds	r3, #48	; 0x30
    cf50:	uxtb	r2, r3
    cf52:	strb.w	r2, [r1, #-1]!
    cf56:	cmp	r0, r1
    cf58:	bls.w	d220 <_svfprintf_r+0x1540>
    cf5c:	add.w	r1, sp, #94	; 0x5e
    cf60:	mov	r3, r4
    cf62:	b.n	cf68 <_svfprintf_r+0x1288>
    cf64:	ldrb.w	r2, [r3], #1
    cf68:	strb.w	r2, [r1], #1
    cf6c:	cmp	r0, r3
    cf6e:	bne.n	cf64 <_svfprintf_r+0x1284>
    cf70:	adds	r3, r0, #1
    cf72:	subs	r3, r3, r4
    cf74:	add.w	r2, sp, #94	; 0x5e
    cf78:	add	r3, r2
    cf7a:	add	r2, sp, #92	; 0x5c
    cf7c:	subs	r3, r3, r2
    cf7e:	ldr	r2, [sp, #52]	; 0x34
    cf80:	str	r3, [sp, #68]	; 0x44
    cf82:	cmp	r2, #1
    cf84:	add	r3, r2
    cf86:	str	r3, [sp, #32]
    cf88:	ble.w	d18a <_svfprintf_r+0x14aa>
    cf8c:	ldr	r3, [sp, #32]
    cf8e:	ldr	r2, [sp, #60]	; 0x3c
    cf90:	add	r3, r2
    cf92:	movs	r2, #0
    cf94:	str	r3, [sp, #32]
    cf96:	str	r2, [sp, #56]	; 0x38
    cf98:	bic.w	r3, r3, r3, asr #31
    cf9c:	b.n	cce2 <_svfprintf_r+0x1002>
    cf9e:	mov	r3, r1
    cfa0:	b.n	cca8 <_svfprintf_r+0xfc8>
    cfa2:	add	r2, sp, #108	; 0x6c
    cfa4:	ldr	r1, [sp, #12]
    cfa6:	ldr	r0, [sp, #20]
    cfa8:	bl	10908 <__ssprint_r>
    cfac:	cmp	r0, #0
    cfae:	bne.w	becc <_svfprintf_r+0x1ec>
    cfb2:	ldr	r3, [sp, #116]	; 0x74
    cfb4:	add.w	r9, sp, #160	; 0xa0
    cfb8:	b.n	c8c2 <_svfprintf_r+0xbe2>
    cfba:	add	r2, sp, #108	; 0x6c
    cfbc:	ldr	r1, [sp, #12]
    cfbe:	ldr	r0, [sp, #20]
    cfc0:	bl	10908 <__ssprint_r>
    cfc4:	cmp	r0, #0
    cfc6:	bne.w	becc <_svfprintf_r+0x1ec>
    cfca:	ldr	r2, [sp, #84]	; 0x54
    cfcc:	ldr	r3, [sp, #116]	; 0x74
    cfce:	add.w	r9, sp, #160	; 0xa0
    cfd2:	b.n	cac8 <_svfprintf_r+0xde8>
    cfd4:	mov	r6, r9
    cfd6:	mov	r9, r1
    cfd8:	adds	r2, #1
    cfda:	add	r3, r4
    cfdc:	cmp	r2, #7
    cfde:	str	r3, [sp, #116]	; 0x74
    cfe0:	str	r2, [sp, #112]	; 0x70
    cfe2:	str.w	r7, [r9]
    cfe6:	str.w	r4, [r9, #4]
    cfea:	bgt.w	cea2 <_svfprintf_r+0x11c2>
    cfee:	add.w	r9, r9, #8
    cff2:	b.n	ceba <_svfprintf_r+0x11da>
    cff4:	add	r2, sp, #108	; 0x6c
    cff6:	ldr	r1, [sp, #12]
    cff8:	ldr	r0, [sp, #20]
    cffa:	bl	10908 <__ssprint_r>
    cffe:	cmp	r0, #0
    d000:	bne.w	becc <_svfprintf_r+0x1ec>
    d004:	ldr	r2, [sp, #84]	; 0x54
    d006:	ldr	r1, [sp, #52]	; 0x34
    d008:	ldr	r3, [sp, #116]	; 0x74
    d00a:	subs	r2, r1, r2
    d00c:	add.w	r9, sp, #160	; 0xa0
    d010:	b.n	caf8 <_svfprintf_r+0xe18>
    d012:	cmp	r5, #6
    d014:	mov	r3, r5
    d016:	it	cs
    d018:	movcs	r3, #6
    d01a:	str	r3, [sp, #32]
    d01c:	bic.w	r3, r3, r3, asr #31
    d020:	mov	r8, r6
    d022:	str	r7, [sp, #36]	; 0x24
    d024:	str	r6, [sp, #56]	; 0x38
    d026:	mov	r7, r6
    d028:	str	r3, [sp, #16]
    d02a:	ldr	r6, [pc, #32]	; (d04c <_svfprintf_r+0x136c>)
    d02c:	b.w	c0c4 <_svfprintf_r+0x3e4>
    d030:	mov	fp, r3
    d032:	b.w	c40a <_svfprintf_r+0x72a>
    d036:	movs	r7, #45	; 0x2d
    d038:	strb.w	r7, [sp, #79]	; 0x4f
    d03c:	b.w	c0a6 <_svfprintf_r+0x3c6>
    d040:	.word	0x20000ca8
    d044:	.word	0x20000d30
    d048:	.word	0x66666667
    d04c:	.word	0x20000ca0
    d050:	add	r2, sp, #100	; 0x64
    d052:	add	r3, sp, #88	; 0x58
    d054:	str	r2, [sp, #4]
    d056:	str	r3, [sp, #0]
    d058:	movs	r1, #3
    d05a:	add	r3, sp, #84	; 0x54
    d05c:	mov	r2, r8
    d05e:	vmov.f64	d0, d10
    d062:	ldr	r0, [sp, #20]
    d064:	bl	e348 <_dtoa_r>
    d068:	mov	r4, r8
    d06a:	mov	r6, r0
    d06c:	add.w	r1, r0, r8
    d070:	b.n	ce52 <_svfprintf_r+0x1172>
    d072:	mov.w	r8, #6
    d076:	b.n	cc2e <_svfprintf_r+0xf4e>
    d078:	vneg.f64	d10, d8
    d07c:	movs	r7, #45	; 0x2d
    d07e:	b.n	cc44 <_svfprintf_r+0xf64>
    d080:	ldr	r2, [sp, #60]	; 0x3c
    d082:	ldr	r3, [sp, #52]	; 0x34
    d084:	add	r3, r2
    d086:	ldr	r2, [sp, #56]	; 0x38
    d088:	str	r3, [sp, #32]
    d08a:	cmp	r2, #0
    d08c:	ble.w	d19c <_svfprintf_r+0x14bc>
    d090:	movs	r2, #103	; 0x67
    d092:	bic.w	r3, r3, r3, asr #31
    d096:	str	r2, [sp, #48]	; 0x30
    d098:	b.n	cce2 <_svfprintf_r+0x1002>
    d09a:	ldr	r3, [sp, #48]	; 0x30
    d09c:	cmp	r3, #71	; 0x47
    d09e:	bne.w	cc86 <_svfprintf_r+0xfa6>
    d0a2:	tst.w	fp, #1
    d0a6:	bne.w	ce46 <_svfprintf_r+0x1166>
    d0aa:	ldr	r3, [sp, #100]	; 0x64
    d0ac:	cmp	r5, #71	; 0x47
    d0ae:	sub.w	r3, r3, r6
    d0b2:	str	r3, [sp, #52]	; 0x34
    d0b4:	beq.w	cef0 <_svfprintf_r+0x1210>
    d0b8:	ldr	r3, [sp, #84]	; 0x54
    d0ba:	b.n	cf02 <_svfprintf_r+0x1222>
    d0bc:	cmp	r3, #0
    d0be:	mov	r2, r3
    d0c0:	str	r3, [sp, #56]	; 0x38
    d0c2:	ble.n	d1ac <_svfprintf_r+0x14cc>
    d0c4:	cmp.w	r8, #0
    d0c8:	bne.n	d162 <_svfprintf_r+0x1482>
    d0ca:	tst.w	fp, #1
    d0ce:	bne.n	d162 <_svfprintf_r+0x1482>
    d0d0:	bic.w	r3, r3, r3, asr #31
    d0d4:	str	r2, [sp, #32]
    d0d6:	b.n	cce2 <_svfprintf_r+0x1002>
    d0d8:	tst.w	fp, #1
    d0dc:	mov	r7, r8
    d0de:	beq.n	d0ec <_svfprintf_r+0x140c>
    d0e0:	add	r6, sp, #224	; 0xe0
    d0e2:	movs	r3, #48	; 0x30
    d0e4:	strb.w	r3, [r6, #-65]!
    d0e8:	b.w	c398 <_svfprintf_r+0x6b8>
    d0ec:	str.w	r8, [sp, #32]
    d0f0:	add	r6, sp, #160	; 0xa0
    d0f2:	b.w	c39e <_svfprintf_r+0x6be>
    d0f6:	bic.w	r3, r5, r5, asr #31
    d0fa:	str	r7, [sp, #36]	; 0x24
    d0fc:	str	r3, [sp, #16]
    d0fe:	str	r5, [sp, #32]
    d100:	mov	r8, r0
    d102:	str	r0, [sp, #56]	; 0x38
    d104:	ldrb.w	r7, [sp, #79]	; 0x4f
    d108:	b.w	c0c4 <_svfprintf_r+0x3e4>
    d10c:	add	r2, sp, #108	; 0x6c
    d10e:	ldr	r1, [sp, #12]
    d110:	ldr	r0, [sp, #20]
    d112:	bl	10908 <__ssprint_r>
    d116:	cmp	r0, #0
    d118:	bne.w	becc <_svfprintf_r+0x1ec>
    d11c:	ldr	r4, [sp, #84]	; 0x54
    d11e:	ldr	r3, [sp, #116]	; 0x74
    d120:	ldr	r2, [sp, #112]	; 0x70
    d122:	add.w	r9, sp, #160	; 0xa0
    d126:	b.n	cda4 <_svfprintf_r+0x10c4>
    d128:	mov	sl, r4
    d12a:	movs	r5, #0
    d12c:	b.w	bd96 <_svfprintf_r+0xb6>
    d130:	adds	r3, #48	; 0x30
    d132:	movs	r2, #48	; 0x30
    d134:	strb.w	r3, [sp, #95]	; 0x5f
    d138:	strb.w	r2, [sp, #94]	; 0x5e
    d13c:	add	r3, sp, #96	; 0x60
    d13e:	b.n	cf7a <_svfprintf_r+0x129a>
    d140:	ldr	r2, [sp, #60]	; 0x3c
    d142:	ldr	r3, [sp, #56]	; 0x38
    d144:	add	r3, r2
    d146:	movs	r2, #103	; 0x67
    d148:	str	r3, [sp, #32]
    d14a:	str	r2, [sp, #48]	; 0x30
    d14c:	bic.w	r3, r3, r3, asr #31
    d150:	b.n	cce2 <_svfprintf_r+0x1002>
    d152:	ldr	r3, [sp, #100]	; 0x64
    d154:	b.n	cca8 <_svfprintf_r+0xfc8>
    d156:	ldr	r6, [pc, #240]	; (d248 <_svfprintf_r+0x1568>)
    d158:	ldr	r3, [pc, #240]	; (d24c <_svfprintf_r+0x156c>)
    d15a:	ldrb.w	r7, [sp, #79]	; 0x4f
    d15e:	b.w	c0aa <_svfprintf_r+0x3ca>
    d162:	ldr	r3, [sp, #56]	; 0x38
    d164:	ldr	r2, [sp, #60]	; 0x3c
    d166:	adds	r5, r3, r2
    d168:	add.w	r3, r5, r8
    d16c:	str	r3, [sp, #32]
    d16e:	bic.w	r3, r3, r3, asr #31
    d172:	b.n	cce2 <_svfprintf_r+0x1002>
    d174:	vcmp.f64	d10, #0.0
    d178:	vmrs	APSR_nzcv, fpscr
    d17c:	beq.w	ce5a <_svfprintf_r+0x117a>
    d180:	rsb	r4, r4, #1
    d184:	str	r4, [sp, #84]	; 0x54
    d186:	add	r1, r4
    d188:	b.n	cc88 <_svfprintf_r+0xfa8>
    d18a:	ands.w	r3, fp, #1
    d18e:	bne.w	cf8c <_svfprintf_r+0x12ac>
    d192:	str	r3, [sp, #56]	; 0x38
    d194:	ldr	r3, [sp, #32]
    d196:	bic.w	r3, r3, r3, asr #31
    d19a:	b.n	cce2 <_svfprintf_r+0x1002>
    d19c:	ldr	r3, [sp, #56]	; 0x38
    d19e:	ldr	r2, [sp, #32]
    d1a0:	rsb	r3, r3, #1
    d1a4:	add	r2, r3
    d1a6:	mov	r3, r2
    d1a8:	str	r2, [sp, #32]
    d1aa:	b.n	d090 <_svfprintf_r+0x13b0>
    d1ac:	cmp.w	r8, #0
    d1b0:	bne.n	d1b8 <_svfprintf_r+0x14d8>
    d1b2:	tst.w	fp, #1
    d1b6:	beq.n	d1c8 <_svfprintf_r+0x14e8>
    d1b8:	ldr	r3, [sp, #60]	; 0x3c
    d1ba:	adds	r5, r3, #1
    d1bc:	add.w	r3, r5, r8
    d1c0:	str	r3, [sp, #32]
    d1c2:	bic.w	r3, r3, r3, asr #31
    d1c6:	b.n	cce2 <_svfprintf_r+0x1002>
    d1c8:	movs	r3, #1
    d1ca:	str	r3, [sp, #32]
    d1cc:	b.n	cce2 <_svfprintf_r+0x1002>
    d1ce:	ldr	r0, [sp, #36]	; 0x24
    d1d0:	ldrb.w	r3, [sl, #1]
    d1d4:	ldr	r5, [r0, #0]
    d1d6:	adds	r0, #4
    d1d8:	cmp	r5, #0
    d1da:	str	r0, [sp, #36]	; 0x24
    d1dc:	mov	sl, r4
    d1de:	bge.w	bd92 <_svfprintf_r+0xb2>
    d1e2:	mov.w	r5, #4294967295
    d1e6:	b.w	bd92 <_svfprintf_r+0xb2>
    d1ea:	strb.w	r1, [sp, #79]	; 0x4f
    d1ee:	b.w	c50c <_svfprintf_r+0x82c>
    d1f2:	strb.w	r1, [sp, #79]	; 0x4f
    d1f6:	b.w	c598 <_svfprintf_r+0x8b8>
    d1fa:	ldr	r2, [sp, #20]
    d1fc:	movs	r3, #12
    d1fe:	str	r3, [r2, #0]
    d200:	mov.w	r0, #4294967295
    d204:	b.w	bede <_svfprintf_r+0x1fe>
    d208:	strb.w	r1, [sp, #79]	; 0x4f
    d20c:	b.w	c3b8 <_svfprintf_r+0x6d8>
    d210:	strb.w	r1, [sp, #79]	; 0x4f
    d214:	b.w	c35e <_svfprintf_r+0x67e>
    d218:	strb.w	r1, [sp, #79]	; 0x4f
    d21c:	b.w	c4c4 <_svfprintf_r+0x7e4>
    d220:	add.w	r3, sp, #94	; 0x5e
    d224:	b.n	cf7a <_svfprintf_r+0x129a>
    d226:	strb.w	r1, [sp, #79]	; 0x4f
    d22a:	b.w	bef2 <_svfprintf_r+0x212>
    d22e:	strb.w	r1, [sp, #79]	; 0x4f
    d232:	b.w	c2fa <_svfprintf_r+0x61a>
    d236:	strb.w	r1, [sp, #79]	; 0x4f
    d23a:	b.w	c06a <_svfprintf_r+0x38a>
    d23e:	strb.w	r1, [sp, #79]	; 0x4f
    d242:	b.w	bfe6 <_svfprintf_r+0x306>
    d246:	nop
    d248:	.word	0x20000c74
    d24c:	.word	0x20000c70

0000d250 <__ssvfscanf_r>:
    d250:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d254:	mov	fp, r1
    d256:	ldrsh.w	r1, [r1, #12]
    d25a:	sub.w	sp, sp, #684	; 0x2ac
    d25e:	mov	sl, r0
    d260:	lsls	r0, r1, #18
    d262:	mov	r4, r2
    d264:	str	r3, [sp, #16]
    d266:	bmi.n	d27c <__ssvfscanf_r+0x2c>
    d268:	ldr.w	r3, [fp, #100]	; 0x64
    d26c:	orr.w	r1, r1, #8192	; 0x2000
    d270:	bic.w	r3, r3, #8192	; 0x2000
    d274:	strh.w	r1, [fp, #12]
    d278:	str.w	r3, [fp, #100]	; 0x64
    d27c:	mov	r6, r4
    d27e:	movs	r3, #0
    d280:	str	r3, [sp, #24]
    d282:	str	r3, [sp, #12]
    d284:	mov	r7, r3
    d286:	str	r3, [sp, #20]
    d288:	ldrb.w	r3, [r6], #1
    d28c:	str	r3, [sp, #60]	; 0x3c
    d28e:	cbz	r3, d2ec <__ssvfscanf_r+0x9c>
    d290:	bl	9edc <__locale_ctype_ptr>
    d294:	ldr	r2, [sp, #60]	; 0x3c
    d296:	add	r0, r2
    d298:	ldrb	r3, [r0, #1]
    d29a:	and.w	r3, r3, #8
    d29e:	and.w	r5, r3, #255	; 0xff
    d2a2:	cbz	r3, d2f6 <__ssvfscanf_r+0xa6>
    d2a4:	ldr.w	r3, [fp, #4]
    d2a8:	b.n	d2ce <__ssvfscanf_r+0x7e>
    d2aa:	bl	9edc <__locale_ctype_ptr>
    d2ae:	ldr.w	r3, [fp]
    d2b2:	ldrb	r2, [r3, #0]
    d2b4:	add	r0, r2
    d2b6:	adds	r3, #1
    d2b8:	ldrb	r2, [r0, #1]
    d2ba:	lsls	r1, r2, #28
    d2bc:	bpl.n	d2de <__ssvfscanf_r+0x8e>
    d2be:	ldr.w	r2, [fp, #4]
    d2c2:	str.w	r3, [fp]
    d2c6:	subs	r3, r2, #1
    d2c8:	adds	r7, #1
    d2ca:	str.w	r3, [fp, #4]
    d2ce:	cmp	r3, #0
    d2d0:	bgt.n	d2aa <__ssvfscanf_r+0x5a>
    d2d2:	mov	r1, fp
    d2d4:	mov	r0, sl
    d2d6:	bl	10a8c <__ssrefill_r>
    d2da:	cmp	r0, #0
    d2dc:	beq.n	d2aa <__ssvfscanf_r+0x5a>
    d2de:	mov	r4, r6
    d2e0:	mov	r6, r4
    d2e2:	ldrb.w	r3, [r6], #1
    d2e6:	str	r3, [sp, #60]	; 0x3c
    d2e8:	cmp	r3, #0
    d2ea:	bne.n	d290 <__ssvfscanf_r+0x40>
    d2ec:	ldr	r0, [sp, #20]
    d2ee:	add.w	sp, sp, #684	; 0x2ac
    d2f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2f6:	cmp	r2, #37	; 0x25
    d2f8:	bne.w	d404 <__ssvfscanf_r+0x1b4>
    d2fc:	ldrb.w	r8, [r4, #1]
    d300:	mov	r4, r5
    d302:	adds	r3, r6, #1
    d304:	cmp.w	r8, #120	; 0x78
    d308:	bhi.w	d792 <__ssvfscanf_r+0x542>
    d30c:	tbh	[pc, r8, lsl #1]
    d310:	.word	0x02410092
    d314:	.word	0x02410241
    d318:	.word	0x02410241
    d31c:	.word	0x02410241
    d320:	.word	0x02410241
    d324:	.word	0x02410241
    d328:	.word	0x02410241
    d32c:	.word	0x02410241
    d330:	.word	0x02410241
    d334:	.word	0x02410241
    d338:	.word	0x02410241
    d33c:	.word	0x02410241
    d340:	.word	0x02410241
    d344:	.word	0x02410241
    d348:	.word	0x02410241
    d34c:	.word	0x02410241
    d350:	.word	0x02410241
    d354:	.word	0x02410241
    d358:	.word	0x00790241
    d35c:	.word	0x02410241
    d360:	.word	0x02410241
    d364:	.word	0x024101d8
    d368:	.word	0x02410241
    d36c:	.word	0x02410241
    d370:	.word	0x01cf01cf
    d374:	.word	0x01cf01cf
    d378:	.word	0x01cf01cf
    d37c:	.word	0x01cf01cf
    d380:	.word	0x01cf01cf
    d384:	.word	0x02410241
    d388:	.word	0x02410241
    d38c:	.word	0x02410241
    d390:	.word	0x02410241
    d394:	.word	0x02410241
    d398:	.word	0x01b901c1
    d39c:	.word	0x01b90241
    d3a0:	.word	0x02410241
    d3a4:	.word	0x02410241
    d3a8:	.word	0x024101b3
    d3ac:	.word	0x01a30241
    d3b0:	.word	0x02410241
    d3b4:	.word	0x02410241
    d3b8:	.word	0x02410241
    d3bc:	.word	0x02410241
    d3c0:	.word	0x02410193
    d3c4:	.word	0x01510241
    d3c8:	.word	0x02410241
    d3cc:	.word	0x02410241
    d3d0:	.word	0x02410241
    d3d4:	.word	0x01220241
    d3d8:	.word	0x01b90188
    d3dc:	.word	0x01b901b9
    d3e0:	.word	0x0098011c
    d3e4:	.word	0x02410241
    d3e8:	.word	0x024100d5
    d3ec:	.word	0x0101010d
    d3f0:	.word	0x024100f3
    d3f4:	.word	0x00eb0241
    d3f8:	.word	0x00df0241
    d3fc:	.word	0x02410241
    d400:	.short	0x0193
    d402:	mov	r6, r3
    d404:	ldr.w	r3, [fp, #4]
    d408:	cmp	r3, #0
    d40a:	ble.w	d8b4 <__ssvfscanf_r+0x664>
    d40e:	ldr.w	r3, [fp]
    d412:	ldrb.w	r2, [r6, #-1]
    d416:	ldrb	r1, [r3, #0]
    d418:	cmp	r1, r2
    d41a:	bne.w	d2ec <__ssvfscanf_r+0x9c>
    d41e:	ldr.w	r2, [fp, #4]
    d422:	adds	r3, #1
    d424:	subs	r2, #1
    d426:	str.w	r3, [fp]
    d42a:	adds	r7, #1
    d42c:	str.w	r2, [fp, #4]
    d430:	mov	r4, r6
    d432:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d434:	mov.w	r0, #4294967295
    d438:	add.w	sp, sp, #684	; 0x2ac
    d43c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d440:	str	r3, [sp, #8]
    d442:	ldr.w	r3, [fp, #4]
    d446:	cmp	r3, #0
    d448:	ble.w	d912 <__ssvfscanf_r+0x6c2>
    d44c:	ldr	r3, [pc, #736]	; (d730 <__ssvfscanf_r+0x4e0>)
    d44e:	str	r3, [sp, #24]
    d450:	movs	r3, #0
    d452:	str	r3, [sp, #12]
    d454:	movs	r6, #3
    d456:	b.n	d45c <__ssvfscanf_r+0x20c>
    d458:	str.w	lr, [fp]
    d45c:	bl	9edc <__locale_ctype_ptr>
    d460:	ldr.w	r2, [fp]
    d464:	ldrb	r1, [r2, #0]
    d466:	add	r0, r1
    d468:	add.w	lr, r2, #1
    d46c:	ldrb	r3, [r0, #1]
    d46e:	and.w	r3, r3, #8
    d472:	and.w	r8, r3, #255	; 0xff
    d476:	cmp	r3, #0
    d478:	beq.w	d97a <__ssvfscanf_r+0x72a>
    d47c:	ldr.w	r3, [fp, #4]
    d480:	subs	r3, #1
    d482:	cmp	r3, #0
    d484:	add.w	r7, r7, #1
    d488:	str.w	r3, [fp, #4]
    d48c:	bgt.n	d458 <__ssvfscanf_r+0x208>
    d48e:	mov	r1, fp
    d490:	mov	r0, sl
    d492:	bl	10a8c <__ssrefill_r>
    d496:	cmp	r0, #0
    d498:	beq.n	d45c <__ssvfscanf_r+0x20c>
    d49a:	ldr	r2, [sp, #20]
    d49c:	cmp	r2, #0
    d49e:	beq.n	d434 <__ssvfscanf_r+0x1e4>
    d4a0:	ldrh.w	r3, [fp, #12]
    d4a4:	tst.w	r3, #64	; 0x40
    d4a8:	mov	r3, r2
    d4aa:	it	ne
    d4ac:	movne.w	r3, #4294967295
    d4b0:	mov	r0, r3
    d4b2:	add.w	sp, sp, #684	; 0x2ac
    d4b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4ba:	ldrb.w	r8, [r6, #1]
    d4be:	cmp.w	r8, #108	; 0x6c
    d4c2:	beq.w	d8ca <__ssvfscanf_r+0x67a>
    d4c6:	orr.w	r5, r5, #1
    d4ca:	mov	r6, r3
    d4cc:	b.n	d302 <__ssvfscanf_r+0xb2>
    d4ce:	str	r3, [sp, #8]
    d4d0:	ldr.w	r3, [fp, #4]
    d4d4:	cmp	r3, #0
    d4d6:	ble.w	d96a <__ssvfscanf_r+0x71a>
    d4da:	ldr	r3, [pc, #600]	; (d734 <__ssvfscanf_r+0x4e4>)
    d4dc:	str	r3, [sp, #24]
    d4de:	movs	r3, #10
    d4e0:	str	r3, [sp, #12]
    d4e2:	movs	r6, #3
    d4e4:	b.n	d45c <__ssvfscanf_r+0x20c>
    d4e6:	str	r3, [sp, #8]
    d4e8:	ldr.w	r3, [fp, #4]
    d4ec:	cmp	r3, #0
    d4ee:	ble.w	d95a <__ssvfscanf_r+0x70a>
    d4f2:	movs	r6, #2
    d4f4:	b.n	d45c <__ssvfscanf_r+0x20c>
    d4f6:	str	r3, [sp, #8]
    d4f8:	ldr.w	r3, [fp, #4]
    d4fc:	cmp	r3, #0
    d4fe:	orr.w	r5, r5, #544	; 0x220
    d502:	ble.w	d646 <__ssvfscanf_r+0x3f6>
    d506:	ldr	r3, [pc, #556]	; (d734 <__ssvfscanf_r+0x4e4>)
    d508:	str	r3, [sp, #24]
    d50a:	movs	r3, #16
    d50c:	str	r3, [sp, #12]
    d50e:	movs	r6, #3
    d510:	b.n	d45c <__ssvfscanf_r+0x20c>
    d512:	str	r3, [sp, #8]
    d514:	ldr.w	r3, [fp, #4]
    d518:	cmp	r3, #0
    d51a:	ble.w	d666 <__ssvfscanf_r+0x416>
    d51e:	ldr	r3, [pc, #532]	; (d734 <__ssvfscanf_r+0x4e4>)
    d520:	str	r3, [sp, #24]
    d522:	movs	r3, #8
    d524:	str	r3, [sp, #12]
    d526:	movs	r6, #3
    d528:	b.n	d45c <__ssvfscanf_r+0x20c>
    d52a:	lsls	r2, r5, #27
    d52c:	mov	r6, r3
    d52e:	str	r3, [sp, #8]
    d530:	bmi.w	d718 <__ssvfscanf_r+0x4c8>
    d534:	lsls	r3, r5, #29
    d536:	bpl.w	d8e2 <__ssvfscanf_r+0x692>
    d53a:	ldr	r1, [sp, #16]
    d53c:	ldr	r3, [r1, #0]
    d53e:	strh	r7, [r3, #0]
    d540:	adds	r3, r1, #4
    d542:	str	r3, [sp, #16]
    d544:	mov	r4, r6
    d546:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d548:	ldrb.w	r8, [r6, #1]
    d54c:	orr.w	r5, r5, #4
    d550:	mov	r6, r3
    d552:	b.n	d302 <__ssvfscanf_r+0xb2>
    d554:	str	r3, [sp, #8]
    d556:	ldr.w	r3, [fp, #4]
    d55a:	cmp	r3, #0
    d55c:	ble.w	d93a <__ssvfscanf_r+0x6ea>
    d560:	cmp	r4, #0
    d562:	it	eq
    d564:	moveq	r4, #1
    d566:	ands.w	r3, r5, #1
    d56a:	bne.w	d7b2 <__ssvfscanf_r+0x562>
    d56e:	lsls	r2, r5, #27
    d570:	bpl.w	d88a <__ssvfscanf_r+0x63a>
    d574:	mov	r5, r3
    d576:	b.n	d58c <__ssvfscanf_r+0x33c>
    d578:	add	r3, r2
    d57a:	str.w	r3, [fp]
    d57e:	add	r5, r2
    d580:	subs	r4, r4, r2
    d582:	bl	10a8c <__ssrefill_r>
    d586:	cmp	r0, #0
    d588:	bne.w	d882 <__ssvfscanf_r+0x632>
    d58c:	ldr.w	r2, [fp, #4]
    d590:	ldr.w	r3, [fp]
    d594:	cmp	r2, r4
    d596:	mov	r1, fp
    d598:	mov	r0, sl
    d59a:	blt.n	d578 <__ssvfscanf_r+0x328>
    d59c:	subs	r2, r2, r4
    d59e:	add	r3, r4
    d5a0:	str.w	r2, [fp, #4]
    d5a4:	add	r5, r4
    d5a6:	str.w	r3, [fp]
    d5aa:	ldr	r6, [sp, #8]
    d5ac:	add	r7, r5
    d5ae:	mov	r4, r6
    d5b0:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d5b2:	add.w	r9, sp, #72	; 0x48
    d5b6:	mov	r1, r3
    d5b8:	mov	r0, r9
    d5ba:	bl	1031c <__sccl>
    d5be:	ldr.w	r3, [fp, #4]
    d5c2:	cmp	r3, #0
    d5c4:	mov	r6, r0
    d5c6:	ble.w	d92a <__ssvfscanf_r+0x6da>
    d5ca:	cmp	r4, #0
    d5cc:	ldr.w	r2, [fp]
    d5d0:	it	eq
    d5d2:	moveq.w	r4, #4294967295
    d5d6:	lsls	r3, r5, #27
    d5d8:	ldrb	r1, [r2, #0]
    d5da:	bpl.w	d71e <__ssvfscanf_r+0x4ce>
    d5de:	mov	r8, r4
    d5e0:	movs	r5, #0
    d5e2:	b.n	d5e6 <__ssvfscanf_r+0x396>
    d5e4:	ldrb	r1, [r2, #0]
    d5e6:	ldrb.w	r3, [r9, r1]
    d5ea:	adds	r2, #1
    d5ec:	cmp	r3, #0
    d5ee:	beq.w	d878 <__ssvfscanf_r+0x628>
    d5f2:	ldr.w	r3, [fp, #4]
    d5f6:	str.w	r2, [fp]
    d5fa:	adds	r5, #1
    d5fc:	subs	r3, #1
    d5fe:	cmp	r5, r4
    d600:	str.w	r3, [fp, #4]
    d604:	beq.w	d872 <__ssvfscanf_r+0x622>
    d608:	cmp	r3, #0
    d60a:	bgt.n	d5e4 <__ssvfscanf_r+0x394>
    d60c:	mov	r1, fp
    d60e:	mov	r0, sl
    d610:	bl	10a8c <__ssrefill_r>
    d614:	cmp	r0, #0
    d616:	bne.w	d870 <__ssvfscanf_r+0x620>
    d61a:	ldr.w	r2, [fp]
    d61e:	b.n	d5e4 <__ssvfscanf_r+0x394>
    d620:	str	r3, [sp, #8]
    d622:	ldr.w	r3, [fp, #4]
    d626:	cmp	r3, #0
    d628:	ble.n	d6a0 <__ssvfscanf_r+0x450>
    d62a:	ldr	r3, [pc, #260]	; (d730 <__ssvfscanf_r+0x4e0>)
    d62c:	str	r3, [sp, #24]
    d62e:	movs	r3, #10
    d630:	str	r3, [sp, #12]
    d632:	movs	r6, #3
    d634:	b.n	d45c <__ssvfscanf_r+0x20c>
    d636:	str	r3, [sp, #8]
    d638:	ldr.w	r3, [fp, #4]
    d63c:	cmp	r3, #0
    d63e:	orr.w	r5, r5, #512	; 0x200
    d642:	bgt.w	d506 <__ssvfscanf_r+0x2b6>
    d646:	mov	r1, fp
    d648:	mov	r0, sl
    d64a:	bl	10a8c <__ssrefill_r>
    d64e:	cmp	r0, #0
    d650:	beq.w	d506 <__ssvfscanf_r+0x2b6>
    d654:	b.n	d49a <__ssvfscanf_r+0x24a>
    d656:	str	r3, [sp, #8]
    d658:	ldr.w	r3, [fp, #4]
    d65c:	cmp	r3, #0
    d65e:	orr.w	r5, r5, #1
    d662:	bgt.w	d51e <__ssvfscanf_r+0x2ce>
    d666:	mov	r1, fp
    d668:	mov	r0, sl
    d66a:	bl	10a8c <__ssrefill_r>
    d66e:	cmp	r0, #0
    d670:	beq.w	d51e <__ssvfscanf_r+0x2ce>
    d674:	b.n	d49a <__ssvfscanf_r+0x24a>
    d676:	ldrb.w	r8, [r6, #1]
    d67a:	orr.w	r5, r5, #2
    d67e:	mov	r6, r3
    d680:	b.n	d302 <__ssvfscanf_r+0xb2>
    d682:	str	r3, [sp, #8]
    d684:	ldr.w	r3, [fp, #4]
    d688:	cmp	r3, #0
    d68a:	ble.w	d94a <__ssvfscanf_r+0x6fa>
    d68e:	movs	r6, #4
    d690:	b.n	d45c <__ssvfscanf_r+0x20c>
    d692:	str	r3, [sp, #8]
    d694:	ldr.w	r3, [fp, #4]
    d698:	cmp	r3, #0
    d69a:	orr.w	r5, r5, #1
    d69e:	bgt.n	d62a <__ssvfscanf_r+0x3da>
    d6a0:	mov	r1, fp
    d6a2:	mov	r0, sl
    d6a4:	bl	10a8c <__ssrefill_r>
    d6a8:	cmp	r0, #0
    d6aa:	beq.n	d62a <__ssvfscanf_r+0x3da>
    d6ac:	b.n	d49a <__ssvfscanf_r+0x24a>
    d6ae:	add.w	r4, r4, r4, lsl #2
    d6b2:	add.w	r4, r8, r4, lsl #1
    d6b6:	subs	r4, #48	; 0x30
    d6b8:	ldrb.w	r8, [r6, #1]
    d6bc:	mov	r6, r3
    d6be:	b.n	d302 <__ssvfscanf_r+0xb2>
    d6c0:	ldrb.w	r8, [r6, #1]
    d6c4:	orr.w	r5, r5, #16
    d6c8:	mov	r6, r3
    d6ca:	b.n	d302 <__ssvfscanf_r+0xb2>
    d6cc:	add	r3, sp, #64	; 0x40
    d6ce:	mov	r1, r8
    d6d0:	mov	r0, r3
    d6d2:	movs	r2, #8
    d6d4:	str	r3, [sp, #28]
    d6d6:	bl	7f6c <memset>
    d6da:	ands.w	r9, r5, #16
    d6de:	bne.w	df96 <__ssvfscanf_r+0xd46>
    d6e2:	ldr	r2, [sp, #16]
    d6e4:	mov	r3, r2
    d6e6:	adds	r3, #4
    d6e8:	ldr.w	r8, [r2]
    d6ec:	str	r3, [sp, #16]
    d6ee:	movs	r6, #0
    d6f0:	bl	9edc <__locale_ctype_ptr>
    d6f4:	ldr.w	r3, [fp]
    d6f8:	ldrb	r3, [r3, #0]
    d6fa:	add	r0, r3
    d6fc:	ldrb	r3, [r0, #1]
    d6fe:	lsls	r0, r3, #28
    d700:	bmi.n	d708 <__ssvfscanf_r+0x4b8>
    d702:	cmp	r4, #0
    d704:	bne.w	defa <__ssvfscanf_r+0xcaa>
    d708:	cmp.w	r9, #0
    d70c:	bne.n	d718 <__ssvfscanf_r+0x4c8>
    d70e:	str.w	r9, [r8]
    d712:	ldr	r3, [sp, #20]
    d714:	adds	r3, #1
    d716:	str	r3, [sp, #20]
    d718:	ldr	r6, [sp, #8]
    d71a:	mov	r4, r6
    d71c:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d71e:	ldr	r0, [sp, #16]
    d720:	ldr	r5, [r0, #0]
    d722:	mov	r3, r0
    d724:	adds	r3, #4
    d726:	add.w	r8, r5, r4
    d72a:	str	r3, [sp, #8]
    d72c:	mov	r4, r5
    d72e:	b.n	d73e <__ssvfscanf_r+0x4ee>
    d730:	.word	0x0000bcb9
    d734:	.word	0x000106d5
    d738:	ldr.w	r2, [fp]
    d73c:	ldrb	r1, [r2, #0]
    d73e:	ldrb.w	r3, [r9, r1]
    d742:	adds	r0, r2, #1
    d744:	cbz	r3, d778 <__ssvfscanf_r+0x528>
    d746:	ldr.w	r3, [fp, #4]
    d74a:	str.w	r0, [fp]
    d74e:	subs	r3, #1
    d750:	str.w	r3, [fp, #4]
    d754:	ldrb	r3, [r2, #0]
    d756:	strb.w	r3, [r4], #1
    d75a:	cmp	r8, r4
    d75c:	beq.n	d778 <__ssvfscanf_r+0x528>
    d75e:	ldr.w	r3, [fp, #4]
    d762:	cmp	r3, #0
    d764:	bgt.n	d738 <__ssvfscanf_r+0x4e8>
    d766:	mov	r1, fp
    d768:	mov	r0, sl
    d76a:	bl	10a8c <__ssrefill_r>
    d76e:	cmp	r0, #0
    d770:	beq.n	d738 <__ssvfscanf_r+0x4e8>
    d772:	cmp	r5, r4
    d774:	beq.w	d49a <__ssvfscanf_r+0x24a>
    d778:	subs	r5, r4, r5
    d77a:	beq.w	d2ec <__ssvfscanf_r+0x9c>
    d77e:	ldr	r2, [sp, #20]
    d780:	adds	r2, #1
    d782:	movs	r3, #0
    d784:	str	r2, [sp, #20]
    d786:	ldr	r2, [sp, #8]
    d788:	str	r2, [sp, #16]
    d78a:	strb	r3, [r4, #0]
    d78c:	add	r7, r5
    d78e:	mov	r4, r6
    d790:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d792:	str	r3, [sp, #8]
    d794:	bl	9edc <__locale_ctype_ptr>
    d798:	add	r0, r8
    d79a:	ldrb	r3, [r0, #1]
    d79c:	and.w	r3, r3, #3
    d7a0:	cmp	r3, #1
    d7a2:	ldr.w	r3, [fp, #4]
    d7a6:	beq.w	d8d6 <__ssvfscanf_r+0x686>
    d7aa:	cmp	r3, #0
    d7ac:	bgt.w	d62a <__ssvfscanf_r+0x3da>
    d7b0:	b.n	d6a0 <__ssvfscanf_r+0x450>
    d7b2:	add	r3, sp, #64	; 0x40
    d7b4:	mov	r0, r3
    d7b6:	movs	r2, #8
    d7b8:	movs	r1, #0
    d7ba:	str	r3, [sp, #28]
    d7bc:	bl	7f6c <memset>
    d7c0:	ands.w	r3, r5, #16
    d7c4:	str	r3, [sp, #32]
    d7c6:	bne.n	d8c4 <__ssvfscanf_r+0x674>
    d7c8:	ldr	r2, [sp, #16]
    d7ca:	mov	r3, r2
    d7cc:	adds	r3, #4
    d7ce:	ldr.w	r9, [r2]
    d7d2:	str	r3, [sp, #16]
    d7d4:	movs	r5, #0
    d7d6:	add.w	r8, sp, #328	; 0x148
    d7da:	bl	9eb8 <__locale_mb_cur_max>
    d7de:	cmp	r0, r5
    d7e0:	beq.w	d49a <__ssvfscanf_r+0x24a>
    d7e4:	ldmia.w	fp, {r2, r3}
    d7e8:	ldrb.w	r0, [r2], #1
    d7ec:	str.w	r2, [fp]
    d7f0:	subs	r3, #1
    d7f2:	ldr	r2, [sp, #28]
    d7f4:	str	r2, [sp, #0]
    d7f6:	adds	r6, r5, #1
    d7f8:	str.w	r3, [fp, #4]
    d7fc:	mov	r1, r9
    d7fe:	strb.w	r0, [r8, r5]
    d802:	mov	r3, r6
    d804:	mov	r2, r8
    d806:	mov	r0, sl
    d808:	bl	f9dc <_mbrtowc_r>
    d80c:	adds	r1, r0, #1
    d80e:	beq.w	d49a <__ssvfscanf_r+0x24a>
    d812:	cbnz	r0, d83e <__ssvfscanf_r+0x5ee>
    d814:	ldr	r3, [sp, #32]
    d816:	cbnz	r3, d85e <__ssvfscanf_r+0x60e>
    d818:	str.w	r3, [r9]
    d81c:	add	r7, r6
    d81e:	subs	r4, #1
    d820:	add.w	r9, r9, #4
    d824:	ldr.w	r3, [fp, #4]
    d828:	cmp	r3, #0
    d82a:	mov.w	r5, #0
    d82e:	ble.n	d84c <__ssvfscanf_r+0x5fc>
    d830:	cmp	r4, #0
    d832:	bne.n	d7da <__ssvfscanf_r+0x58a>
    d834:	ldr	r3, [sp, #32]
    d836:	cmp	r3, #0
    d838:	beq.w	d712 <__ssvfscanf_r+0x4c2>
    d83c:	b.n	d718 <__ssvfscanf_r+0x4c8>
    d83e:	adds	r0, #2
    d840:	bne.n	d864 <__ssvfscanf_r+0x614>
    d842:	ldr.w	r3, [fp, #4]
    d846:	cmp	r3, #0
    d848:	mov	r5, r6
    d84a:	bgt.n	d7da <__ssvfscanf_r+0x58a>
    d84c:	mov	r1, fp
    d84e:	mov	r0, sl
    d850:	bl	10a8c <__ssrefill_r>
    d854:	cmp	r0, #0
    d856:	beq.n	d830 <__ssvfscanf_r+0x5e0>
    d858:	cmp	r5, #0
    d85a:	beq.n	d834 <__ssvfscanf_r+0x5e4>
    d85c:	b.n	d49a <__ssvfscanf_r+0x24a>
    d85e:	add	r7, r6
    d860:	subs	r4, #1
    d862:	b.n	d824 <__ssvfscanf_r+0x5d4>
    d864:	ldr	r3, [sp, #32]
    d866:	add	r7, r6
    d868:	subs	r4, #1
    d86a:	cmp	r3, #0
    d86c:	bne.n	d824 <__ssvfscanf_r+0x5d4>
    d86e:	b.n	d820 <__ssvfscanf_r+0x5d0>
    d870:	mov	r8, r5
    d872:	mov	r5, r8
    d874:	add	r7, r5
    d876:	b.n	d78e <__ssvfscanf_r+0x53e>
    d878:	cmp	r5, #0
    d87a:	beq.w	d2ec <__ssvfscanf_r+0x9c>
    d87e:	add	r7, r5
    d880:	b.n	d78e <__ssvfscanf_r+0x53e>
    d882:	cmp	r5, #0
    d884:	bne.w	d5aa <__ssvfscanf_r+0x35a>
    d888:	b.n	d49a <__ssvfscanf_r+0x24a>
    d88a:	ldr	r5, [sp, #16]
    d88c:	mov	r3, r4
    d88e:	ldr	r1, [r5, #0]
    d890:	str.w	fp, [sp]
    d894:	movs	r2, #1
    d896:	mov	r0, sl
    d898:	bl	10ac8 <_sfread_r>
    d89c:	adds	r6, r5, #4
    d89e:	cmp	r0, #0
    d8a0:	beq.w	d49a <__ssvfscanf_r+0x24a>
    d8a4:	ldr	r3, [sp, #20]
    d8a6:	str	r6, [sp, #16]
    d8a8:	ldr	r6, [sp, #8]
    d8aa:	adds	r3, #1
    d8ac:	add	r7, r0
    d8ae:	str	r3, [sp, #20]
    d8b0:	mov	r4, r6
    d8b2:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d8b4:	mov	r1, fp
    d8b6:	mov	r0, sl
    d8b8:	bl	10a8c <__ssrefill_r>
    d8bc:	cmp	r0, #0
    d8be:	beq.w	d40e <__ssvfscanf_r+0x1be>
    d8c2:	b.n	d49a <__ssvfscanf_r+0x24a>
    d8c4:	mov.w	r9, #0
    d8c8:	b.n	d7d4 <__ssvfscanf_r+0x584>
    d8ca:	ldrb.w	r8, [r6, #2]
    d8ce:	orr.w	r5, r5, #2
    d8d2:	adds	r6, #2
    d8d4:	b.n	d302 <__ssvfscanf_r+0xb2>
    d8d6:	cmp	r3, #0
    d8d8:	orr.w	r5, r5, #1
    d8dc:	bgt.w	d62a <__ssvfscanf_r+0x3da>
    d8e0:	b.n	d6a0 <__ssvfscanf_r+0x450>
    d8e2:	lsls	r4, r5, #31
    d8e4:	bmi.n	d900 <__ssvfscanf_r+0x6b0>
    d8e6:	lsls	r0, r5, #30
    d8e8:	bpl.n	d900 <__ssvfscanf_r+0x6b0>
    d8ea:	ldr	r2, [sp, #16]
    d8ec:	ldr	r6, [sp, #8]
    d8ee:	ldr	r3, [r2, #0]
    d8f0:	mov	r0, r7
    d8f2:	asrs	r1, r7, #31
    d8f4:	adds	r2, #4
    d8f6:	str	r2, [sp, #16]
    d8f8:	strd	r0, r1, [r3]
    d8fc:	mov	r4, r6
    d8fe:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d900:	ldr	r2, [sp, #16]
    d902:	ldr	r6, [sp, #8]
    d904:	ldr	r3, [r2, #0]
    d906:	str	r7, [r3, #0]
    d908:	mov	r3, r2
    d90a:	adds	r3, #4
    d90c:	str	r3, [sp, #16]
    d90e:	mov	r4, r6
    d910:	b.n	d2e0 <__ssvfscanf_r+0x90>
    d912:	mov	r1, fp
    d914:	mov	r0, sl
    d916:	bl	10a8c <__ssrefill_r>
    d91a:	cmp	r0, #0
    d91c:	bne.w	d49a <__ssvfscanf_r+0x24a>
    d920:	ldr	r3, [pc, #504]	; (db1c <__ssvfscanf_r+0x8cc>)
    d922:	str	r0, [sp, #12]
    d924:	str	r3, [sp, #24]
    d926:	movs	r6, #3
    d928:	b.n	d45c <__ssvfscanf_r+0x20c>
    d92a:	mov	r1, fp
    d92c:	mov	r0, sl
    d92e:	bl	10a8c <__ssrefill_r>
    d932:	cmp	r0, #0
    d934:	beq.w	d5ca <__ssvfscanf_r+0x37a>
    d938:	b.n	d49a <__ssvfscanf_r+0x24a>
    d93a:	mov	r1, fp
    d93c:	mov	r0, sl
    d93e:	bl	10a8c <__ssrefill_r>
    d942:	cmp	r0, #0
    d944:	beq.w	d560 <__ssvfscanf_r+0x310>
    d948:	b.n	d49a <__ssvfscanf_r+0x24a>
    d94a:	mov	r1, fp
    d94c:	mov	r0, sl
    d94e:	bl	10a8c <__ssrefill_r>
    d952:	cmp	r0, #0
    d954:	beq.w	d68e <__ssvfscanf_r+0x43e>
    d958:	b.n	d49a <__ssvfscanf_r+0x24a>
    d95a:	mov	r1, fp
    d95c:	mov	r0, sl
    d95e:	bl	10a8c <__ssrefill_r>
    d962:	cmp	r0, #0
    d964:	beq.w	d4f2 <__ssvfscanf_r+0x2a2>
    d968:	b.n	d49a <__ssvfscanf_r+0x24a>
    d96a:	mov	r1, fp
    d96c:	mov	r0, sl
    d96e:	bl	10a8c <__ssrefill_r>
    d972:	cmp	r0, #0
    d974:	beq.w	d4da <__ssvfscanf_r+0x28a>
    d978:	b.n	d49a <__ssvfscanf_r+0x24a>
    d97a:	cmp	r6, #3
    d97c:	beq.w	dcb0 <__ssvfscanf_r+0xa60>
    d980:	cmp	r6, #4
    d982:	bne.w	ddf2 <__ssvfscanf_r+0xba2>
    d986:	mov	r0, sl
    d988:	bl	f9c0 <_localeconv_r>
    d98c:	subs	r3, r4, #1
    d98e:	ldr	r2, [r0, #0]
    d990:	str	r2, [sp, #40]	; 0x28
    d992:	cmp.w	r3, #348	; 0x15c
    d996:	bls.w	de5a <__ssvfscanf_r+0xc0a>
    d99a:	mvn.w	r1, #348	; 0x15c
    d99e:	adds	r3, r4, r1
    d9a0:	str	r3, [sp, #48]	; 0x30
    d9a2:	movw	r4, #349	; 0x15d
    d9a6:	add	r3, sp, #328	; 0x148
    d9a8:	mov.w	r8, #0
    d9ac:	mov	r2, r3
    d9ae:	str	r3, [sp, #32]
    d9b0:	orr.w	r5, r5, #1920	; 0x780
    d9b4:	mov	r3, r8
    d9b6:	str.w	r8, [sp, #52]	; 0x34
    d9ba:	str.w	r8, [sp, #44]	; 0x2c
    d9be:	mov	r6, r8
    d9c0:	str.w	r8, [sp, #36]	; 0x24
    d9c4:	mov	r9, r2
    d9c6:	ldr.w	r0, [fp]
    d9ca:	ldrb	r1, [r0, #0]
    d9cc:	sub.w	lr, r1, #43	; 0x2b
    d9d0:	cmp.w	lr, #78	; 0x4e
    d9d4:	bhi.w	dc60 <__ssvfscanf_r+0xa10>
    d9d8:	tbh	[pc, lr, lsl #1]
    d9dc:	.word	0x0142007a
    d9e0:	.word	0x0142007a
    d9e4:	.word	0x006e0142
    d9e8:	.word	0x004f004f
    d9ec:	.word	0x004f004f
    d9f0:	.word	0x004f004f
    d9f4:	.word	0x004f004f
    d9f8:	.word	0x0142004f
    d9fc:	.word	0x01420142
    da00:	.word	0x01420142
    da04:	.word	0x01420142
    da08:	.word	0x0142013d
    da0c:	.word	0x01420142
    da10:	.word	0x011e0125
    da14:	.word	0x01420142
    da18:	.word	0x014200a2
    da1c:	.word	0x01420142
    da20:	.word	0x008b0142
    da24:	.word	0x01420142
    da28:	.word	0x01420142
    da2c:	.word	0x00850142
    da30:	.word	0x01420142
    da34:	.word	0x01420142
    da38:	.word	0x0142007f
    da3c:	.word	0x01420142
    da40:	.word	0x01420142
    da44:	.word	0x01420142
    da48:	.word	0x0142013d
    da4c:	.word	0x01420142
    da50:	.word	0x011e0125
    da54:	.word	0x01420142
    da58:	.word	0x014200a2
    da5c:	.word	0x01420142
    da60:	.word	0x008b0142
    da64:	.word	0x01420142
    da68:	.word	0x01420142
    da6c:	.word	0x00850142
    da70:	.word	0x01420142
    da74:	.word	0x01420142
    da78:	.short	0x007f
    da7a:	cmn.w	r3, r8
    da7e:	bne.n	daae <__ssvfscanf_r+0x85e>
    da80:	bic.w	r5, r5, #384	; 0x180
    da84:	strb.w	r1, [r9]
    da88:	add.w	r9, r9, #1
    da8c:	ldr.w	r1, [fp, #4]
    da90:	subs	r1, #1
    da92:	cmp	r1, #0
    da94:	add.w	r4, r4, #4294967295
    da98:	add.w	r7, r7, #1
    da9c:	str.w	r1, [fp, #4]
    daa0:	ble.w	dc7a <__ssvfscanf_r+0xa2a>
    daa4:	adds	r0, #1
    daa6:	str.w	r0, [fp]
    daaa:	cmp	r4, #0
    daac:	bne.n	d9c6 <__ssvfscanf_r+0x776>
    daae:	cmp	r6, #0
    dab0:	beq.n	db38 <__ssvfscanf_r+0x8e8>
    dab2:	bic.w	r5, r5, #256	; 0x100
    dab6:	b.n	db38 <__ssvfscanf_r+0x8e8>
    dab8:	lsls	r2, r5, #23
    daba:	bpl.n	da7a <__ssvfscanf_r+0x82a>
    dabc:	ldr	r2, [sp, #48]	; 0x30
    dabe:	bic.w	r5, r5, #128	; 0x80
    dac2:	adds	r6, #1
    dac4:	cmp	r2, #0
    dac6:	beq.n	da8c <__ssvfscanf_r+0x83c>
    dac8:	subs	r2, #1
    daca:	str	r2, [sp, #48]	; 0x30
    dacc:	adds	r4, #1
    dace:	b.n	da8c <__ssvfscanf_r+0x83c>
    dad0:	lsls	r2, r5, #24
    dad2:	bpl.n	daae <__ssvfscanf_r+0x85e>
    dad4:	bic.w	r5, r5, #128	; 0x80
    dad8:	b.n	da84 <__ssvfscanf_r+0x834>
    dada:	cmp.w	r8, #7
    dade:	bne.n	daae <__ssvfscanf_r+0x85e>
    dae0:	mov.w	r8, #8
    dae4:	b.n	da84 <__ssvfscanf_r+0x834>
    dae6:	cmp.w	r8, #6
    daea:	bne.n	daae <__ssvfscanf_r+0x85e>
    daec:	mov.w	r8, #7
    daf0:	b.n	da84 <__ssvfscanf_r+0x834>
    daf2:	cmp	r3, #0
    daf4:	bne.w	dca6 <__ssvfscanf_r+0xa56>
    daf8:	cbnz	r6, db06 <__ssvfscanf_r+0x8b6>
    dafa:	and.w	lr, r5, #1792	; 0x700
    dafe:	cmp.w	lr, #1792	; 0x700
    db02:	beq.w	df7e <__ssvfscanf_r+0xd2e>
    db06:	cmp.w	r8, #1
    db0a:	beq.n	db12 <__ssvfscanf_r+0x8c2>
    db0c:	cmp.w	r8, #4
    db10:	bne.n	daae <__ssvfscanf_r+0x85e>
    db12:	add.w	r8, r8, #1
    db16:	uxtb.w	r8, r8
    db1a:	b.n	da84 <__ssvfscanf_r+0x834>
    db1c:	.word	0x0000bcb9
    db20:	cmp.w	r8, #0
    db24:	bne.w	dc94 <__ssvfscanf_r+0xa44>
    db28:	cmp	r6, #0
    db2a:	bne.n	dab2 <__ssvfscanf_r+0x862>
    db2c:	and.w	lr, r5, #1792	; 0x700
    db30:	cmp.w	lr, #1792	; 0x700
    db34:	beq.w	df9e <__ssvfscanf_r+0xd4e>
    db38:	subs	r3, #1
    db3a:	cmp	r3, #1
    db3c:	bls.w	e034 <__ssvfscanf_r+0xde4>
    db40:	add.w	r3, r8, #4294967295
    db44:	cmp	r3, #6
    db46:	bhi.n	db76 <__ssvfscanf_r+0x926>
    db48:	cmp.w	r8, #2
    db4c:	bls.w	e084 <__ssvfscanf_r+0xe34>
    db50:	cmp.w	r8, #3
    db54:	beq.n	db76 <__ssvfscanf_r+0x926>
    db56:	sub.w	r4, r8, #4
    db5a:	uxtb	r4, r4
    db5c:	mvn.w	r8, r4
    db60:	add	r8, r9
    db62:	ldrb.w	r1, [r9, #-1]!
    db66:	mov	r2, fp
    db68:	mov	r0, sl
    db6a:	bl	10a08 <_sungetc_r>
    db6e:	cmp	r8, r9
    db70:	bne.n	db62 <__ssvfscanf_r+0x912>
    db72:	subs	r7, #1
    db74:	subs	r7, r7, r4
    db76:	lsls	r1, r5, #23
    db78:	bpl.n	dbb4 <__ssvfscanf_r+0x964>
    db7a:	lsls	r2, r5, #21
    db7c:	bmi.w	e058 <__ssvfscanf_r+0xe08>
    db80:	ldrb.w	r1, [r9, #-1]
    db84:	cmp	r1, #101	; 0x65
    db86:	add.w	r4, r9, #4294967295
    db8a:	add.w	r8, r7, #4294967295
    db8e:	beq.n	dba8 <__ssvfscanf_r+0x958>
    db90:	cmp	r1, #69	; 0x45
    db92:	beq.n	dba8 <__ssvfscanf_r+0x958>
    db94:	mov	r2, fp
    db96:	mov	r0, sl
    db98:	bl	10a08 <_sungetc_r>
    db9c:	ldrb.w	r1, [r9, #-2]
    dba0:	sub.w	r8, r7, #2
    dba4:	sub.w	r4, r9, #2
    dba8:	mov	r2, fp
    dbaa:	mov	r0, sl
    dbac:	bl	10a08 <_sungetc_r>
    dbb0:	mov	r7, r8
    dbb2:	mov	r9, r4
    dbb4:	ands.w	r2, r5, #16
    dbb8:	bne.w	d718 <__ssvfscanf_r+0x4c8>
    dbbc:	and.w	r3, r5, #1536	; 0x600
    dbc0:	cmp.w	r3, #1024	; 0x400
    dbc4:	strb.w	r2, [r9]
    dbc8:	beq.w	dfa8 <__ssvfscanf_r+0xd58>
    dbcc:	ldr	r3, [sp, #44]	; 0x2c
    dbce:	cmp	r3, #0
    dbd0:	bne.w	dfca <__ssvfscanf_r+0xd7a>
    dbd4:	ldr	r1, [sp, #32]
    dbd6:	movs	r2, #0
    dbd8:	mov	r0, sl
    dbda:	bl	bb60 <_strtod_r>
    dbde:	lsls	r3, r5, #31
    dbe0:	bmi.w	de60 <__ssvfscanf_r+0xc10>
    dbe4:	ands.w	r0, r5, #2
    dbe8:	bne.w	de60 <__ssvfscanf_r+0xc10>
    dbec:	vcmp.f64	d0, d0
    dbf0:	ldr	r3, [sp, #16]
    dbf2:	vmrs	APSR_nzcv, fpscr
    dbf6:	add.w	r5, r3, #4
    dbfa:	ldr	r4, [r3, #0]
    dbfc:	bvs.w	e0b8 <__ssvfscanf_r+0xe68>
    dc00:	vcvt.f32.f64	s0, d0
    dc04:	str	r5, [sp, #16]
    dc06:	vstr	s0, [r4]
    dc0a:	ldr	r3, [sp, #20]
    dc0c:	ldr	r6, [sp, #8]
    dc0e:	adds	r3, #1
    dc10:	str	r3, [sp, #20]
    dc12:	mov	r4, r6
    dc14:	b.w	d2e0 <__ssvfscanf_r+0x90>
    dc18:	cmp.w	r8, #2
    dc1c:	bne.w	daae <__ssvfscanf_r+0x85e>
    dc20:	mov.w	r8, #3
    dc24:	b.n	da84 <__ssvfscanf_r+0x834>
    dc26:	and.w	lr, r5, #1280	; 0x500
    dc2a:	cmp.w	lr, #1024	; 0x400
    dc2e:	beq.n	dc3c <__ssvfscanf_r+0x9ec>
    dc30:	lsls	r2, r5, #21
    dc32:	bpl.w	daae <__ssvfscanf_r+0x85e>
    dc36:	cmp	r6, #0
    dc38:	beq.w	db38 <__ssvfscanf_r+0x8e8>
    dc3c:	lsls	r2, r5, #22
    dc3e:	bmi.n	dc4a <__ssvfscanf_r+0x9fa>
    dc40:	ldr	r2, [sp, #36]	; 0x24
    dc42:	str.w	r9, [sp, #52]	; 0x34
    dc46:	subs	r2, r6, r2
    dc48:	str	r2, [sp, #44]	; 0x2c
    dc4a:	bic.w	r5, r5, #1920	; 0x780
    dc4e:	orr.w	r5, r5, #384	; 0x180
    dc52:	movs	r6, #0
    dc54:	b.n	da84 <__ssvfscanf_r+0x834>
    dc56:	cmp	r3, #1
    dc58:	bne.w	daae <__ssvfscanf_r+0x85e>
    dc5c:	movs	r3, #2
    dc5e:	b.n	da84 <__ssvfscanf_r+0x834>
    dc60:	ldr	r2, [sp, #40]	; 0x28
    dc62:	ldrb.w	lr, [r2]
    dc66:	cmp	lr, r1
    dc68:	bne.w	daae <__ssvfscanf_r+0x85e>
    dc6c:	lsls	r2, r5, #22
    dc6e:	bpl.w	daae <__ssvfscanf_r+0x85e>
    dc72:	bic.w	r5, r5, #640	; 0x280
    dc76:	str	r6, [sp, #36]	; 0x24
    dc78:	b.n	da84 <__ssvfscanf_r+0x834>
    dc7a:	mov	r1, fp
    dc7c:	mov	r0, sl
    dc7e:	str	r3, [sp, #28]
    dc80:	bl	10a8c <__ssrefill_r>
    dc84:	ldr	r3, [sp, #28]
    dc86:	cmp	r0, #0
    dc88:	bne.w	daae <__ssvfscanf_r+0x85e>
    dc8c:	cmp	r4, #0
    dc8e:	bne.w	d9c6 <__ssvfscanf_r+0x776>
    dc92:	b.n	daae <__ssvfscanf_r+0x85e>
    dc94:	cmp.w	r8, #3
    dc98:	beq.w	db12 <__ssvfscanf_r+0x8c2>
    dc9c:	cmp.w	r8, #5
    dca0:	beq.w	db12 <__ssvfscanf_r+0x8c2>
    dca4:	b.n	daae <__ssvfscanf_r+0x85e>
    dca6:	cmp	r3, #2
    dca8:	bne.w	db06 <__ssvfscanf_r+0x8b6>
    dcac:	movs	r3, #3
    dcae:	b.n	da84 <__ssvfscanf_r+0x834>
    dcb0:	subs	r3, r4, #1
    dcb2:	cmp.w	r3, #348	; 0x15c
    dcb6:	itte	hi
    dcb8:	mvnhi.w	r0, #348	; 0x15c
    dcbc:	addhi.w	r9, r4, r0
    dcc0:	movls	r9, r8
    dcc2:	add	r3, sp, #328	; 0x148
    dcc4:	mov	r0, r2
    dcc6:	mov	r2, r7
    dcc8:	mov	r7, r9
    dcca:	ldr.w	r9, [sp, #12]
    dcce:	str	r3, [sp, #32]
    dcd0:	it	hi
    dcd2:	movwhi	r4, #349	; 0x15d
    dcd6:	orr.w	r5, r5, #3456	; 0xd80
    dcda:	mov	r6, r3
    dcdc:	mov.w	r8, #0
    dce0:	sub.w	r3, r1, #43	; 0x2b
    dce4:	cmp	r3, #77	; 0x4d
    dce6:	bhi.n	dd8c <__ssvfscanf_r+0xb3c>
    dce8:	tbb	[pc, r3]
    dcec:	.word	0x507e507e
    dcf0:	.word	0x69696f50
    dcf4:	.word	0x69696969
    dcf8:	.word	0x504a4a69
    dcfc:	.word	0x50505050
    dd00:	.word	0x44445050
    dd04:	.word	0x44444444
    dd08:	.word	0x50505050
    dd0c:	.word	0x50505050
    dd10:	.word	0x50505050
    dd14:	.word	0x50505050
    dd18:	.word	0x50502750
    dd1c:	.word	0x50505050
    dd20:	.word	0x44445050
    dd24:	.word	0x44444444
    dd28:	.word	0x50505050
    dd2c:	.word	0x50505050
    dd30:	.word	0x50505050
    dd34:	.word	0x50505050
    dd38:	.short	0x2750
    dd3a:	and.w	r3, r5, #1536	; 0x600
    dd3e:	cmp.w	r3, #512	; 0x200
    dd42:	bne.n	dd8c <__ssvfscanf_r+0xb3c>
    dd44:	bic.w	r5, r5, #512	; 0x200
    dd48:	orr.w	r5, r5, #1280	; 0x500
    dd4c:	mov.w	r9, #16
    dd50:	strb	r1, [r6, #0]
    dd52:	adds	r6, #1
    dd54:	ldr.w	r3, [fp, #4]
    dd58:	subs	r3, #1
    dd5a:	cmp	r3, #0
    dd5c:	str.w	r3, [fp, #4]
    dd60:	ble.n	de48 <__ssvfscanf_r+0xbf8>
    dd62:	adds	r0, #1
    dd64:	str.w	r0, [fp]
    dd68:	subs	r4, #1
    dd6a:	beq.n	dd8c <__ssvfscanf_r+0xb3c>
    dd6c:	ldr.w	r0, [fp]
    dd70:	ldrb	r1, [r0, #0]
    dd72:	b.n	dce0 <__ssvfscanf_r+0xa90>
    dd74:	cmp.w	r9, #10
    dd78:	ble.n	dd8c <__ssvfscanf_r+0xb3c>
    dd7a:	bic.w	r5, r5, #2944	; 0xb80
    dd7e:	b.n	dd50 <__ssvfscanf_r+0xb00>
    dd80:	ldr	r3, [pc, #756]	; (e078 <__ssvfscanf_r+0xe28>)
    dd82:	ldrsh.w	r9, [r3, r9, lsl #1]
    dd86:	cmp.w	r9, #8
    dd8a:	bgt.n	dd7a <__ssvfscanf_r+0xb2a>
    dd8c:	lsls	r1, r5, #23
    dd8e:	mov	r7, r2
    dd90:	str.w	r9, [sp, #12]
    dd94:	bpl.n	dda6 <__ssvfscanf_r+0xb56>
    dd96:	ldr	r3, [sp, #32]
    dd98:	cmp	r6, r3
    dd9a:	bhi.w	df86 <__ssvfscanf_r+0xd36>
    dd9e:	ldr	r3, [sp, #32]
    dda0:	cmp	r6, r3
    dda2:	beq.w	d2ec <__ssvfscanf_r+0x9c>
    dda6:	ands.w	r4, r5, #16
    ddaa:	beq.w	ded2 <__ssvfscanf_r+0xc82>
    ddae:	ldr	r3, [sp, #32]
    ddb0:	subs	r6, r6, r3
    ddb2:	add	r6, r8
    ddb4:	add	r7, r6
    ddb6:	ldr	r6, [sp, #8]
    ddb8:	mov	r4, r6
    ddba:	b.w	d2e0 <__ssvfscanf_r+0x90>
    ddbe:	ldr	r3, [pc, #696]	; (e078 <__ssvfscanf_r+0xe28>)
    ddc0:	bic.w	r5, r5, #2944	; 0xb80
    ddc4:	ldrsh.w	r9, [r3, r9, lsl #1]
    ddc8:	b.n	dd50 <__ssvfscanf_r+0xb00>
    ddca:	lsls	r3, r5, #20
    ddcc:	bpl.n	dd50 <__ssvfscanf_r+0xb00>
    ddce:	cmp.w	r9, #0
    ddd2:	bne.n	dddc <__ssvfscanf_r+0xb8c>
    ddd4:	orr.w	r5, r5, #512	; 0x200
    ddd8:	mov.w	r9, #8
    dddc:	lsls	r3, r5, #21
    ddde:	bpl.w	df62 <__ssvfscanf_r+0xd12>
    dde2:	bic.w	r5, r5, #1408	; 0x580
    dde6:	b.n	dd50 <__ssvfscanf_r+0xb00>
    dde8:	lsls	r3, r5, #24
    ddea:	bpl.n	dd8c <__ssvfscanf_r+0xb3c>
    ddec:	bic.w	r5, r5, #128	; 0x80
    ddf0:	b.n	dd50 <__ssvfscanf_r+0xb00>
    ddf2:	cmp	r4, #0
    ddf4:	it	eq
    ddf6:	moveq.w	r4, #4294967295
    ddfa:	ands.w	r3, r5, #1
    ddfe:	bne.w	d6cc <__ssvfscanf_r+0x47c>
    de02:	lsls	r1, r5, #27
    de04:	bpl.n	de6e <__ssvfscanf_r+0xc1e>
    de06:	mov	r5, r3
    de08:	bl	9edc <__locale_ctype_ptr>
    de0c:	ldr.w	r3, [fp]
    de10:	ldrb	r2, [r3, #0]
    de12:	add	r0, r2
    de14:	adds	r3, #1
    de16:	ldrb	r2, [r0, #1]
    de18:	lsls	r2, r2, #28
    de1a:	bmi.w	d5aa <__ssvfscanf_r+0x35a>
    de1e:	ldr.w	r2, [fp, #4]
    de22:	str.w	r3, [fp]
    de26:	adds	r5, #1
    de28:	subs	r3, r2, #1
    de2a:	cmp	r4, r5
    de2c:	str.w	r3, [fp, #4]
    de30:	beq.w	d5aa <__ssvfscanf_r+0x35a>
    de34:	cmp	r3, #0
    de36:	bgt.n	de08 <__ssvfscanf_r+0xbb8>
    de38:	mov	r1, fp
    de3a:	mov	r0, sl
    de3c:	bl	10a8c <__ssrefill_r>
    de40:	cmp	r0, #0
    de42:	beq.n	de08 <__ssvfscanf_r+0xbb8>
    de44:	b.w	d5aa <__ssvfscanf_r+0x35a>
    de48:	mov	r1, fp
    de4a:	mov	r0, sl
    de4c:	str	r2, [sp, #12]
    de4e:	bl	10a8c <__ssrefill_r>
    de52:	ldr	r2, [sp, #12]
    de54:	cmp	r0, #0
    de56:	beq.n	dd68 <__ssvfscanf_r+0xb18>
    de58:	b.n	dd8c <__ssvfscanf_r+0xb3c>
    de5a:	str.w	r8, [sp, #48]	; 0x30
    de5e:	b.n	d9a6 <__ssvfscanf_r+0x756>
    de60:	ldr	r2, [sp, #16]
    de62:	ldr	r3, [r2, #0]
    de64:	adds	r2, #4
    de66:	str	r2, [sp, #16]
    de68:	vstr	d0, [r3]
    de6c:	b.n	dc0a <__ssvfscanf_r+0x9ba>
    de6e:	ldr	r2, [sp, #16]
    de70:	ldr	r5, [r2, #0]
    de72:	adds	r6, r2, #4
    de74:	add	r4, r5
    de76:	mov	r8, r5
    de78:	bl	9edc <__locale_ctype_ptr>
    de7c:	ldr.w	r2, [fp]
    de80:	ldrb	r3, [r2, #0]
    de82:	add	r0, r3
    de84:	adds	r1, r2, #1
    de86:	ldrb	r3, [r0, #1]
    de88:	lsls	r3, r3, #28
    de8a:	bmi.n	deb8 <__ssvfscanf_r+0xc68>
    de8c:	ldr.w	r3, [fp, #4]
    de90:	str.w	r1, [fp]
    de94:	subs	r3, #1
    de96:	str.w	r3, [fp, #4]
    de9a:	ldrb	r3, [r2, #0]
    de9c:	strb.w	r3, [r8], #1
    dea0:	cmp	r4, r8
    dea2:	beq.n	deba <__ssvfscanf_r+0xc6a>
    dea4:	ldr.w	r3, [fp, #4]
    dea8:	cmp	r3, #0
    deaa:	bgt.n	de78 <__ssvfscanf_r+0xc28>
    deac:	mov	r1, fp
    deae:	mov	r0, sl
    deb0:	bl	10a8c <__ssrefill_r>
    deb4:	cmp	r0, #0
    deb6:	beq.n	de78 <__ssvfscanf_r+0xc28>
    deb8:	mov	r4, r8
    deba:	ldr	r2, [sp, #20]
    debc:	str	r6, [sp, #16]
    debe:	ldr	r6, [sp, #8]
    dec0:	subs	r5, r4, r5
    dec2:	movs	r3, #0
    dec4:	adds	r2, #1
    dec6:	strb	r3, [r4, #0]
    dec8:	add	r7, r5
    deca:	str	r2, [sp, #20]
    decc:	mov	r4, r6
    dece:	b.w	d2e0 <__ssvfscanf_r+0x90>
    ded2:	mov	r2, r4
    ded4:	strb	r4, [r6, #0]
    ded6:	ldr	r3, [sp, #12]
    ded8:	ldr	r1, [sp, #32]
    deda:	ldr	r4, [sp, #24]
    dedc:	mov	r0, sl
    dede:	blx	r4
    dee0:	lsls	r2, r5, #26
    dee2:	bmi.n	df72 <__ssvfscanf_r+0xd22>
    dee4:	lsls	r3, r5, #29
    dee6:	bpl.n	dfe0 <__ssvfscanf_r+0xd90>
    dee8:	ldr	r2, [sp, #16]
    deea:	ldr	r3, [r2, #0]
    deec:	adds	r2, #4
    deee:	str	r2, [sp, #16]
    def0:	strh	r0, [r3, #0]
    def2:	ldr	r3, [sp, #20]
    def4:	adds	r3, #1
    def6:	str	r3, [sp, #20]
    def8:	b.n	ddae <__ssvfscanf_r+0xb5e>
    defa:	bl	9eb8 <__locale_mb_cur_max>
    defe:	cmp	r6, r0
    df00:	beq.w	d49a <__ssvfscanf_r+0x24a>
    df04:	ldmia.w	fp, {r2, r3}
    df08:	ldrb.w	r0, [r2], #1
    df0c:	str.w	r2, [fp]
    df10:	ldr	r2, [sp, #28]
    df12:	str	r2, [sp, #0]
    df14:	add	r2, sp, #328	; 0x148
    df16:	adds	r5, r6, #1
    df18:	subs	r3, #1
    df1a:	strb	r0, [r2, r6]
    df1c:	str.w	r3, [fp, #4]
    df20:	mov	r1, r8
    df22:	mov	r3, r5
    df24:	mov	r0, sl
    df26:	bl	f9dc <_mbrtowc_r>
    df2a:	adds	r6, r0, #1
    df2c:	beq.w	d49a <__ssvfscanf_r+0x24a>
    df30:	cmp	r0, #0
    df32:	bne.n	e00c <__ssvfscanf_r+0xdbc>
    df34:	str.w	r0, [r8]
    df38:	bl	f9a0 <iswspace>
    df3c:	cmp	r0, #0
    df3e:	beq.w	e0a2 <__ssvfscanf_r+0xe52>
    df42:	cmp	r5, #0
    df44:	beq.w	d708 <__ssvfscanf_r+0x4b8>
    df48:	add	r3, sp, #328	; 0x148
    df4a:	adds	r4, r3, r5
    df4c:	subs	r5, #1
    df4e:	mov	r2, fp
    df50:	ldrb.w	r1, [r4, #-1]!
    df54:	mov	r0, sl
    df56:	bl	10a08 <_sungetc_r>
    df5a:	cmp	r5, #0
    df5c:	bne.n	df4c <__ssvfscanf_r+0xcfc>
    df5e:	b.w	d708 <__ssvfscanf_r+0x4b8>
    df62:	bic.w	r5, r5, #896	; 0x380
    df66:	cbz	r7, df6c <__ssvfscanf_r+0xd1c>
    df68:	subs	r7, #1
    df6a:	adds	r4, #1
    df6c:	add.w	r8, r8, #1
    df70:	b.n	dd54 <__ssvfscanf_r+0xb04>
    df72:	ldr	r2, [sp, #16]
    df74:	ldr	r3, [r2, #0]
    df76:	adds	r2, #4
    df78:	str	r2, [sp, #16]
    df7a:	str	r0, [r3, #0]
    df7c:	b.n	def2 <__ssvfscanf_r+0xca2>
    df7e:	bic.w	r5, r5, #1920	; 0x780
    df82:	movs	r3, #1
    df84:	b.n	da84 <__ssvfscanf_r+0x834>
    df86:	ldrb.w	r1, [r6, #-1]
    df8a:	mov	r2, fp
    df8c:	mov	r0, sl
    df8e:	bl	10a08 <_sungetc_r>
    df92:	subs	r6, #1
    df94:	b.n	dd9e <__ssvfscanf_r+0xb4e>
    df96:	add.w	r8, sp, #60	; 0x3c
    df9a:	b.w	d6ee <__ssvfscanf_r+0x49e>
    df9e:	bic.w	r5, r5, #1920	; 0x780
    dfa2:	mov.w	r8, #1
    dfa6:	b.n	da84 <__ssvfscanf_r+0x834>
    dfa8:	ldr	r3, [sp, #36]	; 0x24
    dfaa:	subs	r6, r6, r3
    dfac:	negs	r2, r6
    dfae:	cmp	r6, #0
    dfb0:	beq.w	dbd4 <__ssvfscanf_r+0x984>
    dfb4:	addw	r3, sp, #667	; 0x29b
    dfb8:	cmp	r9, r3
    dfba:	it	cs
    dfbc:	addwcs	r9, sp, #666	; 0x29a
    dfc0:	mov	r0, r9
    dfc2:	ldr	r1, [pc, #184]	; (e07c <__ssvfscanf_r+0xe2c>)
    dfc4:	bl	aa88 <sprintf>
    dfc8:	b.n	dbd4 <__ssvfscanf_r+0x984>
    dfca:	ldr	r4, [sp, #52]	; 0x34
    dfcc:	mov	r1, r4
    dfce:	movs	r3, #10
    dfd0:	adds	r1, #1
    dfd2:	mov	r0, sl
    dfd4:	bl	bcb8 <_strtol_r>
    dfd8:	ldr	r3, [sp, #44]	; 0x2c
    dfda:	mov	r9, r4
    dfdc:	subs	r2, r0, r3
    dfde:	b.n	dfb4 <__ssvfscanf_r+0xd64>
    dfe0:	ands.w	r2, r5, #1
    dfe4:	bne.n	df72 <__ssvfscanf_r+0xd22>
    dfe6:	lsls	r4, r5, #30
    dfe8:	bpl.n	df72 <__ssvfscanf_r+0xd22>
    dfea:	ldr	r3, [sp, #24]
    dfec:	mov	r1, r3
    dfee:	ldr	r3, [pc, #144]	; (e080 <__ssvfscanf_r+0xe30>)
    dff0:	cmp	r1, r3
    dff2:	mov	r0, sl
    dff4:	ldr	r3, [sp, #12]
    dff6:	ldr	r1, [sp, #32]
    dff8:	beq.n	e0c4 <__ssvfscanf_r+0xe74>
    dffa:	bl	10548 <_strtoll_r>
    dffe:	ldr	r2, [sp, #16]
    e000:	ldr	r3, [r2, #0]
    e002:	adds	r2, #4
    e004:	str	r2, [sp, #16]
    e006:	strd	r0, r1, [r3]
    e00a:	b.n	def2 <__ssvfscanf_r+0xca2>
    e00c:	adds	r0, #2
    e00e:	bne.n	e052 <__ssvfscanf_r+0xe02>
    e010:	mov	r6, r5
    e012:	ldr.w	r3, [fp, #4]
    e016:	cmp	r3, #0
    e018:	bgt.w	d6f0 <__ssvfscanf_r+0x4a0>
    e01c:	mov	r1, fp
    e01e:	mov	r0, sl
    e020:	bl	10a8c <__ssrefill_r>
    e024:	cmp	r0, #0
    e026:	beq.w	d6f0 <__ssvfscanf_r+0x4a0>
    e02a:	cmp	r6, #0
    e02c:	bne.w	d49a <__ssvfscanf_r+0x24a>
    e030:	b.w	d708 <__ssvfscanf_r+0x4b8>
    e034:	ldr	r3, [sp, #32]
    e036:	cmp	r9, r3
    e038:	bls.w	d2ec <__ssvfscanf_r+0x9c>
    e03c:	ldrb.w	r1, [r9, #-1]!
    e040:	mov	r2, fp
    e042:	mov	r0, sl
    e044:	bl	10a08 <_sungetc_r>
    e048:	ldr	r3, [sp, #32]
    e04a:	cmp	r9, r3
    e04c:	bne.n	e03c <__ssvfscanf_r+0xdec>
    e04e:	b.w	d2ec <__ssvfscanf_r+0x9c>
    e052:	ldr.w	r0, [r8]
    e056:	b.n	df38 <__ssvfscanf_r+0xce8>
    e058:	ldr	r3, [sp, #32]
    e05a:	cmp	r9, r3
    e05c:	bls.w	d2ec <__ssvfscanf_r+0x9c>
    e060:	ldrb.w	r1, [r9, #-1]!
    e064:	mov	r2, fp
    e066:	mov	r0, sl
    e068:	bl	10a08 <_sungetc_r>
    e06c:	ldr	r3, [sp, #32]
    e06e:	cmp	r9, r3
    e070:	bne.n	e060 <__ssvfscanf_r+0xe10>
    e072:	b.w	d2ec <__ssvfscanf_r+0x9c>
    e076:	nop
    e078:	.word	0x20000870
    e07c:	.word	0x20000cac
    e080:	.word	0x000106d5
    e084:	ldr	r3, [sp, #32]
    e086:	cmp	r9, r3
    e088:	bls.w	d2ec <__ssvfscanf_r+0x9c>
    e08c:	ldrb.w	r1, [r9, #-1]!
    e090:	mov	r2, fp
    e092:	mov	r0, sl
    e094:	bl	10a08 <_sungetc_r>
    e098:	ldr	r3, [sp, #32]
    e09a:	cmp	r9, r3
    e09c:	bne.n	e08c <__ssvfscanf_r+0xe3c>
    e09e:	b.w	d2ec <__ssvfscanf_r+0x9c>
    e0a2:	add	r7, r5
    e0a4:	subs	r4, #1
    e0a6:	cmp.w	r9, #0
    e0aa:	bne.n	e0b4 <__ssvfscanf_r+0xe64>
    e0ac:	add.w	r8, r8, #4
    e0b0:	mov	r6, r9
    e0b2:	b.n	e012 <__ssvfscanf_r+0xdc2>
    e0b4:	mov	r6, r0
    e0b6:	b.n	e012 <__ssvfscanf_r+0xdc2>
    e0b8:	bl	10390 <nanf>
    e0bc:	str	r5, [sp, #16]
    e0be:	vstr	s0, [r4]
    e0c2:	b.n	dc0a <__ssvfscanf_r+0x9ba>
    e0c4:	bl	108e4 <_strtoull_r>
    e0c8:	b.n	dffe <__ssvfscanf_r+0xdae>
    e0ca:	nop

0000e0cc <_vdprintf_r>:
    e0cc:	push	{r4, r5, r6, r7, lr}
    e0ce:	sub.w	sp, sp, #532	; 0x214
    e0d2:	add	r5, sp, #16
    e0d4:	str	r3, [sp, #0]
    e0d6:	mov	r7, r1
    e0d8:	mov	r3, r2
    e0da:	mov.w	r4, #512	; 0x200
    e0de:	add	r2, sp, #12
    e0e0:	mov	r1, r5
    e0e2:	str	r4, [sp, #12]
    e0e4:	mov	r6, r0
    e0e6:	bl	10bc4 <_vasnprintf_r>
    e0ea:	cbz	r0, e110 <_vdprintf_r+0x44>
    e0ec:	mov	r4, r0
    e0ee:	mov	r2, r0
    e0f0:	mov	r1, r7
    e0f2:	ldr	r3, [sp, #12]
    e0f4:	mov	r0, r6
    e0f6:	bl	e14c <_write_r>
    e0fa:	cmp	r4, r5
    e0fc:	str	r0, [sp, #12]
    e0fe:	beq.n	e10a <_vdprintf_r+0x3e>
    e100:	mov	r0, r6
    e102:	mov	r1, r4
    e104:	bl	f068 <_free_r>
    e108:	ldr	r0, [sp, #12]
    e10a:	add.w	sp, sp, #532	; 0x214
    e10e:	pop	{r4, r5, r6, r7, pc}
    e110:	mov.w	r0, #4294967295
    e114:	b.n	e10a <_vdprintf_r+0x3e>
    e116:	nop

0000e118 <vdprintf>:
    e118:	push	{r4}
    e11a:	ldr	r4, [pc, #16]	; (e12c <vdprintf+0x14>)
    e11c:	mov	r3, r2
    e11e:	mov	r2, r1
    e120:	mov	r1, r0
    e122:	ldr	r0, [r4, #0]
    e124:	ldr.w	r4, [sp], #4
    e128:	b.w	e0cc <_vdprintf_r>
    e12c:	.word	0x20001dac

0000e130 <__ascii_wctomb>:
    e130:	cbz	r1, e13c <__ascii_wctomb+0xc>
    e132:	cmp	r2, #255	; 0xff
    e134:	bhi.n	e140 <__ascii_wctomb+0x10>
    e136:	strb	r2, [r1, #0]
    e138:	movs	r0, #1
    e13a:	bx	lr
    e13c:	mov	r0, r1
    e13e:	bx	lr
    e140:	movs	r3, #138	; 0x8a
    e142:	str	r3, [r0, #0]
    e144:	mov.w	r0, #4294967295
    e148:	bx	lr
    e14a:	nop

0000e14c <_write_r>:
    e14c:	push	{r4, r5, r6, lr}
    e14e:	mov	r5, r1
    e150:	ldr	r4, [pc, #32]	; (e174 <_write_r+0x28>)
    e152:	mov	r1, r2
    e154:	mov	r6, r0
    e156:	mov	r2, r3
    e158:	mov	r0, r5
    e15a:	movs	r3, #0
    e15c:	str	r3, [r4, #0]
    e15e:	bl	1e38 <_write>
    e162:	adds	r3, r0, #1
    e164:	beq.n	e168 <_write_r+0x1c>
    e166:	pop	{r4, r5, r6, pc}
    e168:	ldr	r3, [r4, #0]
    e16a:	cmp	r3, #0
    e16c:	beq.n	e166 <_write_r+0x1a>
    e16e:	str	r3, [r6, #0]
    e170:	pop	{r4, r5, r6, pc}
    e172:	nop
    e174:	.word	0x20008ba0

0000e178 <__register_exitproc>:
    e178:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e17c:	ldr	r4, [pc, #148]	; (e214 <__register_exitproc+0x9c>)
    e17e:	ldr	r5, [r4, #0]
    e180:	ldr.w	r4, [r5, #328]	; 0x148
    e184:	mov	r6, r0
    e186:	mov	r8, r1
    e188:	mov	sl, r2
    e18a:	mov	r9, r3
    e18c:	cbz	r4, e200 <__register_exitproc+0x88>
    e18e:	ldr	r0, [r4, #4]
    e190:	cmp	r0, #31
    e192:	bgt.n	e1c4 <__register_exitproc+0x4c>
    e194:	adds	r3, r0, #1
    e196:	cbz	r6, e1b6 <__register_exitproc+0x3e>
    e198:	add.w	r5, r4, r0, lsl #2
    e19c:	movs	r2, #1
    e19e:	str.w	sl, [r5, #136]	; 0x88
    e1a2:	ldr.w	r1, [r4, #392]	; 0x188
    e1a6:	lsls	r2, r0
    e1a8:	orrs	r1, r2
    e1aa:	cmp	r6, #2
    e1ac:	str.w	r1, [r4, #392]	; 0x188
    e1b0:	str.w	r9, [r5, #264]	; 0x108
    e1b4:	beq.n	e1f4 <__register_exitproc+0x7c>
    e1b6:	adds	r0, #2
    e1b8:	str	r3, [r4, #4]
    e1ba:	str.w	r8, [r4, r0, lsl #2]
    e1be:	movs	r0, #0
    e1c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1c4:	ldr	r3, [pc, #80]	; (e218 <__register_exitproc+0xa0>)
    e1c6:	cbz	r3, e20a <__register_exitproc+0x92>
    e1c8:	mov.w	r0, #400	; 0x190
    e1cc:	bl	9ef0 <malloc>
    e1d0:	mov	r4, r0
    e1d2:	cbz	r0, e20a <__register_exitproc+0x92>
    e1d4:	ldr.w	r3, [r5, #328]	; 0x148
    e1d8:	movs	r7, #0
    e1da:	stmia.w	r0, {r3, r7}
    e1de:	str.w	r4, [r5, #328]	; 0x148
    e1e2:	mov	r0, r7
    e1e4:	movs	r3, #1
    e1e6:	str.w	r7, [r4, #392]	; 0x188
    e1ea:	str.w	r7, [r4, #396]	; 0x18c
    e1ee:	cmp	r6, #0
    e1f0:	beq.n	e1b6 <__register_exitproc+0x3e>
    e1f2:	b.n	e198 <__register_exitproc+0x20>
    e1f4:	ldr.w	r1, [r4, #396]	; 0x18c
    e1f8:	orrs	r2, r1
    e1fa:	str.w	r2, [r4, #396]	; 0x18c
    e1fe:	b.n	e1b6 <__register_exitproc+0x3e>
    e200:	add.w	r4, r5, #332	; 0x14c
    e204:	str.w	r4, [r5, #328]	; 0x148
    e208:	b.n	e18e <__register_exitproc+0x16>
    e20a:	mov.w	r0, #4294967295
    e20e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e212:	nop
    e214:	.word	0x2000086c
    e218:	.word	0x00009ef1

0000e21c <quorem>:
    e21c:	ldr	r2, [r0, #16]
    e21e:	ldr	r3, [r1, #16]
    e220:	cmp	r3, r2
    e222:	bgt.w	e340 <quorem+0x124>
    e226:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e22a:	add.w	r8, r3, #4294967295
    e22e:	add.w	r7, r1, #20
    e232:	add.w	fp, r0, #20
    e236:	ldr.w	r2, [r7, r8, lsl #2]
    e23a:	ldr.w	r3, [fp, r8, lsl #2]
    e23e:	mov.w	r4, r8, lsl #2
    e242:	sub	sp, #12
    e244:	adds	r2, #1
    e246:	udiv	r9, r3, r2
    e24a:	add.w	r3, fp, r4
    e24e:	str	r4, [sp, #0]
    e250:	add.w	sl, r7, r4
    e254:	str	r3, [sp, #4]
    e256:	cmp.w	r9, #0
    e25a:	beq.n	e2d0 <quorem+0xb4>
    e25c:	movs	r5, #0
    e25e:	mov	ip, r7
    e260:	mov	lr, fp
    e262:	mov	r3, r5
    e264:	ldr.w	r6, [ip], #4
    e268:	ldr.w	r2, [lr]
    e26c:	uxth	r4, r6
    e26e:	mla	r5, r9, r4, r5
    e272:	lsrs	r6, r6, #16
    e274:	lsrs	r4, r5, #16
    e276:	mla	r4, r9, r6, r4
    e27a:	uxth	r5, r5
    e27c:	subs	r3, r3, r5
    e27e:	uxth	r6, r4
    e280:	uxtah	r3, r3, r2
    e284:	rsb	r6, r6, r2, lsr #16
    e288:	add.w	r6, r6, r3, asr #16
    e28c:	uxth	r3, r3
    e28e:	orr.w	r3, r3, r6, lsl #16
    e292:	cmp	sl, ip
    e294:	str.w	r3, [lr], #4
    e298:	mov.w	r5, r4, lsr #16
    e29c:	mov.w	r3, r6, asr #16
    e2a0:	bcs.n	e264 <quorem+0x48>
    e2a2:	ldr	r3, [sp, #0]
    e2a4:	ldr.w	r3, [fp, r3]
    e2a8:	cbnz	r3, e2d0 <quorem+0xb4>
    e2aa:	ldr	r4, [sp, #4]
    e2ac:	subs	r3, r4, #4
    e2ae:	cmp	fp, r3
    e2b0:	bcs.n	e2cc <quorem+0xb0>
    e2b2:	ldr.w	r3, [r4, #-4]
    e2b6:	cbnz	r3, e2cc <quorem+0xb0>
    e2b8:	sub.w	r3, r4, #8
    e2bc:	b.n	e2c4 <quorem+0xa8>
    e2be:	ldr	r2, [r3, #0]
    e2c0:	subs	r3, #4
    e2c2:	cbnz	r2, e2cc <quorem+0xb0>
    e2c4:	cmp	fp, r3
    e2c6:	add.w	r8, r8, #4294967295
    e2ca:	bcc.n	e2be <quorem+0xa2>
    e2cc:	str.w	r8, [r0, #16]
    e2d0:	mov	r4, r0
    e2d2:	bl	fee0 <__mcmp>
    e2d6:	cmp	r0, #0
    e2d8:	blt.n	e338 <quorem+0x11c>
    e2da:	add.w	r9, r9, #1
    e2de:	mov	r5, fp
    e2e0:	movs	r3, #0
    e2e2:	ldr.w	r1, [r7], #4
    e2e6:	ldr	r0, [r5, #0]
    e2e8:	uxth	r2, r1
    e2ea:	subs	r2, r3, r2
    e2ec:	lsrs	r1, r1, #16
    e2ee:	uxtah	r2, r2, r0
    e2f2:	rsb	r3, r1, r0, lsr #16
    e2f6:	add.w	r3, r3, r2, asr #16
    e2fa:	uxth	r1, r2
    e2fc:	orr.w	r1, r1, r3, lsl #16
    e300:	cmp	sl, r7
    e302:	str.w	r1, [r5], #4
    e306:	mov.w	r3, r3, asr #16
    e30a:	bcs.n	e2e2 <quorem+0xc6>
    e30c:	ldr.w	r2, [fp, r8, lsl #2]
    e310:	add.w	r3, fp, r8, lsl #2
    e314:	cbnz	r2, e338 <quorem+0x11c>
    e316:	subs	r2, r3, #4
    e318:	cmp	fp, r2
    e31a:	bcs.n	e334 <quorem+0x118>
    e31c:	ldr.w	r2, [r3, #-4]
    e320:	cbnz	r2, e334 <quorem+0x118>
    e322:	subs	r3, #8
    e324:	b.n	e32c <quorem+0x110>
    e326:	ldr	r2, [r3, #0]
    e328:	subs	r3, #4
    e32a:	cbnz	r2, e334 <quorem+0x118>
    e32c:	cmp	fp, r3
    e32e:	add.w	r8, r8, #4294967295
    e332:	bcc.n	e326 <quorem+0x10a>
    e334:	str.w	r8, [r4, #16]
    e338:	mov	r0, r9
    e33a:	add	sp, #12
    e33c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e340:	movs	r0, #0
    e342:	bx	lr
    e344:	movs	r0, r0
	...

0000e348 <_dtoa_r>:
    e348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e34c:	vmov	r6, r7, d0
    e350:	sub	sp, #76	; 0x4c
    e352:	ldr	r5, [r0, #64]	; 0x40
    e354:	str	r1, [sp, #4]
    e356:	mov	r4, r0
    e358:	mov	r8, r2
    e35a:	str	r3, [sp, #16]
    e35c:	vmov	sl, s0
    e360:	mov	fp, r7
    e362:	cbz	r5, e378 <_dtoa_r+0x30>
    e364:	ldr	r2, [r0, #68]	; 0x44
    e366:	str	r2, [r5, #4]
    e368:	movs	r3, #1
    e36a:	lsls	r3, r2
    e36c:	str	r3, [r5, #8]
    e36e:	mov	r1, r5
    e370:	bl	fa84 <_Bfree>
    e374:	movs	r3, #0
    e376:	str	r3, [r4, #64]	; 0x40
    e378:	cmp.w	fp, #0
    e37c:	mov	r6, fp
    e37e:	blt.n	e3ea <_dtoa_r+0xa2>
    e380:	ldr	r2, [sp, #112]	; 0x70
    e382:	movs	r3, #0
    e384:	str	r3, [r2, #0]
    e386:	ldr	r3, [pc, #784]	; (e698 <_dtoa_r+0x350>)
    e388:	mov	r2, r3
    e38a:	ands	r3, r6
    e38c:	cmp	r3, r2
    e38e:	beq.n	e3bc <_dtoa_r+0x74>
    e390:	vmov	d7, sl, fp
    e394:	vcmp.f64	d7, #0.0
    e398:	vmrs	APSR_nzcv, fpscr
    e39c:	strd	sl, fp, [sp, #8]
    e3a0:	bne.n	e3f8 <_dtoa_r+0xb0>
    e3a2:	ldr	r2, [sp, #16]
    e3a4:	movs	r3, #1
    e3a6:	str	r3, [r2, #0]
    e3a8:	ldr	r3, [sp, #116]	; 0x74
    e3aa:	cmp	r3, #0
    e3ac:	beq.w	e51e <_dtoa_r+0x1d6>
    e3b0:	ldr	r0, [pc, #744]	; (e69c <_dtoa_r+0x354>)
    e3b2:	str	r0, [r3, #0]
    e3b4:	subs	r0, #1
    e3b6:	add	sp, #76	; 0x4c
    e3b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3bc:	ldr	r2, [sp, #16]
    e3be:	movw	r3, #9999	; 0x270f
    e3c2:	str	r3, [r2, #0]
    e3c4:	cmp.w	sl, #0
    e3c8:	beq.w	e4f0 <_dtoa_r+0x1a8>
    e3cc:	ldr	r0, [pc, #720]	; (e6a0 <_dtoa_r+0x358>)
    e3ce:	ldr	r3, [sp, #116]	; 0x74
    e3d0:	cmp	r3, #0
    e3d2:	beq.n	e3b6 <_dtoa_r+0x6e>
    e3d4:	ldrb	r3, [r0, #3]
    e3d6:	cmp	r3, #0
    e3d8:	beq.w	e522 <_dtoa_r+0x1da>
    e3dc:	add.w	r3, r0, #8
    e3e0:	ldr	r2, [sp, #116]	; 0x74
    e3e2:	str	r3, [r2, #0]
    e3e4:	add	sp, #76	; 0x4c
    e3e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3ea:	ldr	r2, [sp, #112]	; 0x70
    e3ec:	movs	r3, #1
    e3ee:	bic.w	r6, fp, #2147483648	; 0x80000000
    e3f2:	str	r3, [r2, #0]
    e3f4:	mov	fp, r6
    e3f6:	b.n	e386 <_dtoa_r+0x3e>
    e3f8:	add	r1, sp, #68	; 0x44
    e3fa:	add	r2, sp, #64	; 0x40
    e3fc:	vldr	d0, [sp, #8]
    e400:	mov	r0, r4
    e402:	bl	1015c <__d2b>
    e406:	lsrs	r1, r6, #20
    e408:	str	r0, [sp, #28]
    e40a:	bne.n	e502 <_dtoa_r+0x1ba>
    e40c:	ldr	r0, [sp, #64]	; 0x40
    e40e:	ldr	r1, [sp, #68]	; 0x44
    e410:	add	r1, r0
    e412:	addw	r3, r1, #1074	; 0x432
    e416:	cmp	r3, #32
    e418:	ble.w	e89e <_dtoa_r+0x556>
    e41c:	rsb	r3, r3, #64	; 0x40
    e420:	addw	r2, r1, #1042	; 0x412
    e424:	lsls	r6, r3
    e426:	lsr.w	r3, sl, r2
    e42a:	orrs	r3, r6
    e42c:	vmov	s15, r3
    e430:	vcvt.f64.u32	d7, s15
    e434:	movs	r5, #1
    e436:	vmov	r2, r3, d7
    e43a:	subs	r1, #1
    e43c:	sub.w	r3, r3, #32505856	; 0x1f00000
    e440:	str	r5, [sp, #40]	; 0x28
    e442:	vmov	d7, r2, r3
    e446:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    e44a:	vldr	d4, [pc, #564]	; e680 <_dtoa_r+0x338>
    e44e:	vsub.f64	d6, d7, d6
    e452:	vldr	d7, [pc, #564]	; e688 <_dtoa_r+0x340>
    e456:	vldr	d5, [pc, #568]	; e690 <_dtoa_r+0x348>
    e45a:	vfma.f64	d7, d6, d4
    e45e:	vmov	s13, r1
    e462:	vcvt.f64.s32	d6, s13
    e466:	vfma.f64	d7, d6, d5
    e46a:	vcvt.s32.f64	s13, d7
    e46e:	vcmpe.f64	d7, #0.0
    e472:	vmrs	APSR_nzcv, fpscr
    e476:	vstr	s13, [sp, #8]
    e47a:	bmi.w	e6b6 <_dtoa_r+0x36e>
    e47e:	ldr	r5, [sp, #8]
    e480:	cmp	r5, #22
    e482:	bhi.w	e6b0 <_dtoa_r+0x368>
    e486:	ldr	r3, [pc, #540]	; (e6a4 <_dtoa_r+0x35c>)
    e488:	add.w	r3, r3, r5, lsl #3
    e48c:	vldr	d7, [r3]
    e490:	vmov	d6, sl, fp
    e494:	vcmpe.f64	d7, d6
    e498:	vmrs	APSR_nzcv, fpscr
    e49c:	ble.w	e8ac <_dtoa_r+0x564>
    e4a0:	subs	r3, r5, #1
    e4a2:	str	r3, [sp, #8]
    e4a4:	movs	r3, #0
    e4a6:	str	r3, [sp, #48]	; 0x30
    e4a8:	subs	r1, r0, r1
    e4aa:	subs.w	r9, r1, #1
    e4ae:	bmi.w	e6e0 <_dtoa_r+0x398>
    e4b2:	movs	r3, #0
    e4b4:	str	r3, [sp, #24]
    e4b6:	ldr	r3, [sp, #8]
    e4b8:	cmp	r3, #0
    e4ba:	blt.w	e6ce <_dtoa_r+0x386>
    e4be:	add	r9, r3
    e4c0:	str	r3, [sp, #44]	; 0x2c
    e4c2:	movs	r3, #0
    e4c4:	str	r3, [sp, #20]
    e4c6:	ldr	r3, [sp, #4]
    e4c8:	cmp	r3, #9
    e4ca:	bhi.n	e526 <_dtoa_r+0x1de>
    e4cc:	cmp	r3, #5
    e4ce:	ble.w	ef90 <_dtoa_r+0xc48>
    e4d2:	subs	r3, #4
    e4d4:	str	r3, [sp, #4]
    e4d6:	movs	r3, #0
    e4d8:	str	r3, [sp, #56]	; 0x38
    e4da:	ldr	r3, [sp, #4]
    e4dc:	subs	r3, #2
    e4de:	cmp	r3, #3
    e4e0:	bhi.w	efa2 <_dtoa_r+0xc5a>
    e4e4:	tbh	[pc, r3, lsl #1]
    e4e8:	.word	0x01e502a9
    e4ec:	.word	0x03c802b5
    e4f0:	ldr	r3, [pc, #428]	; (e6a0 <_dtoa_r+0x358>)
    e4f2:	ldr	r2, [pc, #436]	; (e6a8 <_dtoa_r+0x360>)
    e4f4:	ubfx	r0, r6, #0, #20
    e4f8:	cmp	r0, #0
    e4fa:	ite	ne
    e4fc:	movne	r0, r3
    e4fe:	moveq	r0, r2
    e500:	b.n	e3ce <_dtoa_r+0x86>
    e502:	ldrd	r2, r3, [sp, #8]
    e506:	ubfx	r0, r3, #0, #20
    e50a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    e50e:	movs	r5, #0
    e510:	subw	r1, r1, #1023	; 0x3ff
    e514:	orr.w	r3, r3, #3145728	; 0x300000
    e518:	ldr	r0, [sp, #64]	; 0x40
    e51a:	str	r5, [sp, #40]	; 0x28
    e51c:	b.n	e442 <_dtoa_r+0xfa>
    e51e:	ldr	r0, [pc, #396]	; (e6ac <_dtoa_r+0x364>)
    e520:	b.n	e3b6 <_dtoa_r+0x6e>
    e522:	adds	r3, r0, #3
    e524:	b.n	e3e0 <_dtoa_r+0x98>
    e526:	movs	r1, #0
    e528:	str	r1, [r4, #68]	; 0x44
    e52a:	mov	r0, r4
    e52c:	mov	r8, r1
    e52e:	str	r1, [sp, #4]
    e530:	bl	fa38 <_Balloc>
    e534:	mov.w	r7, #4294967295
    e538:	movs	r3, #1
    e53a:	str	r0, [sp, #32]
    e53c:	str	r0, [r4, #64]	; 0x40
    e53e:	str	r7, [sp, #52]	; 0x34
    e540:	str	r3, [sp, #36]	; 0x24
    e542:	ldr	r3, [sp, #68]	; 0x44
    e544:	cmp	r3, #0
    e546:	blt.n	e63e <_dtoa_r+0x2f6>
    e548:	ldr	r2, [sp, #8]
    e54a:	cmp	r2, #14
    e54c:	bgt.n	e63e <_dtoa_r+0x2f6>
    e54e:	ldr	r3, [pc, #340]	; (e6a4 <_dtoa_r+0x35c>)
    e550:	cmp.w	r8, #0
    e554:	add.w	r3, r3, r2, lsl #3
    e558:	vldr	d4, [r3]
    e55c:	blt.w	ea68 <_dtoa_r+0x720>
    e560:	vneg.f64	d2, d4
    e564:	vmov	d7, sl, fp
    e568:	vdiv.f64	d6, d7, d4
    e56c:	vcvt.s32.f64	s12, d6
    e570:	ldr	r2, [sp, #32]
    e572:	vmov	r3, s12
    e576:	cmp	r7, #1
    e578:	add.w	r3, r3, #48	; 0x30
    e57c:	vcvt.f64.s32	d5, s12
    e580:	add.w	fp, r2, #1
    e584:	strb	r3, [r2, #0]
    e586:	vfma.f64	d7, d2, d5
    e58a:	beq.n	e5d2 <_dtoa_r+0x28a>
    e58c:	vmov.f64	d3, #36	; 0x41200000  10.0
    e590:	vmul.f64	d7, d7, d3
    e594:	vcmp.f64	d7, #0.0
    e598:	vmrs	APSR_nzcv, fpscr
    e59c:	beq.n	e614 <_dtoa_r+0x2cc>
    e59e:	ldr	r2, [sp, #32]
    e5a0:	b.n	e5b0 <_dtoa_r+0x268>
    e5a2:	vmul.f64	d7, d7, d3
    e5a6:	vcmp.f64	d7, #0.0
    e5aa:	vmrs	APSR_nzcv, fpscr
    e5ae:	beq.n	e614 <_dtoa_r+0x2cc>
    e5b0:	vdiv.f64	d6, d7, d4
    e5b4:	vcvt.s32.f64	s12, d6
    e5b8:	vmov	r3, s12
    e5bc:	adds	r3, #48	; 0x30
    e5be:	strb.w	r3, [fp], #1
    e5c2:	rsb	r3, r2, fp
    e5c6:	cmp	r3, r7
    e5c8:	vcvt.f64.s32	d5, s12
    e5cc:	vfma.f64	d7, d2, d5
    e5d0:	bne.n	e5a2 <_dtoa_r+0x25a>
    e5d2:	vadd.f64	d7, d7, d7
    e5d6:	vcmpe.f64	d4, d7
    e5da:	vmrs	APSR_nzcv, fpscr
    e5de:	bmi.n	e5f2 <_dtoa_r+0x2aa>
    e5e0:	vcmp.f64	d4, d7
    e5e4:	vmrs	APSR_nzcv, fpscr
    e5e8:	bne.n	e614 <_dtoa_r+0x2cc>
    e5ea:	vmov	r3, s12
    e5ee:	lsls	r3, r3, #31
    e5f0:	bpl.n	e614 <_dtoa_r+0x2cc>
    e5f2:	ldrb.w	r0, [fp, #-1]
    e5f6:	ldr	r2, [sp, #32]
    e5f8:	add.w	r3, fp, #4294967295
    e5fc:	b.n	e608 <_dtoa_r+0x2c0>
    e5fe:	cmp	r2, r3
    e600:	beq.w	edce <_dtoa_r+0xa86>
    e604:	ldrb.w	r0, [r3, #-1]!
    e608:	cmp	r0, #57	; 0x39
    e60a:	add.w	fp, r3, #1
    e60e:	beq.n	e5fe <_dtoa_r+0x2b6>
    e610:	adds	r0, #1
    e612:	strb	r0, [r3, #0]
    e614:	ldr	r1, [sp, #28]
    e616:	mov	r0, r4
    e618:	bl	fa84 <_Bfree>
    e61c:	movs	r2, #0
    e61e:	ldr	r3, [sp, #8]
    e620:	strb.w	r2, [fp]
    e624:	ldr	r2, [sp, #16]
    e626:	adds	r3, #1
    e628:	str	r3, [r2, #0]
    e62a:	ldr	r3, [sp, #116]	; 0x74
    e62c:	cmp	r3, #0
    e62e:	beq.w	ecfe <_dtoa_r+0x9b6>
    e632:	ldr	r0, [sp, #32]
    e634:	str.w	fp, [r3]
    e638:	add	sp, #76	; 0x4c
    e63a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e63e:	ldr	r2, [sp, #36]	; 0x24
    e640:	cmp	r2, #0
    e642:	beq.n	e6ec <_dtoa_r+0x3a4>
    e644:	ldr	r2, [sp, #4]
    e646:	cmp	r2, #1
    e648:	ble.w	eaa8 <_dtoa_r+0x760>
    e64c:	ldr	r1, [sp, #20]
    e64e:	subs	r2, r7, #1
    e650:	cmp	r1, r2
    e652:	blt.w	ed04 <_dtoa_r+0x9bc>
    e656:	subs	r3, r1, r2
    e658:	str	r3, [sp, #56]	; 0x38
    e65a:	cmp	r7, #0
    e65c:	ldr	r3, [sp, #24]
    e65e:	blt.w	eeaa <_dtoa_r+0xb62>
    e662:	str	r3, [sp, #40]	; 0x28
    e664:	mov	r3, r7
    e666:	ldr	r2, [sp, #24]
    e668:	movs	r1, #1
    e66a:	add	r2, r3
    e66c:	mov	r0, r4
    e66e:	str	r2, [sp, #24]
    e670:	add	r9, r3
    e672:	bl	fc4c <__i2b>
    e676:	mov	r6, r0
    e678:	b.n	e6f6 <_dtoa_r+0x3ae>
    e67a:	nop
    e67c:	nop.w
    e680:	.word	0x636f4361
    e684:	.word	0x3fd287a7
    e688:	.word	0x8b60c8b3
    e68c:	.word	0x3fc68a28
    e690:	.word	0x509f79fb
    e694:	.word	0x3fd34413
    e698:	.word	0x7ff00000
    e69c:	.word	0x20000ca9
    e6a0:	.word	0x20000cc0
    e6a4:	.word	0x200002a8
    e6a8:	.word	0x20000cb4
    e6ac:	.word	0x20000ca8
    e6b0:	movs	r3, #1
    e6b2:	str	r3, [sp, #48]	; 0x30
    e6b4:	b.n	e4a8 <_dtoa_r+0x160>
    e6b6:	vcvt.f64.s32	d6, s13
    e6ba:	vcmp.f64	d7, d6
    e6be:	vmrs	APSR_nzcv, fpscr
    e6c2:	beq.w	e47e <_dtoa_r+0x136>
    e6c6:	ldr	r3, [sp, #8]
    e6c8:	subs	r3, #1
    e6ca:	str	r3, [sp, #8]
    e6cc:	b.n	e47e <_dtoa_r+0x136>
    e6ce:	ldr	r2, [sp, #24]
    e6d0:	ldr	r3, [sp, #8]
    e6d2:	subs	r2, r2, r3
    e6d4:	negs	r3, r3
    e6d6:	str	r3, [sp, #20]
    e6d8:	movs	r3, #0
    e6da:	str	r2, [sp, #24]
    e6dc:	str	r3, [sp, #44]	; 0x2c
    e6de:	b.n	e4c6 <_dtoa_r+0x17e>
    e6e0:	rsb	r3, r9, #0
    e6e4:	str	r3, [sp, #24]
    e6e6:	mov.w	r9, #0
    e6ea:	b.n	e4b6 <_dtoa_r+0x16e>
    e6ec:	ldr	r3, [sp, #20]
    e6ee:	str	r3, [sp, #56]	; 0x38
    e6f0:	ldr	r6, [sp, #36]	; 0x24
    e6f2:	ldr	r3, [sp, #24]
    e6f4:	str	r3, [sp, #40]	; 0x28
    e6f6:	ldr	r1, [sp, #40]	; 0x28
    e6f8:	mov	r3, r1
    e6fa:	cbz	r1, e716 <_dtoa_r+0x3ce>
    e6fc:	cmp.w	r9, #0
    e700:	ble.n	e716 <_dtoa_r+0x3ce>
    e702:	cmp	r1, r9
    e704:	ldr	r2, [sp, #24]
    e706:	it	ge
    e708:	movge	r3, r9
    e70a:	subs	r2, r2, r3
    e70c:	str	r2, [sp, #24]
    e70e:	subs	r2, r1, r3
    e710:	str	r2, [sp, #40]	; 0x28
    e712:	rsb	r9, r3, r9
    e716:	ldr	r3, [sp, #20]
    e718:	cmp	r3, #0
    e71a:	ble.w	ec1e <_dtoa_r+0x8d6>
    e71e:	ldr	r2, [sp, #36]	; 0x24
    e720:	cmp	r2, #0
    e722:	beq.w	ea5a <_dtoa_r+0x712>
    e726:	ldr	r2, [sp, #56]	; 0x38
    e728:	cmp	r2, #0
    e72a:	beq.w	ea5a <_dtoa_r+0x712>
    e72e:	mov	r1, r6
    e730:	mov	r0, r4
    e732:	bl	fd90 <__pow5mult>
    e736:	ldr	r2, [sp, #28]
    e738:	mov	r1, r0
    e73a:	mov	r6, r0
    e73c:	mov	r0, r4
    e73e:	bl	fc60 <__multiply>
    e742:	ldr	r1, [sp, #28]
    e744:	mov	r5, r0
    e746:	mov	r0, r4
    e748:	bl	fa84 <_Bfree>
    e74c:	ldr	r3, [sp, #20]
    e74e:	ldr	r2, [sp, #56]	; 0x38
    e750:	subs	r3, r3, r2
    e752:	str	r3, [sp, #20]
    e754:	bne.w	ea58 <_dtoa_r+0x710>
    e758:	movs	r1, #1
    e75a:	mov	r0, r4
    e75c:	bl	fc4c <__i2b>
    e760:	ldr	r3, [sp, #44]	; 0x2c
    e762:	str	r0, [sp, #20]
    e764:	cmp	r3, #0
    e766:	beq.w	eac2 <_dtoa_r+0x77a>
    e76a:	mov	r1, r0
    e76c:	mov	r2, r3
    e76e:	mov	r0, r4
    e770:	bl	fd90 <__pow5mult>
    e774:	ldr	r3, [sp, #4]
    e776:	str	r0, [sp, #20]
    e778:	cmp	r3, #1
    e77a:	ble.w	ec7e <_dtoa_r+0x936>
    e77e:	movs	r3, #0
    e780:	str	r3, [sp, #28]
    e782:	ldr	r2, [sp, #20]
    e784:	ldr	r3, [r2, #16]
    e786:	add.w	r3, r2, r3, lsl #2
    e78a:	ldr	r0, [r3, #16]
    e78c:	bl	fbb0 <__hi0bits>
    e790:	rsb	r0, r0, #32
    e794:	add	r0, r9
    e796:	ands.w	r0, r0, #31
    e79a:	beq.w	eabe <_dtoa_r+0x776>
    e79e:	rsb	r3, r0, #32
    e7a2:	cmp	r3, #4
    e7a4:	ble.w	ef98 <_dtoa_r+0xc50>
    e7a8:	rsb	r0, r0, #28
    e7ac:	ldr	r3, [sp, #24]
    e7ae:	add	r3, r0
    e7b0:	str	r3, [sp, #24]
    e7b2:	ldr	r3, [sp, #40]	; 0x28
    e7b4:	add	r3, r0
    e7b6:	str	r3, [sp, #40]	; 0x28
    e7b8:	add	r9, r0
    e7ba:	ldr	r3, [sp, #24]
    e7bc:	cmp	r3, #0
    e7be:	ble.n	e7cc <_dtoa_r+0x484>
    e7c0:	mov	r1, r5
    e7c2:	mov	r2, r3
    e7c4:	mov	r0, r4
    e7c6:	bl	fe30 <__lshift>
    e7ca:	mov	r5, r0
    e7cc:	cmp.w	r9, #0
    e7d0:	ble.n	e7de <_dtoa_r+0x496>
    e7d2:	mov	r2, r9
    e7d4:	ldr	r1, [sp, #20]
    e7d6:	mov	r0, r4
    e7d8:	bl	fe30 <__lshift>
    e7dc:	str	r0, [sp, #20]
    e7de:	ldr	r3, [sp, #48]	; 0x30
    e7e0:	cmp	r3, #0
    e7e2:	bne.w	ebe8 <_dtoa_r+0x8a0>
    e7e6:	cmp	r7, #0
    e7e8:	ble.w	ec2c <_dtoa_r+0x8e4>
    e7ec:	ldr	r3, [sp, #36]	; 0x24
    e7ee:	cmp	r3, #0
    e7f0:	bne.w	eaea <_dtoa_r+0x7a2>
    e7f4:	ldr.w	fp, [sp, #32]
    e7f8:	ldr.w	sl, [sp, #20]
    e7fc:	mov	r8, fp
    e7fe:	b.n	e806 <_dtoa_r+0x4be>
    e800:	bl	fa98 <__multadd>
    e804:	mov	r5, r0
    e806:	mov	r1, sl
    e808:	mov	r0, r5
    e80a:	bl	e21c <quorem>
    e80e:	add.w	r9, r0, #48	; 0x30
    e812:	strb.w	r9, [r8], #1
    e816:	rsb	r3, fp, r8
    e81a:	cmp	r3, r7
    e81c:	mov.w	r2, #10
    e820:	mov.w	r3, #0
    e824:	mov	r1, r5
    e826:	mov	r0, r4
    e828:	blt.n	e800 <_dtoa_r+0x4b8>
    e82a:	ldr	r3, [sp, #32]
    e82c:	cmp	r7, #1
    e82e:	ite	ge
    e830:	addge	r3, r3, r7
    e832:	addlt	r3, #1
    e834:	mov	fp, r3
    e836:	mov.w	sl, #0
    e83a:	mov	r1, r5
    e83c:	movs	r2, #1
    e83e:	mov	r0, r4
    e840:	bl	fe30 <__lshift>
    e844:	ldr	r1, [sp, #20]
    e846:	str	r0, [sp, #28]
    e848:	bl	fee0 <__mcmp>
    e84c:	cmp	r0, #0
    e84e:	ble.w	ed6a <_dtoa_r+0xa22>
    e852:	ldrb.w	r2, [fp, #-1]
    e856:	ldr	r1, [sp, #32]
    e858:	add.w	r3, fp, #4294967295
    e85c:	b.n	e868 <_dtoa_r+0x520>
    e85e:	cmp	r3, r1
    e860:	beq.w	ec6a <_dtoa_r+0x922>
    e864:	ldrb.w	r2, [r3, #-1]!
    e868:	cmp	r2, #57	; 0x39
    e86a:	add.w	fp, r3, #1
    e86e:	beq.n	e85e <_dtoa_r+0x516>
    e870:	adds	r2, #1
    e872:	strb	r2, [r3, #0]
    e874:	ldr	r1, [sp, #20]
    e876:	mov	r0, r4
    e878:	bl	fa84 <_Bfree>
    e87c:	cmp	r6, #0
    e87e:	beq.w	e614 <_dtoa_r+0x2cc>
    e882:	cmp.w	sl, #0
    e886:	beq.n	e894 <_dtoa_r+0x54c>
    e888:	cmp	sl, r6
    e88a:	beq.n	e894 <_dtoa_r+0x54c>
    e88c:	mov	r1, sl
    e88e:	mov	r0, r4
    e890:	bl	fa84 <_Bfree>
    e894:	mov	r1, r6
    e896:	mov	r0, r4
    e898:	bl	fa84 <_Bfree>
    e89c:	b.n	e614 <_dtoa_r+0x2cc>
    e89e:	rsb	r3, r3, #32
    e8a2:	lsl.w	r3, sl, r3
    e8a6:	vmov	s15, r3
    e8aa:	b.n	e430 <_dtoa_r+0xe8>
    e8ac:	movs	r3, #0
    e8ae:	str	r3, [sp, #48]	; 0x30
    e8b0:	b.n	e4a8 <_dtoa_r+0x160>
    e8b2:	movs	r3, #0
    e8b4:	str	r3, [sp, #36]	; 0x24
    e8b6:	ldr	r3, [sp, #8]
    e8b8:	add	r3, r8
    e8ba:	adds	r7, r3, #1
    e8bc:	cmp	r7, #0
    e8be:	str	r3, [sp, #52]	; 0x34
    e8c0:	ble.w	ed1e <_dtoa_r+0x9d6>
    e8c4:	mov	r6, r7
    e8c6:	mov	r5, r7
    e8c8:	movs	r1, #0
    e8ca:	cmp	r6, #23
    e8cc:	str	r1, [r4, #68]	; 0x44
    e8ce:	bls.n	e8e6 <_dtoa_r+0x59e>
    e8d0:	movs	r2, #1
    e8d2:	movs	r3, #4
    e8d4:	lsls	r3, r3, #1
    e8d6:	add.w	r0, r3, #20
    e8da:	cmp	r0, r6
    e8dc:	mov	r1, r2
    e8de:	add.w	r2, r2, #1
    e8e2:	bls.n	e8d4 <_dtoa_r+0x58c>
    e8e4:	str	r1, [r4, #68]	; 0x44
    e8e6:	mov	r0, r4
    e8e8:	bl	fa38 <_Balloc>
    e8ec:	cmp	r5, #14
    e8ee:	str	r0, [sp, #32]
    e8f0:	str	r0, [r4, #64]	; 0x40
    e8f2:	bhi.w	e542 <_dtoa_r+0x1fa>
    e8f6:	ldr	r3, [sp, #56]	; 0x38
    e8f8:	cmp	r3, #0
    e8fa:	beq.w	e542 <_dtoa_r+0x1fa>
    e8fe:	ldr	r1, [sp, #8]
    e900:	cmp	r1, #0
    e902:	strd	sl, fp, [sp, #56]	; 0x38
    e906:	ble.w	ed8c <_dtoa_r+0xa44>
    e90a:	ldr	r3, [pc, #792]	; (ec24 <_dtoa_r+0x8dc>)
    e90c:	and.w	r2, r1, #15
    e910:	add.w	r2, r3, r2, lsl #3
    e914:	asrs	r3, r1, #4
    e916:	lsls	r6, r3, #27
    e918:	vldr	d6, [r2]
    e91c:	bpl.w	ed16 <_dtoa_r+0x9ce>
    e920:	ldr	r2, [pc, #772]	; (ec28 <_dtoa_r+0x8e0>)
    e922:	vldr	d7, [r2, #32]
    e926:	vmov	d4, sl, fp
    e92a:	and.w	r3, r3, #15
    e92e:	movs	r1, #3
    e930:	vdiv.f64	d5, d4, d7
    e934:	cbz	r3, e94e <_dtoa_r+0x606>
    e936:	ldr	r2, [pc, #752]	; (ec28 <_dtoa_r+0x8e0>)
    e938:	lsls	r5, r3, #31
    e93a:	bpl.n	e946 <_dtoa_r+0x5fe>
    e93c:	vldr	d7, [r2]
    e940:	adds	r1, #1
    e942:	vmul.f64	d6, d6, d7
    e946:	asrs	r3, r3, #1
    e948:	add.w	r2, r2, #8
    e94c:	bne.n	e938 <_dtoa_r+0x5f0>
    e94e:	vdiv.f64	d4, d5, d6
    e952:	ldr	r3, [sp, #48]	; 0x30
    e954:	cbz	r3, e966 <_dtoa_r+0x61e>
    e956:	vmov.f64	d7, #112	; 0x3f800000  1.0
    e95a:	vcmpe.f64	d4, d7
    e95e:	vmrs	APSR_nzcv, fpscr
    e962:	bmi.w	eed4 <_dtoa_r+0xb8c>
    e966:	vmov	s15, r1
    e96a:	vcvt.f64.s32	d6, s15
    e96e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    e972:	vfma.f64	d7, d6, d4
    e976:	vmov	r2, r3, d7
    e97a:	sub.w	r3, r3, #54525952	; 0x3400000
    e97e:	cmp	r7, #0
    e980:	beq.w	ecd0 <_dtoa_r+0x988>
    e984:	ldr	r6, [sp, #8]
    e986:	mov	r1, r7
    e988:	ldr	r0, [sp, #36]	; 0x24
    e98a:	cmp	r0, #0
    e98c:	beq.w	ee2a <_dtoa_r+0xae2>
    e990:	vmov.f64	d3, #96	; 0x3f000000  0.5
    e994:	ldr	r0, [pc, #652]	; (ec24 <_dtoa_r+0x8dc>)
    e996:	ldr	r5, [sp, #32]
    e998:	add.w	r0, r0, r1, lsl #3
    e99c:	vldr	d6, [r0, #-8]
    e9a0:	vcvt.s32.f64	s14, d4
    e9a4:	vdiv.f64	d5, d3, d6
    e9a8:	vmov	r0, s14
    e9ac:	vmov	d6, r2, r3
    e9b0:	adds	r0, #48	; 0x30
    e9b2:	uxtb	r0, r0
    e9b4:	vsub.f64	d5, d5, d6
    e9b8:	vcvt.f64.s32	d7, s14
    e9bc:	vsub.f64	d7, d4, d7
    e9c0:	vcmpe.f64	d5, d7
    e9c4:	vmrs	APSR_nzcv, fpscr
    e9c8:	strb	r0, [r5, #0]
    e9ca:	add.w	fp, r5, #1
    e9ce:	bgt.n	ea36 <_dtoa_r+0x6ee>
    e9d0:	vmov.f64	d3, #112	; 0x3f800000  1.0
    e9d4:	vsub.f64	d6, d3, d7
    e9d8:	vcmpe.f64	d5, d6
    e9dc:	vmrs	APSR_nzcv, fpscr
    e9e0:	bgt.w	ef40 <_dtoa_r+0xbf8>
    e9e4:	cmp	r1, #1
    e9e6:	ble.w	ed84 <_dtoa_r+0xa3c>
    e9ea:	vmov.f64	d4, #36	; 0x41200000  10.0
    e9ee:	ldr	r3, [sp, #32]
    e9f0:	add	r1, r3
    e9f2:	b.n	ea0a <_dtoa_r+0x6c2>
    e9f4:	vsub.f64	d6, d3, d7
    e9f8:	vcmpe.f64	d6, d5
    e9fc:	vmrs	APSR_nzcv, fpscr
    ea00:	bmi.w	ef40 <_dtoa_r+0xbf8>
    ea04:	cmp	fp, r1
    ea06:	beq.w	ed84 <_dtoa_r+0xa3c>
    ea0a:	vmul.f64	d7, d7, d4
    ea0e:	vmul.f64	d5, d5, d4
    ea12:	vcvt.s32.f64	s12, d7
    ea16:	vmov	r3, s12
    ea1a:	add.w	r0, r3, #48	; 0x30
    ea1e:	uxtb	r0, r0
    ea20:	vcvt.f64.s32	d6, s12
    ea24:	vsub.f64	d7, d7, d6
    ea28:	vcmpe.f64	d7, d5
    ea2c:	vmrs	APSR_nzcv, fpscr
    ea30:	strb.w	r0, [fp], #1
    ea34:	bpl.n	e9f4 <_dtoa_r+0x6ac>
    ea36:	str	r6, [sp, #8]
    ea38:	b.n	e614 <_dtoa_r+0x2cc>
    ea3a:	movs	r3, #0
    ea3c:	str	r3, [sp, #36]	; 0x24
    ea3e:	cmp.w	r8, #0
    ea42:	ble.w	ed26 <_dtoa_r+0x9de>
    ea46:	mov	r6, r8
    ea48:	mov	r5, r8
    ea4a:	str.w	r8, [sp, #52]	; 0x34
    ea4e:	mov	r7, r8
    ea50:	b.n	e8c8 <_dtoa_r+0x580>
    ea52:	movs	r3, #1
    ea54:	str	r3, [sp, #36]	; 0x24
    ea56:	b.n	ea3e <_dtoa_r+0x6f6>
    ea58:	str	r5, [sp, #28]
    ea5a:	ldr	r2, [sp, #20]
    ea5c:	ldr	r1, [sp, #28]
    ea5e:	mov	r0, r4
    ea60:	bl	fd90 <__pow5mult>
    ea64:	mov	r5, r0
    ea66:	b.n	e758 <_dtoa_r+0x410>
    ea68:	cmp	r7, #0
    ea6a:	bgt.w	e560 <_dtoa_r+0x218>
    ea6e:	bne.w	ecf6 <_dtoa_r+0x9ae>
    ea72:	vmov.f64	d7, #20	; 0x40a00000  5.0
    ea76:	vmul.f64	d4, d4, d7
    ea7a:	vmov	d7, sl, fp
    ea7e:	vcmpe.f64	d4, d7
    ea82:	vmrs	APSR_nzcv, fpscr
    ea86:	mov	r6, r7
    ea88:	str	r7, [sp, #20]
    ea8a:	blt.w	ec58 <_dtoa_r+0x910>
    ea8e:	mvn.w	r3, r8
    ea92:	ldr.w	fp, [sp, #32]
    ea96:	str	r3, [sp, #8]
    ea98:	ldr	r1, [sp, #20]
    ea9a:	mov	r0, r4
    ea9c:	bl	fa84 <_Bfree>
    eaa0:	cmp	r6, #0
    eaa2:	beq.w	e614 <_dtoa_r+0x2cc>
    eaa6:	b.n	e894 <_dtoa_r+0x54c>
    eaa8:	ldr	r2, [sp, #40]	; 0x28
    eaaa:	cmp	r2, #0
    eaac:	beq.w	eeb4 <_dtoa_r+0xb6c>
    eab0:	ldr	r2, [sp, #20]
    eab2:	str	r2, [sp, #56]	; 0x38
    eab4:	ldr	r2, [sp, #24]
    eab6:	str	r2, [sp, #40]	; 0x28
    eab8:	addw	r3, r3, #1075	; 0x433
    eabc:	b.n	e666 <_dtoa_r+0x31e>
    eabe:	movs	r0, #28
    eac0:	b.n	e7ac <_dtoa_r+0x464>
    eac2:	ldr	r3, [sp, #4]
    eac4:	cmp	r3, #1
    eac6:	ble.w	ef4a <_dtoa_r+0xc02>
    eaca:	ldr	r3, [sp, #44]	; 0x2c
    eacc:	str	r3, [sp, #28]
    eace:	movs	r0, #1
    ead0:	b.n	e794 <_dtoa_r+0x44c>
    ead2:	mov	r1, r6
    ead4:	movs	r3, #0
    ead6:	movs	r2, #10
    ead8:	mov	r0, r4
    eada:	bl	fa98 <__multadd>
    eade:	ldr	r3, [sp, #52]	; 0x34
    eae0:	cmp	r3, #0
    eae2:	mov	r6, r0
    eae4:	ble.w	ef82 <_dtoa_r+0xc3a>
    eae8:	mov	r7, r3
    eaea:	ldr	r3, [sp, #40]	; 0x28
    eaec:	cmp	r3, #0
    eaee:	ble.n	eafc <_dtoa_r+0x7b4>
    eaf0:	mov	r1, r6
    eaf2:	mov	r2, r3
    eaf4:	mov	r0, r4
    eaf6:	bl	fe30 <__lshift>
    eafa:	mov	r6, r0
    eafc:	ldr	r3, [sp, #28]
    eafe:	cmp	r3, #0
    eb00:	bne.w	ede0 <_dtoa_r+0xa98>
    eb04:	mov	r8, r6
    eb06:	ldr	r3, [sp, #32]
    eb08:	subs	r7, #1
    eb0a:	adds	r2, r3, r7
    eb0c:	str	r2, [sp, #36]	; 0x24
    eb0e:	and.w	r2, sl, #1
    eb12:	str	r2, [sp, #40]	; 0x28
    eb14:	mov	r7, r3
    eb16:	ldr.w	fp, [sp, #20]
    eb1a:	mov	r0, r5
    eb1c:	mov	r1, fp
    eb1e:	bl	e21c <quorem>
    eb22:	mov	r1, r6
    eb24:	mov	sl, r0
    eb26:	mov	r0, r5
    eb28:	bl	fee0 <__mcmp>
    eb2c:	mov	r2, r8
    eb2e:	mov	r1, fp
    eb30:	mov	r9, r0
    eb32:	mov	r0, r4
    eb34:	bl	ff24 <__mdiff>
    eb38:	ldr	r3, [r0, #12]
    eb3a:	mov	fp, r0
    eb3c:	add.w	r2, sl, #48	; 0x30
    eb40:	cmp	r3, #0
    eb42:	bne.n	ebd8 <_dtoa_r+0x890>
    eb44:	mov	r1, r0
    eb46:	mov	r0, r5
    eb48:	str	r2, [sp, #28]
    eb4a:	bl	fee0 <__mcmp>
    eb4e:	mov	r1, fp
    eb50:	str	r0, [sp, #24]
    eb52:	mov	r0, r4
    eb54:	bl	fa84 <_Bfree>
    eb58:	ldr	r3, [sp, #24]
    eb5a:	ldr	r2, [sp, #28]
    eb5c:	cbnz	r3, eb6a <_dtoa_r+0x822>
    eb5e:	ldr	r1, [sp, #4]
    eb60:	cbnz	r1, eb6a <_dtoa_r+0x822>
    eb62:	ldr	r1, [sp, #40]	; 0x28
    eb64:	cmp	r1, #0
    eb66:	beq.w	ef54 <_dtoa_r+0xc0c>
    eb6a:	cmp.w	r9, #0
    eb6e:	blt.w	ed30 <_dtoa_r+0x9e8>
    eb72:	bne.n	eb80 <_dtoa_r+0x838>
    eb74:	ldr	r1, [sp, #4]
    eb76:	cbnz	r1, eb80 <_dtoa_r+0x838>
    eb78:	ldr	r1, [sp, #40]	; 0x28
    eb7a:	cmp	r1, #0
    eb7c:	beq.w	ed30 <_dtoa_r+0x9e8>
    eb80:	cmp	r3, #0
    eb82:	bgt.w	ee08 <_dtoa_r+0xac0>
    eb86:	ldr	r3, [sp, #36]	; 0x24
    eb88:	strb	r2, [r7, #0]
    eb8a:	add.w	r9, r7, #1
    eb8e:	cmp	r7, r3
    eb90:	mov	fp, r9
    eb92:	beq.w	ee22 <_dtoa_r+0xada>
    eb96:	mov	r1, r5
    eb98:	movs	r3, #0
    eb9a:	movs	r2, #10
    eb9c:	mov	r0, r4
    eb9e:	bl	fa98 <__multadd>
    eba2:	cmp	r6, r8
    eba4:	mov	r5, r0
    eba6:	mov	r1, r6
    eba8:	mov.w	r3, #0
    ebac:	mov.w	r2, #10
    ebb0:	mov	r0, r4
    ebb2:	beq.n	ebcc <_dtoa_r+0x884>
    ebb4:	bl	fa98 <__multadd>
    ebb8:	mov	r1, r8
    ebba:	mov	r6, r0
    ebbc:	movs	r3, #0
    ebbe:	movs	r2, #10
    ebc0:	mov	r0, r4
    ebc2:	bl	fa98 <__multadd>
    ebc6:	mov	r7, r9
    ebc8:	mov	r8, r0
    ebca:	b.n	eb16 <_dtoa_r+0x7ce>
    ebcc:	bl	fa98 <__multadd>
    ebd0:	mov	r7, r9
    ebd2:	mov	r6, r0
    ebd4:	mov	r8, r0
    ebd6:	b.n	eb16 <_dtoa_r+0x7ce>
    ebd8:	mov	r1, r0
    ebda:	mov	r0, r4
    ebdc:	str	r2, [sp, #24]
    ebde:	bl	fa84 <_Bfree>
    ebe2:	movs	r3, #1
    ebe4:	ldr	r2, [sp, #24]
    ebe6:	b.n	eb6a <_dtoa_r+0x822>
    ebe8:	ldr	r1, [sp, #20]
    ebea:	mov	r0, r5
    ebec:	bl	fee0 <__mcmp>
    ebf0:	cmp	r0, #0
    ebf2:	bge.w	e7e6 <_dtoa_r+0x49e>
    ebf6:	mov	r1, r5
    ebf8:	ldr	r5, [sp, #8]
    ebfa:	movs	r3, #0
    ebfc:	subs	r5, #1
    ebfe:	movs	r2, #10
    ec00:	mov	r0, r4
    ec02:	str	r5, [sp, #8]
    ec04:	bl	fa98 <__multadd>
    ec08:	ldr	r3, [sp, #36]	; 0x24
    ec0a:	mov	r5, r0
    ec0c:	cmp	r3, #0
    ec0e:	bne.w	ead2 <_dtoa_r+0x78a>
    ec12:	ldr	r3, [sp, #52]	; 0x34
    ec14:	cmp	r3, #0
    ec16:	ble.w	ef74 <_dtoa_r+0xc2c>
    ec1a:	mov	r7, r3
    ec1c:	b.n	e7f4 <_dtoa_r+0x4ac>
    ec1e:	ldr	r5, [sp, #28]
    ec20:	b.n	e758 <_dtoa_r+0x410>
    ec22:	nop
    ec24:	.word	0x200002a8
    ec28:	.word	0x20000280
    ec2c:	ldr	r3, [sp, #4]
    ec2e:	cmp	r3, #2
    ec30:	ble.w	e7ec <_dtoa_r+0x4a4>
    ec34:	cmp	r7, #0
    ec36:	bne.w	ef0c <_dtoa_r+0xbc4>
    ec3a:	mov	r3, r7
    ec3c:	ldr	r1, [sp, #20]
    ec3e:	movs	r2, #5
    ec40:	mov	r0, r4
    ec42:	bl	fa98 <__multadd>
    ec46:	mov	r1, r0
    ec48:	str	r0, [sp, #20]
    ec4a:	mov	r0, r5
    ec4c:	bl	fee0 <__mcmp>
    ec50:	cmp	r0, #0
    ec52:	str	r5, [sp, #28]
    ec54:	ble.w	ea8e <_dtoa_r+0x746>
    ec58:	ldr	r2, [sp, #8]
    ec5a:	ldr	r1, [sp, #32]
    ec5c:	movs	r3, #49	; 0x31
    ec5e:	adds	r2, #1
    ec60:	str	r2, [sp, #8]
    ec62:	strb	r3, [r1, #0]
    ec64:	add.w	fp, r1, #1
    ec68:	b.n	ea98 <_dtoa_r+0x750>
    ec6a:	ldr	r2, [sp, #8]
    ec6c:	adds	r2, #1
    ec6e:	str	r2, [sp, #8]
    ec70:	ldr	r2, [sp, #32]
    ec72:	movs	r3, #49	; 0x31
    ec74:	strb	r3, [r2, #0]
    ec76:	b.n	e874 <_dtoa_r+0x52c>
    ec78:	movs	r3, #1
    ec7a:	str	r3, [sp, #36]	; 0x24
    ec7c:	b.n	e8b6 <_dtoa_r+0x56e>
    ec7e:	cmp.w	sl, #0
    ec82:	bne.w	e77e <_dtoa_r+0x436>
    ec86:	ubfx	r3, fp, #0, #20
    ec8a:	cmp	r3, #0
    ec8c:	bne.w	eec6 <_dtoa_r+0xb7e>
    ec90:	bic.w	r3, fp, #2147483648	; 0x80000000
    ec94:	lsrs	r3, r3, #20
    ec96:	lsls	r3, r3, #20
    ec98:	cmp	r3, #0
    ec9a:	beq.w	ef46 <_dtoa_r+0xbfe>
    ec9e:	ldr	r3, [sp, #24]
    eca0:	adds	r3, #1
    eca2:	str	r3, [sp, #24]
    eca4:	movs	r3, #1
    eca6:	add.w	r9, r9, #1
    ecaa:	str	r3, [sp, #28]
    ecac:	ldr	r3, [sp, #44]	; 0x2c
    ecae:	movs	r0, #1
    ecb0:	cmp	r3, #0
    ecb2:	beq.w	e794 <_dtoa_r+0x44c>
    ecb6:	b.n	e782 <_dtoa_r+0x43a>
    ecb8:	vmov	s15, r1
    ecbc:	vcvt.f64.s32	d6, s15
    ecc0:	vmov.f64	d7, #28	; 0x40e00000  7.0
    ecc4:	vfma.f64	d7, d4, d6
    ecc8:	vmov	r2, r3, d7
    eccc:	sub.w	r3, r3, #54525952	; 0x3400000
    ecd0:	vmov	d6, r2, r3
    ecd4:	vmov.f64	d7, #20	; 0x40a00000  5.0
    ecd8:	vsub.f64	d7, d4, d7
    ecdc:	vcmpe.f64	d7, d6
    ece0:	vmrs	APSR_nzcv, fpscr
    ece4:	bgt.w	eea2 <_dtoa_r+0xb5a>
    ece8:	vneg.f64	d6, d6
    ecec:	vcmpe.f64	d7, d6
    ecf0:	vmrs	APSR_nzcv, fpscr
    ecf4:	bpl.n	ed84 <_dtoa_r+0xa3c>
    ecf6:	movs	r3, #0
    ecf8:	str	r3, [sp, #20]
    ecfa:	mov	r6, r3
    ecfc:	b.n	ea8e <_dtoa_r+0x746>
    ecfe:	ldr	r0, [sp, #32]
    ed00:	b.w	e3b6 <_dtoa_r+0x6e>
    ed04:	ldr	r3, [sp, #20]
    ed06:	ldr	r1, [sp, #44]	; 0x2c
    ed08:	str	r2, [sp, #20]
    ed0a:	subs	r3, r2, r3
    ed0c:	add	r1, r3
    ed0e:	movs	r3, #0
    ed10:	str	r1, [sp, #44]	; 0x2c
    ed12:	str	r3, [sp, #56]	; 0x38
    ed14:	b.n	e65a <_dtoa_r+0x312>
    ed16:	vldr	d5, [sp, #56]	; 0x38
    ed1a:	movs	r1, #2
    ed1c:	b.n	e934 <_dtoa_r+0x5ec>
    ed1e:	mov	r5, r7
    ed20:	movs	r1, #0
    ed22:	str	r1, [r4, #68]	; 0x44
    ed24:	b.n	e8e6 <_dtoa_r+0x59e>
    ed26:	movs	r5, #1
    ed28:	str	r5, [sp, #52]	; 0x34
    ed2a:	mov	r7, r5
    ed2c:	mov	r8, r5
    ed2e:	b.n	ed20 <_dtoa_r+0x9d8>
    ed30:	cmp	r3, #0
    ed32:	mov	r9, r2
    ed34:	ble.n	ed5a <_dtoa_r+0xa12>
    ed36:	mov	r1, r5
    ed38:	movs	r2, #1
    ed3a:	mov	r0, r4
    ed3c:	bl	fe30 <__lshift>
    ed40:	ldr	r1, [sp, #20]
    ed42:	mov	r5, r0
    ed44:	bl	fee0 <__mcmp>
    ed48:	cmp	r0, #0
    ed4a:	ble.w	ef66 <_dtoa_r+0xc1e>
    ed4e:	cmp.w	r9, #57	; 0x39
    ed52:	beq.w	ef10 <_dtoa_r+0xbc8>
    ed56:	add.w	r9, sl, #49	; 0x31
    ed5a:	mov	sl, r6
    ed5c:	strb.w	r9, [r7]
    ed60:	add.w	fp, r7, #1
    ed64:	mov	r6, r8
    ed66:	str	r5, [sp, #28]
    ed68:	b.n	e874 <_dtoa_r+0x52c>
    ed6a:	bne.n	ed76 <_dtoa_r+0xa2e>
    ed6c:	tst.w	r9, #1
    ed70:	beq.n	ed76 <_dtoa_r+0xa2e>
    ed72:	b.n	e852 <_dtoa_r+0x50a>
    ed74:	mov	fp, r2
    ed76:	ldrb.w	r3, [fp, #-1]
    ed7a:	cmp	r3, #48	; 0x30
    ed7c:	add.w	r2, fp, #4294967295
    ed80:	beq.n	ed74 <_dtoa_r+0xa2c>
    ed82:	b.n	e874 <_dtoa_r+0x52c>
    ed84:	ldrd	sl, fp, [sp, #56]	; 0x38
    ed88:	b.w	e542 <_dtoa_r+0x1fa>
    ed8c:	ldr	r3, [sp, #8]
    ed8e:	negs	r3, r3
    ed90:	cmp	r3, #0
    ed92:	beq.w	eecc <_dtoa_r+0xb84>
    ed96:	ldr	r2, [pc, #556]	; (efc4 <_dtoa_r+0xc7c>)
    ed98:	and.w	r1, r3, #15
    ed9c:	add.w	r2, r2, r1, lsl #3
    eda0:	vldr	d7, [r2]
    eda4:	vldr	d6, [sp, #56]	; 0x38
    eda8:	asrs	r3, r3, #4
    edaa:	vmul.f64	d4, d6, d7
    edae:	beq.w	ef7e <_dtoa_r+0xc36>
    edb2:	ldr	r2, [pc, #532]	; (efc8 <_dtoa_r+0xc80>)
    edb4:	movs	r1, #2
    edb6:	lsls	r0, r3, #31
    edb8:	bpl.n	edc4 <_dtoa_r+0xa7c>
    edba:	vldr	d7, [r2]
    edbe:	adds	r1, #1
    edc0:	vmul.f64	d4, d4, d7
    edc4:	asrs	r3, r3, #1
    edc6:	add.w	r2, r2, #8
    edca:	bne.n	edb6 <_dtoa_r+0xa6e>
    edcc:	b.n	e952 <_dtoa_r+0x60a>
    edce:	ldr	r1, [sp, #32]
    edd0:	movs	r2, #48	; 0x30
    edd2:	strb	r2, [r1, #0]
    edd4:	ldr	r2, [sp, #8]
    edd6:	ldrb.w	r0, [fp, #-1]
    edda:	adds	r2, #1
    eddc:	str	r2, [sp, #8]
    edde:	b.n	e610 <_dtoa_r+0x2c8>
    ede0:	ldr	r1, [r6, #4]
    ede2:	mov	r0, r4
    ede4:	bl	fa38 <_Balloc>
    ede8:	ldr	r3, [r6, #16]
    edea:	adds	r2, r3, #2
    edec:	mov	r8, r0
    edee:	lsls	r2, r2, #2
    edf0:	add.w	r1, r6, #12
    edf4:	adds	r0, #12
    edf6:	bl	7fb0 <memcpy>
    edfa:	mov	r1, r8
    edfc:	movs	r2, #1
    edfe:	mov	r0, r4
    ee00:	bl	fe30 <__lshift>
    ee04:	mov	r8, r0
    ee06:	b.n	eb06 <_dtoa_r+0x7be>
    ee08:	cmp	r2, #57	; 0x39
    ee0a:	beq.w	ef10 <_dtoa_r+0xbc8>
    ee0e:	add.w	r9, r2, #1
    ee12:	mov	sl, r6
    ee14:	strb.w	r9, [r7]
    ee18:	add.w	fp, r7, #1
    ee1c:	mov	r6, r8
    ee1e:	str	r5, [sp, #28]
    ee20:	b.n	e874 <_dtoa_r+0x52c>
    ee22:	mov	sl, r6
    ee24:	mov	r9, r2
    ee26:	mov	r6, r8
    ee28:	b.n	e83a <_dtoa_r+0x4f2>
    ee2a:	ldr	r0, [pc, #408]	; (efc4 <_dtoa_r+0xc7c>)
    ee2c:	vcvt.s32.f64	s12, d4
    ee30:	subs	r5, r1, #1
    ee32:	add.w	r0, r0, r5, lsl #3
    ee36:	vmov	d7, r2, r3
    ee3a:	vldr	d3, [r0]
    ee3e:	vmov	r3, s12
    ee42:	vmul.f64	d3, d3, d7
    ee46:	ldr	r0, [sp, #32]
    ee48:	adds	r3, #48	; 0x30
    ee4a:	cmp	r1, #1
    ee4c:	vcvt.f64.s32	d6, s12
    ee50:	strb	r3, [r0, #0]
    ee52:	add.w	fp, r0, #1
    ee56:	vsub.f64	d7, d4, d6
    ee5a:	beq.n	ee86 <_dtoa_r+0xb3e>
    ee5c:	vmov.f64	d5, #36	; 0x41200000  10.0
    ee60:	ldr	r3, [sp, #32]
    ee62:	add	r1, r3
    ee64:	mov	r3, fp
    ee66:	vmul.f64	d7, d7, d5
    ee6a:	vcvt.s32.f64	s12, d7
    ee6e:	vmov	r2, s12
    ee72:	adds	r2, #48	; 0x30
    ee74:	strb.w	r2, [r3], #1
    ee78:	cmp	r1, r3
    ee7a:	vcvt.f64.s32	d6, s12
    ee7e:	vsub.f64	d7, d7, d6
    ee82:	bne.n	ee66 <_dtoa_r+0xb1e>
    ee84:	add	fp, r5
    ee86:	vmov.f64	d6, #96	; 0x3f000000  0.5
    ee8a:	vadd.f64	d5, d3, d6
    ee8e:	vcmpe.f64	d5, d7
    ee92:	vmrs	APSR_nzcv, fpscr
    ee96:	bpl.n	ef20 <_dtoa_r+0xbd8>
    ee98:	str	r6, [sp, #8]
    ee9a:	ldrb.w	r0, [fp, #-1]
    ee9e:	b.w	e5f6 <_dtoa_r+0x2ae>
    eea2:	movs	r3, #0
    eea4:	str	r3, [sp, #20]
    eea6:	mov	r6, r3
    eea8:	b.n	ec58 <_dtoa_r+0x910>
    eeaa:	subs	r3, r3, r7
    eeac:	str	r3, [sp, #40]	; 0x28
    eeae:	movs	r3, #0
    eeb0:	b.w	e666 <_dtoa_r+0x31e>
    eeb4:	ldr	r2, [sp, #20]
    eeb6:	ldr	r3, [sp, #64]	; 0x40
    eeb8:	str	r2, [sp, #56]	; 0x38
    eeba:	ldr	r2, [sp, #24]
    eebc:	str	r2, [sp, #40]	; 0x28
    eebe:	rsb	r3, r3, #54	; 0x36
    eec2:	b.w	e666 <_dtoa_r+0x31e>
    eec6:	movs	r3, #0
    eec8:	str	r3, [sp, #28]
    eeca:	b.n	ecac <_dtoa_r+0x964>
    eecc:	vldr	d4, [sp, #56]	; 0x38
    eed0:	movs	r1, #2
    eed2:	b.n	e952 <_dtoa_r+0x60a>
    eed4:	cmp	r7, #0
    eed6:	beq.w	ecb8 <_dtoa_r+0x970>
    eeda:	ldr	r0, [sp, #52]	; 0x34
    eedc:	cmp	r0, #0
    eede:	ble.w	ed84 <_dtoa_r+0xa3c>
    eee2:	vmov.f64	d5, #36	; 0x41200000  10.0
    eee6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    eeea:	adds	r1, #1
    eeec:	vmov	s13, r1
    eef0:	vmul.f64	d4, d4, d5
    eef4:	ldr	r3, [sp, #8]
    eef6:	vcvt.f64.s32	d6, s13
    eefa:	subs	r6, r3, #1
    eefc:	vfma.f64	d7, d4, d6
    ef00:	vmov	r2, r3, d7
    ef04:	mov	r1, r0
    ef06:	sub.w	r3, r3, #54525952	; 0x3400000
    ef0a:	b.n	e988 <_dtoa_r+0x640>
    ef0c:	str	r5, [sp, #28]
    ef0e:	b.n	ea8e <_dtoa_r+0x746>
    ef10:	movs	r2, #57	; 0x39
    ef12:	mov	sl, r6
    ef14:	str	r5, [sp, #28]
    ef16:	mov	r6, r8
    ef18:	strb	r2, [r7, #0]
    ef1a:	add.w	fp, r7, #1
    ef1e:	b.n	e856 <_dtoa_r+0x50e>
    ef20:	vsub.f64	d6, d6, d3
    ef24:	vcmpe.f64	d6, d7
    ef28:	vmrs	APSR_nzcv, fpscr
    ef2c:	bgt.n	ef32 <_dtoa_r+0xbea>
    ef2e:	b.n	ed84 <_dtoa_r+0xa3c>
    ef30:	mov	fp, r2
    ef32:	ldrb.w	r3, [fp, #-1]
    ef36:	cmp	r3, #48	; 0x30
    ef38:	add.w	r2, fp, #4294967295
    ef3c:	beq.n	ef30 <_dtoa_r+0xbe8>
    ef3e:	b.n	ea36 <_dtoa_r+0x6ee>
    ef40:	str	r6, [sp, #8]
    ef42:	b.w	e5f6 <_dtoa_r+0x2ae>
    ef46:	str	r3, [sp, #28]
    ef48:	b.n	ecac <_dtoa_r+0x964>
    ef4a:	cmp.w	sl, #0
    ef4e:	bne.w	eaca <_dtoa_r+0x782>
    ef52:	b.n	ec86 <_dtoa_r+0x93e>
    ef54:	cmp	r2, #57	; 0x39
    ef56:	mov	fp, r9
    ef58:	mov	r9, r2
    ef5a:	beq.n	ef10 <_dtoa_r+0xbc8>
    ef5c:	cmp.w	fp, #0
    ef60:	bgt.w	ed56 <_dtoa_r+0xa0e>
    ef64:	b.n	ed5a <_dtoa_r+0xa12>
    ef66:	bne.w	ed5a <_dtoa_r+0xa12>
    ef6a:	tst.w	r9, #1
    ef6e:	beq.w	ed5a <_dtoa_r+0xa12>
    ef72:	b.n	ed4e <_dtoa_r+0xa06>
    ef74:	ldr	r3, [sp, #4]
    ef76:	cmp	r3, #2
    ef78:	bgt.n	ef8c <_dtoa_r+0xc44>
    ef7a:	ldr	r7, [sp, #52]	; 0x34
    ef7c:	b.n	e7f4 <_dtoa_r+0x4ac>
    ef7e:	movs	r1, #2
    ef80:	b.n	e952 <_dtoa_r+0x60a>
    ef82:	ldr	r3, [sp, #4]
    ef84:	cmp	r3, #2
    ef86:	bgt.n	ef8c <_dtoa_r+0xc44>
    ef88:	ldr	r7, [sp, #52]	; 0x34
    ef8a:	b.n	eaea <_dtoa_r+0x7a2>
    ef8c:	ldr	r7, [sp, #52]	; 0x34
    ef8e:	b.n	ec34 <_dtoa_r+0x8ec>
    ef90:	movs	r3, #1
    ef92:	str	r3, [sp, #56]	; 0x38
    ef94:	b.w	e4da <_dtoa_r+0x192>
    ef98:	beq.w	e7ba <_dtoa_r+0x472>
    ef9c:	rsb	r0, r0, #60	; 0x3c
    efa0:	b.n	e7ac <_dtoa_r+0x464>
    efa2:	movs	r5, #0
    efa4:	str	r5, [r4, #68]	; 0x44
    efa6:	mov	r1, r5
    efa8:	mov	r0, r4
    efaa:	bl	fa38 <_Balloc>
    efae:	mov.w	r7, #4294967295
    efb2:	movs	r3, #1
    efb4:	str	r0, [sp, #32]
    efb6:	mov	r8, r5
    efb8:	str	r0, [r4, #64]	; 0x40
    efba:	str	r7, [sp, #52]	; 0x34
    efbc:	str	r3, [sp, #36]	; 0x24
    efbe:	b.w	e542 <_dtoa_r+0x1fa>
    efc2:	nop
    efc4:	.word	0x200002a8
    efc8:	.word	0x20000280

0000efcc <_malloc_trim_r>:
    efcc:	push	{r3, r4, r5, r6, r7, lr}
    efce:	ldr	r7, [pc, #140]	; (f05c <_malloc_trim_r+0x90>)
    efd0:	mov	r4, r1
    efd2:	mov	r6, r0
    efd4:	bl	a67c <__malloc_lock>
    efd8:	ldr	r3, [r7, #8]
    efda:	ldr	r5, [r3, #4]
    efdc:	bic.w	r5, r5, #3
    efe0:	subs	r1, r5, r4
    efe2:	addw	r1, r1, #4079	; 0xfef
    efe6:	bic.w	r1, r1, #4080	; 0xff0
    efea:	bic.w	r1, r1, #15
    efee:	sub.w	r4, r1, #4096	; 0x1000
    eff2:	cmp.w	r4, #4096	; 0x1000
    eff6:	blt.n	f008 <_malloc_trim_r+0x3c>
    eff8:	movs	r1, #0
    effa:	mov	r0, r6
    effc:	bl	aa64 <_sbrk_r>
    f000:	ldr	r3, [r7, #8]
    f002:	add	r3, r5
    f004:	cmp	r0, r3
    f006:	beq.n	f012 <_malloc_trim_r+0x46>
    f008:	mov	r0, r6
    f00a:	bl	a680 <__malloc_unlock>
    f00e:	movs	r0, #0
    f010:	pop	{r3, r4, r5, r6, r7, pc}
    f012:	negs	r1, r4
    f014:	mov	r0, r6
    f016:	bl	aa64 <_sbrk_r>
    f01a:	adds	r0, #1
    f01c:	beq.n	f03a <_malloc_trim_r+0x6e>
    f01e:	ldr	r3, [pc, #64]	; (f060 <_malloc_trim_r+0x94>)
    f020:	ldr	r2, [r7, #8]
    f022:	ldr	r1, [r3, #0]
    f024:	subs	r5, r5, r4
    f026:	orr.w	r5, r5, #1
    f02a:	mov	r0, r6
    f02c:	subs	r1, r1, r4
    f02e:	str	r5, [r2, #4]
    f030:	str	r1, [r3, #0]
    f032:	bl	a680 <__malloc_unlock>
    f036:	movs	r0, #1
    f038:	pop	{r3, r4, r5, r6, r7, pc}
    f03a:	movs	r1, #0
    f03c:	mov	r0, r6
    f03e:	bl	aa64 <_sbrk_r>
    f042:	ldr	r2, [r7, #8]
    f044:	subs	r3, r0, r2
    f046:	cmp	r3, #15
    f048:	ble.n	f008 <_malloc_trim_r+0x3c>
    f04a:	ldr	r4, [pc, #24]	; (f064 <_malloc_trim_r+0x98>)
    f04c:	ldr	r1, [pc, #16]	; (f060 <_malloc_trim_r+0x94>)
    f04e:	ldr	r4, [r4, #0]
    f050:	orr.w	r3, r3, #1
    f054:	subs	r0, r0, r4
    f056:	str	r3, [r2, #4]
    f058:	str	r0, [r1, #0]
    f05a:	b.n	f008 <_malloc_trim_r+0x3c>
    f05c:	.word	0x2000199c
    f060:	.word	0x20003590
    f064:	.word	0x20001da4

0000f068 <_free_r>:
    f068:	cmp	r1, #0
    f06a:	beq.n	f0f8 <_free_r+0x90>
    f06c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f070:	mov	r5, r1
    f072:	mov	r8, r0
    f074:	bl	a67c <__malloc_lock>
    f078:	ldr.w	r7, [r5, #-4]
    f07c:	ldr	r1, [pc, #424]	; (f228 <_free_r+0x1c0>)
    f07e:	bic.w	r3, r7, #1
    f082:	sub.w	r4, r5, #8
    f086:	adds	r2, r4, r3
    f088:	ldr	r6, [r1, #8]
    f08a:	ldr	r0, [r2, #4]
    f08c:	cmp	r2, r6
    f08e:	bic.w	r0, r0, #3
    f092:	beq.n	f15a <_free_r+0xf2>
    f094:	lsls	r6, r7, #31
    f096:	str	r0, [r2, #4]
    f098:	bmi.n	f0b2 <_free_r+0x4a>
    f09a:	ldr.w	r7, [r5, #-8]
    f09e:	subs	r4, r4, r7
    f0a0:	add.w	lr, r1, #8
    f0a4:	ldr	r5, [r4, #8]
    f0a6:	cmp	r5, lr
    f0a8:	add	r3, r7
    f0aa:	beq.n	f18c <_free_r+0x124>
    f0ac:	ldr	r7, [r4, #12]
    f0ae:	str	r7, [r5, #12]
    f0b0:	str	r5, [r7, #8]
    f0b2:	adds	r5, r2, r0
    f0b4:	ldr	r5, [r5, #4]
    f0b6:	lsls	r5, r5, #31
    f0b8:	bpl.n	f140 <_free_r+0xd8>
    f0ba:	orr.w	r2, r3, #1
    f0be:	str	r2, [r4, #4]
    f0c0:	str	r3, [r4, r3]
    f0c2:	cmp.w	r3, #512	; 0x200
    f0c6:	bcs.n	f0fa <_free_r+0x92>
    f0c8:	lsrs	r3, r3, #3
    f0ca:	adds	r2, r3, #1
    f0cc:	ldr	r5, [r1, #4]
    f0ce:	ldr.w	r7, [r1, r2, lsl #3]
    f0d2:	str	r7, [r4, #8]
    f0d4:	movs	r0, #1
    f0d6:	asrs	r3, r3, #2
    f0d8:	lsl.w	r3, r0, r3
    f0dc:	add.w	r0, r1, r2, lsl #3
    f0e0:	orrs	r5, r3
    f0e2:	subs	r0, #8
    f0e4:	str	r0, [r4, #12]
    f0e6:	str	r5, [r1, #4]
    f0e8:	str.w	r4, [r1, r2, lsl #3]
    f0ec:	str	r4, [r7, #12]
    f0ee:	mov	r0, r8
    f0f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f0f4:	b.w	a680 <__malloc_unlock>
    f0f8:	bx	lr
    f0fa:	lsrs	r2, r3, #9
    f0fc:	cmp	r2, #4
    f0fe:	bhi.n	f1a8 <_free_r+0x140>
    f100:	lsrs	r2, r3, #6
    f102:	add.w	r7, r2, #57	; 0x39
    f106:	lsls	r7, r7, #1
    f108:	add.w	r5, r2, #56	; 0x38
    f10c:	add.w	r0, r1, r7, lsl #2
    f110:	ldr.w	r2, [r1, r7, lsl #2]
    f114:	ldr	r1, [pc, #272]	; (f228 <_free_r+0x1c0>)
    f116:	subs	r0, #8
    f118:	cmp	r0, r2
    f11a:	beq.n	f1b8 <_free_r+0x150>
    f11c:	ldr	r1, [r2, #4]
    f11e:	bic.w	r1, r1, #3
    f122:	cmp	r3, r1
    f124:	bcs.n	f12c <_free_r+0xc4>
    f126:	ldr	r2, [r2, #8]
    f128:	cmp	r0, r2
    f12a:	bne.n	f11c <_free_r+0xb4>
    f12c:	ldr	r0, [r2, #12]
    f12e:	str	r0, [r4, #12]
    f130:	str	r2, [r4, #8]
    f132:	str	r4, [r0, #8]
    f134:	str	r4, [r2, #12]
    f136:	mov	r0, r8
    f138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f13c:	b.w	a680 <__malloc_unlock>
    f140:	ldr	r5, [r2, #8]
    f142:	ldr	r7, [pc, #232]	; (f22c <_free_r+0x1c4>)
    f144:	cmp	r5, r7
    f146:	add	r3, r0
    f148:	beq.n	f1ca <_free_r+0x162>
    f14a:	ldr	r0, [r2, #12]
    f14c:	str	r0, [r5, #12]
    f14e:	orr.w	r2, r3, #1
    f152:	str	r5, [r0, #8]
    f154:	str	r2, [r4, #4]
    f156:	str	r3, [r4, r3]
    f158:	b.n	f0c2 <_free_r+0x5a>
    f15a:	lsls	r7, r7, #31
    f15c:	add	r3, r0
    f15e:	bmi.n	f170 <_free_r+0x108>
    f160:	ldr.w	r2, [r5, #-8]
    f164:	subs	r4, r4, r2
    f166:	add	r3, r2
    f168:	ldr	r0, [r4, #8]
    f16a:	ldr	r2, [r4, #12]
    f16c:	str	r2, [r0, #12]
    f16e:	str	r0, [r2, #8]
    f170:	ldr	r2, [pc, #188]	; (f230 <_free_r+0x1c8>)
    f172:	ldr	r2, [r2, #0]
    f174:	orr.w	r0, r3, #1
    f178:	cmp	r3, r2
    f17a:	str	r0, [r4, #4]
    f17c:	str	r4, [r1, #8]
    f17e:	bcc.n	f0ee <_free_r+0x86>
    f180:	ldr	r3, [pc, #176]	; (f234 <_free_r+0x1cc>)
    f182:	mov	r0, r8
    f184:	ldr	r1, [r3, #0]
    f186:	bl	efcc <_malloc_trim_r>
    f18a:	b.n	f0ee <_free_r+0x86>
    f18c:	adds	r1, r2, r0
    f18e:	ldr	r1, [r1, #4]
    f190:	lsls	r1, r1, #31
    f192:	bmi.n	f21e <_free_r+0x1b6>
    f194:	ldr	r1, [r2, #8]
    f196:	ldr	r2, [r2, #12]
    f198:	str	r2, [r1, #12]
    f19a:	add	r3, r0
    f19c:	orr.w	r0, r3, #1
    f1a0:	str	r1, [r2, #8]
    f1a2:	str	r0, [r4, #4]
    f1a4:	str	r3, [r4, r3]
    f1a6:	b.n	f0ee <_free_r+0x86>
    f1a8:	cmp	r2, #20
    f1aa:	bhi.n	f1dc <_free_r+0x174>
    f1ac:	add.w	r7, r2, #92	; 0x5c
    f1b0:	lsls	r7, r7, #1
    f1b2:	add.w	r5, r2, #91	; 0x5b
    f1b6:	b.n	f10c <_free_r+0xa4>
    f1b8:	asrs	r2, r5, #2
    f1ba:	ldr	r3, [r1, #4]
    f1bc:	movs	r5, #1
    f1be:	lsl.w	r2, r5, r2
    f1c2:	orrs	r3, r2
    f1c4:	str	r3, [r1, #4]
    f1c6:	mov	r2, r0
    f1c8:	b.n	f12e <_free_r+0xc6>
    f1ca:	orr.w	r2, r3, #1
    f1ce:	str	r4, [r1, #20]
    f1d0:	str	r4, [r1, #16]
    f1d2:	str	r5, [r4, #12]
    f1d4:	str	r5, [r4, #8]
    f1d6:	str	r2, [r4, #4]
    f1d8:	str	r3, [r4, r3]
    f1da:	b.n	f0ee <_free_r+0x86>
    f1dc:	cmp	r2, #84	; 0x54
    f1de:	bhi.n	f1ee <_free_r+0x186>
    f1e0:	lsrs	r2, r3, #12
    f1e2:	add.w	r7, r2, #111	; 0x6f
    f1e6:	lsls	r7, r7, #1
    f1e8:	add.w	r5, r2, #110	; 0x6e
    f1ec:	b.n	f10c <_free_r+0xa4>
    f1ee:	cmp.w	r2, #340	; 0x154
    f1f2:	bhi.n	f202 <_free_r+0x19a>
    f1f4:	lsrs	r2, r3, #15
    f1f6:	add.w	r7, r2, #120	; 0x78
    f1fa:	lsls	r7, r7, #1
    f1fc:	add.w	r5, r2, #119	; 0x77
    f200:	b.n	f10c <_free_r+0xa4>
    f202:	movw	r0, #1364	; 0x554
    f206:	cmp	r2, r0
    f208:	bhi.n	f218 <_free_r+0x1b0>
    f20a:	lsrs	r2, r3, #18
    f20c:	add.w	r7, r2, #125	; 0x7d
    f210:	lsls	r7, r7, #1
    f212:	add.w	r5, r2, #124	; 0x7c
    f216:	b.n	f10c <_free_r+0xa4>
    f218:	movs	r7, #254	; 0xfe
    f21a:	movs	r5, #126	; 0x7e
    f21c:	b.n	f10c <_free_r+0xa4>
    f21e:	orr.w	r2, r3, #1
    f222:	str	r2, [r4, #4]
    f224:	str	r3, [r4, r3]
    f226:	b.n	f0ee <_free_r+0x86>
    f228:	.word	0x2000199c
    f22c:	.word	0x200019a4
    f230:	.word	0x20001da8
    f234:	.word	0x200035c0

0000f238 <rshift>:
    f238:	ldr	r2, [r0, #16]
    f23a:	asrs	r3, r1, #5
    f23c:	cmp	r3, r2
    f23e:	bge.n	f29e <rshift+0x66>
    f240:	push	{r4, r5, r6, r7, lr}
    f242:	ands.w	r1, r1, #31
    f246:	add.w	r6, r0, #20
    f24a:	add.w	r2, r6, r2, lsl #2
    f24e:	add.w	lr, r6, r3, lsl #2
    f252:	beq.n	f2a8 <rshift+0x70>
    f254:	ldr.w	r3, [r6, r3, lsl #2]
    f258:	add.w	r5, lr, #4
    f25c:	cmp	r2, r5
    f25e:	lsr.w	r4, r3, r1
    f262:	rsb	ip, r1, #32
    f266:	bls.n	f2dc <rshift+0xa4>
    f268:	add.w	r7, r0, #16
    f26c:	ldr	r3, [r5, #0]
    f26e:	lsl.w	r3, r3, ip
    f272:	orrs	r3, r4
    f274:	str.w	r3, [r7, #4]!
    f278:	ldr.w	r3, [r5], #4
    f27c:	cmp	r2, r5
    f27e:	lsr.w	r4, r3, r1
    f282:	bhi.n	f26c <rshift+0x34>
    f284:	rsb	r2, lr, r2
    f288:	subs	r2, #5
    f28a:	bic.w	r2, r2, #3
    f28e:	adds	r2, #4
    f290:	add	r2, r6
    f292:	str	r4, [r2, #0]
    f294:	cbz	r4, f298 <rshift+0x60>
    f296:	adds	r2, #4
    f298:	subs	r3, r2, r6
    f29a:	asrs	r3, r3, #2
    f29c:	b.n	f2cc <rshift+0x94>
    f29e:	movs	r3, #0
    f2a0:	str	r3, [r0, #16]
    f2a2:	movs	r3, #0
    f2a4:	str	r3, [r0, #20]
    f2a6:	bx	lr
    f2a8:	cmp	r2, lr
    f2aa:	bls.n	f2d2 <rshift+0x9a>
    f2ac:	add.w	r4, r0, #16
    f2b0:	mov	r1, lr
    f2b2:	ldr.w	r5, [r1], #4
    f2b6:	str.w	r5, [r4, #4]!
    f2ba:	cmp	r2, r1
    f2bc:	bhi.n	f2b2 <rshift+0x7a>
    f2be:	mvn.w	r3, lr
    f2c2:	add	r3, r2
    f2c4:	bic.w	r3, r3, #3
    f2c8:	adds	r3, #4
    f2ca:	asrs	r3, r3, #2
    f2cc:	str	r3, [r0, #16]
    f2ce:	cbz	r3, f2d6 <rshift+0x9e>
    f2d0:	pop	{r4, r5, r6, r7, pc}
    f2d2:	movs	r3, #0
    f2d4:	str	r3, [r0, #16]
    f2d6:	movs	r3, #0
    f2d8:	str	r3, [r0, #20]
    f2da:	pop	{r4, r5, r6, r7, pc}
    f2dc:	mov	r2, r6
    f2de:	b.n	f292 <rshift+0x5a>

0000f2e0 <__gethex>:
    f2e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2e4:	sub	sp, #44	; 0x2c
    f2e6:	mov	r9, r1
    f2e8:	str	r0, [sp, #20]
    f2ea:	ldr	r0, [sp, #88]	; 0x58
    f2ec:	str	r2, [sp, #12]
    f2ee:	str	r3, [sp, #32]
    f2f0:	bl	f9bc <__localeconv_l>
    f2f4:	ldr	r3, [r0, #0]
    f2f6:	str	r3, [sp, #8]
    f2f8:	mov	r0, r3
    f2fa:	mov	r4, r3
    f2fc:	bl	ab40 <strlen>
    f300:	ldr.w	r3, [r9]
    f304:	str	r0, [sp, #0]
    f306:	ldrb	r2, [r3, #2]
    f308:	adds	r1, r4, r0
    f30a:	cmp	r2, #48	; 0x30
    f30c:	ldrb.w	fp, [r1, #-1]
    f310:	bne.w	f666 <__gethex+0x386>
    f314:	adds	r3, #3
    f316:	mov.w	r8, #0
    f31a:	mov	r4, r3
    f31c:	ldrb.w	r2, [r3], #1
    f320:	cmp	r2, #48	; 0x30
    f322:	add.w	r8, r8, #1
    f326:	beq.n	f31a <__gethex+0x3a>
    f328:	ldr	r6, [pc, #712]	; (f5f4 <__gethex+0x314>)
    f32a:	ldrb	r3, [r6, r2]
    f32c:	cmp	r3, #0
    f32e:	beq.w	f512 <__gethex+0x232>
    f332:	ldrb	r3, [r4, #0]
    f334:	mov.w	sl, #0
    f338:	ldrb	r3, [r6, r3]
    f33a:	mov	r5, sl
    f33c:	mov	r7, r4
    f33e:	cbz	r3, f34a <__gethex+0x6a>
    f340:	ldrb.w	r3, [r7, #1]!
    f344:	ldrb	r3, [r6, r3]
    f346:	cmp	r3, #0
    f348:	bne.n	f340 <__gethex+0x60>
    f34a:	ldr	r2, [sp, #0]
    f34c:	ldr	r1, [sp, #8]
    f34e:	mov	r0, r7
    f350:	bl	ac1c <strncmp>
    f354:	cmp	r0, #0
    f356:	beq.w	f47e <__gethex+0x19e>
    f35a:	ldrb	r3, [r7, #0]
    f35c:	cmp	r5, #0
    f35e:	beq.w	f644 <__gethex+0x364>
    f362:	subs	r5, r5, r7
    f364:	lsls	r2, r5, #2
    f366:	str	r2, [sp, #4]
    f368:	cmp	r3, #80	; 0x50
    f36a:	beq.w	f490 <__gethex+0x1b0>
    f36e:	cmp	r3, #112	; 0x70
    f370:	beq.w	f490 <__gethex+0x1b0>
    f374:	mov	r5, r7
    f376:	str.w	r7, [r9]
    f37a:	cmp.w	sl, #0
    f37e:	bne.w	f4f0 <__gethex+0x210>
    f382:	subs	r3, r5, r4
    f384:	subs	r3, #1
    f386:	cmp	r3, #7
    f388:	mov	r1, sl
    f38a:	ble.n	f396 <__gethex+0xb6>
    f38c:	asrs	r3, r3, #1
    f38e:	cmp	r3, #7
    f390:	add.w	r1, r1, #1
    f394:	bgt.n	f38c <__gethex+0xac>
    f396:	ldr	r0, [sp, #20]
    f398:	bl	fa38 <_Balloc>
    f39c:	mov	r3, r0
    f39e:	adds	r3, #20
    f3a0:	cmp	r5, r4
    f3a2:	str	r0, [sp, #16]
    f3a4:	str	r3, [sp, #28]
    f3a6:	bls.w	f750 <__gethex+0x470>
    f3aa:	mov	r9, r3
    f3ac:	ldr	r3, [sp, #0]
    f3ae:	mov.w	r8, #0
    f3b2:	rsb	r3, r3, #1
    f3b6:	mov	r7, r8
    f3b8:	str	r3, [sp, #24]
    f3ba:	b.n	f3dc <__gethex+0xfc>
    f3bc:	cmp	r7, #32
    f3be:	beq.w	f500 <__gethex+0x220>
    f3c2:	mov	r2, r7
    f3c4:	adds	r7, #4
    f3c6:	ldrb.w	r3, [r5, #-1]
    f3ca:	ldrb	r3, [r6, r3]
    f3cc:	mov	r5, sl
    f3ce:	and.w	r3, r3, #15
    f3d2:	lsls	r3, r2
    f3d4:	cmp	r5, r4
    f3d6:	orr.w	r8, r8, r3
    f3da:	bls.n	f408 <__gethex+0x128>
    f3dc:	ldrb.w	r3, [r5, #-1]
    f3e0:	cmp	r3, fp
    f3e2:	add.w	sl, r5, #4294967295
    f3e6:	bne.n	f3bc <__gethex+0xdc>
    f3e8:	ldr	r3, [sp, #24]
    f3ea:	add	r3, sl
    f3ec:	cmp	r3, r4
    f3ee:	bcc.n	f3bc <__gethex+0xdc>
    f3f0:	mov	r0, r3
    f3f2:	ldr	r2, [sp, #0]
    f3f4:	ldr	r1, [sp, #8]
    f3f6:	str	r3, [sp, #36]	; 0x24
    f3f8:	bl	ac1c <strncmp>
    f3fc:	ldr	r3, [sp, #36]	; 0x24
    f3fe:	cmp	r0, #0
    f400:	bne.n	f3bc <__gethex+0xdc>
    f402:	mov	r5, r3
    f404:	cmp	r5, r4
    f406:	bhi.n	f3dc <__gethex+0xfc>
    f408:	str.w	r8, [r9], #4
    f40c:	ldr	r3, [sp, #28]
    f40e:	ldr	r2, [sp, #16]
    f410:	rsb	r9, r3, r9
    f414:	mov.w	r3, r9, asr #2
    f418:	str	r3, [r2, #16]
    f41a:	mov	r0, r8
    f41c:	mov.w	r9, r3, lsl #5
    f420:	bl	fbb0 <__hi0bits>
    f424:	ldr	r3, [sp, #12]
    f426:	ldr	r6, [r3, #0]
    f428:	rsb	r0, r0, r9
    f42c:	cmp	r0, r6
    f42e:	bgt.w	f5f8 <__gethex+0x318>
    f432:	blt.w	f648 <__gethex+0x368>
    f436:	movs	r7, #0
    f438:	ldr	r3, [sp, #12]
    f43a:	ldr	r2, [sp, #4]
    f43c:	ldr	r3, [r3, #8]
    f43e:	cmp	r2, r3
    f440:	bgt.w	f572 <__gethex+0x292>
    f444:	ldr	r0, [sp, #12]
    f446:	ldr	r1, [sp, #4]
    f448:	ldr	r3, [r0, #4]
    f44a:	cmp	r1, r3
    f44c:	bge.w	f5ba <__gethex+0x2da>
    f450:	subs	r5, r3, r1
    f452:	cmp	r6, r5
    f454:	bgt.w	f676 <__gethex+0x396>
    f458:	ldr	r2, [r0, #12]
    f45a:	cmp	r2, #2
    f45c:	beq.w	f75e <__gethex+0x47e>
    f460:	cmp	r2, #3
    f462:	beq.w	f71e <__gethex+0x43e>
    f466:	cmp	r2, #1
    f468:	beq.w	f766 <__gethex+0x486>
    f46c:	ldr	r0, [sp, #20]
    f46e:	ldr	r1, [sp, #16]
    f470:	bl	fa84 <_Bfree>
    f474:	ldr	r2, [sp, #80]	; 0x50
    f476:	movs	r3, #0
    f478:	str	r3, [r2, #0]
    f47a:	movs	r0, #80	; 0x50
    f47c:	b.n	f4fa <__gethex+0x21a>
    f47e:	cmp	r5, #0
    f480:	beq.w	f6b6 <__gethex+0x3d6>
    f484:	ldrb	r3, [r7, #0]
    f486:	b.n	f362 <__gethex+0x82>
    f488:	movs	r3, #0
    f48a:	str	r3, [sp, #4]
    f48c:	mov.w	sl, #1
    f490:	ldrb	r3, [r7, #1]
    f492:	cmp	r3, #43	; 0x2b
    f494:	beq.w	f5f0 <__gethex+0x310>
    f498:	cmp	r3, #45	; 0x2d
    f49a:	beq.n	f588 <__gethex+0x2a8>
    f49c:	adds	r1, r7, #1
    f49e:	movs	r5, #0
    f4a0:	ldrb	r3, [r6, r3]
    f4a2:	ldr	r0, [pc, #336]	; (f5f4 <__gethex+0x314>)
    f4a4:	subs	r2, r3, #1
    f4a6:	cmp	r2, #24
    f4a8:	bhi.w	f374 <__gethex+0x94>
    f4ac:	ldrb	r2, [r1, #1]
    f4ae:	ldrb	r2, [r0, r2]
    f4b0:	subs	r0, r2, #1
    f4b2:	cmp	r0, #24
    f4b4:	sub.w	r3, r3, #16
    f4b8:	add.w	r1, r1, #1
    f4bc:	bhi.n	f4d6 <__gethex+0x1f6>
    f4be:	ldrb.w	r0, [r1, #1]!
    f4c2:	add.w	r3, r3, r3, lsl #2
    f4c6:	add.w	r3, r2, r3, lsl #1
    f4ca:	ldrb	r2, [r6, r0]
    f4cc:	subs	r0, r2, #1
    f4ce:	cmp	r0, #24
    f4d0:	sub.w	r3, r3, #16
    f4d4:	bls.n	f4be <__gethex+0x1de>
    f4d6:	cbz	r5, f4da <__gethex+0x1fa>
    f4d8:	negs	r3, r3
    f4da:	ldr	r2, [sp, #4]
    f4dc:	mov	r5, r7
    f4de:	add	r2, r3
    f4e0:	mov	r7, r1
    f4e2:	str	r2, [sp, #4]
    f4e4:	str.w	r7, [r9]
    f4e8:	cmp.w	sl, #0
    f4ec:	beq.w	f382 <__gethex+0xa2>
    f4f0:	cmp.w	r8, #0
    f4f4:	ite	eq
    f4f6:	moveq	r0, #6
    f4f8:	movne	r0, #0
    f4fa:	add	sp, #44	; 0x2c
    f4fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f500:	str.w	r8, [r9]
    f504:	mov.w	r8, #0
    f508:	add.w	r9, r9, #4
    f50c:	mov	r2, r8
    f50e:	movs	r7, #4
    f510:	b.n	f3c6 <__gethex+0xe6>
    f512:	ldr	r5, [sp, #0]
    f514:	ldr	r1, [sp, #8]
    f516:	mov	r2, r5
    f518:	mov	r0, r4
    f51a:	bl	ac1c <strncmp>
    f51e:	cmp	r0, #0
    f520:	beq.n	f590 <__gethex+0x2b0>
    f522:	ldrb	r3, [r4, #0]
    f524:	mov	r7, r4
    f526:	cmp	r3, #80	; 0x50
    f528:	beq.n	f488 <__gethex+0x1a8>
    f52a:	cmp	r3, #112	; 0x70
    f52c:	beq.n	f488 <__gethex+0x1a8>
    f52e:	str.w	r7, [r9]
    f532:	b.n	f4f0 <__gethex+0x210>
    f534:	ldr	r3, [sp, #16]
    f536:	ldr	r3, [r3, #8]
    f538:	cmp	r7, r3
    f53a:	bge.w	f7a6 <__gethex+0x4c6>
    f53e:	mov	r3, r7
    f540:	ldr	r0, [sp, #16]
    f542:	add.w	r2, r0, r3, lsl #2
    f546:	movs	r1, #1
    f548:	adds	r3, #1
    f54a:	cmp	r4, #2
    f54c:	str	r3, [r0, #16]
    f54e:	str	r1, [r2, #20]
    f550:	beq.w	f784 <__gethex+0x4a4>
    f554:	cmp	r7, r3
    f556:	bge.w	f710 <__gethex+0x430>
    f55a:	movs	r1, #1
    f55c:	ldr	r0, [sp, #16]
    f55e:	bl	f238 <rshift>
    f562:	ldr	r3, [sp, #12]
    f564:	ldr	r2, [sp, #4]
    f566:	ldr	r3, [r3, #8]
    f568:	adds	r2, #1
    f56a:	cmp	r2, r3
    f56c:	str	r2, [sp, #4]
    f56e:	ble.w	f716 <__gethex+0x436>
    f572:	ldr	r0, [sp, #20]
    f574:	ldr	r1, [sp, #16]
    f576:	bl	fa84 <_Bfree>
    f57a:	ldr	r2, [sp, #80]	; 0x50
    f57c:	movs	r3, #0
    f57e:	movs	r0, #163	; 0xa3
    f580:	str	r3, [r2, #0]
    f582:	add	sp, #44	; 0x2c
    f584:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f588:	movs	r5, #1
    f58a:	ldrb	r3, [r7, #2]
    f58c:	adds	r1, r7, #2
    f58e:	b.n	f4a0 <__gethex+0x1c0>
    f590:	ldrb	r2, [r4, r5]
    f592:	ldrb	r3, [r6, r2]
    f594:	adds	r7, r4, r5
    f596:	cmp	r3, #0
    f598:	beq.n	f66e <__gethex+0x38e>
    f59a:	cmp	r2, #48	; 0x30
    f59c:	mov	r4, r7
    f59e:	bne.n	f5aa <__gethex+0x2ca>
    f5a0:	ldrb.w	r3, [r4, #1]!
    f5a4:	cmp	r3, #48	; 0x30
    f5a6:	beq.n	f5a0 <__gethex+0x2c0>
    f5a8:	ldrb	r3, [r6, r3]
    f5aa:	clz	sl, r3
    f5ae:	mov	r5, r7
    f5b0:	mov.w	sl, sl, lsr #5
    f5b4:	mov.w	r8, #1
    f5b8:	b.n	f33c <__gethex+0x5c>
    f5ba:	movs	r4, #1
    f5bc:	cbz	r7, f5d8 <__gethex+0x2f8>
    f5be:	ldr	r3, [sp, #12]
    f5c0:	ldr	r3, [r3, #12]
    f5c2:	cmp	r3, #2
    f5c4:	beq.w	f6d2 <__gethex+0x3f2>
    f5c8:	cmp	r3, #3
    f5ca:	beq.w	f6da <__gethex+0x3fa>
    f5ce:	cmp	r3, #1
    f5d0:	beq.w	f73e <__gethex+0x45e>
    f5d4:	orr.w	r4, r4, #16
    f5d8:	ldr	r3, [sp, #80]	; 0x50
    f5da:	mov	r2, r3
    f5dc:	ldr	r3, [sp, #16]
    f5de:	str	r3, [r2, #0]
    f5e0:	ldr	r3, [sp, #32]
    f5e2:	mov	r2, r3
    f5e4:	ldr	r3, [sp, #4]
    f5e6:	str	r3, [r2, #0]
    f5e8:	mov	r0, r4
    f5ea:	add	sp, #44	; 0x2c
    f5ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5f0:	movs	r5, #0
    f5f2:	b.n	f58a <__gethex+0x2aa>
    f5f4:	.word	0x20000668
    f5f8:	subs	r4, r0, r6
    f5fa:	mov	r1, r4
    f5fc:	ldr	r0, [sp, #16]
    f5fe:	bl	102bc <__any_on>
    f602:	cmp	r0, #0
    f604:	beq.n	f672 <__gethex+0x392>
    f606:	subs	r2, r4, #1
    f608:	asrs	r1, r2, #5
    f60a:	ldr	r0, [sp, #28]
    f60c:	and.w	r3, r2, #31
    f610:	ldr.w	r1, [r0, r1, lsl #2]
    f614:	movs	r7, #1
    f616:	lsl.w	r3, r7, r3
    f61a:	tst	r3, r1
    f61c:	beq.n	f634 <__gethex+0x354>
    f61e:	cmp	r2, r7
    f620:	ble.w	f75a <__gethex+0x47a>
    f624:	subs	r1, r4, #2
    f626:	ldr	r0, [sp, #16]
    f628:	bl	102bc <__any_on>
    f62c:	cmp	r0, #0
    f62e:	beq.w	f75a <__gethex+0x47a>
    f632:	movs	r7, #3
    f634:	ldr	r3, [sp, #4]
    f636:	ldr	r0, [sp, #16]
    f638:	add	r3, r4
    f63a:	mov	r1, r4
    f63c:	str	r3, [sp, #4]
    f63e:	bl	f238 <rshift>
    f642:	b.n	f438 <__gethex+0x158>
    f644:	str	r5, [sp, #4]
    f646:	b.n	f368 <__gethex+0x88>
    f648:	subs	r4, r6, r0
    f64a:	ldr	r1, [sp, #16]
    f64c:	ldr	r0, [sp, #20]
    f64e:	mov	r2, r4
    f650:	bl	fe30 <__lshift>
    f654:	ldr	r3, [sp, #4]
    f656:	str	r0, [sp, #16]
    f658:	subs	r3, r3, r4
    f65a:	str	r3, [sp, #4]
    f65c:	mov	r3, r0
    f65e:	adds	r3, #20
    f660:	str	r3, [sp, #28]
    f662:	movs	r7, #0
    f664:	b.n	f438 <__gethex+0x158>
    f666:	adds	r4, r3, #2
    f668:	mov.w	r8, #0
    f66c:	b.n	f328 <__gethex+0x48>
    f66e:	mov	r3, r2
    f670:	b.n	f526 <__gethex+0x246>
    f672:	mov	r7, r0
    f674:	b.n	f634 <__gethex+0x354>
    f676:	subs	r4, r5, #1
    f678:	cmp	r7, #0
    f67a:	bne.n	f71a <__gethex+0x43a>
    f67c:	cbz	r4, f688 <__gethex+0x3a8>
    f67e:	mov	r1, r4
    f680:	ldr	r0, [sp, #16]
    f682:	bl	102bc <__any_on>
    f686:	mov	r7, r0
    f688:	asrs	r3, r4, #5
    f68a:	ldr	r2, [sp, #28]
    f68c:	ldr	r0, [sp, #16]
    f68e:	ldr.w	r2, [r2, r3, lsl #2]
    f692:	and.w	r4, r4, #31
    f696:	movs	r3, #1
    f698:	lsl.w	r4, r3, r4
    f69c:	tst	r4, r2
    f69e:	mov	r1, r5
    f6a0:	it	ne
    f6a2:	orrne.w	r7, r7, #2
    f6a6:	bl	f238 <rshift>
    f6aa:	ldr	r3, [sp, #12]
    f6ac:	ldr	r3, [r3, #4]
    f6ae:	str	r3, [sp, #4]
    f6b0:	subs	r6, r6, r5
    f6b2:	movs	r4, #2
    f6b4:	b.n	f5bc <__gethex+0x2dc>
    f6b6:	ldr	r1, [sp, #0]
    f6b8:	ldrb	r3, [r7, r1]
    f6ba:	ldrb	r2, [r6, r3]
    f6bc:	adds	r5, r7, r1
    f6be:	mov	r7, r5
    f6c0:	cmp	r2, #0
    f6c2:	beq.w	f362 <__gethex+0x82>
    f6c6:	ldrb.w	r3, [r7, #1]!
    f6ca:	ldrb	r2, [r6, r3]
    f6cc:	cmp	r2, #0
    f6ce:	bne.n	f6c6 <__gethex+0x3e6>
    f6d0:	b.n	f362 <__gethex+0x82>
    f6d2:	ldr	r3, [sp, #84]	; 0x54
    f6d4:	rsb	r3, r3, #1
    f6d8:	str	r3, [sp, #84]	; 0x54
    f6da:	ldr	r3, [sp, #84]	; 0x54
    f6dc:	cmp	r3, #0
    f6de:	beq.w	f5d4 <__gethex+0x2f4>
    f6e2:	ldr	r3, [sp, #16]
    f6e4:	ldr	r5, [sp, #28]
    f6e6:	ldr	r7, [r3, #16]
    f6e8:	mov.w	r8, r7, lsl #2
    f6ec:	add.w	r0, r5, r8
    f6f0:	mov	r3, r5
    f6f2:	movs	r1, #0
    f6f4:	b.n	f700 <__gethex+0x420>
    f6f6:	str.w	r1, [r3], #4
    f6fa:	cmp	r0, r3
    f6fc:	bls.w	f534 <__gethex+0x254>
    f700:	ldr	r2, [r3, #0]
    f702:	cmp.w	r2, #4294967295
    f706:	beq.n	f6f6 <__gethex+0x416>
    f708:	adds	r2, #1
    f70a:	cmp	r4, #2
    f70c:	str	r2, [r3, #0]
    f70e:	beq.n	f784 <__gethex+0x4a4>
    f710:	ands.w	r6, r6, #31
    f714:	bne.n	f792 <__gethex+0x4b2>
    f716:	movs	r4, #33	; 0x21
    f718:	b.n	f5d8 <__gethex+0x2f8>
    f71a:	movs	r7, #1
    f71c:	b.n	f688 <__gethex+0x3a8>
    f71e:	ldr	r2, [sp, #84]	; 0x54
    f720:	cmp	r2, #0
    f722:	beq.w	f46c <__gethex+0x18c>
    f726:	ldr	r1, [sp, #32]
    f728:	str	r3, [r1, #0]
    f72a:	ldr	r3, [sp, #28]
    f72c:	ldr	r1, [sp, #16]
    f72e:	movs	r2, #1
    f730:	str	r2, [r1, #16]
    f732:	str	r2, [r3, #0]
    f734:	ldr	r3, [sp, #80]	; 0x50
    f736:	mov	r2, r3
    f738:	movs	r0, #98	; 0x62
    f73a:	str	r1, [r2, #0]
    f73c:	b.n	f4fa <__gethex+0x21a>
    f73e:	lsls	r2, r7, #30
    f740:	bpl.w	f5d4 <__gethex+0x2f4>
    f744:	ldr	r3, [sp, #28]
    f746:	ldr	r3, [r3, #0]
    f748:	orrs	r3, r7
    f74a:	lsls	r3, r3, #31
    f74c:	bmi.n	f6e2 <__gethex+0x402>
    f74e:	b.n	f5d4 <__gethex+0x2f4>
    f750:	ldr.w	r9, [sp, #28]
    f754:	mov.w	r8, #0
    f758:	b.n	f408 <__gethex+0x128>
    f75a:	movs	r7, #2
    f75c:	b.n	f634 <__gethex+0x354>
    f75e:	ldr	r2, [sp, #84]	; 0x54
    f760:	cmp	r2, #0
    f762:	beq.n	f726 <__gethex+0x446>
    f764:	b.n	f46c <__gethex+0x18c>
    f766:	cmp	r6, r5
    f768:	bne.w	f46c <__gethex+0x18c>
    f76c:	cmp	r6, #1
    f76e:	ble.n	f726 <__gethex+0x446>
    f770:	subs	r1, r6, #1
    f772:	ldr	r0, [sp, #16]
    f774:	bl	102bc <__any_on>
    f778:	cmp	r0, #0
    f77a:	beq.w	f46c <__gethex+0x18c>
    f77e:	ldr	r3, [sp, #12]
    f780:	ldr	r3, [r3, #4]
    f782:	b.n	f726 <__gethex+0x446>
    f784:	ldr	r3, [sp, #12]
    f786:	ldr	r3, [r3, #0]
    f788:	subs	r3, #1
    f78a:	cmp	r6, r3
    f78c:	beq.n	f7d8 <__gethex+0x4f8>
    f78e:	movs	r4, #34	; 0x22
    f790:	b.n	f5d8 <__gethex+0x2f8>
    f792:	add	r5, r8
    f794:	rsb	r6, r6, #32
    f798:	ldr.w	r0, [r5, #-4]
    f79c:	bl	fbb0 <__hi0bits>
    f7a0:	cmp	r0, r6
    f7a2:	bge.n	f716 <__gethex+0x436>
    f7a4:	b.n	f55a <__gethex+0x27a>
    f7a6:	ldr	r3, [sp, #16]
    f7a8:	ldr.w	r9, [sp, #20]
    f7ac:	ldr	r1, [r3, #4]
    f7ae:	mov	r0, r9
    f7b0:	adds	r1, #1
    f7b2:	bl	fa38 <_Balloc>
    f7b6:	ldr	r1, [sp, #16]
    f7b8:	ldr	r3, [r1, #16]
    f7ba:	adds	r2, r3, #2
    f7bc:	mov	r5, r0
    f7be:	lsls	r2, r2, #2
    f7c0:	adds	r1, #12
    f7c2:	adds	r0, #12
    f7c4:	bl	7fb0 <memcpy>
    f7c8:	ldr	r1, [sp, #16]
    f7ca:	mov	r0, r9
    f7cc:	bl	fa84 <_Bfree>
    f7d0:	str	r5, [sp, #16]
    f7d2:	ldr	r3, [r5, #16]
    f7d4:	adds	r5, #20
    f7d6:	b.n	f540 <__gethex+0x260>
    f7d8:	asrs	r3, r6, #5
    f7da:	and.w	r6, r6, #31
    f7de:	ldr.w	r2, [r5, r3, lsl #2]
    f7e2:	movs	r3, #1
    f7e4:	lsls	r3, r6
    f7e6:	tst	r3, r2
    f7e8:	ite	ne
    f7ea:	movne	r4, #33	; 0x21
    f7ec:	moveq	r4, #34	; 0x22
    f7ee:	b.n	f5d8 <__gethex+0x2f8>

0000f7f0 <__match>:
    f7f0:	push	{r4, r5}
    f7f2:	ldr	r4, [r0, #0]
    f7f4:	b.n	f808 <__match+0x18>
    f7f6:	ldrb.w	r3, [r4, #1]!
    f7fa:	sub.w	r5, r3, #65	; 0x41
    f7fe:	cmp	r5, #25
    f800:	it	ls
    f802:	addls	r3, #32
    f804:	cmp	r3, r2
    f806:	bne.n	f81a <__match+0x2a>
    f808:	ldrb.w	r2, [r1], #1
    f80c:	cmp	r2, #0
    f80e:	bne.n	f7f6 <__match+0x6>
    f810:	adds	r4, #1
    f812:	str	r4, [r0, #0]
    f814:	movs	r0, #1
    f816:	pop	{r4, r5}
    f818:	bx	lr
    f81a:	movs	r0, #0
    f81c:	pop	{r4, r5}
    f81e:	bx	lr

0000f820 <__hexnan>:
    f820:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f824:	ldr	r3, [r1, #0]
    f826:	ldr.w	r9, [pc, #372]	; f99c <__hexnan+0x17c>
    f82a:	sub	sp, #20
    f82c:	asrs	r1, r3, #5
    f82e:	add.w	r1, r2, r1, lsl #2
    f832:	ands.w	r3, r3, #31
    f836:	str	r1, [sp, #4]
    f838:	itt	ne
    f83a:	addne	r1, #4
    f83c:	strne	r1, [sp, #4]
    f83e:	ldr	r4, [sp, #4]
    f840:	str	r0, [sp, #8]
    f842:	str	r3, [sp, #12]
    f844:	movs	r3, #0
    f846:	mov	r1, r3
    f848:	str.w	r3, [r4, #-4]
    f84c:	mov	sl, r3
    f84e:	mov	lr, r3
    f850:	ldr	r3, [sp, #8]
    f852:	sub.w	ip, r4, #4
    f856:	ldr	r5, [r3, #0]
    f858:	mov	r8, ip
    f85a:	mov	r0, ip
    f85c:	ldrb.w	r3, [r5, #1]!
    f860:	cbz	r3, f8ac <__hexnan+0x8c>
    f862:	ldrb.w	r4, [r9, r3]
    f866:	cmp	r4, #0
    f868:	bne.n	f8f2 <__hexnan+0xd2>
    f86a:	cmp	r3, #32
    f86c:	bhi.n	f92a <__hexnan+0x10a>
    f86e:	cmp	lr, sl
    f870:	ble.n	f85c <__hexnan+0x3c>
    f872:	cmp	r0, r8
    f874:	bcs.n	f89e <__hexnan+0x7e>
    f876:	cmp	r1, #7
    f878:	bgt.n	f89e <__hexnan+0x7e>
    f87a:	rsb	r1, r1, #8
    f87e:	lsls	r1, r1, #2
    f880:	ldr	r6, [r0, #0]
    f882:	rsb	fp, r1, #32
    f886:	mov	r3, r0
    f888:	ldr	r7, [r3, #4]
    f88a:	lsl.w	r4, r7, fp
    f88e:	orrs	r4, r6
    f890:	lsr.w	r6, r7, r1
    f894:	str	r4, [r3, #0]
    f896:	str.w	r6, [r3, #4]!
    f89a:	cmp	r8, r3
    f89c:	bhi.n	f888 <__hexnan+0x68>
    f89e:	cmp	r0, r2
    f8a0:	bhi.n	f918 <__hexnan+0xf8>
    f8a2:	ldrb.w	r3, [r5, #1]!
    f8a6:	movs	r1, #8
    f8a8:	cmp	r3, #0
    f8aa:	bne.n	f862 <__hexnan+0x42>
    f8ac:	cmp.w	lr, #0
    f8b0:	beq.n	f92e <__hexnan+0x10e>
    f8b2:	cmp	r0, r8
    f8b4:	bcs.n	f8ba <__hexnan+0x9a>
    f8b6:	cmp	r1, #7
    f8b8:	ble.n	f974 <__hexnan+0x154>
    f8ba:	cmp	r0, r2
    f8bc:	bls.n	f936 <__hexnan+0x116>
    f8be:	mov	r3, r2
    f8c0:	ldr.w	r1, [r0], #4
    f8c4:	str.w	r1, [r3], #4
    f8c8:	cmp	ip, r0
    f8ca:	bcs.n	f8c0 <__hexnan+0xa0>
    f8cc:	movs	r1, #0
    f8ce:	str.w	r1, [r3], #4
    f8d2:	cmp	ip, r3
    f8d4:	bcs.n	f8ce <__hexnan+0xae>
    f8d6:	ldr	r3, [sp, #4]
    f8d8:	ldr.w	r3, [r3, #-4]
    f8dc:	cbnz	r3, f8ea <__hexnan+0xca>
    f8de:	cmp	r2, ip
    f8e0:	beq.n	f958 <__hexnan+0x138>
    f8e2:	ldr.w	r3, [ip, #-4]!
    f8e6:	cmp	r3, #0
    f8e8:	beq.n	f8de <__hexnan+0xbe>
    f8ea:	movs	r0, #5
    f8ec:	add	sp, #20
    f8ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8f2:	adds	r1, #1
    f8f4:	cmp	r1, #8
    f8f6:	add.w	lr, lr, #1
    f8fa:	ble.n	f90a <__hexnan+0xea>
    f8fc:	cmp	r0, r2
    f8fe:	bls.n	f85c <__hexnan+0x3c>
    f900:	movs	r3, #0
    f902:	str.w	r3, [r0, #-4]
    f906:	movs	r1, #1
    f908:	subs	r0, #4
    f90a:	ldr	r3, [r0, #0]
    f90c:	and.w	r4, r4, #15
    f910:	orr.w	r4, r4, r3, lsl #4
    f914:	str	r4, [r0, #0]
    f916:	b.n	f85c <__hexnan+0x3c>
    f918:	movs	r3, #0
    f91a:	sub.w	r8, r0, #4
    f91e:	str.w	r3, [r0, #-4]
    f922:	mov	sl, lr
    f924:	mov	r0, r8
    f926:	mov	r1, r3
    f928:	b.n	f85c <__hexnan+0x3c>
    f92a:	cmp	r3, #41	; 0x29
    f92c:	beq.n	f966 <__hexnan+0x146>
    f92e:	movs	r0, #4
    f930:	add	sp, #20
    f932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f936:	ldr	r3, [sp, #12]
    f938:	cmp	r3, #0
    f93a:	beq.n	f8d6 <__hexnan+0xb6>
    f93c:	ldr	r4, [sp, #4]
    f93e:	ldr	r3, [sp, #12]
    f940:	ldr.w	r1, [r4, #-4]
    f944:	rsb	r3, r3, #32
    f948:	mov.w	r0, #4294967295
    f94c:	lsr.w	r3, r0, r3
    f950:	ands	r3, r1
    f952:	str.w	r3, [r4, #-4]
    f956:	b.n	f8dc <__hexnan+0xbc>
    f958:	movs	r3, #1
    f95a:	movs	r0, #5
    f95c:	str.w	r3, [ip]
    f960:	add	sp, #20
    f962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f966:	ldr	r3, [sp, #8]
    f968:	adds	r5, #1
    f96a:	str	r5, [r3, #0]
    f96c:	cmp.w	lr, #0
    f970:	bne.n	f8b2 <__hexnan+0x92>
    f972:	b.n	f92e <__hexnan+0x10e>
    f974:	rsb	r3, r1, #8
    f978:	lsls	r3, r3, #2
    f97a:	ldr	r5, [r0, #0]
    f97c:	rsb	r7, r3, #32
    f980:	mov	r1, r0
    f982:	ldr	r6, [r1, #4]
    f984:	lsl.w	r4, r6, r7
    f988:	orrs	r4, r5
    f98a:	lsr.w	r5, r6, r3
    f98e:	str	r4, [r1, #0]
    f990:	str.w	r5, [r1, #4]!
    f994:	cmp	r8, r1
    f996:	bhi.n	f982 <__hexnan+0x162>
    f998:	b.n	f8ba <__hexnan+0x9a>
    f99a:	nop
    f99c:	.word	0x20000668

0000f9a0 <iswspace>:
    f9a0:	cmp	r0, #255	; 0xff
    f9a2:	bls.n	f9a8 <iswspace+0x8>
    f9a4:	movs	r0, #0
    f9a6:	bx	lr
    f9a8:	push	{r4, lr}
    f9aa:	mov	r4, r0
    f9ac:	bl	9edc <__locale_ctype_ptr>
    f9b0:	add	r0, r4
    f9b2:	ldrb	r0, [r0, #1]
    f9b4:	and.w	r0, r0, #8
    f9b8:	uxtb	r0, r0
    f9ba:	pop	{r4, pc}

0000f9bc <__localeconv_l>:
    f9bc:	adds	r0, #240	; 0xf0
    f9be:	bx	lr

0000f9c0 <_localeconv_r>:
    f9c0:	ldr	r2, [pc, #16]	; (f9d4 <_localeconv_r+0x14>)
    f9c2:	ldr	r3, [pc, #20]	; (f9d8 <_localeconv_r+0x18>)
    f9c4:	ldr	r2, [r2, #0]
    f9c6:	ldr	r0, [r2, #52]	; 0x34
    f9c8:	cmp	r0, #0
    f9ca:	it	eq
    f9cc:	moveq	r0, r3
    f9ce:	adds	r0, #240	; 0xf0
    f9d0:	bx	lr
    f9d2:	nop
    f9d4:	.word	0x20001dac
    f9d8:	.word	0x20001830

0000f9dc <_mbrtowc_r>:
    f9dc:	push	{r4, r5, r6, r7, lr}
    f9de:	sub	sp, #12
    f9e0:	mov	r7, r0
    f9e2:	ldr	r5, [sp, #32]
    f9e4:	cbz	r2, fa0c <_mbrtowc_r+0x30>
    f9e6:	ldr	r4, [pc, #68]	; (fa2c <_mbrtowc_r+0x50>)
    f9e8:	ldr	r6, [pc, #68]	; (fa30 <_mbrtowc_r+0x54>)
    f9ea:	ldr	r4, [r4, #0]
    f9ec:	ldr	r4, [r4, #52]	; 0x34
    f9ee:	str	r5, [sp, #0]
    f9f0:	cmp	r4, #0
    f9f2:	it	eq
    f9f4:	moveq	r4, r6
    f9f6:	ldr.w	r4, [r4, #228]	; 0xe4
    f9fa:	blx	r4
    f9fc:	adds	r3, r0, #1
    f9fe:	bne.n	fa08 <_mbrtowc_r+0x2c>
    fa00:	movs	r2, #0
    fa02:	movs	r3, #138	; 0x8a
    fa04:	str	r2, [r5, #0]
    fa06:	str	r3, [r7, #0]
    fa08:	add	sp, #12
    fa0a:	pop	{r4, r5, r6, r7, pc}
    fa0c:	ldr	r3, [pc, #28]	; (fa2c <_mbrtowc_r+0x50>)
    fa0e:	ldr	r1, [pc, #32]	; (fa30 <_mbrtowc_r+0x54>)
    fa10:	ldr	r3, [r3, #0]
    fa12:	ldr	r3, [r3, #52]	; 0x34
    fa14:	str	r5, [sp, #0]
    fa16:	cmp	r3, #0
    fa18:	it	eq
    fa1a:	moveq	r3, r1
    fa1c:	mov	r4, r2
    fa1e:	mov	r1, r4
    fa20:	ldr	r2, [pc, #16]	; (fa34 <_mbrtowc_r+0x58>)
    fa22:	ldr.w	r4, [r3, #228]	; 0xe4
    fa26:	movs	r3, #1
    fa28:	blx	r4
    fa2a:	b.n	f9fc <_mbrtowc_r+0x20>
    fa2c:	.word	0x20001dac
    fa30:	.word	0x20001830
    fa34:	.word	0x20000c88

0000fa38 <_Balloc>:
    fa38:	ldr	r3, [r0, #76]	; 0x4c
    fa3a:	push	{r4, r5, r6, lr}
    fa3c:	mov	r5, r0
    fa3e:	mov	r4, r1
    fa40:	cbz	r3, fa56 <_Balloc+0x1e>
    fa42:	ldr.w	r0, [r3, r4, lsl #2]
    fa46:	cbz	r0, fa6a <_Balloc+0x32>
    fa48:	ldr	r2, [r0, #0]
    fa4a:	str.w	r2, [r3, r4, lsl #2]
    fa4e:	movs	r3, #0
    fa50:	str	r3, [r0, #16]
    fa52:	str	r3, [r0, #12]
    fa54:	pop	{r4, r5, r6, pc}
    fa56:	movs	r2, #33	; 0x21
    fa58:	movs	r1, #4
    fa5a:	bl	10c24 <_calloc_r>
    fa5e:	str	r0, [r5, #76]	; 0x4c
    fa60:	mov	r3, r0
    fa62:	cmp	r0, #0
    fa64:	bne.n	fa42 <_Balloc+0xa>
    fa66:	movs	r0, #0
    fa68:	pop	{r4, r5, r6, pc}
    fa6a:	movs	r1, #1
    fa6c:	lsl.w	r6, r1, r4
    fa70:	adds	r2, r6, #5
    fa72:	mov	r0, r5
    fa74:	lsls	r2, r2, #2
    fa76:	bl	10c24 <_calloc_r>
    fa7a:	cmp	r0, #0
    fa7c:	beq.n	fa66 <_Balloc+0x2e>
    fa7e:	str	r4, [r0, #4]
    fa80:	str	r6, [r0, #8]
    fa82:	b.n	fa4e <_Balloc+0x16>

0000fa84 <_Bfree>:
    fa84:	cbz	r1, fa94 <_Bfree+0x10>
    fa86:	ldr	r3, [r0, #76]	; 0x4c
    fa88:	ldr	r2, [r1, #4]
    fa8a:	ldr.w	r0, [r3, r2, lsl #2]
    fa8e:	str	r0, [r1, #0]
    fa90:	str.w	r1, [r3, r2, lsl #2]
    fa94:	bx	lr
    fa96:	nop

0000fa98 <__multadd>:
    fa98:	push	{r4, r5, r6, r7, lr}
    fa9a:	ldr	r4, [r1, #16]
    fa9c:	sub	sp, #12
    fa9e:	mov	r5, r1
    faa0:	mov	r6, r0
    faa2:	add.w	lr, r1, #20
    faa6:	movs	r7, #0
    faa8:	ldr.w	r0, [lr]
    faac:	uxth	r1, r0
    faae:	mla	r1, r2, r1, r3
    fab2:	lsrs	r3, r1, #16
    fab4:	lsrs	r0, r0, #16
    fab6:	mla	r3, r2, r0, r3
    faba:	uxth	r1, r1
    fabc:	adds	r7, #1
    fabe:	add.w	r1, r1, r3, lsl #16
    fac2:	cmp	r4, r7
    fac4:	str.w	r1, [lr], #4
    fac8:	mov.w	r3, r3, lsr #16
    facc:	bgt.n	faa8 <__multadd+0x10>
    face:	cbz	r3, fae0 <__multadd+0x48>
    fad0:	ldr	r2, [r5, #8]
    fad2:	cmp	r4, r2
    fad4:	bge.n	fae6 <__multadd+0x4e>
    fad6:	add.w	r2, r5, r4, lsl #2
    fada:	adds	r4, #1
    fadc:	str	r3, [r2, #20]
    fade:	str	r4, [r5, #16]
    fae0:	mov	r0, r5
    fae2:	add	sp, #12
    fae4:	pop	{r4, r5, r6, r7, pc}
    fae6:	ldr	r1, [r5, #4]
    fae8:	str	r3, [sp, #4]
    faea:	adds	r1, #1
    faec:	mov	r0, r6
    faee:	bl	fa38 <_Balloc>
    faf2:	ldr	r2, [r5, #16]
    faf4:	adds	r2, #2
    faf6:	add.w	r1, r5, #12
    fafa:	mov	r7, r0
    fafc:	lsls	r2, r2, #2
    fafe:	adds	r0, #12
    fb00:	bl	7fb0 <memcpy>
    fb04:	ldr	r2, [r6, #76]	; 0x4c
    fb06:	ldr	r1, [r5, #4]
    fb08:	ldr	r3, [sp, #4]
    fb0a:	ldr.w	r0, [r2, r1, lsl #2]
    fb0e:	str	r0, [r5, #0]
    fb10:	str.w	r5, [r2, r1, lsl #2]
    fb14:	mov	r5, r7
    fb16:	b.n	fad6 <__multadd+0x3e>

0000fb18 <__s2b>:
    fb18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb1c:	ldr	r4, [pc, #140]	; (fbac <__s2b+0x94>)
    fb1e:	ldr	r5, [sp, #32]
    fb20:	mov	r7, r3
    fb22:	adds	r3, #8
    fb24:	smull	r4, lr, r4, r3
    fb28:	asrs	r3, r3, #31
    fb2a:	rsb	lr, r3, lr, asr #1
    fb2e:	cmp.w	lr, #1
    fb32:	mov	r6, r0
    fb34:	mov	r4, r1
    fb36:	mov	r8, r2
    fb38:	ble.n	fba6 <__s2b+0x8e>
    fb3a:	movs	r3, #1
    fb3c:	movs	r1, #0
    fb3e:	lsls	r3, r3, #1
    fb40:	cmp	lr, r3
    fb42:	add.w	r1, r1, #1
    fb46:	bgt.n	fb3e <__s2b+0x26>
    fb48:	mov	r0, r6
    fb4a:	bl	fa38 <_Balloc>
    fb4e:	movs	r3, #1
    fb50:	cmp.w	r8, #9
    fb54:	str	r5, [r0, #20]
    fb56:	str	r3, [r0, #16]
    fb58:	ble.n	fb9e <__s2b+0x86>
    fb5a:	add.w	r9, r4, #9
    fb5e:	mov	r5, r9
    fb60:	add	r4, r8
    fb62:	ldrb.w	r3, [r5], #1
    fb66:	mov	r1, r0
    fb68:	subs	r3, #48	; 0x30
    fb6a:	movs	r2, #10
    fb6c:	mov	r0, r6
    fb6e:	bl	fa98 <__multadd>
    fb72:	cmp	r5, r4
    fb74:	bne.n	fb62 <__s2b+0x4a>
    fb76:	add.w	r4, r9, r8
    fb7a:	subs	r4, #8
    fb7c:	cmp	r7, r8
    fb7e:	ble.n	fb9a <__s2b+0x82>
    fb80:	rsb	r7, r8, r7
    fb84:	add	r7, r4
    fb86:	ldrb.w	r3, [r4], #1
    fb8a:	mov	r1, r0
    fb8c:	subs	r3, #48	; 0x30
    fb8e:	movs	r2, #10
    fb90:	mov	r0, r6
    fb92:	bl	fa98 <__multadd>
    fb96:	cmp	r7, r4
    fb98:	bne.n	fb86 <__s2b+0x6e>
    fb9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb9e:	adds	r4, #10
    fba0:	mov.w	r8, #9
    fba4:	b.n	fb7c <__s2b+0x64>
    fba6:	movs	r1, #0
    fba8:	b.n	fb48 <__s2b+0x30>
    fbaa:	nop
    fbac:	.word	0x38e38e39

0000fbb0 <__hi0bits>:
    fbb0:	lsrs	r3, r0, #16
    fbb2:	lsls	r3, r3, #16
    fbb4:	cbnz	r3, fbe4 <__hi0bits+0x34>
    fbb6:	lsls	r0, r0, #16
    fbb8:	movs	r3, #16
    fbba:	tst.w	r0, #4278190080	; 0xff000000
    fbbe:	itt	eq
    fbc0:	lsleq	r0, r0, #8
    fbc2:	addeq	r3, #8
    fbc4:	tst.w	r0, #4026531840	; 0xf0000000
    fbc8:	itt	eq
    fbca:	lsleq	r0, r0, #4
    fbcc:	addeq	r3, #4
    fbce:	tst.w	r0, #3221225472	; 0xc0000000
    fbd2:	itt	eq
    fbd4:	lsleq	r0, r0, #2
    fbd6:	addeq	r3, #2
    fbd8:	cmp	r0, #0
    fbda:	blt.n	fbec <__hi0bits+0x3c>
    fbdc:	lsls	r2, r0, #1
    fbde:	bmi.n	fbe8 <__hi0bits+0x38>
    fbe0:	movs	r0, #32
    fbe2:	bx	lr
    fbe4:	movs	r3, #0
    fbe6:	b.n	fbba <__hi0bits+0xa>
    fbe8:	adds	r0, r3, #1
    fbea:	bx	lr
    fbec:	mov	r0, r3
    fbee:	bx	lr

0000fbf0 <__lo0bits>:
    fbf0:	ldr	r3, [r0, #0]
    fbf2:	ands.w	r2, r3, #7
    fbf6:	beq.n	fc08 <__lo0bits+0x18>
    fbf8:	lsls	r1, r3, #31
    fbfa:	bmi.n	fc3e <__lo0bits+0x4e>
    fbfc:	lsls	r2, r3, #30
    fbfe:	bmi.n	fc42 <__lo0bits+0x52>
    fc00:	lsrs	r3, r3, #2
    fc02:	str	r3, [r0, #0]
    fc04:	movs	r0, #2
    fc06:	bx	lr
    fc08:	uxth	r1, r3
    fc0a:	cbnz	r1, fc10 <__lo0bits+0x20>
    fc0c:	lsrs	r3, r3, #16
    fc0e:	movs	r2, #16
    fc10:	tst.w	r3, #255	; 0xff
    fc14:	itt	eq
    fc16:	lsreq	r3, r3, #8
    fc18:	addeq	r2, #8
    fc1a:	lsls	r1, r3, #28
    fc1c:	itt	eq
    fc1e:	lsreq	r3, r3, #4
    fc20:	addeq	r2, #4
    fc22:	lsls	r1, r3, #30
    fc24:	itt	eq
    fc26:	lsreq	r3, r3, #2
    fc28:	addeq	r2, #2
    fc2a:	lsls	r1, r3, #31
    fc2c:	bmi.n	fc38 <__lo0bits+0x48>
    fc2e:	lsrs	r3, r3, #1
    fc30:	bne.n	fc36 <__lo0bits+0x46>
    fc32:	movs	r0, #32
    fc34:	bx	lr
    fc36:	adds	r2, #1
    fc38:	str	r3, [r0, #0]
    fc3a:	mov	r0, r2
    fc3c:	bx	lr
    fc3e:	movs	r0, #0
    fc40:	bx	lr
    fc42:	lsrs	r3, r3, #1
    fc44:	str	r3, [r0, #0]
    fc46:	movs	r0, #1
    fc48:	bx	lr
    fc4a:	nop

0000fc4c <__i2b>:
    fc4c:	push	{r4, lr}
    fc4e:	mov	r4, r1
    fc50:	movs	r1, #1
    fc52:	bl	fa38 <_Balloc>
    fc56:	movs	r2, #1
    fc58:	str	r4, [r0, #20]
    fc5a:	str	r2, [r0, #16]
    fc5c:	pop	{r4, pc}
    fc5e:	nop

0000fc60 <__multiply>:
    fc60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc64:	ldr	r5, [r1, #16]
    fc66:	ldr	r7, [r2, #16]
    fc68:	cmp	r5, r7
    fc6a:	sub	sp, #12
    fc6c:	mov	r4, r1
    fc6e:	mov	r6, r2
    fc70:	bge.n	fc7c <__multiply+0x1c>
    fc72:	mov	r2, r5
    fc74:	mov	r4, r6
    fc76:	mov	r5, r7
    fc78:	mov	r6, r1
    fc7a:	mov	r7, r2
    fc7c:	ldr	r3, [r4, #8]
    fc7e:	ldr	r1, [r4, #4]
    fc80:	add.w	r8, r5, r7
    fc84:	cmp	r8, r3
    fc86:	it	gt
    fc88:	addgt	r1, #1
    fc8a:	bl	fa38 <_Balloc>
    fc8e:	add.w	ip, r0, #20
    fc92:	add.w	r9, ip, r8, lsl #2
    fc96:	cmp	ip, r9
    fc98:	str	r0, [sp, #0]
    fc9a:	bcs.n	fca8 <__multiply+0x48>
    fc9c:	mov	r3, ip
    fc9e:	movs	r1, #0
    fca0:	str.w	r1, [r3], #4
    fca4:	cmp	r9, r3
    fca6:	bhi.n	fca0 <__multiply+0x40>
    fca8:	add.w	r2, r6, #20
    fcac:	add.w	sl, r2, r7, lsl #2
    fcb0:	add.w	r3, r4, #20
    fcb4:	cmp	r2, sl
    fcb6:	add.w	lr, r3, r5, lsl #2
    fcba:	bcs.n	fd66 <__multiply+0x106>
    fcbc:	str.w	r9, [sp, #4]
    fcc0:	mov	r9, r3
    fcc2:	ldr.w	r3, [r2], #4
    fcc6:	uxth.w	fp, r3
    fcca:	cmp.w	fp, #0
    fcce:	beq.n	fd12 <__multiply+0xb2>
    fcd0:	movs	r0, #0
    fcd2:	mov	r7, r9
    fcd4:	mov	r6, ip
    fcd6:	mov	r5, r0
    fcd8:	b.n	fcdc <__multiply+0x7c>
    fcda:	mov	r6, r3
    fcdc:	ldr.w	r4, [r7], #4
    fce0:	ldr	r0, [r6, #0]
    fce2:	uxth	r1, r4
    fce4:	uxth	r3, r0
    fce6:	mla	r1, fp, r1, r3
    fcea:	lsrs	r4, r4, #16
    fcec:	lsrs	r0, r0, #16
    fcee:	adds	r3, r1, r5
    fcf0:	mla	r0, fp, r4, r0
    fcf4:	add.w	r0, r0, r3, lsr #16
    fcf8:	uxth	r1, r3
    fcfa:	mov	r3, r6
    fcfc:	orr.w	r1, r1, r0, lsl #16
    fd00:	cmp	lr, r7
    fd02:	mov.w	r5, r0, lsr #16
    fd06:	str.w	r1, [r3], #4
    fd0a:	bhi.n	fcda <__multiply+0x7a>
    fd0c:	str	r5, [r6, #4]
    fd0e:	ldr.w	r3, [r2, #-4]
    fd12:	movs.w	fp, r3, lsr #16
    fd16:	beq.n	fd5a <__multiply+0xfa>
    fd18:	ldr.w	r3, [ip]
    fd1c:	mov	r7, ip
    fd1e:	mov	r0, r3
    fd20:	mov	r5, r9
    fd22:	movs	r1, #0
    fd24:	b.n	fd28 <__multiply+0xc8>
    fd26:	mov	r7, r6
    fd28:	ldrh	r4, [r5, #0]
    fd2a:	lsrs	r0, r0, #16
    fd2c:	mla	r0, fp, r4, r0
    fd30:	add	r1, r0
    fd32:	uxth	r4, r3
    fd34:	mov	r6, r7
    fd36:	orr.w	r3, r4, r1, lsl #16
    fd3a:	str.w	r3, [r6], #4
    fd3e:	ldr	r0, [r7, #4]
    fd40:	ldr.w	r4, [r5], #4
    fd44:	uxth	r3, r0
    fd46:	lsrs	r4, r4, #16
    fd48:	mla	r4, fp, r4, r3
    fd4c:	add.w	r3, r4, r1, lsr #16
    fd50:	cmp	lr, r5
    fd52:	mov.w	r1, r3, lsr #16
    fd56:	bhi.n	fd26 <__multiply+0xc6>
    fd58:	str	r3, [r7, #4]
    fd5a:	cmp	sl, r2
    fd5c:	add.w	ip, ip, #4
    fd60:	bhi.n	fcc2 <__multiply+0x62>
    fd62:	ldr.w	r9, [sp, #4]
    fd66:	cmp.w	r8, #0
    fd6a:	ble.n	fd84 <__multiply+0x124>
    fd6c:	ldr.w	r3, [r9, #-4]
    fd70:	sub.w	r9, r9, #4
    fd74:	cbz	r3, fd7e <__multiply+0x11e>
    fd76:	b.n	fd84 <__multiply+0x124>
    fd78:	ldr.w	r3, [r9, #-4]!
    fd7c:	cbnz	r3, fd84 <__multiply+0x124>
    fd7e:	subs.w	r8, r8, #1
    fd82:	bne.n	fd78 <__multiply+0x118>
    fd84:	ldr	r0, [sp, #0]
    fd86:	str.w	r8, [r0, #16]
    fd8a:	add	sp, #12
    fd8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd90 <__pow5mult>:
    fd90:	ands.w	r3, r2, #3
    fd94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd98:	mov	r4, r2
    fd9a:	mov	r7, r0
    fd9c:	bne.n	fdfc <__pow5mult+0x6c>
    fd9e:	mov	r6, r1
    fda0:	asrs	r4, r4, #2
    fda2:	beq.n	fdde <__pow5mult+0x4e>
    fda4:	ldr	r5, [r7, #72]	; 0x48
    fda6:	cbz	r5, fe0e <__pow5mult+0x7e>
    fda8:	lsls	r3, r4, #31
    fdaa:	mov.w	r8, #0
    fdae:	bmi.n	fdbe <__pow5mult+0x2e>
    fdb0:	asrs	r4, r4, #1
    fdb2:	beq.n	fdde <__pow5mult+0x4e>
    fdb4:	ldr	r0, [r5, #0]
    fdb6:	cbz	r0, fde4 <__pow5mult+0x54>
    fdb8:	mov	r5, r0
    fdba:	lsls	r3, r4, #31
    fdbc:	bpl.n	fdb0 <__pow5mult+0x20>
    fdbe:	mov	r2, r5
    fdc0:	mov	r1, r6
    fdc2:	mov	r0, r7
    fdc4:	bl	fc60 <__multiply>
    fdc8:	cbz	r6, fdf8 <__pow5mult+0x68>
    fdca:	ldr	r2, [r6, #4]
    fdcc:	ldr	r3, [r7, #76]	; 0x4c
    fdce:	asrs	r4, r4, #1
    fdd0:	ldr.w	r1, [r3, r2, lsl #2]
    fdd4:	str	r1, [r6, #0]
    fdd6:	str.w	r6, [r3, r2, lsl #2]
    fdda:	mov	r6, r0
    fddc:	bne.n	fdb4 <__pow5mult+0x24>
    fdde:	mov	r0, r6
    fde0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fde4:	mov	r2, r5
    fde6:	mov	r1, r5
    fde8:	mov	r0, r7
    fdea:	bl	fc60 <__multiply>
    fdee:	str	r0, [r5, #0]
    fdf0:	str.w	r8, [r0]
    fdf4:	mov	r5, r0
    fdf6:	b.n	fdba <__pow5mult+0x2a>
    fdf8:	mov	r6, r0
    fdfa:	b.n	fdb0 <__pow5mult+0x20>
    fdfc:	subs	r2, r3, #1
    fdfe:	ldr	r5, [pc, #44]	; (fe2c <__pow5mult+0x9c>)
    fe00:	movs	r3, #0
    fe02:	ldr.w	r2, [r5, r2, lsl #2]
    fe06:	bl	fa98 <__multadd>
    fe0a:	mov	r6, r0
    fe0c:	b.n	fda0 <__pow5mult+0x10>
    fe0e:	movs	r1, #1
    fe10:	mov	r0, r7
    fe12:	bl	fa38 <_Balloc>
    fe16:	movw	r1, #625	; 0x271
    fe1a:	movs	r2, #1
    fe1c:	movs	r3, #0
    fe1e:	str	r1, [r0, #20]
    fe20:	str	r2, [r0, #16]
    fe22:	mov	r5, r0
    fe24:	str	r0, [r7, #72]	; 0x48
    fe26:	str	r3, [r0, #0]
    fe28:	b.n	fda8 <__pow5mult+0x18>
    fe2a:	nop
    fe2c:	.word	0x20000c3c

0000fe30 <__lshift>:
    fe30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe34:	mov	r9, r2
    fe36:	ldr	r2, [r1, #16]
    fe38:	ldr	r3, [r1, #8]
    fe3a:	mov.w	r4, r9, asr #5
    fe3e:	add.w	r8, r4, r2
    fe42:	add.w	r5, r8, #1
    fe46:	cmp	r5, r3
    fe48:	mov	r6, r1
    fe4a:	mov	sl, r0
    fe4c:	ldr	r1, [r1, #4]
    fe4e:	ble.n	fe5a <__lshift+0x2a>
    fe50:	lsls	r3, r3, #1
    fe52:	cmp	r5, r3
    fe54:	add.w	r1, r1, #1
    fe58:	bgt.n	fe50 <__lshift+0x20>
    fe5a:	mov	r0, sl
    fe5c:	bl	fa38 <_Balloc>
    fe60:	cmp	r4, #0
    fe62:	add.w	r2, r0, #20
    fe66:	ble.n	feda <__lshift+0xaa>
    fe68:	add.w	r3, r2, r4, lsl #2
    fe6c:	movs	r1, #0
    fe6e:	str.w	r1, [r2], #4
    fe72:	cmp	r3, r2
    fe74:	bne.n	fe6e <__lshift+0x3e>
    fe76:	ldr	r4, [r6, #16]
    fe78:	add.w	r1, r6, #20
    fe7c:	ands.w	r9, r9, #31
    fe80:	add.w	lr, r1, r4, lsl #2
    fe84:	beq.n	feca <__lshift+0x9a>
    fe86:	rsb	r2, r9, #32
    fe8a:	movs	r4, #0
    fe8c:	ldr	r7, [r1, #0]
    fe8e:	lsl.w	ip, r7, r9
    fe92:	orr.w	r4, ip, r4
    fe96:	mov	ip, r3
    fe98:	str.w	r4, [r3], #4
    fe9c:	ldr.w	r4, [r1], #4
    fea0:	cmp	lr, r1
    fea2:	lsr.w	r4, r4, r2
    fea6:	bhi.n	fe8c <__lshift+0x5c>
    fea8:	str.w	r4, [ip, #4]
    feac:	cbz	r4, feb2 <__lshift+0x82>
    feae:	add.w	r5, r8, #2
    feb2:	ldr.w	r3, [sl, #76]	; 0x4c
    feb6:	ldr	r2, [r6, #4]
    feb8:	subs	r5, #1
    feba:	ldr.w	r1, [r3, r2, lsl #2]
    febe:	str	r5, [r0, #16]
    fec0:	str	r1, [r6, #0]
    fec2:	str.w	r6, [r3, r2, lsl #2]
    fec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    feca:	subs	r3, #4
    fecc:	ldr.w	r2, [r1], #4
    fed0:	str.w	r2, [r3, #4]!
    fed4:	cmp	lr, r1
    fed6:	bhi.n	fecc <__lshift+0x9c>
    fed8:	b.n	feb2 <__lshift+0x82>
    feda:	mov	r3, r2
    fedc:	b.n	fe76 <__lshift+0x46>
    fede:	nop

0000fee0 <__mcmp>:
    fee0:	ldr	r2, [r0, #16]
    fee2:	ldr	r3, [r1, #16]
    fee4:	subs	r2, r2, r3
    fee6:	bne.n	ff10 <__mcmp+0x30>
    fee8:	lsls	r3, r3, #2
    feea:	adds	r0, #20
    feec:	adds	r1, #20
    feee:	add	r1, r3
    fef0:	push	{r4}
    fef2:	add	r3, r0
    fef4:	b.n	fefa <__mcmp+0x1a>
    fef6:	cmp	r0, r3
    fef8:	bcs.n	ff14 <__mcmp+0x34>
    fefa:	ldr.w	r4, [r3, #-4]!
    fefe:	ldr.w	r2, [r1, #-4]!
    ff02:	cmp	r4, r2
    ff04:	beq.n	fef6 <__mcmp+0x16>
    ff06:	bcc.n	ff1c <__mcmp+0x3c>
    ff08:	movs	r0, #1
    ff0a:	ldr.w	r4, [sp], #4
    ff0e:	bx	lr
    ff10:	mov	r0, r2
    ff12:	bx	lr
    ff14:	movs	r0, #0
    ff16:	ldr.w	r4, [sp], #4
    ff1a:	bx	lr
    ff1c:	mov.w	r0, #4294967295
    ff20:	b.n	ff0a <__mcmp+0x2a>
    ff22:	nop

0000ff24 <__mdiff>:
    ff24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff28:	ldr	r3, [r1, #16]
    ff2a:	mov	r7, r1
    ff2c:	ldr	r1, [r2, #16]
    ff2e:	subs	r3, r3, r1
    ff30:	cmp	r3, #0
    ff32:	mov	r8, r2
    ff34:	bne.n	ff66 <__mdiff+0x42>
    ff36:	lsls	r1, r1, #2
    ff38:	add.w	r2, r7, #20
    ff3c:	add.w	r5, r8, #20
    ff40:	adds	r3, r2, r1
    ff42:	add	r1, r5
    ff44:	b.n	ff4a <__mdiff+0x26>
    ff46:	cmp	r2, r3
    ff48:	bcs.n	10008 <__mdiff+0xe4>
    ff4a:	ldr.w	r6, [r3, #-4]!
    ff4e:	ldr.w	r4, [r1, #-4]!
    ff52:	cmp	r6, r4
    ff54:	beq.n	ff46 <__mdiff+0x22>
    ff56:	bcs.n	1001a <__mdiff+0xf6>
    ff58:	mov	r3, r7
    ff5a:	mov	r4, r2
    ff5c:	mov	r7, r8
    ff5e:	mov.w	r9, #1
    ff62:	mov	r8, r3
    ff64:	b.n	ff74 <__mdiff+0x50>
    ff66:	blt.n	10024 <__mdiff+0x100>
    ff68:	add.w	r5, r7, #20
    ff6c:	add.w	r4, r2, #20
    ff70:	mov.w	r9, #0
    ff74:	ldr	r1, [r7, #4]
    ff76:	bl	fa38 <_Balloc>
    ff7a:	ldr.w	r3, [r8, #16]
    ff7e:	ldr	r6, [r7, #16]
    ff80:	str.w	r9, [r0, #12]
    ff84:	add.w	ip, r4, r3, lsl #2
    ff88:	mov	lr, r4
    ff8a:	add.w	r7, r5, r6, lsl #2
    ff8e:	add.w	r4, r0, #20
    ff92:	movs	r3, #0
    ff94:	ldr.w	r1, [lr], #4
    ff98:	ldr.w	r8, [r5], #4
    ff9c:	uxth	r2, r1
    ff9e:	uxtah	r3, r3, r8
    ffa2:	lsrs	r1, r1, #16
    ffa4:	subs	r2, r3, r2
    ffa6:	rsb	r3, r1, r8, lsr #16
    ffaa:	add.w	r3, r3, r2, asr #16
    ffae:	uxth	r2, r2
    ffb0:	orr.w	r2, r2, r3, lsl #16
    ffb4:	cmp	ip, lr
    ffb6:	str.w	r2, [r4], #4
    ffba:	mov.w	r3, r3, asr #16
    ffbe:	bhi.n	ff94 <__mdiff+0x70>
    ffc0:	cmp	r7, r5
    ffc2:	bls.n	fff4 <__mdiff+0xd0>
    ffc4:	mov	ip, r4
    ffc6:	mov	r1, r5
    ffc8:	ldr.w	lr, [r1], #4
    ffcc:	uxtah	r2, r3, lr
    ffd0:	asrs	r3, r2, #16
    ffd2:	add.w	r3, r3, lr, lsr #16
    ffd6:	uxth	r2, r2
    ffd8:	orr.w	r2, r2, r3, lsl #16
    ffdc:	cmp	r7, r1
    ffde:	str.w	r2, [ip], #4
    ffe2:	mov.w	r3, r3, asr #16
    ffe6:	bhi.n	ffc8 <__mdiff+0xa4>
    ffe8:	mvns	r5, r5
    ffea:	add	r5, r7
    ffec:	bic.w	r5, r5, #3
    fff0:	adds	r5, #4
    fff2:	add	r4, r5
    fff4:	subs	r4, #4
    fff6:	cbnz	r2, 10002 <__mdiff+0xde>
    fff8:	ldr.w	r3, [r4, #-4]!
    fffc:	subs	r6, #1
    fffe:	cmp	r3, #0
   10000:	beq.n	fff8 <__mdiff+0xd4>
   10002:	str	r6, [r0, #16]
   10004:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10008:	movs	r1, #0
   1000a:	bl	fa38 <_Balloc>
   1000e:	movs	r2, #1
   10010:	movs	r3, #0
   10012:	str	r2, [r0, #16]
   10014:	str	r3, [r0, #20]
   10016:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1001a:	mov	r4, r5
   1001c:	mov.w	r9, #0
   10020:	mov	r5, r2
   10022:	b.n	ff74 <__mdiff+0x50>
   10024:	mov	r3, r7
   10026:	add.w	r4, r7, #20
   1002a:	add.w	r5, r8, #20
   1002e:	mov	r7, r8
   10030:	mov.w	r9, #1
   10034:	mov	r8, r3
   10036:	b.n	ff74 <__mdiff+0x50>

00010038 <__ulp>:
   10038:	ldr	r3, [pc, #76]	; (10088 <__ulp+0x50>)
   1003a:	vmov	r2, s1
   1003e:	ands	r2, r3
   10040:	sub.w	r3, r2, #54525952	; 0x3400000
   10044:	cmp	r3, #0
   10046:	ble.n	10052 <__ulp+0x1a>
   10048:	movs	r0, #0
   1004a:	mov	r1, r3
   1004c:	vmov	d0, r0, r1
   10050:	bx	lr
   10052:	negs	r3, r3
   10054:	asrs	r3, r3, #20
   10056:	cmp	r3, #19
   10058:	ble.n	10076 <__ulp+0x3e>
   1005a:	subs	r3, #20
   1005c:	cmp	r3, #30
   1005e:	ittte	le
   10060:	rsble	r3, r3, #31
   10064:	movle	r2, #1
   10066:	lslle.w	r3, r2, r3
   1006a:	movgt	r3, #1
   1006c:	movs	r1, #0
   1006e:	mov	r0, r3
   10070:	vmov	d0, r0, r1
   10074:	bx	lr
   10076:	mov.w	r2, #524288	; 0x80000
   1007a:	movs	r0, #0
   1007c:	asr.w	r1, r2, r3
   10080:	vmov	d0, r0, r1
   10084:	bx	lr
   10086:	nop
   10088:	.word	0x7ff00000

0001008c <__b2d>:
   1008c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10090:	ldr	r6, [r0, #16]
   10092:	add.w	r8, r0, #20
   10096:	add.w	r6, r8, r6, lsl #2
   1009a:	ldr.w	r7, [r6, #-4]
   1009e:	mov	r0, r7
   100a0:	bl	fbb0 <__hi0bits>
   100a4:	rsb	r3, r0, #32
   100a8:	cmp	r0, #10
   100aa:	str	r3, [r1, #0]
   100ac:	sub.w	r3, r6, #4
   100b0:	bgt.n	100e4 <__b2d+0x58>
   100b2:	cmp	r8, r3
   100b4:	rsb	r2, r0, #11
   100b8:	it	cc
   100ba:	ldrcc.w	r3, [r6, #-8]
   100be:	lsr.w	r1, r7, r2
   100c2:	add.w	r0, r0, #21
   100c6:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   100ca:	ite	cc
   100cc:	lsrcc	r3, r2
   100ce:	movcs	r3, #0
   100d0:	lsl.w	r0, r7, r0
   100d4:	orr.w	r5, r5, #3145728	; 0x300000
   100d8:	orr.w	r4, r0, r3
   100dc:	vmov	d0, r4, r5
   100e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100e4:	cmp	r8, r3
   100e6:	bcs.n	1012a <__b2d+0x9e>
   100e8:	subs.w	r3, r0, #11
   100ec:	ldr.w	r2, [r6, #-8]
   100f0:	beq.n	10130 <__b2d+0xa4>
   100f2:	lsl.w	r0, r7, r3
   100f6:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   100fa:	rsb	lr, r3, #32
   100fe:	sub.w	r1, r6, #8
   10102:	orr.w	r7, r7, #3145728	; 0x300000
   10106:	lsr.w	r0, r2, lr
   1010a:	cmp	r8, r1
   1010c:	orr.w	r5, r7, r0
   10110:	bcs.n	10154 <__b2d+0xc8>
   10112:	ldr.w	r1, [r6, #-12]
   10116:	lsl.w	r0, r2, r3
   1011a:	lsr.w	r3, r1, lr
   1011e:	orrs	r0, r3
   10120:	mov	r4, r0
   10122:	vmov	d0, r4, r5
   10126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1012a:	subs	r0, #11
   1012c:	bne.n	10142 <__b2d+0xb6>
   1012e:	mov	r2, r0
   10130:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   10134:	orr.w	r5, r5, #3145728	; 0x300000
   10138:	mov	r4, r2
   1013a:	vmov	d0, r4, r5
   1013e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10142:	lsl.w	r0, r7, r0
   10146:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   1014a:	movs	r0, #0
   1014c:	orr.w	r5, r5, #3145728	; 0x300000
   10150:	mov	r4, r0
   10152:	b.n	10122 <__b2d+0x96>
   10154:	lsl.w	r0, r2, r3
   10158:	mov	r4, r0
   1015a:	b.n	10122 <__b2d+0x96>

0001015c <__d2b>:
   1015c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10160:	vmov	r6, r7, d0
   10164:	sub	sp, #12
   10166:	mov	r8, r1
   10168:	movs	r1, #1
   1016a:	mov	r4, r7
   1016c:	ubfx	r5, r7, #20, #11
   10170:	mov	r7, r2
   10172:	bl	fa38 <_Balloc>
   10176:	ubfx	r4, r4, #0, #20
   1017a:	mov	r9, r0
   1017c:	cbz	r5, 10182 <__d2b+0x26>
   1017e:	orr.w	r4, r4, #1048576	; 0x100000
   10182:	str	r4, [sp, #4]
   10184:	cbz	r6, 101ce <__d2b+0x72>
   10186:	add	r0, sp, #8
   10188:	str.w	r6, [r0, #-8]!
   1018c:	bl	fbf0 <__lo0bits>
   10190:	cmp	r0, #0
   10192:	bne.n	101fe <__d2b+0xa2>
   10194:	ldmia.w	sp, {r2, r3}
   10198:	str.w	r2, [r9, #20]
   1019c:	cmp	r3, #0
   1019e:	ite	eq
   101a0:	moveq	r1, #1
   101a2:	movne	r1, #2
   101a4:	str.w	r3, [r9, #24]
   101a8:	str.w	r1, [r9, #16]
   101ac:	cbnz	r5, 101e6 <__d2b+0x8a>
   101ae:	add.w	r3, r9, r1, lsl #2
   101b2:	subw	r0, r0, #1074	; 0x432
   101b6:	str.w	r0, [r8]
   101ba:	ldr	r0, [r3, #16]
   101bc:	bl	fbb0 <__hi0bits>
   101c0:	rsb	r0, r0, r1, lsl #5
   101c4:	str	r0, [r7, #0]
   101c6:	mov	r0, r9
   101c8:	add	sp, #12
   101ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   101ce:	add	r0, sp, #4
   101d0:	bl	fbf0 <__lo0bits>
   101d4:	ldr	r3, [sp, #4]
   101d6:	str.w	r3, [r9, #20]
   101da:	movs	r1, #1
   101dc:	adds	r0, #32
   101de:	str.w	r1, [r9, #16]
   101e2:	cmp	r5, #0
   101e4:	beq.n	101ae <__d2b+0x52>
   101e6:	subw	r5, r5, #1075	; 0x433
   101ea:	add	r5, r0
   101ec:	rsb	r0, r0, #53	; 0x35
   101f0:	str.w	r5, [r8]
   101f4:	str	r0, [r7, #0]
   101f6:	mov	r0, r9
   101f8:	add	sp, #12
   101fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   101fe:	ldmia.w	sp, {r2, r3}
   10202:	rsb	r1, r0, #32
   10206:	lsl.w	r1, r3, r1
   1020a:	orrs	r2, r1
   1020c:	lsrs	r3, r0
   1020e:	str	r3, [sp, #4]
   10210:	str.w	r2, [r9, #20]
   10214:	b.n	1019c <__d2b+0x40>
   10216:	nop

00010218 <__ratio>:
   10218:	push	{r4, r5, lr}
   1021a:	sub	sp, #28
   1021c:	mov	r4, r1
   1021e:	add	r1, sp, #16
   10220:	mov	r5, r0
   10222:	bl	1008c <__b2d>
   10226:	mov	r0, r4
   10228:	add	r1, sp, #20
   1022a:	vstr	d0, [sp]
   1022e:	bl	1008c <__b2d>
   10232:	ldr	r0, [r4, #16]
   10234:	ldr	r1, [r5, #16]
   10236:	ldr	r3, [sp, #20]
   10238:	ldr	r2, [sp, #16]
   1023a:	subs	r1, r1, r0
   1023c:	subs	r2, r2, r3
   1023e:	add.w	r3, r2, r1, lsl #5
   10242:	vstr	d0, [sp, #8]
   10246:	cmp	r3, #0
   10248:	ldrd	r0, r1, [sp]
   1024c:	ldrd	r4, r5, [sp, #8]
   10250:	ble.n	1026a <__ratio+0x52>
   10252:	add.w	r1, r1, r3, lsl #20
   10256:	strd	r0, r1, [sp]
   1025a:	vldr	d7, [sp]
   1025e:	vldr	d6, [sp, #8]
   10262:	vdiv.f64	d0, d7, d6
   10266:	add	sp, #28
   10268:	pop	{r4, r5, pc}
   1026a:	sub.w	r5, r5, r3, lsl #20
   1026e:	strd	r4, r5, [sp, #8]
   10272:	b.n	1025a <__ratio+0x42>

00010274 <__copybits>:
   10274:	push	{r4, r5, r6}
   10276:	ldr	r4, [r2, #16]
   10278:	add.w	r3, r2, #20
   1027c:	subs	r1, #1
   1027e:	asrs	r6, r1, #5
   10280:	add.w	r4, r3, r4, lsl #2
   10284:	adds	r6, #1
   10286:	cmp	r3, r4
   10288:	add.w	r6, r0, r6, lsl #2
   1028c:	bcs.n	102a8 <__copybits+0x34>
   1028e:	subs	r1, r0, #4
   10290:	ldr.w	r5, [r3], #4
   10294:	str.w	r5, [r1, #4]!
   10298:	cmp	r4, r3
   1029a:	bhi.n	10290 <__copybits+0x1c>
   1029c:	subs	r3, r4, r2
   1029e:	subs	r3, #21
   102a0:	bic.w	r3, r3, #3
   102a4:	adds	r3, #4
   102a6:	add	r0, r3
   102a8:	cmp	r6, r0
   102aa:	bls.n	102b6 <__copybits+0x42>
   102ac:	movs	r3, #0
   102ae:	str.w	r3, [r0], #4
   102b2:	cmp	r6, r0
   102b4:	bhi.n	102ae <__copybits+0x3a>
   102b6:	pop	{r4, r5, r6}
   102b8:	bx	lr
   102ba:	nop

000102bc <__any_on>:
   102bc:	ldr	r3, [r0, #16]
   102be:	asrs	r2, r1, #5
   102c0:	cmp	r3, r2
   102c2:	push	{r4}
   102c4:	add.w	r4, r0, #20
   102c8:	bge.n	102ec <__any_on+0x30>
   102ca:	add.w	r3, r4, r3, lsl #2
   102ce:	cmp	r4, r3
   102d0:	bcs.n	10316 <__any_on+0x5a>
   102d2:	ldr.w	r0, [r3, #-4]
   102d6:	subs	r3, #4
   102d8:	cbz	r0, 102e2 <__any_on+0x26>
   102da:	b.n	10308 <__any_on+0x4c>
   102dc:	ldr.w	r2, [r3, #-4]!
   102e0:	cbnz	r2, 10308 <__any_on+0x4c>
   102e2:	cmp	r4, r3
   102e4:	bcc.n	102dc <__any_on+0x20>
   102e6:	ldr.w	r4, [sp], #4
   102ea:	bx	lr
   102ec:	ble.n	10310 <__any_on+0x54>
   102ee:	ands.w	r1, r1, #31
   102f2:	beq.n	10310 <__any_on+0x54>
   102f4:	ldr.w	r0, [r4, r2, lsl #2]
   102f8:	lsr.w	r3, r0, r1
   102fc:	lsl.w	r1, r3, r1
   10300:	cmp	r0, r1
   10302:	add.w	r3, r4, r2, lsl #2
   10306:	beq.n	102ce <__any_on+0x12>
   10308:	movs	r0, #1
   1030a:	ldr.w	r4, [sp], #4
   1030e:	bx	lr
   10310:	add.w	r3, r4, r2, lsl #2
   10314:	b.n	102ce <__any_on+0x12>
   10316:	movs	r0, #0
   10318:	b.n	102e6 <__any_on+0x2a>
   1031a:	nop

0001031c <__sccl>:
   1031c:	push	{r4, r5, r6}
   1031e:	ldrb	r5, [r1, #0]
   10320:	cmp	r5, #94	; 0x5e
   10322:	beq.n	10384 <__sccl+0x68>
   10324:	movs	r2, #0
   10326:	adds	r1, #1
   10328:	mov	r6, r2
   1032a:	subs	r3, r0, #1
   1032c:	add.w	r4, r0, #255	; 0xff
   10330:	strb.w	r2, [r3, #1]!
   10334:	cmp	r3, r4
   10336:	bne.n	10330 <__sccl+0x14>
   10338:	cbz	r5, 1035c <__sccl+0x40>
   1033a:	eor.w	r2, r6, #1
   1033e:	strb	r2, [r0, r5]
   10340:	adds	r4, r1, #1
   10342:	ldrb.w	r3, [r4, #-1]
   10346:	cmp	r3, #45	; 0x2d
   10348:	beq.n	10368 <__sccl+0x4c>
   1034a:	cmp	r3, #93	; 0x5d
   1034c:	beq.n	10362 <__sccl+0x46>
   1034e:	cbz	r3, 10356 <__sccl+0x3a>
   10350:	mov	r5, r3
   10352:	mov	r1, r4
   10354:	b.n	1033e <__sccl+0x22>
   10356:	mov	r0, r1
   10358:	pop	{r4, r5, r6}
   1035a:	bx	lr
   1035c:	subs	r0, r1, #1
   1035e:	pop	{r4, r5, r6}
   10360:	bx	lr
   10362:	mov	r0, r4
   10364:	pop	{r4, r5, r6}
   10366:	bx	lr
   10368:	ldrb	r6, [r1, #1]
   1036a:	cmp	r6, #93	; 0x5d
   1036c:	beq.n	10350 <__sccl+0x34>
   1036e:	cmp	r5, r6
   10370:	bgt.n	10350 <__sccl+0x34>
   10372:	adds	r1, #2
   10374:	adds	r3, r0, r5
   10376:	adds	r5, #1
   10378:	cmp	r6, r5
   1037a:	strb.w	r2, [r3, #1]!
   1037e:	bgt.n	10376 <__sccl+0x5a>
   10380:	adds	r4, #2
   10382:	b.n	10342 <__sccl+0x26>
   10384:	movs	r2, #1
   10386:	ldrb	r5, [r1, #1]
   10388:	mov	r6, r2
   1038a:	adds	r1, #2
   1038c:	b.n	1032a <__sccl+0xe>
   1038e:	nop

00010390 <nanf>:
   10390:	vldr	s0, [pc, #4]	; 10398 <nanf+0x8>
   10394:	bx	lr
   10396:	nop
   10398:	.word	0x7fc00000

0001039c <_strtoll_l.isra.0>:
   1039c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103a0:	sub	sp, #20
   103a2:	mov	sl, r3
   103a4:	str	r1, [sp, #8]
   103a6:	str	r0, [sp, #12]
   103a8:	str	r2, [sp, #4]
   103aa:	mov	r7, r1
   103ac:	ldr	r6, [sp, #56]	; 0x38
   103ae:	b.n	103b2 <_strtoll_l.isra.0+0x16>
   103b0:	mov	r7, r5
   103b2:	mov	r5, r7
   103b4:	mov	r0, r6
   103b6:	ldrb.w	r4, [r5], #1
   103ba:	bl	9ed4 <__locale_ctype_ptr_l>
   103be:	add	r0, r4
   103c0:	ldrb	r3, [r0, #1]
   103c2:	and.w	r3, r3, #8
   103c6:	and.w	r2, r3, #255	; 0xff
   103ca:	cmp	r3, #0
   103cc:	bne.n	103b0 <_strtoll_l.isra.0+0x14>
   103ce:	cmp	r4, #45	; 0x2d
   103d0:	beq.w	104da <_strtoll_l.isra.0+0x13e>
   103d4:	cmp	r4, #43	; 0x2b
   103d6:	it	eq
   103d8:	ldrbeq	r4, [r7, #1]
   103da:	str	r2, [sp, #0]
   103dc:	it	eq
   103de:	addeq	r5, r7, #2
   103e0:	cmp.w	sl, #0
   103e4:	beq.n	10400 <_strtoll_l.isra.0+0x64>
   103e6:	cmp.w	sl, #16
   103ea:	beq.w	10518 <_strtoll_l.isra.0+0x17c>
   103ee:	ldr	r3, [sp, #0]
   103f0:	mov	r6, sl
   103f2:	asrs	r7, r6, #31
   103f4:	cbnz	r3, 10412 <_strtoll_l.isra.0+0x76>
   103f6:	mov.w	r8, #4294967295
   103fa:	mvn.w	r9, #2147483648	; 0x80000000
   103fe:	b.n	1041a <_strtoll_l.isra.0+0x7e>
   10400:	cmp	r4, #48	; 0x30
   10402:	beq.n	10504 <_strtoll_l.isra.0+0x168>
   10404:	movs	r6, #10
   10406:	movs	r7, #0
   10408:	mov.w	sl, #10
   1040c:	ldr	r3, [sp, #0]
   1040e:	cmp	r3, #0
   10410:	beq.n	103f6 <_strtoll_l.isra.0+0x5a>
   10412:	mov.w	r8, #0
   10416:	mov.w	r9, #2147483648	; 0x80000000
   1041a:	mov	r2, r6
   1041c:	mov	r3, r7
   1041e:	mov	r0, r8
   10420:	mov	r1, r9
   10422:	bl	9b20 <__aeabi_uldivmod>
   10426:	mov	r3, r7
   10428:	mov	fp, r2
   1042a:	mov	r0, r8
   1042c:	mov	r2, r6
   1042e:	mov	r1, r9
   10430:	bl	9b20 <__aeabi_uldivmod>
   10434:	mov.w	lr, #0
   10438:	movs	r2, #0
   1043a:	movs	r3, #0
   1043c:	b.n	1045e <_strtoll_l.isra.0+0xc2>
   1043e:	beq.n	104cc <_strtoll_l.isra.0+0x130>
   10440:	mul.w	r4, r2, r7
   10444:	mla	r4, r6, r3, r4
   10448:	umull	r2, r3, r2, r6
   1044c:	add	r3, r4
   1044e:	adds.w	r2, r2, ip
   10452:	adc.w	r3, r3, ip, asr #31
   10456:	mov.w	lr, #1
   1045a:	ldrb.w	r4, [r5], #1
   1045e:	sub.w	ip, r4, #48	; 0x30
   10462:	cmp.w	ip, #9
   10466:	bls.n	10476 <_strtoll_l.isra.0+0xda>
   10468:	sub.w	ip, r4, #65	; 0x41
   1046c:	cmp.w	ip, #25
   10470:	bhi.n	1048e <_strtoll_l.isra.0+0xf2>
   10472:	sub.w	ip, r4, #55	; 0x37
   10476:	cmp	sl, ip
   10478:	ble.n	104a0 <_strtoll_l.isra.0+0x104>
   1047a:	cmp.w	lr, #4294967295
   1047e:	beq.n	1045a <_strtoll_l.isra.0+0xbe>
   10480:	cmp	r1, r3
   10482:	it	eq
   10484:	cmpeq	r0, r2
   10486:	bcs.n	1043e <_strtoll_l.isra.0+0xa2>
   10488:	mov.w	lr, #4294967295
   1048c:	b.n	1045a <_strtoll_l.isra.0+0xbe>
   1048e:	sub.w	ip, r4, #97	; 0x61
   10492:	cmp.w	ip, #25
   10496:	bhi.n	104a0 <_strtoll_l.isra.0+0x104>
   10498:	sub.w	ip, r4, #87	; 0x57
   1049c:	cmp	sl, ip
   1049e:	bgt.n	1047a <_strtoll_l.isra.0+0xde>
   104a0:	cmp.w	lr, #4294967295
   104a4:	beq.n	104e4 <_strtoll_l.isra.0+0x148>
   104a6:	ldr	r1, [sp, #0]
   104a8:	cbz	r1, 104b0 <_strtoll_l.isra.0+0x114>
   104aa:	negs	r2, r2
   104ac:	sbc.w	r3, r3, r3, lsl #1
   104b0:	ldr	r1, [sp, #4]
   104b2:	cmp	r1, #0
   104b4:	beq.n	1053c <_strtoll_l.isra.0+0x1a0>
   104b6:	cmp.w	lr, #0
   104ba:	bne.n	104fc <_strtoll_l.isra.0+0x160>
   104bc:	ldr	r5, [sp, #8]
   104be:	mov	r0, r2
   104c0:	mov	r1, r3
   104c2:	ldr	r3, [sp, #4]
   104c4:	str	r5, [r3, #0]
   104c6:	add	sp, #20
   104c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104cc:	cmp	fp, ip
   104ce:	bge.n	10440 <_strtoll_l.isra.0+0xa4>
   104d0:	mov	r2, r0
   104d2:	mov	r3, r1
   104d4:	mov.w	lr, #4294967295
   104d8:	b.n	1045a <_strtoll_l.isra.0+0xbe>
   104da:	movs	r3, #1
   104dc:	adds	r5, r7, #2
   104de:	ldrb	r4, [r7, #1]
   104e0:	str	r3, [sp, #0]
   104e2:	b.n	103e0 <_strtoll_l.isra.0+0x44>
   104e4:	ldr	r3, [sp, #0]
   104e6:	cbnz	r3, 10534 <_strtoll_l.isra.0+0x198>
   104e8:	mov.w	r0, #4294967295
   104ec:	mvn.w	r1, #2147483648	; 0x80000000
   104f0:	ldr	r2, [sp, #12]
   104f2:	movs	r3, #34	; 0x22
   104f4:	str	r3, [r2, #0]
   104f6:	ldr	r3, [sp, #4]
   104f8:	cbnz	r3, 10500 <_strtoll_l.isra.0+0x164>
   104fa:	b.n	104c6 <_strtoll_l.isra.0+0x12a>
   104fc:	mov	r0, r2
   104fe:	mov	r1, r3
   10500:	subs	r5, #1
   10502:	b.n	104c2 <_strtoll_l.isra.0+0x126>
   10504:	ldrb	r3, [r5, #0]
   10506:	and.w	r3, r3, #223	; 0xdf
   1050a:	cmp	r3, #88	; 0x58
   1050c:	beq.n	10526 <_strtoll_l.isra.0+0x18a>
   1050e:	movs	r6, #8
   10510:	movs	r7, #0
   10512:	mov.w	sl, #8
   10516:	b.n	1040c <_strtoll_l.isra.0+0x70>
   10518:	cmp	r4, #48	; 0x30
   1051a:	bne.n	10542 <_strtoll_l.isra.0+0x1a6>
   1051c:	ldrb	r3, [r5, #0]
   1051e:	and.w	r3, r3, #223	; 0xdf
   10522:	cmp	r3, #88	; 0x58
   10524:	bne.n	10542 <_strtoll_l.isra.0+0x1a6>
   10526:	ldrb	r4, [r5, #1]
   10528:	movs	r6, #16
   1052a:	movs	r7, #0
   1052c:	adds	r5, #2
   1052e:	mov.w	sl, #16
   10532:	b.n	1040c <_strtoll_l.isra.0+0x70>
   10534:	movs	r0, #0
   10536:	mov.w	r1, #2147483648	; 0x80000000
   1053a:	b.n	104f0 <_strtoll_l.isra.0+0x154>
   1053c:	mov	r0, r2
   1053e:	mov	r1, r3
   10540:	b.n	104c6 <_strtoll_l.isra.0+0x12a>
   10542:	movs	r6, #16
   10544:	movs	r7, #0
   10546:	b.n	1040c <_strtoll_l.isra.0+0x70>

00010548 <_strtoll_r>:
   10548:	push	{r4, r5, lr}
   1054a:	ldr	r4, [pc, #24]	; (10564 <_strtoll_r+0x1c>)
   1054c:	ldr	r5, [pc, #24]	; (10568 <_strtoll_r+0x20>)
   1054e:	ldr	r4, [r4, #0]
   10550:	ldr	r4, [r4, #52]	; 0x34
   10552:	sub	sp, #12
   10554:	cmp	r4, #0
   10556:	it	eq
   10558:	moveq	r4, r5
   1055a:	str	r4, [sp, #0]
   1055c:	bl	1039c <_strtoll_l.isra.0>
   10560:	add	sp, #12
   10562:	pop	{r4, r5, pc}
   10564:	.word	0x20001dac
   10568:	.word	0x20001830

0001056c <_strtoul_l.isra.0>:
   1056c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	ldr.w	r9, [sp, #40]	; 0x28
   10574:	mov	r6, r1
   10576:	mov	r7, r0
   10578:	mov	r5, r2
   1057a:	mov	r8, r3
   1057c:	mov	fp, r1
   1057e:	b.n	10582 <_strtoul_l.isra.0+0x16>
   10580:	mov	fp, r4
   10582:	mov	r4, fp
   10584:	mov	r0, r9
   10586:	ldrb.w	sl, [r4], #1
   1058a:	bl	9ed4 <__locale_ctype_ptr_l>
   1058e:	add	r0, sl
   10590:	ldrb	r0, [r0, #1]
   10592:	and.w	r0, r0, #8
   10596:	and.w	ip, r0, #255	; 0xff
   1059a:	cmp	r0, #0
   1059c:	bne.n	10580 <_strtoul_l.isra.0+0x14>
   1059e:	mov	r1, sl
   105a0:	cmp	r1, #45	; 0x2d
   105a2:	beq.n	10668 <_strtoul_l.isra.0+0xfc>
   105a4:	cmp	r1, #43	; 0x2b
   105a6:	itt	eq
   105a8:	ldrbeq.w	r1, [fp, #1]
   105ac:	addeq.w	r4, fp, #2
   105b0:	cmp.w	r8, #0
   105b4:	beq.n	105d0 <_strtoul_l.isra.0+0x64>
   105b6:	cmp.w	r8, #16
   105ba:	beq.n	10676 <_strtoul_l.isra.0+0x10a>
   105bc:	mov.w	r3, #4294967295
   105c0:	udiv	r3, r3, r8
   105c4:	mul.w	sl, r8, r3
   105c8:	mvn.w	sl, sl
   105cc:	mov	r9, r8
   105ce:	b.n	105e0 <_strtoul_l.isra.0+0x74>
   105d0:	cmp	r1, #48	; 0x30
   105d2:	beq.n	10698 <_strtoul_l.isra.0+0x12c>
   105d4:	mov.w	r8, #10
   105d8:	ldr	r3, [pc, #244]	; (106d0 <_strtoul_l.isra.0+0x164>)
   105da:	mov	r9, r8
   105dc:	mov.w	sl, #5
   105e0:	mov.w	lr, #0
   105e4:	mov	r0, lr
   105e6:	b.n	105f6 <_strtoul_l.isra.0+0x8a>
   105e8:	beq.n	1064a <_strtoul_l.isra.0+0xde>
   105ea:	mla	r0, r9, r0, r2
   105ee:	mov.w	lr, #1
   105f2:	ldrb.w	r1, [r4], #1
   105f6:	sub.w	r2, r1, #48	; 0x30
   105fa:	cmp	r2, #9
   105fc:	bls.n	1060a <_strtoul_l.isra.0+0x9e>
   105fe:	sub.w	r2, r1, #65	; 0x41
   10602:	cmp	r2, #25
   10604:	bhi.n	1061e <_strtoul_l.isra.0+0xb2>
   10606:	sub.w	r2, r1, #55	; 0x37
   1060a:	cmp	r8, r2
   1060c:	ble.n	1062e <_strtoul_l.isra.0+0xc2>
   1060e:	cmp.w	lr, #4294967295
   10612:	beq.n	105f2 <_strtoul_l.isra.0+0x86>
   10614:	cmp	r0, r3
   10616:	bls.n	105e8 <_strtoul_l.isra.0+0x7c>
   10618:	mov.w	lr, #4294967295
   1061c:	b.n	105f2 <_strtoul_l.isra.0+0x86>
   1061e:	sub.w	r2, r1, #97	; 0x61
   10622:	cmp	r2, #25
   10624:	bhi.n	1062e <_strtoul_l.isra.0+0xc2>
   10626:	sub.w	r2, r1, #87	; 0x57
   1062a:	cmp	r8, r2
   1062c:	bgt.n	1060e <_strtoul_l.isra.0+0xa2>
   1062e:	cmp.w	lr, #4294967295
   10632:	beq.n	10658 <_strtoul_l.isra.0+0xec>
   10634:	cmp.w	ip, #0
   10638:	beq.n	1063c <_strtoul_l.isra.0+0xd0>
   1063a:	negs	r0, r0
   1063c:	cbz	r5, 10654 <_strtoul_l.isra.0+0xe8>
   1063e:	cmp.w	lr, #0
   10642:	bne.n	10660 <_strtoul_l.isra.0+0xf4>
   10644:	str	r6, [r5, #0]
   10646:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1064a:	cmp	r2, sl
   1064c:	ble.n	105ea <_strtoul_l.isra.0+0x7e>
   1064e:	mov.w	lr, #4294967295
   10652:	b.n	105f2 <_strtoul_l.isra.0+0x86>
   10654:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10658:	movs	r3, #34	; 0x22
   1065a:	str	r3, [r7, #0]
   1065c:	mov	r0, lr
   1065e:	cbz	r5, 106b2 <_strtoul_l.isra.0+0x146>
   10660:	subs	r6, r4, #1
   10662:	str	r6, [r5, #0]
   10664:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10668:	add.w	r4, fp, #2
   1066c:	ldrb.w	r1, [fp, #1]
   10670:	mov.w	ip, #1
   10674:	b.n	105b0 <_strtoul_l.isra.0+0x44>
   10676:	cmp	r1, #48	; 0x30
   10678:	bne.n	106b6 <_strtoul_l.isra.0+0x14a>
   1067a:	ldrb	r3, [r4, #0]
   1067c:	and.w	r3, r3, #223	; 0xdf
   10680:	cmp	r3, #88	; 0x58
   10682:	bne.n	106c2 <_strtoul_l.isra.0+0x156>
   10684:	mov.w	r9, #16
   10688:	ldrb	r1, [r4, #1]
   1068a:	mov	r8, r9
   1068c:	mov.w	sl, #15
   10690:	adds	r4, #2
   10692:	mvn.w	r3, #4026531840	; 0xf0000000
   10696:	b.n	105e0 <_strtoul_l.isra.0+0x74>
   10698:	ldrb	r3, [r4, #0]
   1069a:	and.w	r3, r3, #223	; 0xdf
   1069e:	cmp	r3, #88	; 0x58
   106a0:	beq.n	10684 <_strtoul_l.isra.0+0x118>
   106a2:	mov.w	r8, #8
   106a6:	mov	r9, r8
   106a8:	mov.w	sl, #7
   106ac:	mvn.w	r3, #3758096384	; 0xe0000000
   106b0:	b.n	105e0 <_strtoul_l.isra.0+0x74>
   106b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106b6:	mov.w	sl, #15
   106ba:	mvn.w	r3, #4026531840	; 0xf0000000
   106be:	mov	r9, r8
   106c0:	b.n	105e0 <_strtoul_l.isra.0+0x74>
   106c2:	mov	r9, r8
   106c4:	mov.w	sl, #15
   106c8:	mvn.w	r3, #4026531840	; 0xf0000000
   106cc:	b.n	105e0 <_strtoul_l.isra.0+0x74>
   106ce:	nop
   106d0:	.word	0x19999999

000106d4 <_strtoul_r>:
   106d4:	push	{r4, r5, lr}
   106d6:	ldr	r4, [pc, #24]	; (106f0 <_strtoul_r+0x1c>)
   106d8:	ldr	r5, [pc, #24]	; (106f4 <_strtoul_r+0x20>)
   106da:	ldr	r4, [r4, #0]
   106dc:	ldr	r4, [r4, #52]	; 0x34
   106de:	sub	sp, #12
   106e0:	cmp	r4, #0
   106e2:	it	eq
   106e4:	moveq	r4, r5
   106e6:	str	r4, [sp, #0]
   106e8:	bl	1056c <_strtoul_l.isra.0>
   106ec:	add	sp, #12
   106ee:	pop	{r4, r5, pc}
   106f0:	.word	0x20001dac
   106f4:	.word	0x20001830

000106f8 <_strtoull_l.isra.0>:
   106f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106fc:	sub	sp, #20
   106fe:	mov	fp, r1
   10700:	str	r0, [sp, #8]
   10702:	mov	r7, r2
   10704:	mov	r6, r3
   10706:	mov	r8, r1
   10708:	ldr	r4, [sp, #56]	; 0x38
   1070a:	b.n	1070e <_strtoull_l.isra.0+0x16>
   1070c:	mov	r8, r5
   1070e:	mov	r5, r8
   10710:	mov	r0, r4
   10712:	ldrb.w	r9, [r5], #1
   10716:	bl	9ed4 <__locale_ctype_ptr_l>
   1071a:	add	r0, r9
   1071c:	ldrb	r3, [r0, #1]
   1071e:	and.w	r3, r3, #8
   10722:	and.w	r2, r3, #255	; 0xff
   10726:	cmp	r3, #0
   10728:	bne.n	1070c <_strtoull_l.isra.0+0x14>
   1072a:	mov	r4, r9
   1072c:	cmp	r4, #45	; 0x2d
   1072e:	beq.w	1084a <_strtoull_l.isra.0+0x152>
   10732:	cmp	r4, #43	; 0x2b
   10734:	it	eq
   10736:	ldrbeq.w	r4, [r8, #1]
   1073a:	str	r2, [sp, #4]
   1073c:	it	eq
   1073e:	addeq.w	r5, r8, #2
   10742:	cbz	r6, 1077c <_strtoull_l.isra.0+0x84>
   10744:	cmp	r6, #16
   10746:	beq.w	10858 <_strtoull_l.isra.0+0x160>
   1074a:	mov.w	r9, r6, asr #31
   1074e:	mov	r2, r6
   10750:	mov	r3, r9
   10752:	mov.w	r0, #4294967295
   10756:	mov.w	r1, #4294967295
   1075a:	bl	9b20 <__aeabi_uldivmod>
   1075e:	mov	r2, r6
   10760:	str	r0, [sp, #12]
   10762:	mov	sl, r1
   10764:	mov	r3, r9
   10766:	mov.w	r0, #4294967295
   1076a:	mov.w	r1, #4294967295
   1076e:	bl	9b20 <__aeabi_uldivmod>
   10772:	mov	r8, r6
   10774:	mov	lr, r2
   10776:	ldr	r2, [sp, #12]
   10778:	mov	r3, sl
   1077a:	b.n	10796 <_strtoull_l.isra.0+0x9e>
   1077c:	cmp	r4, #48	; 0x30
   1077e:	beq.w	10884 <_strtoull_l.isra.0+0x18c>
   10782:	ldr	r3, [pc, #348]	; (108e0 <_strtoull_l.isra.0+0x1e8>)
   10784:	mov.w	lr, #5
   10788:	mov.w	r2, #2576980377	; 0x99999999
   1078c:	mov.w	r8, #10
   10790:	mov.w	r9, #0
   10794:	movs	r6, #10
   10796:	mov.w	ip, #0
   1079a:	movs	r0, #0
   1079c:	movs	r1, #0
   1079e:	b.n	107c6 <_strtoull_l.isra.0+0xce>
   107a0:	cmp	r1, r3
   107a2:	it	eq
   107a4:	cmpeq	r0, r2
   107a6:	beq.n	1082a <_strtoull_l.isra.0+0x132>
   107a8:	mul.w	r4, r0, r9
   107ac:	mla	r4, r8, r1, r4
   107b0:	umull	r0, r1, r0, r8
   107b4:	add	r1, r4
   107b6:	adds.w	r0, r0, sl
   107ba:	adc.w	r1, r1, sl, asr #31
   107be:	mov.w	ip, #1
   107c2:	ldrb.w	r4, [r5], #1
   107c6:	sub.w	sl, r4, #48	; 0x30
   107ca:	cmp.w	sl, #9
   107ce:	bls.n	107de <_strtoull_l.isra.0+0xe6>
   107d0:	sub.w	sl, r4, #65	; 0x41
   107d4:	cmp.w	sl, #25
   107d8:	bhi.n	107f6 <_strtoull_l.isra.0+0xfe>
   107da:	sub.w	sl, r4, #55	; 0x37
   107de:	cmp	r6, sl
   107e0:	ble.n	10808 <_strtoull_l.isra.0+0x110>
   107e2:	cmp.w	ip, #4294967295
   107e6:	beq.n	107c2 <_strtoull_l.isra.0+0xca>
   107e8:	cmp	r3, r1
   107ea:	it	eq
   107ec:	cmpeq	r2, r0
   107ee:	bcs.n	107a0 <_strtoull_l.isra.0+0xa8>
   107f0:	mov.w	ip, #4294967295
   107f4:	b.n	107c2 <_strtoull_l.isra.0+0xca>
   107f6:	sub.w	sl, r4, #97	; 0x61
   107fa:	cmp.w	sl, #25
   107fe:	bhi.n	10808 <_strtoull_l.isra.0+0x110>
   10800:	sub.w	sl, r4, #87	; 0x57
   10804:	cmp	r6, sl
   10806:	bgt.n	107e2 <_strtoull_l.isra.0+0xea>
   10808:	cmp.w	ip, #4294967295
   1080c:	beq.n	10834 <_strtoull_l.isra.0+0x13c>
   1080e:	ldr	r3, [sp, #4]
   10810:	cbz	r3, 10818 <_strtoull_l.isra.0+0x120>
   10812:	negs	r0, r0
   10814:	sbc.w	r1, r1, r1, lsl #1
   10818:	cbz	r7, 10824 <_strtoull_l.isra.0+0x12c>
   1081a:	cmp.w	ip, #0
   1081e:	bne.n	10846 <_strtoull_l.isra.0+0x14e>
   10820:	mov	r5, fp
   10822:	str	r5, [r7, #0]
   10824:	add	sp, #20
   10826:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1082a:	cmp	sl, lr
   1082c:	ble.n	107a8 <_strtoull_l.isra.0+0xb0>
   1082e:	mov.w	ip, #4294967295
   10832:	b.n	107c2 <_strtoull_l.isra.0+0xca>
   10834:	ldr	r2, [sp, #8]
   10836:	movs	r3, #34	; 0x22
   10838:	str	r3, [r2, #0]
   1083a:	mov.w	r0, #4294967295
   1083e:	mov.w	r1, #4294967295
   10842:	cmp	r7, #0
   10844:	beq.n	10824 <_strtoull_l.isra.0+0x12c>
   10846:	subs	r5, #1
   10848:	b.n	10822 <_strtoull_l.isra.0+0x12a>
   1084a:	movs	r3, #1
   1084c:	add.w	r5, r8, #2
   10850:	ldrb.w	r4, [r8, #1]
   10854:	str	r3, [sp, #4]
   10856:	b.n	10742 <_strtoull_l.isra.0+0x4a>
   10858:	cmp	r4, #48	; 0x30
   1085a:	bne.n	108a6 <_strtoull_l.isra.0+0x1ae>
   1085c:	ldrb	r3, [r5, #0]
   1085e:	and.w	r3, r3, #223	; 0xdf
   10862:	cmp	r3, #88	; 0x58
   10864:	bne.n	108bc <_strtoull_l.isra.0+0x1c4>
   10866:	mov.w	r3, #4294967295
   1086a:	ldrb	r4, [r5, #1]
   1086c:	str	r3, [sp, #12]
   1086e:	mov.w	lr, #15
   10872:	adds	r5, #2
   10874:	mvn.w	sl, #4026531840	; 0xf0000000
   10878:	mov.w	r8, #16
   1087c:	mov.w	r9, #0
   10880:	movs	r6, #16
   10882:	b.n	10776 <_strtoull_l.isra.0+0x7e>
   10884:	ldrb	r3, [r5, #0]
   10886:	and.w	r3, r3, #223	; 0xdf
   1088a:	cmp	r3, #88	; 0x58
   1088c:	beq.n	10866 <_strtoull_l.isra.0+0x16e>
   1088e:	mov.w	lr, #7
   10892:	mov.w	r2, #4294967295
   10896:	mvn.w	r3, #3758096384	; 0xe0000000
   1089a:	mov.w	r8, #8
   1089e:	mov.w	r9, #0
   108a2:	movs	r6, #8
   108a4:	b.n	10796 <_strtoull_l.isra.0+0x9e>
   108a6:	mov.w	lr, #15
   108aa:	mov.w	r2, #4294967295
   108ae:	mvn.w	r3, #4026531840	; 0xf0000000
   108b2:	mov.w	r8, #16
   108b6:	mov.w	r9, #0
   108ba:	b.n	10796 <_strtoull_l.isra.0+0x9e>
   108bc:	mov.w	r8, #16
   108c0:	mov.w	r9, #0
   108c4:	mov	r2, r8
   108c6:	mov	r3, r9
   108c8:	mov.w	r0, #4294967295
   108cc:	mov.w	r1, #4294967295
   108d0:	bl	9b20 <__aeabi_uldivmod>
   108d4:	mvn.w	r3, #4026531840	; 0xf0000000
   108d8:	mov	lr, r2
   108da:	mov.w	r2, #4294967295
   108de:	b.n	10796 <_strtoull_l.isra.0+0x9e>
   108e0:	.word	0x19999999

000108e4 <_strtoull_r>:
   108e4:	push	{r4, r5, lr}
   108e6:	ldr	r4, [pc, #24]	; (10900 <_strtoull_r+0x1c>)
   108e8:	ldr	r5, [pc, #24]	; (10904 <_strtoull_r+0x20>)
   108ea:	ldr	r4, [r4, #0]
   108ec:	ldr	r4, [r4, #52]	; 0x34
   108ee:	sub	sp, #12
   108f0:	cmp	r4, #0
   108f2:	it	eq
   108f4:	moveq	r4, r5
   108f6:	str	r4, [sp, #0]
   108f8:	bl	106f8 <_strtoull_l.isra.0>
   108fc:	add	sp, #12
   108fe:	pop	{r4, r5, pc}
   10900:	.word	0x20001dac
   10904:	.word	0x20001830

00010908 <__ssprint_r>:
   10908:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1090c:	ldr	r3, [r2, #8]
   1090e:	sub	sp, #12
   10910:	mov	r8, r2
   10912:	cmp	r3, #0
   10914:	beq.n	109fc <__ssprint_r+0xf4>
   10916:	mov	fp, r0
   10918:	mov.w	r9, #0
   1091c:	ldr	r6, [r2, #0]
   1091e:	ldr	r0, [r1, #0]
   10920:	ldr	r3, [r1, #8]
   10922:	mov	r5, r1
   10924:	mov	r4, r9
   10926:	cmp	r4, #0
   10928:	beq.n	109b6 <__ssprint_r+0xae>
   1092a:	cmp	r4, r3
   1092c:	mov	r7, r3
   1092e:	mov	sl, r3
   10930:	bcc.n	109c0 <__ssprint_r+0xb8>
   10932:	ldrh	r3, [r5, #12]
   10934:	tst.w	r3, #1152	; 0x480
   10938:	beq.n	10996 <__ssprint_r+0x8e>
   1093a:	ldr	r7, [r5, #20]
   1093c:	ldr	r1, [r5, #16]
   1093e:	add.w	r7, r7, r7, lsl #1
   10942:	rsb	sl, r1, r0
   10946:	add.w	r7, r7, r7, lsr #31
   1094a:	adds	r0, r4, #1
   1094c:	asrs	r7, r7, #1
   1094e:	add	r0, sl
   10950:	cmp	r0, r7
   10952:	mov	r2, r7
   10954:	itt	hi
   10956:	movhi	r7, r0
   10958:	movhi	r2, r7
   1095a:	lsls	r3, r3, #21
   1095c:	bpl.n	109c6 <__ssprint_r+0xbe>
   1095e:	mov	r1, r2
   10960:	mov	r0, fp
   10962:	bl	9f10 <_malloc_r>
   10966:	cmp	r0, #0
   10968:	beq.n	109da <__ssprint_r+0xd2>
   1096a:	mov	r2, sl
   1096c:	ldr	r1, [r5, #16]
   1096e:	str	r0, [sp, #4]
   10970:	bl	7fb0 <memcpy>
   10974:	ldrh	r2, [r5, #12]
   10976:	ldr	r3, [sp, #4]
   10978:	bic.w	r2, r2, #1152	; 0x480
   1097c:	orr.w	r2, r2, #128	; 0x80
   10980:	strh	r2, [r5, #12]
   10982:	rsb	r2, sl, r7
   10986:	add.w	r0, r3, sl
   1098a:	str	r7, [r5, #20]
   1098c:	str	r3, [r5, #16]
   1098e:	str	r0, [r5, #0]
   10990:	str	r2, [r5, #8]
   10992:	mov	r7, r4
   10994:	mov	sl, r4
   10996:	mov	r2, sl
   10998:	mov	r1, r9
   1099a:	bl	a5b4 <memmove>
   1099e:	ldr.w	r2, [r8, #8]
   109a2:	ldr	r3, [r5, #8]
   109a4:	ldr	r0, [r5, #0]
   109a6:	subs	r3, r3, r7
   109a8:	add	r0, sl
   109aa:	subs	r4, r2, r4
   109ac:	str	r3, [r5, #8]
   109ae:	str	r0, [r5, #0]
   109b0:	str.w	r4, [r8, #8]
   109b4:	cbz	r4, 109fc <__ssprint_r+0xf4>
   109b6:	ldr.w	r9, [r6]
   109ba:	ldr	r4, [r6, #4]
   109bc:	adds	r6, #8
   109be:	b.n	10926 <__ssprint_r+0x1e>
   109c0:	mov	r7, r4
   109c2:	mov	sl, r4
   109c4:	b.n	10996 <__ssprint_r+0x8e>
   109c6:	mov	r0, fp
   109c8:	bl	a684 <_realloc_r>
   109cc:	mov	r3, r0
   109ce:	cmp	r0, #0
   109d0:	bne.n	10982 <__ssprint_r+0x7a>
   109d2:	ldr	r1, [r5, #16]
   109d4:	mov	r0, fp
   109d6:	bl	f068 <_free_r>
   109da:	movs	r3, #12
   109dc:	str.w	r3, [fp]
   109e0:	ldrh	r3, [r5, #12]
   109e2:	movs	r2, #0
   109e4:	orr.w	r3, r3, #64	; 0x40
   109e8:	mov.w	r0, #4294967295
   109ec:	strh	r3, [r5, #12]
   109ee:	str.w	r2, [r8, #8]
   109f2:	str.w	r2, [r8, #4]
   109f6:	add	sp, #12
   109f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109fc:	movs	r0, #0
   109fe:	str.w	r0, [r8, #4]
   10a02:	add	sp, #12
   10a04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a08 <_sungetc_r>:
   10a08:	adds	r3, r1, #1
   10a0a:	push	{r4, r5, r6, lr}
   10a0c:	beq.n	10a46 <_sungetc_r+0x3e>
   10a0e:	ldrh	r3, [r2, #12]
   10a10:	ldr	r4, [r2, #48]	; 0x30
   10a12:	bic.w	r3, r3, #32
   10a16:	strh	r3, [r2, #12]
   10a18:	uxtb	r5, r1
   10a1a:	cbz	r4, 10a4c <_sungetc_r+0x44>
   10a1c:	mov	r4, r2
   10a1e:	ldr	r2, [r2, #4]
   10a20:	ldr	r3, [r4, #52]	; 0x34
   10a22:	cmp	r2, r3
   10a24:	mov	r6, r1
   10a26:	bge.n	10a3c <_sungetc_r+0x34>
   10a28:	ldr	r3, [r4, #0]
   10a2a:	subs	r2, r3, #1
   10a2c:	str	r2, [r4, #0]
   10a2e:	strb.w	r6, [r3, #-1]
   10a32:	ldr	r3, [r4, #4]
   10a34:	adds	r3, #1
   10a36:	str	r3, [r4, #4]
   10a38:	mov	r0, r5
   10a3a:	pop	{r4, r5, r6, pc}
   10a3c:	mov	r1, r4
   10a3e:	bl	10b4c <__submore>
   10a42:	cmp	r0, #0
   10a44:	beq.n	10a28 <_sungetc_r+0x20>
   10a46:	mov.w	r5, #4294967295
   10a4a:	b.n	10a38 <_sungetc_r+0x30>
   10a4c:	ldr	r0, [r2, #16]
   10a4e:	ldr	r3, [r2, #0]
   10a50:	cbz	r0, 10a5e <_sungetc_r+0x56>
   10a52:	cmp	r0, r3
   10a54:	bcs.n	10a5e <_sungetc_r+0x56>
   10a56:	ldrb.w	r0, [r3, #-1]
   10a5a:	cmp	r5, r0
   10a5c:	beq.n	10a7e <_sungetc_r+0x76>
   10a5e:	str	r3, [r2, #56]	; 0x38
   10a60:	mov	r3, r2
   10a62:	ldr	r6, [r2, #4]
   10a64:	str	r6, [r2, #60]	; 0x3c
   10a66:	add.w	r4, r2, #64	; 0x40
   10a6a:	movs	r0, #3
   10a6c:	str	r0, [r2, #52]	; 0x34
   10a6e:	str	r4, [r2, #48]	; 0x30
   10a70:	strb.w	r1, [r3, #66]!
   10a74:	movs	r1, #1
   10a76:	str	r3, [r2, #0]
   10a78:	str	r1, [r2, #4]
   10a7a:	mov	r0, r5
   10a7c:	pop	{r4, r5, r6, pc}
   10a7e:	ldr	r1, [r2, #4]
   10a80:	subs	r3, #1
   10a82:	adds	r1, #1
   10a84:	str	r3, [r2, #0]
   10a86:	str	r1, [r2, #4]
   10a88:	b.n	10a38 <_sungetc_r+0x30>
   10a8a:	nop

00010a8c <__ssrefill_r>:
   10a8c:	push	{r4, lr}
   10a8e:	mov	r4, r1
   10a90:	ldr	r1, [r1, #48]	; 0x30
   10a92:	cbz	r1, 10ab0 <__ssrefill_r+0x24>
   10a94:	add.w	r3, r4, #64	; 0x40
   10a98:	cmp	r1, r3
   10a9a:	beq.n	10aa0 <__ssrefill_r+0x14>
   10a9c:	bl	f068 <_free_r>
   10aa0:	ldr	r3, [r4, #60]	; 0x3c
   10aa2:	str	r3, [r4, #4]
   10aa4:	movs	r0, #0
   10aa6:	str	r0, [r4, #48]	; 0x30
   10aa8:	cbz	r3, 10ab0 <__ssrefill_r+0x24>
   10aaa:	ldr	r3, [r4, #56]	; 0x38
   10aac:	str	r3, [r4, #0]
   10aae:	pop	{r4, pc}
   10ab0:	ldrh	r3, [r4, #12]
   10ab2:	ldr	r2, [r4, #16]
   10ab4:	str	r2, [r4, #0]
   10ab6:	orr.w	r3, r3, #32
   10aba:	movs	r2, #0
   10abc:	strh	r3, [r4, #12]
   10abe:	str	r2, [r4, #4]
   10ac0:	mov.w	r0, #4294967295
   10ac4:	pop	{r4, pc}
   10ac6:	nop

00010ac8 <_sfread_r>:
   10ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10acc:	sub	sp, #12
   10ace:	mul.w	r9, r2, r3
   10ad2:	str	r2, [sp, #4]
   10ad4:	mov	sl, r3
   10ad6:	ldr	r4, [sp, #48]	; 0x30
   10ad8:	cmp.w	r9, #0
   10adc:	beq.n	10b32 <_sfread_r+0x6a>
   10ade:	mov	r7, r0
   10ae0:	mov	r6, r1
   10ae2:	mov	r5, r9
   10ae4:	mov.w	r8, #0
   10ae8:	b.n	10b0a <_sfread_r+0x42>
   10aea:	ldr	r1, [r4, #0]
   10aec:	bl	7fb0 <memcpy>
   10af0:	ldr	r2, [r4, #0]
   10af2:	str.w	r8, [r4, #4]
   10af6:	add	r2, fp
   10af8:	str	r2, [r4, #0]
   10afa:	mov	r1, r4
   10afc:	mov	r0, r7
   10afe:	add	r6, fp
   10b00:	rsb	r5, fp, r5
   10b04:	bl	10a8c <__ssrefill_r>
   10b08:	cbnz	r0, 10b3a <_sfread_r+0x72>
   10b0a:	ldr.w	fp, [r4, #4]
   10b0e:	cmp	r5, fp
   10b10:	mov	r0, r6
   10b12:	mov	r2, fp
   10b14:	bhi.n	10aea <_sfread_r+0x22>
   10b16:	mov	r2, r5
   10b18:	ldr	r1, [r4, #0]
   10b1a:	bl	7fb0 <memcpy>
   10b1e:	ldr	r2, [r4, #4]
   10b20:	ldr	r3, [r4, #0]
   10b22:	subs	r2, r2, r5
   10b24:	add	r3, r5
   10b26:	mov	r0, sl
   10b28:	str	r2, [r4, #4]
   10b2a:	str	r3, [r4, #0]
   10b2c:	add	sp, #12
   10b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b32:	mov	r0, r9
   10b34:	add	sp, #12
   10b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b3a:	ldr	r3, [sp, #4]
   10b3c:	rsb	r9, r5, r9
   10b40:	udiv	r0, r9, r3
   10b44:	add	sp, #12
   10b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b4a:	nop

00010b4c <__submore>:
   10b4c:	add.w	r3, r1, #64	; 0x40
   10b50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b54:	mov	r4, r1
   10b56:	ldr	r1, [r1, #48]	; 0x30
   10b58:	cmp	r1, r3
   10b5a:	beq.n	10b86 <__submore+0x3a>
   10b5c:	ldr	r6, [r4, #52]	; 0x34
   10b5e:	lsls	r7, r6, #1
   10b60:	mov	r2, r7
   10b62:	bl	a684 <_realloc_r>
   10b66:	mov	r5, r0
   10b68:	cbz	r0, 10bbc <__submore+0x70>
   10b6a:	add.w	r8, r0, r6
   10b6e:	mov	r2, r6
   10b70:	mov	r0, r8
   10b72:	mov	r1, r5
   10b74:	bl	7fb0 <memcpy>
   10b78:	str.w	r8, [r4]
   10b7c:	str	r5, [r4, #48]	; 0x30
   10b7e:	str	r7, [r4, #52]	; 0x34
   10b80:	movs	r0, #0
   10b82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b86:	mov.w	r1, #1024	; 0x400
   10b8a:	bl	9f10 <_malloc_r>
   10b8e:	cbz	r0, 10bbc <__submore+0x70>
   10b90:	ldrb.w	r3, [r4, #66]	; 0x42
   10b94:	str	r0, [r4, #48]	; 0x30
   10b96:	mov.w	r2, #1024	; 0x400
   10b9a:	str	r2, [r4, #52]	; 0x34
   10b9c:	strb.w	r3, [r0, #1023]	; 0x3ff
   10ba0:	ldrb.w	r3, [r4, #65]	; 0x41
   10ba4:	strb.w	r3, [r0, #1022]	; 0x3fe
   10ba8:	ldrb.w	r3, [r4, #64]	; 0x40
   10bac:	strb.w	r3, [r0, #1021]	; 0x3fd
   10bb0:	addw	r0, r0, #1021	; 0x3fd
   10bb4:	str	r0, [r4, #0]
   10bb6:	movs	r0, #0
   10bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bbc:	mov.w	r0, #4294967295
   10bc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010bc4 <_vasnprintf_r>:
   10bc4:	push	{r4, r5, r6, lr}
   10bc6:	mov	r5, r2
   10bc8:	sub	sp, #104	; 0x68
   10bca:	ldr	r4, [r2, #0]
   10bcc:	cbz	r1, 10bd2 <_vasnprintf_r+0xe>
   10bce:	cmp	r4, #0
   10bd0:	bne.n	10c08 <_vasnprintf_r+0x44>
   10bd2:	movs	r4, #0
   10bd4:	mov.w	r2, #648	; 0x288
   10bd8:	strh.w	r2, [sp, #12]
   10bdc:	str	r4, [sp, #0]
   10bde:	str	r4, [sp, #16]
   10be0:	mov	r2, r3
   10be2:	movw	r6, #65535	; 0xffff
   10be6:	ldr	r3, [sp, #120]	; 0x78
   10be8:	str	r4, [sp, #8]
   10bea:	mov	r1, sp
   10bec:	str	r4, [sp, #20]
   10bee:	strh.w	r6, [sp, #14]
   10bf2:	bl	bce0 <_svfprintf_r>
   10bf6:	cmp	r0, #0
   10bf8:	blt.n	10c1e <_vasnprintf_r+0x5a>
   10bfa:	ldr	r3, [sp, #0]
   10bfc:	str	r0, [r5, #0]
   10bfe:	movs	r2, #0
   10c00:	strb	r2, [r3, #0]
   10c02:	ldr	r0, [sp, #16]
   10c04:	add	sp, #104	; 0x68
   10c06:	pop	{r4, r5, r6, pc}
   10c08:	mov.w	r2, #1544	; 0x608
   10c0c:	str	r1, [sp, #0]
   10c0e:	str	r1, [sp, #16]
   10c10:	strh.w	r2, [sp, #12]
   10c14:	bge.n	10be0 <_vasnprintf_r+0x1c>
   10c16:	movs	r3, #139	; 0x8b
   10c18:	str	r3, [r0, #0]
   10c1a:	movs	r0, #0
   10c1c:	b.n	10c04 <_vasnprintf_r+0x40>
   10c1e:	movs	r0, #0
   10c20:	b.n	10c04 <_vasnprintf_r+0x40>
   10c22:	nop

00010c24 <_calloc_r>:
   10c24:	push	{r4, lr}
   10c26:	mul.w	r1, r2, r1
   10c2a:	bl	9f10 <_malloc_r>
   10c2e:	mov	r4, r0
   10c30:	cbz	r0, 10c6a <_calloc_r+0x46>
   10c32:	ldr.w	r2, [r0, #-4]
   10c36:	bic.w	r2, r2, #3
   10c3a:	subs	r2, #4
   10c3c:	cmp	r2, #36	; 0x24
   10c3e:	bhi.n	10c72 <_calloc_r+0x4e>
   10c40:	cmp	r2, #19
   10c42:	bls.n	10c6e <_calloc_r+0x4a>
   10c44:	movs	r3, #0
   10c46:	cmp	r2, #27
   10c48:	str	r3, [r0, #0]
   10c4a:	str	r3, [r0, #4]
   10c4c:	bls.n	10c7c <_calloc_r+0x58>
   10c4e:	cmp	r2, #36	; 0x24
   10c50:	str	r3, [r0, #8]
   10c52:	str	r3, [r0, #12]
   10c54:	iteee	ne
   10c56:	addne.w	r2, r0, #16
   10c5a:	streq	r3, [r0, #16]
   10c5c:	streq	r3, [r0, #20]
   10c5e:	addeq.w	r2, r0, #24
   10c62:	movs	r3, #0
   10c64:	str	r3, [r2, #0]
   10c66:	str	r3, [r2, #4]
   10c68:	str	r3, [r2, #8]
   10c6a:	mov	r0, r4
   10c6c:	pop	{r4, pc}
   10c6e:	mov	r2, r0
   10c70:	b.n	10c62 <_calloc_r+0x3e>
   10c72:	movs	r1, #0
   10c74:	bl	7f6c <memset>
   10c78:	mov	r0, r4
   10c7a:	pop	{r4, pc}
   10c7c:	add.w	r2, r0, #8
   10c80:	b.n	10c62 <_calloc_r+0x3e>
   10c82:	nop
   10c84:	movs	r0, r0
	...

00010c88 <___Z14set_audioClockilmb_veneer>:
   10c88:	ldr.w	pc, [pc]	; 10c8c <___Z14set_audioClockilmb_veneer+0x4>
   10c8c:	.word	0x60001d71

00010c90 <___init_veneer>:
   10c90:	ldr.w	pc, [pc]	; 10c94 <___init_veneer+0x4>
   10c94:	.word	0x60001d15

00010c98 <___reboot_Teensyduino__veneer>:
   10c98:	ldr.w	pc, [pc]	; 10c9c <___reboot_Teensyduino__veneer+0x4>
   10c9c:	.word	0x6000172d

Disassembly of section .fini:

00010ca0 <_fini>:
   10ca0:	push	{r3, r4, r5, r6, r7, lr}
   10ca2:	nop

Disassembly of section .text.csf:

60014e68 <_heap_end+0x3fd94e68>:
60014e68:	.word	0xffffffff
60014e6c:	.word	0xffffffff
60014e70:	.word	0xffffffff
60014e74:	.word	0xffffffff
60014e78:	.word	0xffffffff
60014e7c:	.word	0xffffffff
60014e80:	.word	0xffffffff
60014e84:	.word	0xffffffff
60014e88:	.word	0xffffffff
60014e8c:	.word	0xffffffff
60014e90:	.word	0xffffffff
60014e94:	.word	0xffffffff
60014e98:	.word	0xffffffff
60014e9c:	.word	0xffffffff
60014ea0:	.word	0xffffffff
60014ea4:	.word	0xffffffff
60014ea8:	.word	0xffffffff
60014eac:	.word	0xffffffff
60014eb0:	.word	0xffffffff
60014eb4:	.word	0xffffffff
60014eb8:	.word	0xffffffff
60014ebc:	.word	0xffffffff
60014ec0:	.word	0xffffffff
60014ec4:	.word	0xffffffff
60014ec8:	.word	0xffffffff
60014ecc:	.word	0xffffffff
60014ed0:	.word	0xffffffff
60014ed4:	.word	0xffffffff
60014ed8:	.word	0xffffffff
60014edc:	.word	0xffffffff
60014ee0:	.word	0xffffffff
60014ee4:	.word	0xffffffff
60014ee8:	.word	0xffffffff
60014eec:	.word	0xffffffff
60014ef0:	.word	0xffffffff
60014ef4:	.word	0xffffffff
60014ef8:	.word	0xffffffff
60014efc:	.word	0xffffffff
60014f00:	.word	0xffffffff
60014f04:	.word	0xffffffff
60014f08:	.word	0xffffffff
60014f0c:	.word	0xffffffff
60014f10:	.word	0xffffffff
60014f14:	.word	0xffffffff
60014f18:	.word	0xffffffff
60014f1c:	.word	0xffffffff
60014f20:	.word	0xffffffff
60014f24:	.word	0xffffffff
60014f28:	.word	0xffffffff
60014f2c:	.word	0xffffffff
60014f30:	.word	0xffffffff
60014f34:	.word	0xffffffff
60014f38:	.word	0xffffffff
60014f3c:	.word	0xffffffff
60014f40:	.word	0xffffffff
60014f44:	.word	0xffffffff
60014f48:	.word	0xffffffff
60014f4c:	.word	0xffffffff
60014f50:	.word	0xffffffff
60014f54:	.word	0xffffffff
60014f58:	.word	0xffffffff
60014f5c:	.word	0xffffffff
60014f60:	.word	0xffffffff
60014f64:	.word	0xffffffff
60014f68:	.word	0xffffffff
60014f6c:	.word	0xffffffff
60014f70:	.word	0xffffffff
60014f74:	.word	0xffffffff
60014f78:	.word	0xffffffff
60014f7c:	.word	0xffffffff
60014f80:	.word	0xffffffff
60014f84:	.word	0xffffffff
60014f88:	.word	0xffffffff
60014f8c:	.word	0xffffffff
60014f90:	.word	0xffffffff
60014f94:	.word	0xffffffff
60014f98:	.word	0xffffffff
60014f9c:	.word	0xffffffff
60014fa0:	.word	0xffffffff
60014fa4:	.word	0xffffffff
60014fa8:	.word	0xffffffff
60014fac:	.word	0xffffffff
60014fb0:	.word	0xffffffff
60014fb4:	.word	0xffffffff
60014fb8:	.word	0xffffffff
60014fbc:	.word	0xffffffff
60014fc0:	.word	0xffffffff
60014fc4:	.word	0xffffffff
60014fc8:	.word	0xffffffff
60014fcc:	.word	0xffffffff
60014fd0:	.word	0xffffffff
60014fd4:	.word	0xffffffff
60014fd8:	.word	0xffffffff
60014fdc:	.word	0xffffffff
60014fe0:	.word	0xffffffff
60014fe4:	.word	0xffffffff
60014fe8:	.word	0xffffffff
60014fec:	.word	0xffffffff
60014ff0:	.word	0xffffffff
60014ff4:	.word	0xffffffff
60014ff8:	.word	0xffffffff
60014ffc:	.word	0xffffffff

60015000 <hab_csf>:
	...
