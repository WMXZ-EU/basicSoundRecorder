
.vsteensy/build/basicSoundRecorder_T40.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001bd4 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000114b0 l    d  .fini	00000000 .fini
000114b4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200022c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
60015518 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001416 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 acq.cpp
00000344 l     F .text.itcm	00000078 acq_isr()
000003bc l     F .text.itcm	00000028 _GLOBAL__sub_I_acq_count
20200000 l     O .bss.dma	00000800 tdm_rx_buffer
20003938 l     O .bss	00000400 acq_rx_buffer
20003d38 l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
000091e8 l     F .text.itcm	000000ac endpoint0_receive
00009294 l     F .text.itcm	00000080 schedule_transfer
00009314 l     F .text.itcm	00000034 run_callbacks
00009348 l     F .text.itcm	00000098 endpoint0_transmit.constprop.1
20036dec l     O .bss	00000004 endpointN_notify_mask
2003764f l     O .bss	00000001 sof_usage
20036de8 l     O .bss	00000004 endpoint0_notify_mask
20037656 l     O .bss	00000001 usb_reboot_timer
20002440 l     O .bss	00000008 endpoint0_setupdata
2003763c l     O .bss	00000008 reply_buffer
20037634 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20036e38 l     O .bss	00000004 s_hotTemp
20036e3c l     O .bss	00000004 s_hot_ROOM
20036e40 l     O .bss	00000004 s_roomC_hotC
20036e34 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
20037633 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20002448 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000244c l       .bss	00000000 object.8610
60001bc0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 filing.cpp
00001434 l     F .text.itcm	00000002 __tcf_0
000014f8 l     F .text.itcm	00000024 File::dec_refcount() [clone .isra.23]
00001e7c l     F .text.itcm	000000c0 _GLOBAL__sub_I_data_buffer
20003d40 l     O .bss	00000004 isd
20001854 l     O .data	00000004 checkDiskSpace()::isd_
20037392 l     O .bss	00000200 saveData(short)::header
200375e2 l     O .bss	00000050 saveData(short)::fileName
20003d98 l     O .bss	00000004 saveData(short)::dirFlag
20037592 l     O .bss	00000050 saveData(short)::dirName
20002938 l     O .bss	00001000 dummy_buffer
00000000 l    df *ABS*	00000000 adc.cpp
000021d4 l     F .text.itcm	00000014 _GLOBAL__sub_I_gain
00000000 l    df *ABS*	00000000 SD.cpp
00002d44 l     F .text.itcm	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FsGetPartitionInfo.cpp
60001cb8 l     O .text.progmem	00000010 FsGetPartitionInfo::mbdpGuid
00000000 l    df *ABS*	00000000 usb_desc.c
60001d90 l     O .text.progmem	0000000a qualifier_descriptor
20001dff l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 main.cpp
20003d90 l     O .bss	00000004 checkToCloseFile(short, unsigned long)::to
20003d94 l     O .bss	00000004 loop::t0
20037320 l     O .bss	00000002 loop::status
00000000 l    df *ABS*	00000000 menu.cpp
000007ec l     F .text.itcm	00000024 File::dec_refcount() [clone .isra.15]
00000000 l    df *ABS*	00000000 mTime.cpp
20000e3a l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 utils.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00002688 l     F .text.itcm	00000022 DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsStructs.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000c38 l     O .data	0000012c lookupTable
20000d64 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
000045a6 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatFormatter.cpp
00004ef4 l     F .text.itcm	00000028 initFatDirCallback(unsigned long, void*)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000066a2 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.14]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000707c l     F .text.itcm	00000006 SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]
00007082 l     F .text.itcm	00000006 SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007864 l     F .text.itcm	0000002c sdIrs()
00007890 l     F .text.itcm	00000020 gpioMux(unsigned char)
000078b0 l     F .text.itcm	00000018 isBusyCommandComplete()
000078c8 l     F .text.itcm	00000010 isBusyCommandInhibit()
000078d8 l     F .text.itcm	00000014 isBusyDat()
000078ec l     F .text.itcm	0000000c isBusyDMA()
000078f8 l     F .text.itcm	00000014 isBusyFifoRead()
0000790c l     F .text.itcm	00000014 isBusyFifoWrite()
00007920 l     F .text.itcm	00000018 isBusyTransferComplete()
00007938 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00007a40 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00007a64 l     F .text.itcm	00000040 yieldTimeout(bool (*)())
00007ab4 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00007b04 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00007b6c l     F .text.itcm	00000020 statusCMD13()
00007b8c l     F .text.itcm	00000010 isBusyCMD13()
00007ba0 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00007bf8 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.5]
00007c18 l     F .text.itcm	000000a4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007e38 l     F .text.itcm	0000005c waitTransferComplete()
0000818c l     F .text.itcm	00000098 cardCMD6(unsigned long, unsigned char*)
2003736b l     O .bss	00000001 m_version2
2003736e l     O .bss	00000010 m_cid
20003d4c l     O .bss	00000004 m_busyFcn
2003736c l     O .bss	00000001 m_highCapacity
20003d44 l     O .bss	00000004 m_ocr
20003d48 l     O .bss	00000004 m_rca
2003736d l     O .bss	00000001 m_transferActive
20003d50 l     O .bss	00000004 m_irqstat
20001dfe l     O .data	00000001 m_errorCode
2003736a l     O .bss	00000001 m_initDone
2003737e l     O .bss	00000010 m_csd
2003738e l     O .bss	00000001 m_dmaBusy
20002930 l     O .bss	00000004 m_sdClkKhz
20002934 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000088d8 l     F .text.itcm	0000006c rx_queue_transfer
00008944 l     F .text.itcm	000000ac rx_event
000089f0 l     F .text.itcm	00000090 usb_serial_flush_callback
20037334 l     O .bss	00000010 rx_index
20037368 l     O .bss	00000002 tx_packet_size
20037652 l     O .bss	00000001 tx_noautoflush
20037651 l     O .bss	00000001 tx_head
200022c0 l     O .bss	00000100 rx_transfer
2003764e l     O .bss	00000001 rx_tail
20037645 l     O .bss	00000009 rx_list
20037344 l     O .bss	00000002 rx_packet_size
20200800 l     O .bss.dma	00001000 rx_buffer
20201800 l     O .bss.dma	00002000 txbuffer
20037324 l     O .bss	00000010 rx_count
20036e30 l     O .bss	00000004 rx_available
20037644 l     O .bss	00000001 rx_head
20037650 l     O .bss	00000001 transmit_previous_timeout
20037366 l     O .bss	00000002 tx_available
200023c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20037391 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _lshrdi3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000a6ac l     F .text.itcm	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000b4bc l     F .text.itcm	00000034 sulp
20000b0c l     O .data	00000014 fpi.6173
20000b20 l     O .data	00000014 fpinan.6209
20000370 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000c380 l     F .text.itcm	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
20000c28 l     O .data	00000010 zeroes.7258
2000087c l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
20000858 l     O .data	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000ea1c l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000fa38 l     F .text.itcm	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
20000b34 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
00010b9c l     F .text.itcm	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00010d6c l     F .text.itcm	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00010ef8 l     F .text.itcm	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20001280 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60016400 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001b78 l     F .text.code	00000008 ___ZN5Print6printfEPKcz_veneer
60001b80 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001b88 l     F .text.code	00000008 ____libc_init_array_veneer
60001b90 l     F .text.code	00000008 __set_arm_clock_veneer
60001b98 l     F .text.code	00000008 __main_veneer
60001ba0 l     F .text.code	00000008 __delay_veneer
60001ba8 l     F .text.code	00000008 __memset_veneer
60001bb0 l     F .text.code	00000008 __pwm_init_veneer
60001bb8 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
00011488 l     F .text.itcm	00000008 ___init_veneer
00011490 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00011498 l     F .text.itcm	00000008 ___Z14set_audioClockilmb_veneer
000114a0 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00005584  w    F .text.itcm	00000026 FatPartition::cacheSync()
0000070a  w    F .text.itcm	00000066 SDFile::getModifyTime(DateTimeFields&)
00003194 g     F .text.itcm	000000a4 toUpcase(unsigned short)
0000173c g     F .text.itcm	00000034 pushData(unsigned long*)
00008c8c g     F .text.itcm	0000000c usb_serial_available
00000fa0 g     F .text.itcm	000001c0 menu()
00010abc g     F .text.itcm	0000005e __any_on
00001f44  w    F .text.itcm	0000004a i2c_class::write16(unsigned char, unsigned short, unsigned short)
000062f0 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600018c4 g     F .text.code	00000002 startup_default_late_hook
00008114 g     F .text.itcm	00000078 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009e60  w    F .text.itcm	000000d8 yield
20003dd4 g     O .bss	00000004 acq_miss
2003731c g     O .bss	00000004 usb_timer1_callback
00006130 g     F .text.itcm	000001c0 FatFile::write(void const*, unsigned int)
00006fec  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
0000a216 g     F .text.itcm	000000a6 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
60001cde g     O .text.progmem	00000018 usb_string_manufacturer_name_default
000060c8 g     F .text.itcm	00000068 FatFile::truncate()
00003398 g     F .text.itcm	00000458 ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)
20003dd8 g     O .bss	00000004 clusterSize
00001160 g     F .text.itcm	00000024 newHour()
0000151c  w    F .text.itcm	00000068 MySpiClass::deactivate()
20003d54 g     O .bss	00000004 FsDateTime::callback
00002920  w    F .text.itcm	00000080 SPIClass::dma_rxisr()
00002c22  w    F .text.itcm	00000050 SdBase<FsVolume>::restart()
00004fc4 g     F .text.itcm	0000005c FatFormatter::initPbs()
0000a154 g     F .text.itcm	00000020 Print::println()
00003c2a g     F .text.itcm	000000ce ExFatFile::seekSet(unsigned long long)
00006fd0  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
00000656  w    F .text.itcm	0000000c File::flush()
000006a4  w    F .text.itcm	00000066 SDFile::getCreateTime(DateTimeFields&)
0000ae90 g     F .text.itcm	00000002 __malloc_unlock
00007088 g     F .text.itcm	00000026 SdSpiCard::spiStart()
00000c14  w    F .text.itcm	00000088 SDFile::openNextFile(unsigned char)
20003d88 g     O .bss	00000004 FsVolume::m_cwv
00005ba4 g     F .text.itcm	000000a8 FatFile::open(FatFile*, char const*, int)
2000292c g     O .bss	00000004 SerNum
60001b1c g     F .text.code	0000004c analog_init
000014e4  w    F .text.itcm	00000014 MySpiClass::begin(SdSpiConfig)
0000c360 g     F .text.itcm	00000020 _strtod_r
0000142c  w    F .text.itcm	00000008 MySpiClass::setSckSpeed(unsigned long)
0000e8cc g     F .text.itcm	0000004a _vdprintf_r
00005c8e g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00001a64 g     F .text.itcm	00000418 saveData(short)
200016b0 g     O .data	00000004 F_CPU_ACTUAL
0000a314 g     F .text.itcm	00000018 .hidden __aeabi_llsr
200004ac  w    O .data	0000005c vtable for SDFile
000112c8 g     F .text.itcm	00000082 _sfread_r
0000adc4 g     F .text.itcm	000000c6 memmove
0000a6e8 g     F .text.itcm	00000014 __locale_ctype_ptr
000086e4 g     F .text.itcm	00000060 SdioCard::stopTransmission(bool)
00010238 g     F .text.itcm	0000004c _Balloc
000114bc g       .ARM.exidx	00000000 __exidx_end
00002be8  w    F .text.itcm	0000003a SdBase<FsVolume>::cardBegin(SdSpiConfig)
000064ae g     F .text.itcm	00000046 FatPartition::freeChain(unsigned long)
2003738f g     O .bss	00000001 EventResponder::runningFromYield
00007284 g     F .text.itcm	0000007e SdSpiCard::cardCommand(unsigned char, unsigned long)
00009c34 g     F .text.itcm	00000060 tempmonGetTemp
0000170c  w    F .text.itcm	00000018 MySpiClass::activate()
0000a12a g     F .text.itcm	00000028 Print::write(unsigned char const*, unsigned int)
0000a650 g     F .text.itcm	0000000c __errno
000008f8  w    F .text.itcm	0000000a SDFile::isDirectory()
00004b10 g     F .text.itcm	00000114 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
0000062e  w    F .text.itcm	0000000c File::write(unsigned char const*, unsigned int)
00000da4 g     F .text.itcm	0000001c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
00007302  w    F .text.itcm	0000001e SdSpiCard::cardAcmd(unsigned char, unsigned long)
00000810  w    F .text.itcm	0000001c File::~File()
20003d64 g     O .bss	00000004 EventResponder::firstInterrupt
00009998 g     F .text.itcm	00000004 usb_transfer_status
000101bc g     F .text.itcm	00000004 __localeconv_l
00006fee  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
000032ea g     F .text.itcm	0000001c ExFatFormatter::writeUpcaseUnicode(unsigned short)
00006d82 g     F .text.itcm	00000062 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004538 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00000b36  w    F .text.itcm	00000036 SDFile::setCreateTime(DateTimeFields const&)
00006fd4  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000a094  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
2000088c g     O .data	00000280 digital_pin_to_info_PGM
200376b0 g     O .bss	00000004 errno
000074d0 g     F .text.itcm	00000038 SdSpiCard::readOCR(unsigned long*)
000042c0 g     F .text.itcm	0000003e ExFatPartition::fatGet(unsigned long, unsigned long*)
60001c20 g     O .text.progmem	0000004c TwoWire::i2c3_hardware
0000b33c g     F .text.itcm	00000004 __seofread
000114b8 g       .text.itcm	00000000 _etext
000029a0 g     F .text.itcm	00000010 _spi_dma_rxISR0()
000019e4 g     F .text.itcm	0000005c listDisks()
200022c0 g       .bss	00000000 _sbss
00005020 g     F .text.itcm	0000005c FatFormatter::writeMbr()
000017b4 g     F .text.itcm	00000020 sdCsInit(unsigned char)
00002cd8 g     F .text.itcm	0000006c SDClass::mediaPresent()
000079e8 g     F .text.itcm	0000000c SdioCard::errorData() const
000009a6  w    F .text.itcm	00000018 FsBaseFile::peek()
00008074 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001d9c g       *ABS*	00000000 _stextload
000004d8 g     F .text.itcm	00000150 loop
00009cfc g     F .text.itcm	00000072 flexpwm_init
00009868 g     F .text.itcm	00000058 usb_config_rx
00003a00 g     F .text.itcm	0000007c ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00008518 g     F .text.itcm	000000b8 SdioCard::readData(unsigned char*)
00007108 g     F .text.itcm	0000006c SdSpiCard::readData(unsigned char*, unsigned int)
00002418 g     F .text.itcm	000000dc TwoWire::endTransmission(unsigned char)
20003d60 g     O .bss	00000004 EventResponder::lastInterrupt
00006de4 g     F .text.itcm	00000028 FsBaseFile::close()
000087a4 g     F .text.itcm	00000134 memcpy
00010020 g     F .text.itcm	00000180 __hexnan
0000063a  w    F .text.itcm	0000000c File::available()
000015a8  w    F .text.itcm	00000014 Print::println(unsigned long)
00002da8 g     F .text.itcm	00000094 FsUtf::cpToMb(unsigned long, char*, char*)
00000d14 g     F .text.itcm	00000090 storeConfig(unsigned short*, int)
000043a6 g     F .text.itcm	0000005e ExFatPartition::freeChain(unsigned long)
0000585e g     F .text.itcm	00000026 FatFile::peek()
0000c4e0 g     F .text.itcm	00001570 _svfprintf_r
20037632  w    O .bss	00000001 SDFile::name()::zeroterm
20037314 g     O .bss	00000004 systick_millis_count
00004a68 g     F .text.itcm	000000a8 ExFatFile::rename(ExFatFile*, char const*)
000007b0  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
000023dc g     F .text.itcm	0000003c TwoWire::wait_idle()
0000a32c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20037654 g     O .bss	00000001 usb_configuration
0000140e  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
00008744 g     F .text.itcm	0000001c SdioCard::syncDevice()
00007f08 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000008c4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::available()
20037346 g     O .bss	00000020 store
00005884 g     F .text.itcm	0000003a FatFile::readDirCache(bool)
00010a18 g     F .text.itcm	0000005c __ratio
60001cde  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000a6fc g     F .text.itcm	00000010 malloc
60001c6c g     O .text.progmem	0000004c TwoWire::i2c1_hardware
00002c72 g     F .text.itcm	00000064 SDClass::format(int, char, Print&)
20000488  w    O .data	00000024 vtable for FsFile
000101a0 g     F .text.itcm	0000001c iswspace
00002240  w    F .text.itcm	0000001e TwoWire::read()
200002a8 g     O .data	000000c8 __mprec_tens
60001788 g     F .text.code	000000e4 usb_init
00006fe8  w    F .text.itcm	00000004 SdSpiCard::type() const
00000a3c  w    F .text.itcm	00000058 SDFile::seek(unsigned long long, int)
20003dcc g     O .bss	00000004 __malloc_top_pad
00009be0 g     F .text.itcm	00000050 rtc_set
0001128c g     F .text.itcm	0000003a __ssrefill_r
200376ac g     O .bss	00000004 systick_safe_read
00007174 g     F .text.itcm	0000006a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000022d4 g     F .text.itcm	00000108 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00004c24 g     F .text.itcm	000000be ExFatFile::truncate()
200016a8 g     O .data	00000000 .hidden __dso_handle
000101c0 g     F .text.itcm	0000001c _localeconv_r
20001ddc g     O .data	00000004 sd_str
000110e4 g     F .text.itcm	00000024 _strtoull_r
0001044c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
00005180 g     F .text.itcm	000001a8 FatFormatter::makeFat32()
60001d45 g     O .text.progmem	0000004b usb_config_descriptor_480
0000a35c g     F .text.itcm	000002e2 .hidden __udivmoddi4
000055aa g     F .text.itcm	00000036 FatFile::addCluster()
0000b274 g     F .text.itcm	00000024 _sbrk_r
00007508 g     F .text.itcm	00000036 SdSpiCard::readRegister(unsigned char, void*)
00007ae4 g     F .text.itcm	00000020 SdioCard::type() const
600018c0 g     F .text.code	00000002 startup_default_early_hook
60001426 g     F .text.code	0000021e ResetHandler
00008cf8 g     F .text.itcm	0000001e usb_serial_getchar
000015dc  w    F .text.itcm	00000018 FsVolume::clusterCount() const
00000770  w    F .text.itcm	00000040 SDFile::name()
200376a0 g     O .bss	00000008 usb_cdc_line_coding
20003d68 g     O .bss	00000004 EventResponder::lastYield
000039da g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
000003e4  w    F .text.itcm	0000001c Print::write(char const*)
000009ea  w    F .text.itcm	00000020 StreamFile<FsBaseFile, unsigned long long>::read()
00003280 g     F .text.itcm	00000028 ExFatFormatter::syncUpcase()
00000b00  w    F .text.itcm	00000036 SDFile::setModifyTime(DateTimeFields const&)
20003dc4 g     O .bss	00000004 __malloc_max_sbrked_mem
00000840  w    F .text.itcm	00000018 SDFile::position()
00009c94 g     F .text.itcm	00000068 pinMode
000021e8 g     F .text.itcm	00000010 getTeensySerial()
0000775e g     F .text.itcm	00000028 SdSpiCard::writeStop()
0000da50 g     F .text.itcm	00000e7a __ssvfscanf_r
000009d2  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
0000041c g     F .text.itcm	00000030 checkToCloseFile(short, unsigned long)
60015800 g     O .text.csf	00000c00 hab_csf
000077d2 g     F .text.itcm	0000002c SdSpiCard::writeData(unsigned char const*)
00000646  w    F .text.itcm	00000010 File::peek()
000064f4 g     F .text.itcm	0000005c FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00000c9c  w    F .text.itcm	00000078 SDClass::open(char const*, unsigned char)
0001088c g     F .text.itcm	000000d0 __b2d
00001f8e g     F .text.itcm	00000002 adc_init()
000114b4 g       .ARM.exidx	00000000 __exidx_start
0000007c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000769e g     F .text.itcm	00000032 SdSpiCard::writeStart(unsigned long)
20003d5c g     O .bss	00000004 EventResponder::firstYield
20000854 g     O .data	00000004 _global_impure_ptr
00000400  w    F .text.itcm	00000008 Print::print(unsigned long)
00002e3c g     F .text.itcm	00000084 FsUtf::mbToCp(char const*, char const*, unsigned long*)
00000b8a  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00000bc8  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
0000ae94 g     F .text.itcm	000003de _realloc_r
00000a0a  w    F .text.itcm	0000000a SDFile::read(void*, unsigned int)
0000a65c g     F .text.itcm	00000050 __libc_init_array
00000902  w    F .text.itcm	00000028 SDFile::rewindDirectory()
00002234  w    F .text.itcm	0000000c TwoWire::available()
00004104 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000079f4 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
20000650 g     O .data	00000100 __hexdig
00004882 g     F .text.itcm	000000de ExFatFile::addDirCluster()
000075e6 g     F .text.itcm	00000076 SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00007786 g     F .text.itcm	0000004c SdSpiCard::writeData(unsigned char, unsigned char const*)
20000280 g     O .data	00000028 __mprec_bigtens
00010318 g     F .text.itcm	00000098 __s2b
000024f4 g     F .text.itcm	0000011c TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000a07c  w    F .text.itcm	00000004 usb_serial_class::clear()
00009b84 g     F .text.itcm	00000030 _sbrk
60013258 g       *ABS*	00000000 _sdataload
00001414  w    F .text.itcm	00000018 MySpiClass::send(unsigned char)
000106e0 g     F .text.itcm	00000042 __mcmp
2000052c g     O .data	00000030 vtable for SDClass
20001858 g     O .data	00000004 __brkval
20037653 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001b68 g     F .text.code	00000000 _init
00008a80 g     F .text.itcm	00000002 usb_serial_reset
0000566c g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00002a4a  w    F .text.itcm	00000056 SDClass::remove(char const*)
0000093c  w    F .text.itcm	00000026 SDFile::close()
00000964  w    F .text.itcm	00000024 SDFile::~SDFile()
60001cfa g     O .text.progmem	0000004b usb_config_descriptor_12
2000055c g     O .data	00000024 vtable for TwoWire
0000b4f0 g     F .text.itcm	00000e70 _strtod_l
0000fff0 g     F .text.itcm	00000030 __match
200376e0 g       .bss	00000000 _ebss
00007ffc g     F .text.itcm	00000078 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20036e04 g     O .bss	00000004 hour_
00000aa8  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::flush()
00001f3c  w    F .text.itcm	00000008 TwoWire::write(int)
000013da  w    F .text.itcm	00000034 BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000103b0 g     F .text.itcm	00000040 __hi0bits
0000394e g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
00004960 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203860 g       .bss.dma	00000000 _heap_start
00000bc8  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
000029b0  w    F .text.itcm	00000002 SDClass::~SDClass()
00004550 g     F .text.itcm	00000056 ExFatVolume::chdir(char const*)
60001bd4 g     O .text.progmem	0000004c TwoWire::i2c4_hardware
0000007c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20035ddc g     O .bss	00001000 diskBuffer
20036e48 g     O .bss	000004c8 sdx
00006958 g     F .text.itcm	00000090 FatFile::makeUniqueSfn(FatName_t*)
00000810  w    F .text.itcm	0000001c File::~File()
000017f0 g     F .text.itcm	000001f4 storage_configure()
00005328 g     F .text.itcm	000000a0 FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)
00000003 g       *ABS*	00000000 _itcm_block_count
20037660 g     O .bss	00000020 endpoint0_transfer_data
000053e2 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
0000a2c2 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
00009da4 g     F .text.itcm	0000006c pwm_init
60001644 g     F .text.code	0000009c set_audioClock(int, long, unsigned long, bool)
0000a314 g     F .text.itcm	00000018 .hidden __lshrdi3
20036df0 g     O .bss	00000014 file
600019a4 g     F .text.code	0000005c usb_pll_start
00010590 g     F .text.itcm	000000a0 __pow5mult
00005ac6 g     F .text.itcm	0000004e FatFile::rmdir()
0000642e g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009f46  w    F .text.itcm	00000006 MillisTimer::enableTimerInterrupt(bool)
000029b2  w    F .text.itcm	00000044 SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20037680 g     O .bss	00000020 endpoint0_transfer_ack
200376a8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009950 g     F .text.itcm	0000002c usb_transmit
00000408  w    F .text.itcm	00000014 Print::println(char const*)
00009f8c g     F .text.itcm	00000020 systick_isr
00000324 g     F .text.itcm	00000020 extract(void*, void*)
00000f54 g     F .text.itcm	0000004c menuGet3Int(int*, int*, int*)
20036e18 g     O .bss	00000010 mySpi
00007580 g     F .text.itcm	00000066 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20001704 g     O .data	00000010 Serial
0000a09c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00006e8a g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
600018c0  w    F .text.code	00000002 startup_early_hook
000077fe g     F .text.itcm	0000004a SdSpiCard::writeSingle(unsigned long, unsigned char const*)
000045fa g     F .text.itcm	00000092 ExFatFile::addCluster()
2000045c  w    O .data	0000002c vtable for File
00002b7c  w    F .text.itcm	00000036 SDClass::usedSize()
00008c48 g     F .text.itcm	00000044 usb_serial_peekchar
00000dc0 g     F .text.itcm	000000d4 printMenu()
0000acc0 g     F .text.itcm	00000000 memchr
000063d2 g     F .text.itcm	0000005c FatPartition::fatPut(unsigned long, unsigned long)
00008f94 g     F .text.itcm	00000254 set_arm_clock
20037310 g     O .bss	00000004 systick_cycle_count
20001de8 g     O .data	00000016 usb_string_serial_number_default
0000f868 g     F .text.itcm	000001d0 _free_r
00007e94 g     F .text.itcm	00000074 SdioCard::readStop()
00003146 g     F .text.itcm	0000004e FsCache::get(unsigned long, unsigned char)
0000a6c4 g     F .text.itcm	0000001c __locale_mb_cur_max
00006832 g     F .text.itcm	00000126 FatFile::makeSFN(FatName_t*)
0000a08c  w    F .text.itcm	00000004 usb_serial_class::flush()
00003306 g     F .text.itcm	00000090 ExFatFormatter::writeUpcase(unsigned long)
00011208 g     F .text.itcm	00000082 _sungetc_r
00006550 g     F .text.itcm	0000010c FatPartition::init(BlockDeviceInterface*, unsigned char)
20001dd0 g     O .data	00000004 __malloc_sbrk_base
0000a084  w    F .text.itcm	00000004 usb_serial_class::read()
00010d48 g     F .text.itcm	00000024 _strtoll_r
00006cd0 g     F .text.itcm	000000b2 FatFile::remove()
20036e14 g     O .bss	00000004 msd
00009bb4  w    F .text.itcm	00000004 __cxa_pure_virtual
00001f90 g     F .text.itcm	00000002 adcStatus()
00010630 g     F .text.itcm	000000ae __lshift
00005dd0 g     F .text.itcm	000000aa FatFile::mkdir(FatFile*, char const*, bool)
00000310 g     F .text.itcm	00000014 acq_stop()
00009924 g     F .text.itcm	0000002c usb_prepare_transfer
00009a24 g     F .text.itcm	00000160 unused_interrupt_vector
00011108 g     F .text.itcm	00000100 __ssprint_r
60001a00 g     F .text.code	0000011c tempmon_init
20037318 g     O .bss	00000004 usb_timer0_callback
000113c4 g     F .text.itcm	0000005e _vasnprintf_r
0000a2bc  w    F .text.itcm	00000002 serialEvent()
0000e978 g     F .text.itcm	000000a4 __register_exitproc
00004048 g     F .text.itcm	000000bc ExFatFile::open(ExFatFile*, char const*, int)
0000b41c g     F .text.itcm	000000a0 strncmp
00000abc  w    F .text.itcm	00000044 FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000049a8 g     F .text.itcm	000000c0 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000507c g     F .text.itcm	00000104 FatFormatter::makeFat16()
00008c98 g     F .text.itcm	00000060 usb_serial_flush_input
00004404 g     F .text.itcm	00000066 ExFatPartition::freeClusterCount()
00010460 g     F .text.itcm	00000130 __multiply
20003dd0 g     O .bss	00000004 acq_count
00008e94 g     F .text.itcm	00000016 usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20003d9c g     O .bss	00000028 __malloc_current_mallinfo
20000398 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
0001095c g     F .text.itcm	000000ba __d2b
20003d6c g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
6000186c g     F .text.code	00000054 _reboot_Teensyduino_
00007aa4  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600018c2 g     F .text.code	00000002 startup_default_middle_hook
00007f90 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00010ed4 g     F .text.itcm	00000024 _strtoul_r
00009440 g     F .text.itcm	00000428 usb_isr
0000a644 g     F .text.itcm	0000000c __cxa_atexit
00003a7c g     F .text.itcm	00000184 ExFatFile::read(void*, unsigned int)
20036e08 g     O .bss	00000004 i2c
000009c8  w    F .text.itcm	0000000a SDFile::peek()
000030fa g     F .text.itcm	0000004c FsCache::sync()
200016b4 g     O .data	00000050 SPI
0000ad60 g     F .text.itcm	00000062 memcmp
20000434  w    O .data	00000028 vtable for usb_serial_class
0000675c g     F .text.itcm	000000d6 FatFile::createLFN(unsigned short, FatName_t*, unsigned char)
000017d4 g     F .text.itcm	0000001c sdCsWrite(unsigned char, bool)
20036e44 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000b2e4 g     F .text.itcm	00000058 sscanf
0000a640  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00004712 g     F .text.itcm	00000052 ExFatFile::rmdir()
00000f18 g     F .text.itcm	0000003c menuGetInt(int*)
000015bc  w    F .text.itcm	00000020 FsVolume::bytesPerCluster() const
00010a74 g     F .text.itcm	00000046 __copybits
00006ffc g     F .text.itcm	00000080 SdSpiCard::sectorCount()
200019c8 g     O .data	00000408 __malloc_av_
20036e10 g     O .bss	00000004 max_write
00000ab2  w    F .text.itcm	0000000a SDFile::flush()
00008ef8 g     F .text.itcm	0000009c usb_serial_flush_output
0000ae8c g     F .text.itcm	00000002 __malloc_lock
0000383c g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002000 g     O .data	000002c0 _VectorsRam
00004f1c g     F .text.itcm	000000a8 FatFormatter::initFatDir(unsigned char, unsigned long)
00011424 g     F .text.itcm	0000005e _calloc_r
000026ac g     F .text.itcm	00000218 SPIClass::begin()
20001de4 g     O .data	00000004 t_acq
20001e11 g     O .data	00000001 yield_active_check_flags
00004844 g     F .text.itcm	0000003e ExFatFile::sync()
20037655 g     O .bss	00000001 usb_high_speed
00005e7a g     F .text.itcm	000001a0 FatFile::rename(FatFile*, char const*)
00007d20 g     F .text.itcm	00000040 SdioCard::isBusy()
0000765c g     F .text.itcm	00000026 SdSpiCard::readStop()
00008760 g     F .text.itcm	00000000 memset
00001724 g     F .text.itcm	00000018 getCount()
0000a0a2 g     F .text.itcm	00000010 main
20036e0c g     O .bss	00000004 max_count
20036e28 g     O .bss	00000008 rawData
20003dc8 g     O .bss	00000004 __malloc_max_total_mem
00004140 g     F .text.itcm	000000a6 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203800 g     O .bss.dma	0000004b usb_descriptor_buffer
00001a40 g     F .text.itcm	00000024 checkReboot()
00004ce4 g     F .text.itcm	00000210 ExFatFile::write(void const*, unsigned int)
0000306c g     F .text.itcm	0000008e lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005c5a g     F .text.itcm	00000034 FatFile::dirEntry(DirFat_t*)
000008ce  w    F .text.itcm	0000000a SDFile::available()
00000bac  w    F .text.itcm	0000001c File::close()
00009e10 g     F .text.itcm	00000050 usb_init_serialnumber
0000136c g     F .text.itcm	00000036 setRTCTime(int, int, int, int, int, int)
0000c4b8 g     F .text.itcm	00000024 _strtol_r
60001bd4 g       .text.code	00000000 __init_array_end
0000eb48 g     F .text.itcm	00000c84 _dtoa_r
0000a71c g     F .text.itcm	00000570 _malloc_r
20037390 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000e930 g     F .text.itcm	0000001a __ascii_wctomb
0000099c  w    F .text.itcm	0000000a SDFile::isOpen()
00006d82 g     F .text.itcm	00000062 FsBaseFile::FsBaseFile(FsBaseFile const&)
20003d8c g     O .bss	00000004 FatVolume::m_cwv
000015a0  w    F .text.itcm	00000008 Print::print(char const*)
0001134c g     F .text.itcm	00000078 __submore
20000640  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000a0e4 g     F .text.itcm	00000046 Stream::readBytesUntil(char, char*, unsigned int)
000028c4 g     F .text.itcm	0000005a SPIClass::transfer(void const*, void*, unsigned int)
61ffc158 g       *ABS*	00000000 __rtc_localtime
0000999c g     F .text.itcm	0000005c micros
00004764 g     F .text.itcm	000000e0 ExFatFile::syncDir()
00002610 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0000f7cc g     F .text.itcm	0000009c _malloc_trim_r
60001cf6 g     O .text.progmem	00000004 string0
00008d18 g     F .text.itcm	0000017c usb_serial_write
600018c4  w    F .text.code	00000002 startup_late_hook
000093e0 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000870  w    F .text.itcm	00000054 FsBaseFile::available() const
0000a088  w    F .text.itcm	00000004 usb_serial_class::available()
60001d9a g     O .text.progmem	00000001 _serialEvent_default
00000088 g     F .text.itcm	00000164 mckl_init(int)
00005b14 g     F .text.itcm	00000080 FatFile::sync()
000001ec g     F .text.itcm	00000110 acq_init(int)
000066c0 g     F .text.itcm	0000009c FatFile::cmpName(unsigned short, FatName_t*, unsigned char)
00002aa0  w    F .text.itcm	0000004e SDClass::mkdir(char const*)
20000000 g     O .data	00000280 endpoint_queue_head
000045d4  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60001cc8  w    O .text.progmem	00000016 usb_string_product_name
000099f8 g     F .text.itcm	0000002a delay
20037322 g     O .bss	00000002 dma_channel_allocated_mask
000039ba g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000a14  w    F .text.itcm	00000028 FsBaseFile::seekSet(unsigned long long)
000114b0 g     F .fini	00000000 _fini
00000a94  w    F .text.itcm	00000014 FsBaseFile::sync()
00002276 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
60001020 g     O .text.headers	0000000c BootData
0000754e g     F .text.itcm	00000032 SdSpiCard::readStart(unsigned long)
00004112 g     F .text.itcm	0000002e ExFatFile::openNext(ExFatFile*, int)
000071de g     F .text.itcm	00000076 SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
0000b298 g     F .text.itcm	0000004c sprintf
0000a174 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000a204 g     F .text.itcm	00000012 Print::print(long)
00005b94 g     F .text.itcm	00000010 FatFile::close()
00009c30 g     F .text.itcm	00000004 Panic_Temp_isr
00000988  w    F .text.itcm	00000014 SDFile::~SDFile()
00007a3c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000009be  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::peek()
00000688  w    F .text.itcm	0000001c File::write(unsigned char)
0000e94c g     F .text.itcm	0000002c _write_r
20002464 g     O .bss	000004c8 SD
00001184 g     F .text.itcm	00000128 breakTime(unsigned long, tmElements_t&)
00007d60 g     F .text.itcm	000000d8 SdioCard::erase(unsigned long, unsigned long)
00006348  w    F .text.itcm	00000020 FsCache::clear()
00010b90 g     F .text.itcm	0000000c nanf
20001dd8 g     O .data	00000004 _impure_ptr
20000508  w    O .data	00000024 vtable for Stream
00003c00 g     F .text.itcm	0000002a ExFatFile::peek()
20000410  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000101dc g     F .text.itcm	0000005c _mbrtowc_r
20001714 g     O .data	00000140 Wire
00000ba2  w    F .text.itcm	0000000a SDFile::write(void const*, unsigned int)
00006fa4 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
000079dc g     F .text.itcm	0000000c SdioCard::errorCode() const
00005c4c g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000b80  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
20036ddc g     O .bss	00000004 diskSize
60001bc0 g       .text.code	00000000 __preinit_array_end
00001436 g     F .text.itcm	00000076 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006fec  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
0000446c g     F .text.itcm	000000cc ExFatPartition::init(BlockDeviceInterface*, unsigned char)
0000428a g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000076d0 g     F .text.itcm	0000008e SdSpiCard::erase(unsigned long, unsigned long)
0000ac8c g     F .text.itcm	0000002a __ascii_mbtowc
000070d4 g     F .text.itcm	00000032 SdSpiCard::isBusy()
00010838 g     F .text.itcm	00000054 __ulp
200005e0 g     O .data	00000060 vtable for SdSpiCard
00009414 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00007546  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
0000225e  w    F .text.itcm	00000016 TwoWire::peek()
00002274  w    F .text.itcm	00000002 TwoWire::flush()
0000044c g     F .text.itcm	0000008c setup
20000bbc g     O .data	0000006c usb_descriptor_list
00007b9c g     F .text.itcm	00000004 SdioCard::status()
000014ac  w    F .text.itcm	00000014 MySpiClass::send(unsigned char const*, unsigned int)
00005cae g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000062c  w    F .text.itcm	00000002 Print::flush()
0000092a  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
000008d8  w    F .text.itcm	00000020 FsBaseFile::isDir() const
000029f6  w    F .text.itcm	00000054 SDClass::rmdir(char const*)
200003e8  w    O .data	00000028 vtable for MySpiClass
000056e8 g     F .text.itcm	00000176 FatFile::read(void*, unsigned int)
0000568a g     F .text.itcm	00000030 FatFile::openRoot(FatVolume*)
20003d58 g     O .bss	00000004 ExFatVolume::m_cwv
000015f4  w    F .text.itcm	00000018 FsVolume::freeClusterCount() const
20068000 g       .text.csf	00000000 _estack
00006fcc g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000753e  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
0000a048 g     F .text.itcm	00000034 DMAChannel::release()
00000662  w    F .text.itcm	00000026 File::read()
00008eac g     F .text.itcm	0000004c usb_serial_write_buffer_free
00007254 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
000070ae g     F .text.itcm	00000026 SdSpiCard::spiStop()
000069e8 g     F .text.itcm	00000250 FatFile::open(FatFile*, FatName_t*, int)
000012ac g     F .text.itcm	000000c0 makeTime(tmElements_t const&)
00008a84 g     F .text.itcm	000000ec usb_serial_configure
0000229c g     F .text.itcm	00000038 TwoWire::write(unsigned char const*, unsigned int)
0000082c  w    F .text.itcm	00000014 File::~File()
000021f8 g     F .text.itcm	0000003c _write
200022c0 g       .data	00000000 _edata
0000436c g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
00007a3c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00003238 g     F .text.itcm	00000048 FsName::get16()
00007682 g     F .text.itcm	0000001c SdSpiCard::syncDevice()
000038ec g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
000055e0 g     F .text.itcm	0000008c FatFile::addDirCluster()
00005cce g     F .text.itcm	00000102 FatFile::mkdir(FatFile*, FatName_t*)
0000a090  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00001584  w    F .text.itcm	0000001c MySpiClass::receive()
0000631e g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
0000a2c6 g     F .text.itcm	00000040 ultoa
000029b0  w    F .text.itcm	00000002 SDClass::~SDClass()
00007320 g     F .text.itcm	000001b0 SdSpiCard::begin(SdSpiConfig)
600016e0 g     F .text.code	000000a8 TwoWire::begin()
00006e0c g     F .text.itcm	0000007e FsBaseFile::open(FsVolume*, char const*, int)
00009f38  w    F .text.itcm	0000000e MillisTimer::disableTimerInterrupt()
0000a2be g     F .text.itcm	00000004 operator new(unsigned int)
00009f4c g     F .text.itcm	0000003c EventResponder::runFromInterrupt()
00000e94 g     F .text.itcm	00000084 printMenuEntries()
20001dd4 g     O .data	00000004 __malloc_trim_threshold
0000a080  w    F .text.itcm	00000004 usb_serial_class::peek()
0000160c  w    F .text.itcm	00000100 SPIClass::beginTransaction(SPISettings)
00010724 g     F .text.itcm	00000114 __mdiff
00007a2c g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00004328 g     F .text.itcm	00000044 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00005490 g     F .text.itcm	000000f0 FatFile::getName8(char*, unsigned int)
00003cf8 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00007e94 g     F .text.itcm	00000074 SdioCard::writeStop()
00007848  w    F .text.itcm	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00010b1c g     F .text.itcm	00000072 __sccl
00003986 g     F .text.itcm	00000014 ExFatFile::close()
20000750 g     O .data	00000101 _ctype_
00006fd8  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00001f94 g     F .text.itcm	00000240 adc_enable(unsigned int, unsigned long)
60001bc0 g       .text.code	00000000 __init_array_start
0000a640  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
200016ac g     O .data	00000004 F_BUS_ACTUAL
00009d6e g     F .text.itcm	00000034 quadtimer_init
20036de4 g     O .bss	00000004 disk_count
000032a8 g     F .text.itcm	00000042 ExFatFormatter::writeUpcaseByte(unsigned char)
00002ec0 g     F .text.itcm	000001ac FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)
00002aee  w    F .text.itcm	00000068 SDClass::rename(char const*, char const*)
0000665c g     F .text.itcm	00000046 FatVolume::chdir(char const*)
000002fc g     F .text.itcm	00000014 acq_start()
0000a0b4 g     F .text.itcm	00000030 Stream::timedRead()
00000000 g       .text.itcm	00000000 _stext
00009fac g     F .text.itcm	0000009c DMAChannel::begin(bool)
0000b340 g     F .text.itcm	000000dc strlen
000056ba g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000a6e0 g     F .text.itcm	00000006 __locale_ctype_ptr_l
00002bb2  w    F .text.itcm	00000036 SdBase<FsVolume>::begin(SdioConfig)
000058be g     F .text.itcm	000000ac FatFile::seekSet(unsigned long)
00006c38 g     F .text.itcm	00000098 FatFile::parsePathName(char const*, FatName_t*, char const**)
0000fae0 g     F .text.itcm	00000510 __gethex
60001cc8 g     O .text.progmem	00000016 usb_string_product_name_default
0000e918 g     F .text.itcm	00000018 vdprintf
00007cbc g     F .text.itcm	00000064 SdioCard::sectorCount()
00006ee8 g     F .text.itcm	000000bc FsVolume::begin(BlockDeviceInterface*)
000014c0  w    F .text.itcm	00000024 MySpiClass::receive(unsigned char*, unsigned int)
00005a2e g     F .text.itcm	00000098 FatFile::openNext(FatFile*, int)
20036de0 g     O .bss	00000004 diskSpace
600018c2  w    F .text.code	00000002 startup_middle_hook
20000580 g     O .data	00000060 vtable for SdioCard
00005580 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600018c6 g     F .text.code	000000de configure_cache
000085d0 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000053c8  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00001770 g     F .text.itcm	00000044 pullData(unsigned long*, unsigned long)
60001bc0 g       .text.code	00000000 __preinit_array_start
0000997c g     F .text.itcm	0000001c usb_receive
000041e6 g     F .text.itcm	000000a4 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00000b6c  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
20003ddc g     O .bss	00032000 data_buffer
000103f0 g     F .text.itcm	0000005a __lo0bits
000042fe g     F .text.itcm	0000002a ExFatPartition::chainSize(unsigned long)
0000596a g     F .text.itcm	000000c4 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00016400 g       *ABS*	00000000 _flashimagelen
0000601a g     F .text.itcm	000000ae FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
20001de0 g     O .data	00000004 stdPrint
000013a2  w    F .text.itcm	00000038 BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
0000a308 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00009bb8 g     F .text.itcm	00000028 rtc_get
0000468c g     F .text.itcm	00000086 ExFatFile::remove()
00009f88 g     F .text.itcm	00000004 pendablesrvreq_isr
00002b56  w    F .text.itcm	00000026 SDClass::totalSize()
00000628  w    F .text.itcm	00000004 Print::availableForWrite()
2000185c g     O .data	0000016c __global_locale
00008224 g     F .text.itcm	000002f4 SdioCard::begin(SdioConfig)
0000399a g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
00008b70 g     F .text.itcm	000000d8 usb_serial_read
0000a18e g     F .text.itcm	00000076 Print::printNumber(unsigned long, unsigned char, unsigned char)
000098c0 g     F .text.itcm	00000064 usb_config_tx
00006368 g     F .text.itcm	0000006a FatPartition::fatGet(unsigned long, unsigned long*)
0000a70c g     F .text.itcm	00000010 free
000037f0 g     F .text.itcm	0000004c ExFatFile::cmpName(DirName_t const*, ExName_t*)
00010298 g     F .text.itcm	00000080 __multadd
00010284 g     F .text.itcm	00000012 _Bfree
00000858  w    F .text.itcm	00000018 SDFile::size()
0000540a g     F .text.itcm	00000086 FatFile::getSFN(char*, unsigned int)
00000964  w    F .text.itcm	00000024 SDFile::~SDFile()
20001de8  w    O .data	00000016 usb_string_serial_number
0000863c g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00007a10 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr

60001416 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001416:	cmp	r0, r1
60001418:	bcs.n	60001424 <memory_clear+0xe>
		*dest++ = 0;
6000141a:	movs	r3, #0
6000141c:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001420:	cmp	r1, r0
60001422:	bhi.n	6000141c <memory_clear+0x6>
60001424:	bx	lr

60001426 <ResetHandler>:
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001426:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142a:	ldr	r2, [pc, #396]	; (600015b8 <ResetHandler+0x192>)
6000142c:	ldr	r3, [pc, #396]	; (600015bc <ResetHandler+0x196>)
6000142e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r2, [pc, #396]	; (600015c0 <ResetHandler+0x19a>)
60001432:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001434:	mov.w	r2, #11141120	; 0xaa0000
60001438:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r3, [pc, #392]	; (600015c4 <ResetHandler+0x19e>)
6000143c:	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
6000143e:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001442:	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001446:	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144a:	ldr	r3, [pc, #380]	; (600015c8 <ResetHandler+0x1a2>)
6000144c:	movs	r2, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
6000144e:	ldr	r1, [pc, #380]	; (600015cc <ResetHandler+0x1a6>)
60001450:	ldr	r0, [pc, #380]	; (600015d0 <ResetHandler+0x1aa>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r2, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r2, [pc, #380]	; (600015d4 <ResetHandler+0x1ae>)
60001458:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145c:	ldr	r2, [pc, #376]	; (600015d8 <ResetHandler+0x1b2>)
6000145e:	ldr	r1, [pc, #380]	; (600015dc <ResetHandler+0x1b6>)
60001460:	ldr	r0, [pc, #380]	; (600015e0 <ResetHandler+0x1ba>)
60001462:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001466:	ldr	r1, [pc, #380]	; (600015e4 <ResetHandler+0x1be>)
60001468:	ldr	r0, [pc, #380]	; (600015e8 <ResetHandler+0x1c2>)
6000146a:	bl	60001416 <memory_clear>

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000146e:	mov.w	r2, #15728640	; 0xf00000
60001472:	ldr	r3, [pc, #376]	; (600015ec <ResetHandler+0x1c6>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001474:	ldr	r1, [pc, #376]	; (600015f0 <ResetHandler+0x1ca>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001476:	str	r2, [r3, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	movs	r3, #0
6000147a:	ldr	r2, [pc, #376]	; (600015f4 <ResetHandler+0x1ce>)
6000147c:	str.w	r1, [r2, r3, lsl #2]
60001480:	adds	r3, #1
60001482:	ldr	r5, [pc, #368]	; (600015f4 <ResetHandler+0x1ce>)
60001484:	cmp	r3, #176	; 0xb0
60001486:	bne.n	6000147c <ResetHandler+0x56>
60001488:	ldr	r3, [pc, #364]	; (600015f8 <ResetHandler+0x1d2>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	movs	r1, #128	; 0x80
6000148c:	ldr	r2, [pc, #364]	; (600015fc <ResetHandler+0x1d6>)
6000148e:	strb.w	r1, [r3], #1
60001492:	cmp	r3, r2
60001494:	bne.n	6000148e <ResetHandler+0x68>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	ldr	r4, [pc, #304]	; (600015c8 <ResetHandler+0x1a2>)
60001498:	mov.w	r7, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	ldr	r2, [pc, #352]	; (60001600 <ResetHandler+0x1da>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149e:	ldr	r3, [pc, #356]	; (60001604 <ResetHandler+0x1de>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a0:	ldr.w	r9, [pc, #408]	; 6000163c <ResetHandler+0x216>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a4:	ldr.w	r8, [pc, #408]	; 60001640 <ResetHandler+0x21a>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	str	r5, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014aa:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ae:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b2:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	str.w	r8, [r4, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ba:	ldr	r3, [r2, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	ldr	r6, [pc, #328]	; (60001608 <ResetHandler+0x1e2>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014be:	orr.w	r3, r3, #458752	; 0x70000
600014c2:	str	r3, [r2, #0]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c4:	mov.w	r2, #4294967295
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c8:	ldr	r3, [r6, #28]
600014ca:	bic.w	r3, r3, #127	; 0x7f
600014ce:	orr.w	r3, r3, #64	; 0x40
600014d2:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d4:	ldr	r3, [r6, #36]	; 0x24
600014d6:	bic.w	r3, r3, #127	; 0x7f
600014da:	orr.w	r3, r3, #64	; 0x40
600014de:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e0:	ldr	r3, [pc, #216]	; (600015bc <ResetHandler+0x196>)
600014e2:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e8:	str	r2, [r3, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ea:	bl	600018c6 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014ee:	ldr	r3, [pc, #284]	; (6000160c <ResetHandler+0x1e6>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f0:	movs	r2, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f2:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014f4:	ldr	r3, [pc, #280]	; (60001610 <ResetHandler+0x1ea>)
600014f6:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014f8:	movs	r5, #0
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fa:	ldr	r3, [pc, #280]	; (60001614 <ResetHandler+0x1ee>)
600014fc:	str	r2, [r3, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fe:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001500:	str	r5, [r3, #4]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001502:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001506:	ldr	r2, [pc, #272]	; (60001618 <ResetHandler+0x1f2>)
60001508:	str.w	r2, [r3, #3340]	; 0xd0c
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000150c:	ldr	r2, [pc, #268]	; (6000161c <ResetHandler+0x1f6>)
6000150e:	ldr	r3, [r2, #0]
60001510:	orr.w	r3, r3, #16777216	; 0x1000000
60001514:	str	r3, [r2, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001516:	ldr	r2, [pc, #264]	; (60001620 <ResetHandler+0x1fa>)
60001518:	ldr	r3, [r2, #0]
6000151a:	orr.w	r3, r3, #1
6000151e:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001520:	ldr	r3, [pc, #256]	; (60001624 <ResetHandler+0x1fe>)
60001522:	ldr	r2, [r3, #0]
60001524:	ldr	r3, [pc, #256]	; (60001628 <ResetHandler+0x202>)
60001526:	str	r2, [r3, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001528:	bl	600019a4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000152c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001530:	ldr	r0, [pc, #248]	; (6000162c <ResetHandler+0x206>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001532:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001536:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000153a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000153e:	bl	60001b90 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001542:	ldr	r3, [r6, #108]	; 0x6c
60001544:	orr.w	r3, r3, #12288	; 0x3000
60001548:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000154a:	ldr	r3, [pc, #228]	; (60001630 <ResetHandler+0x20a>)
6000154c:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
6000154e:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001552:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001556:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000155a:	str.w	r5, [r3, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000155e:	add.w	r3, r3, #327680	; 0x50000
60001562:	ldr	r2, [r3, #56]	; 0x38
60001564:	lsls	r2, r2, #31
60001566:	bmi.n	6000157a <ResetHandler+0x154>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001568:	ldr	r2, [pc, #200]	; (60001634 <ResetHandler+0x20e>)
6000156a:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156c:	movw	r2, #11797	; 0x2e15
60001570:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001572:	ldr	r2, [r3, #56]	; 0x38
60001574:	orr.w	r2, r2, #1
60001578:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000157a:	ldr	r2, [r3, #8]
6000157c:	orr.w	r2, r2, #65537	; 0x10001
60001580:	str	r2, [r3, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	analog_init();
60001582:	bl	60001b1c <analog_init>
	pwm_init();
60001586:	bl	60001bb0 <__pwm_init_veneer>
	tempmon_init();
6000158a:	bl	60001a00 <tempmon_init>
	startup_middle_hook();
6000158e:	bl	600018c2 <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001592:	ldr	r2, [pc, #164]	; (60001638 <ResetHandler+0x212>)
60001594:	ldr	r3, [r2, #0]
60001596:	ldr	r4, [pc, #160]	; (60001638 <ResetHandler+0x212>)
	while (millis() < 20) ; // wait at least 20ms before starting USB
60001598:	cmp	r3, #19
6000159a:	bls.n	60001594 <ResetHandler+0x16e>
	usb_init();
6000159c:	bl	60001788 <usb_init>
600015a0:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600015a2:	cmp.w	r3, #300	; 0x12c
600015a6:	bcc.n	600015a0 <ResetHandler+0x17a>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015a8:	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015ac:	bl	60001b88 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015b0:	bl	60001b98 <__main_veneer>
	
	while (1) asm("WFI");
600015b4:	wfi
600015b6:	b.n	600015b4 <ResetHandler+0x18e>
600015b8:	.word	0xaaaaaabf
600015bc:	.word	0x400ac000
600015c0:	.word	0x00200007
600015c4:	.word	0x20068000
600015c8:	.word	0x400d8000
600015cc:	.word	0x60001d9c
600015d0:	.word	0x00000000
600015d4:	.word	0x000114b8
600015d8:	.word	0x200022c0
600015dc:	.word	0x60013258
600015e0:	.word	0x20000000
600015e4:	.word	0x200376e0
600015e8:	.word	0x200022c0
600015ec:	.word	0xe000ed88
600015f0:	.word	0x00009a25
600015f4:	.word	0x20002000
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0xe000ed24
60001604:	.word	0xe000ed08
60001608:	.word	0x400fc000
6000160c:	.word	0x00009f89
60001610:	.word	0x00009f8d
60001614:	.word	0xe000e014
60001618:	.word	0x20200000
6000161c:	.word	0xe000edfc
60001620:	.word	0xe0001000
60001624:	.word	0xe0001004
60001628:	.word	0x20037310
6000162c:	.word	0x179a7b00
60001630:	.word	0x40084000
60001634:	.word	0x56c00000
60001638:	.word	0x20037314
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c

60001644 <set_audioClock(int, long, unsigned long, bool)>:
    /******************************* 4-chan TDM ***********************************************/
    #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB

    FLASHMEM
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force=false) // sets PLL4
    {
60001644:	push	{r4, r5}
60001646:	ldr	r4, [pc, #140]	; (600016d4 <set_audioClock(int, long, unsigned long, bool)+0x90>)
        if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001648:	cbnz	r3, 60001650 <set_audioClock(int, long, unsigned long, bool)+0xc>
6000164a:	ldr	r3, [r4, #112]	; 0x70
6000164c:	lsls	r3, r3, #18
6000164e:	bmi.n	600016ce <set_audioClock(int, long, unsigned long, bool)+0x8a>

        CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                    | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 0: 1/4; 1: 1/2; 2: 1/1
                    | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001650:	and.w	r3, r0, #63	; 0x3f
60001654:	orr.w	r3, r3, #1122304	; 0x112000
60001658:	str	r3, [r4, #112]	; 0x70

        CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000165a:	bic.w	r3, r1, #3758096384	; 0xe0000000
6000165e:	str.w	r3, [r4, #128]	; 0x80
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001662:	bic.w	r3, r2, #3758096384	; 0xe0000000
60001666:	str.w	r3, [r4, #144]	; 0x90
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
6000166a:	ldr	r3, [r4, #112]	; 0x70
6000166c:	bic.w	r3, r3, #4096	; 0x1000
60001670:	str	r3, [r4, #112]	; 0x70
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001672:	ldr	r3, [pc, #96]	; (600016d4 <set_audioClock(int, long, unsigned long, bool)+0x90>)
60001674:	ldr	r5, [r3, #112]	; 0x70
60001676:	ldr	r4, [pc, #92]	; (600016d4 <set_audioClock(int, long, unsigned long, bool)+0x90>)
60001678:	cmp	r5, #0
6000167a:	bge.n	60001674 <set_audioClock(int, long, unsigned long, bool)+0x30>
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
6000167c:	vmov	s15, r1
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001680:	ldr.w	r3, [r4, #368]	; 0x170
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001684:	ldr	r1, [pc, #80]	; (600016d8 <set_audioClock(int, long, unsigned long, bool)+0x94>)
60001686:	vcvt.f32.s32	s12, s15
6000168a:	vmov	s15, r2
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000168e:	bic.w	r3, r3, #8388608	; 0x800000
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
60001692:	vcvt.f32.u32	s13, s15
60001696:	vmov	s15, r0
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000169a:	bic.w	r3, r3, #32768	; 0x8000
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
6000169e:	ldr	r0, [pc, #60]	; (600016dc <set_audioClock(int, long, unsigned long, bool)+0x98>)
600016a0:	vcvt.f32.s32	s15, s15
600016a4:	vdiv.f32	s14, s12, s13
        CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
        while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
        
        const int div_post_pll = 1; // other values: 2,4
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600016a8:	str.w	r3, [r4, #368]	; 0x170
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
600016ac:	ldr	r3, [r4, #112]	; 0x70
600016ae:	bic.w	r3, r3, #65536	; 0x10000
600016b2:	str	r3, [r4, #112]	; 0x70
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }
600016b4:	pop	{r4, r5}
        CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
        if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
        if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
        
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
600016b6:	vadd.f32	s15, s14, s15
600016ba:	vmov.f32	s14, #56	; 0x41c00000  24.0
600016be:	vmul.f32	s15, s15, s14
600016c2:	vcvt.f64.f32	d7, s15
600016c6:	vmov	r2, r3, d7
600016ca:	b.w	60001b78 <___ZN5Print6printfEPKcz_veneer>
    }
600016ce:	pop	{r4, r5}
600016d0:	bx	lr
600016d2:	nop
600016d4:	.word	0x400d8000
600016d8:	.word	0x20000e46
600016dc:	.word	0x20001704

600016e0 <TwoWire::begin()>:
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600016e0:	ldr	r2, [pc, #152]	; (6000177c <TwoWire::begin()+0x9c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600016e2:	ldr	r1, [r0, #20]
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
600016e4:	push	{r3, r4, r5, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600016e6:	ldr	r3, [r2, #56]	; 0x38
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
600016e8:	mov	r4, r0
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600016ea:	bic.w	r3, r3, #16515072	; 0xfc0000
600016ee:	orr.w	r3, r3, #262144	; 0x40000
600016f2:	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600016f4:	ldr	r2, [r1, #0]
600016f6:	ldr	r3, [r1, #4]
600016f8:	ldr	r5, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);
600016fa:	ldr	r1, [pc, #132]	; (60001780 <TwoWire::begin()+0xa0>)

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600016fc:	orrs	r3, r5
600016fe:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
60001700:	movs	r2, #2
60001702:	ldr	r3, [r0, #16]
60001704:	str	r2, [r3, #16]
	setClock(100000);
60001706:	bl	60001bb8 <___ZN7TwoWire8setClockEm_veneer>

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
6000170a:	ldr	r3, [r4, #20]
6000170c:	ldrb	r2, [r4, #24]
6000170e:	movw	r0, #63585	; 0xf861
60001712:	ldr	r1, [pc, #112]	; (60001784 <TwoWire::begin()+0xa4>)
60001714:	add.w	r2, r3, r2, lsl #4
60001718:	ldrb	r2, [r2, #8]
6000171a:	add.w	r2, r1, r2, lsl #4
6000171e:	ldr	r2, [r2, #8]
60001720:	str	r0, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
60001722:	ldrb	r2, [r4, #24]
60001724:	add.w	r2, r3, r2, lsl #4
60001728:	ldrb	r0, [r2, #8]
6000172a:	ldr	r2, [r2, #12]
6000172c:	add.w	r0, r1, r0, lsl #4
60001730:	ldr	r0, [r0, #4]
60001732:	str	r2, [r0, #0]
60001734:	ldrb	r2, [r4, #24]
60001736:	add.w	r2, r3, r2, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
6000173a:	ldr	r0, [r2, #16]
6000173c:	cbz	r0, 60001742 <TwoWire::begin()+0x62>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
6000173e:	ldr	r2, [r2, #20]
60001740:	str	r2, [r0, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
60001742:	ldrb	r2, [r4, #25]
60001744:	movw	r0, #63585	; 0xf861
60001748:	add.w	r2, r3, r2, lsl #4
6000174c:	ldrb.w	r2, [r2, #40]	; 0x28
60001750:	add.w	r2, r1, r2, lsl #4
60001754:	ldr	r2, [r2, #8]
60001756:	str	r0, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
60001758:	ldrb	r2, [r4, #25]
6000175a:	add.w	r2, r3, r2, lsl #4
6000175e:	ldrb.w	r0, [r2, #40]	; 0x28
60001762:	ldr	r2, [r2, #44]	; 0x2c
60001764:	add.w	r1, r1, r0, lsl #4
60001768:	ldr	r1, [r1, #4]
6000176a:	str	r2, [r1, #0]
6000176c:	ldrb	r2, [r4, #25]
6000176e:	add.w	r3, r3, r2, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
60001772:	ldr	r2, [r3, #48]	; 0x30
60001774:	cbz	r2, 6000177a <TwoWire::begin()+0x9a>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
60001776:	ldr	r3, [r3, #52]	; 0x34
60001778:	str	r3, [r2, #0]
6000177a:	pop	{r3, r4, r5, pc}
6000177c:	.word	0x400fc000
60001780:	.word	0x000186a0
60001784:	.word	0x2000088c

60001788 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001788:	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000178a:	movw	r2, #3937	; 0xf61
6000178e:	ldr	r3, [pc, #180]	; (60001844 <usb_init+0xbc>)
60001790:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001794:	bl	60001b80 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001798:	ldr	r2, [pc, #172]	; (60001848 <usb_init+0xc0>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000179a:	ldr	r1, [pc, #176]	; (6000184c <usb_init+0xc4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000179c:	ldr.w	r3, [r2, #128]	; 0x80
600017a0:	orr.w	r3, r3, #3
600017a4:	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600017a8:	movw	r2, #1028	; 0x404
600017ac:	ldr	r3, [pc, #160]	; (60001850 <usb_init+0xc8>)
600017ae:	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017b2:	ldr	r2, [pc, #160]	; (60001854 <usb_init+0xcc>)
600017b4:	ldr	r0, [r2, #0]
600017b6:	ands	r1, r0
600017b8:	cbnz	r1, 600017c2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017ba:	ldr.w	r1, [r3, #424]	; 0x1a8
600017be:	lsls	r1, r1, #30
600017c0:	beq.n	600017f4 <usb_init+0x6c>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017c2:	mov.w	r1, #2147483648	; 0x80000000
600017c6:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017c8:	ldr.w	r2, [r3, #320]	; 0x140
600017cc:	orr.w	r2, r2, #2
600017d0:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600017d4:	ldr	r2, [pc, #120]	; (60001850 <usb_init+0xc8>)
600017d6:	ldr.w	r3, [r2, #320]	; 0x140
600017da:	lsls	r3, r3, #30
600017dc:	bmi.n	600017d6 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017de:	mov.w	r2, #131072	; 0x20000
600017e2:	ldr	r3, [pc, #116]	; (60001858 <usb_init+0xd0>)
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017e4:	movs	r0, #25
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017e6:	str	r2, [r3, #0]
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017e8:	mov.w	r2, #2147483648	; 0x80000000
600017ec:	ldr	r3, [pc, #100]	; (60001854 <usb_init+0xcc>)
600017ee:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017f0:	bl	60001ba0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017f4:	ldr	r3, [pc, #92]	; (60001854 <usb_init+0xcc>)
	USBPHY1_PWD = 0;
600017f6:	movs	r1, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017f8:	mov.w	r2, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017fc:	ldr	r5, [pc, #92]	; (6000185c <usb_init+0xd4>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017fe:	ldr	r4, [pc, #80]	; (60001850 <usb_init+0xc8>)
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001800:	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001802:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001804:	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001806:	movs	r3, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001808:	mov.w	r2, #640	; 0x280
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000180c:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001810:	bl	60001ba8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001814:	mov.w	r3, #4227072	; 0x408000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001818:	ldr	r2, [pc, #68]	; (60001860 <usb_init+0xd8>)
6000181a:	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000181c:	mov.w	r3, #4194304	; 0x400000
60001820:	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001822:	movw	r3, #323	; 0x143

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001826:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000182a:	str.w	r3, [r4, #328]	; 0x148
6000182e:	ldr	r3, [pc, #52]	; (60001864 <usb_init+0xdc>)
60001830:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001834:	ldr	r3, [pc, #48]	; (60001868 <usb_init+0xe0>)
60001836:	mov.w	r2, #131072	; 0x20000
6000183a:	str	r2, [r3, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000183c:	movs	r3, #1
6000183e:	str.w	r3, [r4, #320]	; 0x140
60001842:	pop	{r3, r4, r5, pc}
60001844:	.word	0x400d8000
60001848:	.word	0x400fc000
6000184c:	.word	0x001e1c00
60001850:	.word	0x402e0000
60001854:	.word	0x400d9000
60001858:	.word	0xe000e28c
6000185c:	.word	0x20000000
60001860:	.word	0x00009441
60001864:	.word	0x20002000
60001868:	.word	0xe000e10c

6000186c <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
6000186c:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000186e:	ldr	r3, [pc, #56]	; (600018a8 <_reboot_Teensyduino_+0x3c>)
60001870:	ldr	r3, [r3, #96]	; 0x60
60001872:	lsls	r3, r3, #30
60001874:	bmi.n	6000187a <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001876:	bkpt	0x00fb
60001878:	b.n	600018a8 <_reboot_Teensyduino_+0x3c>
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000187a:	cpsid	i
		USB1_USBCMD = 0;
6000187c:	movs	r2, #0
6000187e:	ldr	r3, [pc, #44]	; (600018ac <_reboot_Teensyduino_+0x40>)
60001880:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001884:	sub.w	r3, r3, #2310144	; 0x234000
60001888:	ldr	r2, [pc, #36]	; (600018b0 <_reboot_Teensyduino_+0x44>)
6000188a:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000188c:	sub.w	r3, r3, #534773760	; 0x1fe00000
60001890:	sub.w	r3, r3, #700416	; 0xab000
60001894:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001896:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000189a:	ldr	r3, [pc, #24]	; (600018b4 <_reboot_Teensyduino_+0x48>)
6000189c:	ldr	r0, [pc, #24]	; (600018b8 <_reboot_Teensyduino_+0x4c>)
6000189e:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018a0:	ldr	r3, [pc, #24]	; (600018bc <_reboot_Teensyduino_+0x50>)
600018a2:	ldr	r3, [r3, #0]
600018a4:	ldr	r3, [r3, #8]
600018a6:	blx	r3
600018a8:	.word	0x401f4400
600018ac:	.word	0x402e0000
600018b0:	.word	0x00200003
600018b4:	.word	0xeb120000
600018b8:	.word	0x20208000
600018bc:	.word	0x0020001c

600018c0 <startup_default_early_hook>:
600018c0:	bx	lr

600018c2 <startup_default_middle_hook>:
600018c2:	bx	lr

600018c4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	bx	lr

600018c6 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600018c6:	push	{r4, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018c8:	ldr	r2, [pc, #132]	; (60001950 <configure_cache+0x8a>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	movs	r0, #0
600018cc:	ldr	r4, [pc, #132]	; (60001954 <configure_cache+0x8e>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018ce:	movs	r3, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018d0:	ldr	r1, [pc, #132]	; (60001958 <configure_cache+0x92>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600018d2:	str	r0, [r4, #0]

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	str	r3, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018d6:	ldr	r3, [pc, #132]	; (6000195c <configure_cache+0x96>)
600018d8:	str	r1, [r3, #0]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018da:	movs	r1, #17
600018dc:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018de:	ldr	r1, [pc, #128]	; (60001960 <configure_cache+0x9a>)
600018e0:	str	r1, [r3, #0]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018e2:	movs	r1, #18
600018e4:	str	r1, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018e6:	ldr	r1, [pc, #124]	; (60001964 <configure_cache+0x9e>)
600018e8:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018ea:	ldr	r1, [pc, #124]	; (60001968 <configure_cache+0xa2>)
600018ec:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018ee:	ldr	r1, [pc, #124]	; (6000196c <configure_cache+0xa6>)
600018f0:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600018f2:	ldr	r1, [pc, #124]	; (60001970 <configure_cache+0xaa>)
600018f4:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600018f6:	ldr	r1, [pc, #124]	; (60001974 <configure_cache+0xae>)
600018f8:	str	r1, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600018fa:	ldr	r1, [pc, #124]	; (60001978 <configure_cache+0xb2>)
600018fc:	orr.w	r1, r1, #21
60001900:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001902:	ldr	r1, [pc, #120]	; (6000197c <configure_cache+0xb6>)
60001904:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001906:	add.w	r1, r1, #270532608	; 0x10200000
6000190a:	adds	r1, #13
6000190c:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000190e:	ldr	r1, [pc, #112]	; (60001980 <configure_cache+0xba>)
60001910:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001912:	ldr	r1, [pc, #112]	; (60001984 <configure_cache+0xbe>)
60001914:	str	r1, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001916:	ldr	r1, [pc, #112]	; (60001988 <configure_cache+0xc2>)
60001918:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000191a:	ldr	r1, [pc, #112]	; (6000198c <configure_cache+0xc6>)
6000191c:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000191e:	ldr	r1, [pc, #112]	; (60001990 <configure_cache+0xca>)
60001920:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001922:	ldr	r1, [pc, #112]	; (60001994 <configure_cache+0xce>)
60001924:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001926:	ldr	r2, [pc, #112]	; (60001998 <configure_cache+0xd2>)
60001928:	str	r2, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000192a:	movs	r3, #1
6000192c:	str	r3, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000192e:	dsb	sy
	asm("isb");
60001932:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001936:	ldr	r3, [pc, #100]	; (6000199c <configure_cache+0xd6>)
60001938:	str	r0, [r3, #0]

	asm("dsb");
6000193a:	dsb	sy
	asm("isb");
6000193e:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001942:	ldr	r2, [pc, #92]	; (600019a0 <configure_cache+0xda>)
60001944:	ldr	r3, [r2, #0]
60001946:	orr.w	r3, r3, #196608	; 0x30000
6000194a:	str	r3, [r2, #0]
6000194c:	pop	{r4, pc}
6000194e:	nop
60001950:	.word	0xe000ed9c
60001954:	.word	0xe000ed94
60001958:	.word	0x1000003f
6000195c:	.word	0xe000eda0
60001960:	.word	0x03080025
60001964:	.word	0x00100009
60001968:	.word	0x00200013
6000196c:	.word	0x07020021
60001970:	.word	0x20000014
60001974:	.word	0x13080025
60001978:	.word	0x200376e0
6000197c:	.word	0x10000009
60001980:	.word	0x130b0027
60001984:	.word	0x40000017
60001988:	.word	0x13100033
6000198c:	.word	0x60000018
60001990:	.word	0x070b002f
60001994:	.word	0x70000019
60001998:	.word	0x130b002f
6000199c:	.word	0xe000ef50
600019a0:	.word	0xe000ed14

600019a4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600019a4:	push	{r4, r5, r6, r7, lr}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600019a6:	ldr	r3, [pc, #84]	; (600019fc <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600019a8:	movs	r0, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600019aa:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600019ae:	mov.w	r4, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600019b2:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600019b6:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600019ba:	movw	r7, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600019be:	ldr	r2, [r3, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600019c0:	tst.w	r2, #2
600019c4:	beq.n	600019ce <usb_pll_start+0x2a>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600019c6:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600019c8:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600019ca:	str	r7, [r3, #24]
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
600019cc:	b.n	600019be <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600019ce:	tst.w	r2, #8192	; 0x2000
600019d2:	bne.n	600019d8 <usb_pll_start+0x34>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600019d4:	str	r5, [r3, #20]
			continue;
600019d6:	b.n	600019be <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600019d8:	tst.w	r2, #4096	; 0x1000
600019dc:	bne.n	600019e2 <usb_pll_start+0x3e>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600019de:	str	r4, [r3, #20]
			continue;
600019e0:	b.n	600019be <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600019e2:	cmp	r2, #0
600019e4:	bge.n	600019be <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600019e6:	tst.w	r2, #65536	; 0x10000
600019ea:	beq.n	600019f0 <usb_pll_start+0x4c>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600019ec:	str	r1, [r3, #24]
			continue;
600019ee:	b.n	600019be <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600019f0:	lsls	r2, r2, #25
600019f2:	bmi.n	600019f8 <usb_pll_start+0x54>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600019f4:	str	r0, [r3, #20]
			continue;
600019f6:	b.n	600019be <usb_pll_start+0x1a>
600019f8:	pop	{r4, r5, r6, r7, pc}
600019fa:	nop
600019fc:	.word	0x400d8000

60001a00 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001a00:	ldr	r2, [pc, #228]	; (60001ae8 <tempmon_init+0xe8>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a02:	vmov.f32	s12, #57	; 0x41c80000  25.0
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001a06:	ldr	r0, [pc, #228]	; (60001aec <tempmon_init+0xec>)
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001a08:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a0a:	vldr	s10, [pc, #228]	; 60001af0 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001a0e:	bic.w	r3, r3, #1
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001a12:	push	{r4, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001a14:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001a16:	movs	r3, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001a18:	ldr	r4, [pc, #216]	; (60001af4 <tempmon_init+0xf4>)
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001a1a:	str	r3, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001a1c:	ldr	r3, [pc, #216]	; (60001af8 <tempmon_init+0xf8>)
60001a1e:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001a22:	uxtb	r1, r3
60001a24:	str	r1, [r0, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a26:	vmov	s15, r1
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001a2a:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a2e:	lsrs	r3, r3, #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a30:	vcvt.f32.s32	s14, s15
60001a34:	ldr	r1, [pc, #196]	; (60001afc <tempmon_init+0xfc>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a36:	vmov	s15, r0
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001a3a:	str	r0, [r4, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a3c:	vcvt.f32.s32	s13, s15
60001a40:	vmov	s15, r3

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a44:	vsub.f32	s10, s14, s10
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a48:	ldr	r3, [pc, #180]	; (60001b00 <tempmon_init+0x100>)
60001a4a:	vcvt.f32.s32	s15, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a4e:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a52:	vsub.f32	s15, s15, s13
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a56:	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a5a:	vmul.f32	s10, s10, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a5e:	vstr	s15, [r3]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a62:	ldr	r3, [r2, #0]
60001a64:	vdiv.f32	s11, s10, s12
60001a68:	vadd.f32	s11, s11, s13
60001a6c:	vcvt.u32.f32	s11, s11
60001a70:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a74:	vldr	s11, [pc, #140]	; 60001b04 <tempmon_init+0x104>
60001a78:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a7c:	orr.w	r3, r3, r1, lsl #20
60001a80:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a82:	vmul.f32	s14, s14, s15
60001a86:	ldr	r3, [pc, #128]	; (60001b08 <tempmon_init+0x108>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a88:	vmul.f32	s15, s12, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a8c:	ldr.w	r1, [r2, #272]	; 0x110
60001a90:	vdiv.f32	s11, s14, s12
60001a94:	vadd.f32	s14, s11, s13
60001a98:	vcvt.u32.f32	s14, s14
60001a9c:	vmov	r0, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001aa0:	vdiv.f32	s14, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001aa4:	and.w	r3, r3, r0, lsl #16
60001aa8:	orrs	r3, r1
60001aaa:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001aae:	ldr.w	r1, [r2, #272]	; 0x110
60001ab2:	vadd.f32	s15, s14, s13
60001ab6:	vcvt.u32.f32	s15, s15
60001aba:	vmov	r3, s15
60001abe:	ubfx	r3, r3, #0, #12
60001ac2:	orrs	r3, r1
60001ac4:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ac8:	ldr	r3, [r2, #0]
60001aca:	orr.w	r3, r3, #2
60001ace:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ad0:	movs	r2, #0
60001ad2:	ldr	r3, [pc, #56]	; (60001b0c <tempmon_init+0x10c>)
60001ad4:	strb	r2, [r3, #0]
60001ad6:	ldr	r2, [pc, #56]	; (60001b10 <tempmon_init+0x110>)
60001ad8:	ldr	r3, [pc, #56]	; (60001b14 <tempmon_init+0x114>)
60001ada:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ade:	movs	r2, #1
60001ae0:	ldr	r3, [pc, #52]	; (60001b18 <tempmon_init+0x118>)
60001ae2:	str	r2, [r3, #0]
60001ae4:	pop	{r4, pc}
60001ae6:	nop
60001ae8:	.word	0x400d8180
60001aec:	.word	0x20036e38
60001af0:	.word	0x42aa0000
60001af4:	.word	0x20036e34
60001af8:	.word	0x401f4400
60001afc:	.word	0x20036e3c
60001b00:	.word	0x20036e40
60001b04:	.word	0x42b40000
60001b08:	.word	0x0fff0000
60001b0c:	.word	0xe000e440
60001b10:	.word	0x00009c31
60001b14:	.word	0x20002000
60001b18:	.word	0xe000e108

60001b1c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001b1c:	ldr	r3, [pc, #60]	; (60001b5c <analog_init+0x40>)
60001b1e:	ldr	r2, [r3, #108]	; 0x6c
60001b20:	orr.w	r2, r2, #196608	; 0x30000
60001b24:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001b26:	ldr	r2, [r3, #108]	; 0x6c
60001b28:	orr.w	r2, r2, #768	; 0x300
60001b2c:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001b2e:	sub.w	r3, r3, #229376	; 0x38000
60001b32:	movw	r2, #1591	; 0x637
60001b36:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001b38:	movs	r2, #160	; 0xa0
60001b3a:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001b3c:	ldr	r2, [r3, #72]	; 0x48
60001b3e:	lsls	r2, r2, #24
60001b40:	bmi.n	60001b3c <analog_init+0x20>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001b42:	ldr	r3, [pc, #28]	; (60001b60 <analog_init+0x44>)
60001b44:	movw	r2, #1591	; 0x637
60001b48:	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001b4a:	movs	r2, #160	; 0xa0
60001b4c:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001b4e:	ldr	r2, [r3, #72]	; 0x48
60001b50:	ands.w	r2, r2, #128	; 0x80
60001b54:	bne.n	60001b4e <analog_init+0x32>
	calibrating = 0;
60001b56:	ldr	r3, [pc, #12]	; (60001b64 <analog_init+0x48>)
60001b58:	strb	r2, [r3, #0]
60001b5a:	bx	lr
60001b5c:	.word	0x400fc000
60001b60:	.word	0x400c8000
60001b64:	.word	0x20037633

60001b68 <_init>:
60001b68:	push	{r3, r4, r5, r6, r7, lr}
60001b6a:	nop
60001b6c:	pop	{r3, r4, r5, r6, r7}
60001b6e:	pop	{r3}
60001b70:	mov	lr, r3
60001b72:	bx	lr
60001b74:	movs	r0, r0
	...

60001b78 <___ZN5Print6printfEPKcz_veneer>:
60001b78:	ldr.w	pc, [pc]	; 60001b7c <___ZN5Print6printfEPKcz_veneer+0x4>
60001b7c:	.word	0x0000a175

60001b80 <__usb_init_serialnumber_veneer>:
60001b80:	ldr.w	pc, [pc]	; 60001b84 <__usb_init_serialnumber_veneer+0x4>
60001b84:	.word	0x00009e11

60001b88 <____libc_init_array_veneer>:
60001b88:	ldr.w	pc, [pc]	; 60001b8c <____libc_init_array_veneer+0x4>
60001b8c:	.word	0x0000a65d

60001b90 <__set_arm_clock_veneer>:
60001b90:	ldr.w	pc, [pc]	; 60001b94 <__set_arm_clock_veneer+0x4>
60001b94:	.word	0x00008f95

60001b98 <__main_veneer>:
60001b98:	ldr.w	pc, [pc]	; 60001b9c <__main_veneer+0x4>
60001b9c:	.word	0x0000a0a3

60001ba0 <__delay_veneer>:
60001ba0:	ldr.w	pc, [pc]	; 60001ba4 <__delay_veneer+0x4>
60001ba4:	.word	0x000099f9

60001ba8 <__memset_veneer>:
60001ba8:	ldr.w	pc, [pc]	; 60001bac <__memset_veneer+0x4>
60001bac:	.word	0x00008761

60001bb0 <__pwm_init_veneer>:
60001bb0:	ldr.w	pc, [pc]	; 60001bb4 <__pwm_init_veneer+0x4>
60001bb4:	.word	0x00009da5

60001bb8 <___ZN7TwoWire8setClockEm_veneer>:
60001bb8:	ldr.w	pc, [pc]	; 60001bbc <___ZN7TwoWire8setClockEm_veneer+0x4>
60001bbc:	.word	0x00002611

60001bc0 <__init_array_start>:
60001bc0:	.word	0x00000045
60001bc4:	.word	0x000003bd
60001bc8:	.word	0x00001e7d
60001bcc:	.word	0x000021d5
60001bd0:	.word	0x00002d45

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
	qh->config = config;
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	movs	r4, #72	; 0x48
	qh->next = 1; // Terminate bit = 1
      3a:	movs	r0, #0
	qh->callback_function = callback;
      3c:	movs	r0, r0
      3e:	movs	r0, r0
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      40:	.word	0x000114b4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	.word	0x4b07bd10
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
    *--str = 'C';
    *--str = 'T';
    *--str = 'U';
  }
  return str;
}
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
      68:	movs	r0, r0
      6a:	movs	r0, r0
      6c:	.word	0x2000244c

		// setup new one...
		*(portControlRegister(hardware.scl_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
		*(portConfigRegister(hardware.scl_pins[newindex].pin)) = hardware.scl_pins[newindex].mux_val;
		if (hardware.scl_pins[newindex].select_input_register) {
			*(hardware.scl_pins[newindex].select_input_register) =  hardware.scl_pins[newindex].select_val;
      70:	asrs	r4, r6, #18
		}
	}
	scl_pin_index_ = newindex;
      72:	movs	r1, r0
      74:	movs	r2, #192	; 0xc0
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
      7c:	push	{r4, lr}
      7e:	mov	r4, r0
		release();
      80:	bl	a048 <DMAChannel::release()>
	}
      84:	mov	r0, r4
      86:	pop	{r4, pc}

00000088 <mckl_init(int)>:

    void mckl_init(int fsamp)
    {
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
      88:	.word	0x6fd34a51
      8c:	orr.w	r3, r3, #786432	; 0xc0000
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }

    void mckl_init(int fsamp)
    {
      90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      94:	vpush	{d8}
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
      98:	str	r3, [r2, #124]	; 0x7c
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }

    void mckl_init(int fsamp)
    {
      9a:	.short	0xb082
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);

        // if either transmitter or receiver is enabled, do nothing
        if (I2S1_RCSR & I2S_RCSR_RE) return;
      9c:	ldr	r3, [pc, #308]	; (1d4 <mckl_init(int)+0x14c>)
        CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
        Serial.printf("PLL %f\r\n",24.0f*((float)nfact+(float)nmult/(float)ndiv));
    }

    void mckl_init(int fsamp)
    {
      9e:	.short	0x4604
        CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);

        // if either transmitter or receiver is enabled, do nothing
        if (I2S1_RCSR & I2S_RCSR_RE) return;
      a0:	ldr.w	r3, [r3, #136]	; 0x88
      a4:	cmp	r3, #0
      a6:	blt.n	1a8 <mckl_init(int)+0x120>
        do
        {   n0++;
            n1=0;
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      a8:	.word	0x4b4b01c1
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
      ac:	ldr	r0, [pc, #300]	; (1dc <mckl_init(int)+0x154>)
        do
        {   n0++;
            n1=0;
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      ae:	mov	r2, r1
        // PLL between 27*24 = 648MHz und 54*24=1296MHz
        int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
        int n1, n2;
        do
        {   n0++;
            n1=0;
      b0:	movs	r5, #0
            do
            {   n1++; 
      b2:	.short	0x1c6e
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
      b4:	sdiv	r7, r3, r2
      b8:	add.w	r8, r7, #1
            } while ((n2>64) && (n1<=8));
      bc:	.word	0x0f40f1b8
      c0:	ble.n	d8 <mckl_init(int)+0x50>
      c2:	.short	0x2e09
      c4:	add	r2, r1
      c6:	.short	0xd001
      c8:	mov	r5, r6
      ca:	.short	0xe7f2
      cc:	add.w	r3, r3, #23986176	; 0x16e0000
      d0:	.word	0x5358f503
        } while ((n2>64 && n0<54));
      d4:	cmp	r3, r0
      d6:	.short	0xd1ea
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      d8:	mov.w	r3, #1000	; 0x3e8
      dc:	mul.w	r2, r6, r8
      e0:	.word	0xf007493f
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      e4:	lsls	r7, r7, #28
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      e6:	.short	0xf8cd
      e8:	strh	r0, [r0, #0]
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      ea:	lsls	r5, r5, #6
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      ec:	.word	0xf405483d
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
      f0:	strb	r0, [r4, #23]
            do
            {   n1++; 
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
      f2:	sdiv	r3, r4, r3
      f6:	muls	r3, r2
      f8:	.word	0x52c0f645
      fc:	lsls	r3, r3, #7
      fe:	.short	0xfb93
     100:			; <UNDEFINED> instruction: 0xf3f24622
     104:	.word	0x46339301
     108:	bl	a174 <Print::printf(char const*, ...)>

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
     10c:	.word	0x4a90ee07
        Serial.printf(" C=%f\r\n",C);
     110:	ldr	r1, [pc, #212]	; (1e8 <mckl_init(int)+0x160>)
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
     112:	.short	0xeeb8
     114:	ldrb	r7, [r4, #15]
        Serial.printf(" C=%f\r\n",C);
     116:	.short	0x4833
                n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
            } while ((n2>64) && (n1<=8));
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
     118:	vldr	d6, [pc, #156]	; 1b8 <mckl_init(int)+0x130>
     11c:	.word	0x7b06ee27
     120:	vmov	s13, r6
     124:	.word	0x6be6eeb8
     128:	vmul.f64	d7, d7, d6
     12c:	.word	0x8a90ee06
     130:	vcvt.f64.s32	d6, s13
     134:	.word	0x7b06ee27
     138:	vldr	d6, [pc, #132]	; 1c0 <mckl_init(int)+0x138>
     13c:	.word	0x8b06ee87
        Serial.printf(" C=%f\r\n",C);
     140:	vmov	r2, r3, d8
     144:	.word	0xf816f00a
        int c0 = C;
     148:	vcvt.s32.f64	s15, d8
        int c2 = 10'000;
        int c1 =  C * c2 - (c0 * c2);
        set_audioClock(c0, c1, c2);
     14c:	.word	0x7210f242
        } while ((n2>64 && n0<54));
        Serial.printf("fs=%d, n1=%d, n2=%d, %d (>=27 && <54) ", fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

        double C = ((double)fs * ovr * n1 * n2) / (24000000.0f);
        Serial.printf(" C=%f\r\n",C);
        int c0 = C;
     150:	vmov	r0, s15
        int c2 = 10'000;
        int c1 =  C * c2 - (c0 * c2);
        set_audioClock(c0, c1, c2);
     154:	.word	0xf300fb02
     158:	vmov	s14, r3
     15c:	movs	r3, #0
     15e:	.short	0xed9f
     160:	ldr	r2, [r3, #48]	; 0x30
     162:	.short	0xeeb8
     164:	ldrb	r7, [r0, #15]
     166:	.short	0xee98
     168:	ldrb	r6, [r0, #12]
     16a:	.short	0xeefd
     16c:	.word	0xee177bc7
     170:	subs	r0, r2, r2
     172:	.short	0xf011
     174:	ldrsb.w	r4, [r1, #2582]	; 0xa16

        // clear SAI1_CLK register locations
        CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     178:	.word	0xf42369d3
            | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     17c:	str	r0, [r0, #52]	; 0x34
     17e:	.short	0xf443
     180:	str	r0, [r0, #48]	; 0x30
     182:	.short	0x61d3

        CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     184:	ldr	r3, [r2, #40]	; 0x28
            | CCM_CS1CDR_SAI1_CLK_PRED((n1-1))  // &0x07  // <8
            | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f  // <64
     186:	.short	0xf423
     188:	strb	r7, [r7, #15]
     18a:	bic.w	r3, r3, #1
     18e:	orrs	r3, r7
     190:	orrs	r5, r3
     192:	str	r5, [r2, #40]	; 0x28

        IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
     194:	.word	0x22a0f5a2
     198:	ldr	r3, [r2, #4]
                | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
     19a:	.short	0xf423
     19c:	movs	r3, #0
     19e:	.short	0xf023
     1a0:	lsls	r7, r0, #12
     1a2:	orr.w	r3, r3, #524288	; 0x80000
     1a6:	.short	0x6053
    }
     1a8:	add	sp, #8
     1aa:	vpop	{d8}
     1ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1b2:	nop
     1b4:	nop.w
     1b8:	movs	r0, r0
     1ba:	movs	r0, r0
     1bc:	.word	0x40600000
     1c0:	movs	r0, r0
     1c2:	.short	0x0000
     1c4:	b.n	888 <FsBaseFile::available() const+0x18>
     1c6:	.short	0x4176
     1c8:	movs	r0, r0
     1ca:	.short	0x0000
     1cc:	ldrh	r0, [r0, #0]
     1ce:	.short	0x40c3
     1d0:	stmia	r0!, {}
     1d2:	ands	r7, r1
     1d4:	.word	0x40384000
     1d8:	sxth	r0, r0
     1da:	.short	0x269f
     1dc:	ldr	r2, [sp, #0]
     1de:	.short	0x4ead
     1e0:	lsrs	r7, r1, #25
     1e2:	.short	0x2000
     1e4:	asrs	r4, r0, #28
     1e6:	movs	r0, #0
     1e8:	lsrs	r6, r6, #25
     1ea:	movs	r0, #0

000001ec <acq_init(int)>:

    void acq_init(int fsamp)
    {
     1ec:	push	{r3, r4, r5, r6, r7, lr}
        mckl_init(fsamp);
     1ee:	bl	88 <mckl_init(int)>

        // configuration of I2S
        I2S1_RMR = 0;
        I2S1_RCR1 = I2S_RCR1_RFW(4);
     1f2:	movs	r6, #4
    void acq_init(int fsamp)
    {
        mckl_init(fsamp);

        // configuration of I2S
        I2S1_RMR = 0;
     1f4:	ldr	r2, [pc, #208]	; (2c8 <acq_init(int)+0xdc>)
     1f6:	movs	r0, #0
        I2S1_RCR1 = I2S_RCR1_RFW(4);
        I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
                    | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
     1f8:	mov.w	r3, #117440512	; 0x7000000
        CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
        CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#endif

        // configuration of DMA
        dma.TCD->SADDR = &I2S1_RDR0;
     1fc:	ldr	r1, [pc, #204]	; (2cc <acq_init(int)+0xe0>)
    void acq_init(int fsamp)
    {
        mckl_init(fsamp);

        // configuration of I2S
        I2S1_RMR = 0;
     1fe:	str.w	r0, [r2, #224]	; 0xe0
        #if ADC_STEREO
            I2S1_RCR4 |=  I2S_RCR4_SYWD(31);
        #endif

#if I2S_CONFIG==0
    	CORE_PIN23_CONFIG = 3;  //1:MCLK 
     202:	movs	r5, #3
    {
        mckl_init(fsamp);

        // configuration of I2S
        I2S1_RMR = 0;
        I2S1_RCR1 = I2S_RCR1_RFW(4);
     204:	str.w	r6, [r2, #140]	; 0x8c
        I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
                    | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
     208:	str.w	r3, [r2, #144]	; 0x90


        I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_MF
                   | I2S_RCR4_FSE | I2S_RCR4_FSD;
     20c:	.word	0x4c314b30
     210:	str.w	r3, [r2, #152]	; 0x98
        I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     214:	ldr	r3, [pc, #192]	; (2d8 <acq_init(int)+0xec>)
        CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
        CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#endif

        // configuration of DMA
        dma.TCD->SADDR = &I2S1_RDR0;
     216:	ldr	r7, [pc, #196]	; (2dc <acq_init(int)+0xf0>)
                    | I2S_RCR2_BCD | I2S_RCR2_DIV(0);


        I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_MF
                   | I2S_RCR4_FSE | I2S_RCR4_FSD;
        I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     218:	.word	0x309cf8c2

        #if ADC_STEREO
            I2S1_RCR4 |=  I2S_RCR4_SYWD(31);
     21c:	ldr.w	r3, [r2, #152]	; 0x98
     220:	orr.w	r3, r3, #7936	; 0x1f00
     224:	str.w	r3, [r2, #152]	; 0x98
        CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
        CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#endif

        // configuration of DMA
        dma.TCD->SADDR = &I2S1_RDR0;
     228:	ldr	r3, [r1, #0]
        #if ADC_STEREO
            I2S1_RCR4 |=  I2S_RCR4_SYWD(31);
        #endif

#if I2S_CONFIG==0
    	CORE_PIN23_CONFIG = 3;  //1:MCLK 
     22a:	str.w	r5, [r4, #288]	; 0x120
        CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     22e:	str.w	r5, [r4, #296]	; 0x128
        CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     232:	str.w	r5, [r4, #292]	; 0x124
#endif

        // configuration of DMA
        dma.TCD->SADDR = &I2S1_RDR0;
     236:	str	r7, [r3, #0]
        dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     238:	movw	r7, #514	; 0x202
     23c:	strh	r7, [r3, #6]

#if NPORT_I2S==1
        I2S1_RCR3 = I2S_RCR3_RCE; // single data port
     23e:	.short	0xf44f
     240:	adds	r7, #128	; 0x80
     242:	.short	0xf8c2
     244:	strb	r4, [r2, #2]

		CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     246:	.short	0xf8c4
     248:	str	r4, [r7, r5]
		IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
     24a:	movs	r5, #2
     24c:	.word	0x5594f8c4
        dma.TCD->SLAST = -8;
#endif
        dma.TCD->DADDR = tdm_rx_buffer;
        dma.TCD->DOFF = 4;
        dma.TCD->CITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
        dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
     250:	subw	r5, r5, #2050	; 0x802
	    dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
                                   DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
                                   DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
        dma.TCD->SLAST = -8;
#endif
        dma.TCD->DADDR = tdm_rx_buffer;
     254:	ldr	r4, [pc, #136]	; (2e0 <acq_init(int)+0xf4>)
        I2S1_RCR3 = I2S_RCR3_RCE; // single data port

		CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
		IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873

        dma.TCD->SOFF = 0;
     256:	strh	r0, [r3, #4]
	    dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
                                   DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
                                   DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
        dma.TCD->SLAST = -8;
#endif
        dma.TCD->DADDR = tdm_rx_buffer;
     258:	.word	0xf44f611c
        dma.TCD->DOFF = 4;
        dma.TCD->CITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
     25c:	strb	r0, [r0, #16]
		CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
		IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873

        dma.TCD->SOFF = 0;
	    dma.TCD->NBYTES_MLOFFNO = 4;
        dma.TCD->SLAST = 0;
     25e:	.short	0x60d8
                                   DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
        dma.TCD->SLAST = -8;
#endif
        dma.TCD->DADDR = tdm_rx_buffer;
        dma.TCD->DOFF = 4;
        dma.TCD->CITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
     260:	strh	r4, [r3, #22]
        dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
        dma.TCD->BITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
     262:	.short	0x83dc
        dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     264:	movs	r4, #6

		CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
		IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873

        dma.TCD->SOFF = 0;
	    dma.TCD->NBYTES_MLOFFNO = 4;
     266:	str	r6, [r3, #8]
        dma.TCD->DADDR = tdm_rx_buffer;
        dma.TCD->DOFF = 4;
        dma.TCD->CITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
        dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
        dma.TCD->BITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
        dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     268:	strh	r4, [r3, #28]
                                   DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
                                   DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
        dma.TCD->SLAST = -8;
#endif
        dma.TCD->DADDR = tdm_rx_buffer;
        dma.TCD->DOFF = 4;
     26a:	.short	0x829e
        dma.TCD->CITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
        dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
     26c:	str	r5, [r3, #24]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     26e:	.short	0x790b
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     270:	ldr	r4, [pc, #112]	; (2e4 <acq_init(int)+0xf8>)
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     272:	lsls	r3, r3, #2
     274:	.word	0x4380f103
     278:	add.w	r3, r3, #966656	; 0xec000
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     27c:	.word	0x481a6018
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     280:	str	r0, [r3, #0]
        dma.TCD->BITER_ELINKNO = 2*NBUF_I2S/NPORT_I2S;
        dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
        //
        dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_RX);
        NVIC_SET_PRIORITY(DMAMUX_SOURCE_SAI1_RX,I2S_SAI_PRIO);
     282:	movs	r0, #64	; 0x40
     284:	.word	0x70184b19
        //
        I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
     288:	ldr	r3, [pc, #100]	; (2f0 <acq_init(int)+0x104>)
     28a:	.short	0xf8c2
     28c:	adds	r0, #136	; 0x88
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     28e:	ldrb	r2, [r1, #4]
     290:	.word	0xf1024b18
     294:	movs	r0, r2
     296:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     29a:	.short	0x1153
     29c:	movs	r0, #1
     29e:	.short	0xf002
     2a0:	lsls	r7, r3, #8
     2a2:	lsls	r3, r3, #2
     2a4:	.word	0xf202fa00
     2a8:	add.w	r3, r3, #3758096384	; 0xe0000000
     2ac:	.word	0x4361f503
     2b0:	str	r2, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     2b2:	.short	0x2250
     2b4:	ldrb	r3, [r1, #4]
     2b6:	.short	0xf103
     2b8:	muls	r0, r4
     2ba:	.short	0xf503
     2bc:	muls	r4, r4
     2be:	.short	0x701a
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     2c0:	ldr	r3, [pc, #52]	; (2f8 <acq_init(int)+0x10c>)
     2c2:	.short	0x790a
     2c4:	strb	r2, [r3, #27]
     2c6:	pop	{r3, r4, r5, r6, r7, pc}
     2c8:	.word	0x40384000
     2cc:	subs	r5, #56	; 0x38
     2ce:	.short	0x2000
     2d0:	movs	r1, r3
     2d2:	.short	0x0001
     2d4:	strh	r0, [r0, #0]
     2d6:	.short	0x401f
     2d8:	subs	r0, r0, #4
     2da:	.short	0x1f1f
     2dc:	lsls	r0, r4
     2de:	ands	r0, r7
     2e0:	.word	0x20200000
     2e4:	lsls	r5, r0, #13
     2e6:	movs	r0, r0
     2e8:	.word	0x80000013
     2ec:	b.n	fffffb16 <_flexram_bank_config+0x55555057>
     2ee:	.short	0xe000
     2f0:	movs	r1, r0
     2f2:	.short	0x0200
     2f4:	movs	r0, #0
     2f6:	.short	0x2000
     2f8:	strh	r0, [r0, #0]
     2fa:	.short	0x400e

000002fc <acq_start()>:
        dma.enable();        
    }

    void acq_start(void)
    {
        I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
     2fc:	ldr	r2, [pc, #12]	; (30c <acq_start()+0x10>)
     2fe:	ldr.w	r3, [r2, #136]	; 0x88
     302:	.short	0xf043
     304:	orrs	r0, r2
     306:	.short	0xf8c2
     308:	adds	r0, #136	; 0x88
     30a:	.short	0x4770
     30c:	ands	r0, r0
     30e:	ands	r0, r7

00000310 <acq_stop()>:
    }

    void acq_stop(void)
    {
        I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     310:	ldr	r2, [pc, #12]	; (320 <acq_stop()+0x10>)
     312:	ldr.w	r3, [r2, #136]	; 0x88
     316:	.short	0xf023
     318:	orrs	r0, r2
     31a:	.short	0xf8c2
     31c:	adds	r0, #136	; 0x88
     31e:	.short	0x4770
     320:	ands	r0, r0
     322:	.short	0x4038

00000324 <extract(void*, void*)>:


const int adc_shift=8;
#if ADC_STEREO // have stereo I2S
    void extract(void *out, void *inp)
    {   
     324:	movs	r3, #0
     326:	.short	0xb510
        int32_t *dout = (int32_t *) out;
        int32_t *din  = (int32_t *) inp;
        for(int ii=0; ii < NSAMP; ii++)
        {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     328:	ldr	r2, [r1, r3]
            dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     32a:	.short	0x18c4
    void extract(void *out, void *inp)
    {   
        int32_t *dout = (int32_t *) out;
        int32_t *din  = (int32_t *) inp;
        for(int ii=0; ii < NSAMP; ii++)
        {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     32c:	asrs	r2, r2, #8
     32e:	.short	0x50c2
            dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     330:	adds	r2, r1, r3
     332:	.short	0x3308
     334:	ldr	r2, [r2, #4]
#if ADC_STEREO // have stereo I2S
    void extract(void *out, void *inp)
    {   
        int32_t *dout = (int32_t *) out;
        int32_t *din  = (int32_t *) inp;
        for(int ii=0; ii < NSAMP; ii++)
     336:	.short	0xf5b3
     338:	ldr	r0, [r0, #120]	; 0x78
        {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
            dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
     33a:	.short	0xea4f
     33c:	movs	r2, #34	; 0x22
     33e:	.short	0x6062
#if ADC_STEREO // have stereo I2S
    void extract(void *out, void *inp)
    {   
        int32_t *dout = (int32_t *) out;
        int32_t *din  = (int32_t *) inp;
        for(int ii=0; ii < NSAMP; ii++)
     340:	bne.n	328 <extract(void*, void*)+0x4>
        {   dout[0+ii*NCHAN_ACQ] = din[0+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
            dout[1+ii*NCHAN_ACQ] = din[1+ii*NPORT_I2S*NCHAN_I2S]>>adc_shift;
        }
    }
     342:	.short	0xbd10

00000344 <acq_isr()>:
        }
    }
#endif

    void acq_isr(void)
    {
     344:	push	{r3, lr}
     346:	.short	0x4b16
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     348:	ldr	r2, [pc, #88]	; (3a4 <acq_isr()+0x60>)
     34a:	.short	0x7919
     34c:	strb	r1, [r2, #31]
        uint32_t daddr;
        uint32_t *src;

        dma.clearInterrupt();
        asm volatile("dsb");
     34e:	.short	0xf3bf
     350:	ldrh	r7, [r1, #58]	; 0x3a
        daddr = (uint32_t) dma.destinationAddress();

        if (daddr < (uint32_t) &tdm_rx_buffer[NBUF_I2S]) {
     352:	.short	0x4915
     354:	ldr	r3, [r3, #0]
	}
	void * sourceAddress(void) {
		return (void *)(TCD->SADDR);
	}
	void * destinationAddress(void) {
		return (void *)(TCD->DADDR);
     356:	.short	0x691a
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     358:	sub.w	r3, r1, #1024	; 0x400
     35c:	.word	0xbf28428a
     360:	movcs	r1, r3
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     362:	.short	0xf021
     364:	lsls	r7, r3, #12
	uint32_t end_addr = (uint32_t)addr + size;
     366:	add.w	r2, r1, #1024	; 0x400
	asm volatile("": : :"memory");
	asm("dsb");
     36a:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     36e:	.short	0x480f
     370:	str	r3, [r0, #0]
		location += 32;
     372:	.short	0x3320
	} while (location < end_addr);
     374:	cmp	r2, r3
     376:	.short	0xd8fb
	asm("dsb");
     378:	dsb	sy
	asm("isb");
     37c:	.word	0x8f6ff3bf

        #if IMXRT_CACHE_ENABLED >=1
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        extract((void *) acq_rx_buffer, (void *) src);
     380:	ldr	r0, [pc, #44]	; (3b0 <acq_isr()+0x6c>)
     382:	bl	324 <extract(void*, void*)>
        if(!pushData(acq_rx_buffer)) acq_miss++;
     386:	.short	0x480a
     388:	bl	173c <pushData(unsigned long*)>
     38c:	.word	0x4a09b918
     390:	ldr	r3, [r2, #0]
     392:	adds	r3, #1
     394:	.word	0x4a086013
        acq_count++;
     398:	ldr	r3, [r2, #0]
     39a:	.short	0x3301
     39c:	str	r3, [r2, #0]
     39e:	.short	0xbd08
     3a0:	subs	r5, #56	; 0x38
     3a2:	.short	0x2000
     3a4:	strh	r0, [r0, #0]
     3a6:	.short	0x400e
     3a8:	lsls	r0, r0, #16
     3aa:	.short	0x2020
     3ac:	vhadd.s16	d30, d12, d0
     3b0:	.word	0x20003938
     3b4:	subs	r5, #212	; 0xd4
     3b6:	.short	0x2000
     3b8:	subs	r5, #208	; 0xd0
     3ba:	.short	0x2000

000003bc <_GLOBAL__sub_I_acq_count>:
    }
     3bc:	push	{r4, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     3be:	.short	0x4c06
     3c0:	movs	r1, #0
     3c2:	.short	0x4620
     3c4:	bl	9fac <DMAChannel::begin(bool)>
#include "acq.h"
#include "adc.h"

/********************************************************************************/
#include "DMAChannel.h"
static DMAChannel dma;
     3c8:	.word	0x4a044620
     3cc:	ldr	r1, [pc, #16]	; (3e0 <_GLOBAL__sub_I_acq_count+0x24>)
        #endif

        extract((void *) acq_rx_buffer, (void *) src);
        if(!pushData(acq_rx_buffer)) acq_miss++;
        acq_count++;
    }
     3ce:	.short	0xe8bd
     3d0:	ands	r0, r2
#include "acq.h"
#include "adc.h"

/********************************************************************************/
#include "DMAChannel.h"
static DMAChannel dma;
     3d2:	.short	0xf009
     3d4:	ittee	ls
     3d6:	.short	0xbf00
     3d8:	subs	r5, #56	; 0x38
     3da:	movls	r0, #0
     3dc:	asrls	r0, r5, #26
     3de:	movhi	r0, #0
     3e0:	lslhi	r5, r7, #1
	...

000003e4 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     3e4:	push	{r4, r5, r6, lr}
     3e6:	mov	r4, r0
     3e8:	mov	r0, r1
     3ea:	mov	r5, r1
     3ec:	bl	b340 <strlen>
     3f0:	ldr	r3, [r4, #0]
     3f2:	mov	r2, r0
     3f4:	mov	r1, r5
     3f6:	mov	r0, r4
     3f8:	ldr	r3, [r3, #4]
     3fa:	ldmia.w	sp!, {r4, r5, r6, lr}
     3fe:	bx	r3

00000400 <Print::print(unsigned long)>:

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     400:	.word	0x220a2300
     404:	b.w	a18e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000408 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     408:	push	{r3, r4, r5, lr}
     40a:	mov	r5, r0
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     40c:	.word	0xffeaf7ff
     410:	mov	r4, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     412:	mov	r0, r5
     414:	bl	a154 <Print::println()>
     418:	.word	0xbd384420

0000041c <checkToCloseFile(short, unsigned long)>:

uint32_t t_start;

/* check if we should close file */
int16_t checkToCloseFile(int16_t status, uint32_t t_acq)
{ if((status == OPENED) || (status == RUNNING))
     41c:	push	{r3, r4, r5, lr}
     41e:	subs	r3, r0, #1
     420:	mov	r5, r0
     422:	mov	r4, r1
     424:	uxth	r3, r3
     426:	cmp	r3, #1
     428:	bhi.n	442 <checkToCloseFile(short, unsigned long)+0x26>
  {
    //
    static uint32_t to =0;
    uint32_t tx=rtc_get();
     42a:	bl	9bb8 <rtc_get>
    tx %= t_acq;
    if(tx<to) status = DOCLOSE; // time wrapped, file must be closed
     42e:	ldr	r3, [pc, #24]	; (448 <checkToCloseFile(short, unsigned long)+0x2c>)
{ if((status == OPENED) || (status == RUNNING))
  {
    //
    static uint32_t to =0;
    uint32_t tx=rtc_get();
    tx %= t_acq;
     430:	udiv	r1, r0, r4
    if(tx<to) status = DOCLOSE; // time wrapped, file must be closed
     434:	ldr	r2, [r3, #0]
{ if((status == OPENED) || (status == RUNNING))
  {
    //
    static uint32_t to =0;
    uint32_t tx=rtc_get();
    tx %= t_acq;
     436:	mls	r0, r1, r4, r0
    if(tx<to) status = DOCLOSE; // time wrapped, file must be closed
     43a:	cmp	r0, r2
     43c:	it	cc
     43e:	.short	0x2503
    to=tx;
     440:	str	r0, [r3, #0]
  } 
  return status;
}
     442:	.short	0x4628
     444:	pop	{r3, r4, r5, pc}
     446:	nopcc
     448:	subs	r5, #144	; 0x90
     44a:	movs	r0, #0

0000044c <setup>:

void setup()
{
     44c:	push	{r3, r4, r5, lr}
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     44e:	ldr	r0, [pc, #100]	; (4b4 <setup+0x68>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     450:	.word	0x4d1a4c19
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     454:	ldr	r1, [pc, #104]	; (4c0 <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     456:	.short	0x7823
     458:	cmp	r3, #0
     45a:	beq.n	456 <setup+0xa>
     45c:	ldrb	r3, [r5, #0]
     45e:	lsls	r3, r3, #31
     460:	bpl.n	456 <setup+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     462:	ldr	r3, [r0, #0]
     464:	ldr	r2, [r1, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     466:	subs	r3, r3, r2
     468:	.word	0xd9f42b0e
  while(!Serial) continue;

  Serial.println("basic Sound Recorder Version: " __DATE__  " " __TIME__ );
     46c:	ldr	r1, [pc, #84]	; (4c4 <setup+0x78>)
     46e:	ldr	r0, [pc, #88]	; (4c8 <setup+0x7c>)
     470:	bl	408 <Print::println(char const*)>
  SerNum = getTeensySerial();
     474:	bl	21e8 <getTeensySerial()>
     478:	ldr	r3, [pc, #80]	; (4cc <setup+0x80>)
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     47a:	movs	r2, #16
     47c:	mov	r1, r0
     47e:	str	r0, [r3, #0]
     480:	.word	0x48112300
     484:	bl	a18e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
     488:	ldr	r0, [pc, #60]	; (4c8 <setup+0x7c>)
     48a:	bl	a154 <Print::println()>
  Serial.println((int32_t)SerNum,HEX);

  storage_configure();
     48e:	bl	17f0 <storage_configure()>


  adc_init();
     492:	bl	1f8e <adc_init()>
  acq_init(FSAMP);
     496:	movw	r0, #48000	; 0xbb80
     49a:	bl	1ec <acq_init(int)>
  adc_enable(0);
     49e:	ldr	r1, [pc, #48]	; (4d0 <setup+0x84>)
     4a0:	movs	r0, #0
     4a2:	bl	1f94 <adc_enable(unsigned int, unsigned long)>

  acq_start(); 
     4a6:	bl	2fc <acq_start()>

  Serial.println("End of Setup");
     4aa:	ldr	r1, [pc, #40]	; (4d4 <setup+0x88>)
     4ac:	.word	0xf7ff4806
     4b0:			; <UNDEFINED> instruction: 0xffabbd38
     4b4:	strb	r4, [r2, #12]
     4b6:	movs	r0, #3
     4b8:	strb	r4, [r2, #25]
     4ba:	movs	r0, #3
     4bc:	strb	r3, [r2, #25]
     4be:	movs	r0, #3
     4c0:	strb	r0, [r5, #26]
     4c2:	movs	r0, #3
     4c4:	lsrs	r6, r7, #25
     4c6:	movs	r0, #0
     4c8:	.word	0x20001704
     4cc:	cmp	r1, #44	; 0x2c
     4ce:	movs	r0, #0
     4d0:	ands	r0, r0
     4d2:	lsrs	r4, r0, #11
     4d4:	.word	0x20000eb1

000004d8 <loop>:
}

void loop()
{ static int16_t status=START_MODE; 
     4d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  if(status==MUST_REBOOT) status=checkReboot(); // hapens only if microSD card write fails: reboot if space on disk
     4dc:	ldr	r4, [pc, #280]	; (5f8 <loop+0x120>)
     4de:	ldrsh.w	r3, [r4]
     4e2:	adds	r3, #2
     4e4:	.word	0xf001d102
     4e8:			; <UNDEFINED> instruction: 0xfaab8020

  // normal operation
  int16_t ch=menu();  // check if we have serial line command (0: no input; 1: start; -1: stop)
     4ec:	.word	0xfd58f000

  if(ch>0 && status==STOPPED)  // was stopped, should run now 
     4f0:	cmp	r0, #0
     4f2:	.short	0xdd0b
     4f4:	ldrsh.w	r3, [r4]
     4f8:	adds	r3, #1
     4fa:	bne.n	520 <loop+0x48>
  { 
    status=CLOSED; acq_start(); adcStatus();
     4fc:	.word	0x4b3e2200
     500:	strh	r2, [r3, #0]
     502:	.short	0xf7ff
     504:	cdp2	0, 15, cr15, cr11, cr1, {0}
     508:	.word	0xe009fd43
  }  
  
  if(ch<0 && status>=CLOSED)  // was running, should stop now
     50c:	beq.n	520 <loop+0x48>
     50e:	ldrsh.w	r3, [r4]
     512:	cmp	r3, #0
     514:	blt.n	520 <loop+0x48>
  { status=MUSTSTOP;  acq_stop();  
     516:	movs	r2, #4
     518:	ldr	r3, [pc, #220]	; (5f8 <loop+0x120>)
     51a:	strh	r2, [r3, #0]
     51c:	bl	310 <acq_stop()>
  } 

  if(status > CLOSED) // RUNNING
     520:	.word	0x0000f9b4
     524:	cmp	r0, #0
     526:	ble.n	534 <loop+0x5c>
  {
    status = checkToCloseFile(status, (uint32_t) t_acq); // check if we reached file size or aquisition time
     528:	ldr	r3, [pc, #208]	; (5fc <loop+0x124>)
     52a:	ldr	r1, [r3, #0]
     52c:	bl	41c <checkToCloseFile(short, unsigned long)>
     530:	ldr	r3, [pc, #196]	; (5f8 <loop+0x120>)
     532:	strh	r0, [r3, #0]
    //
  }

  if(status >= CLOSED) // NOT STOPPED
     534:	ldrsh.w	r3, [r4]
     538:	.word	0x2b004d31
     53c:	blt.n	566 <loop+0x8e>
  {
    uint32_t mc = getCount();
     53e:	bl	1724 <getCount()>
    if(mc>max_count) max_count=mc;
     542:	ldr	r3, [pc, #192]	; (604 <loop+0x12c>)
     544:	ldr	r6, [r5, #0]
     546:	ldr	r2, [r3, #0]
     548:	cmp	r0, r2
     54a:	it	hi
     54c:	strhi	r0, [r3, #0]
    //
    uint32_t to=millis();
    status = saveData(status);  
     54e:	ldrsh.w	r0, [r4]
     552:	bl	1a64 <saveData(short)>
    uint32_t dt=millis()-to;
    if(max_write<dt) max_write=dt;
     556:	ldr	r2, [pc, #176]	; (608 <loop+0x130>)
     558:	ldr	r3, [r5, #0]
     55a:	ldr	r1, [r2, #0]
    uint32_t mc = getCount();
    if(mc>max_count) max_count=mc;
    //
    uint32_t to=millis();
    status = saveData(status);  
    uint32_t dt=millis()-to;
     55c:	.word	0x80201b9b
    if(max_write<dt) max_write=dt;
     560:	cmp	r3, r1
     562:	it	hi
     564:	strhi	r3, [r2, #0]
  }

  static uint32_t t0;
  if(millis()-t0>1000)
     566:	ldr	r2, [pc, #164]	; (60c <loop+0x134>)
     568:	.word	0x6811682b
     56c:	mov	r6, r2
     56e:	subs	r3, r3, r1
     570:	cmp.w	r3, #1000	; 0x3e8
     574:	bls.n	5f4 <loop+0x11c>
  {
    if(status>=CLOSED)
     576:	ldrsh.w	r3, [r4]
     57a:	ldr	r7, [pc, #136]	; (604 <loop+0x12c>)
     57c:	cmp	r3, #0
     57e:	.short	0x4c22
     580:	ldr.w	r9, [pc, #156]	; 620 <loop+0x148>
     584:	ldr.w	r8, [pc, #156]	; 624 <loop+0x14c>
     588:	.word	0x4921db2b
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     58c:	ldr	r0, [pc, #132]	; (614 <loop+0x13c>)
     58e:	.short	0xf7ff
     590:	vqrdmlah.s32	d4, d9, d9
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     594:	ldr	r0, [pc, #124]	; (614 <loop+0x13c>)
     596:	ldrsh.w	r1, [r3]
     59a:	bl	a204 <Print::print(long)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     59e:	ldr	r1, [pc, #120]	; (618 <loop+0x140>)
     5a0:	ldr	r0, [pc, #112]	; (614 <loop+0x13c>)
     5a2:	.short	0xf7ff
     5a4:	vceq.i16	<illegal reg q7.5>, <illegal reg q15.5>, <illegal reg q4.5>
    {
      Serial.print("\nLoop: ");
        Serial.print(status); Serial.print(" : "); 
        Serial.print(acq_count); Serial.print(" ");
     5a8:	asrs	r0, r0, #32
     5aa:	ldr	r0, [pc, #104]	; (614 <loop+0x13c>)
     5ac:	bl	400 <Print::print(unsigned long)>
     5b0:	.word	0x4818491a
     5b4:	bl	3e4 <Print::write(char const*)>
        Serial.print(acq_miss); Serial.print(" ");
     5b8:	.word	0x1000f8d8
     5bc:	ldr	r0, [pc, #84]	; (614 <loop+0x13c>)
     5be:	bl	400 <Print::print(unsigned long)>
     5c2:	.short	0x4916
     5c4:	ldr	r0, [pc, #76]	; (614 <loop+0x13c>)
     5c6:	.short	0xf7ff
     5c8:	vceq.i8	d6, d13, d25
        Serial.print(max_count); Serial.print(" ");
     5cc:	ldr	r0, [pc, #68]	; (614 <loop+0x13c>)
     5ce:	bl	400 <Print::print(unsigned long)>
     5d2:	ldr	r1, [pc, #72]	; (61c <loop+0x144>)
     5d4:	ldr	r0, [pc, #60]	; (614 <loop+0x13c>)
     5d6:	bl	3e4 <Print::write(char const*)>
        Serial.print(max_write);
     5da:	ldr	r1, [r4, #0]
     5dc:	ldr	r0, [pc, #52]	; (614 <loop+0x13c>)
     5de:	bl	400 <Print::print(unsigned long)>
    }
    acq_count=0;
     5e2:	movs	r3, #0
     5e4:	str.w	r3, [r9]
    acq_miss=0;
    max_count=0;
     5e8:	str	r3, [r7, #0]
        Serial.print(acq_miss); Serial.print(" ");
        Serial.print(max_count); Serial.print(" ");
        Serial.print(max_write);
    }
    acq_count=0;
    acq_miss=0;
     5ea:	str.w	r3, [r8]
    max_count=0;
    max_write=0;
     5ee:	.short	0x6023
     5f0:	ldr	r3, [r5, #0]
    t0=millis();
     5f2:	.short	0x6033
     5f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5f8:	strb	r0, [r4, #12]
     5fa:	.short	0x2003
     5fc:	adds	r4, r4, #7
     5fe:	movs	r0, #0
     600:	.word	0x20037314
     604:	ldr	r4, [r1, #96]	; 0x60
     606:	.short	0x2003
     608:	ldr	r0, [r2, #96]	; 0x60
     60a:	.short	0x2003
     60c:	subs	r5, #148	; 0x94
     60e:	.short	0x2000
     610:	lsrs	r6, r7, #26
     612:	.short	0x2000
     614:	asrs	r4, r0, #28
     616:	movs	r0, #0
     618:	lsrs	r6, r0, #27
     61a:	movs	r0, #0
     61c:	lsrs	r4, r6, #25
     61e:	movs	r0, #0
     620:	subs	r5, #208	; 0xd0
     622:	.short	0x2000
     624:	subs	r5, #212	; 0xd4
     626:	.short	0x2000

00000628 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     628:	movs	r0, #0
     62a:	.short	0x4770

0000062c <Print::flush()>:
	virtual void flush()				{ }
     62c:	bx	lr

0000062e <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}

	// override print version
	virtual size_t write(const uint8_t *buf, size_t size) {
		return (f) ? f->write((void*)buf, size) : 0;
     62e:	.short	0x6900
     630:	cbz	r0, 638 <File::write(unsigned char const*, unsigned int)+0xa>
     632:	ldr	r3, [r0, #0]
     634:	ldr	r3, [r3, #12]
     636:	bx	r3
	}
     638:	bx	lr

0000063a <File::available()>:

	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	int available() {
		return (f) ? f->available() : 0;
     63a:	.short	0x6900
     63c:	cbz	r0, 644 <File::available()+0xa>
     63e:	.short	0x6803
     640:	ldr	r3, [r3, #16]
     642:	.short	0x4718
	}
     644:	bx	lr

00000646 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     646:	.short	0x6900
     648:	cbz	r0, 650 <File::peek()+0xa>
     64a:	.short	0x6803
     64c:	ldr	r3, [r3, #20]
     64e:	.short	0x4718
	}
     650:	mov.w	r0, #4294967295
     654:	Address 0x00000654 is out of bounds.


00000656 <File::flush()>:
	void flush() {
		if (f) f->flush();
     656:	ldr	r0, [r0, #16]
     658:	.word	0x6803b110
     65c:	ldr	r3, [r3, #24]
     65e:	.short	0x4718
     660:	bx	lr

00000662 <File::read()>:
		return (f) ? f->setModifyTime(tm) : false;
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     662:	.short	0xb507
		if (!f) return -1;
     664:	ldr	r0, [r0, #16]
     666:	.short	0xb910
     668:	mov.w	r0, #4294967295
     66c:	.word	0x6803e009
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     670:	movs	r2, #1
     672:	.short	0xf10d
     674:	lsls	r7, r0, #4
     676:	ldr	r3, [r3, #8]
     678:	blx	r3
     67a:	cmp	r0, #0
     67c:	beq.n	668 <File::read()+0x6>
		return b;
     67e:	ldrb.w	r0, [sp, #7]
	}
     682:	.short	0xb003
     684:	ldr.w	pc, [sp], #4

00000688 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     688:	.word	0x6900b507
     68c:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     690:	cbz	r0, 69e <File::write(unsigned char)+0x16>
     692:	.short	0x6803
     694:	movs	r2, #1
     696:	.short	0xf10d
     698:	lsls	r7, r0, #4
     69a:	.short	0x68db
     69c:	blx	r3
	}
     69e:	add	sp, #12
     6a0:	ldr.w	pc, [sp], #4

000006a4 <SDFile::getCreateTime(DateTimeFields&)>:
		return File();
	}
	virtual void rewindDirectory(void) {
		sdfatfile.rewindDirectory();
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
     6a4:	push	{r0, r1, r4, lr}
     6a6:	.short	0x4603
   * \param[out] ptime Packed time for directory entry.
   *
   * \return true for success or false for failure.
   */
  bool getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     6a8:	ldr	r0, [r0, #80]	; 0x50
     6aa:	mov	r4, r1
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     6ac:	cbz	r0, 6ba <SDFile::getCreateTime(DateTimeFields&)+0x16>
     6ae:	add.w	r2, sp, #6
     6b2:	add	r1, sp, #4
     6b4:	.word	0xfaebf005
     6b8:	b.n	6cc <SDFile::getCreateTime(DateTimeFields&)+0x28>
     6ba:	.short	0x6d58
     6bc:	cbnz	r0, 6c2 <SDFile::getCreateTime(DateTimeFields&)+0x1e>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     6be:	.short	0x2000
     6c0:	b.n	706 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     6c2:	.short	0xf10d
     6c4:	lsls	r6, r0, #8
     6c6:	.short	0xa901
     6c8:	bl	399a <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     6cc:	.word	0xd0f62800
		if ((fat_date == 0) && (fat_time == 0)) return false;
     6d0:	ldrh.w	r3, [sp, #4]
     6d4:	.word	0x2006f8bd
     6d8:	cbnz	r3, 6de <SDFile::getCreateTime(DateTimeFields&)+0x3a>
     6da:	.short	0x2a00
     6dc:	beq.n	6be <SDFile::getCreateTime(DateTimeFields&)+0x1a>
		tm.sec = FS_SECOND(fat_time);
     6de:	.short	0xf002
     6e0:	lsls	r7, r3, #4
     6e2:	.short	0x0049
     6e4:	strb	r1, [r4, #0]
		tm.min = FS_MINUTE(fat_time);
     6e6:	.short	0xf3c2
     6e8:	asrs	r5, r0, #5
		tm.hour = FS_HOUR(fat_time);
     6ea:	.short	0x12d2
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
     6ec:	strb	r1, [r4, #1]
		tm.hour = FS_HOUR(fat_time);
     6ee:	.short	0x70a2
		tm.mday = FS_DAY(fat_date);
     6f0:	and.w	r2, r3, #31
     6f4:	strb	r2, [r4, #4]
		tm.mon = FS_MONTH(fat_date) - 1;
     6f6:	ubfx	r2, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
     6fa:	asrs	r3, r3, #9
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     6fc:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
     6fe:	add.w	r3, r3, #1872	; 0x750
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     702:	strb	r2, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
     704:	strb	r3, [r4, #6]
		return true;
	}
     706:	add	sp, #8
     708:	pop	{r4, pc}

0000070a <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     70a:	push	{r0, r1, r4, lr}
     70c:	mov	r3, r0
   * \param[out] ptime Packed time for directory entry.
   *
   * \return true for success or false for failure.
   */
  bool getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     70e:	ldr	r0, [r0, #80]	; 0x50
     710:	mov	r4, r1
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     712:	cbz	r0, 720 <SDFile::getModifyTime(DateTimeFields&)+0x16>
     714:	add.w	r2, sp, #6
     718:	add	r1, sp, #4
     71a:	bl	5cae <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     71e:	b.n	732 <SDFile::getModifyTime(DateTimeFields&)+0x28>
     720:	ldr	r0, [r3, #84]	; 0x54
     722:	cbnz	r0, 728 <SDFile::getModifyTime(DateTimeFields&)+0x1e>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     724:	movs	r0, #0
     726:	.short	0xe021
     728:	add.w	r2, sp, #6
     72c:	add	r1, sp, #4
     72e:	bl	39ba <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     732:	cmp	r0, #0
     734:	beq.n	724 <SDFile::getModifyTime(DateTimeFields&)+0x1a>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     736:	ldrh.w	r3, [sp, #4]
     73a:	ldrh.w	r2, [sp, #6]
     73e:	cbnz	r3, 744 <SDFile::getModifyTime(DateTimeFields&)+0x3a>
     740:	cmp	r2, #0
     742:	beq.n	724 <SDFile::getModifyTime(DateTimeFields&)+0x1a>
		tm.sec = FS_SECOND(fat_time);
     744:	and.w	r1, r2, #31
     748:	lsls	r1, r1, #1
     74a:	.short	0x7021
		tm.min = FS_MINUTE(fat_time);
     74c:	ubfx	r1, r2, #5, #6
		tm.hour = FS_HOUR(fat_time);
     750:	asrs	r2, r2, #11
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
     752:	strb	r1, [r4, #1]
		tm.hour = FS_HOUR(fat_time);
     754:	.word	0xf00370a2
		tm.mday = FS_DAY(fat_date);
     758:	lsls	r7, r3, #8
     75a:	strb	r2, [r4, #4]
		tm.mon = FS_MONTH(fat_date) - 1;
     75c:	ubfx	r2, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
     760:	asrs	r3, r3, #9
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     762:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
     764:	add.w	r3, r3, #1872	; 0x750
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
     768:	strb	r2, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
     76a:	strb	r3, [r4, #6]
		return true;
	}
     76c:	add	sp, #8
     76e:	pop	{r4, pc}

00000770 <SDFile::name()>:
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     770:	push	{r3, r4, r5, lr}
		if (!filename) {
     772:	ldr	r5, [r0, #88]	; 0x58
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     774:	mov	r4, r0
		if (!filename) {
     776:	cbnz	r5, 7a8 <SDFile::name()+0x38>
			filename = (char *)malloc(MAX_FILENAME_LEN);
     778:	mov.w	r0, #256	; 0x100
     77c:	bl	a6fc <malloc>
     780:	mov	r1, r0
     782:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     784:	cbz	r0, 7a4 <SDFile::name()+0x34>
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     786:	strb	r5, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     788:	ldr	r0, [r4, #80]	; 0x50
           m_xFile ? m_xFile->getName(name, len) : 0;
     78a:	cbz	r0, 796 <SDFile::name()+0x26>
     78c:	mov.w	r2, #256	; 0x100
     790:	bl	5580 <FatFile::getName(char*, unsigned int)>
     794:	b.n	7a8 <SDFile::name()+0x38>
     796:	ldr	r0, [r4, #84]	; 0x54
     798:	cbz	r0, 7a8 <SDFile::name()+0x38>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     79a:	mov.w	r2, #256	; 0x100
     79e:	bl	383c <ExFatFile::getName8(char*, unsigned int)>
     7a2:	b.n	7a8 <SDFile::name()+0x38>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     7a4:	ldr	r3, [pc, #4]	; (7ac <SDFile::name()+0x3c>)
     7a6:	str	r3, [r4, #88]	; 0x58
			}
		}
		return filename;
	}
     7a8:	ldr	r0, [r4, #88]	; 0x58
     7aa:	pop	{r3, r4, r5, pc}
     7ac:	.word	0x20037632

000007b0 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     7b0:	push	{r4, r6, r7, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     7b2:	ldr	r4, [r0, #80]	; 0x50
           m_xFile ? m_xFile->truncate(length) : false;
     7b4:	cbz	r4, 7d2 <SDFile::truncate(unsigned long long)+0x22>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     7b6:	cmp	r3, #1
     7b8:	it	eq
     7ba:	cmpeq	r2, #0
     7bc:	bcs.n	7e8 <SDFile::truncate(unsigned long long)+0x38>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     7be:	mov	r1, r2
     7c0:	mov	r0, r4
     7c2:	bl	58be <FatFile::seekSet(unsigned long)>
     7c6:	cbz	r0, 7e8 <SDFile::truncate(unsigned long long)+0x38>
     7c8:	mov	r0, r4
     7ca:	bl	60c8 <FatFile::truncate()>
     7ce:	cbz	r0, 7e8 <SDFile::truncate(unsigned long long)+0x38>
     7d0:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     7d2:	ldr	r4, [r0, #84]	; 0x54
     7d4:	cbz	r4, 7e8 <SDFile::truncate(unsigned long long)+0x38>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     7d6:	mov	r0, r4
     7d8:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
     7dc:	cbz	r0, 7e8 <SDFile::truncate(unsigned long long)+0x38>
     7de:	mov	r0, r4
		return sdfatfile.truncate(size);
	}
     7e0:	ldmia.w	sp!, {r4, r6, r7, lr}
     7e4:	b.w	4c24 <ExFatFile::truncate()>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     7e8:	movs	r0, #0
     7ea:	pop	{r4, r6, r7, pc}

000007ec <File::dec_refcount() [clone .isra.15]>:
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
     7ec:	push	{r4, lr}
     7ee:	mov	r4, r0
		if (--(f->refcount) == 0) {
     7f0:	ldr	r0, [r0, #0]
     7f2:	ldr	r3, [r0, #4]
     7f4:	subs	r3, #1
     7f6:	str	r3, [r0, #4]
     7f8:	cbnz	r3, 80a <File::dec_refcount() [clone .isra.15]+0x1e>
			f->close();
     7fa:	ldr	r3, [r0, #0]
     7fc:	ldr	r3, [r3, #44]	; 0x2c
     7fe:	blx	r3
			delete f;
     800:	ldr	r0, [r4, #0]
     802:	cbz	r0, 80a <File::dec_refcount() [clone .isra.15]+0x1e>
     804:	ldr	r3, [r0, #0]
     806:	ldr	r3, [r3, #4]
     808:	blx	r3
		}
		f = nullptr;
     80a:	movs	r3, #0
     80c:	str	r3, [r4, #0]
     80e:	pop	{r4, pc}

00000810 <File::~File()>:
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
		f = file.f;
		return *this;
	}
#endif
	virtual ~File() {
     810:	ldr	r3, [pc, #20]	; (828 <File::~File()+0x18>)
     812:	push	{r4, lr}
     814:	str	r3, [r0, #0]
     816:	mov	r4, r0
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
     818:	ldr	r3, [r0, #16]
     81a:	cbz	r3, 822 <File::~File()+0x12>
     81c:	adds	r0, #16
     81e:	bl	7ec <File::dec_refcount() [clone .isra.15]>
	}
     822:	mov	r0, r4
     824:	pop	{r4, pc}
     826:	nop
     828:	.word	0x20000464

0000082c <File::~File()>:
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
		f = file.f;
		return *this;
	}
#endif
	virtual ~File() {
     82c:	push	{r4, lr}
     82e:	mov	r4, r0
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
     830:	bl	810 <File::~File()>
     834:	movs	r1, #20
     836:	mov	r0, r4
     838:	bl	a2c2 <operator delete(void*, unsigned int)>
     83c:	mov	r0, r4
     83e:	pop	{r4, pc}

00000840 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     840:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->curPosition() : 0;
     842:	cbz	r3, 84a <SDFile::position()+0xa>
     844:	ldr	r0, [r3, #20]
     846:	movs	r1, #0
     848:	bx	lr
     84a:	ldr	r3, [r0, #84]	; 0x54
     84c:	cbz	r3, 854 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     84e:	ldmia.w	r3, {r0, r1}
     852:	bx	lr
     854:	mov	r0, r3
     856:	b.n	846 <SDFile::position()+0x6>

00000858 <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     858:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->fileSize() : 0;
     85a:	cbz	r3, 862 <SDFile::size()+0xa>
     85c:	ldr	r0, [r3, #28]
     85e:	movs	r1, #0
     860:	bx	lr
     862:	ldr	r3, [r0, #84]	; 0x54
     864:	cbz	r3, 86c <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     866:	ldr	r0, [r3, #16]
     868:	ldr	r1, [r3, #20]
     86a:	bx	lr
     86c:	mov	r0, r3
     86e:	b.n	85e <SDFile::size()+0x6>

00000870 <FsBaseFile::available() const>:
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
     870:	ldr	r2, [r0, #56]	; 0x38
    */
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
     872:	push	{r4, r5, lr}
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     874:	cbz	r2, 890 <FsBaseFile::available() const+0x20>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     876:	ldrb	r3, [r2, #0]
     878:	and.w	r3, r3, #8
     87c:	and.w	r0, r3, #255	; 0xff
     880:	cbz	r3, 8c2 <FsBaseFile::available() const+0x52>
     882:	ldr	r3, [r2, #28]
     884:	ldr	r0, [r2, #20]
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     886:	subs	r0, r3, r0
     888:	bpl.n	8c2 <FsBaseFile::available() const+0x52>
     88a:	mvn.w	r0, #2147483648	; 0x80000000
     88e:	b.n	8c2 <FsBaseFile::available() const+0x52>
     890:	ldr	r0, [r0, #60]	; 0x3c
     892:	cbz	r0, 8c2 <FsBaseFile::available() const+0x52>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     894:	ldrb.w	r3, [r0, #49]	; 0x31
     898:	lsls	r3, r3, #28
     89a:	bpl.n	8ac <FsBaseFile::available() const+0x3c>
     89c:	ldrd	r4, r5, [r0, #16]
     8a0:	ldrd	r2, r3, [r0]
     8a4:	subs	r0, r4, r2
     8a6:	sbc.w	r1, r5, r3
     8aa:	b.n	8b0 <FsBaseFile::available() const+0x40>
     8ac:	movs	r0, #0
     8ae:	movs	r1, #0
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint64_t n = available64();
    return n > INT_MAX ? INT_MAX : n;
     8b0:	movs	r3, #0
     8b2:	mvn.w	r2, #2147483648	; 0x80000000
     8b6:	cmp	r3, r1
     8b8:	it	eq
     8ba:	cmpeq	r2, r0
     8bc:	bcs.n	8c2 <FsBaseFile::available() const+0x52>
     8be:	mov	r0, r2
     8c0:	pop	{r4, r5, pc}
  }
     8c2:	pop	{r4, r5, pc}

000008c4 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     8c4:	push	{r3, lr}
    return BaseFile::available();
     8c6:	adds	r0, #16
     8c8:	bl	870 <FsBaseFile::available() const>
  }
     8cc:	pop	{r3, pc}

000008ce <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     8ce:	push	{r3, lr}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return BaseFile::available();
     8d0:	adds	r0, #24
     8d2:	bl	870 <FsBaseFile::available() const>
		return sdfatfile.available();
	}
     8d6:	pop	{r3, pc}

000008d8 <FsBaseFile::isDir() const>:
    return m_xFile ? m_xFile->isContiguous() : false;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
     8d8:	ldr	r3, [r0, #56]	; 0x38
           m_xFile ? m_xFile->isDir() : false;
     8da:	cbz	r3, 8e4 <FsBaseFile::isDir() const+0xc>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     8dc:	ldrb	r3, [r3, #0]
     8de:	tst.w	r3, #112	; 0x70
     8e2:	b.n	8f0 <FsBaseFile::isDir() const+0x18>
     8e4:	ldr	r0, [r0, #60]	; 0x3c
     8e6:	cbz	r0, 8f6 <FsBaseFile::isDir() const+0x1e>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     8e8:	ldrb.w	r3, [r0, #49]	; 0x31
     8ec:	tst.w	r3, #80	; 0x50
     8f0:	ite	ne
     8f2:	movne	r0, #1
     8f4:	moveq	r0, #0
  }
     8f6:	bx	lr

000008f8 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     8f8:	push	{r3, lr}
  }
  /** This function reports if the current file is a directory or not.
  * \return true if the file is a directory.
  */
  bool isDirectory() {
    return BaseFile::isDir();
     8fa:	adds	r0, #24
     8fc:	bl	8d8 <FsBaseFile::isDir() const>
		return sdfatfile.isDirectory();
	}
     900:	pop	{r3, pc}

00000902 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     902:	push	{r4, lr}
     904:	mov	r4, r0
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     906:	adds	r0, #24
     908:	bl	8d8 <FsBaseFile::isDir() const>
     90c:	cbz	r0, 928 <SDFile::rewindDirectory()+0x26>
    return m_fFile ? m_fFile->rename(dirFile->m_fFile, newPath) :
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
     90e:	ldr	r0, [r4, #80]	; 0x50
     910:	cbz	r0, 918 <SDFile::rewindDirectory()+0x16>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     912:	movs	r1, #0
     914:	bl	58be <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     918:	ldr	r0, [r4, #84]	; 0x54
     91a:	cbz	r0, 928 <SDFile::rewindDirectory()+0x26>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     91c:	movs	r2, #0
     91e:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     920:	ldmia.w	sp!, {r4, lr}
     924:	b.w	3c2a <ExFatFile::seekSet(unsigned long long)>
     928:	pop	{r4, pc}

0000092a <FsBaseFile::isOpen() const>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     92a:	ldr	r3, [r0, #56]	; 0x38
     92c:	cbnz	r3, 938 <FsBaseFile::isOpen() const+0xe>
     92e:	ldr	r0, [r0, #60]	; 0x3c
     930:	adds	r0, #0
     932:	it	ne
     934:	movne	r0, #1
     936:	bx	lr
     938:	movs	r0, #1
     93a:	bx	lr

0000093c <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     93c:	push	{r4, lr}
     93e:	mov	r4, r0
		if (filename) {
     940:	ldr	r0, [r0, #88]	; 0x58
     942:	cbz	r0, 94c <SDFile::close()+0x10>
			free(filename);
     944:	bl	a70c <free>
			filename = nullptr;
     948:	movs	r3, #0
     94a:	str	r3, [r4, #88]	; 0x58
		}
		if (sdfatfile.isOpen()) {
     94c:	adds	r4, #24
     94e:	mov	r0, r4
     950:	bl	92a <FsBaseFile::isOpen() const>
     954:	cbz	r0, 960 <SDFile::close()+0x24>
			sdfatfile.close();
     956:	mov	r0, r4
		}
	}
     958:	ldmia.w	sp!, {r4, lr}
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
     95c:	b.w	6de4 <FsBaseFile::close()>
     960:	pop	{r4, pc}
	...

00000964 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     964:	ldr	r3, [pc, #24]	; (980 <SDFile::~SDFile()+0x1c>)
     966:	push	{r4, lr}
     968:	str	r3, [r0, #0]
     96a:	mov	r4, r0
		close();
     96c:	bl	93c <SDFile::close()>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     970:	ldr	r3, [pc, #16]	; (984 <SDFile::~SDFile()+0x20>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     972:	add.w	r0, r4, #24
     976:	str	r3, [r4, #8]
     978:	bl	6de4 <FsBaseFile::close()>
	}
     97c:	mov	r0, r4
     97e:	pop	{r4, pc}
     980:	.word	0x200004b4
     984:	.word	0x20000418

00000988 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     988:	push	{r4, lr}
     98a:	mov	r4, r0
		close();
	}
     98c:	bl	964 <SDFile::~SDFile()>
     990:	movs	r1, #92	; 0x5c
     992:	mov	r0, r4
     994:	bl	a2c2 <operator delete(void*, unsigned int)>
     998:	mov	r0, r4
     99a:	pop	{r4, pc}

0000099c <SDFile::isOpen()>:
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
     99c:	push	{r3, lr}
		return sdfatfile.isOpen();
     99e:	adds	r0, #24
     9a0:	bl	92a <FsBaseFile::isOpen() const>
	}
     9a4:	pop	{r3, pc}

000009a6 <FsBaseFile::peek()>:
  uint64_t position() const {return curPosition();}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     9a6:	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     9a8:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->peek() : -1;
     9aa:	cbz	r0, 9b0 <FsBaseFile::peek()+0xa>
     9ac:	b.w	585e <FatFile::peek()>
     9b0:	ldr	r0, [r3, #60]	; 0x3c
     9b2:	cbz	r0, 9b8 <FsBaseFile::peek()+0x12>
     9b4:	b.w	3c00 <ExFatFile::peek()>
  }
     9b8:	mov.w	r0, #4294967295
     9bc:	bx	lr

000009be <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     9be:	push	{r3, lr}
    return BaseFile::peek();
     9c0:	adds	r0, #16
     9c2:	bl	9a6 <FsBaseFile::peek()>
  }
     9c6:	pop	{r3, pc}

000009c8 <SDFile::peek()>:
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     9c8:	push	{r3, lr}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return BaseFile::peek();
     9ca:	adds	r0, #24
     9cc:	bl	9a6 <FsBaseFile::peek()>
		return sdfatfile.peek();
	}
     9d0:	pop	{r3, pc}

000009d2 <FsBaseFile::read(void*, unsigned int)>:
   * if end of file is reached.
   * If an error occurs, read() returns -1.  Possible errors include
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
     9d2:	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     9d4:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->read(buf, count) : -1;
     9d6:	cbz	r0, 9dc <FsBaseFile::read(void*, unsigned int)+0xa>
     9d8:	b.w	56e8 <FatFile::read(void*, unsigned int)>
     9dc:	ldr	r0, [r3, #60]	; 0x3c
     9de:	cbz	r0, 9e4 <FsBaseFile::read(void*, unsigned int)+0x12>
     9e0:	b.w	3a7c <ExFatFile::read(void*, unsigned int)>
  }
     9e4:	mov.w	r0, #4294967295
     9e8:	bx	lr

000009ea <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     9ea:	push	{r0, r1, r2, lr}
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     9ec:	movs	r2, #1
     9ee:	add.w	r1, sp, #7
     9f2:	adds	r0, #16
     9f4:	bl	9d2 <FsBaseFile::read(void*, unsigned int)>
     9f8:	cmp	r0, #1
     9fa:	ite	eq
     9fc:	ldrbeq.w	r0, [sp, #7]
     a00:	movne.w	r0, #4294967295
    return BaseFile::read();
  }
     a04:	add	sp, #12
     a06:	ldr.w	pc, [sp], #4

00000a0a <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     a0a:	push	{r3, lr}
		return sdfatfile.read(buf, nbyte);
     a0c:	adds	r0, #24
     a0e:	bl	9d2 <FsBaseFile::read(void*, unsigned int)>
	}
     a12:	pop	{r3, pc}

00000a14 <FsBaseFile::seekSet(unsigned long long)>:
   *
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
     a14:	push	{r4, r6, r7}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a16:	ldr	r4, [r0, #56]	; 0x38
           m_xFile ? m_xFile->seekSet(pos) : false;
     a18:	cbz	r4, a2c <FsBaseFile::seekSet(unsigned long long)+0x18>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a1a:	cmp	r3, #1
     a1c:	it	eq
     a1e:	cmpeq	r2, #0
     a20:	bcs.n	a36 <FsBaseFile::seekSet(unsigned long long)+0x22>
     a22:	mov	r0, r4
     a24:	mov	r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
  }
     a26:	pop	{r4, r6, r7}
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a28:	b.w	58be <FatFile::seekSet(unsigned long)>
           m_xFile ? m_xFile->seekSet(pos) : false;
     a2c:	ldr	r0, [r0, #60]	; 0x3c
     a2e:	cbz	r0, a36 <FsBaseFile::seekSet(unsigned long long)+0x22>
  }
     a30:	pop	{r4, r6, r7}
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a32:	b.w	3c2a <ExFatFile::seekSet(unsigned long long)>
  }
     a36:	movs	r0, #0
     a38:	pop	{r4, r6, r7}
     a3a:	bx	lr

00000a3c <SDFile::seek(unsigned long long, int)>:
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     a3c:	push	{r3, r4, r5, lr}
     a3e:	mov	r1, r0
     a40:	ldr	r0, [sp, #16]
     a42:	mov	r4, r2
     a44:	mov	r5, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     a46:	cbnz	r0, a4e <SDFile::seek(unsigned long long, int)+0x12>
     a48:	add.w	r0, r1, #24
     a4c:	b.n	a8a <SDFile::seek(unsigned long long, int)+0x4e>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     a4e:	cmp	r0, #1
     a50:	bne.n	a68 <SDFile::seek(unsigned long long, int)+0x2c>
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     a52:	ldr	r3, [r1, #80]	; 0x50
     a54:	add.w	r0, r1, #24
           m_xFile ? m_xFile->curPosition() : 0;
     a58:	cbz	r3, a5e <SDFile::seek(unsigned long long, int)+0x22>
     a5a:	ldr	r2, [r3, #20]
     a5c:	b.n	a84 <SDFile::seek(unsigned long long, int)+0x48>
     a5e:	ldr	r3, [r1, #84]	; 0x54
     a60:	cbz	r3, a82 <SDFile::seek(unsigned long long, int)+0x46>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     a62:	ldrd	r2, r3, [r3]
     a66:	b.n	a86 <SDFile::seek(unsigned long long, int)+0x4a>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     a68:	cmp	r0, #2
     a6a:	bne.n	a90 <SDFile::seek(unsigned long long, int)+0x54>
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     a6c:	ldr	r3, [r1, #80]	; 0x50
     a6e:	add.w	r0, r1, #24
           m_xFile ? m_xFile->fileSize() : 0;
     a72:	cbz	r3, a78 <SDFile::seek(unsigned long long, int)+0x3c>
     a74:	ldr	r2, [r3, #28]
     a76:	b.n	a84 <SDFile::seek(unsigned long long, int)+0x48>
     a78:	ldr	r3, [r1, #84]	; 0x54
     a7a:	cbz	r3, a82 <SDFile::seek(unsigned long long, int)+0x46>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     a7c:	ldrd	r2, r3, [r3, #16]
     a80:	b.n	a86 <SDFile::seek(unsigned long long, int)+0x4a>
     a82:	movs	r2, #0
     a84:	movs	r3, #0
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     a86:	adds	r2, r2, r4
     a88:	adcs	r3, r5
     a8a:	bl	a14 <FsBaseFile::seekSet(unsigned long long)>
     a8e:	pop	{r3, r4, r5, pc}
		return false;
     a90:	movs	r0, #0
	}
     a92:	pop	{r3, r4, r5, pc}

00000a94 <FsBaseFile::sync()>:
  /** The sync() call causes all modified data and directory fields
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
     a94:	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     a96:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->sync() : false;
     a98:	cbz	r0, a9e <FsBaseFile::sync()+0xa>
     a9a:	b.w	5b14 <FatFile::sync()>
     a9e:	ldr	r0, [r3, #60]	; 0x3c
     aa0:	cbz	r0, aa6 <FsBaseFile::sync()+0x12>
     aa2:	b.w	4844 <ExFatFile::sync()>
  }
     aa6:	bx	lr

00000aa8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     aa8:	push	{r3, lr}
    BaseFile::sync();
     aaa:	adds	r0, #16
     aac:	bl	a94 <FsBaseFile::sync()>
     ab0:	pop	{r3, pc}

00000ab2 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     ab2:	push	{r3, lr}
     ab4:	adds	r0, #24
     ab6:	bl	a94 <FsBaseFile::sync()>
     aba:	pop	{r3, pc}

00000abc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
   * Modify and access timestamps may be overwritten if a date time callback
   * function has been set by dateTimeCallback().
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
     abc:	push	{r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     abe:	ldr.w	lr, [r0, #56]	; 0x38
   * Modify and access timestamps may be overwritten if a date time callback
   * function has been set by dateTimeCallback().
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
     ac2:	ldrb.w	r4, [sp, #20]
     ac6:	ldrb.w	r5, [sp, #24]
     aca:	ldrb.w	r6, [sp, #28]
     ace:	ldrb.w	r7, [sp, #32]
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     ad2:	cmp.w	lr, #0
     ad6:	beq.n	aea <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2e>
     ad8:	str	r7, [sp, #32]
     ada:	mov	r0, lr
     adc:	str	r6, [sp, #28]
     ade:	str	r5, [sp, #24]
     ae0:	str	r4, [sp, #20]
  }
     ae2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     ae6:	b.w	601a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
     aea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     aec:	cbz	r0, afe <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
     aee:	str	r7, [sp, #32]
     af0:	str	r6, [sp, #28]
     af2:	str	r5, [sp, #24]
     af4:	str	r4, [sp, #20]
  }
     af6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
     afa:	b.w	4b10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
  }
     afe:	pop	{r4, r5, r6, r7, pc}

00000b00 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
     b00:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
     b02:	ldrb	r2, [r1, #6]
     b04:	sub.w	r3, r2, #80	; 0x50
     b08:	lsls	r3, r3, #24
     b0a:	bmi.n	b30 <SDFile::setModifyTime(DateTimeFields const&)+0x30>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
     b0c:	ldrb	r4, [r1, #0]
     b0e:	addw	r2, r2, #1900	; 0x76c
     b12:	ldrb	r3, [r1, #5]
     b14:	adds	r0, #24
     b16:	str	r4, [sp, #12]
     b18:	ldrb	r4, [r1, #1]
     b1a:	adds	r3, #1
     b1c:	str	r4, [sp, #8]
     b1e:	uxtb	r3, r3
     b20:	ldrb	r4, [r1, #2]
     b22:	str	r4, [sp, #4]
     b24:	ldrb	r1, [r1, #4]
     b26:	str	r1, [sp, #0]
     b28:	movs	r1, #4
     b2a:	bl	abc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     b2e:	b.n	b32 <SDFile::setModifyTime(DateTimeFields const&)+0x32>
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     b30:	movs	r0, #0
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
     b32:	add	sp, #16
     b34:	pop	{r4, pc}

00000b36 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
     b36:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
     b38:	ldrb	r2, [r1, #6]
     b3a:	sub.w	r3, r2, #80	; 0x50
     b3e:	lsls	r3, r3, #24
     b40:	bmi.n	b66 <SDFile::setCreateTime(DateTimeFields const&)+0x30>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
     b42:	ldrb	r4, [r1, #0]
     b44:	addw	r2, r2, #1900	; 0x76c
     b48:	ldrb	r3, [r1, #5]
     b4a:	adds	r0, #24
     b4c:	str	r4, [sp, #12]
     b4e:	ldrb	r4, [r1, #1]
     b50:	adds	r3, #1
     b52:	str	r4, [sp, #8]
     b54:	uxtb	r3, r3
     b56:	ldrb	r4, [r1, #2]
     b58:	str	r4, [sp, #4]
     b5a:	ldrb	r1, [r1, #4]
     b5c:	str	r1, [sp, #0]
     b5e:	movs	r1, #2
     b60:	bl	abc <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     b64:	b.n	b68 <SDFile::setCreateTime(DateTimeFields const&)+0x32>
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     b66:	movs	r0, #0
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
     b68:	add	sp, #16
     b6a:	pop	{r4, pc}

00000b6c <FsBaseFile::write(void const*, unsigned int)>:
   * \param[in] count Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
     b6c:	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     b6e:	ldr	r0, [r0, #56]	; 0x38
           m_xFile ? m_xFile->write(buf, count) : 0;
     b70:	cbz	r0, b76 <FsBaseFile::write(void const*, unsigned int)+0xa>
     b72:	b.w	6130 <FatFile::write(void const*, unsigned int)>
     b76:	ldr	r0, [r3, #60]	; 0x3c
     b78:	cbz	r0, b7e <FsBaseFile::write(void const*, unsigned int)+0x12>
     b7a:	b.w	4ce4 <ExFatFile::write(void const*, unsigned int)>
  }
     b7e:	bx	lr

00000b80 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     b80:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     b82:	adds	r0, #16
     b84:	bl	b6c <FsBaseFile::write(void const*, unsigned int)>
  }
     b88:	pop	{r3, pc}

00000b8a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     b8a:	push	{r0, r1, r2, lr}
     b8c:	add	r3, sp, #8
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {return write(&b, 1);}
     b8e:	movs	r2, #1
     b90:	adds	r0, #16
     b92:	strb.w	r1, [r3, #-1]!
     b96:	mov	r1, r3
     b98:	bl	b6c <FsBaseFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     b9c:	add	sp, #12
     b9e:	ldr.w	pc, [sp], #4

00000ba2 <SDFile::write(void const*, unsigned int)>:
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
     ba2:	push	{r3, lr}
		return sdfatfile.write(buf, size);
     ba4:	adds	r0, #24
     ba6:	bl	b6c <FsBaseFile::write(void const*, unsigned int)>
	}
     baa:	pop	{r3, pc}

00000bac <File::close()>:
		return (f) ? f->position() : 0;
	}
	uint64_t size() {
		return (f) ? f->size() : 0;
	}
	void close() {
     bac:	push	{r4, lr}
     bae:	mov	r4, r0
		if (f) {
     bb0:	ldr	r0, [r0, #16]
     bb2:	cbz	r0, bc6 <File::close()+0x1a>
			f->close();
     bb4:	ldr	r3, [r0, #0]
     bb6:	ldr	r3, [r3, #44]	; 0x2c
     bb8:	blx	r3
			dec_refcount();
     bba:	add.w	r0, r4, #16
		}
	}
     bbe:	ldmia.w	sp!, {r4, lr}
		return (f) ? f->size() : 0;
	}
	void close() {
		if (f) {
			f->close();
			dec_refcount();
     bc2:	b.w	7ec <File::dec_refcount() [clone .isra.15]>
     bc6:	pop	{r4, pc}

00000bc8 <SDFile::SDFile(FsFile const&)>:
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     bc8:	push	{r3, r4, r5, lr}
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
     bca:	movs	r5, #0
     bcc:	ldr	r3, [pc, #56]	; (c08 <SDFile::SDFile(FsFile const&)+0x40>)
     bce:	mov	r4, r0
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     bd0:	adds	r1, #16
     bd2:	str	r5, [r0, #4]
     bd4:	adds	r0, #24
     bd6:	str.w	r3, [r0, #-24]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     bda:	ldrb.w	r3, [r1, #-12]
     bde:	strb.w	r3, [r0, #-12]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     be2:	ldr	r3, [pc, #40]	; (c0c <SDFile::SDFile(FsFile const&)+0x44>)
     be4:	str.w	r3, [r0, #-16]
     be8:	ldr.w	r3, [r1, #-8]
     bec:	str.w	r3, [r0, #-8]
     bf0:	ldrb.w	r3, [r1, #-4]
     bf4:	strb.w	r3, [r0, #-4]
     bf8:	bl	6d82 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     bfc:	ldr	r3, [pc, #16]	; (c10 <SDFile::SDFile(FsFile const&)+0x48>)
     bfe:	str	r5, [r4, #88]	; 0x58
     c00:	mov	r0, r4
     c02:	str	r3, [r4, #8]
     c04:	pop	{r3, r4, r5, pc}
     c06:	nop
     c08:	.word	0x200004b4
     c0c:	.word	0x20000510
     c10:	.word	0x20000490

00000c14 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     c14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c18:	sub	sp, #84	; 0x54
{
  public:
	constexpr Print() : write_error(0) {}
     c1a:	movs	r5, #0
     c1c:	ldr	r3, [pc, #112]	; (c90 <SDFile::openNextFile(unsigned char)+0x7c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c1e:	mov.w	r6, #1000	; 0x3e8
     c22:	add.w	r8, sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     c26:	mov	r2, r5
     c28:	adds	r1, #24
     c2a:	mov	r4, r0
     c2c:	add	r0, sp, #16
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     c2e:	str.w	r3, [r8, #-80]!
     c32:	strb.w	r5, [sp, #4]
     c36:	str	r6, [sp, #8]
     c38:	strb.w	r5, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     c3c:	str	r5, [sp, #72]	; 0x48
     c3e:	str	r5, [sp, #76]	; 0x4c
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     c40:	bl	6e8a <FsBaseFile::openNext(FsBaseFile*, int)>
  FsBaseFile& operator=(const FsBaseFile& from);
  /** The parenthesis operator.
    *
    * \return true if a file is open.
    */
  operator bool() const {return isOpen();}
     c44:	add	r0, sp, #16
     c46:	ldr.w	r9, [pc, #80]	; c98 <SDFile::openNextFile(unsigned char)+0x84>
     c4a:	bl	92a <FsBaseFile::isOpen() const>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     c4e:	cbz	r0, c72 <SDFile::openNextFile(unsigned char)+0x5e>
     c50:	movs	r0, #92	; 0x5c
     c52:	bl	a2be <operator new(unsigned int)>
     c56:	mov	r7, r0
     c58:	mov	r1, r8
     c5a:	bl	bc8 <SDFile::SDFile(FsFile const&)>
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
		if (f) f->refcount++;
     c5e:	ldr	r3, [r7, #4]
     c60:	strb	r5, [r4, #4]
     c62:	adds	r3, #1
     c64:	str	r6, [r4, #8]
     c66:	strb	r5, [r4, #12]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     c68:	str.w	r9, [r4]
		f = file;
     c6c:	str	r7, [r4, #16]
		if (f) f->refcount++;
     c6e:	str	r3, [r7, #4]
     c70:	b.n	c7e <SDFile::openNextFile(unsigned char)+0x6a>
     c72:	strb	r0, [r4, #4]
     c74:	str	r6, [r4, #8]
     c76:	strb	r0, [r4, #12]
//
class File final : public Stream {
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
     c78:	str.w	r9, [r4]
     c7c:	str	r0, [r4, #16]
     c7e:	ldr	r3, [pc, #20]	; (c94 <SDFile::openNextFile(unsigned char)+0x80>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     c80:	add	r0, sp, #16
     c82:	str	r3, [sp, #0]
     c84:	bl	6de4 <FsBaseFile::close()>
		return File();
	}
     c88:	mov	r0, r4
     c8a:	add	sp, #84	; 0x54
     c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c90:	.word	0x20000490
     c94:	.word	0x20000418
     c98:	.word	0x20000464

00000c9c <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     c9c:	cmp	r3, #1
class SDClass : public FS
{
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     c9e:	push	{r4, r5, r6, lr}
     ca0:	mov	r4, r0
     ca2:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     ca4:	beq.n	cb2 <SDClass::open(char const*, unsigned char)+0x16>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     ca6:	cmp	r3, #2
     ca8:	movw	r3, #514	; 0x202
     cac:	it	ne
     cae:	movne	r3, #0
     cb0:	b.n	cb6 <SDClass::open(char const*, unsigned char)+0x1a>
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cb2:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cb6:	adds	r1, #4
     cb8:	mov	r0, sp
     cba:	bl	6fa4 <FsVolume::open(char const*, int)>
  FsBaseFile& operator=(const FsBaseFile& from);
  /** The parenthesis operator.
    *
    * \return true if a file is open.
    */
  operator bool() const {return isOpen();}
     cbe:	add	r0, sp, #16
     cc0:	bl	92a <FsBaseFile::isOpen() const>
     cc4:	ldr	r6, [pc, #68]	; (d0c <SDClass::open(char const*, unsigned char)+0x70>)
		if (file) return File(new SDFile(file));
     cc6:	cbz	r0, cee <SDClass::open(char const*, unsigned char)+0x52>
     cc8:	movs	r0, #92	; 0x5c
     cca:	bl	a2be <operator new(unsigned int)>
     cce:	mov	r1, sp
     cd0:	mov	r5, r0
     cd2:	bl	bc8 <SDFile::SDFile(FsFile const&)>
     cd6:	movs	r3, #0
     cd8:	mov.w	r2, #1000	; 0x3e8
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     cdc:	str	r6, [r4, #0]
     cde:	strb	r3, [r4, #4]
     ce0:	strb	r3, [r4, #12]
		f = file;
		if (f) f->refcount++;
     ce2:	ldr	r3, [r5, #4]
     ce4:	str	r2, [r4, #8]
     ce6:	adds	r3, #1
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
     ce8:	str	r5, [r4, #16]
		if (f) f->refcount++;
     cea:	str	r3, [r5, #4]
     cec:	b.n	cfc <SDClass::open(char const*, unsigned char)+0x60>
     cee:	mov.w	r3, #1000	; 0x3e8
     cf2:	strb	r0, [r4, #4]
     cf4:	strb	r0, [r4, #12]
     cf6:	str	r3, [r4, #8]
//
class File final : public Stream {
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
     cf8:	str	r6, [r4, #0]
     cfa:	str	r0, [r4, #16]
     cfc:	ldr	r3, [pc, #16]	; (d10 <SDClass::open(char const*, unsigned char)+0x74>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     cfe:	add	r0, sp, #16
     d00:	str	r3, [sp, #0]
     d02:	bl	6de4 <FsBaseFile::close()>
		return File();
	}
     d06:	mov	r0, r4
     d08:	add	sp, #80	; 0x50
     d0a:	pop	{r4, r5, r6, pc}
     d0c:	.word	0x20000464
     d10:	.word	0x20000418

00000d14 <storeConfig(unsigned short*, int)>:
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     d14:	push	{r4, r5, r6, lr}
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d16:	ldr	r3, [pc, #124]	; (d94 <storeConfig(unsigned short*, int)+0x80>)
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     d18:	sub	sp, #56	; 0x38
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d1a:	mov.w	r2, #1000	; 0x3e8
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     d1e:	mov	r5, r0
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d20:	str	r3, [sp, #4]
     d22:	movs	r3, #0
     d24:	str	r2, [sp, #12]
uint16_t store[16];

extern  int t_acq;

void storeConfig(uint16_t *store, int ns)
{ 
     d26:	mov	r6, r1
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d28:	strb.w	r3, [sp, #8]
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     d2c:	add	r0, sp, #24

void storeConfig(uint16_t *store, int ns)
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d2e:	strb.w	r3, [sp, #16]
     d32:	str	r3, [sp, #20]
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     d34:	movs	r3, #2
     d36:	ldr	r2, [pc, #96]	; (d98 <storeConfig(unsigned short*, int)+0x84>)
     d38:	ldr	r1, [pc, #96]	; (d9c <storeConfig(unsigned short*, int)+0x88>)
     d3a:	bl	c9c <SDClass::open(char const*, unsigned char)>
	}
#ifdef FILE_USE_MOVE
	// Move assignment.
	File& operator = (const File&& file) {
		//Serial.println("File move assignment");
		if (file.f) file.f->refcount++;
     d3e:	ldr	r3, [sp, #40]	; 0x28
     d40:	cbz	r3, d48 <storeConfig(unsigned short*, int)+0x34>
     d42:	ldr	r2, [r3, #4]
     d44:	adds	r2, #1
     d46:	str	r2, [r3, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
     d48:	ldr	r3, [sp, #20]
     d4a:	cbz	r3, d52 <storeConfig(unsigned short*, int)+0x3e>
     d4c:	add	r0, sp, #20
     d4e:	bl	7ec <File::dec_refcount() [clone .isra.15]>
		f = file.f;
     d52:	ldr	r3, [sp, #40]	; 0x28
      for(int ii=0; ii<ns; ii++)
     d54:	movs	r4, #0
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
     d56:	add	r0, sp, #24
     d58:	str	r3, [sp, #20]
     d5a:	bl	810 <File::~File()>
      for(int ii=0; ii<ns; ii++)
     d5e:	cmp	r4, r6
     d60:	bge.n	d82 <storeConfig(unsigned short*, int)+0x6e>
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
     d62:	ldrh.w	r2, [r5, r4, lsl #1]
     d66:	add	r0, sp, #24
     d68:	ldr	r1, [pc, #52]	; (da0 <storeConfig(unsigned short*, int)+0x8c>)
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
     d6a:	adds	r4, #1
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
     d6c:	bl	b298 <sprintf>
     d70:	add	r0, sp, #24
     d72:	bl	b340 <strlen>
     d76:	add	r1, sp, #24
     d78:	mov	r2, r0
     d7a:	add	r0, sp, #4
     d7c:	bl	62e <File::write(unsigned char const*, unsigned int)>
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
    char text[32];
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
     d80:	b.n	d5e <storeConfig(unsigned short*, int)+0x4a>
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
    configFile.close();
     d82:	add	r0, sp, #4
     d84:	bl	bac <File::close()>

void storeConfig(uint16_t *store, int ns)
{ 
  //  eeprom_write_block(store, 0, ns*sizeof(store[0]));  

    File configFile;
     d88:	add	r0, sp, #4
     d8a:	bl	810 <File::~File()>
    configFile=sdx[0].open(CONFIG_FILE,FILE_WRITE_BEGIN);
      for(int ii=0; ii<ns; ii++)
      { sprintf(text,"%10d\r\n",(int) store[ii]); configFile.write((uint8_t*)text,strlen(text)); }
    configFile.close();
  
}
     d8e:	add	sp, #56	; 0x38
     d90:	pop	{r4, r5, r6, pc}
     d92:	nop
     d94:	.word	0x20000464
     d98:	.word	0x20000eca
     d9c:	.word	0x20036e48
     da0:	.word	0x20000ed6

00000da4 <saveParameters()>:
    configFile.close();
}

void saveParameters(void)
{
  store[0]= 1;
     da4:	ldr	r0, [pc, #16]	; (db8 <saveParameters()+0x14>)
     da6:	movs	r3, #1
  store[2]= t_acq;

  storeConfig(store, 16);
     da8:	movs	r1, #16
    configFile.close();
}

void saveParameters(void)
{
  store[0]= 1;
     daa:	strh	r3, [r0, #0]
  store[2]= t_acq;
     dac:	ldr	r3, [pc, #12]	; (dbc <saveParameters()+0x18>)
     dae:	ldr	r3, [r3, #0]
     db0:	strh	r3, [r0, #4]

  storeConfig(store, 16);
     db2:	b.w	d14 <storeConfig(unsigned short*, int)>
     db6:	nop
     db8:	.word	0x20037346
     dbc:	.word	0x20001de4

00000dc0 <printMenu()>:
  }
}


void printMenu(void)
{
     dc0:	push	{r4, lr}
  Serial.println("\n Menu");
     dc2:	ldr	r4, [pc, #144]	; (e54 <printMenu()+0x94>)
     dc4:	ldr	r1, [pc, #144]	; (e58 <printMenu()+0x98>)
     dc6:	mov	r0, r4
     dc8:	bl	408 <Print::println(char const*)>
  Serial.println(" ':h'  : print help");
     dcc:	ldr	r1, [pc, #140]	; (e5c <printMenu()+0x9c>)
     dce:	mov	r0, r4
     dd0:	bl	408 <Print::println(char const*)>
  Serial.println(" ':s'  : start acquisition");
     dd4:	ldr	r1, [pc, #136]	; (e60 <printMenu()+0xa0>)
     dd6:	mov	r0, r4
     dd8:	bl	408 <Print::println(char const*)>
  Serial.println(" ':e'  : stop acquisition");
     ddc:	ldr	r1, [pc, #132]	; (e64 <printMenu()+0xa4>)
     dde:	mov	r0, r4
     de0:	bl	408 <Print::println(char const*)>
  Serial.println(" ':w'  : write parameters to microSD card");
     de4:	ldr	r1, [pc, #128]	; (e68 <printMenu()+0xa8>)
     de6:	mov	r0, r4
     de8:	bl	408 <Print::println(char const*)>
  Serial.println(" ':l'  : list disks");
     dec:	ldr	r1, [pc, #124]	; (e6c <printMenu()+0xac>)
     dee:	mov	r0, r4
     df0:	bl	408 <Print::println(char const*)>
  Serial.println(" ':r'  : reset MTP");
     df4:	ldr	r1, [pc, #120]	; (e70 <printMenu()+0xb0>)
     df6:	mov	r0, r4
     df8:	bl	408 <Print::println(char const*)>
  Serial.println(" ':b'  : reboot CPU");
     dfc:	ldr	r1, [pc, #116]	; (e74 <printMenu()+0xb4>)
     dfe:	mov	r0, r4
     e00:	bl	408 <Print::println(char const*)>
//  Serial.println(" ':d'  : dump Index List (testing)");
  Serial.println();
     e04:	mov	r0, r4
     e06:	bl	a154 <Print::println()>
  Serial.println(" '?p'  : show all parameters");
     e0a:	ldr	r1, [pc, #108]	; (e78 <printMenu()+0xb8>)
     e0c:	mov	r0, r4
     e0e:	bl	408 <Print::println(char const*)>
  Serial.println(" '?d'  : get date");
     e12:	ldr	r1, [pc, #104]	; (e7c <printMenu()+0xbc>)
     e14:	mov	r0, r4
     e16:	bl	408 <Print::println(char const*)>
  Serial.println(" '?t'  : get time");
     e1a:	ldr	r1, [pc, #100]	; (e80 <printMenu()+0xc0>)
     e1c:	mov	r0, r4
     e1e:	bl	408 <Print::println(char const*)>
  Serial.println(" '?a'  : get file duration (s)");
     e22:	ldr	r1, [pc, #96]	; (e84 <printMenu()+0xc4>)
     e24:	mov	r0, r4
     e26:	bl	408 <Print::println(char const*)>
  Serial.println();
     e2a:	mov	r0, r4
     e2c:	bl	a154 <Print::println()>
  Serial.println(" '!d yyyy/mm/dd<cr>'  : set date");
     e30:	ldr	r1, [pc, #84]	; (e88 <printMenu()+0xc8>)
     e32:	mov	r0, r4
     e34:	bl	408 <Print::println(char const*)>
  Serial.println(" '!t hh:mm:ss<cr>'    : set time");
     e38:	ldr	r1, [pc, #80]	; (e8c <printMenu()+0xcc>)
     e3a:	mov	r0, r4
     e3c:	bl	408 <Print::println(char const*)>
  Serial.println(" '!a val<cr>'  : set file duration (s)");
     e40:	mov	r0, r4
     e42:	ldr	r1, [pc, #76]	; (e90 <printMenu()+0xd0>)
     e44:	bl	408 <Print::println(char const*)>
  Serial.println();
     e48:	mov	r0, r4
}
     e4a:	ldmia.w	sp!, {r4, lr}
  Serial.println(" '?a'  : get file duration (s)");
  Serial.println();
  Serial.println(" '!d yyyy/mm/dd<cr>'  : set date");
  Serial.println(" '!t hh:mm:ss<cr>'    : set time");
  Serial.println(" '!a val<cr>'  : set file duration (s)");
  Serial.println();
     e4e:	b.w	a154 <Print::println()>
     e52:	nop
     e54:	.word	0x20001704
     e58:	.word	0x20000edd
     e5c:	.word	0x20000ee4
     e60:	.word	0x20000ef8
     e64:	.word	0x20000f13
     e68:	.word	0x20000f2d
     e6c:	.word	0x20000f57
     e70:	.word	0x20000f6b
     e74:	.word	0x20000f7e
     e78:	.word	0x20000f92
     e7c:	.word	0x20000faf
     e80:	.word	0x20000fc1
     e84:	.word	0x20000fd3
     e88:	.word	0x20000ff2
     e8c:	.word	0x20001013
     e90:	.word	0x20001034

00000e94 <printMenuEntries()>:
}

void printMenuEntries(void)
{
     e94:	push	{r0, r1, r2, r3, r4, lr}
    tmElements_t tm;
    breakTime(rtc_get(), tm);

  Serial.println("CVAS_V3 Version: " __DATE__  " " __TIME__ );
     e96:	ldr	r4, [pc, #96]	; (ef8 <printMenuEntries()+0x64>)
}

void printMenuEntries(void)
{
    tmElements_t tm;
    breakTime(rtc_get(), tm);
     e98:	bl	9bb8 <rtc_get>
     e9c:	add	r1, sp, #8
     e9e:	bl	1184 <breakTime(unsigned long, tmElements_t&)>

  Serial.println("CVAS_V3 Version: " __DATE__  " " __TIME__ );
     ea2:	ldr	r1, [pc, #88]	; (efc <printMenuEntries()+0x68>)
     ea4:	mov	r0, r4
     ea6:	bl	408 <Print::println(char const*)>
  Serial.printf("Teensy: %d: %06x\n",teensy,SerNum);
     eaa:	ldr	r3, [pc, #84]	; (f00 <printMenuEntries()+0x6c>)
     eac:	movs	r2, #40	; 0x28
     eae:	ldr	r1, [pc, #84]	; (f04 <printMenuEntries()+0x70>)
     eb0:	ldr	r3, [r3, #0]
     eb2:	mov	r0, r4
     eb4:	bl	a174 <Print::printf(char const*, ...)>
  Serial.printf("Date d = %04d/%02d/%02d\n",tmYearToCalendar(tm.Year), tm.Month, tm.Day); 
     eb8:	ldrb.w	r1, [sp, #12]
     ebc:	ldrb.w	r2, [sp, #14]
     ec0:	mov	r0, r4
     ec2:	ldrb.w	r3, [sp, #13]
     ec6:	str	r1, [sp, #0]
     ec8:	addw	r2, r2, #1970	; 0x7b2
     ecc:	ldr	r1, [pc, #56]	; (f08 <printMenuEntries()+0x74>)
     ece:	bl	a174 <Print::printf(char const*, ...)>
  Serial.printf("Time t = %02d:%02d:%02d\n",tm.Hour, tm.Minute, tm.Second); 
     ed2:	ldrb.w	r1, [sp, #8]
     ed6:	ldrb.w	r3, [sp, #9]
     eda:	mov	r0, r4
     edc:	ldrb.w	r2, [sp, #10]
     ee0:	str	r1, [sp, #0]
     ee2:	ldr	r1, [pc, #40]	; (f0c <printMenuEntries()+0x78>)
     ee4:	bl	a174 <Print::printf(char const*, ...)>
  Serial.printf("T_acq a = %d\n",t_acq); 
     ee8:	ldr	r3, [pc, #36]	; (f10 <printMenuEntries()+0x7c>)
     eea:	ldr	r1, [pc, #40]	; (f14 <printMenuEntries()+0x80>)
     eec:	mov	r0, r4
     eee:	ldr	r2, [r3, #0]
     ef0:	bl	a174 <Print::printf(char const*, ...)>
}
     ef4:	add	sp, #16
     ef6:	pop	{r4, pc}
     ef8:	.word	0x20001704
     efc:	.word	0x2000105b
     f00:	.word	0x2000292c
     f04:	.word	0x20001081
     f08:	.word	0x20001093
     f0c:	.word	0x200010ac
     f10:	.word	0x20001de4
     f14:	.word	0x200010c5

00000f18 <menuGetInt(int*)>:

int menuGetInt(int *val)
{ char buffer[40];
     f18:	push	{r4, lr}
     f1a:	mov	r4, r0
     f1c:	sub	sp, #40	; 0x28
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     f1e:	bl	8c8c <usb_serial_available>
  while(!Serial.available());
     f22:	cmp	r0, #0
     f24:	beq.n	f1e <menuGetInt(int*)+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
     f26:	mov	r2, sp
     f28:	movs	r3, #40	; 0x28
     f2a:	movs	r1, #13
     f2c:	ldr	r0, [pc, #28]	; (f4c <menuGetInt(int*)+0x34>)
     f2e:	bl	a0e4 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     f32:	add	r3, sp, #40	; 0x28
//  Serial.println(buffer);
  return sscanf(buffer,"%d",val);
     f34:	mov	r2, r4
     f36:	ldr	r1, [pc, #24]	; (f50 <menuGetInt(int*)+0x38>)

int menuGetInt(int *val)
{ char buffer[40];
  while(!Serial.available());
  int count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
     f38:	add	r0, r3
     f3a:	movs	r3, #0
     f3c:	strb.w	r3, [r0, #-40]
//  Serial.println(buffer);
  return sscanf(buffer,"%d",val);
     f40:	mov	r0, sp
     f42:	bl	b2e4 <sscanf>
}
     f46:	add	sp, #40	; 0x28
     f48:	pop	{r4, pc}
     f4a:	nop
     f4c:	.word	0x20001704
     f50:	.word	0x2000111b

00000f54 <menuGet3Int(int*, int*, int*)>:

int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
     f54:	push	{r4, r5, r6, lr}
     f56:	mov	r4, r0
     f58:	sub	sp, #64	; 0x40
     f5a:	mov	r5, r1
     f5c:	mov	r6, r2
     f5e:	bl	8c8c <usb_serial_available>
  while(!Serial.available());
     f62:	cmp	r0, #0
     f64:	beq.n	f5e <menuGet3Int(int*, int*, int*)+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
     f66:	add	r2, sp, #24
     f68:	movs	r3, #40	; 0x28
     f6a:	movs	r1, #13
     f6c:	ldr	r0, [pc, #40]	; (f98 <menuGet3Int(int*, int*, int*)+0x44>)
     f6e:	bl	a0e4 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     f72:	add	r3, sp, #64	; 0x40
//  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     f74:	mov	r2, r4
     f76:	ldr	r1, [pc, #36]	; (f9c <menuGet3Int(int*, int*, int*)+0x48>)

int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
  while(!Serial.available());
  int count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
     f78:	add	r0, r3
     f7a:	movs	r3, #0
     f7c:	strb.w	r3, [r0, #-40]
//  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     f80:	add.w	r3, sp, #23
     f84:	str	r6, [sp, #8]
     f86:	add	r0, sp, #24
     f88:	str	r3, [sp, #4]
     f8a:	add.w	r3, sp, #22
     f8e:	str	r5, [sp, #0]
     f90:	bl	b2e4 <sscanf>
}
     f94:	add	sp, #64	; 0x40
     f96:	pop	{r4, r5, r6, pc}
     f98:	.word	0x20001704
     f9c:	.word	0x200010d3

00000fa0 <menu()>:
#if defined (KINETISK) 
#define CPU_RESTART 
#endif

int16_t menu(void)
{
     fa0:	push	{r4, lr}
     fa2:	sub	sp, #32
     fa4:	bl	8c8c <usb_serial_available>
  if(!Serial.available()) return 0;
     fa8:	cmp	r0, #0
     faa:	beq.w	112e <menu()+0x18e>
        virtual int read() { return usb_serial_getchar(); }
     fae:	bl	8cf8 <usb_serial_getchar>

  char ch=Serial.read();
     fb2:	uxtb	r0, r0
  if(ch==':')
     fb4:	cmp	r0, #58	; 0x3a
     fb6:	bne.n	103e <menu()+0x9e>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     fb8:	bl	8c8c <usb_serial_available>
  { while(!Serial.available()) ; ch=Serial.read();
     fbc:	cmp	r0, #0
     fbe:	beq.n	fb8 <menu()+0x18>
        virtual int read() { return usb_serial_getchar(); }
     fc0:	bl	8cf8 <usb_serial_getchar>
     fc4:	uxtb	r0, r0

    if(ch=='s') { Serial.print("\n"); Serial.print("start"); return  +1;} // start acq
     fc6:	cmp	r0, #115	; 0x73
     fc8:	bne.n	fde <menu()+0x3e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     fca:	ldr	r1, [pc, #360]	; (1134 <menu()+0x194>)
     fcc:	ldr	r0, [pc, #360]	; (1138 <menu()+0x198>)
     fce:	bl	3e4 <Print::write(char const*)>
     fd2:	ldr	r1, [pc, #360]	; (113c <menu()+0x19c>)
     fd4:	ldr	r0, [pc, #352]	; (1138 <menu()+0x198>)
     fd6:	bl	3e4 <Print::write(char const*)>
     fda:	movs	r0, #1
     fdc:	b.n	1130 <menu()+0x190>
    else if(ch=='e') { Serial.print("\n"); Serial.print("stop");  return  -1;} // end acq
     fde:	cmp	r0, #101	; 0x65
     fe0:	bne.n	ff8 <menu()+0x58>
     fe2:	ldr	r1, [pc, #336]	; (1134 <menu()+0x194>)
     fe4:	ldr	r0, [pc, #336]	; (1138 <menu()+0x198>)
     fe6:	bl	3e4 <Print::write(char const*)>
     fea:	ldr	r1, [pc, #340]	; (1140 <menu()+0x1a0>)
     fec:	ldr	r0, [pc, #328]	; (1138 <menu()+0x198>)
     fee:	bl	3e4 <Print::write(char const*)>
     ff2:	mov.w	r0, #4294967295
     ff6:	b.n	1130 <menu()+0x190>
    else if(ch=='h') { printMenu(); return 0;} 
     ff8:	cmp	r0, #104	; 0x68
     ffa:	bne.n	1002 <menu()+0x62>
     ffc:	bl	dc0 <printMenu()>
    1000:	b.n	112e <menu()+0x18e>
    else if(ch=='w') { saveParameters(); return 0;} 
    1002:	cmp	r0, #119	; 0x77
    1004:	bne.n	100c <menu()+0x6c>
    1006:	bl	da4 <saveParameters()>
    100a:	b.n	112e <menu()+0x18e>
    else if(ch=='l') { listDisks(); return 0;} 
    100c:	cmp	r0, #108	; 0x6c
    100e:	bne.n	1016 <menu()+0x76>
    1010:	bl	19e4 <listDisks()>
    1014:	b.n	112e <menu()+0x18e>
    else if(ch=='b') { Serial.print("\n"); Serial.print("rebooting CPU"); Serial.flush(); delay(100); CPU_RESTART; return 0;} 
    1016:	cmp	r0, #98	; 0x62
    1018:	bne.w	112e <menu()+0x18e>
    101c:	ldr	r1, [pc, #276]	; (1134 <menu()+0x194>)
    101e:	ldr	r0, [pc, #280]	; (1138 <menu()+0x198>)
    1020:	bl	3e4 <Print::write(char const*)>
    1024:	ldr	r1, [pc, #284]	; (1144 <menu()+0x1a4>)
    1026:	ldr	r0, [pc, #272]	; (1138 <menu()+0x198>)
    1028:	bl	3e4 <Print::write(char const*)>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    102c:	bl	8ef8 <usb_serial_flush_output>
    1030:	movs	r0, #100	; 0x64
    1032:	bl	99f8 <delay>
    1036:	ldr	r2, [pc, #272]	; (1148 <menu()+0x1a8>)
    1038:	ldr	r3, [pc, #272]	; (114c <menu()+0x1ac>)
    103a:	str	r2, [r3, #0]
    103c:	b.n	112e <menu()+0x18e>
  }
  else if(ch=='?') // get info
    103e:	cmp	r0, #63	; 0x3f
    1040:	bne.n	10ac <menu()+0x10c>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1042:	bl	8c8c <usb_serial_available>
  {
    while(!Serial.available()) ; ch=Serial.read();
    1046:	cmp	r0, #0
    1048:	beq.n	1042 <menu()+0xa2>
        virtual int read() { return usb_serial_getchar(); }
    104a:	bl	8cf8 <usb_serial_getchar>
    104e:	uxtb	r4, r0

    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1050:	bl	9bb8 <rtc_get>
    1054:	add	r1, sp, #24
    1056:	bl	1184 <breakTime(unsigned long, tmElements_t&)>

    if(ch=='p') { printMenuEntries(); return 0;} 
    105a:	cmp	r4, #112	; 0x70
    105c:	bne.n	1064 <menu()+0xc4>
    105e:	bl	e94 <printMenuEntries()>
    1062:	b.n	112e <menu()+0x18e>
    else if(ch=='d') { Serial.printf("%04d/%02d/%02d\n",tmYearToCalendar(tm.Year), tm.Month, tm.Day); return  0;} // display date
    1064:	cmp	r4, #100	; 0x64
    1066:	bne.n	107e <menu()+0xde>
    1068:	ldrb.w	r1, [sp, #28]
    106c:	ldrb.w	r2, [sp, #30]
    1070:	str	r1, [sp, #0]
    1072:	ldrb.w	r3, [sp, #29]
    1076:	addw	r2, r2, #1970	; 0x7b2
    107a:	ldr	r1, [pc, #212]	; (1150 <menu()+0x1b0>)
    107c:	b.n	1092 <menu()+0xf2>
    else if(ch=='t') { Serial.printf("%02d:%02d:%02d\n",tm.Hour, tm.Minute, tm.Second); return  0;} // display time
    107e:	cmp	r4, #116	; 0x74
    1080:	bne.n	109a <menu()+0xfa>
    1082:	ldrb.w	r1, [sp, #24]
    1086:	ldrb.w	r3, [sp, #25]
    108a:	str	r1, [sp, #0]
    108c:	ldrb.w	r2, [sp, #26]
    1090:	ldr	r1, [pc, #192]	; (1154 <menu()+0x1b4>)
    1092:	ldr	r0, [pc, #164]	; (1138 <menu()+0x198>)
    1094:	bl	a174 <Print::printf(char const*, ...)>
    1098:	b.n	112e <menu()+0x18e>
    else if(ch=='a') { Serial.printf("%d\n",t_acq); return  0;} // file size
    109a:	cmp	r4, #97	; 0x61
    109c:	bne.n	112e <menu()+0x18e>
    109e:	ldr	r3, [pc, #184]	; (1158 <menu()+0x1b8>)
    10a0:	ldr	r1, [pc, #184]	; (115c <menu()+0x1bc>)
    10a2:	ldr	r2, [r3, #0]
    10a4:	ldr	r0, [pc, #144]	; (1138 <menu()+0x198>)
    10a6:	bl	a174 <Print::printf(char const*, ...)>
    10aa:	b.n	112e <menu()+0x18e>
  }
  else if(ch=='!') // set 
    10ac:	cmp	r0, #33	; 0x21
    10ae:	bne.n	112e <menu()+0x18e>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    10b0:	bl	8c8c <usb_serial_available>
  { 
    while(!Serial.available()) ;
    10b4:	cmp	r0, #0
    10b6:	beq.n	10b0 <menu()+0x110>
        virtual int read() { return usb_serial_getchar(); }
    10b8:	bl	8cf8 <usb_serial_getchar>
    ch=Serial.read();
    10bc:	uxtb	r0, r0
    if(ch=='d') // set date
    10be:	cmp	r0, #100	; 0x64
    10c0:	bne.n	10ee <menu()+0x14e>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
    10c2:	add	r2, sp, #20
    10c4:	add	r1, sp, #16
    10c6:	add	r0, sp, #12
    10c8:	bl	f54 <menuGet3Int(int*, int*, int*)>
      tmElements_t tm;
      breakTime(rtc_get(), tm);
    10cc:	bl	9bb8 <rtc_get>
    10d0:	add	r1, sp, #24
    10d2:	bl	1184 <breakTime(unsigned long, tmElements_t&)>

      setRTCTime(tm.Hour, tm.Minute, tm.Second, day, month, year);
    10d6:	ldr	r3, [sp, #12]
    10d8:	ldrb.w	r2, [sp, #24]
    10dc:	str	r3, [sp, #4]
    10de:	ldr	r3, [sp, #16]
    10e0:	ldrb.w	r1, [sp, #25]
    10e4:	str	r3, [sp, #0]
    10e6:	ldrb.w	r0, [sp, #26]
    10ea:	ldr	r3, [sp, #20]
    10ec:	b.n	111e <menu()+0x17e>
      return  0;
    } 
    else if(ch=='t') // set time
    10ee:	cmp	r0, #116	; 0x74
    10f0:	bne.n	1124 <menu()+0x184>
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
    10f2:	add	r2, sp, #20
    10f4:	add	r1, sp, #16
    10f6:	add	r0, sp, #12
    10f8:	bl	f54 <menuGet3Int(int*, int*, int*)>

      tmElements_t tm;
      breakTime(rtc_get(), tm);
    10fc:	bl	9bb8 <rtc_get>
    1100:	add	r1, sp, #24
    1102:	bl	1184 <breakTime(unsigned long, tmElements_t&)>
      setRTCTime(hour, minutes, seconds, tm.Day, tm.Month, tmYearToCalendar(tm.Year));
    1106:	ldrb.w	r2, [sp, #30]
    110a:	add	r0, sp, #12
    110c:	ldrb.w	r3, [sp, #28]
    1110:	addw	r2, r2, #1970	; 0x7b2
    1114:	str	r2, [sp, #4]
    1116:	ldrb.w	r2, [sp, #29]
    111a:	str	r2, [sp, #0]
    111c:	ldmia	r0, {r0, r1, r2}
    111e:	bl	136c <setRTCTime(int, int, int, int, int, int)>
    1122:	b.n	112e <menu()+0x18e>
      return  0;
    } 
    else if(ch=='a') { menuGetInt(&t_acq); return  0;} // file size
    1124:	cmp	r0, #97	; 0x61
    1126:	bne.n	112e <menu()+0x18e>
    1128:	ldr	r0, [pc, #44]	; (1158 <menu()+0x1b8>)
    112a:	bl	f18 <menuGetInt(int*)>
    112e:	movs	r0, #0
  }
  return 0;
}
    1130:	add	sp, #32
    1132:	pop	{r4, pc}
    1134:	.word	0x2000125c
    1138:	.word	0x20001704
    113c:	.word	0x200010de
    1140:	.word	0x200010e4
    1144:	.word	0x200010e9
    1148:	.word	0x05fa0004
    114c:	.word	0xe000ed0c
    1150:	.word	0x2000109c
    1154:	.word	0x200010b5
    1158:	.word	0x20001de4
    115c:	.word	0x200010cf

00001160 <newHour()>:
    return 1;
}

int32_t hour_ = 0;
int16_t newHour(void)
{   uint32_t tx=rtc_get();
    1160:	push	{r3, lr}
    1162:	bl	9bb8 <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1166:	mov.w	r3, #3600	; 0xe10
    116a:	udiv	r0, r0, r3
    if(hour_== h_) return 0;
    116e:	ldr	r3, [pc, #16]	; (1180 <newHour()+0x20>)
    1170:	ldr	r2, [r3, #0]
    1172:	cmp	r0, r2
    hour_ = h_;
    1174:	itte	ne
    1176:	strne	r0, [r3, #0]
    return 1;
    1178:	movne	r0, #1

int32_t hour_ = 0;
int16_t newHour(void)
{   uint32_t tx=rtc_get();
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    if(hour_== h_) return 0;
    117a:	moveq	r0, #0
    hour_ = h_;
    return 1;
}
    117c:	pop	{r3, pc}
    117e:	nop
    1180:	.word	0x20036e04

00001184 <breakTime(unsigned long, tmElements_t&)>:
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    1184:	movs	r3, #60	; 0x3c
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1186:	mov.w	ip, #400	; 0x190
/* functions to convert to and from system time */
/* These are for interfacing with time services and are not normally needed in a sketch */

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(uint32_t timeInput, tmElements_t &tm){
    118a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    118e:	udiv	r4, r0, r3
    1192:	mls	r2, r3, r4, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1196:	movw	r8, #365	; 0x16d
    119a:	mov.w	lr, #100	; 0x64
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    119e:	strb	r2, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    11a0:	udiv	r2, r4, r3
    11a4:	mls	r3, r3, r2, r4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    11a8:	movs	r4, #24
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    11aa:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    11ac:	mov.w	r3, #3600	; 0xe10
    11b0:	udiv	r3, r0, r3
    11b4:	udiv	r2, r3, r4
    11b8:	mls	r3, r4, r2, r3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    11bc:	movs	r2, #7
    11be:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    11c0:	strb	r3, [r1, #2]
  time /= 24; // now it is days
    11c2:	ldr	r3, [pc, #224]	; (12a4 <breakTime(unsigned long, tmElements_t&)+0x120>)
    11c4:	udiv	r0, r0, r3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    11c8:	adds	r3, r0, #4
    11ca:	udiv	r2, r3, r2
    11ce:	rsb	r2, r2, r2, lsl #3
    11d2:	subs	r3, r3, r2
  
  year = 0;  
  days = 0;
    11d4:	mov	r2, r4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    11d6:	adds	r3, #1
    11d8:	strb	r3, [r1, #3]
    11da:	uxtb	r6, r4
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    11dc:	addw	r3, r6, #1970	; 0x7b2
    11e0:	ands.w	r7, r3, #3
    11e4:	bne.n	1204 <breakTime(unsigned long, tmElements_t&)+0x80>
    11e6:	sdiv	r5, r3, lr
    11ea:	mls	r5, lr, r5, r3
    11ee:	cbnz	r5, 120a <breakTime(unsigned long, tmElements_t&)+0x86>
    11f0:	sdiv	r5, r3, ip
    11f4:	mls	r5, ip, r5, r3
    11f8:	cmp	r5, #0
    11fa:	ite	ne
    11fc:	movne	r5, r8
    11fe:	moveq.w	r5, #366	; 0x16e
    1202:	b.n	120e <breakTime(unsigned long, tmElements_t&)+0x8a>
    1204:	movw	r5, #365	; 0x16d
    1208:	b.n	120e <breakTime(unsigned long, tmElements_t&)+0x8a>
    120a:	mov.w	r5, #366	; 0x16e
    120e:	add	r2, r5
    1210:	adds	r4, #1
    1212:	cmp	r0, r2
    1214:	bcs.n	11da <breakTime(unsigned long, tmElements_t&)+0x56>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    1216:	strb	r6, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    1218:	cbnz	r7, 1240 <breakTime(unsigned long, tmElements_t&)+0xbc>
    121a:	movs	r5, #100	; 0x64
    121c:	sdiv	r4, r3, r5
    1220:	mls	r4, r5, r4, r3
    1224:	cbnz	r4, 1246 <breakTime(unsigned long, tmElements_t&)+0xc2>
    1226:	mov.w	r5, #400	; 0x190
    122a:	sdiv	r4, r3, r5
    122e:	mls	r4, r5, r4, r3
    1232:	cmp	r4, #0
    1234:	movw	r4, #365	; 0x16d
    1238:	it	eq
    123a:	moveq.w	r4, #366	; 0x16e
    123e:	b.n	124a <breakTime(unsigned long, tmElements_t&)+0xc6>
    1240:	movw	r4, #365	; 0x16d
    1244:	b.n	124a <breakTime(unsigned long, tmElements_t&)+0xc6>
    1246:	mov.w	r4, #366	; 0x16e
  time  -= days; // now it is days in this year, starting at 0
    124a:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    124c:	movs	r6, #100	; 0x64
    124e:	mov.w	r4, #400	; 0x190
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    1252:	ldr.w	lr, [pc, #84]	; 12a8 <breakTime(unsigned long, tmElements_t&)+0x124>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    1256:	subs	r0, r0, r2
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    1258:	sdiv	r2, r3, r6
    125c:	mls	r6, r6, r2, r3
    1260:	sdiv	r2, r3, r4
    1264:	mls	r3, r4, r2, r3
    1268:	movs	r2, #0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    126a:	cmp	r2, #1
    126c:	uxtb	r5, r2
    126e:	bne.n	127e <breakTime(unsigned long, tmElements_t&)+0xfa>
      if (LEAP_YEAR(year)) {
    1270:	cbnz	r7, 1284 <breakTime(unsigned long, tmElements_t&)+0x100>
    1272:	cbnz	r6, 1288 <breakTime(unsigned long, tmElements_t&)+0x104>
        monthLength=29;
    1274:	cmp	r3, #0
    1276:	ite	ne
    1278:	movne	r4, #28
    127a:	moveq	r4, #29
    127c:	b.n	128a <breakTime(unsigned long, tmElements_t&)+0x106>
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    127e:	ldrb.w	r4, [r2, lr]
    1282:	b.n	128a <breakTime(unsigned long, tmElements_t&)+0x106>
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
      } else {
        monthLength=28;
    1284:	movs	r4, #28
    1286:	b.n	128a <breakTime(unsigned long, tmElements_t&)+0x106>
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
    1288:	movs	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    128a:	cmp	r4, r0
    128c:	bhi.n	1298 <breakTime(unsigned long, tmElements_t&)+0x114>
    128e:	adds	r2, #1
      time -= monthLength;
    1290:	subs	r0, r0, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    1292:	cmp	r2, #12
    1294:	bne.n	126a <breakTime(unsigned long, tmElements_t&)+0xe6>
    1296:	mov	r5, r2
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    1298:	adds	r5, #1
  tm.Day = time + 1;     // day of month
    129a:	adds	r0, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    129c:	strb	r5, [r1, #5]
  tm.Day = time + 1;     // day of month
    129e:	strb	r0, [r1, #4]
    12a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12a4:	.word	0x00015180
    12a8:	.word	0x20000e3a

000012ac <makeTime(tmElements_t const&)>:
}

uint32_t makeTime(const tmElements_t &tm){   
    12ac:	push	{r4, r5, r6, r7, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    12ae:	ldr	r3, [pc, #176]	; (1360 <makeTime(tmElements_t const&)+0xb4>)
    12b0:	movw	r1, #1970	; 0x7b2
    12b4:	ldrb	r2, [r0, #6]
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    12b6:	movs	r5, #100	; 0x64
    12b8:	mov.w	r6, #400	; 0x190
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    12bc:	muls	r3, r2
  for (i = 0; i < tm.Year; i++) {
    12be:	subw	r4, r1, #1970	; 0x7b2
    12c2:	cmp	r2, r4
    12c4:	ble.n	12ea <makeTime(tmElements_t const&)+0x3e>
    if (LEAP_YEAR(i)) {
    12c6:	lsls	r4, r1, #30
    12c8:	bne.n	12e6 <makeTime(tmElements_t const&)+0x3a>
    12ca:	sdiv	r4, r1, r5
    12ce:	mls	r4, r5, r4, r1
    12d2:	cbnz	r4, 12de <makeTime(tmElements_t const&)+0x32>
    12d4:	sdiv	r4, r1, r6
    12d8:	mls	r4, r6, r4, r1
    12dc:	cbnz	r4, 12e6 <makeTime(tmElements_t const&)+0x3a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    12de:	add.w	r3, r3, #86016	; 0x15000
    12e2:	add.w	r3, r3, #384	; 0x180
    12e6:	adds	r1, #1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    12e8:	b.n	12be <makeTime(tmElements_t const&)+0x12>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    12ea:	addw	r2, r2, #1970	; 0x7b2
    12ee:	movs	r4, #100	; 0x64
    12f0:	mov.w	r5, #400	; 0x190
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    12f4:	ldrb	r6, [r0, #5]
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    12f6:	ldr	r7, [pc, #108]	; (1364 <makeTime(tmElements_t const&)+0xb8>)
    12f8:	ldr.w	lr, [pc, #108]	; 1368 <makeTime(tmElements_t const&)+0xbc>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    12fc:	sdiv	r1, r2, r4
    1300:	mls	r4, r4, r1, r2
    1304:	sdiv	r1, r2, r5
    1308:	mls	r5, r5, r1, r2
    130c:	movs	r1, #1
    130e:	and.w	r2, r2, #3
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1312:	cmp	r6, r1
    1314:	ble.n	133a <makeTime(tmElements_t const&)+0x8e>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1316:	cmp	r1, #2
    1318:	bne.n	132a <makeTime(tmElements_t const&)+0x7e>
    131a:	cbnz	r2, 132a <makeTime(tmElements_t const&)+0x7e>
    131c:	cbnz	r4, 1320 <makeTime(tmElements_t const&)+0x74>
    131e:	cbnz	r5, 132a <makeTime(tmElements_t const&)+0x7e>
      seconds += SECS_PER_DAY * 29;
    1320:	add.w	r3, r3, #2490368	; 0x260000
    1324:	add.w	r3, r3, #15232	; 0x3b80
    1328:	b.n	1336 <makeTime(tmElements_t const&)+0x8a>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    132a:	add.w	ip, r7, r1
    132e:	ldrb.w	ip, [ip, #-1]
    1332:	mla	r3, lr, ip, r3
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1336:	adds	r1, #1
    1338:	b.n	1312 <makeTime(tmElements_t const&)+0x66>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return seconds; 
    133a:	ldrb	r2, [r0, #1]
    133c:	mov.w	r4, #3600	; 0xe10
    1340:	ldrb	r1, [r0, #2]
    1342:	rsb	r2, r2, r2, lsl #4
    1346:	lsls	r2, r2, #2
    1348:	mla	r2, r4, r1, r2
    134c:	ldrb	r1, [r0, #0]
    134e:	add	r2, r1
    1350:	ldrb	r1, [r0, #4]
    1352:	ldr	r0, [pc, #20]	; (1368 <makeTime(tmElements_t const&)+0xbc>)
    1354:	subs	r1, #1
    1356:	mla	r0, r0, r1, r2
}
    135a:	add	r0, r3
    135c:	pop	{r4, r5, r6, r7, pc}
    135e:	nop
    1360:	.word	0x01e13380
    1364:	.word	0x20000e3a
    1368:	.word	0x00015180

0000136c <setRTCTime(int, int, int, int, int, int)>:

extern "C" void rtc_set(uint32_t tt);

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    136c:	push	{r0, r1, r4, lr}
    136e:	ldr	r4, [sp, #20]
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
    1370:	strb.w	r0, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;
    1374:	add	r0, sp, #8
extern "C" void rtc_set(uint32_t tt);

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 // it is converted to years since 1970
  if( yr > 99)
    1376:	cmp	r4, #99	; 0x63
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    1378:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    137c:	strb.w	r2, [r0, #-8]!

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 // it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
    1380:	ite	gt
    1382:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    1386:	addle	r4, #30
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    1388:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    138c:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    1390:	ldr	r4, [sp, #16]
    1392:	strb.w	r4, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    1396:	bl	12ac <makeTime(tmElements_t const&)>
  rtc_set(tt); // for RTC
    139a:	bl	9be0 <rtc_set>
}
    139e:	add	sp, #8
    13a0:	pop	{r4, pc}

000013a2 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    13a2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    13a6:	ldr	r5, [sp, #32]
    13a8:	mov	r7, r0
    13aa:	mov	r6, r2
    13ac:	add.w	r9, r3, r1
    13b0:	mov	r4, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    13b2:	cmp	r4, r9
    13b4:	beq.n	13d4 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>
       if (!readSector(sector + i, dst)) return false;
    13b6:	ldr	r3, [r7, #0]
    13b8:	mov	r2, r6
    13ba:	mov	r1, r4
    13bc:	mov	r0, r7
    13be:	ldr	r3, [r3, #12]
    13c0:	add.w	r8, r4, #1
    13c4:	blx	r3
    13c6:	cbz	r0, 13d6 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x34>
       callback(sector + i, dst, context);
    13c8:	mov	r0, r4
    13ca:	ldr	r2, [sp, #36]	; 0x24
    13cc:	mov	r1, r6
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    13ce:	mov	r4, r8
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
    13d0:	blx	r5
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    13d2:	b.n	13b2 <BlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    13d4:	movs	r0, #1
  }
    13d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000013da <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    13da:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13de:	mov	r5, r0
    13e0:	mov	r7, r3
    13e2:	add.w	r8, r2, r1
    13e6:	mov	r4, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    13e8:	cmp	r4, r8
    13ea:	beq.n	1408 <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    13ec:	ldr	r3, [r5, #0]
    13ee:	mov	r0, r4
    13f0:	ldr	r1, [sp, #24]
    13f2:	ldr	r6, [r3, #32]
    13f4:	blx	r7
    13f6:	mov	r1, r4
    13f8:	mov	r2, r0
    13fa:	mov	r0, r5
    13fc:	adds	r4, #1
    13fe:	blx	r6
    1400:	cmp	r0, #0
    1402:	bne.n	13e8 <BlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xe>
    1404:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     }
    return true;
    1408:	movs	r0, #1
  }
    140a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000140e <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    140e:	mov.w	r0, #4294967295
    1412:	bx	lr

00001414 <MySpiClass::send(unsigned char)>:

        // Receive a byte.
        uint8_t receive() { return SPI.transfer(0XFF); }

        // Send a byte.
        void send(uint8_t data) { SPI.transfer(data); }
    1414:	ldr	r3, [pc, #16]	; (1428 <MySpiClass::send(unsigned char)+0x14>)
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1416:	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1418:	str	r1, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    141a:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    141c:	tst.w	r2, #2031616	; 0x1f0000
    1420:	beq.n	141a <MySpiClass::send(unsigned char)+0x6>
    1422:	ldr	r3, [r3, #116]	; 0x74
    1424:	bx	lr
    1426:	nop
    1428:	.word	0x200016b4

0000142c <MySpiClass::setSckSpeed(unsigned long)>:
        // Replace this function if your board has multiple byte send.
        void send(const uint8_t* buf, size_t count) 
        {  SPI.transfer((void *)buf, (void *) dummy_buffer, count); }

        // Save SPISettings for new max SCK frequency
        void setSckSpeed(uint32_t maxSck) {  m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0); }
    142c:	movs	r3, #7
    142e:	str	r1, [r0, #4]
    1430:	str	r3, [r0, #8]
    1432:	bx	lr

00001434 <__tcf_0>:
    const char *sd_str[]={"sd1"};
    const int cs[] = {10 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1434:	bx	lr

00001436 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
    uint32_t diskSpace[nsd];
    uint32_t clusterSize[nsd];

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{       
    1436:	push	{r0, r1, r4, r5, r6, lr}
    1438:	mov	r5, r2
    143a:	mov	r4, r1
    143c:	mov	r6, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    143e:	bl	9bb8 <rtc_get>
    1442:	mov	r1, sp
    1444:	bl	1184 <breakTime(unsigned long, tmElements_t&)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    1448:	ldrb.w	r3, [sp, #6]

    *date = FS_DATE(tmYearToCalendar(tm.Year),tm.Month, tm.Day);
    144c:	ldrb.w	r2, [sp, #5]
    1450:	subs	r3, #10
    1452:	ldrb.w	r1, [sp, #4]
    1456:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    1458:	cmp	r3, #127	; 0x7f
    145a:	bhi.n	1470 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    145c:	cmp	r2, #12
    145e:	bhi.n	1470 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
    1460:	cmp	r1, #31
    1462:	bhi.n	1470 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
         year << 9 | month << 5 | day;
    1464:	orr.w	r1, r1, r2, lsl #5
    1468:	orr.w	r3, r1, r3, lsl #9
    146c:	uxth	r3, r3
    146e:	b.n	1472 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3c>
    1470:	movs	r3, #0
    1472:	strh	r3, [r6, #0]
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    1474:	ldrb.w	r3, [sp, #2]
    1478:	ldrb.w	r1, [sp, #1]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    147c:	cmp	r3, #23
    147e:	ldrb.w	r2, [sp]
    1482:	bhi.n	149a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    1484:	cmp	r1, #59	; 0x3b
    1486:	bhi.n	149a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
    1488:	cmp	r2, #59	; 0x3b
    148a:	bhi.n	149a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
    148c:	lsls	r1, r1, #5
    148e:	orr.w	r3, r1, r3, lsl #11
    1492:	orr.w	r3, r3, r2, lsr #1
    1496:	uxth	r3, r3
    1498:	b.n	149c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x66>
    149a:	movs	r3, #0
    *ms10 = tm.Second & 1 ? 100 : 0;
    149c:	ands.w	r2, r2, #1
{       
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    *date = FS_DATE(tmYearToCalendar(tm.Year),tm.Month, tm.Day);
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    14a0:	strh	r3, [r4, #0]
    *ms10 = tm.Second & 1 ? 100 : 0;
    14a2:	it	ne
    14a4:	movne	r2, #100	; 0x64
    14a6:	strb	r2, [r5, #0]
}
    14a8:	add	sp, #8
    14aa:	pop	{r4, r5, r6, pc}

000014ac <MySpiClass::send(unsigned char const*, unsigned int)>:
        { memset(buf, 0XFF, count); SPI.transfer(buf, count); return 0; }

        // Send multiple bytes.
        // Replace this function if your board has multiple byte send.
        void send(const uint8_t* buf, size_t count) 
        {  SPI.transfer((void *)buf, (void *) dummy_buffer, count); }
    14ac:	mov	r3, r2
    14ae:	ldr	r0, [pc, #8]	; (14b8 <MySpiClass::send(unsigned char const*, unsigned int)+0xc>)
    14b0:	ldr	r2, [pc, #8]	; (14bc <MySpiClass::send(unsigned char const*, unsigned int)+0x10>)
    14b2:	b.w	28c4 <SPIClass::transfer(void const*, void*, unsigned int)>
    14b6:	nop
    14b8:	.word	0x200016b4
    14bc:	.word	0x20002938

000014c0 <MySpiClass::receive(unsigned char*, unsigned int)>:
        // Send a byte.
        void send(uint8_t data) { SPI.transfer(data); }

        // Receive multiple bytes.  
        // Replace this function if your board has multiple byte receive.
        uint8_t receive(uint8_t* buf, size_t count) 
    14c0:	push	{r3, r4, r5, lr}
    14c2:	mov	r4, r1
    14c4:	mov	r5, r2
        { memset(buf, 0XFF, count); SPI.transfer(buf, count); return 0; }
    14c6:	movs	r1, #255	; 0xff
    14c8:	mov	r0, r4
    14ca:	bl	8760 <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    14ce:	mov	r3, r5
    14d0:	mov	r2, r4
    14d2:	mov	r1, r4
    14d4:	ldr	r0, [pc, #8]	; (14e0 <MySpiClass::receive(unsigned char*, unsigned int)+0x20>)
    14d6:	bl	28c4 <SPIClass::transfer(void const*, void*, unsigned int)>
    14da:	movs	r0, #0
    14dc:	pop	{r3, r4, r5, pc}
    14de:	nop
    14e0:	.word	0x200016b4

000014e4 <MySpiClass::begin(SdSpiConfig)>:
     * 
     */

    public:
        // Initialize the SPI bus.
        void begin(SdSpiConfig config) {  (void) config; SPI.begin(); }
    14e4:	sub	sp, #16
    14e6:	add	r0, sp, #16
    14e8:	stmdb	r0, {r1, r2, r3}
    14ec:	ldr	r0, [pc, #4]	; (14f4 <MySpiClass::begin(SdSpiConfig)+0x10>)
    14ee:	add	sp, #16
    14f0:	b.w	26ac <SPIClass::begin()>
    14f4:	.word	0x200016b4

000014f8 <File::dec_refcount() [clone .isra.23]>:
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
    14f8:	push	{r4, lr}
    14fa:	mov	r4, r0
		if (--(f->refcount) == 0) {
    14fc:	ldr	r0, [r0, #0]
    14fe:	ldr	r3, [r0, #4]
    1500:	subs	r3, #1
    1502:	str	r3, [r0, #4]
    1504:	cbnz	r3, 1516 <File::dec_refcount() [clone .isra.23]+0x1e>
			f->close();
    1506:	ldr	r3, [r0, #0]
    1508:	ldr	r3, [r3, #44]	; 0x2c
    150a:	blx	r3
			delete f;
    150c:	ldr	r0, [r4, #0]
    150e:	cbz	r0, 1516 <File::dec_refcount() [clone .isra.23]+0x1e>
    1510:	ldr	r3, [r0, #0]
    1512:	ldr	r3, [r3, #4]
    1514:	blx	r3
		}
		f = nullptr;
    1516:	movs	r3, #0
    1518:	str	r3, [r4, #0]
    151a:	pop	{r4, pc}

0000151c <MySpiClass::deactivate()>:

        // Activate SPI hardware with correct speed and mode.
        void activate() { if(doTransactions) SPI.beginTransaction(m_spiSettings); }
        // Deactivate SPI hardware.
        void deactivate() { if(doTransactions) SPI.endTransaction(); }
    151c:	ldrb	r3, [r0, #12]
    151e:	cmp	r3, #0
    1520:	beq.n	156a <MySpiClass::deactivate()+0x4e>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1522:	ldr	r3, [pc, #72]	; (156c <MySpiClass::deactivate()+0x50>)
    1524:	ldrb	r2, [r3, #19]
    1526:	cbz	r2, 156a <MySpiClass::deactivate()+0x4e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1528:	lsls	r2, r2, #31
    152a:	bpl.n	1532 <MySpiClass::deactivate()+0x16>
    152c:	ldr	r1, [r3, #40]	; 0x28
    152e:	ldr	r2, [pc, #64]	; (1570 <MySpiClass::deactivate()+0x54>)
    1530:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1532:	ldrb	r2, [r3, #19]
    1534:	lsls	r0, r2, #30
    1536:	bpl.n	1540 <MySpiClass::deactivate()+0x24>
    1538:	ldr	r2, [pc, #48]	; (156c <MySpiClass::deactivate()+0x50>)
    153a:	ldr	r1, [r2, #44]	; 0x2c
    153c:	ldr	r2, [pc, #52]	; (1574 <MySpiClass::deactivate()+0x58>)
    153e:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1540:	ldrb	r2, [r3, #19]
    1542:	lsls	r1, r2, #29
    1544:	bpl.n	154e <MySpiClass::deactivate()+0x32>
    1546:	ldr	r2, [pc, #36]	; (156c <MySpiClass::deactivate()+0x50>)
    1548:	ldr	r1, [r2, #48]	; 0x30
    154a:	ldr	r2, [pc, #44]	; (1578 <MySpiClass::deactivate()+0x5c>)
    154c:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    154e:	ldrb	r2, [r3, #19]
    1550:	lsls	r2, r2, #28
    1552:	bpl.n	155c <MySpiClass::deactivate()+0x40>
    1554:	ldr	r2, [pc, #20]	; (156c <MySpiClass::deactivate()+0x50>)
    1556:	ldr	r1, [r2, #52]	; 0x34
    1558:	ldr	r2, [pc, #32]	; (157c <MySpiClass::deactivate()+0x60>)
    155a:	str	r1, [r2, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    155c:	ldrb	r3, [r3, #19]
    155e:	lsls	r3, r3, #27
    1560:	bpl.n	156a <MySpiClass::deactivate()+0x4e>
    1562:	ldr	r3, [pc, #8]	; (156c <MySpiClass::deactivate()+0x50>)
    1564:	ldr	r2, [r3, #56]	; 0x38
    1566:	ldr	r3, [pc, #24]	; (1580 <MySpiClass::deactivate()+0x64>)
    1568:	str	r2, [r3, #0]
    156a:	bx	lr
    156c:	.word	0x200016b4
    1570:	.word	0xe000e100
    1574:	.word	0xe000e104
    1578:	.word	0xe000e108
    157c:	.word	0xe000e10c
    1580:	.word	0xe000e110

00001584 <MySpiClass::receive()>:

        // Receive a byte.
        uint8_t receive() { return SPI.transfer(0XFF); }
    1584:	ldr	r3, [pc, #20]	; (159c <MySpiClass::receive()+0x18>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1586:	movs	r2, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1588:	ldr	r3, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    158a:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    158c:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    158e:	tst.w	r2, #2031616	; 0x1f0000
    1592:	beq.n	158c <MySpiClass::receive()+0x8>
    1594:	ldr	r0, [r3, #116]	; 0x74
    1596:	uxtb	r0, r0
    1598:	bx	lr
    159a:	nop
    159c:	.word	0x200016b4

000015a0 <Print::print(char const*)>:
    15a0:	push	{r3, lr}
    15a2:	bl	3e4 <Print::write(char const*)>
    15a6:	pop	{r3, pc}

000015a8 <Print::println(unsigned long)>:

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    15a8:	push	{r3, r4, r5, lr}
    15aa:	mov	r5, r0
    15ac:	bl	400 <Print::print(unsigned long)>
    15b0:	mov	r4, r0
    15b2:	mov	r0, r5
    15b4:	bl	a154 <Print::println()>
    15b8:	add	r0, r4
    15ba:	pop	{r3, r4, r5, pc}

000015bc <FsVolume::bytesPerCluster() const>:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  uint32_t __attribute__((error("use sectorsPerCluster()"))) blocksPerCluster();
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
    15bc:	ldr.w	r3, [r0, #1152]	; 0x480
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    15c0:	cbz	r3, 15d0 <FsVolume::bytesPerCluster() const+0x14>
    15c2:	ldrb	r0, [r3, #6]
    15c4:	mov.w	r3, #512	; 0x200
    15c8:	lsl.w	r0, r3, r0
    15cc:	uxth	r0, r0
    15ce:	bx	lr
    15d0:	ldr.w	r0, [r0, #1156]	; 0x484
    15d4:	cbz	r0, 15da <FsVolume::bytesPerCluster() const+0x1e>
    15d6:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
    15da:	bx	lr

000015dc <FsVolume::clusterCount() const>:
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    15dc:	ldr.w	r3, [r0, #1152]	; 0x480
           m_xVol ? m_xVol->clusterCount() : 0;
    15e0:	cbz	r3, 15e8 <FsVolume::clusterCount() const+0xc>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    15e2:	ldr	r0, [r3, #28]
    15e4:	subs	r0, #1
    15e6:	bx	lr
    15e8:	ldr.w	r0, [r0, #1156]	; 0x484
    15ec:	cbz	r0, 15f2 <FsVolume::clusterCount() const+0x16>
    15ee:	ldr.w	r0, [r0, #1072]	; 0x430
  }
    15f2:	bx	lr

000015f4 <FsVolume::freeClusterCount() const>:
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    15f4:	mov	r3, r0
    return m_fVol ? m_fVol->freeClusterCount() :
    15f6:	ldr.w	r0, [r0, #1152]	; 0x480
           m_xVol ? m_xVol->freeClusterCount() : 0;
    15fa:	cbz	r0, 1600 <FsVolume::freeClusterCount() const+0xc>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    15fc:	b.w	64f4 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1600:	ldr.w	r0, [r3, #1156]	; 0x484
    1604:	cbz	r0, 160a <FsVolume::freeClusterCount() const+0x16>
    1606:	b.w	4404 <ExFatPartition::freeClusterCount()>
  }
    160a:	bx	lr

0000160c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    160c:	push	{r0, r1, r4, lr}
    160e:	add	r3, sp, #8
    1610:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1614:	ldrb	r3, [r0, #19]
    1616:	ldr	r1, [sp, #0]
    1618:	cmp	r3, #0
    161a:	beq.n	167a <SPIClass::beginTransaction(SPISettings)+0x6e>
			__disable_irq();
    161c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    161e:	ldrb	r3, [r0, #19]
    1620:	lsls	r2, r3, #31
    1622:	bpl.n	1630 <SPIClass::beginTransaction(SPISettings)+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1624:	ldr	r2, [pc, #200]	; (16f0 <SPIClass::beginTransaction(SPISettings)+0xe4>)
    1626:	ldr	r3, [r0, #20]
    1628:	ldr	r4, [r2, #0]
    162a:	ands	r3, r4
    162c:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    162e:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x02) {
    1630:	ldrb	r3, [r0, #19]
    1632:	lsls	r3, r3, #30
    1634:	bpl.n	1642 <SPIClass::beginTransaction(SPISettings)+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1636:	ldr	r2, [pc, #188]	; (16f4 <SPIClass::beginTransaction(SPISettings)+0xe8>)
    1638:	ldr	r3, [r0, #24]
    163a:	ldr	r4, [r2, #0]
    163c:	ands	r3, r4
    163e:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1640:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1642:	ldrb	r3, [r0, #19]
    1644:	lsls	r4, r3, #29
    1646:	bpl.n	1654 <SPIClass::beginTransaction(SPISettings)+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1648:	ldr	r2, [pc, #172]	; (16f8 <SPIClass::beginTransaction(SPISettings)+0xec>)
    164a:	ldr	r3, [r0, #28]
    164c:	ldr	r4, [r2, #0]
    164e:	ands	r3, r4
    1650:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1652:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1654:	ldrb	r3, [r0, #19]
    1656:	lsls	r2, r3, #28
    1658:	bpl.n	1666 <SPIClass::beginTransaction(SPISettings)+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    165a:	ldr	r2, [pc, #160]	; (16fc <SPIClass::beginTransaction(SPISettings)+0xf0>)
    165c:	ldr	r3, [r0, #32]
    165e:	ldr	r4, [r2, #0]
    1660:	ands	r3, r4
    1662:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1664:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1666:	ldrb	r3, [r0, #19]
    1668:	lsls	r3, r3, #27
    166a:	bpl.n	1678 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    166c:	ldr	r2, [pc, #144]	; (1700 <SPIClass::beginTransaction(SPISettings)+0xf4>)
    166e:	ldr	r3, [r0, #36]	; 0x24
    1670:	ldr	r4, [r2, #0]
    1672:	ands	r3, r4
    1674:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1676:	str	r3, [r2, #0]
			}
			__enable_irq();
    1678:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    167a:	ldr	r3, [r0, #8]
    167c:	cmp	r3, r1
    167e:	beq.n	16d6 <SPIClass::beginTransaction(SPISettings)+0xca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1680:	ldr	r3, [pc, #128]	; (1704 <SPIClass::beginTransaction(SPISettings)+0xf8>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1682:	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    1684:	ldr	r2, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1686:	ldr	r3, [pc, #128]	; (1708 <SPIClass::beginTransaction(SPISettings)+0xfc>)
    1688:	ubfx	r4, r2, #4, #2
    168c:	ubfx	r2, r2, #26, #3
    1690:	ldr.w	r3, [r3, r4, lsl #2]
    1694:	adds	r2, #1
    1696:	udiv	r2, r3, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    169a:	cbz	r1, 16a2 <SPIClass::beginTransaction(SPISettings)+0x96>
    169c:	udiv	r3, r2, r1
    16a0:	b.n	16a4 <SPIClass::beginTransaction(SPISettings)+0x98>
    16a2:	mov	r3, r2

			if (d && clkhz/d > _clock) d++;
    16a4:	cbz	r3, 16c6 <SPIClass::beginTransaction(SPISettings)+0xba>
    16a6:	udiv	r2, r2, r3
    16aa:	cmp	r1, r2
    16ac:	it	cc
    16ae:	addcc	r3, #1
			if (d > 257) d= 257;  // max div
    16b0:	cmp.w	r3, #258	; 0x102
    16b4:	bcs.n	16bc <SPIClass::beginTransaction(SPISettings)+0xb0>
			if (d > 2) {
    16b6:	cmp	r3, #2
    16b8:	bls.n	16c4 <SPIClass::beginTransaction(SPISettings)+0xb8>
    16ba:	b.n	16c0 <SPIClass::beginTransaction(SPISettings)+0xb4>
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
    16bc:	movw	r3, #257	; 0x101
			if (d > 2) {
				div = d-2;
    16c0:	subs	r3, #2
    16c2:	b.n	16c6 <SPIClass::beginTransaction(SPISettings)+0xba>
			} else {
				div =0;
    16c4:	movs	r3, #0
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    16c6:	lsrs	r2, r3, #1
    16c8:	orr.w	r3, r3, r2, lsl #8
    16cc:	lsls	r2, r2, #16
    16ce:	and.w	r2, r2, #16711680	; 0xff0000
    16d2:	orrs	r3, r2
    16d4:	str	r3, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    16d6:	ldr	r3, [r0, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    16d8:	movs	r2, #0
    16da:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    16dc:	movs	r2, #3
    16de:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    16e0:	ldr	r2, [r0, #12]
    16e2:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    16e4:	ldr	r2, [sp, #4]
    16e6:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    16e8:	movs	r2, #1
    16ea:	str	r2, [r3, #16]

	}
    16ec:	add	sp, #8
    16ee:	pop	{r4, pc}
    16f0:	.word	0xe000e180
    16f4:	.word	0xe000e184
    16f8:	.word	0xe000e188
    16fc:	.word	0xe000e18c
    1700:	.word	0xe000e190
    1704:	.word	0x400fc000
    1708:	.word	0x20000640

0000170c <MySpiClass::activate()>:
    public:
        // Initialize the SPI bus.
        void begin(SdSpiConfig config) {  (void) config; SPI.begin(); }

        // Activate SPI hardware with correct speed and mode.
        void activate() { if(doTransactions) SPI.beginTransaction(m_spiSettings); }
    170c:	push	{r3, lr}
    170e:	ldrb	r3, [r0, #12]
    1710:	cbz	r3, 171e <MySpiClass::activate()+0x12>
    1712:	adds	r0, #4
    1714:	ldmia.w	r0, {r1, r2}
    1718:	ldr	r0, [pc, #4]	; (1720 <MySpiClass::activate()+0x14>)
    171a:	bl	160c <SPIClass::beginTransaction(SPISettings)>
    171e:	pop	{r3, pc}
    1720:	.word	0x200016b4

00001724 <getCount()>:

    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    1724:	ldr	r2, [pc, #16]	; (1738 <getCount()+0x14>)
    1726:	ldrh	r3, [r2, #0]
    1728:	ldrh	r0, [r2, #2]
            {  
                /**
                 * @brief get number of data blocks in storage
                 * 
                 */
                if(front_ >= rear_) return front_ - rear_; return front_+ MAXBUF -rear_; 
    172a:	cmp	r3, r0
    172c:	it	cc
    172e:	addcc	r3, #200	; 0xc8
    1730:	subs	r0, r3, r0
    1732:	uxth	r0, r0

    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    1734:	bx	lr
    1736:	nop
    1738:	.word	0x20036e28

0000173c <pushData(unsigned long*)>:
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    173c:	push	{r3, r4, r5, lr}
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    173e:	ldr	r5, [pc, #44]	; (176c <pushData(unsigned long*)+0x30>)
    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    1740:	mov	r1, r0
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    1742:	ldrh	r4, [r5, #0]
                if(f >= MAXBUF) f=0;
                if(f == rear_) return 0;
    1744:	ldrh	r3, [r5, #2]
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
    1746:	adds	r4, #1
    1748:	uxth	r4, r4
                if(f >= MAXBUF) f=0;
    174a:	cmp	r4, #200	; 0xc8
    174c:	it	cs
    174e:	movcs	r4, #0
                if(f == rear_) return 0;
    1750:	cmp	r3, r4
    1752:	beq.n	1768 <pushData(unsigned long*)+0x2c>

                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
                memcpy(ptr,src,NBUF_ACQ*4);
    1754:	ldr	r0, [r5, #4]
    1756:	mov.w	r2, #1024	; 0x400
    175a:	add.w	r0, r0, r4, lsl #10
    175e:	bl	87a4 <memcpy>
                front_ = f;
    1762:	strh	r4, [r5, #0]
                return 1;
    1764:	movs	r0, #1
    1766:	pop	{r3, r4, r5, pc}
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ + 1;
                if(f >= MAXBUF) f=0;
                if(f == rear_) return 0;
    1768:	movs	r0, #0
    };

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    176a:	pop	{r3, r4, r5, pc}
    176c:	.word	0x20036e28

00001770 <pullData(unsigned long*, unsigned long)>:
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    1770:	push	{r4, r5, r6, lr}
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    1772:	ldr	r6, [pc, #60]	; (17b0 <pullData(unsigned long*, unsigned long)+0x40>)

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    1774:	mov	r5, r1
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    1776:	ldrh	r4, [r6, #2]
                if(r == (front_/ndbl)) return 0;
    1778:	ldrh	r3, [r6, #0]
                /** 
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
    177a:	udiv	r4, r4, r1
                if(r == (front_/ndbl)) return 0;
    177e:	udiv	r3, r3, r1
    1782:	cmp	r4, r3
    1784:	beq.n	17ac <pullData(unsigned long*, unsigned long)+0x3c>
    1786:	lsls	r2, r1, #10

                uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
                memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    1788:	ldr	r1, [r6, #4]
    178a:	mla	r1, r2, r4, r1
    178e:	bl	87a4 <memcpy>
                if(++r >= (MAXBUF/ndbl)) r=0;
    1792:	movs	r3, #200	; 0xc8
    1794:	adds	r1, r4, #1
                rear_ = r*ndbl;
                return 1;
    1796:	movs	r0, #1
                uint16_t r = (rear_/ndbl) ;
                if(r == (front_/ndbl)) return 0;

                uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
                memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
                if(++r >= (MAXBUF/ndbl)) r=0;
    1798:	udiv	r3, r3, r5
    179c:	uxth	r1, r1
    179e:	cmp	r1, r3
    17a0:	it	cs
    17a2:	movcs	r1, #0
                rear_ = r*ndbl;
    17a4:	smulbb	r1, r5, r1
    17a8:	strh	r1, [r6, #2]
    17aa:	pop	{r4, r5, r6, pc}
                 * @brief pull data from storage
                 * @param dst is pointer to data blocks
                 * @param ndbl is number of data blocks
                 */
                uint16_t r = (rear_/ndbl) ;
                if(r == (front_/ndbl)) return 0;
    17ac:	movs	r0, #0

    Data rawData(data_buffer);

    uint16_t getCount () { return rawData.getCount(); }
    uint16_t pushData(uint32_t * src){ return rawData.push(src);}
    uint16_t pullData(uint32_t * dst, uint32_t ndbl) {return rawData.pull(dst,ndbl);}
    17ae:	pop	{r4, r5, r6, pc}
    17b0:	.word	0x20036e28

000017b4 <sdCsInit(unsigned char)>:
};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}

void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); digitalWriteFast(pin, HIGH);}
    17b4:	push	{r4, lr}
    17b6:	mov	r4, r0
    17b8:	movs	r1, #1
    17ba:	bl	9c94 <pinMode>
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    17be:	ldr	r3, [pc, #16]	; (17d0 <sdCsInit(unsigned char)+0x1c>)
    17c0:	lsls	r0, r4, #4
    17c2:	adds	r2, r3, r0
    17c4:	ldr	r3, [r3, r0]
    17c6:	ldr	r2, [r2, #12]
    17c8:	str.w	r2, [r3, #132]	; 0x84
    17cc:	pop	{r4, pc}
    17ce:	nop
    17d0:	.word	0x2000088c

000017d4 <sdCsWrite(unsigned char, bool)>:
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWriteFast(pin, level); }
    17d4:	ldr	r3, [pc, #20]	; (17ec <sdCsWrite(unsigned char, bool)+0x18>)
    17d6:	lsls	r0, r0, #4
    17d8:	adds	r2, r3, r0
    17da:	ldr	r3, [r3, r0]
    17dc:	ldr	r2, [r2, #12]
    17de:	cbz	r1, 17e6 <sdCsWrite(unsigned char, bool)+0x12>
    17e0:	str.w	r2, [r3, #132]	; 0x84
    17e4:	bx	lr
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    17e6:	str.w	r2, [r3, #136]	; 0x88
    17ea:	bx	lr
    17ec:	.word	0x2000088c

000017f0 <storage_configure()>:
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;
    17f0:	ldr	r2, [pc, #436]	; (19a8 <storage_configure()+0x1b8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    17f2:	movs	r1, #0
    17f4:	ldr	r3, [pc, #436]	; (19ac <storage_configure()+0x1bc>)
    17f6:	ldr	r0, [pc, #440]	; (19b0 <storage_configure()+0x1c0>)
    *time = FS_TIME(tm.Hour, tm.Minute, tm.Second);
    *ms10 = tm.Second & 1 ? 100 : 0;
}

void storage_configure()
{
    17f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17fc:	sub	sp, #56	; 0x38
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    // Set Time callback
    FsDateTime::callback = dateTime;
    17fe:	str	r2, [r3, #0]
    1800:	bl	a204 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1804:	ldr	r0, [pc, #424]	; (19b0 <storage_configure()+0x1c0>)
    1806:	bl	a154 <Print::println()>
            }
      }
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
            delay(100);
    180a:	movs	r6, #0
                Serial.println("No sdio storage"); 
            }
      }
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
    180c:	movs	r0, #10
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    180e:	ldr	r5, [pc, #420]	; (19b4 <storage_configure()+0x1c4>)
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    1810:	ldr.w	r8, [pc, #460]	; 19e0 <storage_configure()+0x1f0>
    1814:	bl	17b4 <sdCsInit(unsigned char)>
            delay(100);
    1818:	movs	r0, #100	; 0x64
    181a:	bl	99f8 <delay>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    181e:	mov.w	ip, #10
    spiConfigBackupOptions = spiConfig.options;
    1822:	mov.w	lr, #0
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    1826:	ldr	r3, [pc, #400]	; (19b8 <storage_configure()+0x1c8>)
    1828:	add	r2, sp, #20
    182a:	add	r4, sp, #32
    182c:	strb.w	ip, [sp, #20]
    1830:	str	r3, [sp, #28]
    1832:	uxth	r7, r6
    1834:	strb.w	lr, [sp, #21]
    1838:	str.w	r8, [sp, #24]
    183c:	str.w	r3, [r5, #1212]	; 0x4bc
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    1840:	strb.w	ip, [r5, #1204]	; 0x4b4
    spiConfigBackupOptions = spiConfig.options;
    1844:	strb.w	lr, [r5, #1205]	; 0x4b5
    spiConfigBackupClock = spiConfig.maxSck;
    1848:	str.w	r8, [r5, #1208]	; 0x4b8
    184c:	ldmia	r2, {r0, r1, r2}
    184e:	stmia.w	r4, {r0, r1, r2}
    1852:	str	r3, [sp, #40]	; 0x28
    1854:	add	r3, sp, #44	; 0x2c
    1856:	strb.w	ip, [sp, #32]
    185a:	strb.w	lr, [sp, #33]	; 0x21
    185e:	str.w	r8, [sp, #36]	; 0x24
    1862:	ldmia.w	r4, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1866:	ldr	r4, [pc, #340]	; (19bc <storage_configure()+0x1cc>)
    1868:	stmia.w	r3, {r0, r1, r2}
    186c:	mov	r0, r4
    186e:	ldmia	r3, {r1, r2, r3}
    1870:	bl	7320 <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    1874:	ldrb.w	r9, [r5, #1199]	; 0x4af
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    1878:	str.w	r4, [r5, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    187c:	cmp.w	r9, #0
    1880:	beq.n	188c <storage_configure()+0x9c>
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED, &mySpi)) && tries<10)
    1882:	cmp	r7, #9
    1884:	ite	hi
    1886:	movhi	r4, #0
    1888:	movls	r4, #1
    188a:	b.n	189c <storage_configure()+0xac>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    188c:	mov	r1, r4
    188e:	subw	r0, r4, #1180	; 0x49c
    1892:	bl	6ee8 <FsVolume::begin(BlockDeviceInterface*)>
    1896:	cmp	r0, #0
    1898:	beq.n	1882 <storage_configure()+0x92>
    189a:	mov	r4, r9
    189c:	adds	r6, #1
    189e:	cbz	r4, 18ba <storage_configure()+0xca>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    18a0:	mov	r1, r7
    18a2:	ldr	r0, [pc, #268]	; (19b0 <storage_configure()+0x1c0>)
    18a4:	bl	a204 <Print::print(long)>
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 
    18a8:	ldr	r1, [pc, #276]	; (19c0 <storage_configure()+0x1d0>)
    18aa:	ldr	r0, [pc, #260]	; (19b0 <storage_configure()+0x1c0>)
    18ac:	bl	15a0 <Print::print(char const*)>
    18b0:	mov.w	r0, #1000	; 0x3e8
    18b4:	bl	99f8 <delay>
      else if(cs[ii]<BUILTIN_SDCARD)
      { 
            sdCsInit(cs[ii]);
            delay(100);
            uint16_t tries=0;
            while(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED, &mySpi)) && tries<10)
    18b8:	b.n	181e <storage_configure()+0x2e>
            { Serial.print(tries); Serial.print(" "); tries++; delay(1000); } 

            if(tries<10) 
    18ba:	cmp	r7, #9
    18bc:	ldr	r6, [pc, #260]	; (19c4 <storage_configure()+0x1d4>)
    18be:	ldr	r5, [pc, #264]	; (19c8 <storage_configure()+0x1d8>)
    18c0:	ldr	r7, [pc, #264]	; (19cc <storage_configure()+0x1dc>)
    18c2:	bls.n	18d6 <storage_configure()+0xe6>
            {
                status=1;
            }
            else
            {
                Serial.println("No spi storage");
    18c4:	ldr	r1, [pc, #264]	; (19d0 <storage_configure()+0x1e0>)
    18c6:	ldr	r0, [pc, #232]	; (19b0 <storage_configure()+0x1c0>)
    18c8:	bl	408 <Print::println(char const*)>
      }
      else
      {
            diskSize[ii]=0;
            diskSpace[ii]=0;
            clusterSize[ii]=1;
    18cc:	movs	r3, #1
            diskSpace[ii]=diskSize[ii]=sdx[ii].sdfs.freeClusterCount();
            Serial.println(diskSize[ii]) ;Serial.print(" ");
      }
      else
      {
            diskSize[ii]=0;
    18ce:	str	r4, [r6, #0]
            diskSpace[ii]=0;
    18d0:	str	r4, [r5, #0]
            clusterSize[ii]=1;
    18d2:	str	r3, [r7, #0]
      }
    }
}
    18d4:	b.n	19a2 <storage_configure()+0x1b2>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    18d6:	ldr	r0, [pc, #252]	; (19d4 <storage_configure()+0x1e4>)
    18d8:	bl	15dc <FsVolume::clusterCount() const>
    18dc:	mov	sl, r0
    18de:	ldr	r0, [pc, #244]	; (19d4 <storage_configure()+0x1e4>)
    18e0:	bl	15bc <FsVolume::bytesPerCluster() const>
    18e4:	umull	r8, r9, sl, r0
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    18e8:	ldr	r0, [pc, #232]	; (19d4 <storage_configure()+0x1e4>)
    18ea:	bl	15f4 <FsVolume::freeClusterCount() const>
    18ee:	rsb	sl, r0, sl
		  * (uint64_t)sdfs.bytesPerCluster();
    18f2:	ldr	r0, [pc, #224]	; (19d4 <storage_configure()+0x1e4>)
    18f4:	bl	15bc <FsVolume::bytesPerCluster() const>
    18f8:	umull	r2, r3, sl, r0
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    18fc:	mov.w	sl, #10
      if (status)
      {
            uint64_t totalSize = sdx[ii].totalSize();
            uint64_t usedSize  = sdx[ii].usedSize();

            Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1900:	ldr	r1, [pc, #212]	; (19d8 <storage_configure()+0x1e8>)
    1902:	ldr	r0, [pc, #172]	; (19b0 <storage_configure()+0x1c0>)
    1904:	strd	r2, r3, [sp, #8]
    1908:	ldr	r3, [pc, #208]	; (19dc <storage_configure()+0x1ec>)
    190a:	mov	r2, r4
    190c:	ldr	r3, [r3, #0]
    190e:	str	r3, [sp, #0]
    1910:	movs	r3, #10
    1912:	bl	a174 <Print::printf(char const*, ...)>
    1916:	mov	r2, r8
    1918:	mov	r3, r9
    191a:	str	r4, [sp, #4]
    191c:	str.w	sl, [sp]
    1920:	ldr	r0, [pc, #140]	; (19b0 <storage_configure()+0x1c0>)
    1922:	bl	a216 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1926:	ldr	r1, [pc, #152]	; (19c0 <storage_configure()+0x1d0>)
    1928:	ldr	r0, [pc, #132]	; (19b0 <storage_configure()+0x1c0>)
    192a:	bl	15a0 <Print::print(char const*)>
    192e:	str	r4, [sp, #4]
    1930:	str.w	sl, [sp]
    1934:	ldr	r0, [pc, #120]	; (19b0 <storage_configure()+0x1c0>)
    1936:	ldrd	r2, r3, [sp, #8]
    193a:	bl	a216 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    193e:	ldr	r0, [pc, #112]	; (19b0 <storage_configure()+0x1c0>)
    1940:	bl	a154 <Print::println()>

            Serial.print(sdx[ii].sdfs.clusterCount()); Serial.print(" "); 
    1944:	ldr	r0, [pc, #140]	; (19d4 <storage_configure()+0x1e4>)
    1946:	bl	15dc <FsVolume::clusterCount() const>
    194a:	mov	r1, r0
    194c:	ldr	r0, [pc, #96]	; (19b0 <storage_configure()+0x1c0>)
    194e:	bl	400 <Print::print(unsigned long)>
    1952:	ldr	r1, [pc, #108]	; (19c0 <storage_configure()+0x1d0>)
    1954:	ldr	r0, [pc, #88]	; (19b0 <storage_configure()+0x1c0>)
    1956:	bl	15a0 <Print::print(char const*)>
            Serial.print(sdx[ii].sdfs.freeClusterCount()); Serial.print(" ");
    195a:	ldr	r0, [pc, #120]	; (19d4 <storage_configure()+0x1e4>)
    195c:	bl	15f4 <FsVolume::freeClusterCount() const>
    1960:	mov	r1, r0
    1962:	ldr	r0, [pc, #76]	; (19b0 <storage_configure()+0x1c0>)
    1964:	bl	400 <Print::print(unsigned long)>
    1968:	ldr	r1, [pc, #84]	; (19c0 <storage_configure()+0x1d0>)
    196a:	ldr	r0, [pc, #68]	; (19b0 <storage_configure()+0x1c0>)
    196c:	bl	15a0 <Print::print(char const*)>

            clusterSize[ii] = sdx[ii].sdfs.bytesPerCluster()/512; // count sectors
    1970:	ldr	r0, [pc, #96]	; (19d4 <storage_configure()+0x1e4>)
    1972:	bl	15bc <FsVolume::bytesPerCluster() const>
    1976:	lsrs	r1, r0, #9
            Serial.println(clusterSize[ii]) ;Serial.print(" ");
    1978:	ldr	r0, [pc, #52]	; (19b0 <storage_configure()+0x1c0>)
            Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

            Serial.print(sdx[ii].sdfs.clusterCount()); Serial.print(" "); 
            Serial.print(sdx[ii].sdfs.freeClusterCount()); Serial.print(" ");

            clusterSize[ii] = sdx[ii].sdfs.bytesPerCluster()/512; // count sectors
    197a:	str	r1, [r7, #0]
            Serial.println(clusterSize[ii]) ;Serial.print(" ");
    197c:	bl	15a8 <Print::println(unsigned long)>
    1980:	ldr	r1, [pc, #60]	; (19c0 <storage_configure()+0x1d0>)
    1982:	ldr	r0, [pc, #44]	; (19b0 <storage_configure()+0x1c0>)
    1984:	bl	15a0 <Print::print(char const*)>

            diskSpace[ii]=diskSize[ii]=sdx[ii].sdfs.freeClusterCount();
    1988:	ldr	r0, [pc, #72]	; (19d4 <storage_configure()+0x1e4>)
    198a:	bl	15f4 <FsVolume::freeClusterCount() const>
    198e:	mov	r1, r0
    1990:	str	r0, [r6, #0]
    1992:	str	r0, [r5, #0]
            Serial.println(diskSize[ii]) ;Serial.print(" ");
    1994:	ldr	r0, [pc, #24]	; (19b0 <storage_configure()+0x1c0>)
    1996:	bl	15a8 <Print::println(unsigned long)>
    199a:	ldr	r1, [pc, #36]	; (19c0 <storage_configure()+0x1d0>)
    199c:	ldr	r0, [pc, #16]	; (19b0 <storage_configure()+0x1c0>)
    199e:	bl	15a0 <Print::print(char const*)>
            diskSize[ii]=0;
            diskSpace[ii]=0;
            clusterSize[ii]=1;
      }
    }
}
    19a2:	add	sp, #56	; 0x38
    19a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19a8:	.word	0x00001437
    19ac:	.word	0x20003d54
    19b0:	.word	0x20001704
    19b4:	.word	0x20036e48
    19b8:	.word	0x20036e18
    19bc:	.word	0x200372e8
    19c0:	.word	0x20000e74
    19c4:	.word	0x20036ddc
    19c8:	.word	0x20036de0
    19cc:	.word	0x20003dd8
    19d0:	.word	0x200010f7
    19d4:	.word	0x20036e4c
    19d8:	.word	0x20001106
    19dc:	.word	0x20001ddc
    19e0:	.word	0x01f78a40

000019e4 <listDisks()>:

void listDisks(void)
{
    19e4:	push	{r0, r1, r2, r4, r5, lr}
    for(int ii=0;ii<nsd;ii++)
    {
        Serial.print("\n"); 
    19e6:	ldr	r4, [pc, #60]	; (1a24 <listDisks()+0x40>)
    19e8:	ldr	r5, [pc, #60]	; (1a28 <listDisks()+0x44>)
    19ea:	mov	r0, r4
    19ec:	mov	r1, r5
    19ee:	bl	15a0 <Print::print(char const*)>
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]);
    19f2:	ldr	r3, [pc, #56]	; (1a2c <listDisks()+0x48>)
    19f4:	movs	r2, #0
    19f6:	ldr	r1, [pc, #56]	; (1a30 <listDisks()+0x4c>)
    19f8:	ldr	r3, [r3, #0]
    19fa:	mov	r0, r4
    19fc:	str	r3, [sp, #0]
    19fe:	movs	r3, #10
    1a00:	bl	a174 <Print::printf(char const*, ...)>
        Serial.printf("%d %d",sdx[ii].sdfs.freeClusterCount(),diskSize[ii]);
    1a04:	ldr	r0, [pc, #44]	; (1a34 <listDisks()+0x50>)
    1a06:	bl	15f4 <FsVolume::freeClusterCount() const>
    1a0a:	ldr	r3, [pc, #44]	; (1a38 <listDisks()+0x54>)
    1a0c:	mov	r2, r0
    1a0e:	ldr	r1, [pc, #44]	; (1a3c <listDisks()+0x58>)
    1a10:	ldr	r3, [r3, #0]
    1a12:	mov	r0, r4
    1a14:	bl	a174 <Print::printf(char const*, ...)>
    }
    Serial.print("\n"); 
    1a18:	mov	r1, r5
    1a1a:	mov	r0, r4
    1a1c:	bl	15a0 <Print::print(char const*)>
}
    1a20:	add	sp, #12
    1a22:	pop	{r4, r5, pc}
    1a24:	.word	0x20001704
    1a28:	.word	0x2000125c
    1a2c:	.word	0x20001ddc
    1a30:	.word	0x20001106
    1a34:	.word	0x20036e4c
    1a38:	.word	0x20036ddc
    1a3c:	.word	0x20001118

00001a40 <checkReboot()>:

int16_t checkReboot(void)
{
    int ii=0;
    while((ii<nsd) && (diskSpace[ii]<MIN_SPACE)) ii++;
    1a40:	ldr	r3, [pc, #20]	; (1a58 <checkReboot()+0x18>)
    if(ii<nsd) CPU_RESTART;
    return -1;
}
    1a42:	mov.w	r0, #4294967295
}

int16_t checkReboot(void)
{
    int ii=0;
    while((ii<nsd) && (diskSpace[ii]<MIN_SPACE)) ii++;
    1a46:	ldr	r3, [r3, #0]
    1a48:	cmp.w	r3, #307200	; 0x4b000
    if(ii<nsd) CPU_RESTART;
    1a4c:	ittt	cs
    1a4e:	ldrcs	r2, [pc, #12]	; (1a5c <checkReboot()+0x1c>)
    1a50:	ldrcs	r3, [pc, #12]	; (1a60 <checkReboot()+0x20>)
    1a52:	strcs	r2, [r3, #0]
    return -1;
}
    1a54:	bx	lr
    1a56:	nop
    1a58:	.word	0x20036de0
    1a5c:	.word	0x05fa0004
    1a60:	.word	0xe000ed0c

00001a64 <saveData(short)>:
    return 1;
}

/* main data filing routine */
int16_t saveData(int16_t status)
{   static char dirName[80];
    1a64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    static char fileName[80];
    static char header[512];
    static int dirFlag=0;

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1a68:	subs	r4, r0, #0
    return 1;
}

/* main data filing routine */
int16_t saveData(int16_t status)
{   static char dirName[80];
    1a6a:	sub	sp, #84	; 0x54
    static char fileName[80];
    static char header[512];
    static int dirFlag=0;

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1a6c:	blt.w	1c28 <saveData(short)+0x1c4>

    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    1a70:	movs	r1, #4
    1a72:	ldr	r0, [pc, #672]	; (1d14 <saveData(short)+0x2b0>)
    1a74:	bl	1770 <pullData(unsigned long*, unsigned long)>
    1a78:	cmp	r0, #0
    1a7a:	beq.n	1b74 <saveData(short)+0x110>
    {   disk_count++;
    1a7c:	ldr	r2, [pc, #664]	; (1d18 <saveData(short)+0x2b4>)
    1a7e:	ldr	r3, [r2, #0]
    1a80:	adds	r3, #1
    1a82:	str	r3, [r2, #0]
        if(status==CLOSED) // file closed: should open
    1a84:	cbnz	r4, 1ac8 <saveData(short)+0x64>
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1a86:	ldr	r3, [pc, #660]	; (1d1c <saveData(short)+0x2b8>)
    1a88:	movs	r2, #1

static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
    1a8a:	ldr	r7, [pc, #660]	; (1d20 <saveData(short)+0x2bc>)
    1a8c:	mov	r8, r3
    1a8e:	ldr.w	r9, [pc, #740]	; 1d74 <saveData(short)+0x310>
    1a92:	mov	r5, r7
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1a94:	strb	r2, [r3, #12]

static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
    1a96:	ldr	r4, [r7, #0]
    1a98:	ldr	r6, [pc, #644]	; (1d20 <saveData(short)+0x2bc>)
    1a9a:	cmp	r4, #0
    1a9c:	bgt.n	1b9c <saveData(short)+0x138>
    1a9e:	ldr.w	r3, [r9, r4, lsl #2]
    1aa2:	cmp	r3, #0
    1aa4:	beq.w	1c2c <saveData(short)+0x1c8>
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    1aa8:	mov.w	r3, #1224	; 0x4c8
    1aac:	ldr	r0, [pc, #628]	; (1d24 <saveData(short)+0x2c0>)
    1aae:	mla	r0, r3, r4, r0
    1ab2:	adds	r0, #4
    1ab4:	bl	15f4 <FsVolume::freeClusterCount() const>
    1ab8:	ldr	r3, [pc, #620]	; (1d28 <saveData(short)+0x2c4>)
    1aba:	cmp.w	r0, #307200	; 0x4b000
    1abe:	str.w	r0, [r3, r4, lsl #2]
    1ac2:	bcc.w	1c2c <saveData(short)+0x1c8>
    1ac6:	b.n	1b9c <saveData(short)+0x138>
            {
               return MUST_REBOOT; // if file open fails: don't do anything
            }
        }
        //
        if(status==OPENED) // file is open: write first record (header)
    1ac8:	cmp	r4, #1
    1aca:	bne.n	1b5a <saveData(short)+0xf6>
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1acc:	bl	9bb8 <rtc_get>
    1ad0:	add	r1, sp, #24
    1ad2:	bl	1184 <breakTime(unsigned long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    1ad6:	ldrb.w	r2, [sp, #24]
    1ada:	ldr	r5, [pc, #592]	; (1d2c <saveData(short)+0x2c8>)

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    iptr[2] = FSAMP;
    iptr[3] = NCHAN_ACQ;
    1adc:	movs	r4, #2
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    1ade:	str	r2, [sp, #16]
    1ae0:	ldrb.w	r2, [sp, #25]
    1ae4:	mov	r0, r5
    1ae6:	ldrb.w	r3, [sp, #30]
    1aea:	str	r2, [sp, #12]
    1aec:	ldrb.w	r2, [sp, #26]
    1af0:	addw	r3, r3, #1970	; 0x7b2
    1af4:	ldr	r1, [pc, #568]	; (1d30 <saveData(short)+0x2cc>)
    1af6:	str	r2, [sp, #8]
    1af8:	ldrb.w	r2, [sp, #28]
    1afc:	str	r2, [sp, #4]
    1afe:	ldrb.w	r2, [sp, #29]
    1b02:	str	r2, [sp, #0]
    1b04:	ldr	r2, [pc, #556]	; (1d34 <saveData(short)+0x2d0>)
    1b06:	bl	b298 <sprintf>
    char *ptr = header+(nd+1);

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    1b0a:	movs	r2, #4
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);
    1b0c:	adds	r0, #1

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    1b0e:	str	r2, [r5, r0]
    tmElements_t tm;
    breakTime(rtc_get(), tm);

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);
    1b10:	adds	r3, r5, r0

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    1b12:	ldr	r2, [pc, #548]	; (1d38 <saveData(short)+0x2d4>)
    iptr[2] = FSAMP;
    iptr[3] = NCHAN_ACQ;
    1b14:	str	r4, [r3, #12]
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    char *ptr = header+(nd+1);

    int32_t *iptr = (int32_t *) ptr;
    iptr[0] = 4;                    // SW version
    iptr[1] = (int32_t)SerNum;      // serial number
    1b16:	ldr	r2, [r2, #0]
    1b18:	str	r2, [r3, #4]
    iptr[2] = FSAMP;
    1b1a:	movw	r2, #48000	; 0xbb80
    1b1e:	str	r2, [r3, #8]
    iptr[3] = NCHAN_ACQ;
    iptr[4] = t_acq;
    1b20:	ldr	r2, [pc, #536]	; (1d3c <saveData(short)+0x2d8>)
    1b22:	ldr	r2, [r2, #0]
    1b24:	str	r2, [r3, #16]
    iptr[5] = 0;
    1b26:	movs	r2, #0
    1b28:	str	r2, [r3, #20]

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    1b2a:	movs	r3, #85	; 0x55
    1b2c:	strb.w	r3, [r5, #508]	; 0x1fc
    1b30:	strb.w	r3, [r5, #509]	; 0x1fd
    1b34:	strb.w	r3, [r5, #510]	; 0x1fe
    1b38:	strb.w	r3, [r5, #511]	; 0x1ff
    1b3c:	ldr	r3, [pc, #512]	; (1d40 <saveData(short)+0x2dc>)
    1b3e:	ldr	r0, [r3, #16]
	virtual size_t write(const uint8_t *buf, size_t size) {
		return (f) ? f->write((void*)buf, size) : 0;
	}

	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1b40:	cbnz	r0, 1b48 <saveData(short)+0xe4>
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
                if(file) 
                    status = OPENED; 
                else 
                {   Serial.println("Failing open file");
                    return MUST_REBOOT; 
    1b42:	mvn.w	r0, #1
    1b46:	b.n	1e52 <saveData(short)+0x3ee>
    1b48:	ldr	r3, [r0, #0]
    1b4a:	mov.w	r2, #512	; 0x200
    1b4e:	mov	r1, r5
    1b50:	ldr	r3, [r3, #12]
    1b52:	blx	r3
            }
        }
        //
        if(status==OPENED) // file is open: write first record (header)
        {   makeHeader(header);
            if(file.write((const void*)header,512) < 512) return MUST_REBOOT; else status=2;
    1b54:	cmp.w	r0, #512	; 0x200
    1b58:	bcc.n	1b42 <saveData(short)+0xde>
    1b5a:	ldr	r3, [pc, #484]	; (1d40 <saveData(short)+0x2dc>)
    1b5c:	ldr	r0, [r3, #16]
    1b5e:	cmp	r0, #0
    1b60:	beq.n	1b42 <saveData(short)+0xde>
    1b62:	ldr	r3, [r0, #0]
    1b64:	mov.w	r2, #4096	; 0x1000
    1b68:	ldr	r1, [pc, #424]	; (1d14 <saveData(short)+0x2b0>)
    1b6a:	ldr	r3, [r3, #12]
    1b6c:	blx	r3
        }
        //
        if(status>=RUNNING) // file is open, header written: store data records
        {   
            if(file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER) < 4*MAX_DISK_BUFFER) return MUST_REBOOT;
    1b6e:	cmp.w	r0, #4096	; 0x1000
    1b72:	bcc.n	1b42 <saveData(short)+0xde>
        }
    }
    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    1b74:	cmp	r4, #3
    1b76:	bne.n	1b86 <saveData(short)+0x122>
    {
        // writes are done, so enable again transaction activations
        file.flush();
    1b78:	ldr	r0, [pc, #452]	; (1d40 <saveData(short)+0x2dc>)
    1b7a:	bl	656 <File::flush()>
        file.close();
    1b7e:	ldr	r0, [pc, #448]	; (1d40 <saveData(short)+0x2dc>)
    1b80:	bl	bac <File::close()>
    1b84:	b.n	1c24 <saveData(short)+0x1c0>
        status = CLOSED;
    }
    if(status==MUSTSTOP) // should close file and stop
    1b86:	cmp	r4, #4
    1b88:	bne.n	1c28 <saveData(short)+0x1c4>
    {   
        file.flush();
    1b8a:	ldr	r0, [pc, #436]	; (1d40 <saveData(short)+0x2dc>)
    1b8c:	bl	656 <File::flush()>
        file.close();
    1b90:	ldr	r0, [pc, #428]	; (1d40 <saveData(short)+0x2dc>)
    1b92:	bl	bac <File::close()>
        status = STOPPED;
    1b96:	mov.w	r0, #4294967295
    1b9a:	b.n	1e52 <saveData(short)+0x3ee>
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1b9c:	movs	r3, #0

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    1b9e:	ldr	r4, [pc, #384]	; (1d20 <saveData(short)+0x2bc>)
        bool doTransactions=true;

};
MySpiClass mySpi;

void doTransactions(bool val) {mySpi.doTransactions=val;}
    1ba0:	strb.w	r3, [r8, #12]

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    1ba4:	ldr	r3, [r6, #0]
    1ba6:	cmp	r3, #0
    1ba8:	bgt.n	1be4 <saveData(short)+0x180>
    {   sdx[isd].sdfs.chvol();
    1baa:	ldr	r5, [pc, #376]	; (1d24 <saveData(short)+0x2c0>)
    1bac:	mov.w	r7, #1224	; 0x4c8
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
           m_xVol ? m_xVol->chdir(path) : false;
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
    1bb0:	ldr	r2, [pc, #400]	; (1d44 <saveData(short)+0x2e0>)
    1bb2:	mla	r3, r7, r3, r5
        Serial.println(); Serial.print(isd);
    1bb6:	ldr	r0, [pc, #400]	; (1d48 <saveData(short)+0x2e4>)
    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    doTransactions(false);
    if(isd<nsd) 
    {   sdx[isd].sdfs.chvol();
    1bb8:	adds	r3, #4
    1bba:	str	r3, [r2, #0]
        Serial.println(); Serial.print(isd);
    1bbc:	bl	a154 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1bc0:	ldr	r1, [r4, #0]
    1bc2:	ldr	r0, [pc, #388]	; (1d48 <saveData(short)+0x2e4>)
    1bc4:	bl	a204 <Print::print(long)>
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    1bc8:	ldr	r1, [pc, #384]	; (1d4c <saveData(short)+0x2e8>)
    1bca:	ldr	r0, [pc, #380]	; (1d48 <saveData(short)+0x2e4>)
    1bcc:	bl	15a0 <Print::print(char const*)>
    1bd0:	ldr	r0, [r4, #0]
    1bd2:	mla	r0, r7, r0, r5
    1bd6:	adds	r0, #4
    1bd8:	bl	15f4 <FsVolume::freeClusterCount() const>
    1bdc:	mov	r1, r0
    1bde:	ldr	r0, [pc, #360]	; (1d48 <saveData(short)+0x2e4>)
    1be0:	bl	400 <Print::print(unsigned long)>
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1be4:	ldr	r2, [pc, #360]	; (1d50 <saveData(short)+0x2ec>)
    1be6:	ldr	r3, [r6, #0]
    1be8:	ldr	r1, [r2, #0]
    isd_=isd;
    1bea:	str	r3, [r2, #0]
    {   sdx[isd].sdfs.chvol();
        Serial.println(); Serial.print(isd);
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1bec:	cmp	r3, r1
    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    {   disk_count++;
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
    1bee:	ldr	r5, [pc, #356]	; (1d54 <saveData(short)+0x2f0>)
    {   sdx[isd].sdfs.chvol();
        Serial.println(); Serial.print(isd);
        Serial.print(": "); Serial.print(sdx[isd].sdfs.freeClusterCount());
    }
    //
    if(isd != isd_) hour_=0; // set hour_ to zero to trigger creation of directories in new disk
    1bf0:	ittt	ne
    1bf2:	ldrne	r1, [pc, #356]	; (1d58 <saveData(short)+0x2f4>)
    1bf4:	movne	r0, #0
    1bf6:	strne	r0, [r1, #0]
    isd_=isd;
    if(isd==nsd) return (SDClass *) 0; else return &sdx[isd];
    1bf8:	cmp	r3, #1
    1bfa:	ittet	ne
    1bfc:	movne.w	r1, #1224	; 0x4c8
    1c00:	ldrne	r2, [pc, #288]	; (1d24 <saveData(short)+0x2c0>)
    1c02:	moveq	r3, #0
    1c04:	mlane	r3, r1, r3, r2
    //fetch data from circular buffer
    if(pullData(diskBuffer,NDBL))
    {   disk_count++;
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
    1c08:	str	r3, [r5, #0]
    1c0a:	cmp	r3, #0
    1c0c:	beq.n	1b42 <saveData(short)+0xde>
            //
            if(newDirectory(dirName,dirFlag)) 
    1c0e:	ldr	r4, [pc, #332]	; (1d5c <saveData(short)+0x2f8>)
    1c10:	ldr	r7, [r4, #0]
    isd_=isd;
    if(isd==nsd) return (SDClass *) 0; else return &sdx[isd];
}

static int16_t newDirectory(char *dirName, int dirFlag)
{ if(newHour())
    1c12:	bl	1160 <newHour()>
    1c16:	cbnz	r0, 1c34 <saveData(short)+0x1d0>
            if(newDirectory(dirName,dirFlag)) 
            {   if(!msd->sdfs.exists(dirName) && !msd->sdfs.mkdir(dirName)) dirFlag++;          
                if(!msd->sdfs.chdir(dirName)) dirFlag++; else dirFlag=0;
            }
            //
            if(dirFlag>5) return MUST_REBOOT;   // too many directory errors
    1c18:	ldr	r3, [r4, #0]
    1c1a:	cmp	r3, #5
    1c1c:	bgt.n	1b42 <saveData(short)+0xde>
            if(dirFlag>0) return CLOSED;        // create new directory with different name
    1c1e:	cmp	r3, #0
    1c20:	ble.w	1dc2 <saveData(short)+0x35e>
    1c24:	movs	r0, #0
    1c26:	b.n	1e52 <saveData(short)+0x3ee>
    1c28:	mov	r0, r4
    1c2a:	b.n	1e52 <saveData(short)+0x3ee>
static SDClass *checkDiskSpace(void)
{   static int isd_ = nsd;

    doTransactions(true);
    while((isd<nsd) && ((diskSize[isd]==0) 
            || ((diskSpace[isd]=sdx[isd].sdfs.freeClusterCount()) < MIN_SPACE) )) isd++;
    1c2c:	ldr	r3, [r5, #0]
    1c2e:	adds	r3, #1
    1c30:	str	r3, [r5, #0]
    1c32:	b.n	1a96 <saveData(short)+0x32>

static int16_t newDirectory(char *dirName, int dirFlag)
{ if(newHour())
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    1c34:	bl	9bb8 <rtc_get>
    1c38:	add	r1, sp, #24
    1c3a:	bl	1184 <breakTime(unsigned long, tmElements_t&)>
    1c3e:	ldr	r2, [pc, #248]	; (1d38 <saveData(short)+0x2d4>)
    1c40:	ldrb.w	lr, [sp, #26]
    1c44:	ldrb.w	r0, [sp, #28]
    1c48:	ldrb.w	r1, [sp, #29]
    1c4c:	ldrb.w	r3, [sp, #30]
        if(!dirFlag)
    1c50:	cbnz	r7, 1c6e <saveData(short)+0x20a>
        {
            sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                          DirPrefix,(unsigned int)SerNum,
                                  tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1c52:	addw	r3, r3, #1970	; 0x7b2
    1c56:	str	r0, [sp, #8]
    1c58:	str	r1, [sp, #4]
    1c5a:	str.w	lr, [sp, #12]
    1c5e:	str	r3, [sp, #0]
    1c60:	ldr	r1, [pc, #252]	; (1d60 <saveData(short)+0x2fc>)
    1c62:	ldr	r3, [r2, #0]
    1c64:	ldr	r0, [pc, #252]	; (1d64 <saveData(short)+0x300>)
    1c66:	ldr	r2, [pc, #256]	; (1d68 <saveData(short)+0x304>)
    1c68:	bl	b298 <sprintf>
    1c6c:	b.n	1c8a <saveData(short)+0x226>
        }
        else
        {
            sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d_%02d/", 
                          DirPrefix,(unsigned int)SerNum,
                                  tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour,dirFlag);
    1c6e:	addw	r3, r3, #1970	; 0x7b2
    1c72:	str	r0, [sp, #8]
    1c74:	str	r1, [sp, #4]
    1c76:	str	r7, [sp, #16]
    1c78:	str.w	lr, [sp, #12]
    1c7c:	str	r3, [sp, #0]
    1c7e:	ldr	r1, [pc, #236]	; (1d6c <saveData(short)+0x308>)
    1c80:	ldr	r3, [r2, #0]
    1c82:	ldr	r0, [pc, #224]	; (1d64 <saveData(short)+0x300>)
    1c84:	ldr	r2, [pc, #224]	; (1d68 <saveData(short)+0x304>)
    1c86:	bl	b298 <sprintf>
        }

        //
        Serial.print("\n"); Serial.print(dirName);
    1c8a:	ldr	r1, [pc, #228]	; (1d70 <saveData(short)+0x30c>)
    1c8c:	ldr	r0, [pc, #184]	; (1d48 <saveData(short)+0x2e4>)
    1c8e:	bl	15a0 <Print::print(char const*)>
    1c92:	ldr	r1, [pc, #208]	; (1d64 <saveData(short)+0x300>)
    1c94:	ldr	r0, [pc, #176]	; (1d48 <saveData(short)+0x2e4>)
    1c96:	bl	15a0 <Print::print(char const*)>
        if(status==CLOSED) // file closed: should open
        {   //doTransactions(true);
            if(!(msd=checkDiskSpace())) return MUST_REBOOT;
            //
            if(newDirectory(dirName,dirFlag)) 
            {   if(!msd->sdfs.exists(dirName) && !msd->sdfs.mkdir(dirName)) dirFlag++;          
    1c9a:	ldr	r3, [r5, #0]
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    1c9c:	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1ca0:	cbz	r1, 1cba <saveData(short)+0x256>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1ca2:	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1ca4:	ldr	r2, [pc, #188]	; (1d64 <saveData(short)+0x300>)
    1ca6:	add	r0, sp, #24
    1ca8:	strb.w	r3, [sp, #24]
    1cac:	strb.w	r3, [sp, #25]
    1cb0:	strb.w	r3, [sp, #26]
    1cb4:	bl	5c4c <FatFile::open(FatVolume*, char const*, int)>
    1cb8:	b.n	1cfe <saveData(short)+0x29a>
    1cba:	ldr.w	r0, [r3, #1160]	; 0x488
    1cbe:	cbnz	r0, 1ce6 <saveData(short)+0x282>
    1cc0:	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1cc2:	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1cc6:	cbz	r1, 1d04 <saveData(short)+0x2a0>
    1cc8:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1cca:	ldr	r2, [pc, #152]	; (1d64 <saveData(short)+0x300>)
    1ccc:	add.w	r1, r1, #1096	; 0x448
    1cd0:	add	r0, sp, #24
    1cd2:	strb.w	r3, [sp, #24]
    1cd6:	strb.w	r3, [sp, #25]
    1cda:	strb.w	r3, [sp, #26]
    1cde:	movs	r3, #1
    1ce0:	bl	5dd0 <FatFile::mkdir(FatFile*, char const*, bool)>
    1ce4:	b.n	1d92 <saveData(short)+0x32e>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    1ce6:	strb.w	r1, [sp, #73]	; 0x49
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1cea:	mov	r3, r1
    1cec:	strb.w	r1, [sp, #74]	; 0x4a
    1cf0:	strb.w	r1, [sp, #75]	; 0x4b
    1cf4:	mov	r1, r0
    1cf6:	ldr	r2, [pc, #108]	; (1d64 <saveData(short)+0x300>)
    1cf8:	add	r0, sp, #24
    1cfa:	bl	4104 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1cfe:	cmp	r0, #0
    1d00:	bne.n	1d96 <saveData(short)+0x332>
    1d02:	b.n	1cc0 <saveData(short)+0x25c>
    1d04:	ldr.w	r0, [r3, #1160]	; 0x488
    1d08:	cbnz	r0, 1d78 <saveData(short)+0x314>
    1d0a:	ldr	r3, [r4, #0]
    1d0c:	adds	r3, #1
    1d0e:	str	r3, [r4, #0]
    1d10:	b.n	1d96 <saveData(short)+0x332>
    1d12:	nop
    1d14:	.word	0x20035ddc
    1d18:	.word	0x20036de4
    1d1c:	.word	0x20036e18
    1d20:	.word	0x20003d40
    1d24:	.word	0x20036e48
    1d28:	.word	0x20036de0
    1d2c:	.word	0x20037392
    1d30:	.word	0x20001188
    1d34:	.word	0x20001183
    1d38:	.word	0x2000292c
    1d3c:	.word	0x20001de4
    1d40:	.word	0x20036df0
    1d44:	.word	0x20003d88
    1d48:	.word	0x20001704
    1d4c:	.word	0x20000ec7
    1d50:	.word	0x20001854
    1d54:	.word	0x20036e14
    1d58:	.word	0x20036e04
    1d5c:	.word	0x20003d98
    1d60:	.word	0x20001120
    1d64:	.word	0x20037592
    1d68:	.word	0x2000111e
    1d6c:	.word	0x2000113b
    1d70:	.word	0x2000125c
    1d74:	.word	0x20036ddc
    1d78:	strb.w	r1, [sp, #73]	; 0x49
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1d7c:	movs	r3, #1
    1d7e:	strb.w	r1, [sp, #74]	; 0x4a
    1d82:	strb.w	r1, [sp, #75]	; 0x4b
    1d86:	add.w	r1, r0, #1096	; 0x448
    1d8a:	ldr	r2, [pc, #204]	; (1e58 <saveData(short)+0x3f4>)
    1d8c:	add	r0, sp, #24
    1d8e:	bl	49a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1d92:	cmp	r0, #0
    1d94:	beq.n	1d0a <saveData(short)+0x2a6>
                if(!msd->sdfs.chdir(dirName)) dirFlag++; else dirFlag=0;
    1d96:	ldr	r3, [r5, #0]
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
    1d98:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1d9c:	cbz	r0, 1da6 <saveData(short)+0x342>
    1d9e:	ldr	r1, [pc, #184]	; (1e58 <saveData(short)+0x3f4>)
    1da0:	bl	665c <FatVolume::chdir(char const*)>
    1da4:	b.n	1db8 <saveData(short)+0x354>
    1da6:	ldr.w	r0, [r3, #1160]	; 0x488
    1daa:	cbnz	r0, 1db2 <saveData(short)+0x34e>
    1dac:	ldr	r3, [r4, #0]
    1dae:	adds	r3, #1
    1db0:	b.n	1dbe <saveData(short)+0x35a>
    1db2:	ldr	r1, [pc, #164]	; (1e58 <saveData(short)+0x3f4>)
    1db4:	bl	4550 <ExFatVolume::chdir(char const*)>
    1db8:	cmp	r0, #0
    1dba:	beq.n	1dac <saveData(short)+0x348>
    1dbc:	movs	r3, #0
    1dbe:	str	r3, [r4, #0]
    1dc0:	b.n	1c18 <saveData(short)+0x1b4>

}
static int16_t newFileName(char *fileName)
{
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1dc2:	bl	9bb8 <rtc_get>
    1dc6:	add	r1, sp, #24
    1dc8:	bl	1184 <breakTime(unsigned long, tmElements_t&)>
	sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, tm.Hour, tm.Minute, tm.Second);
    1dcc:	ldrb.w	r2, [sp, #24]
    1dd0:	ldrb.w	r3, [sp, #26]
    1dd4:	str	r2, [sp, #4]
    1dd6:	ldrb.w	r2, [sp, #25]
    1dda:	ldr	r1, [pc, #128]	; (1e5c <saveData(short)+0x3f8>)
    1ddc:	str	r2, [sp, #0]
    1dde:	ldr	r0, [pc, #128]	; (1e60 <saveData(short)+0x3fc>)
    1de0:	ldr	r2, [pc, #128]	; (1e64 <saveData(short)+0x400>)
    1de2:	bl	b298 <sprintf>
    //
    Serial.print("\n"); Serial.print(isd); Serial.print(": ");Serial.print(fileName);
    1de6:	ldr	r1, [pc, #128]	; (1e68 <saveData(short)+0x404>)
    1de8:	ldr	r0, [pc, #128]	; (1e6c <saveData(short)+0x408>)
    1dea:	bl	15a0 <Print::print(char const*)>
    1dee:	ldr	r1, [r6, #0]
    1df0:	ldr	r0, [pc, #120]	; (1e6c <saveData(short)+0x408>)
    1df2:	bl	a204 <Print::print(long)>
    1df6:	ldr	r1, [pc, #120]	; (1e70 <saveData(short)+0x40c>)
    1df8:	ldr	r0, [pc, #112]	; (1e6c <saveData(short)+0x408>)
    1dfa:	bl	15a0 <Print::print(char const*)>
    1dfe:	ldr	r1, [pc, #96]	; (1e60 <saveData(short)+0x3fc>)
    1e00:	ldr	r0, [pc, #104]	; (1e6c <saveData(short)+0x408>)
    1e02:	bl	15a0 <Print::print(char const*)>
            if(dirFlag>5) return MUST_REBOOT;   // too many directory errors
            if(dirFlag>0) return CLOSED;        // create new directory with different name

            if(newFileName(fileName))
            {   
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
    1e06:	ldr	r1, [r5, #0]
    1e08:	ldr	r2, [pc, #84]	; (1e60 <saveData(short)+0x3fc>)
    1e0a:	add	r0, sp, #24
    1e0c:	ldr	r3, [r1, #0]
    1e0e:	ldr	r4, [r3, #0]
    1e10:	movs	r3, #2
    1e12:	blx	r4
	}
#ifdef FILE_USE_MOVE
	// Move assignment.
	File& operator = (const File&& file) {
		//Serial.println("File move assignment");
		if (file.f) file.f->refcount++;
    1e14:	ldr	r3, [sp, #40]	; 0x28
    1e16:	cbz	r3, 1e1e <saveData(short)+0x3ba>
    1e18:	ldr	r2, [r3, #4]
    1e1a:	adds	r2, #1
    1e1c:	str	r2, [r3, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1e1e:	ldr	r4, [pc, #84]	; (1e74 <saveData(short)+0x410>)
    1e20:	ldr	r3, [r4, #16]
    1e22:	cbz	r3, 1e2c <saveData(short)+0x3c8>
    1e24:	add.w	r0, r4, #16
    1e28:	bl	14f8 <File::dec_refcount() [clone .isra.23]>
		f = file.f;
    1e2c:	ldr	r3, [sp, #40]	; 0x28
    1e2e:	add	r0, sp, #24
    1e30:	str	r3, [r4, #16]
    1e32:	bl	810 <File::~File()>
    1e36:	ldr	r0, [r4, #16]
			f->close();
			dec_refcount();
		}
	}
	operator bool() {
		return (f) ? f->isOpen() : false;
    1e38:	cbnz	r0, 1e44 <saveData(short)+0x3e0>
                if(file) 
                    status = OPENED; 
                else 
                {   Serial.println("Failing open file");
    1e3a:	ldr	r1, [pc, #60]	; (1e78 <saveData(short)+0x414>)
    1e3c:	ldr	r0, [pc, #44]	; (1e6c <saveData(short)+0x408>)
    1e3e:	bl	408 <Print::println(char const*)>
    1e42:	b.n	1b42 <saveData(short)+0xde>
    1e44:	ldr	r3, [r0, #0]
    1e46:	ldr	r3, [r3, #48]	; 0x30
    1e48:	blx	r3
            if(dirFlag>0) return CLOSED;        // create new directory with different name

            if(newFileName(fileName))
            {   
                file = msd->open(fileName, FILE_WRITE_BEGIN); 
                if(file) 
    1e4a:	cmp	r0, #0
    1e4c:	bne.w	1acc <saveData(short)+0x68>
    1e50:	b.n	1e3a <saveData(short)+0x3d6>
        file.flush();
        file.close();
        status = STOPPED;
    }
    return status;
}
    1e52:	add	sp, #84	; 0x54
    1e54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e58:	.word	0x20037592
    1e5c:	.word	0x2000115d
    1e60:	.word	0x200375e2
    1e64:	.word	0x2000115b
    1e68:	.word	0x2000125c
    1e6c:	.word	0x20001704
    1e70:	.word	0x20000ec7
    1e74:	.word	0x20036df0
    1e78:	.word	0x20001171

00001e7c <_GLOBAL__sub_I_data_buffer>:
    1e7c:	push	{r3, r4, r5, lr}
            { /**
             * @brief Constructor
             * @param buffer is pointer to data store
             * 
             */
                data_buffer=buffer; front_=rear_=0;
    1e7e:	ldr	r2, [pc, #132]	; (1f04 <_GLOBAL__sub_I_data_buffer+0x88>)
    1e80:	movs	r4, #0
    1e82:	ldr	r3, [pc, #132]	; (1f08 <_GLOBAL__sub_I_data_buffer+0x8c>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1e84:	ldr	r0, [pc, #132]	; (1f0c <_GLOBAL__sub_I_data_buffer+0x90>)
    1e86:	str	r2, [r3, #4]
    1e88:	strh	r4, [r3, #2]
    1e8a:	strh	r4, [r3, #0]
    1e8c:	mov.w	r3, #1000	; 0x3e8

/****************************** Filing Utility *******************************************/

extern int t_acq;

File file=NULL; // is used by saveData and saveNAD
    1e90:	ldr	r5, [pc, #124]	; (1f10 <_GLOBAL__sub_I_data_buffer+0x94>)
    1e92:	str	r3, [r0, #8]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    1e94:	ldr	r3, [pc, #124]	; (1f14 <_GLOBAL__sub_I_data_buffer+0x98>)
    1e96:	mov	r2, r5
    1e98:	strb	r4, [r0, #4]
    1e9a:	strb	r4, [r0, #12]
    1e9c:	ldr	r1, [pc, #120]	; (1f18 <_GLOBAL__sub_I_data_buffer+0x9c>)
    1e9e:	str	r3, [r0, #0]
		f = file;
    1ea0:	str	r4, [r0, #16]
    1ea2:	bl	a308 <__aeabi_atexit>
// This is a simple driver based on the the standard SPI.h library.
// You can write a driver entirely independent of SPI.h.
// It can be optimized for your board or a different SPI port can be used.
// The driver must be derived from SdSpiBaseClass.
// See: SdFat/src/SpiDriver/SdSpiBaseClass.h
class MySpiClass : public SdSpiBaseClass {
    1ea6:	ldr	r3, [pc, #116]	; (1f1c <_GLOBAL__sub_I_data_buffer+0xa0>)
    const char *sd_str[]={"sd1"};
    const int cs[] = {10 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1ea8:	mov	r0, r4
// This is a simple driver based on the the standard SPI.h library.
// You can write a driver entirely independent of SPI.h.
// It can be optimized for your board or a different SPI port can be used.
// The driver must be derived from SdSpiBaseClass.
// See: SdFat/src/SpiDriver/SdSpiBaseClass.h
class MySpiClass : public SdSpiBaseClass {
    1eaa:	ldr	r2, [pc, #116]	; (1f20 <_GLOBAL__sub_I_data_buffer+0xa4>)


class SDClass : public FS
{
public:
	SDClass() { }
    1eac:	ldr	r1, [pc, #116]	; (1f24 <_GLOBAL__sub_I_data_buffer+0xa8>)
    1eae:	str	r2, [r3, #0]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1eb0:	ldr	r2, [pc, #116]	; (1f28 <_GLOBAL__sub_I_data_buffer+0xac>)
    1eb2:	str	r2, [r3, #4]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1eb4:	movs	r2, #7
    1eb6:	str	r2, [r3, #8]
    1eb8:	movs	r2, #1
    1eba:	strb	r2, [r3, #12]
    1ebc:	ldr	r3, [pc, #108]	; (1f2c <_GLOBAL__sub_I_data_buffer+0xb0>)
    1ebe:	str	r1, [r3, #0]
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1ec0:	strb.w	r2, [r3, #1197]	; 0x4ad
    1ec4:	movs	r2, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1ec6:	ldr	r1, [pc, #104]	; (1f30 <_GLOBAL__sub_I_data_buffer+0xb4>)
    1ec8:	strb.w	r2, [r3, #1199]	; 0x4af
    1ecc:	movs	r2, #255	; 0xff
    1ece:	str.w	r1, [r3, #1172]	; 0x494
    1ed2:	ldr	r1, [pc, #96]	; (1f34 <_GLOBAL__sub_I_data_buffer+0xb8>)
    1ed4:	strb.w	r2, [r3, #1221]	; 0x4c5
    const char *sd_str[]={"sd1"};
    const int cs[] = {10 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1ed8:	mov	r2, r5
    1eda:	str.w	r1, [r3, #1184]	; 0x4a0
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1ede:	str.w	r4, [r3, #1156]	; 0x484
    1ee2:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1ee6:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1eea:	strb.w	r4, [r3, #1181]	; 0x49d
    1eee:	strb.w	r4, [r3, #1202]	; 0x4b2
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1ef2:	strb.w	r4, [r3, #1216]	; 0x4c0
    1ef6:	strb.w	r4, [r3, #1220]	; 0x4c4
    1efa:	ldr	r1, [pc, #60]	; (1f38 <_GLOBAL__sub_I_data_buffer+0xbc>)
        file.flush();
        file.close();
        status = STOPPED;
    }
    return status;
}
    1efc:	ldmia.w	sp!, {r3, r4, r5, lr}
    const char *sd_str[]={"sd1"};
    const int cs[] = {10 };

    const int nsd = sizeof(cs)/sizeof(int);

    SDClass sdx[nsd];
    1f00:	b.w	a308 <__aeabi_atexit>
    1f04:	.word	0x20003ddc
    1f08:	.word	0x20036e28
    1f0c:	.word	0x20036df0
    1f10:	.word	0x200016a8
    1f14:	.word	0x20000464
    1f18:	.word	0x00000811
    1f1c:	.word	0x20036e18
    1f20:	.word	0x200003f0
    1f24:	.word	0x20000534
    1f28:	.word	0x003d0900
    1f2c:	.word	0x20036e48
    1f30:	.word	0x20000588
    1f34:	.word	0x200005e8
    1f38:	.word	0x00001435

00001f3c <TwoWire::write(int)>:
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    1f3c:	ldr	r3, [r0, #0]
    1f3e:	uxtb	r1, r1
    1f40:	ldr	r3, [r3, #0]
    1f42:	bx	r3

00001f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>:
        val = wire->read()<<8;
        val |= wire->read();
        return val;
    }
    
    uint8_t write16(uint8_t addr, uint16_t reg, uint16_t val) 
    1f44:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1f46:	lsls	r1, r1, #1
    1f48:	mov	r6, r3
		transmitting = 1;
    1f4a:	movs	r5, #1
    { 
        wire->beginTransmission(addr);
    1f4c:	ldr	r3, [r0, #0]
        val = wire->read()<<8;
        val |= wire->read();
        return val;
    }
    
    uint8_t write16(uint8_t addr, uint16_t reg, uint16_t val) 
    1f4e:	mov	r7, r2
    1f50:	mov	r4, r0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1f52:	strb.w	r1, [r3, #165]	; 0xa5
    { 
        wire->beginTransmission(addr);
        wire->write(reg >> 8);
    1f56:	lsrs	r1, r2, #8
		transmitting = 1;
    1f58:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    1f5c:	strb.w	r5, [r3, #303]	; 0x12f
    1f60:	ldr	r0, [r0, #0]
    1f62:	bl	1f3c <TwoWire::write(int)>
        wire->write(reg);
    1f66:	mov	r1, r7
    1f68:	ldr	r0, [r4, #0]
    1f6a:	bl	1f3c <TwoWire::write(int)>
        wire->write(val >> 8);
    1f6e:	ldr	r0, [r4, #0]
    1f70:	lsrs	r1, r6, #8
    1f72:	bl	1f3c <TwoWire::write(int)>
        wire->write(val);
    1f76:	mov	r1, r6
    1f78:	ldr	r0, [r4, #0]
    1f7a:	bl	1f3c <TwoWire::write(int)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1f7e:	mov	r1, r5
    1f80:	ldr	r0, [r4, #0]
    1f82:	bl	2418 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    1f86:	clz	r0, r0
    1f8a:	lsrs	r0, r0, #5
    1f8c:	pop	{r3, r4, r5, r6, r7, pc}

00001f8e <adc_init()>:
    1f8e:	bx	lr

00001f90 <adcStatus()>:
    static uint8_t addr = SGTL5000_I2C_ADDR_CS_LOW;
    i2c_class i2c(&Wire);
    
    void adc_init(void) {  }
    void setAGain(int8_t again) {  }
    void adcStatus(void) {  }
    1f90:	bx	lr
	...

00001f94 <adc_enable(unsigned int, unsigned long)>:

    bool adc_enable(const unsigned extMCLK, const uint32_t pllFreq) 
    {
    1f94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        wire->setSDA(sda);
    }

    uint8_t exist(uint8_t addr)
    {
        wire->beginTransmission(addr);
    1f98:	ldr	r6, [pc, #548]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    1f9a:	mov	r5, r0
    1f9c:	mov	r7, r1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1f9e:	movs	r4, #20
    1fa0:	ldr	r0, [r6, #0]
		transmitting = 1;
    1fa2:	movs	r1, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1fa4:	strb.w	r4, [r0, #165]	; 0xa5
		transmitting = 1;
    1fa8:	strb.w	r1, [r0, #304]	; 0x130
		txBufferLength = 1;
    1fac:	strb.w	r1, [r0, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1fb0:	bl	2418 <TwoWire::endTransmission(unsigned char)>
        if(!i2c.exist(addr)) Serial.println("No I2C address found");
    1fb4:	cbz	r0, 1fc4 <adc_enable(unsigned int, unsigned long)+0x30>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1fb6:	mov	r1, r4
    1fb8:	ldr	r0, [pc, #520]	; (21c4 <adc_enable(unsigned int, unsigned long)+0x230>)
    1fba:	bl	8d18 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1fbe:	ldr	r0, [pc, #520]	; (21c8 <adc_enable(unsigned int, unsigned long)+0x234>)
    1fc0:	bl	a154 <Print::println()>
    }

    uint16_t read16(uint8_t addr, uint16_t reg) 
    { 
        unsigned int val;
        wire->beginTransmission(addr);
    1fc4:	ldr	r0, [r6, #0]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1fc6:	movs	r3, #20
		transmitting = 1;
    1fc8:	movs	r4, #1
        wire->write(reg >> 8);
    1fca:	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1fcc:	strb.w	r3, [r0, #165]	; 0xa5
		transmitting = 1;
    1fd0:	strb.w	r4, [r0, #304]	; 0x130
		txBufferLength = 1;
    1fd4:	strb.w	r4, [r0, #303]	; 0x12f
    1fd8:	bl	1f3c <TwoWire::write(int)>
        wire->write(reg);
    1fdc:	movs	r1, #6
    1fde:	ldr	r0, [r6, #0]
    1fe0:	bl	1f3c <TwoWire::write(int)>
        if (wire->endTransmission(false) != 0) return 0;
    1fe4:	movs	r1, #0
    1fe6:	ldr	r0, [r6, #0]
    }

    uint16_t read16(uint8_t addr, uint16_t reg) 
    { 
        unsigned int val;
        wire->beginTransmission(addr);
    1fe8:	ldr.w	r8, [pc, #468]	; 21c0 <adc_enable(unsigned int, unsigned long)+0x22c>
        wire->write(reg >> 8);
        wire->write(reg);
        if (wire->endTransmission(false) != 0) return 0;
    1fec:	bl	2418 <TwoWire::endTransmission(unsigned char)>
    1ff0:	cbnz	r0, 2028 <adc_enable(unsigned int, unsigned long)+0x94>
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    1ff2:	mov	r3, r4
    1ff4:	mov	r2, r4
    1ff6:	movs	r1, #10
    1ff8:	ldr.w	r0, [r8]
    1ffc:	bl	24f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    2000:	cbz	r0, 2028 <adc_enable(unsigned int, unsigned long)+0x94>
        val = wire->read()<<8;
    2002:	ldr.w	r0, [r8]
    2006:	ldr	r3, [r0, #0]
    2008:	ldr	r3, [r3, #20]
    200a:	blx	r3
    200c:	lsls	r6, r0, #8
        val |= wire->read();
    200e:	ldr.w	r0, [r8]
    2012:	ldr	r3, [r0, #0]
    2014:	ldr	r3, [r3, #20]
    2016:	blx	r3
        return val;
    2018:	orrs	r0, r6
    201a:	uxth	r0, r0
 
        //Check if we are in Master Mode and if the Teensy had a reset:
        unsigned int n = i2c.read16(addr,CHIP_I2S_CTRL);
        if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    201c:	cbz	r5, 2028 <adc_enable(unsigned int, unsigned long)+0x94>
    201e:	cmp	r0, #176	; 0xb0
    2020:	bne.n	2028 <adc_enable(unsigned int, unsigned long)+0x94>
            //Yes. Do not initialize.
            return true;
    2022:	mov	r0, r4
    2024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        int r = i2c.write16(addr,CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    2028:	movw	r3, #16480	; 0x4060
    202c:	movs	r2, #48	; 0x30
    202e:	movs	r1, #10
    2030:	ldr	r0, [pc, #396]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2032:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        if (!r) return false;
    2036:	cbnz	r0, 203e <adc_enable(unsigned int, unsigned long)+0xaa>
    2038:	movs	r0, #0
    203a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i2c.write16(addr,CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    203e:	movs	r3, #108	; 0x6c
    2040:	movs	r2, #38	; 0x26
    2042:	movs	r1, #10
    2044:	ldr	r0, [pc, #376]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2046:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    204a:	mov.w	r3, #498	; 0x1f2
    204e:	movs	r2, #40	; 0x28
    2050:	movs	r1, #10
    2052:	ldr	r0, [pc, #364]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2054:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    2058:	movw	r3, #3874	; 0xf22
    205c:	movs	r2, #44	; 0x2c
    205e:	movs	r1, #10
    2060:	ldr	r0, [pc, #348]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2062:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    2066:	movw	r3, #17478	; 0x4446
    206a:	movs	r2, #60	; 0x3c
    206c:	movs	r1, #10
    206e:	ldr	r0, [pc, #336]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2070:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    2074:	movw	r3, #311	; 0x137
    2078:	movs	r2, #36	; 0x24
    207a:	movs	r1, #10
    207c:	ldr	r0, [pc, #320]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    207e:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
            
        if (extMCLK > 0) {
    2082:	cbz	r5, 20e8 <adc_enable(unsigned int, unsigned long)+0x154>
            //SGTL is I2S Master
            //Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
            if (extMCLK > 17000000) {
    2084:	ldr	r3, [pc, #324]	; (21cc <adc_enable(unsigned int, unsigned long)+0x238>)
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 1);
            } else {
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 0);
    2086:	movs	r2, #52	; 0x34
    2088:	movs	r1, #10
    208a:	ldr	r0, [pc, #308]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
        i2c.write16(addr,CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
            
        if (extMCLK > 0) {
            //SGTL is I2S Master
            //Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
            if (extMCLK > 17000000) {
    208c:	cmp	r5, r3
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 1);
    208e:	ite	hi
    2090:	movhi	r3, #1
            } else {
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 0);
    2092:	movls	r3, #0
    2094:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
            }

            uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
            uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
            
            i2c.write16(addr,CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    2098:	vmov	s15, r7
    209c:	movs	r1, #10
    209e:	ldr	r0, [pc, #288]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    20a0:	vcvt.f32.u32	s14, s15
    20a4:	vmov	s15, r5
    20a8:	vcvt.f32.u32	s13, s15
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 1);
            } else {
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 0);
            }

            uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    20ac:	udiv	r3, r7, r5
            uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
            
            i2c.write16(addr,CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    20b0:	vdiv.f32	s15, s14, s13
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 1);
            } else {
                i2c.write16(addr,CHIP_CLK_TOP_CTRL, 0);
            }

            uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    20b4:	and.w	r3, r3, #31
            uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
            
            i2c.write16(addr,CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    20b8:	vmov	s14, r3
    20bc:	vcvt.f32.s32	s14, s14
    20c0:	vsub.f32	s15, s15, s14
    20c4:	vldr	s14, [pc, #264]	; 21d0 <adc_enable(unsigned int, unsigned long)+0x23c>
    20c8:	vmul.f32	s15, s15, s14
    20cc:	vcvt.u32.f32	s15, s15
    20d0:	vmov	r2, s15
    20d4:	ubfx	r2, r2, #0, #11
    20d8:	orr.w	r3, r2, r3, lsl #11
    20dc:	movs	r2, #50	; 0x32
    20de:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
            i2c.write16(addr,CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    20e2:	movw	r3, #17919	; 0x45ff
    20e6:	b.n	20ec <adc_enable(unsigned int, unsigned long)+0x158>
        } else {
            //SGTL is I2S Slave
            i2c.write16(addr,CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    20e8:	movw	r3, #16639	; 0x40ff
    20ec:	movs	r2, #48	; 0x30
    20ee:	movs	r1, #10
    20f0:	ldr	r0, [pc, #204]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    20f2:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        }

        i2c.write16(addr,CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    20f6:	movs	r3, #115	; 0x73
    20f8:	movs	r2, #2
    20fa:	movs	r1, #10
    20fc:	ldr	r0, [pc, #192]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    20fe:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        delay(400);
    2102:	mov.w	r0, #400	; 0x190
    2106:	bl	99f8 <delay>
        i2c.write16(addr,CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    210a:	movw	r3, #7453	; 0x1d1d
    210e:	movs	r2, #46	; 0x2e
    2110:	movs	r1, #10
    2112:	ldr	r0, [pc, #172]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2114:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        
        if (extMCLK > 0) { 
    2118:	cbz	r5, 212a <adc_enable(unsigned int, unsigned long)+0x196>
            //SGTL is I2S Master
            i2c.write16(addr,CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    211a:	movs	r3, #7
    211c:	movs	r2, #4
    211e:	movs	r1, #10
    2120:	ldr	r0, [pc, #156]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2122:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
            i2c.write16(addr,CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    2126:	movs	r3, #176	; 0xb0
    2128:	b.n	2138 <adc_enable(unsigned int, unsigned long)+0x1a4>
        } else {
            //SGTL is I2S Slave
            i2c.write16(addr,CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    212a:	movs	r3, #4
    212c:	movs	r1, #10
    212e:	ldr	r0, [pc, #144]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2130:	mov	r2, r3
    2132:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
            i2c.write16(addr,CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    2136:	movs	r3, #48	; 0x30
    2138:	movs	r2, #6
    213a:	movs	r1, #10
    213c:	ldr	r0, [pc, #128]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    213e:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        }

        // default signal routing is ok?
        i2c.write16(addr,CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    2142:	movs	r2, #10
    2144:	movs	r3, #16
    2146:	ldr	r0, [pc, #120]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2148:	mov	r1, r2
    214a:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    214e:	movs	r3, #0
    2150:	movs	r2, #14
    2152:	movs	r1, #10
    2154:	ldr	r0, [pc, #104]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2156:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    215a:	movw	r3, #15420	; 0x3c3c
    215e:	movs	r2, #16
    2160:	movs	r1, #10
    2162:	ldr	r0, [pc, #92]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2164:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    2168:	movw	r3, #32639	; 0x7f7f
    216c:	movs	r2, #34	; 0x22
    216e:	movs	r1, #10
    2170:	ldr	r0, [pc, #76]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    2172:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        i2c.write16(addr,CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    2176:	movs	r3, #54	; 0x36
    2178:	movs	r2, #36	; 0x24
    217a:	movs	r1, #10
    217c:	ldr	r0, [pc, #64]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    217e:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
        uint16_t ana_ctrl=0x0036;

        return i2c.write16(addr,0x002A, 0x0173) // mic preamp gain = +40dB
    2182:	movw	r3, #371	; 0x173
    2186:	movs	r2, #42	; 0x2a
    2188:	movs	r1, #10
    218a:	ldr	r0, [pc, #52]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    218c:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
                && i2c.write16(addr,0x0020, 0x088)     // input gain +12dB (is this enough?)
                && i2c.write16(addr,0x0024, ana_ctrl & ~(1<<2)); // enable mic
    2190:	cmp	r0, #0
    2192:	beq.w	2038 <adc_enable(unsigned int, unsigned long)+0xa4>
        i2c.write16(addr,CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
        i2c.write16(addr,CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
        uint16_t ana_ctrl=0x0036;

        return i2c.write16(addr,0x002A, 0x0173) // mic preamp gain = +40dB
                && i2c.write16(addr,0x0020, 0x088)     // input gain +12dB (is this enough?)
    2196:	movs	r3, #136	; 0x88
    2198:	movs	r2, #32
    219a:	movs	r1, #10
    219c:	ldr	r0, [pc, #32]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    219e:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
    21a2:	cmp	r0, #0
    21a4:	beq.w	2038 <adc_enable(unsigned int, unsigned long)+0xa4>
                && i2c.write16(addr,0x0024, ana_ctrl & ~(1<<2)); // enable mic
    21a8:	movs	r3, #50	; 0x32
    21aa:	movs	r2, #36	; 0x24
    21ac:	movs	r1, #10
    21ae:	ldr	r0, [pc, #16]	; (21c0 <adc_enable(unsigned int, unsigned long)+0x22c>)
    21b0:	bl	1f44 <i2c_class::write16(unsigned char, unsigned short, unsigned short)>
    21b4:	adds	r0, #0
    21b6:	it	ne
    21b8:	movne	r0, #1
    21ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21be:	nop
    21c0:	.word	0x20036e08
    21c4:	.word	0x200011a8
    21c8:	.word	0x20001704
    21cc:	.word	0x01036640
    21d0:	.word	0x45000000

000021d4 <_GLOBAL__sub_I_gain>:
class i2c_class
{ TwoWire *wire;
    public:

    i2c_class(TwoWire *wire) 
    {   this->wire = wire;
    21d4:	ldr	r0, [pc, #8]	; (21e0 <_GLOBAL__sub_I_gain+0xc>)
    21d6:	ldr	r3, [pc, #12]	; (21e4 <_GLOBAL__sub_I_gain+0x10>)
    21d8:	str	r0, [r3, #0]
        wire->begin();
    21da:	b.w	114a0 <___ZN7TwoWire5beginEv_veneer>
    21de:	nop
    21e0:	.word	0x20001714
    21e4:	.word	0x20036e08

000021e8 <getTeensySerial()>:
/* following from https://github.com/sstaub/TeensyID/blob/master/TeensyID.cpp */
#if defined ARDUINO_TEENSY40 || defined ARDUINO_TEENSY41
  uint32_t getTeensySerial(void) 
  {
    uint32_t num;
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    21e8:	ldr	r3, [pc, #8]	; (21f4 <getTeensySerial()+0xc>)
    21ea:	ldr.w	r0, [r3, #544]	; 0x220
    return num;
  }
    21ee:	bic.w	r0, r0, #4278190080	; 0xff000000
    21f2:	bx	lr
    21f4:	.word	0x401f4400

000021f8 <_write>:
  int _write(int file, const void *buf, size_t len) {
    // https://forum.pjrc.com/threads/28473-Quick-Guide-Using-printf()-on-Teensy-ARM
    Print *out;
  
    // Send both stdout and stderr to stdPrint
    if (file == stdout->_file || file == stderr->_file) {
    21f8:	ldr	r3, [pc, #48]	; (222c <_write+0x34>)
    21fa:	ldr	r3, [r3, #0]
#include "usb_serial.h"
Print *stdPrint = &Serial;

extern "C"
{
  int _write(int file, const void *buf, size_t len) {
    21fc:	push	{r4}
    // https://forum.pjrc.com/threads/28473-Quick-Guide-Using-printf()-on-Teensy-ARM
    Print *out;
  
    // Send both stdout and stderr to stdPrint
    if (file == stdout->_file || file == stderr->_file) {
    21fe:	ldr	r4, [r3, #8]
    2200:	ldrsh.w	r4, [r4, #14]
    2204:	cmp	r4, r0
    2206:	beq.n	2212 <_write+0x1a>
    2208:	ldr	r3, [r3, #12]
    220a:	ldrsh.w	r3, [r3, #14]
    220e:	cmp	r0, r3
    2210:	bne.n	2216 <_write+0x1e>
      out = stdPrint;
    2212:	ldr	r3, [pc, #28]	; (2230 <_write+0x38>)
    2214:	ldr	r0, [r3, #0]
    } else {
      out = (Print *)file;
    }
  
    if (out == nullptr) {
    2216:	cbz	r0, 2222 <_write+0x2a>
      return len;
    }
  
    // Don't check for len == 0 for returning early, in case there's side effects
    return out->write((const uint8_t *)buf, len);
    2218:	ldr	r3, [r0, #0]
  }
    221a:	ldr.w	r4, [sp], #4
    if (out == nullptr) {
      return len;
    }
  
    // Don't check for len == 0 for returning early, in case there's side effects
    return out->write((const uint8_t *)buf, len);
    221e:	ldr	r3, [r3, #4]
    2220:	bx	r3
  }
    2222:	mov	r0, r2
    2224:	ldr.w	r4, [sp], #4
    2228:	bx	lr
    222a:	nop
    222c:	.word	0x20001dd8
    2230:	.word	0x20001de0

00002234 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2234:	ldrb.w	r2, [r0, #163]	; 0xa3
    2238:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    223c:	subs	r0, r2, r0
    223e:	bx	lr

00002240 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2240:	ldrb.w	r3, [r0, #162]	; 0xa2
    2244:	ldrb.w	r2, [r0, #163]	; 0xa3
    2248:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    224a:	itttt	hi
    224c:	addhi	r2, r3, #1
    224e:	addhi	r3, r3, r0
    2250:	strbhi.w	r2, [r0, #162]	; 0xa2
    2254:	ldrbhi	r0, [r3, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2256:	it	ls
    2258:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    225c:	bx	lr

0000225e <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    225e:	ldrb.w	r3, [r0, #162]	; 0xa2
    2262:	ldrb.w	r2, [r0, #163]	; 0xa3
    2266:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    2268:	itte	hi
    226a:	addhi	r3, r3, r0
    226c:	ldrbhi	r0, [r3, #26]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    226e:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2272:	bx	lr

00002274 <TwoWire::flush()>:
	virtual void flush(void) {
    2274:	bx	lr

00002276 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2276:	ldrh.w	r3, [r0, #304]	; 0x130
    227a:	cbz	r3, 2288 <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    227c:	ldrb.w	r3, [r0, #303]	; 0x12f
    2280:	cmp	r3, #136	; 0x88
    2282:	bls.n	228c <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2284:	movs	r3, #1
    2286:	strb	r3, [r0, #4]
			setWriteError();
			return 0;
    2288:	movs	r0, #0
    228a:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    228c:	adds	r2, r3, #1
    228e:	add	r3, r0
    2290:	strb.w	r2, [r0, #303]	; 0x12f
		return 1;
    2294:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2296:	strb.w	r1, [r3, #165]	; 0xa5
    229a:	bx	lr

0000229c <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    229c:	push	{r3, r4, r5, lr}
    229e:	mov	r4, r0
	if (transmitting || slave_mode) {
    22a0:	ldrh.w	r0, [r0, #304]	; 0x130
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    22a4:	mov	r5, r2
	if (transmitting || slave_mode) {
    22a6:	cbz	r0, 22d2 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    22a8:	ldrb.w	r3, [r4, #303]	; 0x12f
    22ac:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    22b0:	cmp	r5, r2
    22b2:	ittt	hi
    22b4:	movhi	r0, #1
    22b6:	movhi	r5, r2
    22b8:	strbhi	r0, [r4, #4]
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    22ba:	add.w	r0, r4, #165	; 0xa5
    22be:	mov	r2, r5
    22c0:	add	r0, r3
    22c2:	bl	87a4 <memcpy>
		txBufferLength += quantity;
    22c6:	ldrb.w	r3, [r4, #303]	; 0x12f
    22ca:	mov	r0, r5
    22cc:	add	r3, r5
    22ce:	strb.w	r3, [r4, #303]	; 0x12f
		return quantity;
	}
	return 0;
}
    22d2:	pop	{r3, r4, r5, pc}

000022d4 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    22d4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    22d8:	ldr.w	lr, [r0, #20]
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    22dc:	mov	r7, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    22de:	ldrb	r3, [r0, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    22e0:	movs	r4, #21
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    22e2:	ldr	r2, [pc, #232]	; (23cc <TwoWire::force_clock()+0xf8>)
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    22e4:	add.w	r3, lr, r3, lsl #4
    22e8:	ldrb	r1, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    22ea:	ldrb	r3, [r0, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    22ec:	lsls	r1, r1, #4

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    22ee:	add.w	r3, lr, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    22f2:	adds	r0, r2, r1

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    22f4:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    22f8:	ldr.w	ip, [r0, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    22fc:	lsls	r3, r3, #4
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    22fe:	ldr.w	r9, [r0, #4]
	*portSetRegister(sda_pin) = sda_mask;
    2302:	ldr	r0, [r2, r1]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2304:	adds	r5, r2, r3
    2306:	ldr	r6, [r5, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2308:	str.w	r4, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    230c:	str.w	ip, [r0, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2310:	ldr	r1, [r0, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2312:	ldr.w	sl, [r5, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2316:	orr.w	r1, ip, r1

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    231a:	ldr	r5, [pc, #180]	; (23d0 <TwoWire::force_clock()+0xfc>)
    231c:	str	r1, [r0, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    231e:	str.w	r4, [sl]
	*portSetRegister(scl_pin) = scl_mask;
    2322:	ldr	r4, [r2, r3]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2324:	ldr	r2, [pc, #172]	; (23d4 <TwoWire::force_clock()+0x100>)
    2326:	str.w	r6, [r4, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    232a:	ldr	r3, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    232c:	ldr	r1, [pc, #168]	; (23d8 <TwoWire::force_clock()+0x104>)
    232e:	orrs	r3, r6
    2330:	str	r3, [r4, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2332:	ldr.w	r8, [r2]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2336:	ldr	r3, [r5, #0]
    2338:	str	r5, [sp, #4]
    233a:	udiv	r3, r3, r1
    233e:	movs	r1, #10
    2340:	muls	r1, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2342:	ldr	r3, [r2, #0]
    2344:	rsb	r3, r8, r3
    2348:	cmp	r1, r3
    234a:	bhi.n	2342 <TwoWire::force_clock()+0x6e>
    234c:	movs	r3, #9
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    234e:	ldr	r1, [r0, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    2350:	tst.w	ip, r1
    2354:	beq.n	2360 <TwoWire::force_clock()+0x8c>
    2356:	ldr	r1, [r4, #8]
    2358:	tst	r6, r1
    235a:	beq.n	2360 <TwoWire::force_clock()+0x8c>
			// success, both pins are high
			ret = true;
    235c:	movs	r0, #1
    235e:	b.n	23ac <TwoWire::force_clock()+0xd8>

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2360:	ldr	r1, [sp, #4]
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    2362:	str.w	r6, [r4, #136]	; 0x88
    2366:	ldr	r5, [pc, #112]	; (23d8 <TwoWire::force_clock()+0x104>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2368:	ldr.w	fp, [r2]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    236c:	ldr	r1, [r1, #0]
    236e:	udiv	r1, r1, r5
    2372:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2376:	ldr.w	r8, [r2]
    237a:	rsb	r8, fp, r8
    237e:	cmp	r1, r8
    2380:	bhi.n	2376 <TwoWire::force_clock()+0xa2>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2382:	ldr	r1, [pc, #80]	; (23d4 <TwoWire::force_clock()+0x100>)
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    2384:	str.w	r6, [r4, #132]	; 0x84
    2388:	ldr.w	fp, [r1]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    238c:	ldr	r1, [sp, #4]
    238e:	ldr	r5, [pc, #72]	; (23d8 <TwoWire::force_clock()+0x104>)
    2390:	ldr	r1, [r1, #0]
    2392:	udiv	r1, r1, r5
    2396:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    239a:	ldr.w	r8, [r2]
    239e:	rsb	r8, fp, r8
    23a2:	cmp	r1, r8
    23a4:	bhi.n	239a <TwoWire::force_clock()+0xc6>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    23a6:	subs	r3, #1
    23a8:	bne.n	234e <TwoWire::force_clock()+0x7a>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    23aa:	mov	r0, r3
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    23ac:	ldrb	r3, [r7, #24]
    23ae:	add.w	r3, lr, r3, lsl #4
    23b2:	ldr	r3, [r3, #12]
    23b4:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    23b8:	ldrb	r3, [r7, #25]
    23ba:	add.w	lr, lr, r3, lsl #4
    23be:	ldr.w	r3, [lr, #44]	; 0x2c
    23c2:	str.w	r3, [sl]
	return ret;
}
    23c6:	add	sp, #12
    23c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23cc:	.word	0x2000088c
    23d0:	.word	0x200016b0
    23d4:	.word	0xe0001004
    23d8:	.word	0x000f4240

000023dc <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    23dc:	ldr	r3, [pc, #52]	; (2414 <TwoWire::wait_idle()+0x38>)
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    23de:	push	{r4, lr}
    23e0:	ldr	r1, [r3, #0]
    23e2:	mov	r4, r0
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    23e4:	ldr	r0, [r0, #16]
    23e6:	ldr	r2, [r0, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    23e8:	tst.w	r2, #33554432	; 0x2000000
    23ec:	bne.n	23fa <TwoWire::wait_idle()+0x1e>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    23ee:	ldr	r3, [r4, #16]
    23f0:	mov.w	r2, #32512	; 0x7f00
	return true;
    23f4:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    23f6:	str	r2, [r3, #20]
	return true;
    23f8:	pop	{r4, pc}
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    23fa:	lsls	r2, r2, #7
    23fc:	bmi.n	23ee <TwoWire::wait_idle()+0x12>
    23fe:	ldr	r2, [r3, #0]
		if (timeout > 16) {
    2400:	subs	r2, r2, r1
    2402:	cmp	r2, #16
    2404:	bls.n	23e6 <TwoWire::wait_idle()+0xa>
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    2406:	mov	r0, r4
    2408:	bl	22d4 <TwoWire::force_clock()>
    240c:	cmp	r0, #0
    240e:	bne.n	23ee <TwoWire::wait_idle()+0x12>
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
	return true;
}
    2410:	pop	{r4, pc}
    2412:	nop
    2414:	.word	0x20037314

00002418 <TwoWire::endTransmission(unsigned char)>:


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2418:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    241c:	ldrb.w	r6, [r0, #303]	; 0x12f
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2420:	mov	r7, r0
    2422:	mov	r4, r1
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
    2424:	cmp	r6, #0
    2426:	beq.n	24c6 <TwoWire::endTransmission(unsigned char)+0xae>
	if (!wait_idle()) return 4;
    2428:	bl	23dc <TwoWire::wait_idle()>
    242c:	cmp	r0, #0
    242e:	beq.n	24c6 <TwoWire::endTransmission(unsigned char)+0xae>
    2430:	ldr	r3, [pc, #188]	; (24f0 <TwoWire::endTransmission(unsigned char)+0xd8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    2432:	movs	r5, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2434:	mov.w	sl, #512	; 0x200
    2438:	ldr.w	r9, [r3]
    243c:	mov	r8, r3
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    243e:	cmp	r5, r6
    2440:	ldr	r3, [r7, #16]
    2442:	bhi.n	2480 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2444:	ldr	r1, [r3, #92]	; 0x5c
    2446:	and.w	r1, r1, #7
			while (fifo_used < 4) {
    244a:	cmp	r1, #3
    244c:	bhi.n	2480 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
    244e:	cbnz	r5, 245e <TwoWire::endTransmission(unsigned char)+0x46>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2450:	ldrb.w	r2, [r7, #165]	; 0xa5
    2454:	orr.w	r2, r2, #1024	; 0x400
    2458:	str	r2, [r3, #96]	; 0x60
					tx_index = 1;
    245a:	movs	r2, #1
    245c:	b.n	247a <TwoWire::endTransmission(unsigned char)+0x62>
				} else if (tx_index < tx_len) {
    245e:	cmp	r5, r6
    2460:	add.w	r2, r5, #1
    2464:	bcs.n	2470 <TwoWire::endTransmission(unsigned char)+0x58>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2466:	add	r5, r7
    2468:	ldrb.w	r0, [r5, #165]	; 0xa5
    246c:	str	r0, [r3, #96]	; 0x60
    246e:	b.n	247a <TwoWire::endTransmission(unsigned char)+0x62>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2470:	cbz	r4, 2476 <TwoWire::endTransmission(unsigned char)+0x5e>
    2472:	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    2476:	mov	r5, r2
					break;
    2478:	b.n	2480 <TwoWire::endTransmission(unsigned char)+0x68>
				}
				fifo_used++;
    247a:	adds	r1, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    247c:	mov	r5, r2
    247e:	b.n	244a <TwoWire::endTransmission(unsigned char)+0x32>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    2480:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    2482:	lsls	r1, r2, #20
    2484:	bpl.n	2490 <TwoWire::endTransmission(unsigned char)+0x78>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2486:	ldr	r2, [r3, #16]
    2488:	orr.w	r2, r2, #768	; 0x300
    248c:	str	r2, [r3, #16]
    248e:	b.n	24c6 <TwoWire::endTransmission(unsigned char)+0xae>
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    2490:	lsls	r0, r2, #21
    2492:	bpl.n	24a8 <TwoWire::endTransmission(unsigned char)+0x90>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2494:	ldr	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
    2496:	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2498:	orr.w	r2, r2, #768	; 0x300
    249c:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    249e:	mov.w	r2, #512	; 0x200
    24a2:	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    24a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    24a8:	lsls	r1, r2, #18
    24aa:	bmi.n	24b8 <TwoWire::endTransmission(unsigned char)+0xa0>
    24ac:	ldr.w	r1, [r8]
    24b0:	rsb	r1, r9, r1
    24b4:	cmp	r1, #50	; 0x32
    24b6:	bls.n	24cc <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    24b8:	ldr	r2, [r3, #16]
    24ba:	orr.w	r2, r2, #768	; 0x300
    24be:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    24c0:	mov.w	r2, #512	; 0x200
    24c4:	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    24c6:	movs	r0, #4
    24c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    24cc:	cmp	r5, r6
    24ce:	bls.n	24de <TwoWire::endTransmission(unsigned char)+0xc6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    24d0:	ldr	r0, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    24d2:	ands.w	r0, r0, #7
    24d6:	bne.n	24de <TwoWire::endTransmission(unsigned char)+0xc6>
    24d8:	lsls	r3, r2, #22
    24da:	bmi.n	24ea <TwoWire::endTransmission(unsigned char)+0xd2>
    24dc:	cbz	r4, 24e4 <TwoWire::endTransmission(unsigned char)+0xcc>
				return 0;
			}
		}
		yield();
    24de:	bl	9e60 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    24e2:	b.n	243e <TwoWire::endTransmission(unsigned char)+0x26>
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    24e4:	mov	r0, r4
    24e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
		}
		yield();
	}
}
    24ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    24ee:	nop
    24f0:	.word	0x20037314

000024f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    24f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24f8:	mov	r5, r0
    24fa:	mov	r6, r1
    24fc:	mov	r8, r2
    24fe:	mov	r7, r3
	if (!wait_idle()) return 4;
    2500:	bl	23dc <TwoWire::wait_idle()>
    2504:	cmp	r0, #0
    2506:	beq.n	25ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
	address = (address & 0x7F) << 1;
    2508:	lsls	r6, r6, #1
    250a:	ldr	r3, [pc, #256]	; (260c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x118>)
	if (length < 1) length = 1;
    250c:	cmp.w	r8, #0
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    2510:	mov.w	r4, #0
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2514:	uxtb	r6, r6
    2516:	ldr.w	r9, [r3]

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
    251a:	it	eq
    251c:	moveq.w	r8, #1
    2520:	mov	sl, r3
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2522:	orr.w	r6, r6, #1024	; 0x400
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    2526:	strb.w	r4, [r5, #162]	; 0xa2
	rxBufferLength = 0;
    252a:	strb.w	r4, [r5, #163]	; 0xa3
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    252e:	orr.w	r6, r6, #1
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2532:	cmp	r4, #3
    2534:	ldr	r3, [r5, #16]
    2536:	beq.n	2570 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    2538:	ldr	r2, [r3, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    253a:	add.w	r1, r8, #4294967295
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    253e:	mov.w	r0, #512	; 0x200
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    2542:	and.w	r2, r2, #7
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2546:	orr.w	r1, r1, #256	; 0x100
    254a:	add	r2, r4
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
    254c:	rsb	lr, r4, r2
    2550:	cmp.w	lr, #3
    2554:	bhi.n	2572 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7e>
    2556:	cmp	r4, #3
    2558:	beq.n	2570 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
				if (tx_state == 0) {
    255a:	cbnz	r4, 2560 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    255c:	str	r6, [r3, #96]	; 0x60
    255e:	b.n	256c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    2560:	cmp	r4, #1
    2562:	bne.n	2568 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2564:	str	r1, [r3, #96]	; 0x60
    2566:	b.n	256c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2568:	cbz	r7, 256c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
    256a:	str	r0, [r3, #96]	; 0x60
				}
				tx_state++;
    256c:	adds	r4, #1
    256e:	b.n	254c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x58>
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    2570:	movs	r4, #3
				tx_state++;
				tx_fifo--;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
    2572:	ldrb.w	r2, [r5, #163]	; 0xa3
    2576:	cmp	r2, #135	; 0x87
    2578:	bhi.n	259a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    257a:	ldr	r2, [r3, #92]	; 0x5c
    257c:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2580:	cbz	r2, 259a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    2582:	ldrb.w	r1, [r5, #163]	; 0xa3
    2586:	cmp	r1, #135	; 0x87
    2588:	bhi.n	259a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
				rxBuffer[rxBufferLength++] = port->MRDR;
    258a:	adds	r0, r1, #1
    258c:	add	r1, r5
				rx_fifo--;
    258e:	subs	r2, #1
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
				rxBuffer[rxBufferLength++] = port->MRDR;
    2590:	strb.w	r0, [r5, #163]	; 0xa3
    2594:	ldr	r0, [r3, #112]	; 0x70
    2596:	strb	r0, [r1, #26]
    2598:	b.n	2580 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
				rx_fifo--;
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
    259a:	ldr	r3, [r5, #16]
    259c:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    259e:	lsls	r0, r2, #20
    25a0:	bpl.n	25ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    25a2:	ldr	r2, [r3, #16]
    25a4:	orr.w	r2, r2, #768	; 0x300
    25a8:	str	r2, [r3, #16]
    25aa:	b.n	25d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    25ac:	tst.w	r2, #9216	; 0x2400
    25b0:	bne.n	25f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
    25b2:	ldr.w	r1, [sl]
    25b6:	rsb	r1, r9, r1
    25ba:	cmp	r1, #50	; 0x32
    25bc:	bhi.n	25f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
    25be:	ldrb.w	r1, [r5, #163]	; 0xa3
    25c2:	cmp	r1, r8
    25c4:	bcc.n	2606 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
    25c6:	cmp	r4, #3
    25c8:	bne.n	2606 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
			uint32_t tx_fifo = port->MFSR & 0x07;
    25ca:	ldr	r1, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    25cc:	lsls	r1, r1, #29
    25ce:	bne.n	2606 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
    25d0:	lsls	r2, r2, #22
    25d2:	bpl.n	2602 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    25d4:	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    25d6:	tst.w	r2, #458752	; 0x70000
    25da:	beq.n	25e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    25dc:	ldr	r2, [r3, #16]
    25de:	orr.w	r2, r2, #512	; 0x200
    25e2:	str	r2, [r3, #16]
	return rxBufferLength;
    25e4:	ldrb.w	r0, [r5, #163]	; 0xa3
    25e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
    25ec:	movs	r0, #4
    25ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    25f2:	ldr	r2, [r3, #16]
    25f4:	orr.w	r2, r2, #768	; 0x300
    25f8:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    25fa:	mov.w	r2, #512	; 0x200
    25fe:	str	r2, [r3, #96]	; 0x60
    2600:	b.n	25d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    2602:	cmp	r7, #0
    2604:	beq.n	25d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
				break;
			}
		}
		yield();
    2606:	bl	9e60 <yield>
    260a:	b.n	2532 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    260c:	.word	0x20037314

00002610 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2610:	ldr	r3, [r0, #16]
    2612:	movs	r2, #0
	if (frequency < 400000) {
    2614:	ldr	r0, [pc, #76]	; (2664 <TwoWire::setClock(unsigned long)+0x54>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2616:	str	r2, [r3, #16]
	if (frequency < 400000) {
    2618:	cmp	r1, r0
    261a:	bhi.n	2630 <TwoWire::setClock(unsigned long)+0x20>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    261c:	ldr	r2, [pc, #72]	; (2668 <TwoWire::setClock(unsigned long)+0x58>)
    261e:	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2620:	movs	r2, #1
    2622:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2624:	ldr	r2, [pc, #68]	; (266c <TwoWire::setClock(unsigned long)+0x5c>)
    2626:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2628:	mov.w	r2, #180224	; 0x2c000
    262c:	str	r2, [r3, #44]	; 0x2c
    262e:	b.n	264e <TwoWire::setClock(unsigned long)+0x3e>
	} else if (frequency < 1000000) {
    2630:	ldr	r0, [pc, #60]	; (2670 <TwoWire::setClock(unsigned long)+0x60>)
    2632:	cmp	r1, r0
    2634:	ldr	r1, [pc, #60]	; (2674 <TwoWire::setClock(unsigned long)+0x64>)
    2636:	bhi.n	2642 <TwoWire::setClock(unsigned long)+0x32>
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
    2638:	ldr	r0, [pc, #60]	; (2678 <TwoWire::setClock(unsigned long)+0x68>)
    263a:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    263c:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
    263e:	ldr	r2, [pc, #60]	; (267c <TwoWire::setClock(unsigned long)+0x6c>)
    2640:	b.n	264a <TwoWire::setClock(unsigned long)+0x3a>
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    2642:	ldr	r0, [pc, #60]	; (2680 <TwoWire::setClock(unsigned long)+0x70>)
    2644:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    2646:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    2648:	ldr	r2, [pc, #56]	; (2684 <TwoWire::setClock(unsigned long)+0x74>)
    264a:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    264c:	str	r1, [r3, #44]	; 0x2c
	}
	port->MCCR1 = port->MCCR0;
    264e:	ldr	r2, [r3, #72]	; 0x48
    2650:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    2652:	movs	r2, #0
    2654:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2656:	mov.w	r2, #65537	; 0x10001
    265a:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    265c:	movs	r2, #1
    265e:	str	r2, [r3, #16]
    2660:	bx	lr
    2662:	nop
    2664:	.word	0x00061a7f
    2668:	.word	0x1928373b
    266c:	.word	0x05050bb8
    2670:	.word	0x000f423f
    2674:	.word	0x00057f00
    2678:	.word	0x0c121a1c
    267c:	.word	0x02020e10
    2680:	.word	0x0407090a
    2684:	.word	0x01010960

00002688 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>:
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2688:	ldrh	r3, [r0, #30]
    268a:	lsls	r3, r3, #16
    268c:	bmi.n	2694 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]+0xc>
		tcd->BITER = len & 0x7fff;
    268e:	ubfx	r1, r1, #0, #15
    2692:	b.n	26a0 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]+0x18>
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2694:	ldrh	r3, [r0, #30]
    2696:	ubfx	r1, r1, #0, #9
    269a:	and.w	r3, r3, #65024	; 0xfe00
    269e:	orrs	r1, r3
    26a0:	strh	r1, [r0, #30]
	}
	tcd->CITER = tcd->BITER; 
    26a2:	ldrh	r3, [r0, #30]
    26a4:	uxth	r3, r3
    26a6:	strh	r3, [r0, #22]
    26a8:	bx	lr
	...

000026ac <SPIClass::begin()>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    26ac:	ldr	r3, [r0, #4]

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26ae:	ldr	r1, [r3, #0]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    26b0:	push	{r4, r5, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26b2:	ldr	r2, [r1, #0]
    26b4:	ldr	r4, [r3, #4]
    26b6:	bic.w	r2, r2, r4

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ba:	ldr	r4, [pc, #464]	; (288c <SPIClass::begin()+0x1e0>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26bc:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26be:	ldr	r2, [r4, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    26c0:	bic.w	r2, r2, #469762048	; 0x1c000000
    26c4:	bic.w	r2, r2, #48	; 0x30
    26c8:	orr.w	r2, r2, #134217728	; 0x8000000
    26cc:	orr.w	r2, r2, #16
    26d0:	str	r2, [r4, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26d2:	ldrb	r4, [r0, #16]
    26d4:	ldr	r2, [pc, #440]	; (2890 <SPIClass::begin()+0x1e4>)
    26d6:	add	r4, r3
    26d8:	ldrb	r4, [r4, #16]
    26da:	add.w	r4, r2, r4, lsl #4
    26de:	ldr	r5, [r4, #8]
    26e0:	movs	r4, #184	; 0xb8
    26e2:	str	r4, [r5, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    26e4:	ldrb	r5, [r0, #17]
    26e6:	add	r5, r3
    26e8:	ldrb.w	r5, [r5, #32]
    26ec:	add.w	r5, r2, r5, lsl #4
    26f0:	ldr	r5, [r5, #8]
    26f2:	str	r4, [r5, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    26f4:	ldrb	r5, [r0, #18]
    26f6:	add	r5, r3
    26f8:	ldrb.w	r5, [r5, #48]	; 0x30
    26fc:	add.w	r5, r2, r5, lsl #4
    2700:	ldr	r5, [r5, #8]
    2702:	str	r4, [r5, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2704:	ldr	r5, [r1, #0]
    2706:	ldr	r4, [r3, #4]
    2708:	orrs	r4, r5
    270a:	str	r4, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    270c:	ldrb	r1, [r0, #16]
    270e:	adds	r4, r3, r1
    2710:	add.w	r1, r3, r1, lsl #2
    2714:	ldrb	r4, [r4, #16]
    2716:	ldr	r1, [r1, #20]
    2718:	add.w	r4, r2, r4, lsl #4
    271c:	ldr	r4, [r4, #4]
    271e:	str	r1, [r4, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2720:	ldrb	r1, [r0, #17]
    2722:	adds	r4, r3, r1
    2724:	add.w	r1, r3, r1, lsl #2
    2728:	ldrb.w	r4, [r4, #32]
    272c:	ldr	r1, [r1, #36]	; 0x24
    272e:	add.w	r4, r2, r4, lsl #4
    2732:	ldr	r4, [r4, #4]
    2734:	str	r1, [r4, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2736:	ldrb	r1, [r0, #18]
    2738:	adds	r4, r3, r1
    273a:	add.w	r1, r3, r1, lsl #2
    273e:	ldrb.w	r4, [r4, #48]	; 0x30
    2742:	ldr	r1, [r1, #52]	; 0x34
    2744:	add.w	r2, r2, r4, lsl #4
    2748:	ldr	r2, [r2, #4]
    274a:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    274c:	ldrb	r2, [r0, #18]
    274e:	ldr	r1, [r3, #60]	; 0x3c
    2750:	add	r2, r3
    2752:	ldrb.w	r2, [r2, #56]	; 0x38
    2756:	str	r2, [r1, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2758:	ldrb	r2, [r0, #16]
    275a:	ldr	r1, [r3, #28]
    275c:	add	r2, r3
    275e:	ldrb	r2, [r2, #24]
    2760:	str	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2762:	ldrb	r2, [r0, #17]
    2764:	ldr	r1, [r3, #44]	; 0x2c
    2766:	add	r3, r2

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    2768:	movs	r2, #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    276a:	ldrb.w	r3, [r3, #40]	; 0x28
    276e:	str	r3, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2770:	ldr	r3, [r0, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    2772:	str	r2, [r3, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    2774:	movs	r2, #15
    2776:	str	r2, [r3, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2778:	ldrb	r3, [r0, #19]
    277a:	cmp	r3, #0
    277c:	beq.n	27dc <SPIClass::begin()+0x130>
			__disable_irq();
    277e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2780:	ldrb	r3, [r0, #19]
    2782:	lsls	r5, r3, #31
    2784:	bpl.n	2792 <SPIClass::begin()+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2786:	ldr	r2, [pc, #268]	; (2894 <SPIClass::begin()+0x1e8>)
    2788:	ldr	r3, [r0, #20]
    278a:	ldr	r1, [r2, #0]
    278c:	ands	r3, r1
    278e:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2790:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x02) {
    2792:	ldrb	r3, [r0, #19]
    2794:	lsls	r4, r3, #30
    2796:	bpl.n	27a4 <SPIClass::begin()+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2798:	ldr	r2, [pc, #252]	; (2898 <SPIClass::begin()+0x1ec>)
    279a:	ldr	r3, [r0, #24]
    279c:	ldr	r1, [r2, #0]
    279e:	ands	r3, r1
    27a0:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    27a2:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x04) {
    27a4:	ldrb	r3, [r0, #19]
    27a6:	lsls	r1, r3, #29
    27a8:	bpl.n	27b6 <SPIClass::begin()+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    27aa:	ldr	r2, [pc, #240]	; (289c <SPIClass::begin()+0x1f0>)
    27ac:	ldr	r3, [r0, #28]
    27ae:	ldr	r1, [r2, #0]
    27b0:	ands	r3, r1
    27b2:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    27b4:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x08) {
    27b6:	ldrb	r3, [r0, #19]
    27b8:	lsls	r2, r3, #28
    27ba:	bpl.n	27c8 <SPIClass::begin()+0x11c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    27bc:	ldr	r2, [pc, #224]	; (28a0 <SPIClass::begin()+0x1f4>)
    27be:	ldr	r3, [r0, #32]
    27c0:	ldr	r1, [r2, #0]
    27c2:	ands	r3, r1
    27c4:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    27c6:	str	r3, [r2, #0]
			}
			if (interruptMasksUsed & 0x10) {
    27c8:	ldrb	r3, [r0, #19]
    27ca:	lsls	r3, r3, #27
    27cc:	bpl.n	27da <SPIClass::begin()+0x12e>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    27ce:	ldr	r2, [pc, #212]	; (28a4 <SPIClass::begin()+0x1f8>)
    27d0:	ldr	r3, [r0, #36]	; 0x24
    27d2:	ldr	r1, [r2, #0]
    27d4:	ands	r3, r1
    27d6:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    27d8:	str	r3, [r2, #0]
			}
			__enable_irq();
    27da:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    27dc:	ldr	r1, [pc, #200]	; (28a8 <SPIClass::begin()+0x1fc>)
    27de:	ldr	r3, [r0, #8]
    27e0:	cmp	r3, r1
    27e2:	beq.n	2834 <SPIClass::begin()+0x188>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    27e4:	ldr	r3, [pc, #164]	; (288c <SPIClass::begin()+0x1e0>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    27e6:	str	r1, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    27e8:	ldr	r2, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    27ea:	ldr	r3, [pc, #192]	; (28ac <SPIClass::begin()+0x200>)
    27ec:	ubfx	r4, r2, #4, #2
    27f0:	ubfx	r2, r2, #26, #3
    27f4:	ldr.w	r3, [r3, r4, lsl #2]
    27f8:	adds	r2, #1
    27fa:	udiv	r2, r3, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    27fe:	udiv	r3, r2, r1

			if (d && clkhz/d > _clock) d++;
    2802:	cbz	r3, 2824 <SPIClass::begin()+0x178>
    2804:	udiv	r2, r2, r3
    2808:	cmp	r2, r1
    280a:	it	hi
    280c:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    280e:	cmp.w	r3, #258	; 0x102
    2812:	bcs.n	281a <SPIClass::begin()+0x16e>
			if (d > 2) {
    2814:	cmp	r3, #2
    2816:	bls.n	2822 <SPIClass::begin()+0x176>
    2818:	b.n	281e <SPIClass::begin()+0x172>
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
    281a:	movw	r3, #257	; 0x101
			if (d > 2) {
				div = d-2;
    281e:	subs	r3, #2
    2820:	b.n	2824 <SPIClass::begin()+0x178>
			} else {
				div =0;
    2822:	movs	r3, #0
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2824:	lsrs	r2, r3, #1
    2826:	orr.w	r3, r3, r2, lsl #8
    282a:	lsls	r2, r2, #16
    282c:	and.w	r2, r2, #16711680	; 0xff0000
    2830:	orrs	r3, r2
    2832:	str	r3, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2834:	ldr	r3, [r0, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2836:	movs	r2, #0
    2838:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    283a:	movs	r2, #3
    283c:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    283e:	ldr	r2, [r0, #12]
    2840:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2842:	movs	r2, #7
    2844:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2846:	movs	r2, #1
    2848:	str	r2, [r3, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    284a:	ldrb	r3, [r0, #19]
    284c:	cbz	r3, 2888 <SPIClass::begin()+0x1dc>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    284e:	lsls	r5, r3, #31
    2850:	bpl.n	2858 <SPIClass::begin()+0x1ac>
    2852:	ldr	r2, [r0, #40]	; 0x28
    2854:	ldr	r3, [pc, #88]	; (28b0 <SPIClass::begin()+0x204>)
    2856:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2858:	ldrb	r3, [r0, #19]
    285a:	lsls	r4, r3, #30
    285c:	bpl.n	2864 <SPIClass::begin()+0x1b8>
    285e:	ldr	r2, [r0, #44]	; 0x2c
    2860:	ldr	r3, [pc, #80]	; (28b4 <SPIClass::begin()+0x208>)
    2862:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2864:	ldrb	r3, [r0, #19]
    2866:	lsls	r1, r3, #29
    2868:	bpl.n	2870 <SPIClass::begin()+0x1c4>
    286a:	ldr	r2, [r0, #48]	; 0x30
    286c:	ldr	r3, [pc, #72]	; (28b8 <SPIClass::begin()+0x20c>)
    286e:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2870:	ldrb	r3, [r0, #19]
    2872:	lsls	r2, r3, #28
    2874:	bpl.n	287c <SPIClass::begin()+0x1d0>
    2876:	ldr	r2, [r0, #52]	; 0x34
    2878:	ldr	r3, [pc, #64]	; (28bc <SPIClass::begin()+0x210>)
    287a:	str	r2, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    287c:	ldrb	r3, [r0, #19]
    287e:	lsls	r3, r3, #27
    2880:	bpl.n	2888 <SPIClass::begin()+0x1dc>
    2882:	ldr	r2, [r0, #56]	; 0x38
    2884:	ldr	r3, [pc, #56]	; (28c0 <SPIClass::begin()+0x214>)
    2886:	str	r2, [r3, #0]
    2888:	pop	{r4, r5, pc}
    288a:	nop
    288c:	.word	0x400fc000
    2890:	.word	0x2000088c
    2894:	.word	0xe000e180
    2898:	.word	0xe000e184
    289c:	.word	0xe000e188
    28a0:	.word	0xe000e18c
    28a4:	.word	0xe000e190
    28a8:	.word	0x003d0900
    28ac:	.word	0x20000640
    28b0:	.word	0xe000e100
    28b4:	.word	0xe000e104
    28b8:	.word	0xe000e108
    28bc:	.word	0xe000e10c
    28c0:	.word	0xe000e110

000028c4 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    28c4:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    28c6:	cbz	r3, 291c <SPIClass::transfer(void const*, void*, unsigned int)+0x58>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    28c8:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    28ca:	movw	r5, #513	; 0x201
    28ce:	str	r5, [r4, #16]
    28d0:	mov	r4, r3
    28d2:	ldr	r6, [r0, #0]

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    28d4:	cbz	r1, 28dc <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    28d6:	ldrb	r5, [r1, #0]
    28d8:	adds	r1, #1
    28da:	b.n	28e0 <SPIClass::transfer(void const*, void*, unsigned int)+0x1c>
    28dc:	ldrb.w	r5, [r0, #60]	; 0x3c
		count--; // how many bytes left to output.
    28e0:	subs	r4, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    28e2:	str	r5, [r6, #100]	; 0x64
    28e4:	ldr	r5, [r0, #0]
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    28e6:	ldr	r6, [r5, #112]	; 0x70
    28e8:	lsls	r6, r6, #30
    28ea:	bmi.n	28f8 <SPIClass::transfer(void const*, void*, unsigned int)+0x34>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    28ec:	ldr	r5, [r5, #116]	; 0x74
    28ee:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    28f0:	cbz	r2, 28f6 <SPIClass::transfer(void const*, void*, unsigned int)+0x32>
    28f2:	strb	r5, [r2, #0]
    28f4:	adds	r2, #1
				count_read--;
    28f6:	subs	r3, #1
    28f8:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    28fa:	ldr	r5, [r5, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    28fc:	lsls	r5, r5, #31
    28fe:	bpl.n	28e4 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    2900:	cmp	r4, #0
    2902:	bne.n	28d2 <SPIClass::transfer(void const*, void*, unsigned int)+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2904:	cbz	r3, 291c <SPIClass::transfer(void const*, void*, unsigned int)+0x58>
    2906:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2908:	ldr	r4, [r1, #112]	; 0x70
    290a:	lsls	r4, r4, #30
    290c:	bmi.n	2904 <SPIClass::transfer(void const*, void*, unsigned int)+0x40>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    290e:	ldr	r1, [r1, #116]	; 0x74
    2910:	uxtb	r1, r1
			if (p_read) *p_read++ = b; 
    2912:	cbz	r2, 2918 <SPIClass::transfer(void const*, void*, unsigned int)+0x54>
    2914:	strb	r1, [r2, #0]
    2916:	adds	r2, #1
			count_read--;
    2918:	subs	r3, #1
    291a:	b.n	2904 <SPIClass::transfer(void const*, void*, unsigned int)+0x40>
    291c:	pop	{r4, r5, r6, pc}
	...

00002920 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    2920:	ldr	r3, [r0, #72]	; 0x48
    2922:	push	{r4, lr}
    2924:	ldrb	r2, [r3, #4]
    2926:	mov	r4, r0
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2928:	ldr	r3, [pc, #112]	; (299c <SPIClass::dma_rxisr()+0x7c>)
    292a:	strb	r2, [r3, #31]
    292c:	ldr	r2, [r0, #68]	; 0x44
    292e:	ldrb	r2, [r2, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2930:	strb	r2, [r3, #28]
    2932:	ldr	r2, [r0, #72]	; 0x48
    2934:	ldrb	r2, [r2, #4]
    2936:	strb	r2, [r3, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2938:	ldr	r2, [r0, #64]	; 0x40
    293a:	cbz	r2, 2974 <SPIClass::dma_rxisr()+0x54>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    293c:	cmp.w	r2, #32768	; 0x8000
    2940:	bcc.n	294c <SPIClass::dma_rxisr()+0x2c>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2942:	sub.w	r2, r2, #32640	; 0x7f80
    2946:	subs	r2, #127	; 0x7f
    2948:	str	r2, [r0, #64]	; 0x40
    294a:	b.n	2964 <SPIClass::dma_rxisr()+0x44>
    294c:	ldr	r3, [r0, #68]	; 0x44
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    294e:	mov	r1, r2
    2950:	ldr	r0, [r3, #0]
    2952:	bl	2688 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>
    2956:	ldr	r3, [r4, #72]	; 0x48
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    2958:	ldr	r1, [r4, #64]	; 0x40
    295a:	ldr	r0, [r3, #0]
    295c:	bl	2688 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.12]>

			_dma_count_remaining = 0;
    2960:	movs	r3, #0
    2962:	str	r3, [r4, #64]	; 0x40
    2964:	ldr	r3, [r4, #72]	; 0x48
    2966:	ldrb	r2, [r3, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2968:	ldr	r3, [pc, #48]	; (299c <SPIClass::dma_rxisr()+0x7c>)
    296a:	strb	r2, [r3, #27]
    296c:	ldr	r2, [r4, #68]	; 0x44
    296e:	ldrb	r2, [r2, #4]
    2970:	strb	r2, [r3, #27]
    2972:	pop	{r4, pc}
    2974:	ldr	r3, [r0, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2976:	movs	r1, #15
    2978:	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    297a:	movw	r1, #769	; 0x301
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    297e:	str	r2, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2980:	str	r1, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2982:	mov.w	r1, #16128	; 0x3f00
    2986:	str	r1, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2988:	movs	r3, #3
		_dma_event_responder->triggerEvent();
    298a:	mov	r1, r2
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    298c:	strb.w	r3, [r0, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    2990:	ldr	r0, [r0, #76]	; 0x4c
    2992:	ldr	r3, [r0, #0]

	}
}
    2994:	ldmia.w	sp!, {r4, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2998:	ldr	r3, [r3, #0]
    299a:	bx	r3
    299c:	.word	0x400e8000

000029a0 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    29a0:	push	{r3, lr}
    29a2:	ldr	r0, [pc, #8]	; (29ac <_spi_dma_rxISR0()+0xc>)
    29a4:	bl	2920 <SPIClass::dma_rxisr()>
    29a8:	pop	{r3, pc}
    29aa:	nop
    29ac:	.word	0x200016b4

000029b0 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    29b0:	bx	lr

000029b2 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    29b2:	mov	r2, r1
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    29b4:	ldr.w	r1, [r0, #1156]	; 0x484
    29b8:	push	{lr}
    29ba:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->exists(path) : false;
    29bc:	cbz	r1, 29d4 <SDClass::exists(char const*)+0x22>
    29be:	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    29c0:	mov	r0, sp
    29c2:	strb.w	r3, [sp]
    29c6:	strb.w	r3, [sp, #1]
    29ca:	strb.w	r3, [sp, #2]
    29ce:	bl	5c4c <FatFile::open(FatVolume*, char const*, int)>
    29d2:	b.n	29f0 <SDClass::exists(char const*)+0x3e>
    29d4:	ldr.w	r0, [r0, #1160]	; 0x488
    29d8:	cbz	r0, 29f0 <SDClass::exists(char const*)+0x3e>
    29da:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    29de:	mov	r3, r1
    29e0:	strb.w	r1, [sp, #50]	; 0x32
    29e4:	strb.w	r1, [sp, #51]	; 0x33
    29e8:	mov	r1, r0
    29ea:	mov	r0, sp
    29ec:	bl	4104 <ExFatFile::open(ExFatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    29f0:	add	sp, #60	; 0x3c
    29f2:	ldr.w	pc, [sp], #4

000029f6 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    29f6:	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    29f8:	ldr.w	r1, [r0, #1156]	; 0x484
    29fc:	push	{lr}
    29fe:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->rmdir(path) : false;
    2a00:	cbz	r1, 2a20 <SDClass::rmdir(char const*)+0x2a>
    2a02:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2a04:	mov	r0, sp
    2a06:	strb.w	r3, [sp]
    2a0a:	strb.w	r3, [sp, #1]
    2a0e:	strb.w	r3, [sp, #2]
    2a12:	bl	5c4c <FatFile::open(FatVolume*, char const*, int)>
    2a16:	cbz	r0, 2a44 <SDClass::rmdir(char const*)+0x4e>
    2a18:	mov	r0, sp
    2a1a:	bl	5ac6 <FatFile::rmdir()>
    2a1e:	b.n	2a44 <SDClass::rmdir(char const*)+0x4e>
    2a20:	ldr.w	r0, [r0, #1160]	; 0x488
    2a24:	cbz	r0, 2a44 <SDClass::rmdir(char const*)+0x4e>
    2a26:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2a2a:	mov	r3, r1
    2a2c:	strb.w	r1, [sp, #50]	; 0x32
    2a30:	strb.w	r1, [sp, #51]	; 0x33
    2a34:	mov	r1, r0
    2a36:	mov	r0, sp
    2a38:	bl	4104 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2a3c:	cbz	r0, 2a44 <SDClass::rmdir(char const*)+0x4e>
    2a3e:	mov	r0, sp
    2a40:	bl	4712 <ExFatFile::rmdir()>
		return sdfs.rmdir(filepath);
	}
    2a44:	add	sp, #60	; 0x3c
    2a46:	ldr.w	pc, [sp], #4

00002a4a <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    2a4a:	mov	r2, r1
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    2a4c:	ldr.w	r1, [r0, #1156]	; 0x484
    2a50:	push	{lr}
    2a52:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->remove(path) : false;
    2a54:	cbz	r1, 2a76 <SDClass::remove(char const*)+0x2c>
    2a56:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2a58:	mov	r0, sp
    2a5a:	strb.w	r3, [sp]
    2a5e:	strb.w	r3, [sp, #1]
    2a62:	strb.w	r3, [sp, #2]
    2a66:	movs	r3, #1
    2a68:	bl	5c4c <FatFile::open(FatVolume*, char const*, int)>
    2a6c:	cbz	r0, 2a9a <SDClass::remove(char const*)+0x50>
    2a6e:	mov	r0, sp
    2a70:	bl	6cd0 <FatFile::remove()>
    2a74:	b.n	2a9a <SDClass::remove(char const*)+0x50>
    2a76:	ldr.w	r0, [r0, #1160]	; 0x488
    2a7a:	cbz	r0, 2a9a <SDClass::remove(char const*)+0x50>
    2a7c:	strb.w	r1, [sp, #49]	; 0x31
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2a80:	movs	r3, #1
    2a82:	strb.w	r1, [sp, #50]	; 0x32
    2a86:	strb.w	r1, [sp, #51]	; 0x33
    2a8a:	mov	r1, r0
    2a8c:	mov	r0, sp
    2a8e:	bl	4104 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2a92:	cbz	r0, 2a9a <SDClass::remove(char const*)+0x50>
    2a94:	mov	r0, sp
    2a96:	bl	468c <ExFatFile::remove()>
		return sdfs.remove(filepath);
	}
    2a9a:	add	sp, #60	; 0x3c
    2a9c:	ldr.w	pc, [sp], #4

00002aa0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    2aa0:	push	{r4, lr}
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2aa2:	ldr.w	r4, [r0, #1156]	; 0x484
    2aa6:	sub	sp, #56	; 0x38
    2aa8:	mov	r2, r1
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2aaa:	cbz	r4, 2ac8 <SDClass::mkdir(char const*)+0x28>
    2aac:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    2aae:	add.w	r1, r4, #1096	; 0x448
    2ab2:	mov	r0, sp
    2ab4:	strb.w	r3, [sp]
    2ab8:	strb.w	r3, [sp, #1]
    2abc:	strb.w	r3, [sp, #2]
    2ac0:	movs	r3, #1
    2ac2:	bl	5dd0 <FatFile::mkdir(FatFile*, char const*, bool)>
    2ac6:	b.n	2aea <SDClass::mkdir(char const*)+0x4a>
    2ac8:	ldr.w	r1, [r0, #1160]	; 0x488
    2acc:	cbz	r1, 2ae8 <SDClass::mkdir(char const*)+0x48>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    2ace:	movs	r3, #1
    2ad0:	add.w	r1, r1, #1096	; 0x448
    2ad4:	mov	r0, sp
    2ad6:	strb.w	r4, [sp, #49]	; 0x31
    2ada:	strb.w	r4, [sp, #50]	; 0x32
    2ade:	strb.w	r4, [sp, #51]	; 0x33
    2ae2:	bl	49a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2ae6:	b.n	2aea <SDClass::mkdir(char const*)+0x4a>
    2ae8:	mov	r0, r1
		return sdfs.mkdir(filepath);
	}
    2aea:	add	sp, #56	; 0x38
    2aec:	pop	{r4, pc}

00002aee <SDClass::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    2aee:	ldr.w	r3, [r0, #1156]	; 0x484
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2af2:	push	{r4, r5, lr}
    2af4:	mov	r5, r2
    2af6:	sub	sp, #60	; 0x3c
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    2af8:	cbz	r3, 2b26 <SDClass::rename(char const*, char const*)+0x38>
    2afa:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    2afc:	add.w	r4, r3, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b00:	mov	r0, sp
    2b02:	strb.w	r2, [sp]
    2b06:	mov	r3, r2
    2b08:	strb.w	r2, [sp, #1]
    2b0c:	strb.w	r2, [sp, #2]
    2b10:	mov	r2, r1
    2b12:	mov	r1, r4
    2b14:	bl	5ba4 <FatFile::open(FatFile*, char const*, int)>
    2b18:	cbz	r0, 2b52 <SDClass::rename(char const*, char const*)+0x64>
    2b1a:	mov	r2, r5
    2b1c:	mov	r1, r4
    2b1e:	mov	r0, sp
    2b20:	bl	5e7a <FatFile::rename(FatFile*, char const*)>
    2b24:	b.n	2b52 <SDClass::rename(char const*, char const*)+0x64>
    2b26:	ldr.w	r0, [r0, #1160]	; 0x488
    2b2a:	cbz	r0, 2b52 <SDClass::rename(char const*, char const*)+0x64>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    2b2c:	add.w	r4, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char* oldPath, const char* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b30:	mov	r2, r1
    2b32:	mov	r0, sp
    2b34:	strb.w	r3, [sp, #49]	; 0x31
    2b38:	mov	r1, r4
    2b3a:	strb.w	r3, [sp, #50]	; 0x32
    2b3e:	strb.w	r3, [sp, #51]	; 0x33
    2b42:	bl	4048 <ExFatFile::open(ExFatFile*, char const*, int)>
    2b46:	cbz	r0, 2b52 <SDClass::rename(char const*, char const*)+0x64>
    2b48:	mov	r2, r5
    2b4a:	mov	r1, r4
    2b4c:	mov	r0, sp
    2b4e:	bl	4a68 <ExFatFile::rename(ExFatFile*, char const*)>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    2b52:	add	sp, #60	; 0x3c
    2b54:	pop	{r4, r5, pc}

00002b56 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    2b56:	mov	r3, r0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2b58:	adds	r0, #4
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    2b5a:	ldr.w	r2, [r3, #1156]	; 0x484
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    2b5e:	push	{r4, lr}
           m_xVol ? m_xVol->clusterCount() : 0;
    2b60:	cbz	r2, 2b68 <SDClass::totalSize()+0x12>
    2b62:	ldr	r4, [r2, #28]
    2b64:	subs	r4, #1
    2b66:	b.n	2b72 <SDClass::totalSize()+0x1c>
    2b68:	ldr.w	r4, [r3, #1160]	; 0x488
    2b6c:	cbz	r4, 2b72 <SDClass::totalSize()+0x1c>
    2b6e:	ldr.w	r4, [r4, #1072]	; 0x430
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2b72:	bl	15bc <FsVolume::bytesPerCluster() const>
	}
    2b76:	umull	r0, r1, r4, r0
    2b7a:	pop	{r4, pc}

00002b7c <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    2b7c:	push	{r3, r4, r5, lr}
    2b7e:	mov	r3, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2b80:	adds	r5, r0, #4
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
    2b82:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    2b86:	cbz	r0, 2b92 <SDClass::usedSize()+0x16>
    2b88:	ldr	r4, [r0, #28]
    2b8a:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    2b8c:	bl	64f4 <FatPartition::freeClusterCount()>
    2b90:	b.n	2ba4 <SDClass::usedSize()+0x28>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    2b92:	ldr.w	r0, [r3, #1160]	; 0x488
    2b96:	cbz	r0, 2ba2 <SDClass::usedSize()+0x26>
    2b98:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2b9c:	bl	4404 <ExFatPartition::freeClusterCount()>
    2ba0:	b.n	2ba4 <SDClass::usedSize()+0x28>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    2ba2:	mov	r4, r0
    2ba4:	subs	r4, r4, r0
		  * (uint64_t)sdfs.bytesPerCluster();
    2ba6:	mov	r0, r5
    2ba8:	bl	15bc <FsVolume::bytesPerCluster() const>
	}
    2bac:	umull	r0, r1, r4, r0
    2bb0:	pop	{r3, r4, r5, pc}

00002bb2 <SdBase<FsVolume>::begin(SdioConfig)>:
  /** Initialize SD card and file system for SDIO mode.
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    2bb2:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2bb4:	add.w	r5, r0, #1168	; 0x490
    spiConfigBackupPin = 255;
    2bb8:	movs	r3, #255	; 0xff
  /** Initialize SD card and file system for SDIO mode.
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    2bba:	mov	r4, r0
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    2bbc:	strb.w	r1, [r0, #1212]	; 0x4bc
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    2bc0:	strb.w	r3, [r0, #1200]	; 0x4b0
    2bc4:	mov	r0, r5
    2bc6:	bl	8224 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2bca:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2bce:	mov	r0, r5
    2bd0:	bl	79dc <SdioCard::errorCode() const>
    2bd4:	cbnz	r0, 2be4 <SdBase<FsVolume>::begin(SdioConfig)+0x32>
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2bd6:	ldr.w	r1, [r4, #1164]	; 0x48c
    2bda:	mov	r0, r4
  }
    2bdc:	ldmia.w	sp!, {r3, r4, r5, lr}
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2be0:	b.w	6ee8 <FsVolume::begin(BlockDeviceInterface*)>
  }
    2be4:	movs	r0, #0
    2be6:	pop	{r3, r4, r5, pc}

00002be8 <SdBase<FsVolume>::cardBegin(SdSpiConfig)>:
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    2be8:	push	{r4, r5, r6, lr}
    2bea:	sub	sp, #32
    2bec:	mov	r6, r0
    2bee:	add	r0, sp, #4
    2bf0:	add	r5, sp, #20
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2bf2:	addw	r4, r6, #1180	; 0x49c
    2bf6:	stmia.w	r0, {r1, r2, r3}
    2bfa:	ldmia	r0, {r0, r1, r2}
    2bfc:	stmia.w	r5, {r0, r1, r3}
    2c00:	mov	r0, r4
    2c02:	ldmia.w	r5, {r1, r2, r3}
    2c06:	bl	7320 <SdSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    2c0a:	str.w	r4, [r6, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2c0e:	cbz	r4, 2c1c <SdBase<FsVolume>::cardBegin(SdSpiConfig)+0x34>
    2c10:	ldrb.w	r0, [r6, #1195]	; 0x4ab
    2c14:	clz	r0, r0
    2c18:	lsrs	r0, r0, #5
    2c1a:	b.n	2c1e <SdBase<FsVolume>::cardBegin(SdSpiConfig)+0x36>
    2c1c:	mov	r0, r4
  }
    2c1e:	add	sp, #32
    2c20:	pop	{r4, r5, r6, pc}

00002c22 <SdBase<FsVolume>::restart()>:
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    2c22:	push	{r4, r5, lr}
    if (spiConfigBackupPin == 255) {
    2c24:	ldrb.w	r3, [r0, #1200]	; 0x4b0
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    2c28:	sub	sp, #20
    2c2a:	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    2c2c:	cmp	r3, #255	; 0xff
    2c2e:	bne.n	2c3a <SdBase<FsVolume>::restart()+0x18>
      return begin(sdioConfigBackup);
    2c30:	ldrb.w	r1, [r0, #1212]	; 0x4bc
    2c34:	bl	2bb2 <SdBase<FsVolume>::begin(SdioConfig)>
    2c38:	b.n	2c6e <SdBase<FsVolume>::restart()+0x4c>
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2c3a:	ldr.w	r1, [r0, #1204]	; 0x4b4
    2c3e:	ldr.w	r2, [r0, #1208]	; 0x4b8
    2c42:	strb.w	r3, [sp, #4]
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2c46:	add	r3, sp, #16
  bool restart() {
    if (spiConfigBackupPin == 255) {
      return begin(sdioConfigBackup);
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2c48:	ldrb.w	r5, [r0, #1201]	; 0x4b1
    2c4c:	str	r1, [sp, #8]
    2c4e:	strb.w	r5, [sp, #5]
    2c52:	str	r2, [sp, #12]
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2c54:	ldmdb	r3, {r1, r2, r3}
    2c58:	bl	2be8 <SdBase<FsVolume>::cardBegin(SdSpiConfig)>
    2c5c:	cbz	r0, 2c6e <SdBase<FsVolume>::restart()+0x4c>
    2c5e:	ldr.w	r1, [r4, #1164]	; 0x48c
    2c62:	mov	r0, r4
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
      return begin(spiConfig);
    }
  }
    2c64:	add	sp, #20
    2c66:	ldmia.w	sp!, {r4, r5, lr}
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2c6a:	b.w	6ee8 <FsVolume::begin(BlockDeviceInterface*)>
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
      return begin(spiConfig);
    }
  }
    2c6e:	add	sp, #20
    2c70:	pop	{r4, r5, pc}

00002c72 <SDClass::format(int, char, Print&)>:
	}
}
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    2c72:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c76:	ldr.w	r4, [r0, #1168]	; 0x490
    2c7a:	sub	sp, #48	; 0x30
    2c7c:	mov	r6, r0
    2c7e:	mov	r7, r3
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    2c80:	cbnz	r4, 2c86 <SDClass::format(int, char, Print&)+0x14>
    2c82:	movs	r0, #0
    2c84:	b.n	2cd0 <SDClass::format(int, char, Print&)+0x5e>
	uint32_t sectors = card->sectorCount();
    2c86:	ldr	r3, [r4, #0]
    2c88:	mov	r0, r4
    2c8a:	ldr	r3, [r3, #24]
    2c8c:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2c8e:	cmp.w	r0, #12288	; 0x3000

bool SDClass::format(int type, char progressChar, Print& pr)
{
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
	uint32_t sectors = card->sectorCount();
    2c92:	mov	r8, r0
	if (sectors <= 12288) return false; // card too small
    2c94:	bls.n	2c82 <SDClass::format(int, char, Print&)+0x10>
	uint8_t *buf = (uint8_t *)malloc(512);
    2c96:	mov.w	r0, #512	; 0x200
    2c9a:	bl	a6fc <malloc>
	if (!buf) return false; // unable to allocate memory
    2c9e:	mov	r5, r0
    2ca0:	cmp	r0, #0
    2ca2:	beq.n	2c82 <SDClass::format(int, char, Print&)+0x10>
	bool ret;
	if (sectors > 67108864) {
    2ca4:	cmp.w	r8, #67108864	; 0x4000000
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    2ca8:	mov	r2, r0
    2caa:	mov	r3, r7
    2cac:	mov	r1, r4
    2cae:	add	r0, sp, #4
	uint32_t sectors = card->sectorCount();
	if (sectors <= 12288) return false; // card too small
	uint8_t *buf = (uint8_t *)malloc(512);
	if (!buf) return false; // unable to allocate memory
	bool ret;
	if (sectors > 67108864) {
    2cb0:	bls.n	2cb8 <SDClass::format(int, char, Print&)+0x46>
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    2cb2:	bl	3398 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>
    2cb6:	b.n	2cbc <SDClass::format(int, char, Print&)+0x4a>
#else
		ret = false;
#endif
	} else {
		FatFormatter fatFormatter;
		ret = fatFormatter.format(card, buf, &pr);
    2cb8:	bl	5328 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>
    2cbc:	mov	r4, r0
	}
	free(buf);
    2cbe:	mov	r0, r5
    2cc0:	bl	a70c <free>
	if (ret) {
    2cc4:	cmp	r4, #0
    2cc6:	beq.n	2c82 <SDClass::format(int, char, Print&)+0x10>
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2cc8:	adds	r0, r6, #4
    2cca:	bl	2c22 <SdBase<FsVolume>::restart()>
    2cce:	movs	r0, #1
	}
	return ret;
}
    2cd0:	add	sp, #48	; 0x30
    2cd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00002cd8 <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    2cd8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2cda:	ldr.w	r6, [r0, #1168]	; 0x490
    2cde:	mov	r5, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
	if (card) {
    2ce0:	cbnz	r6, 2ce6 <SDClass::mediaPresent()+0xe>
			}
			//Serial.print(ret ? "begin ok" : "begin nope");
		}
	} else {
		//Serial.print("no card");
		ret = false;
    2ce2:	movs	r0, #0
    2ce4:	b.n	2d36 <SDClass::mediaPresent()+0x5e>
{
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
	if (card) {
		if (cardPreviouslyPresent) {
    2ce6:	ldrb.w	r2, [r0, #1220]	; 0x4c4
    2cea:	ldrb.w	r3, [r0, #1221]	; 0x4c5
    2cee:	cbz	r2, 2d20 <SDClass::mediaPresent()+0x48>
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    2cf0:	cmp	r3, #254	; 0xfe
    2cf2:	beq.n	2d00 <SDClass::mediaPresent()+0x28>
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// SPI doesn't have 32 bit status, read CID register
				cid_t cid;
				ret = card->readCID(&cid);
    2cf4:	ldr	r3, [r6, #0]
    2cf6:	mov	r1, sp
    2cf8:	mov	r0, r6
    2cfa:	ldr	r3, [r3, #56]	; 0x38
    2cfc:	blx	r3
    2cfe:	b.n	2d36 <SDClass::mediaPresent()+0x5e>
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
				#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
				card->syncDevice();
				#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
				s = card->status();
    2d00:	ldr	r3, [r6, #0]
    2d02:	mov	r0, r6
    2d04:	ldr	r3, [r3, #68]	; 0x44
    2d06:	blx	r3
			} else s = 0xFFFFFFFF;
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
    2d08:	adds	r2, r0, #1
    2d0a:	beq.n	2cf4 <SDClass::mediaPresent()+0x1c>
				// SPI doesn't have 32 bit status, read CID register
				cid_t cid;
				ret = card->readCID(&cid);
				//Serial.print(ret ? "CID=ok" : "CID=unreadable");
			} else if (s == 0) {
    2d0c:	cbnz	r0, 2d34 <SDClass::mediaPresent()+0x5c>
				// bits 12:9 are card state, which should
				// normally be 101 = data transfer mode
				//Serial.print("status=offline");
				ret = false;
				#ifdef __IMXRT1062__
				if (csPin_ == BUILTIN_SDCARD) 
    2d0e:	ldrb.w	r3, [r5, #1221]	; 0x4c5
    2d12:	cmp	r3, #254	; 0xfe
    2d14:	bne.n	2ce2 <SDClass::mediaPresent()+0xa>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2d16:	movs	r1, #3
    2d18:	movs	r0, #38	; 0x26
    2d1a:	bl	9c94 <pinMode>
    2d1e:	b.n	2ce2 <SDClass::mediaPresent()+0xa>
				ret = true;
			}
		} else {
			// TODO: need a quick test, only call begin if likely present
			#ifdef __IMXRT1062__
			if ((csPin_ == BUILTIN_SDCARD) && !digitalReadFast(_SD_DAT3))
    2d20:	cmp	r3, #254	; 0xfe
    2d22:	bne.n	2d2c <SDClass::mediaPresent()+0x54>
		} else if (pin == 36) {
			return (CORE_PIN36_PINREG & CORE_PIN36_BITMASK) ? 1 : 0;
		} else if (pin == 37) {
			return (CORE_PIN37_PINREG & CORE_PIN37_BITMASK) ? 1 : 0;
		} else if (pin == 38) {
			return (CORE_PIN38_PINREG & CORE_PIN38_BITMASK) ? 1 : 0;
    2d24:	ldr	r3, [pc, #24]	; (2d40 <SDClass::mediaPresent()+0x68>)
    2d26:	ldr	r3, [r3, #8]
    2d28:	lsls	r3, r3, #14
    2d2a:	bpl.n	2ce2 <SDClass::mediaPresent()+0xa>
				ret = false;
			else
			#endif
			{
				ret = sdfs.restart();
    2d2c:	adds	r0, r5, #4
    2d2e:	bl	2c22 <SdBase<FsVolume>::restart()>
    2d32:	b.n	2d36 <SDClass::mediaPresent()+0x5e>
				if (csPin_ == BUILTIN_SDCARD) 
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
				#endif
			} else {
				//Serial.print("status=present");
				ret = true;
    2d34:	movs	r0, #1
	} else {
		//Serial.print("no card");
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
    2d36:	strb.w	r0, [r5, #1220]	; 0x4c4
	return ret;
}
    2d3a:	add	sp, #16
    2d3c:	pop	{r4, r5, r6, pc}
    2d3e:	nop
    2d40:	.word	0x42008000

00002d44 <_GLOBAL__sub_I_SD>:


class SDClass : public FS
{
public:
	SDClass() { }
    2d44:	ldr	r0, [pc, #72]	; (2d90 <_GLOBAL__sub_I_SD+0x4c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2d46:	ldr	r2, [pc, #76]	; (2d94 <_GLOBAL__sub_I_SD+0x50>)
    2d48:	ldr	r3, [pc, #76]	; (2d98 <_GLOBAL__sub_I_SD+0x54>)
    2d4a:	str.w	r2, [r0, #1172]	; 0x494
    2d4e:	ldr	r2, [pc, #76]	; (2d9c <_GLOBAL__sub_I_SD+0x58>)
    2d50:	str	r3, [r0, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    2d52:	movs	r3, #0
    2d54:	str.w	r2, [r0, #1184]	; 0x4a0
    2d58:	movs	r2, #1
    2d5a:	str.w	r3, [r0, #1156]	; 0x484
    2d5e:	strb.w	r2, [r0, #1197]	; 0x4ad
    2d62:	movs	r2, #41	; 0x29
    2d64:	str.w	r3, [r0, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2d68:	strb.w	r3, [r0, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2d6c:	strb.w	r3, [r0, #1181]	; 0x49d
    2d70:	strb.w	r3, [r0, #1202]	; 0x4b2
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2d74:	strb.w	r3, [r0, #1216]	; 0x4c0
    2d78:	strb.w	r3, [r0, #1220]	; 0x4c4
    2d7c:	movs	r3, #255	; 0xff
    2d7e:	strb.w	r2, [r0, #1199]	; 0x4af
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    2d82:	ldr	r1, [pc, #28]	; (2da0 <_GLOBAL__sub_I_SD+0x5c>)
    2d84:	ldr	r2, [pc, #28]	; (2da4 <_GLOBAL__sub_I_SD+0x60>)
    2d86:	strb.w	r3, [r0, #1221]	; 0x4c5
    2d8a:	b.w	a308 <__aeabi_atexit>
    2d8e:	nop
    2d90:	.word	0x20002464
    2d94:	.word	0x20000588
    2d98:	.word	0x20000534
    2d9c:	.word	0x200005e8
    2da0:	.word	0x000029b1
    2da4:	.word	0x200016a8

00002da8 <FsUtf::cpToMb(unsigned long, char*, char*)>:
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    if (cp < 0X80) {
    2da8:	cmp	r0, #127	; 0x7f
 */
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    2daa:	sub.w	r2, r2, r1
    if (cp < 0X80) {
    2dae:	bhi.n	2dba <FsUtf::cpToMb(unsigned long, char*, char*)+0x12>
      if (n < 1) goto fail;
    2db0:	cmp	r2, #0
    2db2:	beq.n	2e34 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8c>
      *(str++) = static_cast<uint8_t>(cp);
    2db4:	strb	r0, [r1, #0]
    2db6:	adds	r0, r1, #1
    2db8:	bx	lr
    } else if (cp < 0X800) {
    2dba:	cmp.w	r0, #2048	; 0x800
    2dbe:	bcs.n	2ddc <FsUtf::cpToMb(unsigned long, char*, char*)+0x34>
      if (n < 2) goto fail;
    2dc0:	cmp	r2, #1
    2dc2:	bls.n	2e38 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2dc4:	lsrs	r3, r0, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2dc6:	and.w	r0, r0, #63	; 0x3f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2dca:	mov	r2, r1
    2dcc:	orn	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2dd0:	orn	r0, r0, #127	; 0x7f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2dd4:	strb.w	r3, [r2], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2dd8:	strb	r0, [r1, #1]
    2dda:	b.n	2e34 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8c>
    } else if (cp < 0X10000) {
    2ddc:	cmp.w	r0, #65536	; 0x10000
    2de0:	bcs.n	2e06 <FsUtf::cpToMb(unsigned long, char*, char*)+0x5e>
      if (n < 3) goto fail;
    2de2:	cmp	r2, #2
    2de4:	bls.n	2e38 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    2de6:	lsrs	r3, r0, #12
    2de8:	orn	r3, r3, #31
    2dec:	strb	r3, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2dee:	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2df2:	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else if (cp < 0X10000) {
      if (n < 3) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2df6:	orn	r3, r3, #127	; 0x7f
    2dfa:	strb	r3, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2dfc:	orn	r3, r0, #127	; 0x7f
    2e00:	adds	r0, r1, #3
    2e02:	strb	r3, [r1, #2]
    2e04:	bx	lr
    } else {
       if (n < 4) goto fail;
    2e06:	cmp	r2, #3
    2e08:	bls.n	2e38 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    2e0a:	lsrs	r3, r0, #18
    2e0c:	orn	r3, r3, #15
    2e10:	strb	r3, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    2e12:	ubfx	r3, r0, #12, #6
    2e16:	orn	r3, r3, #127	; 0x7f
    2e1a:	strb	r3, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2e1c:	ubfx	r3, r0, #6, #6
    2e20:	orn	r3, r3, #127	; 0x7f
    2e24:	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2e26:	and.w	r3, r0, #63	; 0x3f
    2e2a:	adds	r0, r1, #4
    2e2c:	orn	r3, r3, #127	; 0x7f
    2e30:	strb	r3, [r1, #3]
    2e32:	bx	lr
    }
    return str;

   fail:
    return nullptr;
    2e34:	mov	r0, r2
    2e36:	bx	lr
    2e38:	movs	r0, #0
  }
    2e3a:	bx	lr

00002e3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    2e3c:	cmp	r0, r1
   fail:
    return nullptr;
  }
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    2e3e:	push	{r4, r5, lr}
    size_t n;
    uint32_t cp;
    if (str >= end) {
    2e40:	bcs.n	2eb0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
      return nullptr;
    }
    uint8_t ch = str[0];
    2e42:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    2e44:	lsls	r4, r3, #24
    2e46:	bmi.n	2e4e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x12>
      *rtn = ch;
    2e48:	str	r3, [r2, #0]
      return str + 1;
    2e4a:	adds	r4, r0, #1
    2e4c:	b.n	2eb6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7a>
    }
    if ((ch & 0XE0) == 0XC0) {
    2e4e:	and.w	r4, r3, #224	; 0xe0
    2e52:	cmp	r4, #192	; 0xc0
    2e54:	bne.n	2e5e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x22>
      cp = ch & 0X1F;
    2e56:	and.w	r3, r3, #31
      n = 2;
    2e5a:	movs	r4, #2
    2e5c:	b.n	2e7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x40>
    } else if ((ch & 0XF0) == 0XE0) {
    2e5e:	and.w	r4, r3, #240	; 0xf0
    2e62:	cmp	r4, #224	; 0xe0
    2e64:	bne.n	2e6e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x32>
      cp = ch & 0X0F;
    2e66:	and.w	r3, r3, #15
      n = 3;
    2e6a:	movs	r4, #3
    2e6c:	b.n	2e7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x40>
    } else if ((ch & 0XF8) == 0XF0) {
    2e6e:	and.w	r4, r3, #248	; 0xf8
    2e72:	cmp	r4, #240	; 0xf0
    2e74:	bne.n	2eb0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
      cp = ch & 0X07;
    2e76:	and.w	r3, r3, #7
      n = 4;
    2e7a:	movs	r4, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    2e7c:	add	r4, r0
    2e7e:	cmp	r1, r4
    2e80:	bcc.n	2eb0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
    2e82:	adds	r0, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    2e84:	ldrb.w	r1, [r0], #1
      if ((ch & 0XC0) != 0X80) {
    2e88:	and.w	r5, r1, #192	; 0xc0
    2e8c:	cmp	r5, #128	; 0x80
    2e8e:	bne.n	2eb0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    2e90:	and.w	r1, r1, #63	; 0x3f
      return nullptr;
    }
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
    2e94:	cmp	r0, r4
      ch = str[i];
      if ((ch & 0XC0) != 0X80) {
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    2e96:	orr.w	r3, r1, r3, lsl #6
      return nullptr;
    }
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
    2e9a:	bne.n	2e84 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x48>
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    2e9c:	sub.w	r0, r3, #128	; 0x80
    2ea0:	ldr	r1, [pc, #24]	; (2ebc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>)
    2ea2:	cmp	r0, r1
    2ea4:	bhi.n	2eb0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x74>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    2ea6:	sub.w	r1, r3, #55296	; 0xd800
    2eaa:	cmp.w	r1, #2048	; 0x800
    2eae:	bcs.n	2eb4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
      return nullptr;
    2eb0:	movs	r4, #0
    2eb2:	b.n	2eb6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7a>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    2eb4:	str	r3, [r2, #0]
    return str + n;
  }
    2eb6:	mov	r0, r4
    2eb8:	pop	{r4, r5, pc}
    2eba:	nop
    2ebc:	.word	0x0010ff7f

00002ec0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>:
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    2ec0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec4:	add	r6, sp, #48	; 0x30
    2ec6:	mov	r5, r0
    2ec8:	mov	r4, r2
    2eca:	mov	sl, r3
    uint32_t firstLBA;
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    2ecc:	str	r1, [sp, #4]
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    2ece:	ldmia.w	r6, {r6, r7, r8}
    uint32_t firstLBA;
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    2ed2:	cbnz	r1, 2ed8 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x18>
    2ed4:	movs	r0, #0
    2ed6:	b.n	305e <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    2ed8:	cmp.w	sl, #0
    2edc:	beq.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    part--; // zero base it.

    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    2ede:	ldr	r3, [r0, #0]
    2ee0:	movs	r1, #0
    2ee2:	ldr	r3, [r3, #12]
    2ee4:	blx	r3
    2ee6:	cmp	r0, #0
    2ee8:	beq.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    part--; // zero base it.
    2eea:	ldr	r3, [sp, #4]
    2eec:	add.w	r9, r3, #4294967295
    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    mbr = reinterpret_cast<MbrSector_t*>(secBuf);

    // First check for GPT vs MBR
    mp = &mbr->part[0];
    if (mp->type == 0xee) {
    2ef0:	ldrb.w	r3, [r4, #450]	; 0x1c2
    2ef4:	cmp	r3, #238	; 0xee
    uint32_t sectorCount;
    MbrSector_t *mbr;
    MbrPart_t *mp;

    if (!part || !pfirstLBA) return INVALID_VOL; // won't handle this here.
    part--; // zero base it.
    2ef6:	uxtb.w	r9, r9
    if (!blockDev->readSector(0, secBuf)) return INVALID_VOL;
    mbr = reinterpret_cast<MbrSector_t*>(secBuf);

    // First check for GPT vs MBR
    mp = &mbr->part[0];
    if (mp->type == 0xee) {
    2efa:	bne.n	2f7c <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xbc>
      // This is a GPT initialized Disk assume validation done earlier.
      if (!blockDev->readSector(1, secBuf)) return INVALID_VOL; 
    2efc:	ldr	r3, [r5, #0]
    2efe:	mov	r2, r4
    2f00:	movs	r1, #1
    2f02:	mov	r0, r5
    2f04:	ldr	r3, [r3, #12]
    2f06:	blx	r3
    2f08:	cmp	r0, #0
    2f0a:	beq.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      GPTPartitionHeader_t* gptph = reinterpret_cast<GPTPartitionHeader_t*>(secBuf);
      // Lets do a little validation of this data.
      if (!gptph || (memcmp(gptph->signature, F("EFI PART"), 8) != 0))  return INVALID_VOL;
    2f0c:	movs	r2, #8
    2f0e:	ldr	r1, [pc, #340]	; (3064 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x1a4>)
    2f10:	mov	r0, r4
    2f12:	bl	ad60 <memcmp>
    2f16:	cmp	r0, #0
    2f18:	bne.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      uint32_t numberPartitions = getLe32(gptph->numberPartitions);
      if (part > numberPartitions)  return INVALID_VOL;
    2f1a:	ldr	r3, [r4, #80]	; 0x50
    2f1c:	cmp	r9, r3
    2f1e:	bhi.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>

      // We will overload the mbr part to give clue where GPT data is stored for this volume
      uint32_t mbrLBA = 2 + (part >> 2);
    2f20:	mov.w	r1, r9, asr #2
      uint8_t mbrPart = part & 0x3;
    2f24:	and.w	r9, r9, #3
      if (!gptph || (memcmp(gptph->signature, F("EFI PART"), 8) != 0))  return INVALID_VOL;
      uint32_t numberPartitions = getLe32(gptph->numberPartitions);
      if (part > numberPartitions)  return INVALID_VOL;

      // We will overload the mbr part to give clue where GPT data is stored for this volume
      uint32_t mbrLBA = 2 + (part >> 2);
    2f28:	adds	r1, #2
      uint8_t mbrPart = part & 0x3;
      if (pmbrLBA) *pmbrLBA = mbrLBA;
    2f2a:	cbz	r7, 2f2e <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x6e>
    2f2c:	str	r1, [r7, #0]
      if (pmbrPart) *pmbrPart =mbrPart;
    2f2e:	cmp.w	r8, #0
    2f32:	beq.n	2f38 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x78>
    2f34:	strb.w	r9, [r8]
      if (!blockDev->readSector(mbrLBA, secBuf)) return INVALID_VOL; 
    2f38:	ldr	r3, [r5, #0]
    2f3a:	mov	r2, r4
    2f3c:	mov	r0, r5
    2f3e:	ldr	r3, [r3, #12]
    2f40:	blx	r3
    2f42:	cmp	r0, #0
    2f44:	beq.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      GPTPartitionEntrySector_t *gptes = reinterpret_cast<GPTPartitionEntrySector_t*>(secBuf);
      GPTPartitionEntryItem_t *gptei = &gptes->items[mbrPart];

      // Mow extract the data...
      firstLBA = getLe64(gptei->firstLBA);
    2f46:	mov.w	r0, r9, lsl #7
    2f4a:	add.w	r3, r0, #32
    2f4e:	ldr	r2, [r4, r3]
      sectorCount = 1 + getLe64(gptei->lastLBA) - getLe64(gptei->firstLBA);
    2f50:	add.w	r3, r0, #40	; 0x28
    2f54:	ldr	r3, [r4, r3]
    2f56:	adds	r3, #1
    2f58:	subs	r3, r3, r2
      if ((firstLBA == 0) && (sectorCount == 1)) return INVALID_VOL;
    2f5a:	cbnz	r2, 2f60 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xa0>
    2f5c:	cmp	r3, #1
    2f5e:	beq.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      
      *pfirstLBA = firstLBA;
    2f60:	str.w	r2, [sl]
      if (psectorCount) *psectorCount = sectorCount;
    2f64:	cbz	r6, 2f68 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xa8>
    2f66:	str	r3, [r6, #0]

      if (memcmp((uint8_t *)gptei->partitionTypeGUID, mbdpGuid, 16) != 0) return OTHER_VOL;
    2f68:	movs	r2, #16
    2f6a:	ldr	r1, [pc, #252]	; (3068 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x1a8>)
    2f6c:	add	r0, r4
    2f6e:	bl	ad60 <memcmp>
    2f72:	cmp	r0, #0
    2f74:	ite	eq
    2f76:	moveq	r0, #3
    2f78:	movne	r0, #4
    2f7a:	b.n	305e <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    }
    // So we are now looking a MBR type setups. 
    // Extended support we need to walk through the partitions to see if there is an extended partition
    // that we need to walk into. 
    // short cut:
    if (part < 4) {
    2f7c:	cmp.w	r9, #3
    2f80:	bhi.n	2fc2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
      // try quick way through
      mp = &mbr->part[part];
      if (((mp->boot == 0) || (mp->boot == 0X80)) && (mp->type != 0) && (mp->type != 0xf)) {
    2f82:	add.w	r3, r4, r9, lsl #4
    2f86:	ldrb.w	r2, [r3, #446]	; 0x1be
    2f8a:	lsls	r2, r2, #25
    2f8c:	bne.n	2fc2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
    2f8e:	ldrb.w	r3, [r3, #450]	; 0x1c2
    2f92:	cbz	r3, 2fc2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
    2f94:	cmp	r3, #15
    2f96:	beq.n	2fc2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x102>
        *pfirstLBA = getLe32(mp->relativeSectors);
    2f98:	add.w	r3, r9, #28
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2f9c:	add.w	r4, r4, r3, lsl #4
    2fa0:	ldr.w	r3, [r4, #6]
    2fa4:	str.w	r3, [sl]
        if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
    2fa8:	cbz	r6, 2fb0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xf0>
    2faa:	ldr.w	r3, [r4, #10]
    2fae:	str	r3, [r6, #0]
        if (pmbrLBA) *pmbrLBA = 0;
    2fb0:	cbz	r7, 2fb6 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0xf6>
    2fb2:	movs	r3, #0
    2fb4:	str	r3, [r7, #0]
        if (pmbrPart) *pmbrPart = part; // zero based. 
    2fb6:	cmp.w	r8, #0
    2fba:	beq.n	2fee <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x12e>
    2fbc:	strb.w	r9, [r8]
    2fc0:	b.n	2fee <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x12e>
    2fc2:	mov	r1, r4
#include "FsGetPartitionInfo.h"
namespace FsGetPartitionInfo {
  static const uint8_t mbdpGuid[16] PROGMEM = {0xA2, 0xA0, 0xD0, 0xEB, 0xE5, 0xB9, 0x33, 0x44, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7};

  voltype_t getPartitionInfo(BlockDeviceInterface *blockDev, uint8_t part, uint8_t *secBuf,
      uint32_t *pfirstLBA, uint32_t *psectorCount, uint32_t *pmbrLBA, uint8_t *pmbrPart) {
    2fc4:	movs	r3, #0

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
      mp = &mbr->part[index_part];
      if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0 || index_part > part) return INVALID_VOL;
    2fc6:	ldrb.w	r0, [r1, #446]	; 0x1be
    2fca:	uxtb	r2, r3
    2fcc:	lsls	r0, r0, #25
    2fce:	bne.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    2fd0:	ldrb.w	r0, [r1, #450]	; 0x1c2
    2fd4:	cmp	r0, #0
    2fd6:	beq.w	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    2fda:	cmp	r9, r2
    2fdc:	bcc.w	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      if (mp->type == 0xf) break;
    2fe0:	cmp	r0, #15
    2fe2:	beq.n	2ff2 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x132>
    2fe4:	adds	r3, #1
    2fe6:	adds	r1, #16
      }
    }  

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
    2fe8:	cmp	r3, #4
    2fea:	bne.n	2fc6 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x106>
    2fec:	b.n	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      if (((mp->boot == 0) || (mp->boot == 0X80)) && (mp->type != 0) && (mp->type != 0xf)) {
        *pfirstLBA = getLe32(mp->relativeSectors);
        if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
        if (pmbrLBA) *pmbrLBA = 0;
        if (pmbrPart) *pmbrPart = part; // zero based. 
        return MBR_VOL;
    2fee:	movs	r0, #1
    2ff0:	b.n	305e <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19e>
    }  

    // So must be extended or invalid.
    uint8_t index_part;
    for (index_part = 0; index_part < 4; index_part++) {
      mp = &mbr->part[index_part];
    2ff2:	add.w	r3, r4, r3, lsl #4
    2ff6:	adds	r2, #1
    2ff8:	ldr.w	r9, [r3, #454]	; 0x1c6
    2ffc:	uxtb.w	fp, r2
    if (index_part == 4) return INVALID_VOL; // no extended partition found. 

    // Our partition if it exists is in extended partition. 
    uint32_t next_mbr = getLe32(mp->relativeSectors);
    for(;;) {
      if (!blockDev->readSector(next_mbr, secBuf)) return INVALID_VOL;
    3000:	ldr	r3, [r5, #0]
    3002:	mov	r2, r4
    3004:	mov	r1, r9
    3006:	mov	r0, r5
    3008:	ldr	r3, [r3, #12]
    300a:	blx	r3
    300c:	cmp	r0, #0
    300e:	beq.w	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
      mbr = reinterpret_cast<MbrSector_t*>(secBuf);

      if (index_part == part) break; // should be at that entry
    3012:	ldr	r3, [sp, #4]
    3014:	cmp	r3, fp
    3016:	beq.n	3038 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x178>
      // else we need to see if it points to others...
      mp = &mbr->part[1];
      uint32_t  relSec = getLe32(mp->relativeSectors);
      //Serial.printf("    Check for next: type: %u start:%u\n ", mp->type, volumeStartSector);
      if ((mp->type == 5) && relSec) {
    3018:	ldrb.w	r2, [r4, #466]	; 0x1d2
    301c:	ldr.w	r3, [r4, #470]	; 0x1d6
    3020:	cmp	r2, #5
    3022:	bne.w	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
    3026:	add.w	r2, fp, #1
    302a:	uxtb.w	fp, r2
    302e:	cmp	r3, #0
    3030:	beq.w	2ed4 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x14>
        next_mbr = next_mbr + relSec;
    3034:	add	r9, r3

    if (index_part == 4) return INVALID_VOL; // no extended partition found. 

    // Our partition if it exists is in extended partition. 
    uint32_t next_mbr = getLe32(mp->relativeSectors);
    for(;;) {
    3036:	b.n	3000 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x140>
      } else return INVALID_VOL;
    }
   
    // If we are here than we should hopefully be at start of segment...
    mp = &mbr->part[0];
    *pfirstLBA = getLe32(mp->relativeSectors) + next_mbr;
    3038:	ldr.w	r3, [r4, #454]	; 0x1c6
    303c:	add	r3, r9
    303e:	str.w	r3, [sl]
    if (psectorCount) *psectorCount = getLe32(mp->totalSectors);
    3042:	cbz	r6, 304a <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x18a>
    3044:	ldr.w	r3, [r4, #458]	; 0x1ca
    3048:	str	r3, [r6, #0]
    if (pmbrLBA) *pmbrLBA = next_mbr;
    304a:	cbz	r7, 3050 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x190>
    304c:	str.w	r9, [r7]
    if (pmbrPart) *pmbrPart = 0; // zero based. 
    3050:	cmp.w	r8, #0
    3054:	beq.n	305c <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)+0x19c>
    3056:	movs	r3, #0
    3058:	strb.w	r3, [r8]
    return EXT_VOL;
    305c:	movs	r0, #2
  }
    305e:	add	sp, #12
    3060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3064:	.word	0x200011bd
    3068:	.word	0x60001cb8

0000306c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    306c:	cmp.w	r1, #256	; 0x100
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    3070:	push	{r4, r5, lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3072:	bhi.n	3082 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x16>
  if (capacityMB <= 16) {
    3074:	cmp	r1, #16
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3076:	mov.w	r4, #32
  if (capacityMB <= 16) {
    307a:	bls.n	30a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x3a>
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    307c:	cmp	r1, #32
    307e:	bls.n	30aa <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x3e>
    3080:	b.n	3084 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x18>
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3082:	movs	r4, #63	; 0x3f
  if (capacityMB <= 16) {
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    numberOfHeads = 4;
  } else if (capacityMB <= 128) {
    3084:	cmp	r1, #128	; 0x80
    3086:	bls.n	30ae <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x42>
    numberOfHeads = 8;
  } else if (capacityMB <= 504) {
    3088:	cmp.w	r1, #504	; 0x1f8
    308c:	bls.n	30b2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x46>
    numberOfHeads = 16;
  } else if (capacityMB <= 1008) {
    308e:	cmp.w	r1, #1008	; 0x3f0
    3092:	bls.n	30b6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
    numberOfHeads = 32;
  } else if (capacityMB <= 2016) {
    3094:	cmp.w	r1, #2016	; 0x7e0
    3098:	bls.n	30ba <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>
    numberOfHeads = 64;
  } else if (capacityMB <= 4032) {
    309a:	cmp.w	r1, #4032	; 0xfc0
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
    309e:	ite	ls
    30a0:	movls	r3, #128	; 0x80
    30a2:	movhi	r3, #255	; 0xff
    30a4:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
  if (capacityMB <= 16) {
    numberOfHeads = 2;
    30a6:	movs	r3, #2
    30a8:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 32) {
    numberOfHeads = 4;
    30aa:	movs	r3, #4
    30ac:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 128) {
    numberOfHeads = 8;
    30ae:	movs	r3, #8
    30b0:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 504) {
    numberOfHeads = 16;
    30b2:	movs	r3, #16
    30b4:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 1008) {
    numberOfHeads = 32;
    30b6:	movs	r3, #32
    30b8:	b.n	30bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x50>
  } else if (capacityMB <= 2016) {
    numberOfHeads = 64;
    30ba:	movs	r3, #64	; 0x40
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    30bc:	smulbb	r3, r3, r4
    30c0:	udiv	r5, r2, r3
  if (c <= 1023) {
    30c4:	cmp.w	r5, #1024	; 0x400
    30c8:	bcs.n	30e2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x76>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30ca:	mls	r3, r3, r5, r2
    s = (lba % sectorsPerTrack) + 1;
    30ce:	udiv	r1, r2, r4
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30d2:	udiv	r3, r3, r4
    s = (lba % sectorsPerTrack) + 1;
    30d6:	mls	r2, r4, r1, r2
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30da:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    30dc:	adds	r2, #1
    30de:	uxtb	r2, r2
    30e0:	b.n	30ea <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x7e>
  } else {
    c = 1023;
    h = 254;
    s = 63;
    30e2:	movs	r2, #63	; 0x3f
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    s = (lba % sectorsPerTrack) + 1;
  } else {
    c = 1023;
    h = 254;
    30e4:	movs	r3, #254	; 0xfe
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    s = (lba % sectorsPerTrack) + 1;
  } else {
    c = 1023;
    30e6:	movw	r5, #1023	; 0x3ff
    h = 254;
    s = 63;
  }
  chs[0] = h;
    30ea:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    30ec:	lsrs	r3, r5, #2
  chs[2] = c;
    30ee:	strb	r5, [r0, #2]
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    30f0:	bic.w	r3, r3, #63	; 0x3f
    30f4:	orrs	r2, r3
    30f6:	strb	r2, [r0, #1]
  chs[2] = c;
    30f8:	pop	{r4, r5, pc}

000030fa <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    30fa:	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    30fc:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    30fe:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    3100:	lsls	r2, r3, #31
    3102:	bpl.n	3140 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    3104:	ldr	r0, [r0, #4]
    3106:	add.w	r6, r4, #16
    310a:	ldr	r1, [r4, #12]
    310c:	ldr	r3, [r0, #0]
    310e:	mov	r2, r6
    3110:	ldr	r3, [r3, #32]
    3112:	blx	r3
    3114:	mov	r5, r0
    3116:	cbnz	r0, 311c <FsCache::sync()+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    3118:	movs	r5, #0
    311a:	b.n	3142 <FsCache::sync()+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    311c:	ldrb	r3, [r4, #0]
    311e:	lsls	r3, r3, #30
    3120:	bmi.n	312c <FsCache::sync()+0x32>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3122:	ldrb	r3, [r4, #0]
    3124:	bic.w	r3, r3, #1
    3128:	strb	r3, [r4, #0]
    312a:	b.n	3142 <FsCache::sync()+0x48>
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    312c:	adds	r0, r4, #4
    312e:	mov	r2, r6
    3130:	ldmia	r0, {r0, r1, r7}
    3132:	ldr	r3, [r0, #0]
    3134:	add	r1, r7
    3136:	ldr	r3, [r3, #32]
    3138:	blx	r3
    313a:	cmp	r0, #0
    313c:	bne.n	3122 <FsCache::sync()+0x28>
    313e:	b.n	3118 <FsCache::sync()+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
    3140:	movs	r5, #1

 fail:
  return false;
}
    3142:	mov	r0, r5
    3144:	pop	{r3, r4, r5, r6, r7, pc}

00003146 <FsCache::get(unsigned long, unsigned char)>:
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    3146:	ldr	r3, [r0, #4]
 */
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3148:	push	{r4, r5, r6, lr}
    314a:	mov	r4, r0
    314c:	mov	r6, r1
    314e:	mov	r5, r2
  if (!m_blockDev) {
    3150:	cbnz	r3, 3156 <FsCache::get(unsigned long, unsigned char)+0x10>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    3152:	movs	r0, #0
    3154:	pop	{r4, r5, r6, pc}
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3156:	ldr	r3, [r0, #12]
    3158:	cmp	r3, r1
    315a:	beq.n	3184 <FsCache::get(unsigned long, unsigned char)+0x3e>
    if (!sync()) {
    315c:	bl	30fa <FsCache::sync()>
    3160:	cmp	r0, #0
    3162:	beq.n	3152 <FsCache::get(unsigned long, unsigned char)+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3164:	lsls	r3, r5, #29
    3166:	bpl.n	3170 <FsCache::get(unsigned long, unsigned char)+0x2a>
      if (!m_blockDev->readSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    3168:	movs	r3, #0
    m_sector = sector;
    316a:	str	r6, [r4, #12]
      if (!m_blockDev->readSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    316c:	strb	r3, [r4, #0]
    316e:	b.n	3184 <FsCache::get(unsigned long, unsigned char)+0x3e>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    3170:	ldr	r0, [r4, #4]
    3172:	add.w	r2, r4, #16
    3176:	mov	r1, r6
    3178:	ldr	r3, [r0, #0]
    317a:	ldr	r3, [r3, #12]
    317c:	blx	r3
    317e:	cmp	r0, #0
    3180:	bne.n	3168 <FsCache::get(unsigned long, unsigned char)+0x22>
    3182:	b.n	3152 <FsCache::get(unsigned long, unsigned char)+0xc>
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3184:	ldrb	r3, [r4, #0]
    3186:	and.w	r5, r5, #3
    318a:	mov	r0, r4
    318c:	orrs	r5, r3
    318e:	strb.w	r5, [r0], #16
  return m_buffer;

 fail:
  return nullptr;
}
    3192:	pop	{r4, r5, r6, pc}

00003194 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    3194:	cmp	r0, #126	; 0x7e
    }
  }
  return left;
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
    3196:	push	{r4, r5, lr}
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    3198:	bhi.n	31a8 <toUpcase(unsigned short)+0x14>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    319a:	sub.w	r3, r0, #97	; 0x61
    319e:	cmp	r3, #25
    31a0:	ite	hi
    31a2:	movhi	r3, #0
    31a4:	movls	r3, #32
    31a6:	b.n	31ea <toUpcase(unsigned short)+0x56>
    31a8:	movs	r4, #53	; 0x35
    31aa:	movs	r3, #0
    31ac:	ldr	r5, [pc, #128]	; (3230 <toUpcase(unsigned short)+0x9c>)
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    31ae:	subs	r2, r4, r3
    31b0:	ldr	r1, [pc, #124]	; (3230 <toUpcase(unsigned short)+0x9c>)
    31b2:	cmp	r2, #1
    31b4:	bls.n	31c8 <toUpcase(unsigned short)+0x34>
    mid = left + (right - left)/2;
    31b6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    31ba:	ldrh.w	r1, [r5, r2, lsl #2]
    31be:	cmp	r1, r0
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    31c0:	ite	hi
    31c2:	movhi	r4, r2
    31c4:	movls	r3, r2
    31c6:	b.n	31ae <toUpcase(unsigned short)+0x1a>
  // Optimize for simple ASCII.
  if (chr < 127) {
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    31c8:	uxth	r2, r3
    31ca:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    31ce:	cmp	r0, r3
    31d0:	bcc.n	31fe <toUpcase(unsigned short)+0x6a>
    31d2:	add.w	r2, r1, r2, lsl #2
    31d6:	subs	r3, r0, r3
    31d8:	ldrb	r1, [r2, #3]
    31da:	cmp	r3, r1
    31dc:	bge.n	31fe <toUpcase(unsigned short)+0x6a>
    int8_t off = readTable8(mapTable[i].off);
    31de:	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    31e2:	cmp	r2, #1
    31e4:	bne.n	31ee <toUpcase(unsigned short)+0x5a>
      return chr - ((chr - first) & 1);
    31e6:	and.w	r3, r3, #1
    31ea:	subs	r0, r0, r3
    31ec:	b.n	31fa <toUpcase(unsigned short)+0x66>
    }
    return chr + (off ? off : -0x1C60);
    31ee:	cbz	r2, 31f4 <toUpcase(unsigned short)+0x60>
    31f0:	uxth	r2, r2
    31f2:	b.n	31f8 <toUpcase(unsigned short)+0x64>
    31f4:	movw	r2, #58272	; 0xe3a0
    31f8:	add	r0, r2
    31fa:	uxth	r0, r0
    31fc:	pop	{r4, r5, pc}
    31fe:	movs	r4, #75	; 0x4b
    3200:	movs	r3, #0
    3202:	ldr	r5, [pc, #48]	; (3234 <toUpcase(unsigned short)+0xa0>)
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    3204:	subs	r2, r4, r3
    3206:	ldr	r1, [pc, #44]	; (3234 <toUpcase(unsigned short)+0xa0>)
    3208:	cmp	r2, #1
    320a:	bls.n	321e <toUpcase(unsigned short)+0x8a>
    mid = left + (right - left)/2;
    320c:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    3210:	ldrh.w	r1, [r5, r2, lsl #2]
    3214:	cmp	r1, r0
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    3216:	ite	hi
    3218:	movhi	r4, r2
    321a:	movls	r3, r2
    321c:	b.n	3204 <toUpcase(unsigned short)+0x70>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    321e:	uxth	r3, r3
    3220:	ldrh.w	r2, [r1, r3, lsl #2]
    3224:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    3226:	itt	eq
    3228:	addeq.w	r3, r1, r3, lsl #2
    322c:	ldrheq	r0, [r3, #2]
  }
  return chr;
}
    322e:	pop	{r4, r5, pc}
    3230:	.word	0x20000d64
    3234:	.word	0x20000c38

00003238 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    3238:	push	{r0, r1, r4, lr}
    323a:	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    323c:	ldrh	r0, [r0, #12]
    323e:	cbz	r0, 3246 <FsName::get16()+0xe>
    rtn = ls;
    ls = 0;
    3240:	movs	r3, #0
    3242:	strh	r3, [r4, #12]
    3244:	b.n	327c <FsName::get16()+0x44>
  } else if (next >= end) {
    3246:	ldr	r3, [r4, #4]
    3248:	ldr	r1, [r4, #8]
    324a:	cmp	r3, r1
    324c:	bcs.n	327c <FsName::get16()+0x44>
    rtn = 0;
  } else {
    uint32_t cp;
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    324e:	add	r2, sp, #4
    3250:	mov	r0, r3
    3252:	bl	2e3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    3256:	cbz	r0, 3278 <FsName::get16()+0x40>
      goto fail;
    }
    next = ptr;
    3258:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    325a:	ldr	r0, [sp, #4]
    325c:	cmp.w	r0, #65536	; 0x10000
      rtn = cp;
    } else {
      ls = FsUtf::lowSurrogate(cp);
    3260:	itttt	cs
    3262:	ubfxcs	r3, r0, #0, #10
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    3266:	lsrcs	r0, r0, #10
    3268:	subcs.w	r3, r3, #9216	; 0x2400
    326c:	subcs.w	r0, r0, #10304	; 0x2840
    3270:	it	cs
    3272:	strhcs	r3, [r4, #12]
    3274:	uxth	r0, r0
    3276:	b.n	327c <FsName::get16()+0x44>
    }
  }
  return rtn;

 fail:
  return 0XFFFF;
    3278:	movw	r0, #65535	; 0xffff
}
    327c:	add	sp, #8
    327e:	pop	{r4, pc}

00003280 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3280:	ldr	r3, [r0, #8]
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    3282:	mov	r1, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3284:	ubfx	r3, r3, #0, #9
  if (!index) {
    3288:	cbz	r3, 32a4 <ExFatFormatter::syncUpcase()+0x24>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    328a:	movs	r0, #0
    328c:	ldr	r2, [r1, #16]
    328e:	strb	r0, [r2, r3]
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  if (!index) {
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    3290:	adds	r3, #1
    3292:	cmp.w	r3, #512	; 0x200
    3296:	bne.n	328c <ExFatFormatter::syncUpcase()+0xc>
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3298:	ldr	r0, [r1, #12]
    329a:	ldr	r2, [r1, #16]
    329c:	ldr	r3, [r0, #0]
    329e:	ldr	r1, [r1, #0]
    32a0:	ldr	r3, [r3, #32]
    32a2:	bx	r3
}
    32a4:	movs	r0, #1
    32a6:	bx	lr

000032a8 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    32a8:	ldr	r2, [r0, #8]
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    32aa:	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    32ac:	ldr	r0, [r0, #16]
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    32ae:	ubfx	r2, r2, #0, #9
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    32b2:	push	{r4}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    32b4:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    32b6:	ldr	r0, [r3, #4]
    32b8:	add.w	r1, r1, r0, ror #1
    32bc:	str	r1, [r3, #4]
  m_upcaseSize++;
    32be:	ldr	r1, [r3, #8]
    32c0:	adds	r1, #1
    32c2:	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    32c4:	movw	r1, #511	; 0x1ff
    32c8:	cmp	r2, r1
    32ca:	bne.n	32e2 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x3a>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    32cc:	ldr	r0, [r3, #12]
    32ce:	ldr	r1, [r3, #0]
    32d0:	ldr	r2, [r0, #0]
    32d2:	ldr	r4, [r2, #32]
    32d4:	adds	r2, r1, #1
    32d6:	str	r2, [r3, #0]
    32d8:	ldr	r2, [r3, #16]
    32da:	mov	r3, r4
  }
  return true;
}
    32dc:	ldr.w	r4, [sp], #4
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    32e0:	bx	r3
  }
  return true;
}
    32e2:	movs	r0, #1
    32e4:	ldr.w	r4, [sp], #4
    32e8:	bx	lr

000032ea <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    32ea:	push	{r3, r4, r5, lr}
    32ec:	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    32ee:	uxtb	r1, r1
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    32f0:	mov	r5, r0
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    32f2:	bl	32a8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    32f6:	cbz	r0, 3304 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x1a>
    32f8:	lsrs	r1, r4, #8
    32fa:	mov	r0, r5
}
    32fc:	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3300:	b.w	32a8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
}
    3304:	pop	{r3, r4, r5, pc}

00003306 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    3306:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    3308:	movs	r4, #0
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    330a:	mov	r7, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    330c:	str	r4, [r0, #8]
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    330e:	stmia.w	r0, {r1, r4}

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    3312:	uxth	r0, r4
    3314:	bl	3194 <toUpcase(unsigned short)>
    if (uc != ch) {
    3318:	cmp	r0, r4
  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    331a:	mov	r6, r0
    if (uc != ch) {
    331c:	beq.n	3334 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
      if (!writeUpcaseUnicode(uc)) {
    331e:	mov	r1, r0
    3320:	mov	r0, r7
    3322:	bl	32ea <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3326:	cbz	r0, 3392 <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    3328:	adds	r5, r4, #1

  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    332a:	cmp.w	r5, #65536	; 0x10000
    332e:	bcs.n	3348 <ExFatFormatter::writeUpcase(unsigned long)+0x42>
    3330:	mov	r4, r5
    3332:	b.n	3312 <ExFatFormatter::writeUpcase(unsigned long)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    3334:	adds	r5, r4, #1
    3336:	cmp.w	r5, #65536	; 0x10000
    333a:	bcs.n	3352 <ExFatFormatter::writeUpcase(unsigned long)+0x4c>
    333c:	uxth	r0, r5
    333e:	bl	3194 <toUpcase(unsigned short)>
    3342:	cmp	r5, r0
    3344:	bne.n	3352 <ExFatFormatter::writeUpcase(unsigned long)+0x4c>
    3346:	b.n	338e <ExFatFormatter::writeUpcase(unsigned long)+0x88>
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    3348:	mov	r0, r7
  }
  return true;

 fail:
  return false;
}
    334a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    334e:	b.w	3280 <ExFatFormatter::syncUpcase()>
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
    3352:	subs	r4, r5, r4
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3354:	cmp.w	r4, #512	; 0x200
    3358:	bcc.n	3374 <ExFatFormatter::writeUpcase(unsigned long)+0x6e>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    335a:	movw	r1, #65535	; 0xffff
    335e:	mov	r0, r7
    3360:	bl	32ea <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3364:	cbz	r0, 3392 <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
    3366:	uxth	r1, r4
    3368:	mov	r0, r7
    336a:	bl	32ea <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    336e:	cmp	r0, #0
    3370:	bne.n	332a <ExFatFormatter::writeUpcase(unsigned long)+0x24>
    3372:	b.n	3392 <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3374:	mov	r4, r6
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    3376:	cmp	r5, r4
    3378:	bhi.n	337e <ExFatFormatter::writeUpcase(unsigned long)+0x78>
    337a:	mov	r5, r4
    337c:	b.n	332a <ExFatFormatter::writeUpcase(unsigned long)+0x24>
          if (!writeUpcaseUnicode(ch++)) {
    337e:	uxth	r1, r4
    3380:	mov	r0, r7
    3382:	bl	32ea <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3386:	adds	r4, #1
    3388:	cmp	r0, #0
    338a:	bne.n	3376 <ExFatFormatter::writeUpcase(unsigned long)+0x70>
    338c:	b.n	3392 <ExFatFormatter::writeUpcase(unsigned long)+0x8c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    338e:	adds	r5, #1
    3390:	b.n	3336 <ExFatFormatter::writeUpcase(unsigned long)+0x30>
  }
  return true;

 fail:
  return false;
}
    3392:	movs	r0, #0
    3394:	pop	{r3, r4, r5, r6, r7, pc}
	...

00003398 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3398:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    339c:	mov	r7, r3
  uint32_t volumeLength;
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
    339e:	mov	r3, r0
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    33a0:	sub	sp, #28
    33a2:	mov	r5, r1
  uint32_t volumeLength;
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
    33a4:	str	r1, [r3, #12]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    33a6:	mov	r4, r2
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
    33a8:	str	r2, [r3, #16]
  sectorCount = dev->sectorCount();
    33aa:	ldr	r3, [r1, #0]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    33ac:	str	r0, [sp, #4]
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    33ae:	mov	r0, r1
    33b0:	ldr	r3, [r3, #24]
    33b2:	blx	r3
  // Min size is 512 MB
  if (sectorCount < 0X100000) {
    33b4:	cmp.w	r0, #1048576	; 0x100000
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    33b8:	mov	r9, r0
  // Min size is 512 MB
  if (sectorCount < 0X100000) {
    33ba:	bcs.n	33cc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x34>
    writeMsg(pr, "Device is too small\r\n");
    33bc:	cmp	r7, #0
    33be:	beq.w	35e8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x250>
    33c2:	ldr	r1, [pc, #584]	; (360c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x274>)
    33c4:	mov	r0, r7
    33c6:	bl	3e4 <Print::write(char const*)>
    33ca:	b.n	35e0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x248>
    33cc:	movs	r6, #0
    33ce:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    33d0:	adds	r6, #1
    33d2:	lsls	r3, r3, #1
    33d4:	uxtb	r6, r6
    33d6:	cmp	r6, #32
    33d8:	beq.n	33e6 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    33da:	cmp	r9, r3
    33dc:	bhi.n	33d0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x38>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    33de:	cmp	r6, #28
    33e0:	bhi.n	33e6 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    33e2:	movs	r3, #8
    33e4:	b.n	33ee <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x56>
    33e6:	sub.w	r8, r6, #11
    33ea:	ubfx	r3, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    33ee:	cmp	r6, #26
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    33f0:	str	r3, [sp, #8]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    33f2:	ldr	r2, [sp, #8]

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    33f4:	mov.w	r1, #0
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    33f8:	itte	hi
    33fa:	addhi	r6, #1
    33fc:	movhi	r3, #1
    33fe:	movls.w	r3, #8192	; 0x2000
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3402:	mov	r0, r4
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    3404:	it	hi
    3406:	asrhi	r6, r6, #1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    3408:	mov.w	fp, #1
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
    340c:	mov.w	r8, #0
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    3410:	it	hi
    3412:	lslhi	r3, r6
    3414:	str	r3, [sp, #0]
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
    3416:	ldr	r3, [sp, #0]
    3418:	lsls	r6, r3, #1
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    341a:	lsls	r3, r3, #2
    341c:	rsb	sl, r3, r9
    3420:	str	r3, [sp, #16]
    3422:	ldr	r3, [sp, #8]
    3424:	lsr.w	r3, sl, r3
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3428:	lsl.w	sl, r3, r2

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    342c:	mov.w	r2, #512	; 0x200
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    3430:	str	r3, [sp, #12]
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3432:	bl	8760 <memset>
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    3436:	movs	r3, #7
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    3438:	strb.w	fp, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    343c:	strb.w	fp, [r4, #448]	; 0x1c0
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3440:	add	sl, r6
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    3442:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    3446:	movs	r3, #254	; 0xfe
  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
    3448:	strb.w	r8, [r4, #449]	; 0x1c1
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    344c:	mov	r2, r4
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
    344e:	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    3452:	movs	r3, #255	; 0xff
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3454:	str.w	r6, [r4, #454]	; 0x1c6
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    3458:	mov	r1, r8
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
    345a:	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    345e:	mov	r0, r5
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
    3460:	strb.w	r3, [r4, #453]	; 0x1c5
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3464:	movw	r3, #43605	; 0xaa55
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3468:	str.w	sl, [r4, #458]	; 0x1ca
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    346c:	strh.w	r3, [r4, #510]	; 0x1fe
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    3470:	ldr	r3, [r5, #0]
    3472:	ldr	r3, [r3, #32]
    3474:	blx	r3
    3476:	cmp	r0, #0
    3478:	beq.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    347c:	mov.w	r2, #512	; 0x200
    3480:	mov	r1, r8
    3482:	mov	r0, r4
    3484:	bl	8760 <memset>
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    3488:	movs	r3, #235	; 0xeb
    348a:	addw	r2, r4, #509	; 0x1fd
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    348e:	movs	r1, #244	; 0xf4
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    3490:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    3492:	movs	r3, #118	; 0x76

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3494:	str	r6, [r4, #64]	; 0x40
    3496:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3498:	movs	r3, #144	; 0x90
    349a:	str.w	r8, [r4, #68]	; 0x44
    349e:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    34a0:	movs	r3, #69	; 0x45
    34a2:	str.w	sl, [r4, #72]	; 0x48
    34a6:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    34a8:	movs	r3, #88	; 0x58
    34aa:	str.w	r8, [r4, #76]	; 0x4c
    34ae:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    34b0:	movs	r3, #70	; 0x46
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    34b2:	str	r6, [r4, #88]	; 0x58
    34b4:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    34b6:	movs	r3, #65	; 0x41
    34b8:	str.w	r9, [r4, #100]	; 0x64
    34bc:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    34be:	movs	r3, #84	; 0x54
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    34c0:	strh.w	r8, [r4, #106]	; 0x6a
    34c4:	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    34c6:	movs	r3, #32
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
    34c8:	strb.w	fp, [r4, #110]	; 0x6e
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
  pbs->oemName[3] = 'A';
  pbs->oemName[4] = 'T';
  pbs->oemName[5] = ' ';
    34cc:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    34ce:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    34d0:	strb	r3, [r4, #10]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    34d2:	ldr	r3, [sp, #0]
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;
    34d4:	strb.w	r8, [r4, #112]	; 0x70
    34d8:	str	r3, [r4, #80]	; 0x50
    34da:	str	r3, [r4, #84]	; 0x54
    34dc:	ldr	r3, [sp, #12]
    34de:	str	r3, [r4, #92]	; 0x5c
    34e0:	movs	r3, #4
    34e2:	str	r3, [r4, #96]	; 0x60
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    34e4:	mov.w	r3, #256	; 0x100
    34e8:	strh.w	r3, [r4, #104]	; 0x68
  setLe32(pbs->bpb.clusterCount, clusterCount);
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    34ec:	movs	r3, #9
    34ee:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    34f2:	ldrb.w	r3, [sp, #8]
    34f6:	strb.w	r3, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
    34fa:	movs	r3, #128	; 0x80
    34fc:	strb.w	r3, [r4, #111]	; 0x6f
    3500:	add.w	r3, r4, #119	; 0x77
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    3504:	strb.w	r1, [r3, #1]!
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    3508:	cmp	r3, r2
    350a:	bne.n	3504 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x16c>
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    350c:	mov.w	r9, #0
    3510:	movw	r3, #43605	; 0xaa55
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    3514:	mov	r8, r9
    3516:	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    351a:	sub.w	r3, r9, #106	; 0x6a
    351e:	cmp	r3, #1
    3520:	bls.n	3530 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x198>
        i == offsetof(ExFatPbs_t, bpb.volumeFlags[1]) ||
    3522:	cmp.w	r9, #112	; 0x70
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3526:	itt	ne
    3528:	ldrbne.w	r3, [r4, r9]
    352c:	addne.w	r8, r3, r8, ror #1
  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3530:	add.w	r9, r9, #1
    3534:	cmp.w	r9, #512	; 0x200
    3538:	bne.n	351a <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x182>
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    353a:	ldr	r3, [r5, #0]
    353c:	mov	r2, r4
    353e:	mov	r1, r6
    3540:	mov	r0, r5
    3542:	ldr	r3, [r3, #32]
    3544:	blx	r3
    3546:	cmp	r0, #0
    3548:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    354a:	ldr	r3, [r5, #0]
    354c:	mov	r2, r4
    354e:	add.w	r1, r6, #12
    3552:	mov	r0, r5
    3554:	ldr	r3, [r3, #32]
    3556:	blx	r3
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    3558:	cmp	r0, #0
    355a:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    355c:	mov	r2, r9
    355e:	movs	r1, #0
    3560:	mov	r0, r4
  if (!dev->writeSector(sector, secBuf)  ||
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
    3562:	add.w	sl, r6, #1
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3566:	bl	8760 <memset>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    356a:	movw	r3, #43605	; 0xaa55
    356e:	add.w	r9, r6, #9
    3572:	addw	fp, r4, #511	; 0x1ff
    3576:	strh.w	r3, [r4, #510]	; 0x1fe
    357a:	subs	r3, r4, #1
    357c:	str	r3, [sp, #20]
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    357e:	ldr	r3, [sp, #20]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3580:	ldrb.w	r2, [r3, #1]!
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3584:	cmp	fp, r3
    3586:	add.w	r8, r2, r8, ror #1
    358a:	bne.n	3580 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x1e8>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    358c:	ldr	r3, [r5, #0]
    358e:	mov	r2, r4
    3590:	mov	r1, sl
    3592:	mov	r0, r5
    3594:	ldr	r3, [r3, #32]
    3596:	blx	r3
    3598:	cbz	r0, 35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    359a:	ldr	r3, [r5, #0]
    359c:	mov	r2, r4
    359e:	add.w	r1, sl, #12
    35a2:	mov	r0, r5
    35a4:	ldr	r3, [r3, #32]
    35a6:	blx	r3
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    35a8:	cbz	r0, 35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    35aa:	add.w	sl, sl, #1
  }
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    35ae:	cmp	sl, r9
    35b0:	bne.n	357e <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
    35b2:	add.w	sl, r6, #11
      goto fail;
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    35b6:	mov.w	r2, #512	; 0x200
    35ba:	movs	r1, #0
    35bc:	mov	r0, r4
    35be:	bl	8760 <memset>
    35c2:	ldr	r3, [sp, #20]
    35c4:	ldrb.w	r2, [r3, #1]!
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    35c8:	cmp	fp, r3
    35ca:	add.w	r8, r2, r8, ror #1
    35ce:	bne.n	35c4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x22c>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    35d0:	ldr	r3, [r5, #0]
    35d2:	mov	r2, r4
    35d4:	mov	r1, r9
    35d6:	mov	r0, r5
    35d8:	ldr	r3, [r3, #32]
    35da:	blx	r3
    35dc:	cbnz	r0, 35ee <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x256>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    35de:	cbz	r7, 35e8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x250>
    35e0:	ldr	r1, [pc, #44]	; (3610 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x278>)
    35e2:	mov	r0, r7
    35e4:	bl	3e4 <Print::write(char const*)>
  return false;
    35e8:	mov.w	sl, #0
    35ec:	b.n	37d0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x438>
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    35ee:	ldr	r3, [r5, #0]
    35f0:	mov	r2, r4
    35f2:	add.w	r1, r9, #12
    35f6:	mov	r0, r5
    35f8:	ldr	r3, [r3, #32]
    35fa:	blx	r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    35fc:	cmp	r0, #0
    35fe:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    3600:	add.w	r3, r9, #1
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    3604:	cmp	r3, sl
    3606:	beq.n	3614 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    3608:	mov	r9, r3
    360a:	b.n	35c2 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x22a>
    360c:	.word	0x200011c6
    3610:	.word	0x2000121f
    3614:	subs	r3, r4, #4
    3616:	add.w	r2, r4, #508	; 0x1fc
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    361a:	str.w	r8, [r3, #4]!
      goto fail;
    }
    sector++;
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    361e:	cmp	r2, r3
    3620:	bne.n	361a <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x282>
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    3622:	ldr	r3, [r5, #0]
    3624:	mov	r2, r4
    3626:	mov	r1, sl
    3628:	mov	r0, r5
    362a:	ldr	r3, [r3, #32]
    362c:	blx	r3
    362e:	cmp	r0, #0
    3630:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    3632:	ldr	r3, [r5, #0]
    3634:	mov	r2, r4
    3636:	add.w	r1, r9, #13
    363a:	mov	r0, r5
    363c:	ldr	r3, [r3, #32]
    363e:	blx	r3
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    3640:	cmp	r0, #0
    3642:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
    3644:	cbz	r7, 364e <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2b6>
    3646:	ldr	r1, [pc, #400]	; (37d8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x440>)
    3648:	mov	r0, r7
    364a:	bl	3e4 <Print::write(char const*)>
  sector = partitionOffset + fatOffset;
    364e:	ldr	r3, [sp, #0]
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
    3650:	mov.w	r2, #512	; 0x200
    3654:	movs	r1, #0
    3656:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
    3658:	add	r6, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    365a:	ldr	r3, [sp, #12]
    365c:	mov.w	r9, r3, lsl #2

  memset(secBuf, 0, BYTES_PER_SECTOR);
    3660:	bl	8760 <memset>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    3664:	movs	r3, #248	; 0xf8
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3666:	addw	r9, r9, #519	; 0x207
    366a:	add.w	r2, r4, #19

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    366e:	strb	r3, [r4, #0]
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    3670:	movs	r1, #255	; 0xff
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3672:	mov.w	sl, r9, lsr #9
    3676:	mov	r3, r4

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    3678:	strb.w	r1, [r3, #1]!
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    367c:	cmp	r2, r3
    367e:	bne.n	3678 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2e0>
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    if (i%(ns/32) == 0) {
    3680:	mov.w	r9, r9, lsr #14
    3684:	mov.w	r8, #0
    3688:	udiv	r3, r8, r9
    368c:	mls	r3, r9, r3, r8
    3690:	cbnz	r3, 369c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x304>
      writeMsg(pr, ".");
    3692:	cbz	r7, 369c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x304>
    3694:	ldr	r1, [pc, #324]	; (37dc <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x444>)
    3696:	mov	r0, r7
    3698:	bl	3e4 <Print::write(char const*)>
    }
    if (!dev->writeSector(sector + i, secBuf)) {
    369c:	ldr	r3, [r5, #0]
    369e:	mov	r2, r4
    36a0:	add.w	r1, r6, r8
    36a4:	mov	r0, r5
    36a6:	ldr	r3, [r3, #32]
    36a8:	blx	r3
    36aa:	cmp	r0, #0
    36ac:	beq.n	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    36ae:	cmp.w	r8, #0
    36b2:	bne.n	36c0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x328>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    36b4:	mov.w	r2, #512	; 0x200
    36b8:	mov	r1, r8
    36ba:	mov	r0, r4
    36bc:	bl	8760 <memset>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    36c0:	add.w	r8, r8, #1
    36c4:	cmp	sl, r8
    36c6:	bne.n	3688 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2f0>
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    }
  }
  writeMsg(pr, "\r\n");
    36c8:	cbz	r7, 36d2 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x33a>
    36ca:	ldr	r1, [pc, #276]	; (37e0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x448>)
    36cc:	mov	r0, r7
    36ce:	bl	3e4 <Print::write(char const*)>
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    36d2:	ldr	r3, [sp, #8]
    36d4:	mov.w	r8, #1
    36d8:	lsl.w	r8, r8, r3
    }
  }
  writeMsg(pr, "\r\n");
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    36dc:	ldr	r3, [sp, #12]
    36de:	add.w	sl, r3, #7
    36e2:	mov.w	sl, sl, lsr #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    36e6:	addw	fp, sl, #511	; 0x1ff
    36ea:	mov.w	fp, fp, lsr #9
  if (ns > sectorsPerCluster) {
    36ee:	cmp	r8, fp
    36f0:	bcc.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    36f4:	mov.w	r2, #512	; 0x200
    36f8:	movs	r1, #0
    36fa:	mov	r0, r4
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
  for (uint32_t i = 0; i < ns; i++) {
    36fc:	mov.w	r9, #0
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
  if (ns > sectorsPerCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3700:	bl	8760 <memset>
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
    3704:	movs	r3, #7
    3706:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    if (!dev->writeSector(sector + i, secBuf)) {
    3708:	ldr	r3, [r5, #0]
    370a:	mov	r2, r4
    370c:	ldr	r1, [sp, #16]
    370e:	mov	r0, r5
    3710:	ldr	r3, [r3, #32]
    3712:	add	r1, r9
    3714:	blx	r3
    3716:	cmp	r0, #0
    3718:	beq.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    371c:	cmp.w	r9, #0
    3720:	bne.n	3726 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x38e>
      secBuf[0] = 0;
    3722:	strb.w	r9, [r4]
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
  for (uint32_t i = 0; i < ns; i++) {
    3726:	add.w	r9, r9, #1
    372a:	cmp	fp, r9
    372c:	bne.n	3708 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x370>
    if (i == 0) {
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
    372e:	cbz	r7, 3738 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3a0>
    3730:	ldr	r1, [pc, #176]	; (37e4 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x44c>)
    3732:	mov	r0, r7
    3734:	bl	3e4 <Print::write(char const*)>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3738:	ldr	r3, [sp, #0]
    373a:	ldr	r0, [sp, #4]
    373c:	add	r3, r6
    373e:	add.w	r9, r3, r8
    3742:	mov	r1, r9
    3744:	bl	3306 <ExFatFormatter::writeUpcase(unsigned long)>
    3748:	cmp	r0, #0
    374a:	beq.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    374e:	ldr	r3, [sp, #4]
    3750:	ldr	r3, [r3, #8]
    3752:	cmp.w	r3, r8, lsl #9
    3756:	bhi.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
    375a:	cbz	r7, 3764 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    375c:	ldr	r1, [pc, #136]	; (37e8 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x450>)
    375e:	mov	r0, r7
    3760:	bl	3e4 <Print::write(char const*)>
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3764:	mov.w	r2, #512	; 0x200
    3768:	movs	r1, #0
    376a:	mov	r0, r4
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    376c:	movs	r6, #0
    376e:	bl	8760 <memset>
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    3772:	movs	r2, #129	; 0x81
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3774:	movs	r3, #3
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    3776:	add	r9, r8
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    3778:	strb.w	r2, [r4, #32]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    377c:	movs	r2, #2
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    377e:	strb	r3, [r4, #0]
    3780:	str	r2, [r4, #52]	; 0x34
  setLe32(dbm->firstCluster, BITMAP_CLUSTER);
  setLe64(dbm->size, bitmapSize);

  // upcase directory entry.
  dup = reinterpret_cast<DirUpcase_t*>(secBuf +64);
  dup->type = EXFAT_TYPE_UPCASE;
    3782:	movs	r2, #130	; 0x82
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3784:	str.w	sl, [r4, #56]	; 0x38
    3788:	strb.w	r2, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    378c:	ldr	r2, [sp, #4]
    378e:	ldr	r2, [r2, #4]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3790:	str	r3, [r4, #84]	; 0x54
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3792:	ldr	r3, [sp, #4]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3794:	str	r2, [r4, #68]	; 0x44
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3796:	ldr	r3, [r3, #8]
    3798:	str	r6, [r4, #92]	; 0x5c
    379a:	str	r3, [r4, #88]	; 0x58
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    if (!dev->writeSector(sector + i, secBuf)) {
    379c:	ldr	r3, [r5, #0]
    379e:	mov	r2, r4
    37a0:	add.w	r1, r6, r9
    37a4:	mov	r0, r5
    37a6:	ldr	r3, [r3, #32]
    37a8:	blx	r3
    37aa:	mov	sl, r0
    37ac:	cmp	r0, #0
    37ae:	beq.w	35de <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x246>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    37b2:	cbnz	r6, 37c0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x428>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    37b4:	mov.w	r2, #512	; 0x200
    37b8:	mov	r1, r6
    37ba:	mov	r0, r4
    37bc:	bl	8760 <memset>
  setLe32(dup->checksum, m_upcaseChecksum);
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    37c0:	adds	r6, #1
    37c2:	cmp	r8, r6
    37c4:	bne.n	379c <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x404>
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    }
  }
  writeMsg(pr, "Format done\r\n");
    37c6:	cbz	r7, 37d0 <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x438>
    37c8:	ldr	r1, [pc, #32]	; (37ec <ExFatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x454>)
    37ca:	mov	r0, r7
    37cc:	bl	3e4 <Print::write(char const*)>
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
    37d0:	mov	r0, sl
    37d2:	add	sp, #28
    37d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37d8:	.word	0x200011dc
    37dc:	.word	0x200011e9
    37e0:	.word	0x2000125b
    37e4:	.word	0x200011eb
    37e8:	.word	0x20001202
    37ec:	.word	0x20001211

000037f0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    37f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37f4:	mov	r5, r2
    37f6:	mov	r6, r1
    37f8:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    37fc:	ldrh	r3, [r5, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    37fe:	ldrh.w	r4, [r6, #2]!
    3802:	cbnz	r3, 3816 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    3804:	ldr	r2, [r5, #4]
    3806:	ldr	r3, [r5, #8]
    3808:	cmp	r2, r3
    380a:	bne.n	3816 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    380c:	clz	r0, r4
    3810:	lsrs	r0, r0, #5
    3812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    3816:	mov	r0, r5
    3818:	bl	3238 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    381c:	bl	3194 <toUpcase(unsigned short)>
    3820:	mov	r7, r0
    3822:	mov	r0, r4
    3824:	bl	3194 <toUpcase(unsigned short)>
    3828:	cmp	r7, r0
    382a:	bne.n	3836 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    382c:	cmp	r6, r8
    382e:	bne.n	37fc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3830:	movs	r0, #1
    3832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    if (toUpcase(cp) != toUpcase(u)) {
       return false;
    3836:	movs	r0, #0
    3838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000383c <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    383c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    3840:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    3844:	mov	sl, r0
    3846:	mov	r9, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    3848:	cmp	r3, #0
    384a:	beq.n	38dc <ExFatFile::getName8(char*, unsigned int)+0xa0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    384c:	add.w	r8, r2, #4294967295
    3850:	mov	r5, r1
    3852:	movs	r7, #2
    3854:	movs	r4, #0
    3856:	add	r8, r1
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3858:	ldrb.w	r3, [sl, #48]	; 0x30
    385c:	cmp	r3, r7
    385e:	bcc.n	38d0 <ExFatFile::getName8(char*, unsigned int)+0x94>
    dn = reinterpret_cast<DirName_t*>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    3860:	movs	r2, #0
    3862:	mov	r1, r7
    3864:	mov	r0, sl
    3866:	bl	394e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    386a:	cbz	r0, 38dc <ExFatFile::getName8(char*, unsigned int)+0xa0>
    386c:	ldrb	r3, [r0, #0]
    386e:	cmp	r3, #193	; 0xc1
    3870:	bne.n	38dc <ExFatFile::getName8(char*, unsigned int)+0xa0>
    3872:	mov	r6, r0
    3874:	add.w	fp, r0, #30
    3878:	mov	r3, r4
    387a:	ldrh.w	r4, [r6, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (hs) {
    387e:	cbz	r3, 389e <ExFatFile::getName8(char*, unsigned int)+0x62>
        if (!FsUtf::isLowSurrogate(c)) {
    3880:	add.w	r2, r4, #9216	; 0x2400
    3884:	uxth	r2, r2
    3886:	cmp.w	r2, #1024	; 0x400
    388a:	bcs.n	38dc <ExFatFile::getName8(char*, unsigned int)+0xa0>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    388c:	lsls	r3, r3, #10
    388e:	ldr	r0, [pc, #88]	; (38e8 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    3890:	ubfx	r4, r4, #0, #10
    3894:	ands	r0, r3
    3896:	orrs	r4, r0
    3898:	add.w	r0, r4, #65536	; 0x10000
    389c:	b.n	38b8 <ExFatFile::getName8(char*, unsigned int)+0x7c>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    389e:	add.w	r3, r4, #10240	; 0x2800
    38a2:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    38a4:	cmp.w	r3, #2048	; 0x800
    38a8:	bcc.n	38b0 <ExFatFile::getName8(char*, unsigned int)+0x74>
        if (c == 0) {
    38aa:	cbz	r4, 38d0 <ExFatFile::getName8(char*, unsigned int)+0x94>
          goto done;
        }
        cp = c;
    38ac:	mov	r0, r4
    38ae:	b.n	38b8 <ExFatFile::getName8(char*, unsigned int)+0x7c>
      } else if (FsUtf::isHighSurrogate(c)) {
    38b0:	cmp.w	r3, #1024	; 0x400
    38b4:	bcc.n	38c6 <ExFatFile::getName8(char*, unsigned int)+0x8a>
    38b6:	b.n	38dc <ExFatFile::getName8(char*, unsigned int)+0xa0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    38b8:	mov	r2, r8
    38ba:	mov	r1, r5
    38bc:	bl	2da8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    38c0:	cbz	r0, 38d0 <ExFatFile::getName8(char*, unsigned int)+0x94>
    38c2:	mov	r5, r0
    38c4:	movs	r4, #0
         (dirCache(is, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    38c6:	cmp	fp, r6
    38c8:	bne.n	3878 <ExFatFile::getName8(char*, unsigned int)+0x3c>
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    38ca:	adds	r7, #1
    38cc:	uxtb	r7, r7
    38ce:	b.n	3858 <ExFatFile::getName8(char*, unsigned int)+0x1c>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    38d0:	movs	r3, #0
  return str - name;
    38d2:	rsb	r0, r9, r5
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    38d6:	strb	r3, [r5, #0]
  return str - name;
    38d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

 fail:
  *name = 0;
    38dc:	movs	r0, #0
    38de:	strb.w	r0, [r9]
  return 0;
}
    38e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38e6:	nop
    38e8:	.word	0x000ffc00

000038ec <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    38ec:	push	{r4, r5, r6, lr}
  }
  void reset() {
    next = begin;
    38ee:	ldr	r3, [r1, #0]
    ls = 0;
    38f0:	movs	r4, #0
    38f2:	mov	r5, r1
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    38f4:	movw	r6, #65535	; 0xffff
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    38f8:	str	r3, [r1, #4]
    ls = 0;
    38fa:	strh	r4, [r1, #12]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
    38fc:	str	r4, [r1, #16]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    38fe:	ldrh	r3, [r5, #12]
    3900:	cbnz	r3, 390a <ExFatFile::hashName(ExName_t*)+0x1e>
    3902:	ldr	r2, [r5, #4]
    3904:	ldr	r3, [r5, #8]
    3906:	cmp	r2, r3
    3908:	beq.n	393e <ExFatFile::hashName(ExName_t*)+0x52>
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    390a:	mov	r0, r5
    390c:	bl	3238 <FsName::get16()>
    if (u == 0XFFFF) {
    3910:	cmp	r0, r6
    3912:	beq.n	393a <ExFatFile::hashName(ExName_t*)+0x4e>
  hash = ((hash << 15) | (hash >> 1));
  return hash;
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
    3914:	bl	3194 <toUpcase(unsigned short)>
    3918:	lsls	r3, r4, #15
    391a:	orr.w	r4, r3, r4, lsr #1
    391e:	uxtab	r4, r4, r0
    3922:	ubfx	r3, r4, #1, #15
    3926:	orr.w	r3, r3, r4, lsl #15
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    392a:	asrs	r4, r0, #8
    392c:	uxtah	r4, r4, r3
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    3930:	ldr	r3, [r5, #16]
    3932:	adds	r3, #1
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    3934:	uxth	r4, r4
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    3936:	str	r3, [r5, #16]
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    3938:	b.n	38fe <ExFatFile::hashName(ExName_t*)+0x12>
    goto fail;
  }
  return true;

 fail:
  return false;
    393a:	movs	r0, #0
    393c:	pop	{r4, r5, r6, pc}
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    393e:	ldr	r0, [r5, #16]
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3940:	strh	r4, [r5, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3942:	subs	r0, #1
    3944:	cmp	r0, #254	; 0xfe
    3946:	ite	hi
    3948:	movhi	r0, #0
    394a:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    394c:	pop	{r4, r5, r6, pc}

0000394e <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    394e:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    3950:	add.w	r3, r0, #36	; 0x24
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3954:	sub	sp, #20
    3956:	mov	r5, r0
    3958:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    395a:	add	r4, sp, #4
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    395c:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    395e:	ldmia.w	r3, {r0, r1, r2}
    3962:	stmia.w	r4, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, 32*set) != 1) {
    3966:	lsls	r2, r7, #5
    3968:	mov	r1, r4
    396a:	ldr	r0, [r5, #32]
    396c:	bl	4328 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3970:	cmp	r0, #1
    3972:	bne.n	3980 <ExFatFile::dirCache(unsigned char, unsigned char)+0x32>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    3974:	mov	r2, r6
    3976:	mov	r1, r4
    3978:	ldr	r0, [r5, #32]
    397a:	bl	428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    397e:	b.n	3982 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
  DirPos_t pos = m_dirPos;
  if (m_vol->dirSeek(&pos, 32*set) != 1) {
    return nullptr;
    3980:	movs	r0, #0
  }
  return m_vol->dirCache(&pos, options);
}
    3982:	add	sp, #20
    3984:	pop	{r4, r5, r6, r7, pc}

00003986 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    3986:	push	{r4, lr}
    3988:	mov	r4, r0
  bool rtn = sync();
    398a:	bl	4844 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    398e:	movs	r3, #0
    3990:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3994:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3998:	pop	{r4, pc}

0000399a <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    399a:	push	{r3, r4, r5, lr}
    399c:	mov	r5, r1
    399e:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    39a0:	add.w	r1, r0, #36	; 0x24
    39a4:	movs	r2, #0
    39a6:	ldr	r0, [r0, #32]
    39a8:	bl	428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    39ac:	cbz	r0, 39b8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    39ae:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    39b0:	strh	r3, [r5, #0]
    39b2:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    39b4:	movs	r0, #1
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
    39b6:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    39b8:	pop	{r3, r4, r5, pc}

000039ba <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    39ba:	push	{r3, r4, r5, lr}
    39bc:	mov	r5, r1
    39be:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    39c0:	add.w	r1, r0, #36	; 0x24
    39c4:	movs	r2, #0
    39c6:	ldr	r0, [r0, #32]
    39c8:	bl	428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    39cc:	cbz	r0, 39d8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    39ce:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    39d0:	strh	r3, [r5, #0]
    39d2:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    39d4:	movs	r0, #1
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
    39d6:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    39d8:	pop	{r3, r4, r5, pc}

000039da <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    39da:	push	{r3, r4, r5, lr}
    39dc:	mov	r5, r1
  if (isOpen()) {
    39de:	ldrb.w	r1, [r0, #49]	; 0x31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    39e2:	mov	r4, r0
  if (isOpen()) {
    39e4:	cbnz	r1, 39fc <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    39e6:	movs	r2, #56	; 0x38
    39e8:	bl	8760 <memset>
  m_attributes = FILE_ATTR_ROOT;
    39ec:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    39ee:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    39f0:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    39f2:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    39f6:	strb.w	r0, [r4, #51]	; 0x33
    39fa:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    39fc:	movs	r0, #0
}
    39fe:	pop	{r3, r4, r5, pc}

00003a00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    3a00:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    3a02:	ldrb	r4, [r1, #0]
    3a04:	adds	r5, r1, #1
    3a06:	cmp	r4, #32
    3a08:	bne.n	3a0e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe>
    3a0a:	mov	r1, r5
    3a0c:	b.n	3a02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    3a0e:	ldr	r7, [pc, #104]	; (3a78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x78>)
    path++;
  }
  fname->begin = path;
    3a10:	str	r1, [r2, #0]
  fname->end = path;
    3a12:	str	r1, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3a14:	mov	r5, r1
    3a16:	mov	r6, r1
    3a18:	ldrb.w	r4, [r5], #1
    3a1c:	cbz	r4, 3a56 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    3a1e:	cmp	r4, #47	; 0x2f
    3a20:	beq.n	3a4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    3a22:	cmp	r4, #31
    3a24:	bls.n	3a70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    3a26:	sub.w	r1, r4, #34	; 0x22
    3a2a:	uxtb	r1, r1
    3a2c:	cmp	r1, #29
    3a2e:	bhi.n	3a38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x38>
    3a30:	lsr.w	r1, r7, r1
    3a34:	lsls	r1, r1, #31
    3a36:	bmi.n	3a70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    3a38:	and.w	r1, r4, #191	; 0xbf
    3a3c:	cmp	r1, #60	; 0x3c
    3a3e:	beq.n	3a70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    3a40:	cmp	r4, #92	; 0x5c
    3a42:	bne.n	3a60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    3a44:	b.n	3a70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    3a46:	cmp	r4, #47	; 0x2f
    3a48:	bne.n	3a56 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    3a4a:	mov	r6, r1
    3a4c:	ldrb.w	r4, [r1], #1
    3a50:	cmp	r4, #32
    3a52:	bne.n	3a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    3a54:	b.n	3a4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  *ptr = path;
    3a56:	str	r6, [r3, #0]
  return hashName(fname);
    3a58:	mov	r1, r2

 fail:
  return false;
}
    3a5a:	pop	{r4, r5, r6, r7}
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return hashName(fname);
    3a5c:	b.w	38ec <ExFatFile::hashName(ExName_t*)>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    3a60:	cmp	r4, #46	; 0x2e
    3a62:	bne.n	3a68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    3a64:	mov	r1, r5
    3a66:	b.n	3a14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    3a68:	cmp	r4, #32
    3a6a:	beq.n	3a64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
      // Need to trim trailing dots spaces.
      fname->end = path;
    3a6c:	str	r5, [r2, #8]
    3a6e:	b.n	3a64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    3a70:	movs	r0, #0
    3a72:	pop	{r4, r5, r6, r7}
    3a74:	bx	lr
    3a76:	nop
    3a78:	.word	0x31000101

00003a7c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3a7c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a80:	ldrb.w	r3, [r0, #51]	; 0x33
    3a84:	mov	r4, r0
    3a86:	mov	r6, r1
    3a88:	mov	r5, r2
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3a8a:	lsls	r7, r3, #31
    3a8c:	bpl.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3a8e:	lsls	r0, r3, #25
    3a90:	bmi.n	3a9a <ExFatFile::read(void*, unsigned int)+0x1e>
    3a92:	ldrb.w	r3, [r4, #49]	; 0x31
    3a96:	lsls	r1, r3, #28
    3a98:	bpl.n	3ab4 <ExFatFile::read(void*, unsigned int)+0x38>
    if ((m_curPosition + count) > m_validLength) {
    3a9a:	ldrd	r0, r1, [r4]
    3a9e:	ldrd	r2, r3, [r4, #16]
    3aa2:	adds.w	r8, r0, r5
    3aa6:	adc.w	r9, r1, #0
    3aaa:	cmp	r3, r9
    3aac:	it	eq
    3aae:	cmpeq	r2, r8
    3ab0:	bcs.n	3ab4 <ExFatFile::read(void*, unsigned int)+0x38>
      count = toRead = m_validLength - m_curPosition;
    3ab2:	subs	r5, r2, r0
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3ab4:	mov	r9, r5
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3ab6:	add.w	sl, r4, #24
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3aba:	cmp.w	r9, #0
    3abe:	beq.n	3b48 <ExFatFile::read(void*, unsigned int)+0xcc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3ac0:	ldr	r0, [r4, #32]
    3ac2:	ldrd	r2, r3, [r4]
    3ac6:	ldr.w	r1, [r0, #1080]	; 0x438
    3aca:	and.w	r8, r1, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3ace:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    3ad2:	cmp.w	r8, #0
    3ad6:	bne.n	3b16 <ExFatFile::read(void*, unsigned int)+0x9a>
      if (m_curPosition == 0) {
    3ad8:	orrs	r3, r2
    3ada:	bne.n	3aec <ExFatFile::read(void*, unsigned int)+0x70>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3adc:	ldrb.w	r3, [r4, #49]	; 0x31
    3ae0:	lsls	r2, r3, #25
    3ae2:	ite	mi
    3ae4:	ldrmi.w	r3, [r0, #1076]	; 0x434
    3ae8:	ldrpl	r3, [r4, #28]
    3aea:	b.n	3af8 <ExFatFile::read(void*, unsigned int)+0x7c>
      } else if (isContiguous()) {
    3aec:	ldrb.w	r3, [r4, #51]	; 0x33
    3af0:	lsls	r3, r3, #25
    3af2:	bpl.n	3afc <ExFatFile::read(void*, unsigned int)+0x80>
        m_curCluster++;
    3af4:	ldr	r3, [r4, #24]
    3af6:	adds	r3, #1
    3af8:	str	r3, [r4, #24]
    3afa:	b.n	3b16 <ExFatFile::read(void*, unsigned int)+0x9a>
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3afc:	mov	r2, sl
    3afe:	ldr	r1, [r4, #24]
    3b00:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3b04:	cmp	r0, #0
    3b06:	blt.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3b08:	bne.n	3b16 <ExFatFile::read(void*, unsigned int)+0x9a>
          // EOF if directory.
          if (isDir()) {
    3b0a:	ldrb.w	r3, [r4, #49]	; 0x31
    3b0e:	tst.w	r3, #80	; 0x50
    3b12:	bne.n	3b48 <ExFatFile::read(void*, unsigned int)+0xcc>
    3b14:	b.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3b16:	ldr	r7, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3b18:	mov.w	r2, r8, lsr #9
    3b1c:	ldr	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3b1e:	ldrb.w	lr, [r7, #1093]	; 0x445
    3b22:	subs	r1, #2
    3b24:	ldr.w	r0, [r7, #1068]	; 0x42c
    3b28:	lsl.w	r1, r1, lr
    3b2c:	add	r1, r0
    3b2e:	add.w	r8, r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3b32:	cmp.w	fp, #0
    3b36:	bne.n	3bd8 <ExFatFile::read(void*, unsigned int)+0x15c>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3b38:	cmp.w	r9, #512	; 0x200
    3b3c:	bcc.n	3bd8 <ExFatFile::read(void*, unsigned int)+0x15c>
    3b3e:	ldr.w	r1, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    3b42:	cmp	r8, r1
    3b44:	bne.n	3b50 <ExFatFile::read(void*, unsigned int)+0xd4>
    3b46:	b.n	3bd8 <ExFatFile::read(void*, unsigned int)+0x15c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3b48:	rsb	r0, r9, r5
    3b4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3b50:	cmp.w	r9, #1024	; 0x400
    3b54:	bcc.n	3bac <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3b56:	movs	r3, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3b58:	mov.w	fp, r9, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3b5c:	lsl.w	r3, r3, lr
    3b60:	subs	r2, r3, r2
    3b62:	cmp	fp, r2
    3b64:	it	cs
    3b66:	movcs	fp, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3b68:	cmp	r8, r1
    3b6a:	bhi.n	3b92 <ExFatFile::read(void*, unsigned int)+0x116>
    3b6c:	add.w	r3, fp, r8
    3b70:	cmp	r1, r3
    3b72:	bcs.n	3b92 <ExFatFile::read(void*, unsigned int)+0x116>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3b74:	add.w	r0, r7, #528	; 0x210
    3b78:	bl	30fa <FsCache::sync()>
    3b7c:	cbnz	r0, 3b92 <ExFatFile::read(void*, unsigned int)+0x116>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3b7e:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3b82:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3b86:	orr.w	r3, r3, #2
    3b8a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    3b8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3b92:	ldr.w	r0, [r7, #532]	; 0x214
    3b96:	mov	r2, r6
    3b98:	mov	r1, r8
    3b9a:	ldr	r3, [r0, #0]
    3b9c:	ldr	r7, [r3, #16]
    3b9e:	mov	r3, fp
    3ba0:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3ba2:	cmp	r0, #0
    3ba4:	beq.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3ba6:	mov.w	r7, fp, lsl #9
    3baa:	b.n	3bc2 <ExFatFile::read(void*, unsigned int)+0x146>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3bac:	ldr.w	r0, [r7, #532]	; 0x214
    3bb0:	mov	r2, r6
    3bb2:	mov	r1, r8
    3bb4:	ldr	r3, [r0, #0]
    3bb6:	ldr	r3, [r3, #12]
    3bb8:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3bba:	cmp	r0, #0
    3bbc:	beq.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3bbe:	mov.w	r7, #512	; 0x200
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3bc2:	add	r6, r7
    m_curPosition += n;
    toRead -= n;
    3bc4:	rsb	r9, r7, r9
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3bc8:	ldrd	r2, r3, [r4]
    3bcc:	adds	r2, r2, r7
    3bce:	adc.w	r3, r3, #0
    3bd2:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3bd6:	b.n	3aba <ExFatFile::read(void*, unsigned int)+0x3e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3bd8:	movs	r2, #0
    3bda:	mov	r1, r8
    3bdc:	add.w	r0, r7, #528	; 0x210
    3be0:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3be4:	cmp	r0, #0
    3be6:	beq.n	3b7e <ExFatFile::read(void*, unsigned int)+0x102>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3be8:	rsb	r7, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3bec:	add.w	r1, r0, fp
    3bf0:	mov	r0, r6
    3bf2:	cmp	r7, r9
    3bf4:	it	cs
    3bf6:	movcs	r7, r9
    3bf8:	mov	r2, r7
    3bfa:	bl	87a4 <memcpy>
    3bfe:	b.n	3bc2 <ExFatFile::read(void*, unsigned int)+0x146>

00003c00 <ExFatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    3c00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3c02:	movs	r2, #1
    3c04:	add.w	r1, sp, #7
    3c08:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    3c0a:	ldr	r5, [r0, #24]
 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    3c0c:	ldrd	r6, r7, [r0]
    3c10:	bl	3a7c <ExFatFile::read(void*, unsigned int)>
    3c14:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3c16:	str	r5, [r4, #24]
    3c18:	ite	eq
    3c1a:	ldrbeq.w	r0, [sp, #7]
    3c1e:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3c22:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3c26:	add	sp, #12
    3c28:	pop	{r4, r5, r6, r7, pc}

00003c2a <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3c2a:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c2e:	mov	r7, r3
    3c30:	ldrb.w	fp, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3c34:	ldr	r3, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3c36:	mov	r4, r0
    3c38:	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3c3a:	str	r3, [sp, #4]
  // error if file not open
  if (!isOpen()) {
    3c3c:	cmp.w	fp, #0
    3c40:	beq.n	3ce8 <ExFatFile::seekSet(unsigned long long)+0xbe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3c42:	ldrd	r8, r9, [r0]
    3c46:	cmp	r9, r7
    3c48:	it	eq
    3c4a:	cmpeq	r8, r2
    3c4c:	beq.n	3cf0 <ExFatFile::seekSet(unsigned long long)+0xc6>
    return true;
  }
  if (pos == 0) {
    3c4e:	orrs.w	r3, r6, r7
    3c52:	bne.n	3c5a <ExFatFile::seekSet(unsigned long long)+0x30>
    // set position to start of file
    m_curCluster = 0;
    3c54:	movs	r3, #0
    3c56:	str	r3, [r0, #24]
    goto done;
    3c58:	b.n	3ce2 <ExFatFile::seekSet(unsigned long long)+0xb8>
  }
  if (isFile()) {
    3c5a:	tst.w	fp, #8
    3c5e:	beq.n	3c6c <ExFatFile::seekSet(unsigned long long)+0x42>
    if (pos > m_validLength) {
    3c60:	ldrd	r0, r1, [r0, #16]
    3c64:	cmp	r1, r7
    3c66:	it	eq
    3c68:	cmpeq	r0, r2
    3c6a:	bcc.n	3ce8 <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3c6c:	ldr	r3, [r4, #32]
    3c6e:	adds.w	r0, r6, #4294967295
    3c72:	ldrb.w	sl, [r3, #1093]	; 0x445
    3c76:	adc.w	r1, r7, #4294967295
    3c7a:	str	r3, [sp, #0]
    3c7c:	add.w	sl, sl, #9
    3c80:	uxtb.w	sl, sl
    3c84:	mov	r2, sl
    3c86:	bl	a314 <__aeabi_llsr>
  if (isContiguous()) {
    3c8a:	ldrb.w	r2, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3c8e:	mov	r5, r0
  if (isContiguous()) {
    3c90:	lsls	r3, r2, #25
    3c92:	bpl.n	3c9c <ExFatFile::seekSet(unsigned long long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    3c94:	ldr	r3, [r4, #28]
    3c96:	add	r5, r3
    3c98:	str	r5, [r4, #24]
    goto done;
    3c9a:	b.n	3ce2 <ExFatFile::seekSet(unsigned long long)+0xb8>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3c9c:	adds.w	r0, r8, #4294967295
    3ca0:	mov	r2, sl
    3ca2:	adc.w	r1, r9, #4294967295
    3ca6:	bl	a314 <__aeabi_llsr>
  if (nNew < nCur || m_curPosition == 0) {
    3caa:	cmp	r5, r0
    3cac:	bcc.n	3cb4 <ExFatFile::seekSet(unsigned long long)+0x8a>
    3cae:	orrs.w	r3, r8, r9
    3cb2:	bne.n	3cca <ExFatFile::seekSet(unsigned long long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3cb4:	tst.w	fp, #64	; 0x40
    3cb8:	itet	ne
    3cba:	ldrne	r3, [sp, #0]
    3cbc:	ldreq	r3, [r4, #28]
    3cbe:	ldrne.w	r3, [r3, #1076]	; 0x434
    3cc2:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3cc4:	add.w	r8, r4, #24
    3cc8:	b.n	3cde <ExFatFile::seekSet(unsigned long long)+0xb4>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3cca:	subs	r5, r5, r0
    3ccc:	b.n	3cc4 <ExFatFile::seekSet(unsigned long long)+0x9a>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3cce:	mov	r2, r8
    3cd0:	ldr	r1, [r4, #24]
    3cd2:	ldr	r0, [r4, #32]
    3cd4:	subs	r5, #1
    3cd6:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3cda:	cmp	r0, #0
    3cdc:	ble.n	3ce8 <ExFatFile::seekSet(unsigned long long)+0xbe>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3cde:	cmp	r5, #0
    3ce0:	bne.n	3cce <ExFatFile::seekSet(unsigned long long)+0xa4>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3ce2:	strd	r6, r7, [r4]
    3ce6:	b.n	3cf0 <ExFatFile::seekSet(unsigned long long)+0xc6>
  return true;

 fail:
  m_curCluster = tmp;
    3ce8:	ldr	r3, [sp, #4]
  return false;
    3cea:	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    3cec:	str	r3, [r4, #24]
  return false;
    3cee:	b.n	3cf2 <ExFatFile::seekSet(unsigned long long)+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3cf0:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    3cf2:	add	sp, #12
    3cf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3cf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cfc:	mov	sl, r3
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    3cfe:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3d02:	sub	sp, #52	; 0x34
    3d04:	mov	r4, r0
    3d06:	mov	r6, r1
    3d08:	mov	r5, r2
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    3d0a:	cbnz	r3, 3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3d0c:	ldrb.w	r3, [r1, #49]	; 0x31
    3d10:	tst.w	r3, #80	; 0x50
    3d14:	beq.n	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    3d16:	and.w	r3, sl, #3
    3d1a:	cmp	r3, #1
    3d1c:	beq.w	4024 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32c>
    3d20:	cmp	r3, #2
    3d22:	bne.w	401a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x322>
      break;
    case O_WRONLY:
      modeFlags = FILE_FLAG_WRITE;
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    3d26:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3d28:	and.w	r9, sl, #8
    3d2c:	orr.w	r9, r9, r3

  if (fname) {
    3d30:	cbz	r5, 3d76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7e>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    3d32:	ldr	r3, [r5, #16]
    3d34:	mov.w	r8, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    3d38:	movs	r2, #0
    3d3a:	mov	r0, r6
    3d3c:	adds	r3, #14
    3d3e:	udiv	r8, r3, r8
    3d42:	add.w	r8, r8, #2
    3d46:	movs	r3, #0
    3d48:	uxtb.w	r8, r8
    3d4c:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    3d50:	mov.w	fp, #0
    3d54:	mov	r7, fp
    freeNeed = 2 + (fname->nameLength + 14)/15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, 32);
    3d56:	movs	r2, #32
    3d58:	add	r1, sp, #16
    3d5a:	mov	r0, r6
    3d5c:	bl	3a7c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3d60:	cmp	r0, #0
    3d62:	beq.w	3ede <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1e6>
      goto create;
    }
    if (n != 32) {
    3d66:	cmp	r0, #32
    3d68:	beq.n	3d7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  return sync();
#endif  // READ_ONLY

 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3d6a:	movs	r0, #0
    3d6c:	strb.w	r0, [r4, #49]	; 0x31
  m_flags = 0;
    3d70:	strb.w	r0, [r4, #51]	; 0x33
  return false;
    3d74:	b.n	403c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
    3d76:	mov.w	r8, #3
    3d7a:	b.n	3d50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3d7c:	ldrb.w	r2, [sp, #16]
    3d80:	lsls	r1, r2, #24
    3d82:	bmi.n	3da8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      // Unused entry.
      if (freeCount == 0) {
    3d84:	cbnz	r7, 3d90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x98>
        freePos.position = dir->curPosition() - 32;
    3d86:	ldr	r3, [r6, #0]
    3d88:	subs	r3, #32
    3d8a:	str	r3, [sp, #4]
    3d8c:	ldr	r3, [r6, #24]
    3d8e:	str	r3, [sp, #0]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3d90:	cmp	r7, r8
        freeCount++;
    3d92:	itt	cc
    3d94:	addcc	r7, #1
    3d96:	uxtbcc	r7, r7
      }
      if (!buf[0]) {
    3d98:	cbz	r2, 3da0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
      }
      if (fname->atEnd()) {
        goto found;
      }
    } else {
      inSet = false;
    3d9a:	mov.w	fp, #0
    3d9e:	b.n	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
      }
      if (freeCount < freeNeed) {
        freeCount++;
      }
      if (!buf[0]) {
        if (fname) {
    3da0:	cmp	r5, #0
    3da2:	bne.w	3ede <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1e6>
    3da6:	b.n	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    } else if (!inSet) {
    3da8:	cmp.w	fp, #0
    3dac:	bne.n	3dfe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x106>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3dae:	cmp	r7, r8
    3db0:	it	cc
    3db2:	movcc	r7, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3db4:	cmp	r2, #133	; 0x85
    3db6:	bne.n	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
    3db8:	movs	r2, #56	; 0x38
    3dba:	mov	r1, fp
    3dbc:	mov	r0, r4
        freeCount = 0;
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    3dbe:	mov.w	fp, #1
      memset(this, 0, sizeof(ExFatFile));
    3dc2:	bl	8760 <memset>
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    3dc6:	ldrb.w	r3, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3dca:	ldrb.w	r2, [sp, #20]
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    3dce:	strb.w	r3, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3dd2:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3dd6:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    3dd8:	it	pl
    3dda:	orrpl.w	r3, r3, #8
    3dde:	strb.w	r3, [r4, #49]	; 0x31
    3de2:	ldr	r3, [r6, #32]
      }
      m_vol = dir->volume();
    3de4:	str	r3, [r4, #32]
    3de6:	ldr	r3, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
    3de8:	str	r3, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - 32;
    3dea:	ldr	r3, [r6, #0]
    3dec:	subs	r3, #32
    3dee:	str	r3, [r4, #40]	; 0x28
      m_dirPos.isContiguous = dir->isContiguous();
    3df0:	ldrb.w	r3, [r6, #51]	; 0x33
    3df4:	ubfx	r3, r3, #6, #1
    3df8:	strb.w	r3, [r4, #44]	; 0x2c
    3dfc:	b.n	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    3dfe:	cmp	r2, #192	; 0xc0
    3e00:	bne.n	3e5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x162>
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3e02:	ldrb.w	r3, [sp, #17]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - 32;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    3e06:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3e0a:	lsls	r0, r3, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3e0c:	itt	mi
    3e0e:	orrmi.w	r3, r9, #64	; 0x40
    3e12:	strbmi.w	r3, [r4, #51]	; 0x33
      }
      m_validLength = getLe64(dirStream->validLength);
    3e16:	ldrd	r2, r3, [sp, #24]
    3e1a:	strd	r2, r3, [r4, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    3e1e:	ldr	r3, [sp, #36]	; 0x24
    3e20:	str	r3, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    3e22:	ldrd	r2, r3, [sp, #40]	; 0x28
    3e26:	strd	r2, r3, [r4, #8]
      if (!fname) {
    3e2a:	cbnz	r5, 3e34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3e2c:	tst.w	sl, #2048	; 0x800
    3e30:	bne.n	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3e32:	b.n	3e82 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  }
  void reset() {
    next = begin;
    3e34:	ldr	r3, [r5, #0]
      m_dataLength = getLe64(dirStream->dataLength);
      if (!fname) {
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
    3e36:	ldr	r2, [r5, #16]
    3e38:	str	r3, [r5, #4]
    ls = 0;
    3e3a:	mov.w	r3, #0
    3e3e:	strh	r3, [r5, #12]
    3e40:	ldrb.w	r3, [sp, #19]
    3e44:	cmp	r2, r3
    3e46:	bne.n	3d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
    3e48:	ldrh.w	r2, [sp, #20]
    3e4c:	ldrh	r3, [r5, #20]
    3e4e:	subs	r1, r2, r3
    3e50:	rsbs	fp, r1, #0
    3e54:	adc.w	fp, fp, r1
    3e58:	b.n	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    3e5a:	cmp	r2, #193	; 0xc1
    3e5c:	bne.n	3d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
    3e5e:	mov	r2, r5
    3e60:	add	r1, sp, #16
    3e62:	mov	r0, r4
    3e64:	bl	37f0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    3e68:	cbnz	r0, 3e6e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x176>
        inSet = false;
    3e6a:	mov	fp, r0
    3e6c:	b.n	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    3e6e:	ldrh	r2, [r5, #12]
    3e70:	cmp	r2, #0
    3e72:	bne.w	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    3e76:	ldr	r1, [r5, #4]
    3e78:	ldr	r2, [r5, #8]
    3e7a:	cmp	r1, r2
    3e7c:	bne.w	3d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5e>
    3e80:	b.n	3e2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x134>
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3e82:	tst.w	sl, #17408	; 0x4400
    3e86:	bne.n	3e90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x198>
    3e88:	ldrb.w	r3, [r4, #51]	; 0x33
    3e8c:	lsls	r2, r3, #30
    3e8e:	bpl.n	3e9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a4>
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    3e90:	ldrb.w	r3, [r4, #49]	; 0x31
    3e94:	tst.w	r3, #17
    3e98:	bne.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3e9c:	tst.w	sl, #1024	; 0x400
    3ea0:	beq.n	3ec4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3ea2:	ldrb.w	r3, [r4, #51]	; 0x33
    3ea6:	lsls	r3, r3, #30
    3ea8:	bpl.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3eac:	movs	r2, #0
    3eae:	movs	r3, #0
    3eb0:	mov	r0, r4
    3eb2:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
    3eb6:	cmp	r0, #0
    3eb8:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3ebc:	mov	r0, r4
    3ebe:	bl	4c24 <ExFatFile::truncate()>
    3ec2:	b.n	3ed6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1de>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3ec4:	tst.w	sl, #16384	; 0x4000
    3ec8:	beq.w	4028 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x330>
    3ecc:	mov	r0, r4
    3ece:	ldrd	r2, r3, [r4, #16]
    3ed2:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
    3ed6:	cmp	r0, #0
    3ed8:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3edc:	b.n	4028 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x330>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3ede:	tst.w	sl, #512	; 0x200
    3ee2:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3ee6:	tst.w	r9, #2
    3eea:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3eee:	cmp	r5, #0
    3ef0:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3ef4:	cmp	r7, r8
    3ef6:	bcs.n	3f32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x23a>
    n = dir->read(buf, 32);
    3ef8:	movs	r2, #32
    3efa:	add	r1, sp, #16
    3efc:	mov	r0, r6
    3efe:	bl	3a7c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f02:	cbnz	r0, 3f1a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x222>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3f04:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3f06:	ldr.w	sl, [r6, #24]
      if (!dir->addDirCluster()) {
    3f0a:	bl	4882 <ExFatFile::addDirCluster()>
    3f0e:	cmp	r0, #0
    3f10:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3f14:	str.w	sl, [r6, #24]
      continue;
    3f18:	b.n	3ef4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1fc>
    }
    if (n != 32) {
    3f1a:	cmp	r0, #32
    3f1c:	bne.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3f20:	cbnz	r7, 3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
      freePos.position = dir->curPosition() - 32;
    3f22:	ldr	r3, [r6, #0]
    3f24:	subs	r3, #32
    3f26:	str	r3, [sp, #4]
    3f28:	ldr	r3, [r6, #24]
    3f2a:	str	r3, [sp, #0]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3f2c:	adds	r7, #1
    3f2e:	uxtb	r7, r7
    3f30:	b.n	3ef4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1fc>
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
    3f32:	movs	r2, #56	; 0x38
    3f34:	movs	r1, #0
    3f36:	mov	r0, r4
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    3f38:	ldrb.w	r7, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3f3c:	bl	8760 <memset>
    3f40:	ldr	r3, [r6, #32]
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    3f42:	ubfx	r7, r7, #6, #1
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3f46:	add.w	sl, r8, #4294967295
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3f4a:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    3f4c:	movs	r3, #8
  m_dirPos = freePos;
    3f4e:	strb.w	r7, [r4, #44]	; 0x2c
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3f52:	uxtb.w	sl, sl
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3f56:	strb.w	r3, [r4, #49]	; 0x31
  }
  void reset() {
    next = begin;
    ls = 0;
    3f5a:	movs	r7, #0
  m_dirPos = freePos;
    3f5c:	ldr	r3, [sp, #0]
    3f5e:	str	r3, [r4, #36]	; 0x24
    3f60:	ldr	r3, [sp, #4]
    3f62:	str	r3, [r4, #40]	; 0x28
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3f64:	ldr	r3, [r5, #0]
    ls = 0;
    3f66:	strh	r7, [r5, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3f68:	str	r3, [r5, #4]
    3f6a:	uxtb.w	fp, r7
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    3f6e:	cmp	fp, r8
    3f70:	bcs.n	4012 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    3f72:	movs	r2, #1
    3f74:	mov	r1, fp
    3f76:	mov	r0, r4
    3f78:	bl	394e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3f7c:	mov	r6, r0
    3f7e:	cmp	r0, #0
    3f80:	beq.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    3f84:	ldrsb.w	r2, [r0]
    3f88:	cmp	r2, #0
    3f8a:	blt.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    3f8e:	movs	r2, #32
    3f90:	movs	r1, #0
    3f92:	bl	8760 <memset>
    if (i == 0) {
    3f96:	cmp.w	fp, #0
    3f9a:	bne.n	3fda <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e2>
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3f9c:	movs	r3, #133	; 0x85
    3f9e:	strb	r3, [r6, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    3fa0:	ldr	r3, [pc, #160]	; (4044 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3fa2:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3fa6:	strb.w	sl, [r6, #1]

      if (FsDateTime::callback) {
    3faa:	ldr	r3, [r3, #0]
    3fac:	cbz	r3, 3fce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d6>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    3fae:	add.w	r2, sp, #11
    3fb2:	add.w	r1, sp, #14
    3fb6:	add	r0, sp, #12
    3fb8:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3fba:	ldrh.w	r3, [sp, #12]
    3fbe:	strh	r3, [r6, #10]
    3fc0:	ldrh.w	r3, [sp, #14]
    3fc4:	strh	r3, [r6, #8]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    3fc6:	ldrb.w	r3, [sp, #11]
    3fca:	strb	r3, [r6, #20]
    3fcc:	b.n	400e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
    3fce:	movw	r3, #21537	; 0x5421
    3fd2:	strh	r3, [r6, #10]
    3fd4:	strh	r3, [r6, #14]
    3fd6:	strh	r3, [r6, #18]
    3fd8:	b.n	400e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    3fda:	cmp.w	fp, #1
    3fde:	bne.n	3ffa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x302>
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    3fe0:	orn	r3, r9, #127	; 0x7f
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3fe4:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    3fe6:	strb.w	fp, [r6, #1]
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3fea:	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    3fec:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    3ff0:	ldr	r3, [r5, #16]
    3ff2:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    3ff4:	ldrh	r3, [r5, #20]
    3ff6:	strh	r3, [r6, #4]
    3ff8:	b.n	400e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3ffa:	movs	r3, #193	; 0xc1
    3ffc:	add.w	fp, r6, #30
    4000:	strb	r3, [r6, #0]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    4002:	ldrh	r2, [r5, #12]
    4004:	cbnz	r2, 402c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>
    4006:	ldr	r1, [r5, #4]
    4008:	ldr	r2, [r5, #8]
    400a:	cmp	r1, r2
    400c:	bne.n	402c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>
    400e:	adds	r7, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    4010:	b.n	3f6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x272>
        uint16_t u = fname->get16();
        setLe16(dirName->unicode + 2*k, u);
      }
    }
  }
  return sync();
    4012:	mov	r0, r4
    4014:	bl	4844 <ExFatFile::sync()>
    4018:	b.n	403c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    401a:	cmp	r3, #0
    401c:	bne.w	3d6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x72>
    case O_RDONLY:
      modeFlags = FILE_FLAG_READ;
    4020:	movs	r3, #1
    4022:	b.n	3d28 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30>
      break;
    case O_WRONLY:
      modeFlags = FILE_FLAG_WRITE;
    4024:	movs	r3, #2
    4026:	b.n	3d28 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // !READ_ONLY
  return true;
    4028:	movs	r0, #1
    402a:	b.n	403c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
        if (fname->atEnd()) {
          break;
        }
        uint16_t u = fname->get16();
    402c:	mov	r0, r5
    402e:	bl	3238 <FsName::get16()>
    4032:	strh.w	r0, [r6, #2]!
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
    4036:	cmp	r6, fp
    4038:	bne.n	4002 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
    403a:	b.n	400e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x316>
 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    403c:	add	sp, #52	; 0x34
    403e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4042:	nop
    4044:	.word	0x20003d54

00004048 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    4048:	push	{r4, r5, r6, r7, lr}
    404a:	mov	r7, r3
    404c:	sub	sp, #92	; 0x5c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    404e:	movs	r3, #0
    4050:	mov	r5, r0
    4052:	mov	r4, r1
    4054:	str	r2, [sp, #4]
    4056:	strb.w	r3, [sp, #81]	; 0x51
    405a:	strb.w	r3, [sp, #82]	; 0x52
    405e:	strb.w	r3, [sp, #83]	; 0x53
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    4062:	strh.w	r3, [sp, #20]
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4066:	ldrb.w	r3, [r0, #49]	; 0x31
    406a:	cbz	r3, 4070 <ExFatFile::open(ExFatFile*, char const*, int)+0x28>
    close();
  }
  return openPrivate(dirFile, &fname, oflag);

 fail:
  return false;
    406c:	movs	r0, #0
    406e:	b.n	4100 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4070:	ldrb.w	r3, [r1, #49]	; 0x31
    4074:	tst.w	r3, #80	; 0x50
    4078:	beq.n	406c <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    407a:	ldrb	r3, [r2, #0]
    407c:	cmp	r3, #47	; 0x2f
    407e:	bne.n	40a6 <ExFatFile::open(ExFatFile*, char const*, int)+0x5e>
    while (isDirSeparator(*path)) {
    4080:	ldr	r3, [sp, #4]
    4082:	ldrb	r2, [r3, #0]
    4084:	cmp	r2, #47	; 0x2f
    4086:	bne.n	408e <ExFatFile::open(ExFatFile*, char const*, int)+0x46>
      path++;
    4088:	adds	r3, #1
    408a:	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    408c:	b.n	4080 <ExFatFile::open(ExFatFile*, char const*, int)+0x38>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    408e:	ldr	r1, [r4, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4090:	cbnz	r2, 409a <ExFatFile::open(ExFatFile*, char const*, int)+0x52>
      return openRoot(dirFile->m_vol);
    4092:	mov	r0, r5
    4094:	bl	39da <ExFatFile::openRoot(ExFatVolume*)>
    4098:	b.n	4100 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    409a:	add	r0, sp, #32
    409c:	bl	39da <ExFatFile::openRoot(ExFatVolume*)>
    40a0:	cmp	r0, #0
    40a2:	beq.n	406c <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    40a4:	add	r4, sp, #32
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    40a6:	add	r3, sp, #4
    40a8:	add	r2, sp, #8
    40aa:	ldr	r1, [sp, #4]
    40ac:	mov	r0, r5
    40ae:	bl	3a00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    40b2:	cmp	r0, #0
    40b4:	beq.n	406c <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    40b6:	ldr	r3, [sp, #4]
    40b8:	ldrb	r3, [r3, #0]
    40ba:	cbz	r3, 40f4 <ExFatFile::open(ExFatFile*, char const*, int)+0xac>
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    40bc:	movs	r3, #0
    40be:	add	r2, sp, #8
    40c0:	mov	r1, r4
    40c2:	mov	r0, r5
    40c4:	bl	3cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    40c8:	cmp	r0, #0
    40ca:	beq.n	406c <ExFatFile::open(ExFatFile*, char const*, int)+0x24>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    40cc:	add	r2, sp, #32
    40ce:	mov	r3, r5
    40d0:	add.w	lr, r5, #48	; 0x30
    40d4:	mov	r4, r2
    40d6:	ldr	r0, [r3, #0]
    40d8:	adds	r3, #8
    40da:	ldr.w	r1, [r3, #-4]
    40de:	mov	r6, r2
    40e0:	cmp	r3, lr
    40e2:	stmia	r6!, {r0, r1}
    40e4:	mov	r2, r6
    40e6:	bne.n	40d6 <ExFatFile::open(ExFatFile*, char const*, int)+0x8e>
    40e8:	ldr	r0, [r3, #0]
    40ea:	str	r0, [r6, #0]
    dirFile = &tmpDir;
    close();
    40ec:	mov	r0, r5
    40ee:	bl	3986 <ExFatFile::close()>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    40f2:	b.n	40a6 <ExFatFile::open(ExFatFile*, char const*, int)+0x5e>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return openPrivate(dirFile, &fname, oflag);
    40f4:	mov	r3, r7
    40f6:	add	r2, sp, #8
    40f8:	mov	r1, r4
    40fa:	mov	r0, r5
    40fc:	bl	3cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

 fail:
  return false;
}
    4100:	add	sp, #92	; 0x5c
    4102:	pop	{r4, r5, r6, r7, pc}

00004104 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const char* path, oflag_t oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4104:	cbz	r1, 410e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4106:	add.w	r1, r1, #1096	; 0x448
    410a:	b.w	4048 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    410e:	mov	r0, r1
    4110:	bx	lr

00004112 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4112:	push	{r4, r5}
    4114:	mov	r3, r2
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4116:	ldrb.w	r2, [r0, #49]	; 0x31
    411a:	cbnz	r2, 413a <ExFatFile::openNext(ExFatFile*, int)+0x28>
    411c:	ldrb.w	r5, [r1, #49]	; 0x31
    4120:	tst.w	r5, #80	; 0x50
    4124:	beq.n	413a <ExFatFile::openNext(ExFatFile*, int)+0x28>
    4126:	ldrd	r4, r5, [r1]
    412a:	movs	r5, #0
    412c:	and.w	r4, r4, #31
    4130:	orrs	r4, r5
    4132:	bne.n	413a <ExFatFile::openNext(ExFatFile*, int)+0x28>
  }
  return openPrivate(dir, nullptr, oflag);

 fail:
  return false;
}
    4134:	pop	{r4, r5}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openPrivate(dir, nullptr, oflag);
    4136:	b.w	3cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

 fail:
  return false;
}
    413a:	movs	r0, #0
    413c:	pop	{r4, r5}
    413e:	bx	lr

00004140 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"

//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4140:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4144:	mov	r8, r0
    4146:	mov	sl, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4148:	mov	r9, r1
    414a:	cbz	r1, 4150 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    414c:	subs	r4, r1, #2
    414e:	b.n	4154 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x14>
    4150:	ldr.w	r4, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    4154:	ldr.w	r3, [r8, #1072]	; 0x430
    start = 0;
    4158:	cmp	r4, r3
    415a:	it	cs
    415c:	movcs	r4, #0
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    415e:	movs	r3, #1
    4160:	and.w	r7, r4, #7
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    4164:	ubfx	fp, r4, #3, #9
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4168:	mov	r6, r4
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    416a:	mov	r5, r4
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    416c:	lsl.w	r7, r3, r7
    4170:	uxtb	r7, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4172:	ldr.w	r1, [r8, #1068]	; 0x42c
    4176:	movs	r2, #0
    4178:	mov	r0, r8
    417a:	add.w	r1, r1, r5, lsr #12
    417e:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4182:	cbz	r0, 41e2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
    4184:	mov	r3, r7
    4186:	mov	r1, fp
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4188:	ldrb	r7, [r0, r1]
    418a:	tst	r7, r3
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    418c:	add.w	r5, r5, #1
        if (!(mask & cache[i])) {
    4190:	bne.n	41ae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
    4192:	subs	r2, r5, r6
    4194:	cmp	r2, sl
    4196:	bne.n	41b0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
            if (cluster == 0 && count == 1) {
    4198:	cmp.w	r9, #0
    419c:	bne.n	41a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x68>
    419e:	cmp.w	sl, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    41a2:	it	eq
    41a4:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    41a8:	adds	r0, r6, #2
    41aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    41ae:	mov	r6, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    41b0:	cmp	r4, r5
    41b2:	beq.n	41e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    41b4:	ldr.w	r2, [r8, #1072]	; 0x430
    41b8:	cmp	r5, r2
    41ba:	bcs.n	41c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    41bc:	lsls	r3, r3, #1
    41be:	ands.w	r3, r3, #255	; 0xff
    41c2:	bne.n	418a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    41c4:	b.n	41ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    41c6:	movs	r6, #0
          i = sectorSize;
    41c8:	mov.w	r1, #512	; 0x200
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    41cc:	mov	r5, r6
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    41ce:	adds	r1, #1
    41d0:	movs	r3, #1
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    41d2:	mov.w	fp, #0
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    41d6:	cmp.w	r1, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    41da:	mov	r7, r3
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    41dc:	bcc.n	4188 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    41de:	b.n	4172 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x32>
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
          return 1;
    41e0:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    41e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000041e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    41e6:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41ea:	mov	r7, r2
  uint32_t sector;
  uint32_t start = cluster - 2;
    41ec:	subs	r2, r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    41ee:	mov	r6, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    41f0:	ldr.w	r0, [r0, #1072]	; 0x430
    41f4:	adds	r1, r2, r7
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    41f6:	mov	r8, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    41f8:	cmp	r1, r0
    41fa:	bhi.n	427e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
    41fc:	ldr.w	r3, [r6, #1056]	; 0x420
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4200:	cmp.w	r8, #0
    4204:	beq.n	421a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x34>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4206:	cmp	r2, r3
    4208:	bhi.n	4222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    420a:	cmp	r1, r3
    420c:	bls.n	4222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    420e:	cmp	r1, r0
    4210:	it	cs
    4212:	movcs	r1, #0
    4214:	str.w	r1, [r6, #1056]	; 0x420
    4218:	b.n	4222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    421a:	cmp	r2, r3
      m_bitmapStart = start;
    421c:	it	cc
    421e:	strcc.w	r2, [r6, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    4222:	and.w	r5, r2, #7
    4226:	movs	r3, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4228:	ldr.w	r1, [r6, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    422c:	ubfx	r4, r2, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4230:	lsl.w	r5, r3, r5
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4234:	add.w	r1, r1, r2, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4238:	uxtb	r5, r5
    423a:	movs	r2, #1
    423c:	mov	r0, r6
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    423e:	add.w	r9, r1, #1
    4242:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4246:	cbz	r0, 427e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
    4248:	adds	r3, r0, r4
    424a:	mov	r2, r5
    424c:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4250:	ldrb	r1, [r3, #0]
    4252:	tst	r1, r2
    4254:	ite	ne
    4256:	movne	r4, #1
    4258:	moveq	r4, #0
    425a:	cmp	r4, r8
    425c:	beq.n	427e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    425e:	eors	r1, r2
        if (--count == 0) {
    4260:	subs	r7, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4262:	strb	r1, [r3, #0]
        if (--count == 0) {
    4264:	beq.n	4284 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4266:	lsls	r2, r2, #1
    4268:	ands.w	r2, r2, #255	; 0xff
    426c:	bne.n	4250 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
    426e:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4270:	mov	r4, r2
    4272:	movs	r2, #1
  mask = 1 << (start & 7);
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4274:	mov	r1, r9
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4276:	cmp	r0, r3
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
        }
      }
      mask = 1;
    4278:	mov	r5, r2
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    427a:	bne.n	4250 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6a>
    427c:	b.n	423a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    }
    i = 0;
  }

 fail:
  return false;
    427e:	movs	r0, #0
    4280:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4284:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4286:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    428a:	push	{r3, r4, r5, lr}
    428c:	mov	r5, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    428e:	ldr.w	r1, [r0, #1080]	; 0x438
    4292:	add.w	r0, r0, #528	; 0x210
    4296:	ldr	r3, [r5, #4]
    4298:	ands	r1, r3
    429a:	ldr	r3, [r5, #0]
    429c:	subs	r4, r3, #2
    429e:	ldrb.w	r3, [r0, #565]	; 0x235
    42a2:	lsl.w	r3, r4, r3
    42a6:	add.w	r3, r3, r1, lsr #9
    42aa:	ldr.w	r1, [r0, #540]	; 0x21c
    42ae:	add	r1, r3
    42b0:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    42b4:	cbz	r0, 42be <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    42b6:	ldr	r3, [r5, #4]
    42b8:	ubfx	r3, r3, #0, #9
    42bc:	add	r0, r3
}
    42be:	pop	{r3, r4, r5, pc}

000042c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    42c0:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    42c2:	ldr.w	r3, [r0, #1072]	; 0x430
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    42c6:	mov	r4, r1
    42c8:	mov	r5, r2
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    42ca:	adds	r3, #1
    42cc:	cmp	r3, r1
    42ce:	bcs.n	42d6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    42d0:	mov.w	r0, #4294967295
    42d4:	pop	{r3, r4, r5, pc}
    42d6:	ldr.w	r1, [r0, #1060]	; 0x424
    42da:	movs	r2, #0
    42dc:	add.w	r0, r0, #528	; 0x210
    42e0:	add.w	r1, r1, r4, lsr #7
    42e4:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    42e8:	cmp	r0, #0
    42ea:	beq.n	42d0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    42ec:	lsls	r4, r4, #2
    42ee:	ubfx	r4, r4, #0, #9
    42f2:	ldr	r0, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  *value = next;
    42f4:	str	r0, [r5, #0]
  return next == EXFAT_EOC ? 0 : 1;
    42f6:	adds	r0, #1
    42f8:	it	ne
    42fa:	movne	r0, #1
}
    42fc:	pop	{r3, r4, r5, pc}

000042fe <ExFatPartition::chainSize(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    42fe:	push	{r0, r1, r4, r5, r6, lr}
    4300:	mov	r6, r0
    4302:	add	r5, sp, #8
  uint32_t n = 0;
    4304:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4306:	str.w	r1, [r5, #-4]!
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    430a:	mov	r2, r5
    430c:	ldr	r1, [sp, #4]
    430e:	mov	r0, r6
    4310:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    4314:	cmp	r0, #0
    4316:	blt.n	4322 <ExFatPartition::chainSize(unsigned long)+0x24>
    n++;
    4318:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    431c:	bne.n	430a <ExFatPartition::chainSize(unsigned long)+0xc>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    431e:	mov	r0, r4
    4320:	b.n	4324 <ExFatPartition::chainSize(unsigned long)+0x26>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4322:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4324:	add	sp, #8
    4326:	pop	{r4, r5, r6, pc}

00004328 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4328:	push	{r4, r5, r6, lr}
    432a:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    432c:	ldr.w	r4, [r0, #1080]	; 0x438
    4330:	ldr	r1, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4332:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4334:	ands	r4, r1
    4336:	adds	r3, r4, r2
  pos->position += offset;
    4338:	add	r2, r1
    433a:	str	r2, [r5, #4]
  tmp >>= bytesPerClusterShift();
    433c:	ldrb.w	r4, [r0, #1093]	; 0x445
    4340:	adds	r4, #9
    4342:	uxtb	r4, r4
    4344:	lsr.w	r4, r3, r4
  while (tmp--) {
    4348:	cbz	r4, 4368 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x40>
    if (pos->isContiguous) {
    434a:	ldrb	r3, [r5, #8]
    434c:	cbz	r3, 4358 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
      pos->cluster++;
    434e:	ldr	r3, [r5, #0]
    4350:	adds	r3, #1
    4352:	str	r3, [r5, #0]
    4354:	subs	r4, #1
    4356:	b.n	4348 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x20>
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4358:	mov	r2, r5
    435a:	ldr	r1, [r5, #0]
    435c:	mov	r0, r6
    435e:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    4362:	cmp	r0, #1
    4364:	beq.n	4354 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4366:	pop	{r4, r5, r6, pc}
        return status;
      }
    }
  }
  return 1;
    4368:	movs	r0, #1
}
    436a:	pop	{r4, r5, r6, pc}

0000436c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    436c:	cmp	r1, #1
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  *value = next;
  return next == EXFAT_EOC ? 0 : 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    436e:	push	{r3, r4, r5, lr}
    4370:	mov	r4, r1
    4372:	mov	r5, r2
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4374:	bhi.n	437a <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4376:	movs	r0, #0
    4378:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    437a:	ldr.w	r3, [r0, #1072]	; 0x430
    437e:	adds	r3, #1
    4380:	cmp	r1, r3
    4382:	bhi.n	4376 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
    4384:	ldr.w	r1, [r0, #1060]	; 0x424
    4388:	movs	r2, #1
    438a:	add.w	r0, r0, #528	; 0x210
    438e:	add.w	r1, r1, r4, lsr #7
    4392:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4396:	cmp	r0, #0
    4398:	beq.n	4376 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    439a:	lsls	r4, r4, #2
    439c:	ubfx	r4, r4, #0, #9
    43a0:	str	r5, [r0, r4]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    43a2:	movs	r0, #1

 fail:
  return false;
}
    43a4:	pop	{r3, r4, r5, pc}

000043a6 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    43a6:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    43aa:	mov	r7, r0
    43ac:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    43ae:	mov	r6, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    43b0:	add	r2, sp, #4
    43b2:	mov	r1, r4
    43b4:	mov	r0, r7
    43b6:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    43ba:	subs.w	r8, r0, #0
    43be:	bge.n	43c4 <ExFatPartition::freeChain(unsigned long)+0x1e>
  } while (status);

  return true;

 fail:
  return false;
    43c0:	movs	r5, #0
    43c2:	b.n	43fc <ExFatPartition::freeChain(unsigned long)+0x56>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    43c4:	movs	r2, #0
    43c6:	mov	r1, r4
    43c8:	mov	r0, r7
    43ca:	bl	436c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    43ce:	mov	r5, r0
    43d0:	cmp	r0, #0
    43d2:	beq.n	43c0 <ExFatPartition::freeChain(unsigned long)+0x1a>
    43d4:	adds	r2, r4, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    43d6:	cmp.w	r8, #0
    43da:	beq.n	43e2 <ExFatPartition::freeChain(unsigned long)+0x3c>
    43dc:	ldr	r3, [sp, #4]
    43de:	cmp	r2, r3
    43e0:	beq.n	43f4 <ExFatPartition::freeChain(unsigned long)+0x4e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    43e2:	movs	r3, #0
    43e4:	subs	r2, r2, r6
    43e6:	mov	r1, r6
    43e8:	mov	r0, r7
    43ea:	bl	41e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    43ee:	cmp	r0, #0
    43f0:	beq.n	43c0 <ExFatPartition::freeChain(unsigned long)+0x1a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    43f2:	ldr	r6, [sp, #4]
    }
    cluster = next;
    43f4:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    43f6:	cmp.w	r8, #0
    43fa:	bne.n	43b0 <ExFatPartition::freeChain(unsigned long)+0xa>

  return true;

 fail:
  return false;
}
    43fc:	mov	r0, r5
    43fe:	add	sp, #8
    4400:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004404 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4404:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4408:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    440a:	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    440c:	ldr.w	r1, [r0, #1068]	; 0x42c
    4410:	add.w	r7, r0, #528	; 0x210
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    4414:	mov	r5, r4
    4416:	movs	r2, #0
    4418:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    441a:	add.w	r8, r1, #1
    441e:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4422:	cbz	r0, 4466 <ExFatPartition::freeClusterCount()+0x62>
    4424:	add.w	lr, r0, #4294967295
    4428:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    442c:	ldrb.w	r1, [lr, #1]!
    4430:	cmp	r1, #255	; 0xff
    4432:	bne.n	4438 <ExFatPartition::freeClusterCount()+0x34>
        usedCount+= 8;
    4434:	adds	r4, #8
    4436:	b.n	444e <ExFatPartition::freeClusterCount()+0x4a>
      } else if (cache[i]) {
    4438:	cbz	r1, 444e <ExFatPartition::freeClusterCount()+0x4a>
    443a:	movs	r2, #8
    443c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    443e:	tst	r1, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4440:	mov.w	r3, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4444:	it	ne
    4446:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4448:	subs	r2, #1
    444a:	uxtb	r3, r3
    444c:	bne.n	443e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    444e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4450:	ldr.w	r0, [r6, #1072]	; 0x430
    4454:	cmp	r5, r0
    4456:	bcc.n	445e <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    4458:	subs	r0, r0, r4
    445a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    445e:	cmp	r5, ip
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4460:	mov	r1, r8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4462:	bne.n	442c <ExFatPartition::freeClusterCount()+0x28>
    4464:	b.n	4416 <ExFatPartition::freeClusterCount()+0x12>
      if (nc >= m_clusterCount) {
        return m_clusterCount - usedCount;
      }
    }
  }
}
    4466:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000446c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    446c:	push	{r4, r5, r6, r7, lr}
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    446e:	mov.w	r3, #4294967295
    4472:	mov	r4, r0
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
    4474:	movs	r5, #0
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4476:	sub	sp, #28
    4478:	mov	r0, r1
    447a:	str	r3, [r4, #12]
    447c:	mov	r1, r2
    447e:	str.w	r3, [r4, #540]	; 0x21c
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
    4482:	strb.w	r5, [r4, #1092]	; 0x444
  cacheInit(m_blockDev);


  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  cache = cacheClear(); // get buffer to use. 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
    4486:	add	r3, sp, #20
  MbrPart_t* mp;
  #endif
  BpbExFat_t* bpb;

  m_fatType = 0;
  m_blockDev = dev;
    4488:	str.w	r0, [r4, #1088]	; 0x440
  cacheInit(m_blockDev);


  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  cache = cacheClear(); // get buffer to use. 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
    448c:	add.w	r2, r4, #544	; 0x220
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4490:	str	r0, [r4, #4]
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    4492:	add.w	r7, r4, #528	; 0x210
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4496:	strb	r5, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4498:	str.w	r0, [r4, #532]	; 0x214
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    449c:	strb.w	r5, [r4, #528]	; 0x210
    44a0:	str	r5, [sp, #8]
    44a2:	str	r5, [sp, #4]
    44a4:	str	r5, [sp, #0]
    44a6:	bl	2ec0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    44aa:	tst.w	r0, #251	; 0xfb
    44ae:	bne.n	44b4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x48>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    44b0:	movs	r0, #0
    44b2:	b.n	452e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc2>
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part,cache, &firstLBA);
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    DBG_FAIL_MACRO;
    goto fail;    
  }
  volStart = firstLBA;
    44b4:	ldr	r6, [sp, #20]
    44b6:	mov	r2, r5
    44b8:	mov	r0, r7
    44ba:	mov	r1, r6
    44bc:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  }
  volStart = getLe32(mp->relativeSectors);
  #endif

  cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
  if (!cache) {
    44c0:	mov	r5, r0
    44c2:	cmp	r0, #0
    44c4:	beq.n	44b0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    44c6:	ldr	r1, [pc, #108]	; (4534 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc8>)
    44c8:	movs	r2, #5
    44ca:	adds	r0, #3
    44cc:	bl	b41c <strncmp>
    44d0:	mov	r1, r0
    44d2:	cmp	r0, #0
    44d4:	bne.n	44b0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    44d6:	ldrb.w	r3, [r5, #108]	; 0x6c
    44da:	cmp	r3, #9
    44dc:	bne.n	44b0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    44de:	ldr	r3, [r5, #80]	; 0x50
    44e0:	add	r3, r6
    44e2:	str.w	r3, [r4, #1060]	; 0x424
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    44e6:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    44e8:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    44ec:	ldr	r3, [r5, #88]	; 0x58
    44ee:	add	r6, r3
    44f0:	str.w	r6, [r4, #1068]	; 0x42c
    44f4:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    44f6:	str.w	r3, [r4, #1072]	; 0x430
    44fa:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    44fc:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4500:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4504:	movs	r5, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4506:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    450a:	mov	r0, r4
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    450c:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4510:	adds	r3, #9
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4512:	mov	r2, r5
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4514:	lsl.w	r3, r5, r3
    4518:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    451c:	subs	r3, #1
    451e:	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4522:	bl	4140 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4526:	movs	r3, #64	; 0x40
  return true;
    4528:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    452a:	strb.w	r3, [r4, #1092]	; 0x444
  return true;

 fail:
  return false;
}
    452e:	add	sp, #28
    4530:	pop	{r4, r5, r6, r7, pc}
    4532:	nop
    4534:	.word	0x2000122f

00004538 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4538:	push	{r4, lr}
    453a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    453c:	ldr.w	r1, [r0, #1076]	; 0x434
    4540:	bl	42fe <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4544:	ldrb.w	r3, [r4, #1093]	; 0x445
    4548:	adds	r3, #9
    454a:	uxtb	r3, r3
}
    454c:	lsls	r0, r3
    454e:	pop	{r4, pc}

00004550 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    4550:	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4552:	add.w	r4, r0, #1096	; 0x448
    4556:	sub	sp, #56	; 0x38
    4558:	movs	r3, #0
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    455a:	mov	r2, r1
    455c:	mov	r0, sp
    455e:	mov	r1, r4
    4560:	strb.w	r3, [sp, #49]	; 0x31
    4564:	strb.w	r3, [sp, #50]	; 0x32
    4568:	strb.w	r3, [sp, #51]	; 0x33
    456c:	bl	4048 <ExFatFile::open(ExFatFile*, char const*, int)>
    4570:	mov	r5, r0
    4572:	cbz	r0, 45a0 <ExFatVolume::chdir(char const*)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    4574:	ldrb.w	r3, [sp, #49]	; 0x31
    4578:	ands.w	r3, r3, #80	; 0x50
    457c:	beq.n	459e <ExFatVolume::chdir(char const*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    457e:	mov	r2, sp
    4580:	mov	r3, r4
    4582:	add	r6, sp, #48	; 0x30
    4584:	mov	r4, r2
    4586:	adds	r3, #8
    4588:	ldmia	r4!, {r0, r1}
    458a:	cmp	r4, r6
    458c:	str.w	r0, [r3, #-8]
    4590:	str.w	r1, [r3, #-4]
    4594:	mov	r2, r4
    4596:	bne.n	4584 <ExFatVolume::chdir(char const*)+0x34>
    4598:	ldr	r0, [r4, #0]
    459a:	str	r0, [r3, #0]
  return true;
    459c:	b.n	45a0 <ExFatVolume::chdir(char const*)+0x50>

 fail:
  return false;
    459e:	mov	r5, r3
}
    45a0:	mov	r0, r5
    45a2:	add	sp, #56	; 0x38
    45a4:	pop	{r4, r5, r6, pc}

000045a6 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    45a6:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45a8:	movs	r3, #0
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    45aa:	ldrb	r4, [r0, #0]
    45ac:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45ae:	cmp	r3, #1
    45b0:	orr.w	r1, r2, r1, lsr #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    45b4:	ldrb	r2, [r0, r3]
    45b6:	uxtah	r1, r2, r1
    45ba:	uxth	r1, r1
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    45bc:	bne.n	45c8 <exFatDirChecksum(unsigned char const*, unsigned short)+0x22>
    45be:	cmp	r4, #133	; 0x85
    45c0:	ite	ne
    45c2:	movne	r2, #1
    45c4:	moveq	r2, #3
    45c6:	b.n	45ca <exFatDirChecksum(unsigned char const*, unsigned short)+0x24>
    45c8:	movs	r2, #1
    45ca:	add	r3, r2
    45cc:	cmp	r3, #31
    45ce:	bls.n	45ac <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
    45d0:	mov	r0, r1
    45d2:	pop	{r4, pc}

000045d4 <ExFatPartition::cacheSync()>:
#if USE_EXFAT_BITMAP_CACHE
    m_bitmapCache.init(dev);
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
    45d4:	push	{r4, lr}
    45d6:	mov	r4, r0
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    45d8:	bl	30fa <FsCache::sync()>
    45dc:	cbz	r0, 45f6 <ExFatPartition::cacheSync()+0x22>
    45de:	add.w	r0, r4, #528	; 0x210
    45e2:	bl	30fa <FsCache::sync()>
    45e6:	cbz	r0, 45f6 <ExFatPartition::cacheSync()+0x22>
    45e8:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    45ec:	ldr	r3, [r0, #0]
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
    45ee:	ldmia.w	sp!, {r4, lr}
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    45f2:	ldr	r3, [r3, #28]
    45f4:	bx	r3
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
    45f6:	movs	r0, #0
    45f8:	pop	{r4, pc}

000045fa <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    45fa:	push	{r3, r4, r5, r6, r7, lr}
    45fc:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    45fe:	ldr	r0, [r0, #32]
    4600:	ldr	r1, [r4, #24]
    4602:	cbz	r1, 4606 <ExFatFile::addCluster()+0xc>
    4604:	adds	r1, #1
    4606:	movs	r2, #1
    4608:	bl	4140 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    460c:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    460e:	mov	r5, r0
  if (find < 2) {
    4610:	bhi.n	4616 <ExFatFile::addCluster()+0x1c>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4612:	movs	r6, #0
    4614:	b.n	4688 <ExFatFile::addCluster()+0x8e>
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4616:	movs	r3, #1
    4618:	mov	r1, r0
    461a:	ldr	r0, [r4, #32]
    461c:	mov	r2, r3
    461e:	bl	41e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4622:	mov	r6, r0
    4624:	cmp	r0, #0
    4626:	beq.n	4612 <ExFatFile::addCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4628:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    462a:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    462e:	cbnz	r2, 463a <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4630:	orr.w	r3, r3, #64	; 0x40
    4634:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    4638:	b.n	4686 <ExFatFile::addCluster()+0x8c>
  }
  if (isContiguous()) {
    463a:	lsls	r1, r3, #25
    463c:	bpl.n	4666 <ExFatFile::addCluster()+0x6c>
    if (find == (m_curCluster + 1)) {
    463e:	adds	r2, #1
    4640:	cmp	r5, r2
    4642:	beq.n	4686 <ExFatFile::addCluster()+0x8c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4644:	bic.w	r3, r3, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4648:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    464a:	strb.w	r3, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    464e:	ldr	r3, [r4, #24]
    4650:	cmp	r1, r3
    4652:	bcs.n	4666 <ExFatFile::addCluster()+0x6c>
      if (!m_vol->fatPut(c, c + 1)) {
    4654:	adds	r7, r1, #1
    4656:	ldr	r0, [r4, #32]
    4658:	mov	r2, r7
    465a:	bl	436c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    465e:	cmp	r0, #0
    4660:	beq.n	4612 <ExFatFile::addCluster()+0x18>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4662:	mov	r1, r7
    4664:	b.n	464e <ExFatFile::addCluster()+0x54>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4666:	mov.w	r2, #4294967295
    466a:	mov	r1, r5
    466c:	ldr	r0, [r4, #32]
    466e:	bl	436c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4672:	cmp	r0, #0
    4674:	beq.n	4612 <ExFatFile::addCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4676:	ldr	r1, [r4, #24]
    4678:	cbz	r1, 4686 <ExFatFile::addCluster()+0x8c>
    if (!m_vol->fatPut(m_curCluster, find)) {
    467a:	mov	r2, r5
    467c:	ldr	r0, [r4, #32]
    467e:	bl	436c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4682:	cmp	r0, #0
    4684:	beq.n	4612 <ExFatFile::addCluster()+0x18>
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4686:	str	r5, [r4, #24]
  return true;

 fail:
  return false;
}
    4688:	mov	r0, r6
    468a:	pop	{r3, r4, r5, r6, r7, pc}

0000468c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    468c:	push	{r4, r5, r6, lr}
    468e:	ldrb.w	r3, [r0, #51]	; 0x33
    4692:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    4694:	lsls	r2, r3, #30
    4696:	bmi.n	469c <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4698:	movs	r0, #0
    469a:	pop	{r4, r5, r6, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    469c:	ldr	r5, [r0, #28]
    469e:	cbnz	r5, 46a4 <ExFatFile::remove()+0x18>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    46a0:	movs	r5, #0
    46a2:	b.n	46f6 <ExFatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    46a4:	lsls	r3, r3, #25
    46a6:	bpl.n	46d2 <ExFatFile::remove()+0x46>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    46a8:	ldr	r6, [r0, #32]
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    46aa:	ldrd	r0, r1, [r0, #8]
    46ae:	ldrb.w	r2, [r6, #1093]	; 0x445
    46b2:	adds.w	r0, r0, #4294967295
    46b6:	add.w	r2, r2, #9
    46ba:	adc.w	r1, r1, #4294967295
    46be:	uxtb	r2, r2
    46c0:	bl	a314 <__aeabi_llsr>
    46c4:	movs	r3, #0
    46c6:	adds	r2, r0, #1
    46c8:	mov	r1, r5
    46ca:	mov	r0, r6
    46cc:	bl	41e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    46d0:	b.n	46da <ExFatFile::remove()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    46d2:	mov	r1, r5
    46d4:	ldr	r0, [r0, #32]
    46d6:	bl	43a6 <ExFatPartition::freeChain(unsigned long)>
    46da:	cmp	r0, #0
    46dc:	bne.n	46a0 <ExFatFile::remove()+0x14>
    46de:	b.n	4698 <ExFatFile::remove()+0xc>
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    46e0:	movs	r2, #1
    46e2:	mov	r0, r4
    46e4:	bl	394e <ExFatFile::dirCache(unsigned char, unsigned char)>
    46e8:	adds	r5, #1
    if (!cache) {
    46ea:	cmp	r0, #0
    46ec:	beq.n	4698 <ExFatFile::remove()+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    46ee:	ldrb	r3, [r0, #0]
    46f0:	and.w	r3, r3, #127	; 0x7f
    46f4:	strb	r3, [r0, #0]
    46f6:	uxtb	r1, r5
        goto fail;
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    46f8:	ldrb.w	r3, [r4, #48]	; 0x30
    46fc:	cmp	r3, r1
    46fe:	bcs.n	46e0 <ExFatFile::remove()+0x54>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4700:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4702:	ldr	r0, [r4, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4704:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4708:	strb.w	r3, [r4, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    470c:	bl	45d4 <ExFatPartition::cacheSync()>

 fail:
  return false;
}
    4710:	pop	{r4, r5, r6, pc}

00004712 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4712:	push	{r4, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4714:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4718:	sub	sp, #32
    471a:	mov	r4, r0
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    471c:	lsls	r1, r3, #27
    471e:	bmi.n	4724 <ExFatFile::rmdir()+0x12>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4720:	movs	r0, #0
    4722:	b.n	4760 <ExFatFile::rmdir()+0x4e>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4724:	movs	r2, #0
    4726:	movs	r3, #0
    4728:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    472c:	movs	r2, #32
    472e:	mov	r1, sp
    4730:	mov	r0, r4
    4732:	bl	3a7c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4736:	cbz	r0, 4748 <ExFatFile::rmdir()+0x36>
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4738:	cmp	r0, #32
    473a:	bne.n	4720 <ExFatFile::rmdir()+0xe>
    473c:	ldrb.w	r3, [sp]
    4740:	lsls	r2, r3, #24
    4742:	bmi.n	4720 <ExFatFile::rmdir()+0xe>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4744:	cmp	r3, #0
    4746:	bne.n	472c <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4748:	movs	r3, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    474a:	mov	r0, r4
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    474c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4750:	ldrb.w	r3, [r4, #51]	; 0x33
    4754:	orr.w	r3, r3, #2
    4758:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    475c:	bl	468c <ExFatFile::remove()>

 fail:
  return false;
}
    4760:	add	sp, #32
    4762:	pop	{r4, pc}

00004764 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4764:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4768:	movs	r6, #0
    476a:	mov	r5, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    476c:	ldr.w	r8, [pc, #208]	; 4840 <ExFatFile::syncDir()+0xdc>
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4770:	mov	r7, r6
    4772:	uxtb	r1, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4774:	ldrb.w	r3, [r5, #48]	; 0x30
    4778:	cmp	r3, r1
    477a:	bcc.n	4812 <ExFatFile::syncDir()+0xae>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    477c:	movs	r2, #0
    477e:	mov	r0, r5
    4780:	bl	394e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4784:	mov	r4, r0
    4786:	cmp	r0, #0
    4788:	beq.n	482a <ExFatFile::syncDir()+0xc6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    478a:	ldrb	r3, [r0, #0]
    478c:	cmp	r3, #192	; 0xc0
    478e:	beq.n	47cc <ExFatFile::syncDir()+0x68>
    4790:	cmp	r3, #193	; 0xc1
    4792:	beq.n	4804 <ExFatFile::syncDir()+0xa0>
    4794:	cmp	r3, #133	; 0x85
    4796:	bne.n	482a <ExFatFile::syncDir()+0xc6>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4798:	ldrb.w	r3, [r5, #49]	; 0x31
    479c:	and.w	r3, r3, #55	; 0x37
    47a0:	strh	r3, [r0, #4]
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    47a2:	ldr.w	r3, [r8]
    47a6:	cbz	r3, 47f6 <ExFatFile::syncDir()+0x92>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    47a8:	add.w	r2, sp, #3
    47ac:	add.w	r1, sp, #6
    47b0:	add	r0, sp, #4
    47b2:	blx	r3
          df->modifyTimeMs = ms10;
    47b4:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    47b8:	ldrh.w	r2, [sp, #6]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    47bc:	strb	r3, [r4, #21]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    47be:	ldrh.w	r3, [sp, #4]
    47c2:	strh	r2, [r4, #12]
    47c4:	strh	r3, [r4, #14]
    47c6:	strh	r2, [r4, #16]
    47c8:	strh	r3, [r4, #18]
    47ca:	b.n	47f6 <ExFatFile::syncDir()+0x92>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    47cc:	ldrb.w	r3, [r5, #51]	; 0x33
    47d0:	tst.w	r3, #64	; 0x40
    47d4:	ldrb	r3, [r0, #1]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    47d6:	ite	ne
    47d8:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    47dc:	biceq.w	r3, r3, #2
    47e0:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    47e2:	ldrd	r2, r3, [r5, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    47e6:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    47ea:	ldr	r3, [r5, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    47ec:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    47ee:	ldrd	r2, r3, [r5, #8]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    47f2:	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    47f6:	ldr	r2, [r5, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    47f8:	ldrb.w	r3, [r2, #528]	; 0x210
    47fc:	orr.w	r3, r3, #1
    4800:	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    4804:	mov	r1, r7
    4806:	mov	r0, r4
    4808:	bl	45a6 <exFatDirChecksum(unsigned char const*, unsigned short)>
    480c:	adds	r6, #1
    480e:	mov	r7, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4810:	b.n	4772 <ExFatFile::syncDir()+0xe>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4812:	movs	r2, #1
    4814:	add.w	r1, r5, #36	; 0x24
    4818:	ldr	r0, [r5, #32]
    481a:	bl	428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    481e:	cbz	r0, 482a <ExFatFile::syncDir()+0xc6>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4820:	strh	r7, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4822:	ldr	r0, [r5, #32]
    4824:	bl	45d4 <ExFatPartition::cacheSync()>
    4828:	cbnz	r0, 4838 <ExFatFile::syncDir()+0xd4>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    482a:	ldrb.w	r3, [r5, #50]	; 0x32
  return false;
    482e:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4830:	orr.w	r3, r3, #1
    4834:	strb.w	r3, [r5, #50]	; 0x32
  return false;
}
    4838:	add	sp, #8
    483a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    483e:	nop
    4840:	.word	0x20003d54

00004844 <ExFatFile::sync()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    4844:	push	{r4, lr}
  if (!isOpen()) {
    4846:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    484a:	mov	r4, r0
  if (!isOpen()) {
    484c:	cbnz	r3, 4852 <ExFatFile::sync()+0xe>
    return true;
    484e:	movs	r0, #1
    4850:	pop	{r4, pc}
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4852:	ldrb.w	r3, [r0, #51]	; 0x33
    4856:	lsls	r2, r3, #24
    4858:	bpl.n	486a <ExFatFile::sync()+0x26>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    485a:	and.w	r3, r3, #127	; 0x7f
    485e:	strb.w	r3, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4862:	ldmia.w	sp!, {r4, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4866:	b.w	4764 <ExFatFile::syncDir()>
  }
  if (!m_vol->cacheSync()) {
    486a:	ldr	r0, [r0, #32]
    486c:	bl	45d4 <ExFatPartition::cacheSync()>
    4870:	cmp	r0, #0
    4872:	bne.n	484e <ExFatFile::sync()+0xa>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4874:	ldrb.w	r3, [r4, #50]	; 0x32
    4878:	orr.w	r3, r3, #1
    487c:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    4880:	pop	{r4, pc}

00004882 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4882:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4886:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    488a:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    488c:	lsls	r0, r3, #25
    488e:	bpl.n	4898 <ExFatFile::addDirCluster()+0x16>
    4890:	ldr	r0, [r4, #32]
    4892:	bl	4538 <ExFatPartition::rootLength()>
    4896:	b.n	489a <ExFatFile::addDirCluster()+0x18>
    4898:	ldr	r0, [r4, #8]
    489a:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    489c:	ldr.w	r3, [r3, #1084]	; 0x43c
    48a0:	add	r0, r3
    48a2:	cmp.w	r0, #67108864	; 0x4000000
    48a6:	bcs.n	495a <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    48a8:	mov	r0, r4
    48aa:	bl	45fa <ExFatFile::addCluster()>
    48ae:	cmp	r0, #0
    48b0:	beq.n	495a <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    48b2:	ldr	r5, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    48b4:	ldrb.w	r3, [r5, #528]	; 0x210
    48b8:	lsls	r1, r3, #31
    48ba:	bpl.n	48c8 <ExFatFile::addDirCluster()+0x46>
    48bc:	add.w	r0, r5, #528	; 0x210
    48c0:	bl	30fa <FsCache::sync()>
    48c4:	cmp	r0, #0
    48c6:	beq.n	495a <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    48c8:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    48cc:	movs	r6, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    48ce:	add.w	r5, r5, #544	; 0x220
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    48d2:	mov.w	r2, #512	; 0x200
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    48d6:	str.w	r3, [r5, #-4]
    48da:	mov	r1, r6
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    48dc:	strb.w	r6, [r5, #-16]
    48e0:	mov	r0, r5
    48e2:	bl	8760 <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    48e6:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    48e8:	ldr	r3, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    48ea:	mov.w	r8, #1
    48ee:	ldrb.w	r1, [r2, #1093]	; 0x445
    48f2:	subs	r3, #2
    48f4:	ldr.w	r7, [r2, #1068]	; 0x42c
    48f8:	lsls	r3, r1
    48fa:	add	r7, r3
    48fc:	ldr	r3, [r4, #32]
    48fe:	ldrb.w	r2, [r3, #1093]	; 0x445
    4902:	lsl.w	r2, r8, r2
    4906:	cmp	r2, r6
    4908:	bls.n	491e <ExFatFile::addDirCluster()+0x9c>
    490a:	ldr.w	r0, [r3, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    490e:	mov	r2, r5
    4910:	adds	r1, r7, r6
    4912:	ldr	r3, [r0, #0]
    4914:	ldr	r3, [r3, #32]
    4916:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    4918:	cbz	r0, 495a <ExFatFile::addDirCluster()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    491a:	adds	r6, #1
    491c:	b.n	48fc <ExFatFile::addDirCluster()+0x7a>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    491e:	ldrb.w	r2, [r4, #49]	; 0x31
    4922:	lsls	r2, r2, #25
    4924:	bmi.n	4950 <ExFatFile::addDirCluster()+0xce>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4926:	ldrb.w	r2, [r4, #51]	; 0x33
    492a:	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    492e:	ldrd	r0, r1, [r4, #8]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4932:	strb.w	r2, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4936:	ldr.w	r2, [r3, #1084]	; 0x43c
    493a:	movs	r3, #0
    493c:	adds	r0, r0, r2
    493e:	adcs	r1, r3
    4940:	strd	r0, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4944:	ldrd	r0, r1, [r4, #16]
    4948:	adds	r2, r2, r0
    494a:	adcs	r3, r1
    494c:	strd	r2, r3, [r4, #16]
  }
  return sync();
    4950:	mov	r0, r4

 fail:
  return false;
}
    4952:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4956:	b.w	4844 <ExFatFile::sync()>

 fail:
  return false;
}
    495a:	movs	r0, #0
    495c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004960 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4960:	push	{r4, lr}
  if (!parent->isDir()) {
    4962:	ldrb.w	r3, [r1, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4966:	mov	r4, r0
  if (!parent->isDir()) {
    4968:	tst.w	r3, #80	; 0x50
    496c:	beq.n	49a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    496e:	movw	r3, #2562	; 0xa02
    4972:	bl	3cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4976:	cbz	r0, 49a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    4978:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    497a:	mov	r0, r4
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    497c:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4980:	bl	4882 <ExFatFile::addDirCluster()>
    4984:	cbz	r0, 49a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4986:	ldr	r3, [r4, #24]
    4988:	mov	r0, r4
    498a:	movs	r2, #0
    498c:	str	r3, [r4, #28]
    498e:	movs	r3, #0
    4990:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4994:	movs	r3, #193	; 0xc1
  return sync();
    4996:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4998:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    499c:	ldmia.w	sp!, {r4, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    49a0:	b.w	4844 <ExFatFile::sync()>

 fail:
  return false;
}
    49a4:	movs	r0, #0
    49a6:	pop	{r4, pc}

000049a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    49a8:	push	{r4, r5, r6, r7, lr}
    49aa:	mov	r7, r3
    49ac:	sub	sp, #92	; 0x5c
    49ae:	movs	r3, #0
    49b0:	mov	r5, r0
    49b2:	mov	r4, r1
    49b4:	str	r2, [sp, #4]
    49b6:	strh.w	r3, [sp, #20]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    49ba:	strb.w	r3, [sp, #81]	; 0x51
    49be:	strb.w	r3, [sp, #82]	; 0x52
    49c2:	strb.w	r3, [sp, #83]	; 0x53
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    49c6:	ldrb.w	r3, [r0, #49]	; 0x31
    49ca:	cmp	r3, #0
    49cc:	bne.n	4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    49ce:	ldrb.w	r3, [r1, #49]	; 0x31
    49d2:	tst.w	r3, #80	; 0x50
    49d6:	beq.n	4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    49d8:	ldrb	r3, [r2, #0]
    49da:	cmp	r3, #47	; 0x2f
    49dc:	bne.n	49fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x52>
    while (isDirSeparator(*path)) {
    49de:	ldr	r3, [sp, #4]
    49e0:	ldrb	r2, [r3, #0]
    49e2:	cmp	r2, #47	; 0x2f
    49e4:	bne.n	49ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x44>
      path++;
    49e6:	adds	r3, #1
    49e8:	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    49ea:	b.n	49de <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    49ec:	ldr	r1, [r4, #32]
    49ee:	add	r0, sp, #32
    49f0:	bl	39da <ExFatFile::openRoot(ExFatVolume*)>
    49f4:	cmp	r0, #0
    49f6:	beq.n	4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    49f8:	add	r4, sp, #32
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    49fa:	add	r3, sp, #4
    49fc:	add	r2, sp, #8
    49fe:	ldr	r1, [sp, #4]
    4a00:	mov	r0, r5
    4a02:	bl	3a00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4a06:	cbz	r0, 4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4a08:	ldr	r3, [sp, #4]
    4a0a:	ldrb	r3, [r3, #0]
    4a0c:	cbz	r3, 4a56 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xae>
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4a0e:	movs	r3, #0
    4a10:	add	r2, sp, #8
    4a12:	mov	r1, r4
    4a14:	mov	r0, r5
    4a16:	bl	3cf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4a1a:	cbz	r0, 4a44 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4a1c:	add	r2, sp, #32
    4a1e:	mov	r3, r5
    4a20:	add.w	lr, r5, #48	; 0x30
    4a24:	mov	r4, r2
    4a26:	ldr	r0, [r3, #0]
    4a28:	adds	r3, #8
    4a2a:	ldr.w	r1, [r3, #-4]
    4a2e:	mov	r6, r2
    4a30:	cmp	r3, lr
    4a32:	stmia	r6!, {r0, r1}
    4a34:	mov	r2, r6
    4a36:	bne.n	4a26 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
    4a38:	ldr	r0, [r3, #0]
    4a3a:	str	r0, [r6, #0]
    parent = &tmpDir;
    close();
    4a3c:	mov	r0, r5
    4a3e:	bl	3986 <ExFatFile::close()>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    4a42:	b.n	49fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x52>
    }
    if (!*path) {
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    4a44:	cbz	r7, 4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    4a46:	add	r2, sp, #8
    4a48:	mov	r1, r4
    4a4a:	mov	r0, r5
    4a4c:	bl	4960 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4a50:	cmp	r0, #0
    4a52:	bne.n	4a1c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
    4a54:	b.n	4a62 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4a56:	add	r2, sp, #8
    4a58:	mov	r1, r4
    4a5a:	mov	r0, r5
    4a5c:	bl	4960 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4a60:	b.n	4a64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xbc>

 fail:
  return false;
    4a62:	movs	r0, #0
}
    4a64:	add	sp, #92	; 0x5c
    4a66:	pop	{r4, r5, r6, r7, pc}

00004a68 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4a68:	push	{r4, r5, r6, r7, lr}
    4a6a:	movs	r3, #0
    4a6c:	sub	sp, #116	; 0x74
    4a6e:	mov	r4, r0
    4a70:	strb.w	r3, [sp, #49]	; 0x31
    4a74:	strb.w	r3, [sp, #50]	; 0x32
    4a78:	strb.w	r3, [sp, #51]	; 0x33
    4a7c:	strb.w	r3, [sp, #105]	; 0x69
    4a80:	strb.w	r3, [sp, #106]	; 0x6a
    4a84:	strb.w	r3, [sp, #107]	; 0x6b
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4a88:	ldrb.w	r3, [r0, #49]	; 0x31
    4a8c:	tst.w	r3, #24
    4a90:	bne.n	4a96 <ExFatFile::rename(ExFatFile*, char const*)+0x2e>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    4a92:	movs	r0, #0
    4a94:	b.n	4b0c <ExFatFile::rename(ExFatFile*, char const*)+0xa4>
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    4a96:	ldr	r0, [r0, #32]
    4a98:	ldr	r3, [r1, #32]
    4a9a:	cmp	r0, r3
    4a9c:	bne.n	4a92 <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4a9e:	movw	r3, #2561	; 0xa01
    4aa2:	mov	r0, sp
    4aa4:	bl	4048 <ExFatFile::open(ExFatFile*, char const*, int)>
    4aa8:	cmp	r0, #0
    4aaa:	beq.n	4a92 <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4aac:	add	r2, sp, #56	; 0x38
    4aae:	mov	r3, r4
    4ab0:	add.w	r7, r4, #48	; 0x30
    4ab4:	mov	r6, r2
    4ab6:	ldr	r0, [r3, #0]
    4ab8:	adds	r3, #8
    4aba:	ldr.w	r1, [r3, #-4]
    4abe:	mov	r5, r2
    4ac0:	cmp	r3, r7
    4ac2:	stmia	r5!, {r0, r1}
    4ac4:	mov	r2, r5
    4ac6:	bne.n	4ab6 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    4ac8:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    4aca:	add	r2, sp, #36	; 0x24
    4acc:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4ad0:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    4ad2:	ldmia	r2, {r0, r1, r2}
    4ad4:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    4ad8:	ldrb.w	r3, [sp, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    4adc:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4ade:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4ae2:	ldrb.w	r3, [r4, #51]	; 0x33
    4ae6:	orn	r3, r3, #127	; 0x7f
    4aea:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4aee:	bl	4844 <ExFatFile::sync()>
    4af2:	cmp	r0, #0
    4af4:	beq.n	4a92 <ExFatFile::rename(ExFatFile*, char const*)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4af6:	movs	r3, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();
    4af8:	mov	r0, r6
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4afa:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4afc:	movs	r3, #2
    4afe:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4b02:	movs	r3, #8
    4b04:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4b08:	bl	468c <ExFatFile::remove()>

 fail:
  return false;
}
    4b0c:	add	sp, #116	; 0x74
    4b0e:	pop	{r4, r5, r6, r7, pc}

00004b10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4b10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b14:	mov	r4, r3
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4b16:	ldrb.w	r3, [r0, #49]	; 0x31
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4b1a:	mov	r6, r0
    4b1c:	mov	r8, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4b1e:	lsls	r3, r3, #28
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4b20:	ldrb.w	fp, [sp, #40]	; 0x28
    4b24:	ldrb.w	sl, [sp, #44]	; 0x2c
    4b28:	ldrb.w	r5, [sp, #48]	; 0x30
    4b2c:	ldrb.w	r9, [sp, #52]	; 0x34
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4b30:	bpl.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile()
      || year < 1980
    4b32:	subw	r2, r2, #1980	; 0x7bc
    4b36:	uxth	r7, r2
    4b38:	cmp	r7, #127	; 0x7f
    4b3a:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || year > 2107
      || month < 1
    4b3c:	subs	r3, r4, #1
    4b3e:	cmp	r3, #11
    4b40:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || month > 12
      || day < 1
    4b42:	add.w	r3, fp, #4294967295
    4b46:	cmp	r3, #30
    4b48:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || day > 31
      || hour > 23
    4b4a:	cmp.w	sl, #23
    4b4e:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || minute > 59
    4b50:	cmp	r5, #59	; 0x3b
    4b52:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
      || second > 59) {
    4b54:	cmp.w	r9, #59	; 0x3b
    4b58:	bhi.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4b5a:	bl	4844 <ExFatFile::sync()>
    4b5e:	cbz	r0, 4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    4b60:	mov.w	r3, r9, asr #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4b64:	tst.w	r9, #1
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4b68:	orr.w	r4, fp, r4, lsl #5
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4b6c:	orr.w	r5, r3, r5, lsl #5
    4b70:	it	eq
    4b72:	moveq.w	r9, #0
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4b76:	orr.w	r4, r4, r7, lsl #9
    4b7a:	mov.w	r7, #0
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4b7e:	orr.w	r5, r5, sl, lsl #11
    4b82:	it	ne
    4b84:	movne.w	r9, #100	; 0x64
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4b88:	uxth	r4, r4
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
  DirFile_t* df;
  uint8_t* cache;
  uint16_t checksum = 0;
    4b8a:	mov	fp, r7
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4b8c:	uxth	r5, r5
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4b8e:	and.w	sl, r8, #1
    4b92:	uxtb	r1, r7

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4b94:	ldrb.w	r3, [r6, #48]	; 0x30
    4b98:	cmp	r3, r1
    4b9a:	bcc.n	4c06 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf6>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4b9c:	movs	r2, #0
    4b9e:	mov	r0, r6
    4ba0:	bl	394e <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4ba4:	cbnz	r0, 4bac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>
    goto fail;
  }
  return true;

 fail:
  return false;
    4ba6:	movs	r0, #0
    4ba8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4bac:	ldrb	r3, [r0, #0]
    4bae:	cmp	r3, #133	; 0x85
    4bb0:	beq.n	4bbc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xac>
    4bb2:	bcc.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    4bb4:	subs	r3, #192	; 0xc0
    4bb6:	cmp	r3, #1
    4bb8:	bls.n	4bfa <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xea>
    4bba:	b.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    4bbc:	ldrb.w	r3, [r6, #49]	; 0x31
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
    4bc0:	ldr	r2, [r6, #32]
    4bc2:	and.w	r3, r3, #55	; 0x37
    4bc6:	strh	r3, [r0, #4]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4bc8:	ldrb.w	r3, [r2, #528]	; 0x210
    4bcc:	orr.w	r3, r3, #1
    4bd0:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    4bd4:	cmp.w	sl, #0
    4bd8:	beq.n	4bde <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xce>
    4bda:	strh	r5, [r0, #16]
    4bdc:	strh	r4, [r0, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
    4bde:	tst.w	r8, #2
          df->createTimeMs = ms10;
    4be2:	ittt	ne
    4be4:	strbne.w	r9, [r0, #20]
    4be8:	strhne	r5, [r0, #8]
    4bea:	strhne	r4, [r0, #10]
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
    4bec:	tst.w	r8, #4
          df->modifyTimeMs = ms10;
    4bf0:	ittt	ne
    4bf2:	strbne.w	r9, [r0, #21]
    4bf6:	strhne	r5, [r0, #12]
    4bf8:	strhne	r4, [r0, #14]
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    4bfa:	mov	r1, fp
    4bfc:	adds	r7, #1
    4bfe:	bl	45a6 <exFatDirChecksum(unsigned char const*, unsigned short)>
    4c02:	mov	fp, r0

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4c04:	b.n	4b92 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x82>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4c06:	movs	r2, #1
    4c08:	add.w	r1, r6, #36	; 0x24
    4c0c:	ldr	r0, [r6, #32]
    4c0e:	bl	428a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4c12:	cmp	r0, #0
    4c14:	beq.n	4ba6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x96>
    4c16:	strh.w	fp, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4c1a:	ldr	r0, [r6, #32]
    4c1c:	bl	45d4 <ExFatPartition::cacheSync()>
    4c20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004c24 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4c24:	push	{r0, r1, r4, r5, r6, lr}
    4c26:	ldrb.w	r3, [r0, #51]	; 0x33
    4c2a:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4c2c:	lsls	r2, r3, #30
    4c2e:	bmi.n	4c34 <ExFatFile::truncate()+0x10>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4c30:	movs	r0, #0
    4c32:	b.n	4cde <ExFatFile::truncate()+0xba>
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4c34:	ldr	r5, [r0, #28]
    4c36:	cmp	r5, #0
    4c38:	beq.n	4cbc <ExFatFile::truncate()+0x98>
      return true;
  }
  if (isContiguous()) {
    4c3a:	and.w	r3, r3, #64	; 0x40
    4c3e:	ldr	r6, [r0, #24]
    4c40:	and.w	r1, r3, #255	; 0xff
    4c44:	cbz	r3, 4c84 <ExFatFile::truncate()+0x60>
    4c46:	ldr	r3, [r4, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4c48:	ldrd	r0, r1, [r0, #8]
    4c4c:	ldrb.w	r2, [r3, #1093]	; 0x445
    4c50:	adds.w	r0, r0, #4294967295
    4c54:	add.w	r2, r2, #9
    4c58:	adc.w	r1, r1, #4294967295
    4c5c:	uxtb	r2, r2
    4c5e:	bl	a314 <__aeabi_llsr>
    4c62:	adds	r2, r0, #1
    if (m_curCluster) {
    4c64:	cbz	r6, 4c72 <ExFatFile::truncate()+0x4e>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4c66:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4c68:	adds	r3, r6, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4c6a:	subs	r5, r5, r6
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4c6c:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    4c6e:	add	r2, r5
    4c70:	b.n	4c76 <ExFatFile::truncate()+0x52>
    } else {
      toFree = m_firstCluster;
    4c72:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4c74:	str	r6, [r4, #28]
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4c76:	cbz	r2, 4cc0 <ExFatFile::truncate()+0x9c>
    4c78:	movs	r3, #0
    4c7a:	ldr	r1, [sp, #4]
    4c7c:	ldr	r0, [r4, #32]
    4c7e:	bl	41e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4c82:	b.n	4cb8 <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4c84:	cbz	r6, 4caa <ExFatFile::truncate()+0x86>
      toFree = 0;
    4c86:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c88:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4c8a:	str.w	r1, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c8e:	mov	r1, r6
    4c90:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    4c94:	cmp	r0, #0
    4c96:	blt.n	4c30 <ExFatFile::truncate()+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4c98:	beq.n	4cae <ExFatFile::truncate()+0x8a>
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4c9a:	mov.w	r2, #4294967295
    4c9e:	ldr	r1, [r4, #24]
    4ca0:	ldr	r0, [r4, #32]
    4ca2:	bl	436c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4ca6:	cbnz	r0, 4cae <ExFatFile::truncate()+0x8a>
    4ca8:	b.n	4c30 <ExFatFile::truncate()+0xc>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4caa:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4cac:	str	r6, [r0, #28]
    }
    if (toFree) {
    4cae:	ldr	r1, [sp, #4]
    4cb0:	cbz	r1, 4cc0 <ExFatFile::truncate()+0x9c>
      if (!m_vol->freeChain(toFree)) {
    4cb2:	ldr	r0, [r4, #32]
    4cb4:	bl	43a6 <ExFatPartition::freeChain(unsigned long)>
    4cb8:	cbnz	r0, 4cc0 <ExFatFile::truncate()+0x9c>
    4cba:	b.n	4c30 <ExFatFile::truncate()+0xc>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4cbc:	movs	r0, #1
    4cbe:	b.n	4cde <ExFatFile::truncate()+0xba>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4cc0:	ldrd	r2, r3, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    4cc4:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4cc6:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    4cca:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4cce:	ldrb.w	r3, [r4, #51]	; 0x33
    4cd2:	orn	r3, r3, #127	; 0x7f
    4cd6:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    4cda:	bl	4844 <ExFatFile::sync()>

 fail:
  return false;
}
    4cde:	add	sp, #8
    4ce0:	pop	{r4, r5, r6, pc}
	...

00004ce4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4ce4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce8:	ldrb.w	r3, [r0, #51]	; 0x33
    4cec:	mov	r9, r1
    4cee:	mov	r4, r0
    4cf0:	mov	sl, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4cf2:	lsls	r1, r3, #30
    4cf4:	bpl.w	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4cf8:	lsls	r2, r3, #28
    4cfa:	bmi.n	4d0a <ExFatFile::write(void const*, unsigned int)+0x26>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4cfc:	add.w	r3, r4, #24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4d00:	mov	r8, sl
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4d02:	mov.w	fp, #1
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4d06:	str	r3, [sp, #0]
    4d08:	b.n	4dd0 <ExFatFile::write(void const*, unsigned int)+0xec>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    4d0a:	ldrd	r2, r3, [r0, #16]
    4d0e:	bl	3c2a <ExFatFile::seekSet(unsigned long long)>
    4d12:	cmp	r0, #0
    4d14:	bne.n	4cfc <ExFatFile::write(void const*, unsigned int)+0x18>
    4d16:	b.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4d18:	ldr	r0, [r4, #32]
    4d1a:	ldr	r6, [r4, #0]
    4d1c:	ldr.w	r3, [r0, #1080]	; 0x438
    4d20:	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4d22:	ubfx	r5, r6, #0, #9
    if (clusterOffset == 0) {
    4d26:	cmp	r6, #0
    4d28:	beq.n	4dd8 <ExFatFile::write(void const*, unsigned int)+0xf4>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d2a:	ldr.w	lr, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4d2e:	lsrs	r6, r6, #9
    4d30:	ldr	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d32:	ldrb.w	r2, [lr, #1093]	; 0x445
    4d36:	subs	r1, #2
    4d38:	ldr.w	r3, [lr, #1068]	; 0x42c
    4d3c:	lsls	r1, r2
    4d3e:	add	r1, r3
    4d40:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4d42:	cmp	r5, #0
    4d44:	bne.n	4e40 <ExFatFile::write(void const*, unsigned int)+0x15c>
    4d46:	cmp.w	r8, #512	; 0x200
    4d4a:	bcs.w	4e82 <ExFatFile::write(void const*, unsigned int)+0x19e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4d4e:	ldrd	r2, r3, [r4, #16]
    4d52:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4d56:	cmp	r7, r3
    4d58:	it	eq
    4d5a:	cmpeq	r6, r2
    4d5c:	ite	cc
    4d5e:	movcc	r2, #1
    4d60:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4d62:	add.w	r0, lr, #528	; 0x210
    4d66:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4d6a:	cmp	r0, #0
    4d6c:	beq.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    4d6e:	rsb	r6, r5, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4d72:	add	r0, r5
    4d74:	mov	r1, r9
    4d76:	cmp	r6, r8
    4d78:	it	cs
    4d7a:	movcs	r6, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d7c:	add	r5, r6
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4d7e:	mov	r2, r6
    4d80:	bl	87a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4d84:	cmp.w	r5, #512	; 0x200
    4d88:	bne.n	4d98 <ExFatFile::write(void const*, unsigned int)+0xb4>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4d8a:	ldr	r0, [r4, #32]
    4d8c:	add.w	r0, r0, #528	; 0x210
    4d90:	bl	30fa <FsCache::sync()>
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    4d94:	cmp	r0, #0
    4d96:	beq.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4d98:	add	r9, r6
    toWrite -= n;
    4d9a:	rsb	r8, r6, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4d9e:	ldrd	r0, r1, [r4]
    4da2:	adds	r2, r0, r6
    4da4:	adc.w	r3, r1, #0
    4da8:	mov	r0, r2
    4daa:	mov	r1, r3
    4dac:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4db0:	ldrd	r2, r3, [r4, #16]
    4db4:	cmp	r3, r1
    4db6:	it	eq
    4db8:	cmpeq	r2, r0
    4dba:	bcs.n	4dd0 <ExFatFile::write(void const*, unsigned int)+0xec>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4dbc:	ldrb.w	r3, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    4dc0:	mov	r2, r0
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4dc2:	orn	r3, r3, #127	; 0x7f
    4dc6:	strb.w	r3, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    4dca:	mov	r3, r1
    4dcc:	strd	r2, r3, [r4, #16]
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4dd0:	cmp.w	r8, #0
    4dd4:	bne.n	4d18 <ExFatFile::write(void const*, unsigned int)+0x34>
    4dd6:	b.n	4e44 <ExFatFile::write(void const*, unsigned int)+0x160>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4dd8:	ldr	r7, [r4, #24]
    4dda:	cbz	r7, 4e2a <ExFatFile::write(void const*, unsigned int)+0x146>
        int fg;

        if (isContiguous()) {
    4ddc:	ldrb.w	r3, [r4, #51]	; 0x33
    4de0:	lsls	r3, r3, #25
    4de2:	bpl.n	4e1a <ExFatFile::write(void const*, unsigned int)+0x136>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4de4:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    4de8:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4dea:	adds	r2, #9
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    4dec:	str	r3, [sp, #4]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4dee:	uxtb	r2, r2
    4df0:	ldrd	r0, r1, [r4, #8]
    4df4:	adds.w	r0, r0, #4294967295
    4df8:	adc.w	r1, r1, #4294967295
    4dfc:	bl	a314 <__aeabi_llsr>
    4e00:	ldr	r3, [sp, #4]
    4e02:	add	r0, r3
    4e04:	cmp	r7, r0
    4e06:	bcc.n	4e14 <ExFatFile::write(void const*, unsigned int)+0x130>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4e08:	mov	r0, r4
    4e0a:	bl	45fa <ExFatFile::addCluster()>
    4e0e:	cmp	r0, #0
    4e10:	bne.n	4d2a <ExFatFile::write(void const*, unsigned int)+0x46>
    4e12:	b.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    4e14:	adds	r7, #1
    4e16:	str	r7, [r4, #24]
    4e18:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0x46>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4e1a:	ldr	r2, [sp, #0]
    4e1c:	mov	r1, r7
    4e1e:	bl	42c0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4e22:	cmp	r0, #0
    4e24:	blt.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    4e26:	bne.n	4d2a <ExFatFile::write(void const*, unsigned int)+0x46>
    4e28:	b.n	4e08 <ExFatFile::write(void const*, unsigned int)+0x124>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    4e2a:	ldr	r3, [r4, #28]
    4e2c:	cbnz	r3, 4e3c <ExFatFile::write(void const*, unsigned int)+0x158>
          // allocate first cluster of file
          if (!addCluster()) {
    4e2e:	mov	r0, r4
    4e30:	bl	45fa <ExFatFile::addCluster()>
    4e34:	cbz	r0, 4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    4e36:	ldr	r3, [r4, #24]
    4e38:	str	r3, [r4, #28]
    4e3a:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0x46>
        } else {
          m_curCluster = m_firstCluster;
    4e3c:	str	r3, [r4, #24]
    4e3e:	b.n	4d2a <ExFatFile::write(void const*, unsigned int)+0x46>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4e40:	movs	r2, #1
    4e42:	b.n	4d62 <ExFatFile::write(void const*, unsigned int)+0x7e>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4e44:	ldrd	r0, r1, [r4]
    4e48:	ldrd	r2, r3, [r4, #8]
    4e4c:	cmp	r3, r1
    4e4e:	it	eq
    4e50:	cmpeq	r2, r0
    4e52:	bcs.n	4e5a <ExFatFile::write(void const*, unsigned int)+0x176>
    m_dataLength = m_curPosition;
    4e54:	strd	r0, r1, [r4, #8]
    4e58:	b.n	4e60 <ExFatFile::write(void const*, unsigned int)+0x17c>
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4e5a:	ldr	r3, [pc, #148]	; (4ef0 <ExFatFile::write(void const*, unsigned int)+0x20c>)
    4e5c:	ldr	r3, [r3, #0]
    4e5e:	cbz	r3, 4e7e <ExFatFile::write(void const*, unsigned int)+0x19a>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4e60:	ldrb.w	r3, [r4, #51]	; 0x33
    4e64:	orn	r3, r3, #127	; 0x7f
    4e68:	strb.w	r3, [r4, #51]	; 0x33
    4e6c:	b.n	4e7e <ExFatFile::write(void const*, unsigned int)+0x19a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4e6e:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    4e72:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4e74:	orr.w	r3, r3, #1
    4e78:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    4e7c:	b.n	4eea <ExFatFile::write(void const*, unsigned int)+0x206>
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
  }
  return nbyte;
    4e7e:	mov	r0, sl
    4e80:	b.n	4eea <ExFatFile::write(void const*, unsigned int)+0x206>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4e82:	cmp.w	r8, #1024	; 0x400
    4e86:	ldr.w	r7, [lr, #540]	; 0x21c
    4e8a:	ldr.w	r0, [lr, #532]	; 0x214
    4e8e:	bcc.n	4eba <ExFatFile::write(void const*, unsigned int)+0x1d6>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4e90:	lsl.w	r3, fp, r2
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4e94:	mov.w	ip, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4e98:	subs	r6, r3, r6
    4e9a:	mov	r3, ip
    4e9c:	cmp	ip, r6
    4e9e:	it	cs
    4ea0:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    4ea2:	cmp	r1, r7
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4ea4:	mov.w	r6, r3, lsl #9
    4ea8:	bhi.n	4eb0 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    4eaa:	adds	r2, r1, r3
    4eac:	cmp	r7, r2
    4eae:	bcc.n	4edc <ExFatFile::write(void const*, unsigned int)+0x1f8>
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    4eb0:	ldr	r2, [r0, #0]
    4eb2:	ldr	r5, [r2, #36]	; 0x24
    4eb4:	mov	r2, r9
    4eb6:	blx	r5
    4eb8:	b.n	4d94 <ExFatFile::write(void const*, unsigned int)+0xb0>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    4eba:	cmp	r1, r7
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    4ebc:	mov	r2, r9
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4ebe:	ittt	eq
    4ec0:	moveq.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4ec4:	strbeq.w	r5, [lr, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4ec8:	streq.w	r3, [lr, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    4ecc:	ldr	r3, [r0, #0]
    4ece:	ldr	r3, [r3, #32]
    4ed0:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4ed2:	cmp	r0, #0
    4ed4:	beq.n	4e6e <ExFatFile::write(void const*, unsigned int)+0x18a>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    4ed6:	mov.w	r6, #512	; 0x200
    4eda:	b.n	4d98 <ExFatFile::write(void const*, unsigned int)+0xb4>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4edc:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4ee0:	strb.w	r5, [lr, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4ee4:	str.w	r2, [lr, #540]	; 0x21c
    4ee8:	b.n	4eb0 <ExFatFile::write(void const*, unsigned int)+0x1cc>

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return 0;
}
    4eea:	add	sp, #12
    4eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ef0:	.word	0x20003d54

00004ef4 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    4ef4:	ldr	r0, [r1, #4]
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    4ef6:	push	{r4, lr}
    4ef8:	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    4efa:	cbz	r0, 4f14 <initFatDirCallback(unsigned long, void*)+0x20>
    4efc:	ldrh	r3, [r1, #8]
    4efe:	ldrh	r2, [r1, #10]
    4f00:	adds	r3, #1
    4f02:	uxth	r3, r3
    4f04:	cmp	r2, r3
    4f06:	strh	r3, [r1, #8]
    4f08:	bhi.n	4f14 <initFatDirCallback(unsigned long, void*)+0x20>
    state->pr->write(".");
    4f0a:	ldr	r1, [pc, #12]	; (4f18 <initFatDirCallback(unsigned long, void*)+0x24>)
    4f0c:	bl	3e4 <Print::write(char const*)>
    state->count = 0;
    4f10:	movs	r3, #0
    4f12:	strh	r3, [r4, #8]
  }
  return state->buffer;
    4f14:	ldr	r0, [r4, #0]
}
    4f16:	pop	{r4, pc}
    4f18:	.word	0x200011e9

00004f1c <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    4f1c:	push	{r4, r5, r6, r7, lr}
    4f1e:	mov	r4, r0
    4f20:	sub	sp, #28
    4f22:	mov	r6, r1
    4f24:	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4f26:	movs	r1, #0
    4f28:	mov.w	r2, #512	; 0x200
    4f2c:	ldr	r0, [r0, #36]	; 0x24
    4f2e:	bl	8760 <memset>
  writeMsg("Writing FAT ");
    4f32:	ldr	r0, [r4, #32]
    4f34:	cbz	r0, 4f3c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x20>
    4f36:	ldr	r1, [pc, #128]	; (4fb8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>)
    4f38:	bl	3e4 <Print::write(char const*)>
  struct initFatDirState state;
  state.buffer = m_secBuf;
    4f3c:	ldr	r3, [r4, #36]	; 0x24
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4f3e:	add	r2, sp, #12
    4f40:	ldr	r0, [r4, #28]
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
    4f42:	str	r3, [sp, #12]
  state.pr = m_pr;
    4f44:	ldr	r3, [r4, #32]
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4f46:	ldr	r1, [r4, #12]
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    4f48:	str	r3, [sp, #16]
  state.count = 0;
    4f4a:	movs	r3, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4f4c:	adds	r1, #1
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
    4f4e:	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    4f52:	lsrs	r3, r5, #5
    4f54:	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    4f58:	ldr	r3, [r0, #0]
    4f5a:	str	r2, [sp, #0]
    4f5c:	subs	r2, r5, #1
    4f5e:	ldr	r7, [r3, #40]	; 0x28
    4f60:	ldr	r3, [pc, #88]	; (4fbc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa0>)
    4f62:	blx	r7
    4f64:	cbnz	r0, 4f6a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x4e>
     return false;
    4f66:	movs	r0, #0
    4f68:	b.n	4fb4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x98>
  }
  writeMsg("\r\n");
    4f6a:	ldr	r0, [r4, #32]
    4f6c:	cbz	r0, 4f74 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x58>
    4f6e:	ldr	r1, [pc, #80]	; (4fc0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    4f70:	bl	3e4 <Print::write(char const*)>
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    4f74:	movs	r2, #248	; 0xf8
    4f76:	ldr	r3, [r4, #36]	; 0x24
  n = fatType == 16 ? 4 : 12;
    4f78:	cmp	r6, #16
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    4f7a:	mov.w	r0, #255	; 0xff
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    4f7e:	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    4f80:	mov.w	r3, #1
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    4f84:	ite	eq
    4f86:	moveq	r2, #4
    4f88:	movne	r2, #12
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    4f8a:	ldr	r1, [r4, #36]	; 0x24
    4f8c:	strb	r0, [r1, r3]
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    4f8e:	adds	r3, #1
    4f90:	cmp	r2, r3
    4f92:	bne.n	4f8a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6e>
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    4f94:	ldr	r0, [r4, #28]
    4f96:	ldr	r2, [r4, #36]	; 0x24
    4f98:	ldr	r3, [r0, #0]
    4f9a:	ldr	r1, [r4, #12]
    4f9c:	ldr	r3, [r3, #32]
    4f9e:	blx	r3
    4fa0:	cmp	r0, #0
    4fa2:	beq.n	4f66 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x4a>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    4fa4:	ldr	r0, [r4, #28]
    4fa6:	ldr	r5, [r4, #12]
    4fa8:	ldr	r1, [r4, #8]
    4faa:	ldr	r3, [r0, #0]
    4fac:	ldr	r2, [r4, #36]	; 0x24
    4fae:	add	r1, r5
    4fb0:	ldr	r3, [r3, #32]
    4fb2:	blx	r3
}
    4fb4:	add	sp, #28
    4fb6:	pop	{r4, r5, r6, r7, pc}
    4fb8:	.word	0x200011dc
    4fbc:	.word	0x00004ef5
    4fc0:	.word	0x2000125b

00004fc4 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    4fc4:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    4fc6:	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4fc8:	mov.w	r2, #512	; 0x200
    4fcc:	movs	r1, #0
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    4fce:	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4fd0:	mov	r0, r4
    4fd2:	bl	8760 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    4fd6:	movs	r3, #235	; 0xeb
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
    4fd8:	movs	r2, #144	; 0x90
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    4fda:	movs	r1, #32
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
    4fdc:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    4fde:	movs	r3, #118	; 0x76
    4fe0:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    4fe2:	mov	r3, r4
    4fe4:	strb.w	r2, [r3, #2]!
    4fe8:	add.w	r2, r4, #10
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    4fec:	strb.w	r1, [r3, #1]!
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    4ff0:	cmp	r3, r2
    4ff2:	bne.n	4fec <FatFormatter::initPbs()+0x28>
    4ff4:	mov.w	r3, #512	; 0x200
    4ff8:	strh.w	r3, [r4, #11]
    pbs->oemName[i] = ' ';
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    4ffc:	ldrb.w	r3, [r5, #43]	; 0x2b
    5000:	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    5002:	ldrh	r3, [r5, #40]	; 0x28
    5004:	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    5006:	movs	r3, #2
    5008:	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    500a:	movs	r3, #248	; 0xf8
    500c:	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    500e:	ldr	r3, [r5, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5010:	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    5012:	ldr	r3, [r5, #24]
    5014:	str	r3, [r4, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5016:	movw	r3, #43605	; 0xaa55
    501a:	strh.w	r3, [r4, #510]	; 0x1fe
    501e:	pop	{r3, r4, r5, pc}

00005020 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    5020:	push	{r4, r5, r6, lr}
    5022:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5024:	mov.w	r2, #512	; 0x200
    5028:	movs	r1, #0
    502a:	ldr	r0, [r0, #36]	; 0x24
    502c:	bl	8760 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    5030:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    5032:	ldr	r2, [r4, #16]
    5034:	ldr	r1, [r4, #0]
    5036:	addw	r0, r5, #447	; 0x1bf
    503a:	bl	306c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    503e:	ldr	r3, [r4, #24]
    5040:	ldr	r2, [r4, #16]
    5042:	addw	r0, r5, #451	; 0x1c3
    5046:	ldr	r1, [r4, #0]
    5048:	add	r2, r3
    504a:	subs	r2, #1
    504c:	bl	306c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    5050:	ldrb.w	r3, [r4, #42]	; 0x2a
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5054:	movs	r1, #0
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    5056:	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    505a:	ldr	r3, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    505c:	ldr	r0, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    505e:	str.w	r3, [r5, #454]	; 0x1c6
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
    5062:	ldr	r3, [r4, #24]
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5064:	ldr	r2, [r4, #36]	; 0x24
    5066:	str.w	r3, [r5, #458]	; 0x1ca
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    506a:	movw	r3, #43605	; 0xaa55
    506e:	strh.w	r3, [r5, #510]	; 0x1fe
    5072:	ldr	r3, [r0, #0]
}
    5074:	ldmia.w	sp!, {r4, r5, r6, lr}

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5078:	ldr	r3, [r3, #32]
    507a:	bx	r3

0000507c <FatFormatter::makeFat16()>:
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    507c:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    507e:	mov.w	r3, #256	; 0x100
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    5082:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5084:	ldr	r5, [r0, #36]	; 0x24

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5086:	ldr.w	lr, [r0, #20]
    508a:	ldrb.w	r2, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    508e:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5090:	ldr	r3, [r4, #4]
    5092:	rsb	r1, r3, lr
    5096:	udiv	r1, r1, r2
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    509a:	addw	r6, r1, #257	; 0x101
    509e:	lsrs	r6, r6, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    50a0:	lsls	r0, r6, #1
    50a2:	add.w	r7, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    50a6:	cmp	r3, r7
    50a8:	bcc.n	50c0 <FatFormatter::makeFat16()+0x44>
      m_relativeSectors = m_dataStart - r + BU16;
    50aa:	subs	r3, r3, r7
    50ac:	str	r6, [r4, #8]
    50ae:	add.w	r6, r3, #128	; 0x80
    50b2:	str	r6, [r4, #16]
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    50b4:	subw	r6, r1, #4085	; 0xff5
    50b8:	cmp.w	r6, #61440	; 0xf000
    50bc:	bcs.n	50c6 <FatFormatter::makeFat16()+0x4a>
    50be:	b.n	50d4 <FatFormatter::makeFat16()+0x58>
bool FatFormatter::makeFat16() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    50c0:	adds	r3, #128	; 0x80
    50c2:	str	r3, [r4, #4]
    50c4:	b.n	5090 <FatFormatter::makeFat16()+0x14>
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    50c6:	ldr	r0, [r4, #32]
    50c8:	cmp	r0, #0
    50ca:	beq.n	5172 <FatFormatter::makeFat16()+0xf6>
    50cc:	ldr	r1, [pc, #168]	; (5178 <FatFormatter::makeFat16()+0xfc>)
    50ce:	bl	3e4 <Print::write(char const*)>
    50d2:	b.n	5172 <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    50d4:	adds	r3, #129	; 0x81
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    50d6:	movs	r6, #1
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    50d8:	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    50da:	add.w	r3, r0, #33	; 0x21
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    50de:	strh	r6, [r4, #40]	; 0x28
    m_partType = 0X04;
  } else {
    m_partType = 0X06;
  }
  // write MBR
  if (!writeMbr()) {
    50e0:	mov	r0, r4
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    50e2:	mla	r3, r1, r2, r3
  if (m_totalSectors < 65536) {
    50e6:	cmp.w	r3, #65536	; 0x10000
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    50ea:	str	r3, [r4, #24]
  if (m_totalSectors < 65536) {
    m_partType = 0X04;
    50ec:	ite	cc
    50ee:	movcc	r3, #4
  } else {
    m_partType = 0X06;
    50f0:	movcs	r3, #6
    50f2:	strb.w	r3, [r4, #42]	; 0x2a
  }
  // write MBR
  if (!writeMbr()) {
    50f6:	bl	5020 <FatFormatter::writeMbr()>
    50fa:	cmp	r0, #0
    50fc:	beq.n	5172 <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  initPbs();
    50fe:	mov	r0, r4
    5100:	bl	4fc4 <FatFormatter::initPbs()>
    5104:	mov.w	r3, #512	; 0x200
    5108:	add.w	r2, r5, #53	; 0x35
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    510c:	movs	r1, #32
    510e:	strh.w	r3, [r5, #17]
    5112:	ldr	r3, [r4, #8]
    5114:	strh	r3, [r5, #22]
    return false;
  }
  initPbs();
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5116:	movs	r3, #128	; 0x80
    5118:	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    511c:	movs	r3, #41	; 0x29
    511e:	strb.w	r3, [r5, #38]	; 0x26
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5122:	ldr	r3, [pc, #88]	; (517c <FatFormatter::makeFat16()+0x100>)
    5124:	str.w	r3, [r5, #39]	; 0x27
    5128:	add.w	r3, r5, #42	; 0x2a
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    512c:	strb.w	r1, [r3, #1]!
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    5130:	cmp	r3, r2
    5132:	bne.n	512c <FatFormatter::makeFat16()+0xb0>
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb16.volumeType[0] = 'F';
    5134:	movs	r3, #70	; 0x46
    5136:	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    513a:	movs	r3, #65	; 0x41
    513c:	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    5140:	movs	r3, #84	; 0x54
    5142:	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    5146:	movs	r3, #49	; 0x31
    5148:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    514c:	movs	r3, #54	; 0x36
    514e:	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    5152:	ldr	r0, [r4, #28]
    5154:	ldr	r2, [r4, #36]	; 0x24
    5156:	ldr	r3, [r0, #0]
    5158:	ldr	r1, [r4, #16]
    515a:	ldr	r3, [r3, #32]
    515c:	blx	r3
    515e:	cbz	r0, 5172 <FatFormatter::makeFat16()+0xf6>
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    5160:	ldr	r2, [r4, #4]
    5162:	mov	r0, r4
    5164:	ldr	r3, [r4, #12]
    5166:	movs	r1, #16
    5168:	subs	r2, r2, r3
}
    516a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbs->bpb.bpb16.volumeType[3] = '1';
  pbs->bpb.bpb16.volumeType[4] = '6';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    516e:	b.w	4f1c <FatFormatter::initFatDir(unsigned char, unsigned long)>
}
    5172:	movs	r0, #0
    5174:	pop	{r3, r4, r5, r6, r7, pc}
    5176:	nop
    5178:	.word	0x20001235
    517c:	.word	0x0012d687

00005180 <FatFormatter::makeFat32()>:
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
    5180:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    5182:	mov.w	r3, #8192	; 0x2000
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
    5186:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5188:	ldr	r5, [r0, #36]	; 0x24
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    518a:	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    518c:	mov.w	r3, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5190:	ldrb.w	r1, [r0, #43]	; 0x2b
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    5194:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5196:	ldr	r3, [r0, #20]
    5198:	ldr	r2, [r4, #4]
    519a:	subs	r0, r3, r2
    519c:	udiv	r0, r0, r1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    51a0:	add.w	r6, r0, #129	; 0x81
    51a4:	lsrs	r6, r6, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    51a6:	mov.w	lr, r6, lsl #1
    51aa:	add.w	r7, lr, #8192	; 0x2000
    51ae:	adds	r7, #9
    51b0:	cmp	r2, r7
    51b2:	bcs.n	51bc <FatFormatter::makeFat32()+0x3c>
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    51b4:	add.w	r2, r2, #8192	; 0x2000
    51b8:	str	r2, [r4, #4]
    51ba:	b.n	5198 <FatFormatter::makeFat32()+0x18>
    if (m_dataStart >= r) {
      break;
    }
  }
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    51bc:	movw	r3, #65524	; 0xfff4
    51c0:	str	r6, [r4, #8]
    51c2:	cmp	r0, r3
    51c4:	bhi.n	51d6 <FatFormatter::makeFat32()+0x56>
    writeMsg("Bad cluster count\r\n");
    51c6:	ldr	r0, [r4, #32]
    51c8:	cmp	r0, #0
    51ca:	beq.w	530e <FatFormatter::makeFat32()+0x18e>
    51ce:	ldr	r1, [pc, #324]	; (5314 <FatFormatter::makeFat32()+0x194>)
    51d0:	bl	3e4 <Print::write(char const*)>
    51d4:	b.n	530e <FatFormatter::makeFat32()+0x18e>
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    51d6:	sub.w	r3, r2, #8192	; 0x2000
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    51da:	mla	r2, r0, r1, r2
    m_partType = 0X0B;
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
  }
  if (!writeMbr()) {
    51de:	mov	r0, r4
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    51e0:	rsb	r3, lr, r3
    51e4:	uxth	r3, r3
    51e6:	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    51e8:	add.w	r3, r3, #8192	; 0x2000
    51ec:	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    51ee:	sub.w	r3, r2, #8192	; 0x2000
    51f2:	str	r3, [r4, #24]
  // type depends on address of end sector
  // max CHS has lba = 16450560 = 1024*255*63
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    51f4:	ldr	r3, [pc, #288]	; (5318 <FatFormatter::makeFat32()+0x198>)
    51f6:	cmp	r2, r3
    // FAT32 with CHS and LBA
    m_partType = 0X0B;
    51f8:	ite	ls
    51fa:	movls	r3, #11
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
    51fc:	movhi	r3, #12
    51fe:	strb.w	r3, [r4, #42]	; 0x2a
  }
  if (!writeMbr()) {
    5202:	bl	5020 <FatFormatter::writeMbr()>
    5206:	cmp	r0, #0
    5208:	beq.w	530e <FatFormatter::makeFat32()+0x18e>
    return false;
  }
  initPbs();
    520c:	mov	r0, r4
    520e:	bl	4fc4 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    5212:	ldr	r3, [r4, #8]
    5214:	add.w	r2, r5, #81	; 0x51
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5218:	movs	r1, #32
    521a:	str	r3, [r5, #36]	; 0x24
    521c:	movs	r3, #2
    521e:	str	r3, [r5, #44]	; 0x2c
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5220:	movs	r3, #1
    5222:	strh	r3, [r5, #48]	; 0x30
    5224:	movs	r3, #6
    5226:	strh	r3, [r5, #50]	; 0x32
  initPbs();
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
  setLe32(pbs->bpb.bpb32.fat32RootCluster, 2);
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5228:	movs	r3, #128	; 0x80
    522a:	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    522e:	movs	r3, #41	; 0x29
    5230:	strb.w	r3, [r5, #66]	; 0x42
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5234:	ldr	r3, [pc, #228]	; (531c <FatFormatter::makeFat32()+0x19c>)
    5236:	str.w	r3, [r5, #67]	; 0x43
    523a:	add.w	r3, r5, #70	; 0x46
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    523e:	strb.w	r1, [r3, #1]!
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    5242:	cmp	r3, r2
    5244:	bne.n	523e <FatFormatter::makeFat32()+0xbe>
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb32.volumeType[0] = 'F';
    5246:	movs	r3, #70	; 0x46
    5248:	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    524c:	movs	r3, #65	; 0x41
    524e:	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    5252:	movs	r3, #84	; 0x54
    5254:	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    5258:	movs	r3, #51	; 0x33
    525a:	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    525e:	movs	r3, #50	; 0x32
    5260:	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    5264:	ldr	r0, [r4, #28]
    5266:	ldr	r2, [r4, #36]	; 0x24
    5268:	ldr	r3, [r0, #0]
    526a:	ldr	r1, [r4, #16]
    526c:	ldr	r3, [r3, #32]
    526e:	blx	r3
    5270:	cmp	r0, #0
    5272:	beq.n	530e <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5274:	ldr	r0, [r4, #28]
    5276:	ldr	r1, [r4, #16]
    5278:	ldr	r3, [r0, #0]
    527a:	ldr	r2, [r4, #36]	; 0x24
    527c:	adds	r1, #6
    527e:	ldr	r3, [r3, #32]
    5280:	blx	r3
  pbs->bpb.bpb32.volumeType[0] = 'F';
  pbs->bpb.bpb32.volumeType[1] = 'A';
  pbs->bpb.bpb32.volumeType[2] = 'T';
  pbs->bpb.bpb32.volumeType[3] = '3';
  pbs->bpb.bpb32.volumeType[4] = '2';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    5282:	cmp	r0, #0
    5284:	beq.n	530e <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    5286:	mov.w	r2, #512	; 0x200
    528a:	movs	r1, #0
    528c:	ldr	r0, [r4, #36]	; 0x24
    528e:	bl	8760 <memset>
    5292:	ldr	r3, [pc, #140]	; (5320 <FatFormatter::makeFat32()+0x1a0>)
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    5294:	ldr	r0, [r4, #28]
    5296:	str.w	r3, [r5, #508]	; 0x1fc
    529a:	ldr	r3, [r0, #0]
    529c:	ldr	r1, [r4, #16]
    529e:	ldr	r3, [r3, #32]
    52a0:	ldr	r2, [r4, #36]	; 0x24
    52a2:	adds	r1, #2
    52a4:	blx	r3
    52a6:	cmp	r0, #0
    52a8:	beq.n	530e <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    52aa:	ldr	r0, [r4, #28]
    52ac:	ldr	r1, [r4, #16]
    52ae:	ldr	r3, [r0, #0]
    52b0:	ldr	r2, [r4, #36]	; 0x24
    52b2:	adds	r1, #8
    52b4:	ldr	r3, [r3, #32]
    52b6:	blx	r3
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    52b8:	cbz	r0, 530e <FatFormatter::makeFat32()+0x18e>
    52ba:	ldr	r3, [pc, #104]	; (5324 <FatFormatter::makeFat32()+0x1a4>)
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    52bc:	ldr	r0, [r4, #28]
    52be:	str	r3, [r5, #0]
    52c0:	add.w	r3, r3, #534773760	; 0x1fe00000
    52c4:	ldr	r2, [r4, #36]	; 0x24
    52c6:	add.w	r3, r3, #8192	; 0x2000
    52ca:	adds	r3, #32
    52cc:	str.w	r3, [r5, #484]	; 0x1e4
    52d0:	mov.w	r3, #4294967295
    52d4:	str.w	r3, [r5, #488]	; 0x1e8
    52d8:	str.w	r3, [r5, #492]	; 0x1ec
    52dc:	ldr	r3, [r0, #0]
    52de:	ldr	r1, [r4, #16]
    52e0:	ldr	r3, [r3, #32]
    52e2:	adds	r1, #1
    52e4:	blx	r3
    52e6:	cbz	r0, 530e <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    52e8:	ldr	r0, [r4, #28]
    52ea:	ldr	r1, [r4, #16]
    52ec:	ldr	r3, [r0, #0]
    52ee:	ldr	r2, [r4, #36]	; 0x24
    52f0:	adds	r1, #7
    52f2:	ldr	r3, [r3, #32]
    52f4:	blx	r3
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    52f6:	cbz	r0, 530e <FatFormatter::makeFat32()+0x18e>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    52f8:	ldr	r2, [r4, #8]
    52fa:	mov	r0, r4
    52fc:	ldrb.w	r3, [r4, #43]	; 0x2b
    5300:	movs	r1, #32
    5302:	add.w	r2, r3, r2, lsl #1
}
    5306:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    530a:	b.w	4f1c <FatFormatter::initFatDir(unsigned char, unsigned long)>
}
    530e:	movs	r0, #0
    5310:	pop	{r3, r4, r5, r6, r7, pc}
    5312:	nop
    5314:	.word	0x20001235
    5318:	.word	0x00fb0400
    531c:	.word	0x0012d687
    5320:	.word	0xaa550000
    5324:	.word	0x41615252

00005328 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(str) if (m_pr) m_pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    5328:	push	{r3, r4, r5, lr}
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
    532a:	str	r3, [r0, #32]
#define writeMsg(str) if (m_pr) m_pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    532c:	mov	r4, r0
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    532e:	ldr	r3, [r1, #0]
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
    5330:	str	r1, [r0, #28]
  m_secBuf = secBuf;
    5332:	str	r2, [r0, #36]	; 0x24
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    5334:	mov	r0, r1
    5336:	ldr	r3, [r3, #24]
    5338:	blx	r3
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    533a:	addw	r3, r0, #2047	; 0x7ff
bool FatFormatter::format(BlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    533e:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    5340:	lsrs	r3, r3, #11

  if (m_capacityMB <= 6) {
    5342:	cmp	r3, #6
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    5344:	str	r3, [r4, #0]

  if (m_capacityMB <= 6) {
    5346:	bhi.n	5356 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2e>
    writeMsg("Card is too small.\r\n");
    5348:	ldr	r0, [r4, #32]
    534a:	cbz	r0, 5352 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2a>
    534c:	ldr	r1, [pc, #108]	; (53bc <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x94>)
    534e:	bl	3e4 <Print::write(char const*)>
    return false;
    5352:	movs	r0, #0
    5354:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 16) {
    5356:	cmp	r3, #16
    5358:	bhi.n	535e <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x36>
    m_sectorsPerCluster = 2;
    535a:	movs	r3, #2
    535c:	b.n	538a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 32) {
    535e:	cmp	r3, #32
    5360:	bhi.n	5366 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x3e>
    m_sectorsPerCluster = 4;
    5362:	movs	r3, #4
    5364:	b.n	538a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 64) {
    5366:	cmp	r3, #64	; 0x40
    5368:	bhi.n	536e <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x46>
    m_sectorsPerCluster = 8;
    536a:	movs	r3, #8
    536c:	b.n	538a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 128) {
    536e:	cmp	r3, #128	; 0x80
    5370:	bhi.n	5376 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    m_sectorsPerCluster = 16;
    5372:	movs	r3, #16
    5374:	b.n	538a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 1024) {
    5376:	cmp.w	r3, #1024	; 0x400
    537a:	bhi.n	5380 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x58>
    m_sectorsPerCluster = 32;
    537c:	movs	r3, #32
    537e:	b.n	538a <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x62>
  } else if (m_capacityMB <= 32768) {
    5380:	cmp.w	r3, #32768	; 0x8000
    m_sectorsPerCluster = 64;
    5384:	ite	ls
    5386:	movls	r3, #64	; 0x40
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
    5388:	movhi	r3, #128	; 0x80
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    538a:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 32;
  } else if (m_capacityMB <= 32768) {
    m_sectorsPerCluster = 64;
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
    538e:	strb.w	r3, [r4, #43]	; 0x2b
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5392:	mov	r0, r4
    5394:	bcs.n	539c <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x74>
    5396:	bl	507c <FatFormatter::makeFat16()>
    539a:	b.n	53a0 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x78>
    539c:	bl	5180 <FatFormatter::makeFat32()>
    53a0:	mov	r5, r0
    53a2:	ldr	r0, [r4, #32]
  if (rtn) {
    53a4:	cbz	r5, 53b0 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x88>
    writeMsg("Format Done\r\n");
    53a6:	cbz	r0, 53b8 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x90>
    53a8:	ldr	r1, [pc, #20]	; (53c0 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x98>)
    53aa:	bl	3e4 <Print::write(char const*)>
    53ae:	b.n	53b8 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else {
    writeMsg("Format Failed\r\n");
    53b0:	cmp	r0, #0
    53b2:	beq.n	5352 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x2a>
    53b4:	ldr	r1, [pc, #12]	; (53c4 <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x9c>)
    53b6:	b.n	534e <FatFormatter::format(BlockDeviceInterface*, unsigned char*, Print*)+0x26>
    53b8:	movs	r0, #1
  }
  return rtn;
}
    53ba:	pop	{r3, r4, r5, pc}
    53bc:	.word	0x20001249
    53c0:	.word	0x2000125e
    53c4:	.word	0x2000126c

000053c8 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    53c8:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    53ca:	lsls	r1, r1, #5

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    53cc:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    53ce:	bl	58be <FatFile::seekSet(unsigned long)>
    53d2:	cbz	r0, 53e0 <FatFile::cacheDir(unsigned short)+0x18>
    53d4:	mov	r0, r4
    53d6:	movs	r1, #0
  }
    53d8:	ldmia.w	sp!, {r4, lr}
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    53dc:	b.w	5884 <FatFile::readDirCache(bool)>
  }
    53e0:	pop	{r4, pc}

000053e2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "FatFile.h"
#include "FatVolume.h"

//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    53e2:	cmp	r2, #4
    53e4:	bhi.n	53f0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    53e6:	add.w	r1, r1, r2, lsl #1
    53ea:	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    53ee:	bx	lr
  } else if (i < 11) {
    53f0:	cmp	r2, #10
    53f2:	bhi.n	53fc <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    53f4:	add.w	r1, r1, r2, lsl #1
    53f8:	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    53fa:	bx	lr
  } else if (i < 13) {
    53fc:	cmp	r2, #12
    53fe:	itte	ls
    5400:	addls.w	r1, r1, r2, lsl #1
    5404:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    5406:	movhi	r0, #0
}
    5408:	bx	lr

0000540a <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    540a:	push	{r3, r4, r5, r6, r7, lr}
    540c:	mov	r6, r1
    540e:	ldrb	r1, [r0, #0]
    5410:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    5412:	cbz	r1, 548a <FatFile::getSFN(char*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    5414:	ands.w	r4, r1, #96	; 0x60
    5418:	beq.n	542a <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    541a:	cmp	r2, #1
    541c:	bls.n	548a <FatFile::getSFN(char*, unsigned int)+0x80>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    541e:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    5420:	movs	r0, #1
  if (isRoot()) {
    if (size < 2) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5422:	strb	r3, [r6, #0]
    name[1] = '\0';
    5424:	movs	r3, #0
    5426:	strb	r3, [r6, #1]
    return 1;
    5428:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    542a:	mov	r1, r4
    542c:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5430:	cbz	r0, 548a <FatFile::getSFN(char*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    5432:	mov	r5, r0
    5434:	mov	r1, r4
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5436:	movs	r2, #8
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
    5438:	mov	r3, r4
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
    543a:	cmp	r1, #8
    543c:	ldrb	r4, [r5, #0]
    543e:	bne.n	544a <FatFile::getSFN(char*, unsigned int)+0x40>
      if (*ptr == ' ') {
    5440:	cmp	r4, #32
    5442:	beq.n	5482 <FatFile::getSFN(char*, unsigned int)+0x78>
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    5444:	movs	r2, #16
      c = '.';
    5446:	movs	r4, #46	; 0x2e
    5448:	b.n	546a <FatFile::getSFN(char*, unsigned int)+0x60>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    544a:	sub.w	lr, r4, #65	; 0x41
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
      c = '.';
    } else {
      c = *ptr++;
    544e:	adds	r5, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5450:	cmp.w	lr, #25
    5454:	bhi.n	5466 <FatFile::getSFN(char*, unsigned int)+0x5c>
    5456:	ldrb.w	lr, [r0, #12]
    545a:	tst.w	r2, lr
    545e:	beq.n	546a <FatFile::getSFN(char*, unsigned int)+0x60>
        c += 'a' - 'A';
    5460:	adds	r4, #32
    5462:	uxtb	r4, r4
    5464:	b.n	546a <FatFile::getSFN(char*, unsigned int)+0x60>
      }
      if (c == ' ') {
    5466:	cmp	r4, #32
    5468:	beq.n	547c <FatFile::getSFN(char*, unsigned int)+0x72>
        continue;
      }
    }
    if ((j + 1u) == size) {
    546a:	add.w	lr, r3, #1
    546e:	mov	ip, r3
    5470:	cmp	r7, lr
    5472:	beq.n	5482 <FatFile::getSFN(char*, unsigned int)+0x78>
      break;
    }
    name[j++] = c;
    5474:	uxtb.w	r3, lr
    5478:	strb.w	r4, [r6, ip]
    547c:	adds	r1, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    547e:	cmp	r1, #12
    5480:	bne.n	543a <FatFile::getSFN(char*, unsigned int)+0x30>
    if ((j + 1u) == size) {
      break;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    5482:	movs	r2, #0
  return j;
    5484:	mov	r0, r3
    if ((j + 1u) == size) {
      break;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    5486:	strb	r2, [r6, r3]
  return j;
    5488:	pop	{r3, r4, r5, r6, r7, pc}

 fail:
  name[0] = '\0';
    548a:	movs	r0, #0
    548c:	strb	r0, [r6, #0]
  return 0;
}
    548e:	pop	{r3, r4, r5, r6, r7, pc}

00005490 <FatFile::getName8(char*, unsigned int)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    5490:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    5494:	movs	r4, #0
    5496:	sub	sp, #44	; 0x2c
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5498:	ldrb	r3, [r0, #0]
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    549a:	mov	r7, r0
    549c:	mov	r9, r1
    549e:	mov	r8, r2
    54a0:	strb.w	r4, [sp, #4]
    54a4:	strb.w	r4, [sp, #5]
    54a8:	strb.w	r4, [sp, #6]
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    54ac:	cmp	r3, #0
    54ae:	beq.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  if (!isLFN()) {
    54b0:	ldrb	r3, [r0, #3]
    54b2:	cbnz	r3, 54ba <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    54b4:	bl	540a <FatFile::getSFN(char*, unsigned int)>
    54b8:	b.n	5576 <FatFile::getName8(char*, unsigned int)+0xe6>
  }
  if (!dir.openCluster(this)) {
    54ba:	mov	r1, r0
    54bc:	add	r0, sp, #4
    54be:	bl	56ba <FatFile::openCluster(FatFile*)>
    54c2:	cmp	r0, #0
    54c4:	beq.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    54c6:	add.w	r8, r8, #4294967295
    54ca:	mov	r5, r9
    54cc:	movs	r6, #1
    54ce:	add	r8, r9
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    54d0:	ldrb	r3, [r7, #3]
    54d2:	cmp	r3, r6
    54d4:	bcc.n	5566 <FatFile::getName8(char*, unsigned int)+0xd6>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    54d6:	ldrh	r1, [r7, #4]
    54d8:	add	r0, sp, #4
    54da:	subs	r1, r1, r6
    54dc:	uxth	r1, r1
    54de:	bl	53c8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    54e2:	mov	fp, r0
    54e4:	cmp	r0, #0
    54e6:	beq.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    54e8:	ldrb	r3, [r0, #11]
    54ea:	cmp	r3, #15
    54ec:	bne.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
    54ee:	ldrb	r3, [r0, #0]
    54f0:	and.w	r3, r3, #31
    54f4:	cmp	r6, r3
    54f6:	bne.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
    54f8:	mov	r3, r4
    54fa:	mov.w	sl, #0
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t c = getLfnChar(ldir, i);
    54fe:	uxtb.w	r2, sl
    5502:	mov	r1, fp
    5504:	mov	r0, r7
    5506:	bl	53e2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    550a:	mov	r4, r0
      if (hs) {
    550c:	cbz	r3, 552c <FatFile::getName8(char*, unsigned int)+0x9c>
        if (!FsUtf::isLowSurrogate(c)) {
    550e:	add.w	r2, r0, #9216	; 0x2400
    5512:	uxth	r2, r2
    5514:	cmp.w	r2, #1024	; 0x400
    5518:	bcs.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    551a:	lsls	r3, r3, #10
    551c:	ldr	r0, [pc, #92]	; (557c <FatFile::getName8(char*, unsigned int)+0xec>)
    551e:	ubfx	r4, r4, #0, #10
    5522:	ands	r0, r3
    5524:	orrs	r4, r0
    5526:	add.w	r0, r4, #65536	; 0x10000
    552a:	b.n	5544 <FatFile::getName8(char*, unsigned int)+0xb4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    552c:	add.w	r3, r0, #10240	; 0x2800
    5530:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    5532:	cmp.w	r3, #2048	; 0x800
    5536:	bcc.n	553c <FatFile::getName8(char*, unsigned int)+0xac>
        if (c == 0) {
    5538:	cbnz	r0, 5544 <FatFile::getName8(char*, unsigned int)+0xb4>
    553a:	b.n	5566 <FatFile::getName8(char*, unsigned int)+0xd6>
          goto done;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
    553c:	cmp.w	r3, #1024	; 0x400
    5540:	bcc.n	5552 <FatFile::getName8(char*, unsigned int)+0xc2>
    5542:	b.n	5570 <FatFile::getName8(char*, unsigned int)+0xe0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5544:	mov	r2, r8
    5546:	mov	r1, r5
    5548:	bl	2da8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    554c:	cbz	r0, 5566 <FatFile::getName8(char*, unsigned int)+0xd6>
    554e:	mov	r5, r0
    5550:	movs	r4, #0
    5552:	add.w	sl, sl, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
    5556:	cmp.w	sl, #13
    555a:	beq.n	5560 <FatFile::getName8(char*, unsigned int)+0xd0>
    555c:	mov	r3, r4
    555e:	b.n	54fe <FatFile::getName8(char*, unsigned int)+0x6e>
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5560:	adds	r6, #1
    5562:	uxtb	r6, r6
    5564:	b.n	54d0 <FatFile::getName8(char*, unsigned int)+0x40>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5566:	movs	r3, #0
  return str - name;
    5568:	rsb	r0, r9, r5
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    556c:	strb	r3, [r5, #0]
  return str - name;
    556e:	b.n	5576 <FatFile::getName8(char*, unsigned int)+0xe6>

 fail:
  *name = 0;
    5570:	movs	r0, #0
    5572:	strb.w	r0, [r9]
  return 0;
}
    5576:	add	sp, #44	; 0x2c
    5578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    557c:	.word	0x000ffc00

00005580 <FatFile::getName(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::getName(char* name, size_t size) {
#if !USE_LONG_FILE_NAMES
  return getSFN(name, size);
#elif USE_UTF8_LONG_NAMES
  return getName8(name, size);
    5580:	b.w	5490 <FatFile::getName8(char*, unsigned int)>

00005584 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    5584:	push	{r4, lr}
    5586:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5588:	adds	r0, #40	; 0x28
    558a:	bl	30fa <FsCache::sync()>
    558e:	cbz	r0, 55a6 <FatPartition::cacheSync()+0x22>
    5590:	add.w	r0, r4, #568	; 0x238
    5594:	bl	30fa <FsCache::sync()>
    5598:	cbz	r0, 55a6 <FatPartition::cacheSync()+0x22>
    559a:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    559c:	ldr	r3, [r0, #0]
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
  }
    559e:	ldmia.w	sp!, {r4, lr}
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    55a2:	ldr	r3, [r3, #28]
    55a4:	bx	r3
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
  }
    55a6:	movs	r0, #0
    55a8:	pop	{r4, pc}

000055aa <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    55aa:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    55ac:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    55ae:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    55b2:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    55b4:	ldr	r0, [r0, #8]
    55b6:	mov	r1, r5
    55b8:	bl	642e <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    55bc:	cbz	r0, 55de <FatFile::addCluster()+0x34>
    55be:	ldrb	r3, [r4, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    55c0:	cbnz	r5, 55c8 <FatFile::addCluster()+0x1e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    55c2:	orr.w	r3, r3, #64	; 0x40
    55c6:	b.n	55d4 <FatFile::addCluster()+0x2a>
  } else if (m_curCluster != (cc + 1)) {
    55c8:	adds	r5, #1
    55ca:	ldr	r2, [r4, #16]
    55cc:	cmp	r2, r5
    55ce:	beq.n	55d6 <FatFile::addCluster()+0x2c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    55d0:	bic.w	r3, r3, #64	; 0x40
    55d4:	strb	r3, [r4, #2]
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    55d6:	ldrb	r3, [r4, #2]
    55d8:	orn	r3, r3, #127	; 0x7f
    55dc:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    55de:	pop	{r3, r4, r5, pc}

000055e0 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    55e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    55e4:	ldrb	r3, [r0, #0]
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    55e6:	mov	r4, r0
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    55e8:	and.w	r3, r3, #32
    55ec:	and.w	r5, r3, #255	; 0xff
    55f0:	cbz	r3, 55f6 <FatFile::addDirCluster()+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    55f2:	movs	r6, #0
    55f4:	b.n	5662 <FatFile::addDirCluster()+0x82>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    55f6:	ldr	r2, [r0, #20]
    55f8:	ldr	r3, [pc, #108]	; (5668 <FatFile::addDirCluster()+0x88>)
    55fa:	cmp	r2, r3
    55fc:	bhi.n	55f2 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    55fe:	bl	55aa <FatFile::addCluster()>
    5602:	mov	r6, r0
    5604:	cmp	r0, #0
    5606:	beq.n	55f2 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5608:	ldr	r0, [r4, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    560a:	movs	r2, #5
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    560c:	ldr	r1, [r4, #16]
    560e:	ldrb	r3, [r0, #6]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5610:	adds	r0, #40	; 0x28
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5612:	subs	r1, #2
    5614:	ldr.w	r7, [r0, #-20]
    5618:	lsls	r1, r3
    561a:	add	r7, r1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    561c:	mov	r1, r7
    561e:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5622:	mov	r8, r0
    5624:	cmp	r0, #0
    5626:	beq.n	55f2 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5628:	mov	r1, r5
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    562a:	movs	r5, #1
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    562c:	mov.w	r2, #512	; 0x200
    5630:	bl	8760 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5634:	ldr	r3, [r4, #8]
    5636:	ldrb	r2, [r3, #4]
    5638:	cmp	r2, r5
    563a:	bls.n	5652 <FatFile::addDirCluster()+0x72>
    563c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    563e:	mov	r2, r8
    5640:	adds	r1, r5, r7
    5642:	ldr	r3, [r0, #0]
    5644:	ldr	r3, [r3, #32]
    5646:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5648:	cmp	r0, #0
    564a:	beq.n	55f2 <FatFile::addDirCluster()+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    564c:	adds	r5, #1
    564e:	uxtb	r5, r5
    5650:	b.n	5634 <FatFile::addDirCluster()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5652:	ldrb	r2, [r3, #6]
    5654:	mov.w	r3, #512	; 0x200
    5658:	lsls	r3, r2
    565a:	ldr	r2, [r4, #20]
    565c:	uxtah	r3, r2, r3
    5660:	str	r3, [r4, #20]
  return true;

 fail:
  return false;
}
    5662:	mov	r0, r6
    5664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5668:	.word	0x001ffdff

0000566c <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    566c:	push	{r4, lr}
    566e:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5670:	ldr	r0, [r0, #8]
    5672:	mov	r2, r1
    5674:	adds	r0, #40	; 0x28
    5676:	ldr	r1, [r4, #24]
    5678:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    567c:	cbz	r0, 5688 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    567e:	ldrh	r3, [r4, #4]
    5680:	and.w	r3, r3, #15
    5684:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    5688:	pop	{r4, pc}

0000568a <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    568a:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    568c:	ldrb	r4, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    568e:	mov	r5, r0
    5690:	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
    5692:	cbnz	r4, 56b6 <FatFile::openRoot(FatVolume*)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5694:	movs	r2, #36	; 0x24
    5696:	mov	r1, r4
    5698:	bl	8760 <memset>

  m_vol = vol;
    569c:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    569e:	ldrb	r3, [r6, #7]
    56a0:	cmp	r3, #16
    56a2:	beq.n	56ac <FatFile::openRoot(FatVolume*)+0x22>
    56a4:	cmp	r3, #32
    56a6:	bne.n	56b6 <FatFile::openRoot(FatVolume*)+0x2c>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    56a8:	movs	r3, #64	; 0x40
    56aa:	b.n	56ae <FatFile::openRoot(FatVolume*)+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    56ac:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    56ae:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    56b0:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    56b2:	strb	r0, [r5, #2]
    56b4:	pop	{r4, r5, r6, pc}
  return true;

 fail:
  return false;
    56b6:	movs	r0, #0
    56b8:	pop	{r4, r5, r6, pc}

000056ba <FatFile::openCluster(FatFile*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    56ba:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    56bc:	ldr	r3, [r1, #12]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    56be:	mov	r4, r0
    56c0:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    56c2:	cbnz	r3, 56ce <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    56c4:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    56c6:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    56ca:	b.w	568a <FatFile::openRoot(FatVolume*)>
  }
  memset(this, 0, sizeof(FatFile));
    56ce:	movs	r2, #36	; 0x24
    56d0:	movs	r1, #0
    56d2:	bl	8760 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    56d6:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    56d8:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    56da:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    56dc:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    56de:	ldr	r3, [r5, #8]
    56e0:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    56e2:	ldr	r3, [r5, #12]
    56e4:	str	r3, [r4, #32]
  return true;
}
    56e6:	pop	{r3, r4, r5, pc}

000056e8 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    56e8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    56ec:	ldrb	r3, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    56ee:	mov	r4, r0
    56f0:	mov	r9, r1
    56f2:	mov	r6, r2
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    56f4:	lsls	r5, r3, #31
    56f6:	bpl.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
    56f8:	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    56fa:	lsls	r0, r3, #28
    56fc:	bpl.n	5706 <FatFile::read(void*, unsigned int)+0x1e>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    56fe:	ldr	r3, [r4, #28]
    5700:	ldr	r2, [r4, #20]
    5702:	subs	r3, r3, r2
    5704:	b.n	5716 <FatFile::read(void*, unsigned int)+0x2e>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5706:	lsls	r1, r3, #26
    5708:	bpl.n	571c <FatFile::read(void*, unsigned int)+0x34>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    570a:	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
    570c:	ldrh	r2, [r3, #8]
    570e:	ldr	r3, [r4, #20]
    5710:	rsb	r3, r3, r2, lsl #5
    5714:	uxth	r3, r3
    5716:	cmp	r6, r3
    5718:	it	cs
    571a:	movcs	r6, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
    571c:	mov	r7, r6
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t sectorOfCluster = 0;
    571e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5722:	add.w	sl, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5726:	cmp	r7, #0
    5728:	beq.n	57ae <FatFile::read(void*, unsigned int)+0xc6>
    572a:	ldrb	r3, [r4, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    572c:	ldr	r2, [r4, #20]
    if (isRootFixed()) {
    572e:	tst.w	r3, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5732:	ldr	r0, [r4, #8]
    5734:	ubfx	r5, r2, #0, #9
    5738:	mov.w	r1, r2, lsr #9
    if (isRootFixed()) {
    573c:	beq.n	5744 <FatFile::read(void*, unsigned int)+0x5c>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    573e:	ldr	r3, [r0, #32]
    5740:	add	r1, r3
    5742:	b.n	578e <FatFile::read(void*, unsigned int)+0xa6>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5744:	ldrb.w	r8, [r0, #5]
    5748:	and.w	r8, r1, r8
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    574c:	cbnz	r5, 577e <FatFile::read(void*, unsigned int)+0x96>
    574e:	cmp.w	r8, #0
    5752:	bne.n	577e <FatFile::read(void*, unsigned int)+0x96>
        // start of new cluster
        if (m_curPosition == 0) {
    5754:	cbnz	r2, 5760 <FatFile::read(void*, unsigned int)+0x78>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5756:	lsls	r2, r3, #25
    5758:	ite	mi
    575a:	ldrmi	r3, [r0, #32]
    575c:	ldrpl	r3, [r4, #32]
    575e:	b.n	57f4 <FatFile::read(void*, unsigned int)+0x10c>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5760:	lsls	r3, r3, #28
    5762:	bpl.n	5770 <FatFile::read(void*, unsigned int)+0x88>
    5764:	ldrb	r3, [r4, #2]
    5766:	lsls	r1, r3, #25
    5768:	bpl.n	5770 <FatFile::read(void*, unsigned int)+0x88>
          m_curCluster++;
    576a:	ldr	r3, [r4, #16]
    576c:	adds	r3, #1
    576e:	b.n	57f4 <FatFile::read(void*, unsigned int)+0x10c>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5770:	mov	r2, sl
    5772:	ldr	r1, [r4, #16]
    5774:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5778:	cmp	r0, #0
    577a:	blt.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    577c:	beq.n	57a6 <FatFile::read(void*, unsigned int)+0xbe>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    577e:	ldr	r3, [r4, #8]
    5780:	ldr	r1, [r4, #16]
    5782:	ldrb	r2, [r3, #6]
    5784:	subs	r1, #2
    5786:	ldr	r3, [r3, #20]
    5788:	lsls	r1, r2
    578a:	add	r1, r3
    578c:	add	r1, r8
    578e:	ldr.w	fp, [r4, #8]
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5792:	cmp	r5, #0
    5794:	bne.n	5834 <FatFile::read(void*, unsigned int)+0x14c>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5796:	cmp.w	r7, #512	; 0x200
    579a:	bcc.n	5834 <FatFile::read(void*, unsigned int)+0x14c>
    579c:	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    57a0:	cmp	r1, r3
    57a2:	bne.n	57b2 <FatFile::read(void*, unsigned int)+0xca>
    57a4:	b.n	5834 <FatFile::read(void*, unsigned int)+0x14c>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    57a6:	ldrb	r3, [r4, #0]
    57a8:	tst.w	r3, #112	; 0x70
    57ac:	beq.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    57ae:	subs	r0, r6, r7
    57b0:	b.n	5858 <FatFile::read(void*, unsigned int)+0x170>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    57b2:	cmp.w	r7, #1024	; 0x400
    57b6:	bcc.n	5812 <FatFile::read(void*, unsigned int)+0x12a>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    57b8:	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    57ba:	lsrs	r5, r7, #9
      if (!isRootFixed()) {
    57bc:	lsls	r2, r2, #26
    57be:	bmi.n	57ce <FatFile::read(void*, unsigned int)+0xe6>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    57c0:	ldrb.w	r2, [fp, #4]
    57c4:	rsb	r2, r8, r2
    57c8:	cmp	r5, r2
    57ca:	it	cs
    57cc:	movcs	r5, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    57ce:	cmp	r1, r3
    57d0:	bhi.n	57f8 <FatFile::read(void*, unsigned int)+0x110>
    57d2:	adds	r2, r1, r5
    57d4:	cmp	r3, r2
    57d6:	bcs.n	57f8 <FatFile::read(void*, unsigned int)+0x110>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    57d8:	add.w	r0, fp, #40	; 0x28
    57dc:	str	r1, [sp, #4]
    57de:	bl	30fa <FsCache::sync()>
    57e2:	ldr	r1, [sp, #4]
    57e4:	cbnz	r0, 57f8 <FatFile::read(void*, unsigned int)+0x110>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    57e6:	ldrb	r3, [r4, #1]
  return -1;
    57e8:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    57ec:	orr.w	r3, r3, #2
    57f0:	strb	r3, [r4, #1]
  return -1;
    57f2:	b.n	5858 <FatFile::read(void*, unsigned int)+0x170>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    57f4:	str	r3, [r4, #16]
    57f6:	b.n	577e <FatFile::read(void*, unsigned int)+0x96>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    57f8:	ldr.w	r0, [fp, #44]	; 0x2c
    57fc:	mov	r2, r9
    57fe:	ldr	r3, [r0, #0]
    5800:	ldr.w	fp, [r3, #16]
    5804:	mov	r3, r5
    5806:	blx	fp
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5808:	cmp	r0, #0
    580a:	beq.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    580c:	mov.w	fp, r5, lsl #9
    5810:	b.n	5826 <FatFile::read(void*, unsigned int)+0x13e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    5812:	ldr.w	r0, [fp, #44]	; 0x2c
    5816:	mov	r2, r9
    5818:	ldr	r3, [r0, #0]
    581a:	ldr	r3, [r3, #12]
    581c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    581e:	cmp	r0, #0
    5820:	beq.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5822:	mov.w	fp, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5826:	ldr	r3, [r4, #20]
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5828:	add	r9, fp
    m_curPosition += n;
    toRead -= n;
    582a:	rsb	r7, fp, r7
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    582e:	add	r3, fp
    5830:	str	r3, [r4, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5832:	b.n	5726 <FatFile::read(void*, unsigned int)+0x3e>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5834:	movs	r2, #0
    5836:	add.w	r0, fp, #40	; 0x28
    583a:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    583e:	cmp	r0, #0
    5840:	beq.n	57e6 <FatFile::read(void*, unsigned int)+0xfe>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5842:	rsb	fp, r5, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5846:	adds	r1, r0, r5
    5848:	mov	r0, r9
    584a:	cmp	fp, r7
    584c:	it	cs
    584e:	movcs	fp, r7
    5850:	mov	r2, fp
    5852:	bl	87a4 <memcpy>
    5856:	b.n	5826 <FatFile::read(void*, unsigned int)+0x13e>
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5858:	add	sp, #12
    585a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000585e <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    585e:	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5860:	movs	r2, #1
    5862:	add.w	r1, sp, #7
    5866:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5868:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    586a:	ldr	r5, [r0, #16]
    586c:	bl	56e8 <FatFile::read(void*, unsigned int)>
    5870:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    5872:	str	r6, [r4, #20]
  m_curCluster = curCluster;
    5874:	str	r5, [r4, #16]
    5876:	ite	eq
    5878:	ldrbeq.w	r0, [sp, #7]
    587c:	movne.w	r0, #4294967295
  return c;
}
    5880:	add	sp, #8
    5882:	pop	{r4, r5, r6, pc}

00005884 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5884:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5886:	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5888:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    588c:	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    588e:	cbz	r5, 5892 <FatFile::readDirCache(bool)+0xe>
    5890:	cbnz	r1, 58ae <FatFile::readDirCache(bool)+0x2a>
    int8_t n = read(&n, 1);
    5892:	movs	r2, #1
    5894:	add.w	r1, sp, #7
    5898:	mov	r0, r4
    589a:	bl	56e8 <FatFile::read(void*, unsigned int)>
    589e:	sxtb	r0, r0
    if  (n != 1) {
    58a0:	cmp	r0, #1
    58a2:	beq.n	58a8 <FatFile::readDirCache(bool)+0x24>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    58a4:	movs	r0, #0
    58a6:	b.n	58ba <FatFile::readDirCache(bool)+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    58a8:	ldr	r3, [r4, #20]
    58aa:	adds	r3, #31
    58ac:	b.n	58b0 <FatFile::readDirCache(bool)+0x2c>
  } else {
    m_curPosition += 32;
    58ae:	adds	r3, #32
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    58b0:	ldr	r0, [r4, #8]
    58b2:	str	r3, [r4, #20]
    58b4:	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    58b6:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    58ba:	add	sp, #12
    58bc:	pop	{r4, r5, pc}

000058be <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    58be:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58c2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    58c4:	ldr	r7, [r0, #16]
    58c6:	ldrb	r0, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    58c8:	mov	r6, r1
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    58ca:	cmp	r0, #0
    58cc:	beq.n	595c <FatFile::seekSet(unsigned long)+0x9e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    58ce:	ldr	r5, [r4, #20]
    58d0:	cmp	r5, r1
    58d2:	beq.n	5964 <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    58d4:	cbnz	r1, 58da <FatFile::seekSet(unsigned long)+0x1c>
    // set position to start of file
    m_curCluster = 0;
    58d6:	str	r1, [r4, #16]
    goto done;
    58d8:	b.n	5950 <FatFile::seekSet(unsigned long)+0x92>
  }
  if (isFile()) {
    58da:	lsls	r2, r0, #28
    58dc:	bpl.n	58e6 <FatFile::seekSet(unsigned long)+0x28>
    if (pos > m_fileSize) {
    58de:	ldr	r3, [r4, #28]
    58e0:	cmp	r1, r3
    58e2:	bhi.n	595c <FatFile::seekSet(unsigned long)+0x9e>
    58e4:	b.n	58f6 <FatFile::seekSet(unsigned long)+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    58e6:	lsls	r3, r0, #26
    58e8:	bpl.n	58f6 <FatFile::seekSet(unsigned long)+0x38>
    58ea:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    58ec:	ldrh	r3, [r3, #8]
    58ee:	cmp.w	r1, r3, lsl #5
    58f2:	bhi.n	595c <FatFile::seekSet(unsigned long)+0x9e>
    58f4:	b.n	5950 <FatFile::seekSet(unsigned long)+0x92>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    58f6:	ldr.w	lr, [r4, #8]
    58fa:	subs	r3, r6, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    58fc:	ldrb	r1, [r4, #2]
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    58fe:	ldrb.w	r2, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5902:	lsls	r1, r1, #25
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5904:	add.w	r2, r2, #9
    5908:	uxtb	r2, r2
    590a:	lsr.w	r3, r3, r2
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    590e:	bpl.n	5918 <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = m_firstCluster + nNew;
    5910:	ldr	r2, [r4, #32]
    5912:	add	r3, r2
    5914:	str	r3, [r4, #16]
    goto done;
    5916:	b.n	5950 <FatFile::seekSet(unsigned long)+0x92>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5918:	subs	r1, r5, #1
    591a:	lsr.w	r2, r1, r2

  if (nNew < nCur || m_curPosition == 0) {
    591e:	cmp	r3, r2
    5920:	bcc.n	5924 <FatFile::seekSet(unsigned long)+0x66>
    5922:	cbnz	r5, 5938 <FatFile::seekSet(unsigned long)+0x7a>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5924:	lsls	r2, r0, #25
    5926:	ite	mi
    5928:	ldrmi.w	r2, [lr, #32]
    592c:	ldrpl	r2, [r4, #32]
    592e:	str	r2, [r4, #16]
    5930:	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5932:	add.w	r8, r4, #16
    5936:	b.n	594c <FatFile::seekSet(unsigned long)+0x8e>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5938:	subs	r3, r3, r2
    593a:	b.n	5930 <FatFile::seekSet(unsigned long)+0x72>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    593c:	mov	r2, r8
    593e:	ldr	r1, [r4, #16]
    5940:	ldr	r0, [r4, #8]
    5942:	subs	r5, #1
    5944:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5948:	cmp	r0, #0
    594a:	ble.n	595c <FatFile::seekSet(unsigned long)+0x9e>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    594c:	cmp	r5, #0
    594e:	bne.n	593c <FatFile::seekSet(unsigned long)+0x7e>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5950:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5952:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5954:	bic.w	r3, r3, #32
    5958:	strb	r3, [r4, #2]
    595a:	b.n	5964 <FatFile::seekSet(unsigned long)+0xa6>
  return true;

 fail:
  m_curCluster = tmp;
    595c:	str	r7, [r4, #16]
  return false;
    595e:	movs	r0, #0
    5960:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5964:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    5966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000596a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    596a:	push	{r3, r4, r5, r6, r7, lr}
    596c:	mov	r7, r1
    596e:	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5970:	movs	r1, #0
    5972:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5974:	mov	r4, r0
    5976:	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5978:	bl	8760 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    597c:	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
    597e:	strh	r6, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5980:	and.w	r6, r6, #15
    5984:	add.w	r2, r0, #56	; 0x38
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5988:	ldr	r3, [r7, #32]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    598a:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    598c:	add.w	r2, r2, r6, lsl #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5990:	str	r3, [r4, #12]
    5992:	ldrb	r1, [r2, #11]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5994:	lsls	r6, r1, #28
    5996:	bmi.n	5a18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5998:	and.w	r1, r1, #23
    599c:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    599e:	ldrb	r3, [r2, #11]
    59a0:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    59a4:	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    59a8:	it	eq
    59aa:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
    59ae:	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
    59b0:	and.w	r3, r5, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    59b4:	it	eq
    59b6:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    59b8:	cmp	r3, #1
    59ba:	beq.n	59ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    59bc:	cmp	r3, #2
    59be:	beq.n	59ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
    59c0:	cbnz	r3, 5a18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    59c2:	lsls	r3, r5, #21
    59c4:	bmi.n	5a18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = FILE_FLAG_READ;
    59c6:	movs	r3, #1
    59c8:	b.n	59d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    59ca:	movs	r3, #3
    59cc:	b.n	59d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    59ce:	movs	r3, #2
    59d0:	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    59d2:	ldrb	r3, [r4, #2]
    59d4:	lsls	r7, r3, #30
    59d6:	bpl.n	59e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x76>
    if (isSubDir() || isReadOnly()) {
    59d8:	ldrb	r1, [r4, #0]
    59da:	tst.w	r1, #17
    59de:	bne.n	5a18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    59e0:	and.w	r1, r5, #8

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    59e4:	lsls	r6, r5, #21
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    59e6:	orr.w	r3, r3, r1
    59ea:	strb	r3, [r4, #2]
    59ec:	ldr	r3, [r0, #52]	; 0x34

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    59ee:	ldrh	r1, [r2, #20]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    59f0:	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    59f2:	ldrh	r3, [r2, #26]
    59f4:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    59f8:	bpl.n	5a04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    59fa:	cbz	r1, 5a20 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    59fc:	bl	64ae <FatPartition::freeChain(unsigned long)>
    5a00:	cbnz	r0, 5a20 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    5a02:	b.n	5a18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5a04:	str	r1, [r4, #32]
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5a06:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5a08:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5a0a:	lsls	r3, r5, #17
    5a0c:	bpl.n	5a2a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
    5a0e:	ldr	r1, [r4, #28]
    5a10:	mov	r0, r4
    5a12:	bl	58be <FatFile::seekSet(unsigned long)>
    5a16:	cbnz	r0, 5a2a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    5a18:	movs	r0, #0
    5a1a:	strb	r0, [r4, #0]
  m_flags = 0;
    5a1c:	strb	r0, [r4, #2]
  return false;
    5a1e:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5a20:	ldrb	r3, [r4, #2]
    5a22:	orn	r3, r3, #127	; 0x7f
    5a26:	strb	r3, [r4, #2]
    5a28:	b.n	5a0a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5a2a:	movs	r0, #1

 fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
    5a2c:	pop	{r3, r4, r5, r6, r7, pc}

00005a2e <FatFile::openNext(FatFile*, int)>:
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5a2e:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5a32:	ldrb	r3, [r0, #0]
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5a34:	mov	r6, r0
    5a36:	mov	r5, r1
    5a38:	mov	r9, r2
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5a3a:	cbnz	r3, 5aac <FatFile::openNext(FatFile*, int)+0x7e>
    5a3c:	ldrb	r3, [r1, #0]
    5a3e:	tst.w	r3, #112	; 0x70
    5a42:	beq.n	5aac <FatFile::openNext(FatFile*, int)+0x7e>
    5a44:	ldr	r4, [r1, #20]
    5a46:	ands.w	r4, r4, #31
    5a4a:	bne.n	5aac <FatFile::openNext(FatFile*, int)+0x7e>
    5a4c:	mov	r7, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    5a4e:	movs	r1, #0
    5a50:	mov	r0, r5
    5a52:	ldr.w	r8, [r5, #20]
    5a56:	bl	5884 <FatFile::readDirCache(bool)>
    if (!dir) {
    5a5a:	cbz	r0, 5aac <FatFile::openNext(FatFile*, int)+0x7e>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5a5c:	ldrb	r3, [r0, #0]
    5a5e:	cbz	r3, 5aac <FatFile::openNext(FatFile*, int)+0x7e>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5a60:	cmp	r3, #46	; 0x2e
    5a62:	bne.n	5a68 <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5a64:	movs	r4, #0
    5a66:	b.n	5a4e <FatFile::openNext(FatFile*, int)+0x20>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5a68:	cmp	r3, #229	; 0xe5
    5a6a:	beq.n	5a64 <FatFile::openNext(FatFile*, int)+0x36>
    5a6c:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    5a6e:	and.w	lr, r2, #8
    5a72:	and.w	r1, lr, #255	; 0xff
    5a76:	cmp.w	lr, #0
    5a7a:	bne.n	5a9c <FatFile::openNext(FatFile*, int)+0x6e>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5a7c:	cbz	r4, 5ab0 <FatFile::openNext(FatFile*, int)+0x82>
    5a7e:	subs	r2, r0, #1
    5a80:	adds	r0, #10
    5a82:	lsls	r3, r1, #7
    5a84:	orr.w	r1, r3, r1, lsr #1
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5a88:	ldrb.w	r3, [r2, #1]!
    5a8c:	uxtab	r1, r3, r1
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    5a90:	cmp	r0, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5a92:	uxtb	r1, r1
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    5a94:	bne.n	5a82 <FatFile::openNext(FatFile*, int)+0x54>
    5a96:	cmp	r7, r1
    5a98:	bne.n	5aac <FatFile::openNext(FatFile*, int)+0x7e>
    5a9a:	b.n	5ab0 <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    5a9c:	cmp	r2, #15
    5a9e:	bne.n	5a64 <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    5aa0:	lsls	r2, r3, #25
    5aa2:	bpl.n	5a4e <FatFile::openNext(FatFile*, int)+0x20>
        lfnOrd = ldir->order & 0X1F;
    5aa4:	and.w	r4, r3, #31
        checksum = ldir->checksum;
    5aa8:	ldrb	r7, [r0, #13]
    5aaa:	b.n	5a4e <FatFile::openNext(FatFile*, int)+0x20>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    5aac:	movs	r0, #0
    5aae:	b.n	5ac0 <FatFile::openNext(FatFile*, int)+0x92>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    5ab0:	str	r4, [sp, #0]
    5ab2:	mov	r3, r9
    5ab4:	ubfx	r2, r8, #5, #16
    5ab8:	mov	r1, r5
    5aba:	mov	r0, r6
    5abc:	bl	596a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    }
  }

 fail:
  return false;
}
    5ac0:	add	sp, #12
    5ac2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005ac6 <FatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    5ac6:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5ac8:	ldrb	r3, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    5aca:	mov	r4, r0
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5acc:	lsls	r2, r3, #27
    5ace:	bpl.n	5b10 <FatFile::rmdir()+0x4a>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5ad0:	movs	r1, #0
    5ad2:	bl	58be <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    5ad6:	movs	r1, #1
    5ad8:	mov	r0, r4
    5ada:	bl	5884 <FatFile::readDirCache(bool)>
    if (!dir) {
    5ade:	cbnz	r0, 5ae6 <FatFile::rmdir()+0x20>
      // EOF if no error.
      if (!getError()) {
    5ae0:	ldrb	r3, [r4, #1]
    5ae2:	cbz	r3, 5afa <FatFile::rmdir()+0x34>
    5ae4:	b.n	5b10 <FatFile::rmdir()+0x4a>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5ae6:	ldrb	r3, [r0, #0]
    5ae8:	cbz	r3, 5afa <FatFile::rmdir()+0x34>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5aea:	cmp	r3, #229	; 0xe5
    5aec:	beq.n	5ad6 <FatFile::rmdir()+0x10>
    5aee:	cmp	r3, #46	; 0x2e
    5af0:	beq.n	5ad6 <FatFile::rmdir()+0x10>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    5af2:	ldrb	r3, [r0, #11]
    5af4:	lsls	r3, r3, #28
    5af6:	bmi.n	5ad6 <FatFile::rmdir()+0x10>
    5af8:	b.n	5b10 <FatFile::rmdir()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5afa:	movs	r3, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5afc:	mov	r0, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5afe:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    5b00:	ldrb	r3, [r4, #2]
    5b02:	orr.w	r3, r3, #2
    5b06:	strb	r3, [r4, #2]
  return remove();

 fail:
  return false;
}
    5b08:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5b0c:	b.w	6cd0 <FatFile::remove()>

 fail:
  return false;
}
    5b10:	movs	r0, #0
    5b12:	pop	{r4, pc}

00005b14 <FatFile::sync()>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5b14:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b16:	ldrb	r3, [r0, #0]
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5b18:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b1a:	cmp	r3, #0
    5b1c:	beq.n	5b88 <FatFile::sync()+0x74>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b1e:	ldrsb.w	r3, [r0, #2]
    5b22:	cmp	r3, #0
    5b24:	bge.n	5b7c <FatFile::sync()+0x68>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5b26:	movs	r1, #1
    5b28:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5b2c:	mov	r5, r0
    5b2e:	cbnz	r0, 5b3c <FatFile::sync()+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5b30:	ldrb	r3, [r4, #1]
  return false;
    5b32:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5b34:	orr.w	r3, r3, #1
    5b38:	strb	r3, [r4, #1]
    5b3a:	b.n	5b8a <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5b3c:	ldrb	r3, [r0, #0]
    5b3e:	cmp	r3, #229	; 0xe5
    5b40:	beq.n	5b30 <FatFile::sync()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5b42:	ldrb	r3, [r4, #0]
    5b44:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5b46:	itt	mi
    5b48:	ldrmi	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5b4a:	strmi	r3, [r0, #28]
    }
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5b4c:	ldr	r3, [r4, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b4e:	strh	r3, [r0, #26]
    5b50:	lsrs	r3, r3, #16
    5b52:	strh	r3, [r0, #20]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5b54:	ldr	r3, [pc, #56]	; (5b90 <FatFile::sync()+0x7c>)
    5b56:	ldr	r3, [r3, #0]
    5b58:	cbz	r3, 5b74 <FatFile::sync()+0x60>
      FsDateTime::callback(&date, &time, &ms10);
    5b5a:	add.w	r2, sp, #3
    5b5e:	add.w	r1, sp, #6
    5b62:	add	r0, sp, #4
    5b64:	blx	r3
      setLe16(dir->modifyDate, date);
    5b66:	ldrh.w	r3, [sp, #4]
    5b6a:	strh	r3, [r5, #24]
    5b6c:	strh	r3, [r5, #18]
    5b6e:	ldrh.w	r3, [sp, #6]
    5b72:	strh	r3, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b74:	ldrb	r3, [r4, #2]
    5b76:	and.w	r3, r3, #127	; 0x7f
    5b7a:	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
    5b7c:	ldr	r0, [r4, #8]
    5b7e:	bl	5584 <FatPartition::cacheSync()>
    5b82:	cmp	r0, #0
    5b84:	beq.n	5b30 <FatFile::sync()+0x1c>
    5b86:	b.n	5b8a <FatFile::sync()+0x76>
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5b88:	movs	r0, #1
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5b8a:	add	sp, #12
    5b8c:	pop	{r4, r5, pc}
    5b8e:	nop
    5b90:	.word	0x20003d54

00005b94 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5b94:	push	{r4, lr}
    5b96:	mov	r4, r0
  bool rtn = sync();
    5b98:	bl	5b14 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5b9c:	movs	r3, #0
    5b9e:	strb	r3, [r4, #0]
  m_flags = 0;
    5ba0:	strb	r3, [r4, #2]
  return rtn;
}
    5ba2:	pop	{r4, pc}

00005ba4 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5ba4:	push	{r4, r5, r6, r7, lr}
    5ba6:	mov	r7, r3
    5ba8:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    5baa:	movs	r3, #0
    5bac:	mov	r6, r0
    5bae:	mov	r4, r1
    5bb0:	str	r2, [sp, #4]
    5bb2:	strb.w	r3, [sp, #8]
    5bb6:	strb.w	r3, [sp, #9]
    5bba:	strb.w	r3, [sp, #10]
    5bbe:	strh.w	r3, [sp, #56]	; 0x38
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5bc2:	ldrb	r3, [r0, #0]
    5bc4:	cbz	r3, 5bca <FatFile::open(FatFile*, char const*, int)+0x26>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    5bc6:	movs	r0, #0
    5bc8:	b.n	5c48 <FatFile::open(FatFile*, char const*, int)+0xa4>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5bca:	ldrb	r3, [r1, #0]
    5bcc:	tst.w	r3, #112	; 0x70
    5bd0:	beq.n	5bc6 <FatFile::open(FatFile*, char const*, int)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5bd2:	ldrb	r3, [r2, #0]
    5bd4:	cmp	r3, #47	; 0x2f
    5bd6:	bne.n	5bfe <FatFile::open(FatFile*, char const*, int)+0x5a>
    while (isDirSeparator(*path)) {
    5bd8:	ldr	r3, [sp, #4]
    5bda:	ldrb	r2, [r3, #0]
    5bdc:	cmp	r2, #47	; 0x2f
    5bde:	bne.n	5be6 <FatFile::open(FatFile*, char const*, int)+0x42>
      path++;
    5be0:	adds	r3, #1
    5be2:	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5be4:	b.n	5bd8 <FatFile::open(FatFile*, char const*, int)+0x34>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5be6:	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5be8:	cbnz	r2, 5bf2 <FatFile::open(FatFile*, char const*, int)+0x4e>
      return openRoot(dirFile->m_vol);
    5bea:	mov	r0, r6
    5bec:	bl	568a <FatFile::openRoot(FatVolume*)>
    5bf0:	b.n	5c48 <FatFile::open(FatFile*, char const*, int)+0xa4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5bf2:	add	r0, sp, #8
    5bf4:	bl	568a <FatFile::openRoot(FatVolume*)>
    5bf8:	cmp	r0, #0
    5bfa:	beq.n	5bc6 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5bfc:	add	r4, sp, #8
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5bfe:	add	r3, sp, #4
    5c00:	add	r2, sp, #44	; 0x2c
    5c02:	ldr	r1, [sp, #4]
    5c04:	mov	r0, r6
    5c06:	bl	6c38 <FatFile::parsePathName(char const*, FatName_t*, char const**)>
    5c0a:	cmp	r0, #0
    5c0c:	beq.n	5bc6 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5c0e:	ldr	r3, [sp, #4]
    5c10:	ldrb	r3, [r3, #0]
    5c12:	cbz	r3, 5c3c <FatFile::open(FatFile*, char const*, int)+0x98>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c14:	movs	r3, #0
    5c16:	add	r2, sp, #44	; 0x2c
    5c18:	mov	r1, r4
    5c1a:	mov	r0, r6
    5c1c:	bl	69e8 <FatFile::open(FatFile*, FatName_t*, int)>
    5c20:	cmp	r0, #0
    5c22:	beq.n	5bc6 <FatFile::open(FatFile*, char const*, int)+0x22>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c24:	mov	r5, r6
    5c26:	add	r4, sp, #8
    5c28:	ldmia	r5!, {r0, r1, r2, r3}
    5c2a:	stmia	r4!, {r0, r1, r2, r3}
    5c2c:	ldmia	r5!, {r0, r1, r2, r3}
    5c2e:	stmia	r4!, {r0, r1, r2, r3}
    5c30:	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
    5c32:	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c34:	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
    5c36:	bl	5b94 <FatFile::close()>
    5c3a:	b.n	5bfc <FatFile::open(FatFile*, char const*, int)+0x58>
  }
  return open(dirFile, &fname, oflag);
    5c3c:	mov	r3, r7
    5c3e:	add	r2, sp, #44	; 0x2c
    5c40:	mov	r1, r4
    5c42:	mov	r0, r6
    5c44:	bl	69e8 <FatFile::open(FatFile*, FatName_t*, int)>

 fail:
  return false;
}
    5c48:	add	sp, #84	; 0x54
    5c4a:	pop	{r4, r5, r6, r7, pc}

00005c4c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5c4c:	cbz	r1, 5c56 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5c4e:	add.w	r1, r1, #1096	; 0x448
    5c52:	b.w	5ba4 <FatFile::open(FatFile*, char const*, int)>
}
    5c56:	mov	r0, r1
    5c58:	bx	lr

00005c5a <FatFile::dirEntry(DirFat_t*)>:
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    5c5a:	push	{r4, r5, r6, lr}
    5c5c:	mov	r6, r0
    5c5e:	mov	r4, r1
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    5c60:	bl	5b14 <FatFile::sync()>
    5c64:	mov	r5, r0
    5c66:	cbnz	r0, 5c6c <FatFile::dirEntry(DirFat_t*)+0x12>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

 fail:
  return false;
    5c68:	movs	r5, #0
    5c6a:	b.n	5c8a <FatFile::dirEntry(DirFat_t*)+0x30>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5c6c:	movs	r1, #0
    5c6e:	mov	r0, r6
    5c70:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5c74:	cmp	r0, #0
    5c76:	beq.n	5c68 <FatFile::dirEntry(DirFat_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    5c78:	mov	r1, r4
    5c7a:	add.w	r3, r0, #32
    5c7e:	ldr.w	r2, [r0], #4
    5c82:	cmp	r0, r3
    5c84:	str.w	r2, [r1], #4
    5c88:	bne.n	5c7e <FatFile::dirEntry(DirFat_t*)+0x24>
  return true;

 fail:
  return false;
}
    5c8a:	mov	r0, r5
    5c8c:	pop	{r4, r5, r6, pc}

00005c8e <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5c8e:	push	{r4, r5, lr}
    5c90:	sub	sp, #36	; 0x24
    5c92:	mov	r5, r1
    5c94:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    5c96:	mov	r1, sp
    5c98:	bl	5c5a <FatFile::dirEntry(DirFat_t*)>
    5c9c:	cbz	r0, 5caa <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.createDate);
    5c9e:	ldrh.w	r3, [sp, #16]
    5ca2:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5ca4:	ldrh.w	r3, [sp, #14]
    5ca8:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    5caa:	add	sp, #36	; 0x24
    5cac:	pop	{r4, r5, pc}

00005cae <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5cae:	push	{r4, r5, lr}
    5cb0:	sub	sp, #36	; 0x24
    5cb2:	mov	r5, r1
    5cb4:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    5cb6:	mov	r1, sp
    5cb8:	bl	5c5a <FatFile::dirEntry(DirFat_t*)>
    5cbc:	cbz	r0, 5cca <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    5cbe:	ldrh.w	r3, [sp, #24]
    5cc2:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5cc4:	ldrh.w	r3, [sp, #22]
    5cc8:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    5cca:	add	sp, #36	; 0x24
    5ccc:	pop	{r4, r5, pc}

00005cce <FatFile::mkdir(FatFile*, FatName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cce:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5cd2:	ldrb	r3, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cd4:	sub	sp, #32
    5cd6:	mov	r4, r0
    5cd8:	mov	r6, r1
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5cda:	tst.w	r3, #112	; 0x70
    5cde:	beq.n	5d1a <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5ce0:	movw	r3, #2562	; 0xa02
    5ce4:	bl	69e8 <FatFile::open(FatFile*, FatName_t*, int)>
    5ce8:	cbz	r0, 5d1a <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5cea:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5cec:	movs	r5, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5cee:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5cf0:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5cf2:	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5cf4:	bl	55e0 <FatFile::addDirCluster()>
    5cf8:	cbz	r0, 5d1a <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5cfa:	ldr	r3, [r4, #16]
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5cfc:	movs	r1, #0
    5cfe:	mov	r0, r4
    5d00:	str	r3, [r4, #32]
    5d02:	bl	58be <FatFile::seekSet(unsigned long)>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    5d06:	mov	r0, r4
    5d08:	bl	5b14 <FatFile::sync()>
    5d0c:	cbz	r0, 5d1a <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5d0e:	mov	r1, r7
    5d10:	mov	r0, r4
    5d12:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5d16:	mov	r3, r0
    5d18:	cbnz	r0, 5d1e <FatFile::mkdir(FatFile*, FatName_t*)+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
    5d1a:	movs	r0, #0
    5d1c:	b.n	5dca <FatFile::mkdir(FatFile*, FatName_t*)+0xfc>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5d1e:	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5d20:	mov	r2, r0
    5d22:	mov	r7, sp
    5d24:	add.w	ip, r0, #32
    5d28:	mov	r5, sp
    5d2a:	ldr	r0, [r2, #0]
    5d2c:	adds	r2, #8
    5d2e:	ldr.w	r1, [r2, #-4]
    5d32:	mov	lr, r7
    5d34:	cmp	r2, ip
    5d36:	stmia.w	lr!, {r0, r1}
    5d3a:	mov	r7, lr
    5d3c:	bne.n	5d2a <FatFile::mkdir(FatFile*, FatName_t*)+0x5c>
    5d3e:	ldrh	r7, [r3, #20]
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5d40:	movs	r1, #32
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5d42:	ldrh.w	r8, [r3, #26]
  dot.name[0] = '.';
    5d46:	movs	r3, #46	; 0x2e
    5d48:	strb.w	r3, [sp]
    5d4c:	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5d4e:	adds	r2, r5, r3
    5d50:	adds	r3, #1
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5d52:	cmp	r3, #10
    dot.name[i] = ' ';
    5d54:	strb	r1, [r2, #1]
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5d56:	bne.n	5d4e <FatFile::mkdir(FatFile*, FatName_t*)+0x80>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5d58:	ldr	r0, [r4, #8]
    5d5a:	movs	r2, #1
    5d5c:	ldr	r1, [r4, #32]
    5d5e:	ldrb	r3, [r0, #6]
    5d60:	adds	r0, #40	; 0x28
    5d62:	subs	r1, #2
    5d64:	lsls	r1, r3
    5d66:	ldr.w	r3, [r0, #-20]
    5d6a:	add	r1, r3
    5d6c:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    5d70:	mov	r3, r0
    5d72:	cmp	r0, #0
    5d74:	beq.n	5d1a <FatFile::mkdir(FatFile*, FatName_t*)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    5d76:	strh.w	r7, [sp, #20]
    5d7a:	mov	lr, r5
    5d7c:	mov	r7, r0
    5d7e:	add.w	ip, sp, #32
    5d82:	strh.w	r8, [sp, #26]
    5d86:	mov	r2, lr
    5d88:	adds	r7, #8
    5d8a:	ldmia	r2!, {r0, r1}
    5d8c:	cmp	r2, ip
    5d8e:	str.w	r0, [r7, #-8]
    5d92:	str.w	r1, [r7, #-4]
    5d96:	mov	lr, r2
    5d98:	bne.n	5d86 <FatFile::mkdir(FatFile*, FatName_t*)+0xb8>
  // make entry for '..'
  dot.name[1] = '.';
    5d9a:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5d9c:	adds	r3, #32
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5d9e:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5da2:	ldr	r2, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5da4:	add	r6, sp, #32
    5da6:	lsrs	r1, r2, #16
    5da8:	strh.w	r2, [sp, #26]
    5dac:	strh.w	r1, [sp, #20]
    5db0:	mov	r2, r5
    5db2:	adds	r3, #8
    5db4:	ldmia	r2!, {r0, r1}
    5db6:	cmp	r2, r6
    5db8:	str.w	r0, [r3, #-8]
    5dbc:	str.w	r1, [r3, #-4]
    5dc0:	mov	r5, r2
    5dc2:	bne.n	5db0 <FatFile::mkdir(FatFile*, FatName_t*)+0xe2>
  // write first sector
  return m_vol->cacheSync();
    5dc4:	ldr	r0, [r4, #8]
    5dc6:	bl	5584 <FatPartition::cacheSync()>

 fail:
  return false;
}
    5dca:	add	sp, #32
    5dcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005dd0 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5dd0:	push	{r4, r5, r6, r7, lr}
    5dd2:	mov	r7, r3
    5dd4:	sub	sp, #84	; 0x54
    5dd6:	movs	r3, #0
    5dd8:	mov	r6, r0
    5dda:	mov	r4, r1
    5ddc:	str	r2, [sp, #4]
    5dde:	strh.w	r3, [sp, #20]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    5de2:	strb.w	r3, [sp, #44]	; 0x2c
    5de6:	strb.w	r3, [sp, #45]	; 0x2d
    5dea:	strb.w	r3, [sp, #46]	; 0x2e
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5dee:	ldrb	r3, [r0, #0]
    5df0:	cmp	r3, #0
    5df2:	bne.n	5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    5df4:	ldrb	r3, [r1, #0]
    5df6:	tst.w	r3, #112	; 0x70
    5dfa:	beq.n	5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5dfc:	ldrb	r3, [r2, #0]
    5dfe:	cmp	r3, #47	; 0x2f
    5e00:	bne.n	5e1c <FatFile::mkdir(FatFile*, char const*, bool)+0x4c>
    while (isDirSeparator(*path)) {
    5e02:	ldr	r3, [sp, #4]
    5e04:	ldrb	r2, [r3, #0]
    5e06:	cmp	r2, #47	; 0x2f
    5e08:	bne.n	5e10 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    5e0a:	adds	r3, #1
    5e0c:	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5e0e:	b.n	5e02 <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5e10:	ldr	r1, [r4, #8]
    5e12:	add	r0, sp, #44	; 0x2c
    5e14:	bl	568a <FatFile::openRoot(FatVolume*)>
    5e18:	cbz	r0, 5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5e1a:	add	r4, sp, #44	; 0x2c
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5e1c:	add	r3, sp, #4
    5e1e:	add	r2, sp, #8
    5e20:	ldr	r1, [sp, #4]
    5e22:	mov	r0, r6
    5e24:	bl	6c38 <FatFile::parsePathName(char const*, FatName_t*, char const**)>
    5e28:	cbz	r0, 5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5e2a:	ldr	r3, [sp, #4]
    5e2c:	ldrb	r3, [r3, #0]
    5e2e:	cbz	r3, 5e68 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5e30:	movs	r3, #0
    5e32:	add	r2, sp, #8
    5e34:	mov	r1, r4
    5e36:	mov	r0, r6
    5e38:	bl	69e8 <FatFile::open(FatFile*, FatName_t*, int)>
    5e3c:	cbz	r0, 5e56 <FatFile::mkdir(FatFile*, char const*, bool)+0x86>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5e3e:	mov	r5, r6
    5e40:	add	r4, sp, #44	; 0x2c
    5e42:	ldmia	r5!, {r0, r1, r2, r3}
    5e44:	stmia	r4!, {r0, r1, r2, r3}
    5e46:	ldmia	r5!, {r0, r1, r2, r3}
    5e48:	stmia	r4!, {r0, r1, r2, r3}
    5e4a:	ldr	r3, [r5, #0]
    parent = &tmpDir;
    close();
    5e4c:	mov	r0, r6
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5e4e:	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
    5e50:	bl	5b94 <FatFile::close()>
    5e54:	b.n	5e1a <FatFile::mkdir(FatFile*, char const*, bool)+0x4a>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    5e56:	cbz	r7, 5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    5e58:	add	r2, sp, #8
    5e5a:	mov	r1, r4
    5e5c:	mov	r0, r6
    5e5e:	bl	5cce <FatFile::mkdir(FatFile*, FatName_t*)>
    5e62:	cmp	r0, #0
    5e64:	bne.n	5e3e <FatFile::mkdir(FatFile*, char const*, bool)+0x6e>
    5e66:	b.n	5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5e68:	add	r2, sp, #8
    5e6a:	mov	r1, r4
    5e6c:	mov	r0, r6
    5e6e:	bl	5cce <FatFile::mkdir(FatFile*, FatName_t*)>
    5e72:	b.n	5e76 <FatFile::mkdir(FatFile*, char const*, bool)+0xa6>

 fail:
  return false;
    5e74:	movs	r0, #0
}
    5e76:	add	sp, #84	; 0x54
    5e78:	pop	{r4, r5, r6, r7, pc}

00005e7a <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5e7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5e7e:	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5e80:	sub	sp, #108	; 0x6c
    5e82:	movs	r7, #0
    5e84:	mov	r4, r0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5e86:	tst.w	r3, #24
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5e8a:	mov	r8, r1
    5e8c:	mov	r9, r2
    5e8e:	strb.w	r7, [sp, #32]
    5e92:	strb.w	r7, [sp, #33]	; 0x21
    5e96:	strb.w	r7, [sp, #34]	; 0x22
    5e9a:	strb.w	r7, [sp, #68]	; 0x44
    5e9e:	strb.w	r7, [sp, #69]	; 0x45
    5ea2:	strb.w	r7, [sp, #70]	; 0x46
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5ea6:	bne.n	5eac <FatFile::rename(FatFile*, char const*)+0x32>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    5ea8:	movs	r0, #0
    5eaa:	b.n	6014 <FatFile::rename(FatFile*, char const*)+0x19a>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5eac:	ldr	r2, [r0, #8]
    5eae:	ldr	r3, [r1, #8]
    5eb0:	cmp	r2, r3
    5eb2:	bne.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    5eb4:	mov	r6, r4
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
    5eb6:	bl	5b14 <FatFile::sync()>
  oldFile = *this;
    5eba:	add	r5, sp, #68	; 0x44
    5ebc:	ldmia	r6!, {r0, r1, r2, r3}
    5ebe:	stmia	r5!, {r0, r1, r2, r3}
    5ec0:	ldmia	r6!, {r0, r1, r2, r3}
    5ec2:	stmia	r5!, {r0, r1, r2, r3}
    5ec4:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5ec6:	mov	r1, r7
    5ec8:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    5eca:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5ecc:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5ed0:	cmp	r0, #0
    5ed2:	beq.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5ed4:	mov	r3, r0
    5ed6:	mov	r2, sp
    5ed8:	add.w	r7, r0, #32
    5edc:	mov	r5, sp
    5ede:	ldr	r0, [r3, #0]
    5ee0:	adds	r3, #8
    5ee2:	ldr.w	r1, [r3, #-4]
    5ee6:	mov	r6, r2
    5ee8:	cmp	r3, r7
    5eea:	stmia	r6!, {r0, r1}
    5eec:	mov	r2, r6
    5eee:	bne.n	5ede <FatFile::rename(FatFile*, char const*)+0x64>
  // make directory entry for new path
  if (isFile()) {
    5ef0:	ldrb	r2, [r4, #0]
    5ef2:	add	r6, sp, #32
    5ef4:	and.w	r2, r2, #8
    5ef8:	and.w	r3, r2, #255	; 0xff
    5efc:	cbz	r2, 5f14 <FatFile::rename(FatFile*, char const*)+0x9a>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5efe:	movw	r3, #2561	; 0xa01
    5f02:	mov	r2, r9
    5f04:	mov	r1, r8
    5f06:	mov	r0, r6
    5f08:	bl	5ba4 <FatFile::open(FatFile*, char const*, int)>
    5f0c:	cmp	r0, #0
    5f0e:	beq.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
  DirFat_t entry;
  uint32_t dirCluster = 0;
    5f10:	movs	r7, #0
    5f12:	b.n	5f24 <FatFile::rename(FatFile*, char const*)+0xaa>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    5f14:	mov	r2, r9
    5f16:	mov	r1, r8
    5f18:	mov	r0, r6
    5f1a:	bl	5dd0 <FatFile::mkdir(FatFile*, char const*, bool)>
    5f1e:	cmp	r0, #0
    5f20:	beq.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    5f22:	ldr	r7, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5f24:	ldr	r3, [sp, #56]	; 0x38
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5f26:	movs	r1, #1
    5f28:	mov	r0, r4
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5f2a:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    5f2c:	ldrh.w	r3, [sp, #36]	; 0x24
    5f30:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    5f32:	ldrb.w	r3, [sp, #35]	; 0x23
    5f36:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    5f38:	ldr	r3, [sp, #44]	; 0x2c
    5f3a:	str	r3, [r4, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5f3c:	movs	r3, #0
    5f3e:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    5f42:	strb.w	r3, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5f46:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5f4a:	cmp	r0, #0
    5f4c:	beq.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    5f4e:	add.w	r3, sp, #13
    5f52:	add.w	r2, r0, #13
    5f56:	add.w	r1, sp, #29
    5f5a:	ldr.w	lr, [r3], #4
    5f5e:	cmp	r3, r1
    5f60:	str.w	lr, [r2], #4
    5f64:	bne.n	5f5a <FatFile::rename(FatFile*, char const*)+0xe0>
    5f66:	ldrh	r1, [r3, #0]
    5f68:	strh	r1, [r2, #0]
    5f6a:	ldrb	r3, [r3, #2]
    5f6c:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    5f6e:	ldrb.w	r3, [sp, #11]
    5f72:	strb	r3, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    5f74:	cmp	r7, #0
    5f76:	beq.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x178>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5f78:	ldr	r0, [r4, #8]
    5f7a:	subs	r3, r7, #2
    5f7c:	movs	r2, #0
    5f7e:	ldrb	r1, [r0, #6]
    5f80:	adds	r0, #40	; 0x28
    5f82:	lsls	r3, r1
    5f84:	ldr.w	r1, [r0, #-20]
    5f88:	add	r1, r3
    5f8a:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5f8e:	cmp	r0, #0
    5f90:	beq.n	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    5f92:	add.w	r3, r0, #32
    5f96:	mov	lr, r5
    5f98:	add.w	ip, r0, #64	; 0x40
    5f9c:	ldr	r0, [r3, #0]
    5f9e:	adds	r3, #8
    5fa0:	ldr.w	r1, [r3, #-4]
    5fa4:	mov	r2, lr
    5fa6:	cmp	r3, ip
    5fa8:	stmia	r2!, {r0, r1}
    5faa:	mov	lr, r2
    5fac:	bne.n	5f9c <FatFile::rename(FatFile*, char const*)+0x122>

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    5fae:	mov	r1, r7
    5fb0:	ldr	r0, [r4, #8]
    5fb2:	bl	64ae <FatPartition::freeChain(unsigned long)>
    5fb6:	cmp	r0, #0
    5fb8:	beq.w	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    5fbc:	ldr	r0, [r4, #8]
    5fbe:	movs	r2, #1
    5fc0:	ldr	r1, [r4, #32]
    5fc2:	ldrb	r3, [r0, #6]
    5fc4:	adds	r0, #40	; 0x28
    5fc6:	subs	r1, #2
    5fc8:	lsls	r1, r3
    5fca:	ldr.w	r3, [r0, #-20]
    5fce:	add	r1, r3
    5fd0:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5fd4:	cmp	r0, #0
    5fd6:	beq.w	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    5fda:	add.w	r3, r0, #32
    5fde:	mov	r2, r5
    5fe0:	adds	r3, #8
    5fe2:	ldmia	r2!, {r0, r1}
    5fe4:	cmp	r2, r6
    5fe6:	str.w	r0, [r3, #-8]
    5fea:	str.w	r1, [r3, #-4]
    5fee:	mov	r5, r2
    5ff0:	bne.n	5fde <FatFile::rename(FatFile*, char const*)+0x164>
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5ff2:	movs	r3, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    5ff4:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5ff6:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    5ff8:	movs	r3, #2
    5ffa:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    5ffe:	movs	r3, #8
    6000:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6004:	bl	6cd0 <FatFile::remove()>
    6008:	cmp	r0, #0
    600a:	beq.w	5ea8 <FatFile::rename(FatFile*, char const*)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    600e:	ldr	r0, [r4, #8]
    6010:	bl	5584 <FatPartition::cacheSync()>

 fail:
  return false;
}
    6014:	add	sp, #108	; 0x6c
    6016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000601a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    601a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    601e:	mov	r4, r3
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6020:	ldrb	r3, [r0, #0]
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6022:	mov	r6, r0
    6024:	mov	r7, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6026:	lsls	r3, r3, #28
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6028:	ldrb.w	fp, [sp, #40]	; 0x28
    602c:	ldrb.w	r9, [sp, #44]	; 0x2c
    6030:	ldrb.w	sl, [sp, #48]	; 0x30
    6034:	ldrb.w	r5, [sp, #52]	; 0x34
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6038:	bmi.n	6040 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    603a:	movs	r0, #0
    603c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile()
      || year < 1980
    6040:	subw	r2, r2, #1980	; 0x7bc
    6044:	uxth.w	r8, r2
    6048:	cmp.w	r8, #127	; 0x7f
    604c:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || year > 2107
      || month < 1
    604e:	subs	r3, r4, #1
    6050:	cmp	r3, #11
    6052:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || month > 12
      || day < 1
    6054:	add.w	r3, fp, #4294967295
    6058:	cmp	r3, #30
    605a:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || day > 31
      || hour > 23
    605c:	cmp.w	r9, #23
    6060:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || minute > 59
    6062:	cmp.w	sl, #59	; 0x3b
    6066:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      || second > 59) {
    6068:	cmp	r5, #59	; 0x3b
    606a:	bhi.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    606c:	bl	5b14 <FatFile::sync()>
    6070:	cmp	r0, #0
    6072:	beq.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6074:	movs	r1, #1
    6076:	mov	r0, r6
    6078:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    607c:	cmp	r0, #0
    607e:	beq.n	603a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6080:	orr.w	r4, fp, r4, lsl #5
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    6084:	asrs	r3, r5, #1
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6086:	orr.w	r8, r4, r8, lsl #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  dirDate = FS_DATE(year, month, day);
  dirTime = FS_TIME(hour, minute, second);
  if (flags & T_ACCESS) {
    608a:	lsls	r4, r7, #31
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    608c:	orr.w	r3, r3, sl, lsl #5
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6090:	uxth.w	r8, r8
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    6094:	orr.w	r3, r3, r9, lsl #11
    6098:	it	mi
    609a:	strhmi.w	r8, [r0, #18]
    setLe16(dir->accessDate, dirDate);
  }
  if (flags & T_CREATE) {
    609e:	lsls	r1, r7, #30
    60a0:	uxth	r3, r3
    60a2:	bpl.n	60b4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9a>
    setLe16(dir->createDate, dirDate);
    setLe16(dir->createTime, dirTime);
    // units of 10 ms
    dir->createTimeMs = second & 1 ? 100 : 0;
    60a4:	ands.w	r5, r5, #1
    60a8:	strh.w	r8, [r0, #16]
    60ac:	strh	r3, [r0, #14]
    60ae:	it	ne
    60b0:	movne	r5, #100	; 0x64
    60b2:	strb	r5, [r0, #13]
  }
  if (flags & T_WRITE) {
    60b4:	lsls	r2, r7, #29
    60b6:	itt	mi
    60b8:	strhmi.w	r8, [r0, #24]
    60bc:	strhmi	r3, [r0, #22]
    setLe16(dir->modifyDate, dirDate);
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();
    60be:	ldr	r0, [r6, #8]
    60c0:	bl	5584 <FatPartition::cacheSync()>
    60c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000060c8 <FatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    60c8:	push	{r0, r1, r4, lr}
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    60ca:	ldrb	r3, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    60cc:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    60ce:	lsls	r3, r3, #30
    60d0:	bmi.n	60d6 <FatFile::truncate()+0xe>
  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    60d2:	movs	r0, #0
    60d4:	b.n	612c <FatFile::truncate()+0x64>
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    60d6:	ldr	r3, [r0, #32]
    60d8:	cbz	r3, 612a <FatFile::truncate()+0x62>
      return true;
  }
  if (m_curCluster) {
    60da:	ldr	r1, [r0, #16]
    60dc:	cbz	r1, 6102 <FatFile::truncate()+0x3a>
    toFree = 0;
    60de:	add	r2, sp, #8
    60e0:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    60e2:	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    60e4:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    60e8:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    60ec:	cmp	r0, #0
    60ee:	blt.n	60d2 <FatFile::truncate()+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    60f0:	beq.n	6106 <FatFile::truncate()+0x3e>
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    60f2:	mvn.w	r2, #4026531840	; 0xf0000000
    60f6:	ldr	r1, [r4, #16]
    60f8:	ldr	r0, [r4, #8]
    60fa:	bl	63d2 <FatPartition::fatPut(unsigned long, unsigned long)>
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    60fe:	cbnz	r0, 6106 <FatFile::truncate()+0x3e>
    6100:	b.n	60d2 <FatFile::truncate()+0xa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6102:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6104:	str	r1, [r0, #32]
  }
  if (toFree) {
    6106:	ldr	r1, [sp, #4]
    6108:	cbnz	r1, 611e <FatFile::truncate()+0x56>
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    610a:	ldr	r3, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    610c:	mov	r0, r4
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    610e:	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6110:	ldrb	r3, [r4, #2]
    6112:	orn	r3, r3, #127	; 0x7f
    6116:	strb	r3, [r4, #2]
  return sync();
    6118:	bl	5b14 <FatFile::sync()>
    611c:	b.n	612c <FatFile::truncate()+0x64>
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    611e:	ldr	r0, [r4, #8]
    6120:	bl	64ae <FatPartition::freeChain(unsigned long)>
    6124:	cmp	r0, #0
    6126:	bne.n	610a <FatFile::truncate()+0x42>
    6128:	b.n	60d2 <FatFile::truncate()+0xa>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    612a:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    612c:	add	sp, #8
    612e:	pop	{r4, pc}

00006130 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6130:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6134:	ldrb	r3, [r0, #2]
    6136:	mov	r9, r1
    6138:	mov	r4, r0
    613a:	mov	r5, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    613c:	lsls	r1, r3, #30
    613e:	bpl.w	625e <FatFile::write(void const*, unsigned int)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6142:	lsls	r2, r3, #28
    6144:	bmi.n	615c <FatFile::write(void const*, unsigned int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6146:	ldr	r3, [r4, #20]
    6148:	mvns	r3, r3
    614a:	cmp	r5, r3
    614c:	bhi.w	625e <FatFile::write(void const*, unsigned int)+0x12e>
    6150:	mov	r7, r5
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6152:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    6156:	mov.w	fp, #4294967295
    615a:	b.n	61ea <FatFile::write(void const*, unsigned int)+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    615c:	ldr	r1, [r0, #28]
    615e:	bl	58be <FatFile::seekSet(unsigned long)>
    6162:	cmp	r0, #0
    6164:	bne.n	6146 <FatFile::write(void const*, unsigned int)+0x16>
    6166:	b.n	625e <FatFile::write(void const*, unsigned int)+0x12e>
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6168:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    616a:	ubfx	r8, r2, #0, #9
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    616e:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6170:	ands.w	r6, r6, r2, lsr #9
    6174:	beq.n	61f2 <FatFile::write(void const*, unsigned int)+0xc2>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6176:	ldr.w	lr, [r4, #8]
                      + sectorOfCluster;
    617a:	ldr	r1, [r4, #16]
    617c:	ldrb.w	r3, [lr, #6]
    6180:	subs	r1, #2
    6182:	lsls	r1, r3
    6184:	ldr.w	r3, [lr, #20]
    6188:	add	r1, r3
    618a:	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    618c:	cmp.w	r8, #0
    6190:	bne.n	6224 <FatFile::write(void const*, unsigned int)+0xf4>
    6192:	cmp.w	r7, #512	; 0x200
    6196:	bcs.n	6272 <FatFile::write(void const*, unsigned int)+0x142>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6198:	ldr	r2, [r4, #20]
    619a:	ldr	r3, [r4, #28]
    619c:	cmp	r2, r3
    619e:	bcs.n	6228 <FatFile::write(void const*, unsigned int)+0xf8>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    61a0:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    61a2:	tst.w	r3, #32
    61a6:	ite	eq
    61a8:	moveq	r2, #1
    61aa:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    61ac:	add.w	r0, lr, #40	; 0x28
    61b0:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    61b4:	cmp	r0, #0
    61b6:	beq.n	625e <FatFile::write(void const*, unsigned int)+0x12e>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    61b8:	rsb	r6, r8, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    61bc:	add	r0, r8
    61be:	mov	r1, r9
    61c0:	cmp	r6, r7
    61c2:	it	cs
    61c4:	movcs	r6, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    61c6:	add	r8, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    61c8:	mov	r2, r6
    61ca:	bl	87a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    61ce:	cmp.w	r8, #512	; 0x200
    61d2:	bne.n	61e0 <FatFile::write(void const*, unsigned int)+0xb0>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    61d4:	ldr	r0, [r4, #8]
    61d6:	adds	r0, #40	; 0x28
    61d8:	bl	30fa <FsCache::sync()>
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    61dc:	cmp	r0, #0
    61de:	beq.n	625e <FatFile::write(void const*, unsigned int)+0x12e>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    61e0:	ldr	r3, [r4, #20]
    src += n;
    61e2:	add	r9, r6
    nToWrite -= n;
    61e4:	subs	r7, r7, r6
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    61e6:	add	r3, r6
    61e8:	str	r3, [r4, #20]
    61ea:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    61ec:	cmp	r7, #0
    61ee:	bne.n	6168 <FatFile::write(void const*, unsigned int)+0x38>
    61f0:	b.n	622c <FatFile::write(void const*, unsigned int)+0xfc>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    61f2:	cmp.w	r8, #0
    61f6:	bne.n	6176 <FatFile::write(void const*, unsigned int)+0x46>
      // start of new cluster
      if (m_curCluster != 0) {
    61f8:	ldr	r1, [r4, #16]
    61fa:	cbz	r1, 620e <FatFile::write(void const*, unsigned int)+0xde>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    61fc:	ldrb	r3, [r4, #2]
    61fe:	lsls	r3, r3, #25
    6200:	bpl.n	6246 <FatFile::write(void const*, unsigned int)+0x116>
    6202:	ldr	r3, [r4, #28]
    6204:	cmp	r2, r3
    6206:	bcs.n	6246 <FatFile::write(void const*, unsigned int)+0x116>
          m_curCluster++;
    6208:	adds	r1, #1
    620a:	str	r1, [r4, #16]
    620c:	b.n	6176 <FatFile::write(void const*, unsigned int)+0x46>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    620e:	ldr	r3, [r4, #32]
    6210:	cbnz	r3, 6220 <FatFile::write(void const*, unsigned int)+0xf0>
          // allocate first cluster of file
          if (!addCluster()) {
    6212:	mov	r0, r4
    6214:	bl	55aa <FatFile::addCluster()>
    6218:	cbz	r0, 625e <FatFile::write(void const*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    621a:	ldr	r3, [r4, #16]
    621c:	str	r3, [r4, #32]
    621e:	b.n	6176 <FatFile::write(void const*, unsigned int)+0x46>
        } else {
          m_curCluster = m_firstCluster;
    6220:	str	r3, [r4, #16]
    6222:	b.n	6176 <FatFile::write(void const*, unsigned int)+0x46>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6224:	movs	r2, #1
    6226:	b.n	61ac <FatFile::write(void const*, unsigned int)+0x7c>
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6228:	movs	r2, #5
    622a:	b.n	61ac <FatFile::write(void const*, unsigned int)+0x7c>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    622c:	ldr	r3, [r4, #28]
    622e:	cmp	r2, r3
    6230:	bls.n	6236 <FatFile::write(void const*, unsigned int)+0x106>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6232:	str	r2, [r4, #28]
    6234:	b.n	623c <FatFile::write(void const*, unsigned int)+0x10c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6236:	ldr	r3, [pc, #180]	; (62ec <FatFile::write(void const*, unsigned int)+0x1bc>)
    6238:	ldr	r3, [r3, #0]
    623a:	cbz	r3, 626c <FatFile::write(void const*, unsigned int)+0x13c>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    623c:	ldrb	r3, [r4, #2]
    623e:	orn	r3, r3, #127	; 0x7f
    6242:	strb	r3, [r4, #2]
    6244:	b.n	626c <FatFile::write(void const*, unsigned int)+0x13c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6246:	add.w	r2, r4, #16
    624a:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    624e:	cmp	r0, #0
    6250:	blt.n	625e <FatFile::write(void const*, unsigned int)+0x12e>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6252:	bne.n	62d4 <FatFile::write(void const*, unsigned int)+0x1a4>
          // add cluster if at end of chain
          if (!addCluster()) {
    6254:	mov	r0, r4
    6256:	bl	55aa <FatFile::addCluster()>
    625a:	cmp	r0, #0
    625c:	bne.n	62d4 <FatFile::write(void const*, unsigned int)+0x1a4>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    625e:	ldrb	r3, [r4, #1]
  return 0;
    6260:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6262:	orr.w	r3, r3, #1
    6266:	strb	r3, [r4, #1]
  return 0;
    6268:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    626c:	mov	r0, r5
    626e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6272:	cmp.w	r7, #1024	; 0x400
    6276:	ldr.w	r2, [lr, #52]	; 0x34
    627a:	ldr.w	r0, [lr, #44]	; 0x2c
    627e:	bcc.n	62aa <FatFile::write(void const*, unsigned int)+0x17a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6280:	ldrb.w	r3, [lr, #4]
    6284:	subs	r6, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6286:	lsrs	r3, r7, #9
    6288:	cmp	r3, r6
    628a:	it	cs
    628c:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    628e:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6290:	mov.w	r6, r3, lsl #9
    6294:	bcc.n	629e <FatFile::write(void const*, unsigned int)+0x16e>
    6296:	add.w	ip, r3, r1
    629a:	cmp	r2, ip
    629c:	bcc.n	62ca <FatFile::write(void const*, unsigned int)+0x19a>
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    629e:	ldr	r2, [r0, #0]
    62a0:	ldr.w	r8, [r2, #36]	; 0x24
    62a4:	mov	r2, r9
    62a6:	blx	r8
    62a8:	b.n	61dc <FatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    62aa:	cmp	r2, r1
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    62ac:	mov	r2, r9
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    62ae:	it	eq
    62b0:	strbeq.w	sl, [lr, #40]	; 0x28
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    62b4:	ldr	r3, [r0, #0]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    62b6:	it	eq
    62b8:	streq.w	fp, [lr, #52]	; 0x34
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    62bc:	ldr	r3, [r3, #32]
    62be:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    62c0:	cmp	r0, #0
    62c2:	beq.n	625e <FatFile::write(void const*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    62c4:	mov.w	r6, #512	; 0x200
    62c8:	b.n	61e0 <FatFile::write(void const*, unsigned int)+0xb0>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    62ca:	strb.w	sl, [lr, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    62ce:	str.w	fp, [lr, #52]	; 0x34
    62d2:	b.n	629e <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    62d4:	ldr.w	lr, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    62d8:	ldr	r1, [r4, #16]
    62da:	ldrb.w	r3, [lr, #6]
    62de:	subs	r1, #2
    62e0:	lsls	r1, r3
    62e2:	ldr.w	r3, [lr, #20]
    62e6:	add	r1, r3
    62e8:	b.n	6192 <FatFile::write(void const*, unsigned int)+0x62>
    62ea:	nop
    62ec:	.word	0x20003d54

000062f0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    62f0:	ldr	r3, [r2, #0]
    62f2:	cmp.w	r3, #256	; 0x100
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    62f6:	push	{r4, r5, lr}
    62f8:	mov	r4, r3
    62fa:	it	cs
    62fc:	movcs.w	r4, #256	; 0x100
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 256) n = 256;
  uint16_t *e = p + n;
    6300:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    6304:	cmp	r1, r5
    6306:	bcs.n	6318 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    6308:	ldrh.w	r0, [r1], #2
    630c:	cmp	r0, #0
    630e:	bne.n	6304 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    6310:	ldr	r0, [r2, #4]
    6312:	adds	r0, #1
    6314:	str	r0, [r2, #4]
    6316:	b.n	6304 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
  }
  state->clusters_to_do -= n;
    6318:	subs	r3, r3, r4
    631a:	str	r3, [r2, #0]
    631c:	pop	{r4, r5, pc}

0000631e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    631e:	ldr	r3, [r2, #0]
    6320:	cmp	r3, #128	; 0x80
  }
  state->clusters_to_do -= n;
}

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    6322:	push	{r4, r5, lr}
    6324:	mov	r4, r3
    6326:	it	cs
    6328:	movcs	r4, #128	; 0x80
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 128) n = 128;
  uint32_t *e = p + n;
    632a:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    632e:	cmp	r1, r5
    6330:	bcs.n	6342 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x24>
    if (*p++ == 0) state->free_count++;
    6332:	ldr.w	r0, [r1], #4
    6336:	cmp	r0, #0
    6338:	bne.n	632e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    633a:	ldr	r0, [r2, #4]
    633c:	adds	r0, #1
    633e:	str	r0, [r2, #4]
    6340:	b.n	632e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
  }
  state->clusters_to_do -= n;
    6342:	subs	r3, r3, r4
    6344:	str	r3, [r2, #0]
    6346:	pop	{r4, r5, pc}

00006348 <FsCache::clear()>:
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    6348:	push	{r4, lr}
    if (isDirty() && !sync()) {
    634a:	ldrb	r3, [r0, #0]
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    634c:	mov	r4, r0
    if (isDirty() && !sync()) {
    634e:	lsls	r3, r3, #31
    6350:	bpl.n	6358 <FsCache::clear()+0x10>
    6352:	bl	30fa <FsCache::sync()>
    6356:	cbz	r0, 6366 <FsCache::clear()+0x1e>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6358:	movs	r3, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    635a:	add.w	r0, r4, #16
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    635e:	strb	r3, [r4, #0]
    m_sector = 0XFFFFFFFF;
    6360:	mov.w	r3, #4294967295
    6364:	str	r3, [r4, #12]
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
  }
    6366:	pop	{r4, pc}

00006368 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6368:	cmp	r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    636a:	push	{r4, r5, r6, lr}
    636c:	mov	r5, r0
    636e:	mov	r4, r1
    6370:	mov	r6, r2
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6372:	bhi.n	637a <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    6374:	mov.w	r0, #4294967295
    6378:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    637a:	ldr	r3, [r0, #28]
    637c:	cmp	r1, r3
    637e:	bhi.n	6374 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    6380:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6382:	cmp	r3, #32
    6384:	bne.n	63a4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3c>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    6386:	ldr	r1, [r0, #24]
    6388:	movs	r2, #2
    638a:	add.w	r0, r0, #568	; 0x238
    638e:	add.w	r1, r1, r4, lsr #7
    6392:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6396:	cmp	r0, #0
    6398:	beq.n	6374 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    639a:	and.w	r4, r4, #127	; 0x7f
    639e:	ldr.w	r3, [r0, r4, lsl #2]
    63a2:	b.n	63c4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    63a4:	cmp	r3, #16
    63a6:	bne.n	6374 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    63a8:	ldr	r3, [r0, #24]
    63aa:	ubfx	r1, r1, #8, #8
    63ae:	movs	r2, #2
    63b0:	add.w	r0, r0, #568	; 0x238
    63b4:	add	r1, r3
    63b6:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    63ba:	cmp	r0, #0
    63bc:	beq.n	6374 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    63be:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    63c0:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    63c4:	ldr	r2, [r5, #28]
    63c6:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    63c8:	itte	ls
    63ca:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    63cc:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    63ce:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    63d0:	pop	{r4, r5, r6, pc}

000063d2 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    63d2:	cmp	r1, #1
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    63d4:	push	{r3, r4, r5, lr}
    63d6:	mov	r4, r1
    63d8:	mov	r5, r2
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    63da:	bhi.n	63e0 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    63dc:	movs	r0, #0
    63de:	pop	{r3, r4, r5, pc}
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    63e0:	ldr	r3, [r0, #28]
    63e2:	cmp	r1, r3
    63e4:	bhi.n	63dc <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    63e6:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    63e8:	cmp	r3, #32
    63ea:	bne.n	640a <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
    63ec:	ldr	r1, [r0, #24]
    63ee:	movs	r2, #3
    63f0:	add.w	r0, r0, #568	; 0x238
    63f4:	add.w	r1, r1, r4, lsr #7
    63f8:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    63fc:	cmp	r0, #0
    63fe:	beq.n	63dc <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6400:	and.w	r4, r4, #127	; 0x7f
    6404:	str.w	r5, [r0, r4, lsl #2]
    6408:	b.n	642a <FatPartition::fatPut(unsigned long, unsigned long)+0x58>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    640a:	cmp	r3, #16
    640c:	bne.n	63dc <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    640e:	ldr	r3, [r0, #24]
    6410:	ubfx	r1, r1, #8, #8
    6414:	movs	r2, #3
    6416:	add.w	r0, r0, #568	; 0x238
    641a:	add	r1, r3
    641c:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6420:	cmp	r0, #0
    6422:	beq.n	63dc <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6424:	uxtb	r4, r4
    6426:	strh.w	r5, [r0, r4, lsl #1]
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    642a:	movs	r0, #1
    goto fail;
  }

 fail:
  return false;
}
    642c:	pop	{r3, r4, r5, pc}

0000642e <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    642e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6432:	ldr	r4, [r0, #12]
#include "../common/FsStructs.h"
#include "../common/FsGetPartitionInfo.h"
#include "FatPartition.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6434:	mov	r5, r0
    6436:	mov	r6, r1
    6438:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    643a:	cmp	r4, r1
    643c:	bcs.n	644e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x20>
    643e:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6440:	movs	r7, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6442:	adds	r4, #1
    if (find > m_lastCluster) {
    6444:	ldr	r3, [r5, #28]
    6446:	cmp	r4, r3
    6448:	bls.n	6452 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      if (setStart) {
    644a:	cbnz	r7, 6480 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    644c:	ldr	r4, [r5, #12]
      setStart = true;
    644e:	movs	r7, #1
    6450:	b.n	6442 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      continue;
    }
    if (find == current) {
    6452:	cmp	r6, r4
    6454:	beq.n	6480 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6456:	add	r2, sp, #4
    6458:	mov	r1, r4
    645a:	mov	r0, r5
    645c:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6460:	cmp	r0, #0
    6462:	blt.n	6480 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6464:	beq.n	6442 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6466:	ldr	r3, [sp, #4]
    6468:	cmp	r3, #0
    646a:	bne.n	6442 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      break;
    }
  }
  if (setStart) {
    646c:	cbz	r7, 6470 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x42>
    m_allocSearchStart = find;
    646e:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6470:	mvn.w	r2, #4026531840	; 0xf0000000
    6474:	mov	r1, r4
    6476:	mov	r0, r5
    6478:	bl	63d2 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    647c:	mov	r7, r0
    647e:	cbnz	r0, 6484 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    6480:	movs	r7, #0
    6482:	b.n	64a6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6484:	cbnz	r6, 6492 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6486:	ldr	r3, [r5, #36]	; 0x24
    6488:	cmp	r3, #0
    648a:	blt.n	64a2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      m_freeClusterCount += change;
    648c:	subs	r3, #1
    648e:	str	r3, [r5, #36]	; 0x24
    6490:	b.n	64a2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    // Link clusters.
    if (!fatPut(current, find)) {
    6492:	mov	r2, r4
    6494:	mov	r1, r6
    6496:	mov	r0, r5
    6498:	bl	63d2 <FatPartition::fatPut(unsigned long, unsigned long)>
    649c:	cmp	r0, #0
    649e:	bne.n	6486 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    64a0:	b.n	6480 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    64a2:	str.w	r4, [r8]
  return true;

 fail:
  return false;
}
    64a6:	mov	r0, r7
    64a8:	add	sp, #8
    64aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064ae <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    64ae:	push	{r0, r1, r4, r5, r6, lr}
    64b0:	mov	r5, r0
    64b2:	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    64b4:	add	r2, sp, #4
    64b6:	mov	r1, r4
    64b8:	mov	r0, r5
    64ba:	bl	6368 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    64be:	subs	r6, r0, #0
    64c0:	bge.n	64c6 <FatPartition::freeChain(unsigned long)+0x18>
  } while (fg);

  return true;

 fail:
  return false;
    64c2:	movs	r0, #0
    64c4:	b.n	64f0 <FatPartition::freeChain(unsigned long)+0x42>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    64c6:	movs	r2, #0
    64c8:	mov	r1, r4
    64ca:	mov	r0, r5
    64cc:	bl	63d2 <FatPartition::fatPut(unsigned long, unsigned long)>
    64d0:	cmp	r0, #0
    64d2:	beq.n	64c2 <FatPartition::freeChain(unsigned long)+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    64d4:	ldr	r3, [r5, #36]	; 0x24
    64d6:	cmp	r3, #0
      m_freeClusterCount += change;
    64d8:	itt	ge
    64da:	addge	r3, #1
    64dc:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    64de:	ldr	r3, [r5, #12]
    64e0:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    64e2:	itt	cc
    64e4:	addcc.w	r4, r4, #4294967295
    64e8:	strcc	r4, [r5, #12]
    }
    cluster = next;
    64ea:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    64ec:	cmp	r6, #0
    64ee:	bne.n	64b4 <FatPartition::freeChain(unsigned long)+0x6>

  return true;

 fail:
  return false;
}
    64f0:	add	sp, #8
    64f2:	pop	{r4, r5, r6, pc}

000064f4 <FatPartition::freeClusterCount()>:
  }
  state->clusters_to_do -= n;
}

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    64f4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    64f6:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    64f8:	ldr	r0, [r0, #36]	; 0x24
    64fa:	cmp	r0, #0
    64fc:	bge.n	6542 <FatPartition::freeClusterCount()+0x4e>
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    64fe:	movs	r3, #0
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
  //Serial.printf("  num_sectors = %u\n", num_sectors);
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
    6500:	add.w	r0, r4, #568	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    6504:	ldr	r5, [r4, #16]
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    6506:	str	r3, [sp, #12]
  state.clusters_to_do = m_lastCluster + 1;
    6508:	ldr	r3, [r4, #28]
    650a:	adds	r3, #1
    650c:	str	r3, [sp, #8]
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
  //Serial.printf("  num_sectors = %u\n", num_sectors);
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
    650e:	bl	6348 <FsCache::clear()>
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    6512:	mov	r2, r0
    6514:	cbnz	r0, 651c <FatPartition::freeClusterCount()+0x28>
    6516:	mov.w	r0, #4294967295
    651a:	b.n	6542 <FatPartition::freeClusterCount()+0x4e>
  if (fatType() == FAT_TYPE_FAT32) {
    651c:	ldrb	r3, [r4, #7]
    651e:	ldr	r0, [r4, #0]
    6520:	cmp	r3, #32
    6522:	add	r3, sp, #8
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    6524:	ldr	r1, [r0, #0]
    6526:	str	r3, [sp, #4]
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    6528:	bne.n	652e <FatPartition::freeClusterCount()+0x3a>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    652a:	ldr	r3, [pc, #28]	; (6548 <FatPartition::freeClusterCount()+0x54>)
    652c:	b.n	6530 <FatPartition::freeClusterCount()+0x3c>
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    652e:	ldr	r3, [pc, #28]	; (654c <FatPartition::freeClusterCount()+0x58>)
    6530:	str	r3, [sp, #0]
    6532:	mov	r3, r5
    6534:	ldr	r6, [r1, #20]
    6536:	ldr	r1, [r4, #24]
    6538:	blx	r6
    653a:	cmp	r0, #0
    653c:	beq.n	6516 <FatPartition::freeClusterCount()+0x22>
  }

  setFreeClusterCount(state.free_count);
    653e:	ldr	r0, [sp, #12]
    return m_blockDev->writeSector(sector, src);
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6540:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    6542:	add	sp, #16
    6544:	pop	{r4, r5, r6, pc}
    6546:	nop
    6548:	.word	0x0000631f
    654c:	.word	0x000062f1

00006550 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6550:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    6554:	mov.w	r3, #4294967295
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
    6558:	movs	r7, #0
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    655a:	mov	r4, r0
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    655c:	movs	r6, #1
  }
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_cache.clear();
    655e:	add.w	r8, r0, #40	; 0x28
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6562:	sub	sp, #28
    6564:	mov	r5, r1
    6566:	mov	r9, r2
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6568:	str	r1, [r4, #0]
  MbrSector_t* mbr;
  MbrPart_t* mp;
  #endif

  uint8_t tmp;
  m_fatType = 0;
    656a:	strb	r7, [r0, #7]
  m_allocSearchStart = 1;
    656c:	str	r6, [r0, #12]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    656e:	str	r1, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    6570:	str	r3, [r0, #52]	; 0x34
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6572:	strb.w	r7, [r0, #40]	; 0x28
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    6576:	str.w	r1, [r4, #572]	; 0x23c
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    657a:	str.w	r3, [r0, #580]	; 0x244
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    657e:	strb.w	r7, [r0, #568]	; 0x238
    6582:	mov	r0, r8
    6584:	bl	6348 <FsCache::clear()>
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE

  #if SUPPORT_GPT_AND_EXTENDED_PATITIONS 
  FsGetPartitionInfo::voltype_t vt = FsGetPartitionInfo::getPartitionInfo(m_blockDev, part, cacheClear(), &firstLBA);
    6588:	str	r7, [sp, #8]
    658a:	mov	r2, r0
    658c:	str	r7, [sp, #4]
    658e:	str	r7, [sp, #0]
    6590:	add	r3, sp, #20
    6592:	mov	r1, r9
    6594:	mov	r0, r5
    6596:	bl	2ec0 <FsGetPartitionInfo::getPartitionInfo(BlockDeviceInterface*, unsigned char, unsigned char*, unsigned long*, unsigned long*, unsigned long*, unsigned char*)>
  if ((vt == FsGetPartitionInfo::INVALID_VOL) || (vt == FsGetPartitionInfo::OTHER_VOL)) {
    659a:	tst.w	r0, #251	; 0xfb
    659e:	beq.n	6624 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    DBG_FAIL_MACRO;
    goto fail;    
  }
  volumeStartSector = firstLBA;
    65a0:	ldr	r5, [sp, #20]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    65a2:	mov	r2, r7
    65a4:	mov	r0, r8
    65a6:	mov	r1, r5
    65a8:	bl	3146 <FsCache::get(unsigned long, unsigned char)>
  #endif

  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    65ac:	cmp	r0, #0
    65ae:	beq.n	6624 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    65b0:	ldrb	r3, [r0, #16]
    65b2:	cmp	r3, #2
    65b4:	bne.n	6624 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    65b6:	ldrh.w	r3, [r0, #11]
    65ba:	cmp.w	r3, #512	; 0x200
    65be:	bne.n	6624 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    65c0:	b.n	6628 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd8>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
    65c2:	subs	r2, #1
    65c4:	beq.n	6624 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    65c6:	ldrb	r6, [r4, #6]
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65c8:	lsls	r3, r3, #1
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    65ca:	adds	r6, #1
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65cc:	uxtb	r3, r3
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
    65ce:	strb	r6, [r4, #6]
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    65d0:	cmp	r3, r1
    65d2:	bne.n	65c2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    65d4:	ldrh	r3, [r0, #22]
    65d6:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    65d8:	cbnz	r3, 65de <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x8e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    65da:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    65dc:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    65de:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    65e0:	ldrh.w	r2, [r0, #17]
    65e4:	add	r1, r5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    65e6:	ldr	r6, [r4, #16]
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    65e8:	strh	r2, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    65ea:	add.w	r3, r1, r6, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    65ee:	str	r1, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    65f0:	lsls	r1, r2, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    65f2:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    65f4:	addw	r1, r1, #511	; 0x1ff
    65f8:	add.w	r1, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    65fc:	ldrh.w	r3, [r0, #19]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6600:	str	r1, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6602:	cbnz	r3, 6606 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6604:	ldr	r3, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6606:	subs	r1, r5, r1
    6608:	add	r1, r3

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    660a:	ldrb	r3, [r4, #6]
    660c:	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
    660e:	adds	r3, r1, #1
    6610:	str	r3, [r4, #28]
    return m_blockDev->writeSector(sector, src);
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6612:	mov.w	r3, #4294967295
    6616:	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6618:	movw	r3, #4084	; 0xff4
    661c:	cmp	r1, r3
    661e:	bhi.n	6638 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>
    m_fatType = 12;
    6620:	movs	r3, #12
    6622:	strb	r3, [r4, #7]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6624:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6626:	b.n	6656 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6628:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    662a:	movs	r2, #9
    662c:	strb	r7, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    662e:	subs	r3, r1, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6630:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6632:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6634:	mov	r3, r6
    6636:	b.n	65d0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x80>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6638:	movw	r3, #65524	; 0xfff4
    663c:	cmp	r1, r3
    663e:	ite	hi
    6640:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
    6642:	movls	r3, #16
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    6644:	mov.w	r0, #1
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    6648:	str	r6, [r4, #48]	; 0x30
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    664a:	itt	hi
    664c:	strhi	r3, [r4, #32]
    m_fatType = 32;
    664e:	movhi	r3, #32
    6650:	str.w	r6, [r4, #576]	; 0x240
    6654:	strb	r3, [r4, #7]
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
}
    6656:	add	sp, #28
    6658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000665c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatVolume.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    665c:	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    665e:	add.w	r4, r0, #1096	; 0x448
    6662:	sub	sp, #40	; 0x28
    6664:	movs	r3, #0
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    6666:	mov	r2, r1
    6668:	add	r0, sp, #4
    666a:	mov	r1, r4
    666c:	strb.w	r3, [sp, #4]
    6670:	strb.w	r3, [sp, #5]
    6674:	strb.w	r3, [sp, #6]
    6678:	bl	5ba4 <FatFile::open(FatFile*, char const*, int)>
    667c:	mov	r6, r0
    667e:	cbz	r0, 669c <FatVolume::chdir(char const*)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6680:	ldrb.w	r3, [sp, #4]
    6684:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6688:	itett	ne
    668a:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    668c:	moveq	r6, r3
  }
  if (!dir.isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    668e:	ldmiane	r5!, {r0, r1, r2, r3}
    6690:	stmiane	r4!, {r0, r1, r2, r3}
    6692:	itttt	ne
    6694:	ldmiane	r5!, {r0, r1, r2, r3}
    6696:	stmiane	r4!, {r0, r1, r2, r3}
    6698:	ldrne	r3, [r5, #0]
    669a:	strne	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    669c:	mov	r0, r6
    669e:	add	sp, #40	; 0x28
    66a0:	pop	{r4, r5, r6, pc}

000066a2 <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>:
  }
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    66a2:	subs	r1, r0, #1
    66a4:	add.w	r2, r0, #10
    uint8_t sum = 0;
    66a8:	movs	r0, #0
    66aa:	lsls	r3, r0, #7
    66ac:	orr.w	r0, r3, r0, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    66b0:	ldrb.w	r3, [r1, #1]!
    66b4:	uxtab	r0, r3, r0
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    66b8:	cmp	r1, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    66ba:	uxtb	r0, r0
  bool cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    66bc:	bne.n	66aa <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]+0x8>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    }
    return sum;
  }
    66be:	bx	lr

000066c0 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    66c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    66c4:	mov	r5, r0
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    66c6:	sub	sp, #52	; 0x34
    66c8:	mov	r6, r2
    66ca:	mov	r7, r0
    66cc:	mov	r8, r1
    66ce:	mov	r9, r3
  FatFile dir = *this;
    66d0:	add	r4, sp, #12
    66d2:	ldmia	r5!, {r0, r1, r2, r3}
    66d4:	stmia	r4!, {r0, r1, r2, r3}
    66d6:	ldmia	r5!, {r0, r1, r2, r3}
    66d8:	stmia	r4!, {r0, r1, r2, r3}
    66da:	ldr	r3, [r5, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    66dc:	movs	r5, #1
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    66de:	str	r3, [r4, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    66e0:	ldr	r3, [r6, #0]
    66e2:	str	r3, [r6, #4]
    ls = 0;
    66e4:	movs	r3, #0
    66e6:	strh	r3, [r6, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    66e8:	cmp	r5, r9
    66ea:	bhi.n	6726 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x66>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    66ec:	rsb	r1, r5, r8
    66f0:	add	r0, sp, #12
    66f2:	uxth	r1, r1
    66f4:	bl	53c8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    66f8:	mov	fp, r0
    66fa:	cbnz	r0, 6700 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x40>
    }
  }
  return true;

 fail:
  return false;
    66fc:	movs	r0, #0
    66fe:	b.n	6756 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
    6700:	mov.w	sl, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6704:	uxtb.w	r2, sl
    6708:	mov	r1, fp
    670a:	mov	r0, r7
    670c:	bl	53e2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    6710:	ldrh	r3, [r6, #12]
    6712:	mov	r4, r0
    6714:	cbnz	r3, 672a <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x6a>
    6716:	ldr	r2, [r6, #4]
    6718:	ldr	r3, [r6, #8]
    671a:	cmp	r2, r3
    671c:	bne.n	672a <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x6a>
      if (fname->atEnd()) {
        return u == 0;
    671e:	clz	r0, r0
    6722:	lsrs	r0, r0, #5
    6724:	b.n	6756 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6726:	movs	r0, #1
    6728:	b.n	6756 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x96>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    672a:	mov	r0, r6
    672c:	bl	3238 <FsName::get16()>
    6730:	str	r0, [sp, #4]
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    6732:	mov	r0, r4
    6734:	bl	3194 <toUpcase(unsigned short)>
    6738:	ldr	r3, [sp, #4]
    673a:	mov	r4, r0
    673c:	mov	r0, r3
    673e:	bl	3194 <toUpcase(unsigned short)>
    6742:	cmp	r4, r0
    6744:	bne.n	66fc <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x3c>
    6746:	add.w	sl, sl, #1
      goto fail;
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
    674a:	cmp.w	sl, #13
    674e:	bne.n	6704 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x44>
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6750:	adds	r5, #1
    6752:	uxtb	r5, r5
    6754:	b.n	66e8 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)+0x28>
  }
  return true;

 fail:
  return false;
}
    6756:	add	sp, #52	; 0x34
    6758:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000675c <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    675c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    6760:	mov	r5, r0

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
    6762:	sub	sp, #52	; 0x34
    6764:	mov	r6, r2
    6766:	mov	sl, r1
    6768:	mov	r7, r3
  FatFile dir = *this;
    676a:	add	r4, sp, #12
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    676c:	mov.w	fp, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    6770:	ldmia	r5!, {r0, r1, r2, r3}
    6772:	stmia	r4!, {r0, r1, r2, r3}
    6774:	ldmia	r5!, {r0, r1, r2, r3}
    6776:	stmia	r4!, {r0, r1, r2, r3}
    6778:	ldr	r3, [r5, #0]
  }
  void reset() {
    next = begin;
    ls = 0;
    677a:	movs	r5, #0
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
    677c:	add.w	r0, r6, #22
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
    6780:	str	r3, [r4, #0]
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    6782:	mov	r8, r5
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatName_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
    6784:	bl	66a2 <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    6788:	ldr	r3, [r6, #0]
    678a:	mov	r9, r0
    ls = 0;
    678c:	strh	r5, [r6, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    678e:	str	r3, [r6, #4]
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6790:	cmp	fp, r7
    6792:	bhi.n	67e6 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6794:	rsb	r1, fp, sl
    6798:	add	r0, sp, #12
    679a:	uxth	r1, r1
    679c:	bl	53c8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    67a0:	cmp	r0, #0
    67a2:	beq.n	682c <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xd0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    67a4:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67a6:	cmp	fp, r7
    67a8:	add.w	r4, r0, #4
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    67ac:	mov.w	r1, #0
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    67b0:	ldrb.w	r3, [r2, #40]	; 0x28
    67b4:	orr.w	r3, r3, #1
    67b8:	strb.w	r3, [r2, #40]	; 0x28
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67bc:	ite	eq
    67be:	orreq.w	r3, fp, #64	; 0x40
    67c2:	movne	r3, fp
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    67c4:	strb.w	r8, [r0, #12]
    ldir->checksum = checksum;
    67c8:	strb.w	r9, [r0, #13]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67cc:	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    67ce:	mov.w	r3, #15
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    67d2:	strh.w	r8, [r0, #26]
    67d6:	strb	r3, [r0, #11]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    67d8:	ldrh	r3, [r6, #12]
    67da:	cbnz	r3, 67ea <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8e>
    67dc:	ldr	r2, [r6, #4]
    67de:	ldr	r3, [r6, #8]
    67e0:	cmp	r2, r3
    67e2:	bne.n	67ea <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x8e>
    67e4:	b.n	681a <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xbe>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    67e6:	movs	r0, #1
    67e8:	b.n	682c <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xd0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    67ea:	mov	r0, r6
    67ec:	str	r1, [sp, #4]
    67ee:	bl	3238 <FsName::get16()>
    67f2:	ldr	r1, [sp, #4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    67f4:	cmp	r1, #4
    67f6:	bhi.n	67fe <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xa2>
    67f8:	strh.w	r0, [r4, #-3]
    67fc:	b.n	6806 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xaa>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    67fe:	cmp	r1, #10
    6800:	ite	ls
    6802:	strhls	r0, [r4, #0]
    6804:	strhhi	r0, [r4, #2]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    6806:	adds	r1, #1
    6808:	adds	r4, #2
    680a:	uxtb	r1, r1
    680c:	cmp	r1, #13
    680e:	bne.n	67d8 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x7c>
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6810:	add.w	fp, fp, #1
    6814:	uxtb.w	fp, fp
    6818:	b.n	6790 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x34>
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
    681a:	cbz	r5, 6826 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0xca>
    681c:	adds	r5, #1
    681e:	movw	r0, #65535	; 0xffff
    6822:	uxtb	r5, r5
    6824:	b.n	67f4 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x98>
    6826:	mov	r0, r5
    6828:	movs	r5, #1
    682a:	b.n	67f4 <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)+0x98>
  }
  return true;

 fail:
  return false;
}
    682c:	add	sp, #52	; 0x34
    682e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006832 <FatFile::makeSFN(FatName_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    6832:	mov	r2, r0
    6834:	add.w	r1, r0, #32

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatName_t* fname) {
    6838:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    683c:	ldr.w	r3, [r2], #21
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6840:	movs	r4, #32
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    6842:	ldr	r7, [r0, #8]
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6844:	strb.w	r4, [r2, #1]!
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6848:	cmp	r1, r2
    684a:	bne.n	6844 <FatFile::makeSFN(FatName_t*)+0x12>
    fname->sfn[k] = ' ';
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    684c:	ldrb	r6, [r3, #0]
    684e:	subs	r6, #46	; 0x2e
    6850:	it	ne
    6852:	movne	r6, #1
    6854:	mov	r5, r3
    6856:	adds	r3, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    6858:	ldrb	r2, [r5, #0]
    685a:	cmp	r2, #46	; 0x2e
    685c:	beq.n	6854 <FatFile::makeSFN(FatName_t*)+0x22>
    685e:	subs	r3, r7, #1
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    6860:	cmp	r3, r5
    6862:	mov	lr, r3
    6864:	bhi.n	6876 <FatFile::makeSFN(FatName_t*)+0x44>
    6866:	movs	r2, #0
    6868:	mov.w	ip, #7
    686c:	mov.w	r9, #8
    6870:	mov	r1, r2
    6872:	mov	r8, r2
    6874:	b.n	6898 <FatFile::makeSFN(FatName_t*)+0x66>
    6876:	ldrb.w	r2, [lr]
    687a:	subs	r3, #1
    687c:	cmp	r2, #46	; 0x2e
    687e:	bne.n	6860 <FatFile::makeSFN(FatName_t*)+0x2e>
    6880:	b.n	6866 <FatFile::makeSFN(FatName_t*)+0x34>

  for (; ptr < end; ptr++) {
    c = *ptr;
    6882:	ldrb	r3, [r5, #0]
//  Could skip UTF-8 units where (0XC0 & c) == 0X80

    if (c == '.' && ptr == dot) {
    6884:	cmp	r3, #46	; 0x2e
    6886:	bne.n	689e <FatFile::makeSFN(FatName_t*)+0x6c>
    6888:	cmp	lr, r5
    688a:	bne.n	68a6 <FatFile::makeSFN(FatName_t*)+0x74>
      in = 10;  // Max index for full 8.3 name.
    688c:	mov.w	ip, #10
      i = 8;    // Place for extension.
    6890:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6892:	mov.w	r9, #16
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    6896:	adds	r5, #1
    6898:	cmp	r5, r7
    689a:	bcc.n	6882 <FatFile::makeSFN(FatName_t*)+0x50>
    689c:	b.n	6928 <FatFile::makeSFN(FatName_t*)+0xf6>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    689e:	cmp	r3, #34	; 0x22
    68a0:	beq.n	68ca <FatFile::makeSFN(FatName_t*)+0x98>
    68a2:	cmp	r3, #124	; 0x7c
    68a4:	beq.n	68ca <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    68a6:	sub.w	r4, r3, #42	; 0x2a
    68aa:	cmp	r4, #5
    68ac:	bhi.n	68b2 <FatFile::makeSFN(FatName_t*)+0x80>
    68ae:	cmp	r3, #45	; 0x2d
    68b0:	bne.n	68ca <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    68b2:	sub.w	r4, r3, #58	; 0x3a
    68b6:	cmp	r4, #5
    68b8:	bls.n	68ca <FatFile::makeSFN(FatName_t*)+0x98>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    68ba:	sub.w	r4, r3, #91	; 0x5b
    68be:	cmp	r4, #2
    68c0:	bls.n	68ca <FatFile::makeSFN(FatName_t*)+0x98>
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
    68c2:	sub.w	r4, r3, #33	; 0x21
    68c6:	cmp	r4, #93	; 0x5d
    68c8:	bls.n	68d4 <FatFile::makeSFN(FatName_t*)+0xa2>
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    68ca:	and.w	r3, r3, #192	; 0xc0
    68ce:	cmp	r3, #128	; 0x80
    68d0:	bne.n	68fa <FatFile::makeSFN(FatName_t*)+0xc8>
    68d2:	b.n	691e <FatFile::makeSFN(FatName_t*)+0xec>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    68d4:	cmp	r1, ip
    68d6:	bls.n	68e8 <FatFile::makeSFN(FatName_t*)+0xb6>
        is83 = false;
        if (in == 10 || ptr > dot) {
    68d8:	cmp.w	ip, #10
    68dc:	beq.n	6926 <FatFile::makeSFN(FatName_t*)+0xf4>
    68de:	cmp	lr, r5
    68e0:	bcc.n	6926 <FatFile::makeSFN(FatName_t*)+0xf4>
         // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    68e2:	add.w	r5, lr, #4294967295
    68e6:	b.n	691e <FatFile::makeSFN(FatName_t*)+0xec>
        continue;
      }
      if (isLower(c)) {
    68e8:	sub.w	r4, r3, #97	; 0x61
    68ec:	cmp	r4, #25
    68ee:	bhi.n	6902 <FatFile::makeSFN(FatName_t*)+0xd0>
        c += 'A' - 'a';
    68f0:	subs	r3, #32
        lc |= bit;
    68f2:	orr.w	r2, r9, r2
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
    68f6:	uxtb	r3, r3
    68f8:	b.n	690e <FatFile::makeSFN(FatName_t*)+0xdc>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
    68fa:	cmp	r1, ip
    68fc:	bhi.n	68d8 <FatFile::makeSFN(FatName_t*)+0xa6>
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    68fe:	movs	r3, #95	; 0x5f
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
        is83 = false;
    6900:	movs	r6, #0
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
    6902:	sub.w	r4, r3, #65	; 0x41
    6906:	cmp	r4, #25
        uc |= bit;
    6908:	it	ls
    690a:	orrls.w	r8, r9, r8
      }
      fname->sfn[i++] = c;
    690e:	adds	r4, r1, #1
    6910:	add	r1, r0
    6912:	uxtb	r4, r4
    6914:	strb	r3, [r1, #22]
      if (i < 7) {
    6916:	cmp	r4, #6
    6918:	bhi.n	6922 <FatFile::makeSFN(FatName_t*)+0xf0>
        fname->seqPos = i;
    691a:	strb	r4, [r0, #20]
    691c:	b.n	6922 <FatFile::makeSFN(FatName_t*)+0xf0>
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (!legal83Char(c)) {
        is83 = false;
    691e:	movs	r6, #0
    6920:	b.n	6896 <FatFile::makeSFN(FatName_t*)+0x64>
    6922:	mov	r1, r4
    6924:	b.n	6896 <FatFile::makeSFN(FatName_t*)+0x64>
          continue;
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
    6926:	movs	r6, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6928:	ldrb	r3, [r0, #22]
    692a:	cmp	r3, #32
    692c:	beq.n	6952 <FatFile::makeSFN(FatName_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    692e:	cbz	r6, 6940 <FatFile::makeSFN(FatName_t*)+0x10e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6930:	tst.w	r8, r2
    6934:	it	ne
    6936:	movne	r2, #2
    6938:	strb	r2, [r0, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    693a:	movs	r0, #1
    693c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6940:	ldrb	r2, [r0, #20]
    goto fail;
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6942:	movs	r3, #1
    6944:	strb	r3, [r0, #21]
    fname->sfn[fname->seqPos] = '~';
    6946:	add	r0, r2
    6948:	movs	r2, #126	; 0x7e
    694a:	strb	r2, [r0, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    694c:	movs	r2, #49	; 0x31
    694e:	strb	r2, [r0, #23]
    6950:	b.n	693a <FatFile::makeSFN(FatName_t*)+0x108>
  }
  return true;

 fail:
  return false;
    6952:	movs	r0, #0
    6954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006958 <FatFile::makeUniqueSfn(FatName_t*)>:
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatName_t* fname) {
    6958:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    695c:	mov	r7, r0
    695e:	mov	r6, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    6960:	ldrb	r5, [r1, #20]
    6962:	movs	r4, #98	; 0x62
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    6964:	mov.w	r8, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6968:	add.w	r9, r1, #22
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
     DBG_WARN_IF(seq > FIRST_HASH_SEQ);
#ifdef USE_LFN_HASH
    hex = Bernstein(fname->begin, fname->end, seq);
#else
    hex = micros();
    696c:	bl	999c <micros>
    6970:	cmp	r5, #3
    6972:	uxth	r0, r0
    6974:	it	cs
    6976:	movcs	r5, #3
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6978:	adds	r3, r5, #4
    697a:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    697c:	and.w	r2, r0, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6980:	adds	r1, r6, r3
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6982:	subs	r3, #1
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    6984:	lsrs	r0, r0, #4
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6986:	cmp	r2, #9
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6988:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    698a:	ite	ls
    698c:	addls	r2, #48	; 0x30
    698e:	addhi	r2, #55	; 0x37
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6990:	cmp	r5, r3
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6992:	strb	r2, [r1, #22]
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    6994:	bcc.n	697c <FatFile::makeUniqueSfn(FatName_t*)+0x24>
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    6996:	adds	r3, r6, r5
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6998:	movs	r1, #0
    699a:	mov	r0, r7
    699c:	strb.w	r8, [r3, #22]
    69a0:	bl	58be <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    69a4:	movs	r1, #1
    69a6:	mov	r0, r7
    69a8:	bl	5884 <FatFile::readDirCache(bool)>
      if (!dir) {
    69ac:	mov	r1, r0
    69ae:	cbnz	r0, 69bc <FatFile::makeUniqueSfn(FatName_t*)+0x64>
        if (!getError()) {
    69b0:	ldrb	r0, [r7, #1]
    69b2:	clz	r0, r0
    69b6:	lsrs	r0, r0, #5
    69b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    69bc:	ldrb	r3, [r0, #0]
    69be:	cbz	r3, 69d4 <FatFile::makeUniqueSfn(FatName_t*)+0x7c>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    69c0:	ldrb	r3, [r0, #11]
    69c2:	lsls	r3, r3, #28
    69c4:	bmi.n	69a4 <FatFile::makeUniqueSfn(FatName_t*)+0x4c>
    69c6:	movs	r2, #11
    69c8:	mov	r0, r9
    69ca:	bl	ad60 <memcmp>
    69ce:	cmp	r0, #0
    69d0:	bne.n	69a4 <FatFile::makeUniqueSfn(FatName_t*)+0x4c>
    69d2:	b.n	69da <FatFile::makeUniqueSfn(FatName_t*)+0x82>

 fail:
  return false;

 done:
  return true;
    69d4:	movs	r0, #1
    69d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    69da:	subs	r0, r4, #1
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    69dc:	ands.w	r4, r0, #255	; 0xff
    69e0:	bne.n	696c <FatFile::makeUniqueSfn(FatName_t*)+0x14>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    69e2:	mov	r0, r4
    69e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000069e8 <FatFile::open(FatFile*, FatName_t*, int)>:

 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
    69e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69ec:	sub	sp, #44	; 0x2c
    69ee:	mov	r6, r1
    69f0:	mov	sl, r2
    69f2:	str	r3, [sp, #12]
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    69f4:	ldrb	r3, [r1, #0]

 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
    69f6:	str	r0, [sp, #24]
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    69f8:	tst.w	r3, #112	; 0x70
    69fc:	bne.n	6a02 <FatFile::open(FatFile*, FatName_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    69fe:	movs	r0, #0
    6a00:	b.n	6c2c <FatFile::open(FatFile*, FatName_t*, int)+0x244>
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;

  if (!dirFile->isDir() || isOpen()) {
    6a02:	ldr	r3, [sp, #24]
    6a04:	ldrb	r3, [r3, #0]
    6a06:	cmp	r3, #0
    6a08:	bne.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    6a0a:	ldr	r3, [r2, #16]
    6a0c:	movs	r2, #13
    6a0e:	adds	r3, #12
    6a10:	udiv	r3, r3, r2
    6a14:	uxtb	r3, r3
    6a16:	str	r3, [sp, #8]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6a18:	ldrb.w	r3, [sl, #21]
    6a1c:	lsls	r3, r3, #30
    6a1e:	beq.w	6c26 <FatFile::open(FatFile*, FatName_t*, int)+0x23e>
    6a22:	ldr	r3, [sp, #8]
    6a24:	add.w	fp, r3, #1
    6a28:	uxtb.w	fp, fp
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint8_t nameOrd;
  uint16_t freeIndex = 0;
    6a2c:	mov.w	r9, #0
    6a30:	movs	r1, #0
    6a32:	mov	r0, r6
    6a34:	bl	58be <FatFile::seekSet(unsigned long)>
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6a38:	mov	r8, r9
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6a3a:	add.w	r3, sl, #22
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6a3e:	mov	r4, r9
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6a40:	mov	r5, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6a42:	str.w	r9, [sp, #16]
 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatName_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6a46:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6a4a:	str	r3, [sp, #28]
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a4c:	ldr	r7, [r6, #20]
    dir = dirFile->readDirCache();
    6a4e:	movs	r1, #0
    6a50:	mov	r0, r6
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a52:	ubfx	r7, r7, #5, #16
    dir = dirFile->readDirCache();
    6a56:	bl	5884 <FatFile::readDirCache(bool)>
    if (!dir) {
    6a5a:	cbnz	r0, 6a64 <FatFile::open(FatFile*, FatName_t*, int)+0x7c>
      if (dirFile->getError()) {
    6a5c:	ldrb	r3, [r6, #1]
    6a5e:	cmp	r3, #0
    6a60:	beq.n	6b24 <FatFile::open(FatFile*, FatName_t*, int)+0x13c>
    6a62:	b.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6a64:	ldrb	r3, [r0, #0]
    6a66:	cmp	r3, #229	; 0xe5
    6a68:	beq.n	6a6c <FatFile::open(FatFile*, FatName_t*, int)+0x84>
    6a6a:	cbnz	r3, 6a7e <FatFile::open(FatFile*, FatName_t*, int)+0x96>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a6c:	cmp	r4, #0
    6a6e:	it	eq
    6a70:	moveq	r9, r7
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    6a72:	cmp	r4, fp
        freeFound++;
    6a74:	itt	cc
    6a76:	addcc	r4, #1
    6a78:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6a7a:	cbnz	r3, 6a86 <FatFile::open(FatFile*, FatName_t*, int)+0x9e>
    6a7c:	b.n	6b24 <FatFile::open(FatFile*, FatName_t*, int)+0x13c>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6a7e:	cmp	r4, fp
    6a80:	it	cc
    6a82:	movcc	r4, #0
    6a84:	b.n	6a8e <FatFile::open(FatFile*, FatName_t*, int)+0xa6>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6a86:	cmp	r3, #229	; 0xe5
    6a88:	bne.n	6a8e <FatFile::open(FatFile*, FatName_t*, int)+0xa6>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a8a:	movs	r5, #0
    6a8c:	b.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6a8e:	cmp	r3, #46	; 0x2e
    6a90:	beq.n	6a8a <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
    6a92:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6a94:	cmp	r2, #15
    6a96:	bne.n	6ae8 <FatFile::open(FatFile*, FatName_t*, int)+0x100>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6a98:	cbnz	r5, 6ab8 <FatFile::open(FatFile*, FatName_t*, int)+0xd0>
        order = ldir->order & 0X1F;
    6a9a:	and.w	r8, r3, #31
        if (order != nameOrd ||
    6a9e:	ldr	r2, [sp, #8]
    6aa0:	cmp	r2, r8
    6aa2:	bne.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
    6aa4:	lsls	r1, r3, #25
    6aa6:	bmi.n	6aae <FatFile::open(FatFile*, FatName_t*, int)+0xc6>
    6aa8:	ldr.w	r8, [sp, #8]
    6aac:	b.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
          (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
    6aae:	ldrb	r3, [r0, #13]
    6ab0:	mov	r8, r2
    6ab2:	mov	r5, r2
    6ab4:	str	r3, [sp, #16]
    6ab6:	b.n	6acc <FatFile::open(FatFile*, FatName_t*, int)+0xe4>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6ab8:	add.w	r8, r8, #4294967295
    6abc:	uxtb.w	r8, r8
    6ac0:	cmp	r3, r8
    6ac2:	bne.n	6a8a <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
    6ac4:	ldrb	r3, [r0, #13]
    6ac6:	ldr	r2, [sp, #16]
    6ac8:	cmp	r2, r3
    6aca:	bne.n	6a8a <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
        lfnOrd = 0;
        continue;
      }
      if (order == 1) {
    6acc:	cmp.w	r8, #1
    6ad0:	bne.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    6ad2:	adds	r1, r7, #1
    6ad4:	mov	r3, r5
    6ad6:	mov	r2, sl
    6ad8:	mov	r0, r6
    6ada:	uxth	r1, r1
    6adc:	bl	66c0 <FatFile::cmpName(unsigned short, FatName_t*, unsigned char)>
          lfnOrd = 0;
    6ae0:	cmp	r0, #0
    6ae2:	it	eq
    6ae4:	moveq	r5, #0
    6ae6:	b.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6ae8:	lsls	r3, r2, #28
    6aea:	bmi.n	6a8a <FatFile::open(FatFile*, FatName_t*, int)+0xa2>
      if (lfnOrd) {
    6aec:	cbz	r5, 6b02 <FatFile::open(FatFile*, FatName_t*, int)+0x11a>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6aee:	cmp.w	r8, #1
    6af2:	bne.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    6af4:	bl	66a2 <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>
    6af8:	ldr	r3, [sp, #16]
    6afa:	cmp	r3, r0
    6afc:	bne.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    6b00:	b.n	6b1c <FatFile::open(FatFile*, FatName_t*, int)+0x134>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6b02:	movs	r2, #11
    6b04:	ldr	r1, [sp, #28]
    6b06:	bl	ad60 <memcmp>
    6b0a:	cmp	r0, #0
    6b0c:	bne.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6b0e:	ldrb.w	r3, [sl, #21]
    6b12:	lsls	r0, r3, #31
    6b14:	bpl.n	6b1c <FatFile::open(FatFile*, FatName_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
    6b16:	movs	r3, #1
    6b18:	str	r3, [sp, #20]
    6b1a:	b.n	6a4c <FatFile::open(FatFile*, FatName_t*, int)+0x64>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6b1c:	ldr	r3, [sp, #12]
    6b1e:	lsls	r1, r3, #20
    6b20:	bpl.n	6c16 <FatFile::open(FatFile*, FatName_t*, int)+0x22e>
    6b22:	b.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6b24:	ldr	r3, [sp, #12]
    6b26:	lsls	r2, r3, #22
    6b28:	bpl.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    6b2c:	and.w	r3, r3, #3
    6b30:	subs	r3, #1
    6b32:	cmp	r3, #1
    6b34:	bhi.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    6b38:	cmp	r4, #0
    6b3a:	it	eq
    6b3c:	moveq	r9, r7
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b3e:	cmp	r4, fp
    6b40:	bcc.n	6b48 <FatFile::open(FatFile*, FatName_t*, int)+0x160>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
  }
  if (fnameFound) {
    6b42:	ldr	r3, [sp, #20]
    6b44:	cbnz	r3, 6b76 <FatFile::open(FatFile*, FatName_t*, int)+0x18e>
    6b46:	b.n	6b84 <FatFile::open(FatFile*, FatName_t*, int)+0x19c>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    6b48:	movs	r1, #0
    6b4a:	mov	r0, r6
    6b4c:	bl	5884 <FatFile::readDirCache(bool)>
    if (!dir) {
    6b50:	cbnz	r0, 6b58 <FatFile::open(FatFile*, FatName_t*, int)+0x170>
      if (dirFile->getError()) {
    6b52:	ldrb	r3, [r6, #1]
    6b54:	cbz	r3, 6b6a <FatFile::open(FatFile*, FatName_t*, int)+0x182>
    6b56:	b.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6b58:	adds	r4, #1
    6b5a:	uxtb	r4, r4
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b5c:	b.n	6b3e <FatFile::open(FatFile*, FatName_t*, int)+0x156>
    6b5e:	ldr	r3, [r6, #8]
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
    6b60:	ldrb	r3, [r3, #4]
    6b62:	add	r4, r3
    6b64:	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6b66:	cmp	fp, r4
    6b68:	bls.n	6b42 <FatFile::open(FatFile*, FatName_t*, int)+0x15a>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6b6a:	mov	r0, r6
    6b6c:	bl	55e0 <FatFile::addDirCluster()>
    6b70:	cmp	r0, #0
    6b72:	bne.n	6b5e <FatFile::open(FatFile*, FatName_t*, int)+0x176>
    6b74:	b.n	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
      goto fail;
    }
    freeFound += dirFile->m_vol->sectorsPerCluster();
  }
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
    6b76:	mov	r1, sl
    6b78:	mov	r0, r6
    6b7a:	bl	6958 <FatFile::makeUniqueSfn(FatName_t*)>
    6b7e:	cmp	r0, #0
    6b80:	beq.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    6b84:	add.w	r5, fp, #4294967295
  curIndex = freeIndex + lfnOrd;
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    6b88:	mov	r2, sl
    6b8a:	mov	r0, r6
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    6b8c:	uxtb	r5, r5
  curIndex = freeIndex + lfnOrd;
    6b8e:	add.w	r7, r9, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    6b92:	mov	r3, r5
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
  curIndex = freeIndex + lfnOrd;
    6b94:	uxth	r7, r7
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    6b96:	mov	r1, r7
    6b98:	bl	675c <FatFile::createLFN(unsigned short, FatName_t*, unsigned char)>
    6b9c:	cmp	r0, #0
    6b9e:	beq.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
    6ba2:	mov	r1, r7
    6ba4:	mov	r0, r6
    6ba6:	bl	53c8 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    6baa:	mov	r4, r0
    6bac:	cmp	r0, #0
    6bae:	beq.w	69fe <FatFile::open(FatFile*, FatName_t*, int)+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6bb2:	movs	r2, #32
    6bb4:	movs	r1, #0
    6bb6:	bl	8760 <memset>
  memcpy(dir->name, fname->sfn, 11);
    6bba:	mov	r3, sl
    6bbc:	ldr.w	r2, [r3, #22]!
    6bc0:	str	r2, [r4, #0]
    6bc2:	ldr	r2, [r3, #4]
    6bc4:	str	r2, [r4, #4]
    6bc6:	ldrh	r2, [r3, #8]
    6bc8:	strh	r2, [r4, #8]
    6bca:	ldrb	r3, [r3, #10]
    6bcc:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6bce:	ldrb.w	r3, [sl, #21]
    6bd2:	and.w	r3, r3, #24
    6bd6:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    6bd8:	ldr	r3, [pc, #88]	; (6c34 <FatFile::open(FatFile*, FatName_t*, int)+0x24c>)
    6bda:	ldr	r3, [r3, #0]
    6bdc:	cbz	r3, 6bfe <FatFile::open(FatFile*, FatName_t*, int)+0x216>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6bde:	add.w	r2, sp, #35	; 0x23
    6be2:	add.w	r1, sp, #38	; 0x26
    6be6:	add	r0, sp, #36	; 0x24
    6be8:	blx	r3
    6bea:	ldrh.w	r3, [sp, #36]	; 0x24
    6bee:	strh	r3, [r4, #16]
    6bf0:	ldrh.w	r3, [sp, #38]	; 0x26
    6bf4:	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    6bf6:	ldrb.w	r3, [sp, #35]	; 0x23
    6bfa:	strb	r3, [r4, #13]
    6bfc:	b.n	6c08 <FatFile::open(FatFile*, FatName_t*, int)+0x220>
    6bfe:	movw	r3, #21537	; 0x5421
    6c02:	strh	r3, [r4, #16]
    6c04:	strh	r3, [r4, #24]
    6c06:	strh	r3, [r4, #18]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6c08:	ldr	r2, [r6, #8]
    6c0a:	ldrb.w	r3, [r2, #40]	; 0x28
    6c0e:	orr.w	r3, r3, #1
    6c12:	strb.w	r3, [r2, #40]	; 0x28

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6c16:	str	r5, [sp, #0]
    6c18:	mov	r2, r7
    6c1a:	ldr	r3, [sp, #12]
    6c1c:	mov	r1, r6
    6c1e:	ldr	r0, [sp, #24]
    6c20:	bl	596a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6c24:	b.n	6c2c <FatFile::open(FatFile*, FatName_t*, int)+0x244>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    6c26:	mov.w	fp, #1
    6c2a:	b.n	6a2c <FatFile::open(FatFile*, FatName_t*, int)+0x44>
  }
  return true;

 fail:
  return false;
}
    6c2c:	add	sp, #44	; 0x2c
    6c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c32:	nop
    6c34:	.word	0x20003d54

00006c38 <FatFile::parsePathName(char const*, FatName_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatName_t* fname, const char** ptr) {
    6c38:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c3a:	mov	r4, r2
    6c3c:	mov	r6, r3
    6c3e:	mov	r0, r1
    6c40:	adds	r1, #1
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    6c42:	ldrb	r3, [r0, #0]
    6c44:	cmp	r3, #32
    6c46:	beq.n	6c3e <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatName_t* fname, const char** ptr) {
  size_t len = 0;
    6c48:	movs	r5, #0
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    6c4a:	ldr	r7, [pc, #128]	; (6ccc <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x94>)
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
    6c4c:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    6c4e:	ldrb	r3, [r0, #0]
    6c50:	cbz	r3, 6ca4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6c>
    6c52:	cmp	r3, #47	; 0x2f
    6c54:	beq.n	6ca4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x6c>
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    6c56:	add	r2, sp, #4
    6c58:	adds	r1, r0, #4
    6c5a:	bl	2e3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    6c5e:	cbz	r0, 6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    6c60:	ldr	r2, [sp, #4]
    6c62:	cmp.w	r2, #65536	; 0x10000
    6c66:	ite	cs
    6c68:	movcs	r3, #2
    6c6a:	movcc	r3, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    6c6c:	cmp	r2, #127	; 0x7f
    path = FsUtf::mbToCp(path, path + 4, &cp);
    if (!path) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    6c6e:	add	r5, r3
    if (cp < 0X80 && lfnReservedChar(cp)) {
    6c70:	bhi.n	6c9a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x62>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    6c72:	cmp	r2, #31
    6c74:	bls.n	6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    6c76:	uxtb	r3, r2
}
#endif  // USE_SIMPLE_LITTLE_ENDIAN
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    6c78:	sub.w	r1, r3, #34	; 0x22
    6c7c:	uxtb	r1, r1
    6c7e:	cmp	r1, #29
    6c80:	bhi.n	6c8a <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x52>
    6c82:	lsr.w	r1, r7, r1
    6c86:	lsls	r1, r1, #31
    6c88:	bmi.n	6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    6c8a:	and.w	r3, r3, #191	; 0xbf
    6c8e:	cmp	r3, #60	; 0x3c
    6c90:	beq.n	6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    6c92:	cmp	r2, #92	; 0x5c
    6c94:	beq.n	6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
    6c96:	cmp	r2, #46	; 0x2e
    6c98:	beq.n	6c4e <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
    6c9a:	cmp	r2, #32
    6c9c:	beq.n	6c4e <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
      // Need to trim trailing dots spaces.
      fname->len = len;
    6c9e:	str	r5, [r4, #16]
      fname->end = path;
    6ca0:	str	r0, [r4, #8]
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
  while (*path && !isDirSeparator(*path)) {
    6ca2:	b.n	6c4e <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x16>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    6ca4:	ldr	r3, [r4, #16]
    6ca6:	subs	r3, #1
    6ca8:	cmp	r3, #254	; 0xfe
    6caa:	bhi.n	6cc4 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8c>
    6cac:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    6cae:	ldrb.w	r3, [r0], #1
    6cb2:	cmp	r3, #32
    6cb4:	beq.n	6cac <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x74>
    6cb6:	cmp	r3, #47	; 0x2f
    6cb8:	beq.n	6cac <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x74>
  *ptr = path;
    6cba:	str	r2, [r6, #0]
  return makeSFN(fname);
    6cbc:	mov	r0, r4
    6cbe:	bl	6832 <FatFile::makeSFN(FatName_t*)>
    6cc2:	b.n	6cc6 <FatFile::parsePathName(char const*, FatName_t*, char const**)+0x8e>

 fail:
  return false;
    6cc4:	movs	r0, #0
}
    6cc6:	add	sp, #12
    6cc8:	pop	{r4, r5, r6, r7, pc}
    6cca:	nop
    6ccc:	.word	0x31002101

00006cd0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6cd0:	push	{r4, r5, r6, r7, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6cd2:	movs	r3, #0
    6cd4:	sub	sp, #44	; 0x2c
    6cd6:	mov	r4, r0
    6cd8:	strb.w	r3, [sp, #4]
    6cdc:	strb.w	r3, [sp, #5]
    6ce0:	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6ce4:	ldrb	r3, [r0, #2]
    6ce6:	lsls	r2, r3, #30
    6ce8:	bpl.n	6d1a <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6cea:	ldr	r1, [r0, #32]
    6cec:	cbz	r1, 6cf6 <FatFile::remove()+0x26>
    6cee:	ldr	r0, [r0, #8]
    6cf0:	bl	64ae <FatPartition::freeChain(unsigned long)>
    6cf4:	cbz	r0, 6d1a <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6cf6:	movs	r1, #1
    6cf8:	mov	r0, r4
    6cfa:	bl	566c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6cfe:	mov	r5, r0
    6d00:	cbz	r0, 6d1a <FatFile::remove()+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  checksum = lfnChecksum(dir->name);
    6d02:	bl	66a2 <FatFile::lfnChecksum(unsigned char*) [clone .isra.14]>

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    6d06:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6d08:	movs	r3, #0
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  checksum = lfnChecksum(dir->name);
    6d0a:	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    6d0c:	strb	r6, [r5, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6d0e:	strb	r3, [r4, #0]
  m_flags = 0;
    6d10:	strb	r3, [r4, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    6d12:	ldr	r0, [r4, #8]
    6d14:	bl	5584 <FatPartition::cacheSync()>
    6d18:	cbnz	r0, 6d1e <FatFile::remove()+0x4e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    6d1a:	movs	r0, #0
    6d1c:	b.n	6d7e <FatFile::remove()+0xae>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6d1e:	ldrb	r3, [r4, #3]
    6d20:	cbz	r3, 6d7e <FatFile::remove()+0xae>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    6d22:	mov	r1, r4
    6d24:	add	r0, sp, #4
    6d26:	bl	56ba <FatFile::openCluster(FatFile*)>
    6d2a:	cmp	r0, #0
    6d2c:	beq.n	6d1a <FatFile::remove()+0x4a>
    6d2e:	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d30:	ldrb	r3, [r4, #3]
    6d32:	cmp	r3, r5
    6d34:	bcc.n	6d1a <FatFile::remove()+0x4a>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    6d36:	ldrh	r1, [r4, #4]
    6d38:	add	r0, sp, #4
    6d3a:	subs	r1, r1, r5
    6d3c:	uxth	r1, r1
    6d3e:	bl	53c8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6d42:	cmp	r0, #0
    6d44:	beq.n	6d1a <FatFile::remove()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6d46:	ldrb	r3, [r0, #11]
    6d48:	cmp	r3, #15
    6d4a:	bne.n	6d1a <FatFile::remove()+0x4a>
        order != (ldir->order & 0X1F) ||
    6d4c:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6d4e:	and.w	r3, r2, #31
    6d52:	cmp	r5, r3
    6d54:	bne.n	6d1a <FatFile::remove()+0x4a>
        order != (ldir->order & 0X1F) ||
    6d56:	ldrb	r3, [r0, #13]
    6d58:	cmp	r3, r7
    6d5a:	bne.n	6d1a <FatFile::remove()+0x4a>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    6d5c:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    6d5e:	ldr	r1, [r4, #8]
    6d60:	ldrb.w	r3, [r1, #40]	; 0x28
    6d64:	orr.w	r3, r3, #1
    6d68:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    6d6c:	lsls	r3, r2, #25
    6d6e:	bpl.n	6d78 <FatFile::remove()+0xa8>
      if (!m_vol->cacheSync()) {
    6d70:	ldr	r0, [r4, #8]
    6d72:	bl	5584 <FatPartition::cacheSync()>
    6d76:	b.n	6d7e <FatFile::remove()+0xae>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6d78:	adds	r5, #1
    6d7a:	uxtb	r5, r5
    6d7c:	b.n	6d30 <FatFile::remove()+0x60>
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
}
    6d7e:	add	sp, #44	; 0x2c
    6d80:	pop	{r4, r5, r6, r7, pc}

00006d82 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d82:	push	{r3, r4, r5, r6, r7, lr}
    6d84:	movs	r4, #0
    6d86:	mov	r6, r0
    6d88:	mov	r5, r1
    6d8a:	str	r4, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d8c:	ldr	r7, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d8e:	str	r4, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d90:	cbz	r7, 6db4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x32>
    m_fFile = new (m_fileMem) FatFile;
    6d92:	mov	r1, r0
    6d94:	movs	r0, #36	; 0x24
    6d96:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    6d9a:	strb	r4, [r0, #0]
    6d9c:	strb	r4, [r0, #1]
    6d9e:	strb	r4, [r0, #2]
    *m_fFile = *from.m_fFile;
    6da0:	mov	r4, r0
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    6da2:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    6da4:	ldr	r5, [r5, #56]	; 0x38
    6da6:	ldmia	r5!, {r0, r1, r2, r3}
    6da8:	stmia	r4!, {r0, r1, r2, r3}
    6daa:	ldmia	r5!, {r0, r1, r2, r3}
    6dac:	stmia	r4!, {r0, r1, r2, r3}
    6dae:	ldr	r3, [r5, #0]
    6db0:	str	r3, [r4, #0]
    6db2:	b.n	6de0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x5e>
  } else if (from.m_xFile) {
    6db4:	ldr	r3, [r1, #60]	; 0x3c
    6db6:	cbz	r3, 6de0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x5e>
    m_xFile = new (m_fileMem) ExFatFile;
    6db8:	mov	r1, r0
    6dba:	movs	r0, #56	; 0x38
    6dbc:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    6dc0:	strb.w	r7, [r0, #49]	; 0x31
    6dc4:	strb.w	r7, [r0, #50]	; 0x32
    6dc8:	strb.w	r7, [r0, #51]	; 0x33
    6dcc:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    6dce:	ldr	r3, [r5, #60]	; 0x3c
    6dd0:	add.w	r2, r3, #52	; 0x34
    6dd4:	ldr.w	r1, [r3], #4
    6dd8:	cmp	r3, r2
    6dda:	str.w	r1, [r0], #4
    6dde:	bne.n	6dd4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x52>
  }
}
    6de0:	mov	r0, r6
    6de2:	pop	{r3, r4, r5, r6, r7, pc}

00006de4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6de4:	push	{r4, lr}
    6de6:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6de8:	ldr	r0, [r0, #56]	; 0x38
    6dea:	cbz	r0, 6df2 <FsBaseFile::close()+0xe>
    6dec:	bl	5b94 <FatFile::close()>
    6df0:	cbnz	r0, 6e02 <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    6df2:	ldr	r0, [r4, #60]	; 0x3c
    6df4:	cbz	r0, 6e08 <FsBaseFile::close()+0x24>
    6df6:	bl	3986 <ExFatFile::close()>
    6dfa:	cbz	r0, 6e08 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6dfc:	movs	r3, #0
    6dfe:	str	r3, [r4, #60]	; 0x3c
    6e00:	pop	{r4, pc}
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    m_fFile = nullptr;
    6e02:	movs	r3, #0
    6e04:	str	r3, [r4, #56]	; 0x38
    return true;
    6e06:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
    6e08:	movs	r0, #0
}
    6e0a:	pop	{r4, pc}

00006e0c <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6e0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e10:	mov	r4, r0
    6e12:	mov	r7, r2
    6e14:	mov	r8, r3
  if (!vol) {
    6e16:	mov	r5, r1
    6e18:	cbnz	r1, 6e20 <FsBaseFile::open(FsVolume*, char const*, int)+0x14>
    return false;
    6e1a:	movs	r0, #0
    6e1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  close();
    6e20:	bl	6de4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6e24:	ldr.w	r6, [r5, #1152]	; 0x480
    6e28:	cbz	r6, 6e50 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6e2a:	mov	r1, r4
    6e2c:	movs	r0, #36	; 0x24
    6e2e:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    6e32:	movs	r2, #0
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6e34:	mov	r3, r8
    6e36:	strb	r2, [r0, #0]
    6e38:	strb	r2, [r0, #1]
    6e3a:	strb	r2, [r0, #2]
    6e3c:	mov	r2, r7
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6e3e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6e40:	ldr.w	r1, [r5, #1152]	; 0x480
    6e44:	bl	5c4c <FatFile::open(FatVolume*, char const*, int)>
    6e48:	cbz	r0, 6e84 <FsBaseFile::open(FsVolume*, char const*, int)+0x78>
      return true;
    6e4a:	movs	r0, #1
    6e4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    6e50:	ldr.w	r3, [r5, #1156]	; 0x484
    6e54:	cmp	r3, #0
    6e56:	beq.n	6e1a <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    m_xFile = new (m_fileMem) ExFatFile;
    6e58:	mov	r1, r4
    6e5a:	movs	r0, #56	; 0x38
    6e5c:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e60:	mov	r3, r8
    6e62:	strb.w	r6, [r0, #49]	; 0x31
    6e66:	mov	r2, r7
    6e68:	strb.w	r6, [r0, #50]	; 0x32
    6e6c:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6e70:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e72:	ldr.w	r1, [r5, #1156]	; 0x484
    6e76:	bl	4104 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6e7a:	cmp	r0, #0
    6e7c:	bne.n	6e4a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    }
    m_xFile = nullptr;
    6e7e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    6e80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
    6e84:	str	r0, [r4, #56]	; 0x38
    6e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e8a <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    6e8a:	push	{r3, r4, r5, r6, r7, lr}
    6e8c:	mov	r5, r1
    6e8e:	mov	r4, r0
    6e90:	mov	r7, r2
  close();
    6e92:	bl	6de4 <FsBaseFile::close()>
  if (dir->m_fFile) {
    6e96:	ldr	r6, [r5, #56]	; 0x38
    6e98:	cbz	r6, 6ebe <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6e9a:	mov	r1, r4
    6e9c:	movs	r0, #36	; 0x24
    6e9e:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    6ea2:	movs	r2, #0
    6ea4:	strb	r2, [r0, #0]
    6ea6:	strb	r2, [r0, #1]
    6ea8:	strb	r2, [r0, #2]
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    6eaa:	mov	r2, r7
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    6eac:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    6eae:	ldr	r1, [r5, #56]	; 0x38
    6eb0:	bl	5a2e <FatFile::openNext(FatFile*, int)>
    6eb4:	cbz	r0, 6eba <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    6eb6:	movs	r0, #1
    6eb8:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    6eba:	str	r0, [r4, #56]	; 0x38
    6ebc:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    6ebe:	ldr	r0, [r5, #60]	; 0x3c
    6ec0:	cbz	r0, 6ee6 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    6ec2:	mov	r1, r4
    6ec4:	movs	r0, #56	; 0x38
    6ec6:	bl	6fcc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    6eca:	mov	r2, r7
    6ecc:	strb.w	r6, [r0, #49]	; 0x31
    6ed0:	strb.w	r6, [r0, #50]	; 0x32
    6ed4:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    6ed8:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    6eda:	ldr	r1, [r5, #60]	; 0x3c
    6edc:	bl	4112 <ExFatFile::openNext(ExFatFile*, int)>
    6ee0:	cmp	r0, #0
    6ee2:	bne.n	6eb6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    6ee4:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    6ee6:	pop	{r3, r4, r5, r6, r7, pc}

00006ee8 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6ee8:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6eea:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6eec:	mov	r4, r0
  m_blockDev = blockDev;
    6eee:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    6ef2:	mov	r1, r0
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6ef4:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    6ef8:	mov.w	r0, #1152	; 0x480
    6efc:	bl	6fcc <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f00:	movs	r2, #1
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    6f02:	strb.w	r6, [r0, #1092]	; 0x444
    6f06:	mov	r5, r0
    6f08:	strb.w	r6, [r0, #1145]	; 0x479
    6f0c:	strb.w	r6, [r0, #1146]	; 0x47a
    6f10:	strb.w	r6, [r0, #1147]	; 0x47b
    6f14:	str.w	r0, [r4, #1156]	; 0x484
    6f18:	ldr.w	r1, [r4, #1160]	; 0x488
    6f1c:	bl	446c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f20:	ldr	r7, [pc, #116]	; (6f98 <FsVolume::begin(BlockDeviceInterface*)+0xb0>)
    6f22:	cbz	r0, 6f3c <FsVolume::begin(BlockDeviceInterface*)+0x54>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f24:	add.w	r6, r5, #1096	; 0x448
    6f28:	mov	r0, r6
    6f2a:	bl	3986 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6f2e:	mov	r1, r5
    6f30:	mov	r0, r6
    6f32:	bl	39da <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f36:	cbz	r0, 6f3c <FsVolume::begin(BlockDeviceInterface*)+0x54>
      return false;
    }
    if (setCwv || !m_cwv) {
    6f38:	ldr	r3, [pc, #96]	; (6f9c <FsVolume::begin(BlockDeviceInterface*)+0xb4>)
    6f3a:	b.n	6f82 <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f3c:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6f3e:	mov	r1, r4
    6f40:	movw	r0, #1132	; 0x46c
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f44:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6f48:	bl	6fcc <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f4c:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    6f4e:	strb	r6, [r0, #7]
    6f50:	mov	r5, r0
    6f52:	strb.w	r6, [r0, #1096]	; 0x448
    6f56:	strb.w	r6, [r0, #1097]	; 0x449
    6f5a:	strb.w	r6, [r0, #1098]	; 0x44a
    6f5e:	str.w	r0, [r4, #1152]	; 0x480
    6f62:	ldr.w	r1, [r4, #1160]	; 0x488
    6f66:	bl	6550 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f6a:	cbz	r0, 6f8e <FsVolume::begin(BlockDeviceInterface*)+0xa6>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f6c:	add.w	r6, r5, #1096	; 0x448
    6f70:	mov	r0, r6
    6f72:	bl	5b94 <FatFile::close()>
    return m_vwd.openRoot(this);
    6f76:	mov	r1, r5
    6f78:	mov	r0, r6
    6f7a:	bl	568a <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f7e:	cbz	r0, 6f8e <FsVolume::begin(BlockDeviceInterface*)+0xa6>
      return false;
    }
    if (setCwv || !m_cwv) {
    6f80:	ldr	r3, [pc, #28]	; (6fa0 <FsVolume::begin(BlockDeviceInterface*)+0xb8>)
    6f82:	ldr	r2, [r3, #0]
    6f84:	cbnz	r2, 6f88 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
      m_cwv = this;
    6f86:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6f88:	str	r4, [r7, #0]
  return true;
    6f8a:	movs	r0, #1
    6f8c:	pop	{r3, r4, r5, r6, r7, pc}
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6f8e:	movs	r0, #0
    6f90:	str	r0, [r7, #0]
  m_fVol = nullptr;
    6f92:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    6f96:	pop	{r3, r4, r5, r6, r7, pc}
    6f98:	.word	0x20003d88
    6f9c:	.word	0x20003d58
    6fa0:	.word	0x20003d8c

00006fa4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    6fa4:	push	{r3, r4, r5, lr}
    6fa6:	mov	r4, r0
    6fa8:	mov.w	r5, #1000	; 0x3e8
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    6fac:	movs	r0, #0
    6fae:	str	r5, [r4, #8]
    6fb0:	strb	r0, [r4, #4]
    6fb2:	strb	r0, [r4, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    6fb4:	str	r0, [r4, #72]	; 0x48
    6fb6:	str	r0, [r4, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6fb8:	mov	r0, r4
    6fba:	ldr	r5, [pc, #12]	; (6fc8 <FsVolume::open(char const*, int)+0x24>)
    6fbc:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    6fc0:	bl	6e0c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    6fc4:	mov	r0, r4
    6fc6:	pop	{r3, r4, r5, pc}
    6fc8:	.word	0x20000490

00006fcc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6fcc:	mov	r0, r1
    6fce:	bx	lr

00006fd0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6fd0:	ldrb	r0, [r0, #15]
    6fd2:	bx	lr

00006fd4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6fd4:	ldrb	r0, [r0, #17]
    6fd6:	bx	lr

00006fd8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6fd8:	ldr	r3, [r0, #0]
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6fda:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6fdc:	ldr	r4, [r3, #16]
    6fde:	movs	r3, #1
    6fe0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6fe2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6fe6:	bx	ip

00006fe8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6fe8:	ldrb	r0, [r0, #18]
    6fea:	bx	lr

00006fec <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6fec:	bx	lr

00006fee <SdSpiCard::~SdSpiCard()>:
    6fee:	push	{r4, lr}
    6ff0:	mov	r4, r0
    6ff2:	movs	r1, #20
    6ff4:	bl	a2c2 <operator delete(void*, unsigned int)>
    6ff8:	mov	r0, r4
    6ffa:	pop	{r4, pc}

00006ffc <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6ffc:	push	{r0, r1, r2, r3, r4, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6ffe:	ldr	r3, [r0, #0]
    7000:	mov	r1, sp
    7002:	ldr	r3, [r3, #60]	; 0x3c
    7004:	blx	r3
    7006:	cbz	r0, 7076 <SdSpiCard::sectorCount()+0x7a>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7008:	ldrb.w	r3, [sp]
    700c:	ands.w	r3, r3, #192	; 0xc0
    7010:	bne.n	7052 <SdSpiCard::sectorCount()+0x56>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7012:	ldrb.w	r0, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7016:	ldrb.w	r3, [sp, #7]
    701a:	and.w	r0, r0, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    701e:	ldrb.w	r2, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7022:	lsls	r3, r3, #2
    7024:	orr.w	r3, r3, r0, lsl #10
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7028:	ldrb.w	r0, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    702c:	orr.w	r0, r3, r0, lsr #6
    7030:	adds	r3, r0, #1
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7032:	ldrb.w	r0, [sp, #9]
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7036:	and.w	r0, r0, #3
    703a:	lsls	r0, r0, #1
    703c:	orr.w	r0, r0, r2, lsr #7
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7040:	ldrb.w	r2, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7044:	and.w	r2, r2, #15
    7048:	add	r0, r2
    704a:	subs	r0, #7
    704c:	lsl.w	r0, r3, r0
    7050:	b.n	7076 <SdSpiCard::sectorCount()+0x7a>
  } else if (csd->v2.csd_ver == 1) {
    7052:	cmp	r3, #64	; 0x40
    7054:	bne.n	7074 <SdSpiCard::sectorCount()+0x78>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7056:	ldrb.w	r0, [sp, #9]
    705a:	adds	r3, r0, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    705c:	ldrb.w	r0, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7060:	and.w	r0, r0, #63	; 0x3f
    7064:	add.w	r0, r3, r0, lsl #16
    7068:	ldrb.w	r3, [sp, #8]
    706c:	add.w	r0, r0, r3, lsl #8
    7070:	lsls	r0, r0, #10
    7072:	b.n	7076 <SdSpiCard::sectorCount()+0x7a>
    7074:	movs	r0, #0
}
    7076:	add	sp, #20
    7078:	ldr.w	pc, [sp], #4

0000707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriverPtr->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriverPtr->send(data);
    707c:	ldr	r3, [r0, #0]
    707e:	ldr	r3, [r3, #20]
    7080:	bx	r3

00007082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>:
  }
  void spiDeactivate() {
    m_spiDriverPtr->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriverPtr->receive();
    7082:	ldr	r3, [r0, #0]
    7084:	ldr	r3, [r3, #12]
    7086:	bx	r3

00007088 <SdSpiCard::spiStart()>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7088:	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    708a:	ldrb	r5, [r0, #16]
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    708c:	mov	r4, r0
  if (!m_spiActive) {
    708e:	cbnz	r5, 70ac <SdSpiCard::spiStart()+0x24>
    7090:	ldr	r0, [r0, #4]
    m_spiDriver.setSckSpeed(maxSck);
  }
  SdSpiDriver m_spiDriver;
#else  // SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriverPtr->activate();
    7092:	ldr	r3, [r0, #0]
    7094:	ldr	r3, [r3, #0]
    7096:	blx	r3
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7098:	mov	r1, r5
    709a:	ldrb	r0, [r4, #14]
    709c:	bl	17d4 <sdCsWrite(unsigned char, bool)>
    spiActivate();
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);    
    70a0:	movs	r1, #255	; 0xff
    70a2:	ldr	r0, [r4, #4]
    70a4:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    m_spiActive = true;
    70a8:	movs	r3, #1
    70aa:	strb	r3, [r4, #16]
    70ac:	pop	{r3, r4, r5, pc}

000070ae <SdSpiCard::spiStop()>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70ae:	ldrb	r3, [r0, #16]
    spiSend(0XFF);    
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    70b0:	push	{r4, lr}
    70b2:	mov	r4, r0
  if (m_spiActive) {
    70b4:	cbz	r3, 70d2 <SdSpiCard::spiStop()+0x24>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    70b6:	movs	r1, #1
    70b8:	ldrb	r0, [r0, #14]
    70ba:	bl	17d4 <sdCsWrite(unsigned char, bool)>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);        
    70be:	movs	r1, #255	; 0xff
    70c0:	ldr	r0, [r4, #4]
    70c2:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    70c6:	ldr	r0, [r4, #4]
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriverPtr->begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriverPtr->deactivate();
    70c8:	ldr	r3, [r0, #0]
    70ca:	ldr	r3, [r3, #8]
    70cc:	blx	r3
    spiDeactivate();
    m_spiActive = false;
    70ce:	movs	r3, #0
    70d0:	strb	r3, [r4, #16]
    70d2:	pop	{r4, pc}

000070d4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    70d4:	push	{r4, r5, r6, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70d6:	ldrb	r3, [r0, #12]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    70d8:	mov	r5, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70da:	cmp	r3, #1
    70dc:	beq.n	70fe <SdSpiCard::isBusy()+0x2a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool spiActive = m_spiActive;
    70de:	ldrb	r6, [r0, #16]
  if (!spiActive) {
    70e0:	cbnz	r6, 70e6 <SdSpiCard::isBusy()+0x12>
    spiStart();
    70e2:	bl	7088 <SdSpiCard::spiStart()>
  }
  bool rtn = 0XFF != spiReceive();
    70e6:	ldr	r0, [r5, #4]
    70e8:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    70ec:	subs.w	r4, r0, #255	; 0xff
    70f0:	it	ne
    70f2:	movne	r4, #1
  if (!spiActive) {
    70f4:	cbnz	r6, 7102 <SdSpiCard::isBusy()+0x2e>
    spiStop();
    70f6:	mov	r0, r5
    70f8:	bl	70ae <SdSpiCard::spiStop()>
    70fc:	b.n	7102 <SdSpiCard::isBusy()+0x2e>
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    70fe:	movs	r0, #0
    7100:	pop	{r4, r5, r6, pc}
  }
  bool rtn = 0XFF != spiReceive();
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    7102:	mov	r0, r4
}
    7104:	pop	{r4, r5, r6, pc}
	...

00007108 <SdSpiCard::readData(unsigned char*, unsigned int)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    7108:	ldr	r3, [pc, #100]	; (7170 <SdSpiCard::readData(unsigned char*, unsigned int)+0x68>)
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    710a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    710e:	ldr	r6, [r3, #0]
    7110:	mov	r4, r0
    7112:	mov	r7, r1
    7114:	mov	r8, r2
    7116:	mov	r5, r3

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7118:	uxth	r6, r6
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    711a:	ldr	r0, [r4, #4]
    711c:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    7120:	cmp	r0, #255	; 0xff
    7122:	strb	r0, [r4, #17]
    7124:	bne.n	7136 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2e>
    7126:	ldr	r3, [r5, #0]
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7128:	uxth	r3, r3
    712a:	subs	r3, r3, r6
    712c:	cmp.w	r3, #300	; 0x12c
    7130:	ble.n	711a <SdSpiCard::readData(unsigned char*, unsigned int)+0x12>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7132:	movs	r3, #29
    7134:	b.n	7150 <SdSpiCard::readData(unsigned char*, unsigned int)+0x48>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7136:	cmp	r0, #254	; 0xfe
    7138:	beq.n	713e <SdSpiCard::readData(unsigned char*, unsigned int)+0x36>
    713a:	movs	r3, #24
    713c:	b.n	7150 <SdSpiCard::readData(unsigned char*, unsigned int)+0x48>
    713e:	ldr	r0, [r4, #4]
  }
  uint8_t spiReceive() {
    return m_spiDriverPtr->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriverPtr->receive(buf, n);
    7140:	mov	r2, r8
    7142:	mov	r1, r7
    7144:	ldr	r3, [r0, #0]
    7146:	ldr	r3, [r3, #16]
    7148:	blx	r3
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    714a:	strb	r0, [r4, #17]
    714c:	cbz	r0, 715e <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    714e:	movs	r3, #37	; 0x25
  spiReceive();
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
    7150:	mov	r0, r4
    7152:	strb	r3, [r4, #15]
    7154:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    7158:	movs	r0, #0
}
    715a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
    715e:	ldr	r0, [r4, #4]
    7160:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
  spiReceive();
    7164:	ldr	r0, [r4, #4]
    7166:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    716a:	movs	r0, #1
    716c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7170:	.word	0x20037314

00007174 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7174:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7178:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    717a:	ldrb	r3, [r0, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    717c:	mov	r4, r0
    717e:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7180:	cmp	r3, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7182:	mov	r6, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7184:	bne.n	718c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    7186:	ldr	r3, [r0, #8]
    7188:	cmp	r3, r1
    718a:	beq.n	719e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    if (!writeStart(sector)) {
    718c:	ldr	r3, [r4, #0]
    718e:	mov	r1, r5
    7190:	mov	r0, r4
    7192:	ldr	r3, [r3, #80]	; 0x50
    7194:	blx	r3
    7196:	cbz	r0, 71cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7198:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    719a:	str	r5, [r4, #8]
    m_curState = WRITE_STATE;
    719c:	strb	r3, [r4, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    719e:	movs	r5, #0
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    71a0:	cmp	r5, r7
    71a2:	add.w	r1, r6, r5, lsl #9
    71a6:	beq.n	71b6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
    if (!writeData(src)) {
    71a8:	ldr	r3, [r4, #0]
    71aa:	mov	r0, r4
    71ac:	ldr	r3, [r3, #76]	; 0x4c
    71ae:	blx	r3
    71b0:	cbz	r0, 71cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    71b2:	adds	r5, #1
    71b4:	b.n	71a0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    71b6:	ldr	r3, [r4, #8]
    71b8:	add	r5, r3
  return m_sharedSpi ? syncDevice() : true;
    71ba:	ldrb	r3, [r4, #13]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    71bc:	str	r5, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    71be:	cbz	r3, 71d8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x64>
    71c0:	ldr	r3, [r4, #0]
    71c2:	mov	r0, r4
    71c4:	ldr	r3, [r3, #28]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    71c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    71ca:	bx	r3
  }
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
    71cc:	mov	r0, r4
    71ce:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    71d2:	movs	r0, #0
    71d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    71d8:	movs	r0, #1
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    71da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071de <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    71de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71e2:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    71e4:	ldrb	r3, [r0, #12]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    71e6:	mov	r4, r0
    71e8:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    71ea:	cmp	r3, #2
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    71ec:	mov	r6, r2
    71ee:	ldr.w	r8, [sp, #32]
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    71f2:	bne.n	71fa <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    71f4:	ldr	r3, [r0, #8]
    71f6:	cmp	r3, r1
    71f8:	beq.n	720c <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
    if (!writeStart(sector)) {
    71fa:	ldr	r3, [r4, #0]
    71fc:	mov	r1, r5
    71fe:	mov	r0, r4
    7200:	ldr	r3, [r3, #80]	; 0x50
    7202:	blx	r3
    7204:	cbz	r0, 7242 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7206:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    7208:	str	r5, [r4, #8]
    m_curState = WRITE_STATE;
    720a:	strb	r3, [r4, #12]
    720c:	add.w	r9, r5, r6
  }
  for (size_t i = 0; i < ns; i++) {
    7210:	cmp	r5, r9
    7212:	beq.n	722c <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    7214:	mov	r1, r8
    7216:	mov	r0, r5
    7218:	blx	r7
    if (!writeData(src)) {
    721a:	ldr	r3, [r4, #0]
    721c:	mov	r1, r0
    721e:	mov	r0, r4
    7220:	ldr	r3, [r3, #76]	; 0x4c
    7222:	adds	r5, #1
    7224:	blx	r3
    7226:	cmp	r0, #0
    7228:	bne.n	7210 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    722a:	b.n	7242 <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
      goto fail;
    }
  }
  m_curSector += ns;
    722c:	ldr	r3, [r4, #8]
    722e:	add	r6, r3
  return m_sharedSpi ? syncDevice() : true;
    7230:	ldrb	r3, [r4, #13]
    const uint8_t *src = callback(sector + i, context);
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7232:	str	r6, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    7234:	cbz	r3, 724e <SdSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x70>
    7236:	ldr	r3, [r4, #0]
    7238:	mov	r0, r4
    723a:	ldr	r3, [r3, #28]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    723c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7240:	bx	r3
  }
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
    7242:	mov	r0, r4
    7244:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    7248:	movs	r0, #0
    724a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    724e:	movs	r0, #1
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    7250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007254 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    7254:	push	{r3, r4, r5, r6, r7, lr}
    7256:	ldr	r3, [pc, #40]	; (7280 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    7258:	mov	r7, r0
    725a:	mov	r6, r1
    725c:	ldr	r5, [r3, #0]
    725e:	mov	r4, r3
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7260:	uxth	r5, r5
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7262:	ldr	r0, [r7, #4]
    7264:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    7268:	cmp	r0, #255	; 0xff
    726a:	beq.n	727a <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    726c:	ldr	r3, [r4, #0]
    if (isTimedOut(t0, timeoutMS)) {
    726e:	uxth	r3, r3
    7270:	subs	r3, r3, r5
    7272:	cmp	r3, r6
    7274:	ble.n	7262 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
      return false;
    7276:	movs	r0, #0
    7278:	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  return true;
    727a:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    727c:	pop	{r3, r4, r5, r6, r7, pc}
    727e:	nop
    7280:	.word	0x20037314

00007284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7284:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7286:	ldrb	r3, [r0, #12]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7288:	mov	r4, r0
    728a:	mov	r5, r1
    728c:	str	r2, [sp, #4]
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    728e:	cbz	r3, 729c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>
    7290:	ldr	r3, [r0, #0]
    7292:	ldr	r3, [r3, #28]
    7294:	blx	r3
    7296:	cbnz	r0, 729c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>
    return 0XFF;
    7298:	movs	r0, #255	; 0xff
    729a:	b.n	72fe <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7a>
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    729c:	ldrb	r3, [r4, #16]
    729e:	cbnz	r3, 72a6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    spiStart();
    72a0:	mov	r0, r4
    72a2:	bl	7088 <SdSpiCard::spiStart()>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    72a6:	cbz	r5, 72b2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    72a8:	mov.w	r1, #300	; 0x12c
    72ac:	mov	r0, r4
    72ae:	bl	7254 <SdSpiCard::waitNotBusy(unsigned short)>
    72b2:	add.w	r6, sp, #7
    72b6:	add.w	r7, sp, #3

  // send message
  spiSend(buf, 6);
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
    72ba:	orr.w	r1, r5, #64	; 0x40
    72be:	ldr	r0, [r4, #4]
    72c0:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
    72c4:	ldrb.w	r1, [r6], #-1
    72c8:	ldr	r0, [r4, #4]
    72ca:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    72ce:	cmp	r7, r6
    72d0:	bne.n	72c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x40>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    72d2:	cmp	r5, #0
    72d4:	ldr	r0, [r4, #4]
#endif  // USE_SD_CRC

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();
    72d6:	mov.w	r5, #11
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    72da:	ite	eq
    72dc:	moveq	r1, #149	; 0x95
    72de:	movne	r1, #135	; 0x87
    72e0:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
#endif  // USE_SD_CRC

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();
    72e4:	ldr	r0, [r4, #4]
    72e6:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    72ea:	ldr	r0, [r4, #4]
    72ec:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    72f0:	lsls	r3, r0, #24
    72f2:	strb	r0, [r4, #17]
    72f4:	bpl.n	72fe <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7a>
    72f6:	subs	r5, #1
    72f8:	ands.w	r5, r5, #255	; 0xff
    72fc:	bne.n	72ea <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x66>
  }
  return m_status;
}
    72fe:	add	sp, #12
    7300:	pop	{r4, r5, r6, r7, pc}

00007302 <SdSpiCard::cardAcmd(unsigned char, unsigned long)>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    7302:	push	{r4, r5, r6, lr}
    7304:	mov	r4, r0
    7306:	mov	r5, r1
    7308:	mov	r6, r2
    cardCommand(CMD55, 0);
    730a:	movs	r1, #55	; 0x37
    730c:	movs	r2, #0
    730e:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7312:	mov	r2, r6
    7314:	mov	r1, r5
    7316:	mov	r0, r4
  }
    7318:	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
    731c:	b.w	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>

00007320 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    7320:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7324:	sub	sp, #32
    7326:	mov	r4, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    7328:	mov.w	sl, #0
    732c:	ldr	r6, [pc, #408]	; (74c8 <SdSpiCard::begin(SdSpiConfig)+0x1a8>)
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    732e:	add	r5, sp, #4
    7330:	ldr.w	r8, [r6]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    7334:	strb.w	sl, [r4, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    7338:	strb.w	sl, [r4, #15]
  m_type = 0;
    733c:	strb.w	sl, [r4, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    7340:	stmia.w	r5, {r1, r2, r3}
    7344:	ldrb.w	r0, [sp, #4]
    7348:	ldr	r3, [sp, #12]
    734a:	ldrb.w	r9, [sp, #5]
    734e:	ldr	r7, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    7350:	strb	r0, [r4, #14]
#if SPI_DRIVER_SELECT >= 2
  m_spiDriverPtr = spiConfig.spiPort;
    7352:	str	r3, [r4, #4]
  if (!m_spiDriverPtr) {
    7354:	cbnz	r3, 735a <SdSpiCard::begin(SdSpiConfig)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7356:	movs	r3, #42	; 0x2a
    7358:	b.n	7490 <SdSpiCard::begin(SdSpiConfig)+0x170>
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    735a:	bl	17b4 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    735e:	movs	r1, #1
    7360:	ldrb	r0, [r4, #14]
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    7362:	and.w	r9, r9, #1
    7366:	bl	17d4 <sdCsWrite(unsigned char, bool)>
    736a:	ldr	r0, [r4, #4]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
  }
  void spiSetSckSpeed(uint32_t maxSck) {
    m_spiDriverPtr->setSckSpeed(maxSck);
    736c:	ldr	r1, [pc, #348]	; (74cc <SdSpiCard::begin(SdSpiConfig)+0x1ac>)
    736e:	eor.w	r9, r9, #1
    7372:	ldr	r3, [r0, #0]
    7374:	ldr	r3, [r3, #28]
    7376:	blx	r3
    7378:	ldr.w	lr, [r4, #4]
    737c:	add	r3, sp, #20
    737e:	ldmia.w	r5, {r0, r1, r2}
    7382:	stmia.w	r3, {r0, r1, r2}
#else  // SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriverPtr->activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriverPtr->begin(spiConfig);
    7386:	ldr.w	r2, [lr]
    738a:	mov	r0, lr
    738c:	ldr	r5, [r2, #4]
    738e:	ldmia	r3, {r1, r2, r3}
    7390:	blx	r5
#else  // ENABLE_DEDICATED_SPI
  // m_sharedSpi is a static const bool in this case.
  static_assert(m_sharedSpi == true, "m_sharedSpi bug");
#endif  // ENABLE_DEDICATED_SPI
  spiStart();
    7392:	mov	r0, r4
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    7394:	strb.w	sl, [r4, #12]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7398:	movs	r5, #10
  m_sharedSpi = spiOptionShared(spiConfig.options);
    739a:	strb.w	r9, [r4, #13]
#else  // ENABLE_DEDICATED_SPI
  // m_sharedSpi is a static const bool in this case.
  static_assert(m_sharedSpi == true, "m_sharedSpi bug");
#endif  // ENABLE_DEDICATED_SPI
  spiStart();
    739e:	bl	7088 <SdSpiCard::spiStart()>
    73a2:	movs	r1, #1
    73a4:	ldrb	r0, [r4, #14]
    73a6:	bl	17d4 <sdCsWrite(unsigned char, bool)>
    73aa:	subs	r5, #1

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
    73ac:	movs	r1, #255	; 0xff
    73ae:	ldr	r0, [r4, #4]
    73b0:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    73b4:	ands.w	r5, r5, #255	; 0xff
    73b8:	bne.n	73aa <SdSpiCard::begin(SdSpiConfig)+0x8a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    73ba:	mov	r1, r5
    73bc:	movs	r5, #10
    73be:	ldrb	r0, [r4, #14]
    73c0:	bl	17d4 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    73c4:	movs	r2, #0
    73c6:	mov	r0, r4
    73c8:	mov	r1, r2
    73ca:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73ce:	cmp	r0, #1
    73d0:	mov	r9, r0
    73d2:	beq.n	73fa <SdSpiCard::begin(SdSpiConfig)+0xda>
    73d4:	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    73d6:	ands.w	r5, r5, #255	; 0xff
    73da:	bne.n	73e0 <SdSpiCard::begin(SdSpiConfig)+0xc0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73dc:	movs	r3, #1
    73de:	b.n	7490 <SdSpiCard::begin(SdSpiConfig)+0x170>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    73e0:	mov.w	r9, #520	; 0x208
    73e4:	movs	r1, #253	; 0xfd
    73e6:	ldr	r0, [r4, #4]
    73e8:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    // finish block transfer
    for (int i = 0; i < 520; i++) {
      spiReceive();
    73ec:	ldr	r0, [r4, #4]
    73ee:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    73f2:	subs.w	r9, r9, #1
    73f6:	bne.n	73ec <SdSpiCard::begin(SdSpiConfig)+0xcc>
    73f8:	b.n	73c4 <SdSpiCard::begin(SdSpiConfig)+0xa4>
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    73fa:	mov.w	r2, #426	; 0x1aa
    73fe:	movs	r1, #8
    7400:	mov	r0, r4
    7402:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7406:	lsls	r3, r0, #29
    7408:	bmi.n	7428 <SdSpiCard::begin(SdSpiConfig)+0x108>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    740a:	movs	r3, #2
    740c:	movs	r5, #4
    740e:	strb	r3, [r4, #18]
    7410:	subs	r5, #1
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    7412:	ldr	r0, [r4, #4]
    7414:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    7418:	strb	r0, [r4, #17]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    741a:	ands.w	r5, r5, #255	; 0xff
    741e:	bne.n	7410 <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    7420:	cmp	r0, #170	; 0xaa
    7422:	beq.n	742c <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7424:	movs	r3, #6
    7426:	b.n	7490 <SdSpiCard::begin(SdSpiConfig)+0x170>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    7428:	strb.w	r9, [r4, #18]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    742c:	ldr	r3, [r4, #0]
    742e:	mov	r0, r4
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    7430:	uxth.w	r8, r8
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7434:	ldr	r3, [r3, #72]	; 0x48
    7436:	blx	r3
    7438:	cmp	r0, #2
    743a:	ite	eq
    743c:	moveq.w	r5, #1073741824	; 0x40000000
    7440:	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7442:	mov	r2, r5
    7444:	movs	r1, #41	; 0x29
    7446:	mov	r0, r4
    7448:	bl	7302 <SdSpiCard::cardAcmd(unsigned char, unsigned long)>
    744c:	mov	r9, r0
    744e:	cbz	r0, 7462 <SdSpiCard::begin(SdSpiConfig)+0x142>
    7450:	ldr	r3, [r6, #0]
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    7452:	uxth	r3, r3
    7454:	rsb	r3, r8, r3
    7458:	cmp.w	r3, #2000	; 0x7d0
    745c:	ble.n	7442 <SdSpiCard::begin(SdSpiConfig)+0x122>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    745e:	movs	r3, #23
    7460:	b.n	7490 <SdSpiCard::begin(SdSpiConfig)+0x170>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    7462:	ldr	r3, [r4, #0]
    7464:	mov	r0, r4
    7466:	ldr	r3, [r3, #72]	; 0x48
    7468:	blx	r3
    746a:	cmp	r0, #2
    746c:	beq.n	7482 <SdSpiCard::begin(SdSpiConfig)+0x162>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
    746e:	mov	r0, r4
    7470:	bl	70ae <SdSpiCard::spiStop()>
    7474:	ldr	r0, [r4, #4]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
  }
  void spiSetSckSpeed(uint32_t maxSck) {
    m_spiDriverPtr->setSckSpeed(maxSck);
    7476:	mov	r1, r7
    7478:	ldr	r3, [r0, #0]
    747a:	ldr	r3, [r3, #28]
    747c:	blx	r3
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    747e:	movs	r0, #1
    7480:	b.n	74c2 <SdSpiCard::begin(SdSpiConfig)+0x1a2>
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    7482:	mov	r2, r9
    7484:	movs	r1, #58	; 0x3a
    7486:	mov	r0, r4
    7488:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    748c:	cbz	r0, 749c <SdSpiCard::begin(SdSpiConfig)+0x17c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    748e:	movs	r3, #18
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
    7490:	mov	r0, r4
    7492:	strb	r3, [r4, #15]
    7494:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    7498:	movs	r0, #0
    749a:	b.n	74c2 <SdSpiCard::begin(SdSpiConfig)+0x1a2>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    749c:	ldr	r0, [r4, #4]
    749e:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    74a2:	and.w	r0, r0, #192	; 0xc0
    74a6:	cmp	r0, #192	; 0xc0
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    74a8:	ldr	r0, [r4, #4]
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    74aa:	itt	eq
    74ac:	moveq	r3, #3
    74ae:	strbeq	r3, [r4, #18]
    74b0:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    74b4:	ldr	r0, [r4, #4]
    74b6:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    74ba:	ldr	r0, [r4, #4]
    74bc:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    74c0:	b.n	746e <SdSpiCard::begin(SdSpiConfig)+0x14e>
  return true;

 fail:
  spiStop();
  return false;
}
    74c2:	add	sp, #32
    74c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74c8:	.word	0x20037314
    74cc:	.word	0x00061a80

000074d0 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    74d0:	push	{r4, r5, r6, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    74d2:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    74d4:	mov	r6, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    74d6:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    74d8:	mov	r4, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    74da:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    74de:	cbz	r0, 74ee <SdSpiCard::readOCR(unsigned long*)+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74e0:	movs	r3, #18
  }
  spiStop();
  return true;

 fail:
  spiStop();
    74e2:	mov	r0, r4
    74e4:	strb	r3, [r4, #15]
    74e6:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    74ea:	movs	r0, #0
    74ec:	pop	{r4, r5, r6, pc}
    74ee:	adds	r5, r6, #4
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    74f0:	ldr	r0, [r4, #4]
    74f2:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    74f6:	strb.w	r0, [r5, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    74fa:	cmp	r5, r6
    74fc:	bne.n	74f0 <SdSpiCard::readOCR(unsigned long*)+0x20>
    p[3 - i] = spiReceive();
  }
  spiStop();
    74fe:	mov	r0, r4
    7500:	bl	70ae <SdSpiCard::spiStop()>
  return true;
    7504:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    7506:	pop	{r4, r5, r6, pc}

00007508 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7508:	push	{r3, r4, r5, lr}
    750a:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    750c:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    750e:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    7510:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7514:	cbz	r0, 751c <SdSpiCard::readRegister(unsigned char, void*)+0x14>
    7516:	movs	r3, #27
    7518:	strb	r3, [r4, #15]
    751a:	b.n	7532 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    751c:	mov	r1, r5
    751e:	movs	r2, #16
    7520:	mov	r0, r4
    7522:	bl	7108 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7526:	mov	r5, r0
    7528:	cbz	r0, 7532 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    goto fail;
  }
  spiStop();
    752a:	mov	r0, r4
    752c:	bl	70ae <SdSpiCard::spiStop()>
  return true;
    7530:	b.n	753a <SdSpiCard::readRegister(unsigned char, void*)+0x32>

 fail:
  spiStop();
  return false;
    7532:	movs	r5, #0
  }
  spiStop();
  return true;

 fail:
  spiStop();
    7534:	mov	r0, r4
    7536:	bl	70ae <SdSpiCard::spiStop()>
  return false;
}
    753a:	mov	r0, r5
    753c:	pop	{r3, r4, r5, pc}

0000753e <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    753e:	mov	r2, r1
    7540:	movs	r1, #9
    7542:	b.w	7508 <SdSpiCard::readRegister(unsigned char, void*)>

00007546 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7546:	mov	r2, r1
    7548:	movs	r1, #10
    754a:	b.w	7508 <SdSpiCard::readRegister(unsigned char, void*)>

0000754e <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    754e:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7550:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7552:	mov	r5, r1
    7554:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7556:	ldr	r3, [r3, #72]	; 0x48
    7558:	blx	r3
    755a:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    755c:	mov.w	r1, #18
    7560:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    7562:	it	ne
    7564:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD18, sector)) {
    7566:	mov	r2, r5
    7568:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    756c:	cbz	r0, 757c <SdSpiCard::readStart(unsigned long)+0x2e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    756e:	movs	r3, #12
    goto fail;
  }
  return true;

 fail:
  spiStop();
    7570:	mov	r0, r4
    7572:	strb	r3, [r4, #15]
    7574:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    7578:	movs	r0, #0
    757a:	pop	{r3, r4, r5, pc}
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
    757c:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    757e:	pop	{r3, r4, r5, pc}

00007580 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7580:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7584:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7586:	ldrb	r3, [r0, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7588:	mov	r4, r0
    758a:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    758c:	cmp	r3, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    758e:	mov	r6, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7590:	bne.n	7598 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    7592:	ldr	r3, [r0, #8]
    7594:	cmp	r3, r1
    7596:	beq.n	75ae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!readStart(sector)) {
    7598:	mov	r1, r5
    759a:	mov	r0, r4
    759c:	bl	754e <SdSpiCard::readStart(unsigned long)>
    75a0:	cbnz	r0, 75a8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    75a2:	movs	r0, #0
    75a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    75a8:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    75aa:	str	r5, [r4, #8]
    m_curState = READ_STATE;
    75ac:	strb	r3, [r4, #12]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    75ae:	movs	r5, #0
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    75b0:	cmp	r5, r7
    75b2:	add.w	r1, r6, r5, lsl #9
    75b6:	beq.n	75ca <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if (!readData(dst, 512)) {
    75b8:	mov.w	r2, #512	; 0x200
    75bc:	mov	r0, r4
    75be:	bl	7108 <SdSpiCard::readData(unsigned char*, unsigned int)>
    75c2:	cmp	r0, #0
    75c4:	beq.n	75a2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    75c6:	adds	r5, #1
    75c8:	b.n	75b0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x30>
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    75ca:	ldr	r3, [r4, #8]
    75cc:	add	r5, r3
  return m_sharedSpi ? syncDevice() : true;
    75ce:	ldrb	r3, [r4, #13]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    75d0:	str	r5, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    75d2:	cbz	r3, 75e0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    75d4:	ldr	r3, [r4, #0]
    75d6:	mov	r0, r4
    75d8:	ldr	r3, [r3, #28]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    75da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    75de:	bx	r3
    75e0:	movs	r0, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    75e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000075e6 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    75e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75ea:	mov	r6, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    75ec:	ldrb	r3, [r0, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    75ee:	mov	r4, r0
    75f0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    75f2:	cmp	r3, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    75f4:	mov	r7, r2
    75f6:	ldr.w	r8, [sp, #32]
    75fa:	ldr.w	r9, [sp, #36]	; 0x24
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    75fe:	bne.n	7606 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    7600:	ldr	r3, [r0, #8]
    7602:	cmp	r3, r1
    7604:	beq.n	761c <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
    if (!readStart(sector)) {
    7606:	mov	r1, r5
    7608:	mov	r0, r4
    760a:	bl	754e <SdSpiCard::readStart(unsigned long)>
    760e:	cbnz	r0, 7616 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x30>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    7610:	movs	r0, #0
    7612:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7616:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    7618:	str	r5, [r4, #8]
    m_curState = READ_STATE;
    761a:	strb	r3, [r4, #12]
    761c:	add.w	sl, r5, r6
  }
  for (size_t i = 0; i < ns; i++) {
    7620:	cmp	r5, sl
    7622:	beq.n	7640 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    if (readData(dst, 512)) {
    7624:	mov.w	r2, #512	; 0x200
    7628:	mov	r1, r7
    762a:	mov	r0, r4
    762c:	bl	7108 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7630:	cmp	r0, #0
    7632:	beq.n	7610 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2a>
      callback(sector + i, dst, context);
    7634:	mov	r0, r5
    7636:	mov	r2, r9
    7638:	mov	r1, r7
    763a:	adds	r5, #1
    763c:	blx	r8
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++) {
    763e:	b.n	7620 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3a>
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    7640:	ldr	r3, [r4, #8]
    7642:	add	r6, r3
  return m_sharedSpi ? syncDevice() : true;
    7644:	ldrb	r3, [r4, #13]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    7646:	str	r6, [r4, #8]
  return m_sharedSpi ? syncDevice() : true;
    7648:	cbz	r3, 7656 <SdSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x70>
    764a:	ldr	r3, [r4, #0]
    764c:	mov	r0, r4
    764e:	ldr	r3, [r3, #28]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    7650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7654:	bx	r3
    7656:	movs	r0, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    7658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000765c <SdSpiCard::readStop()>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    765c:	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
    765e:	movs	r2, #0
    7660:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7662:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7664:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7668:	cbz	r0, 7678 <SdSpiCard::readStop()+0x1c>
    766a:	movs	r3, #9
  }
  spiStop();
  return true;

 fail:
  spiStop();
    766c:	mov	r0, r4
    766e:	strb	r3, [r4, #15]
    7670:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    7674:	movs	r0, #0
    7676:	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
    7678:	mov	r0, r4
    767a:	bl	70ae <SdSpiCard::spiStop()>
  return true;
    767e:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    7680:	pop	{r4, pc}

00007682 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    7682:	ldrb	r2, [r0, #12]
  m_curState = IDLE_STATE;
    7684:	movs	r1, #0
  if (state == WRITE_STATE) {
    7686:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    7688:	strb	r1, [r0, #12]
  if (state == WRITE_STATE) {
    768a:	bne.n	7692 <SdSpiCard::syncDevice()+0x10>
    return writeStop();
    768c:	ldr	r3, [r0, #0]
    768e:	ldr	r3, [r3, #84]	; 0x54
    7690:	bx	r3
  }
  if (state == READ_STATE) {
    7692:	cmp	r2, #1
    7694:	bne.n	769a <SdSpiCard::syncDevice()+0x18>
    return readStop();
    7696:	b.w	765c <SdSpiCard::readStop()>
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    769a:	movs	r0, #1
    769c:	bx	lr

0000769e <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    769e:	push	{r3, r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    76a0:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    76a2:	mov	r5, r1
    76a4:	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    76a6:	ldr	r3, [r3, #72]	; 0x48
    76a8:	blx	r3
    76aa:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    76ac:	mov.w	r1, #25
    76b0:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    76b2:	it	ne
    76b4:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, sector)) {
    76b6:	mov	r2, r5
    76b8:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    76bc:	cbz	r0, 76cc <SdSpiCard::writeStart(unsigned long)+0x2e>
    76be:	movs	r3, #14
    goto fail;
  }
  return true;

 fail:
  spiStop();
    76c0:	mov	r0, r4
    76c2:	strb	r3, [r4, #15]
    76c4:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    76c8:	movs	r0, #0
    76ca:	pop	{r3, r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    76cc:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    76ce:	pop	{r3, r4, r5, pc}

000076d0 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    76d0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    76d2:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    76d4:	mov	r6, r1
  csd_t csd;
  if (!readCSD(&csd)) {
    76d6:	mov	r1, sp
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    76d8:	mov	r4, r0
  csd_t csd;
  if (!readCSD(&csd)) {
    76da:	ldr	r3, [r3, #60]	; 0x3c
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    76dc:	mov	r5, r2
  csd_t csd;
  if (!readCSD(&csd)) {
    76de:	blx	r3
    76e0:	cbz	r0, 7744 <SdSpiCard::erase(unsigned long, unsigned long)+0x74>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    76e2:	ldrb.w	r3, [sp, #10]
    76e6:	lsls	r2, r3, #25
    76e8:	bmi.n	7704 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    76ea:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    76ee:	ldrb.w	r2, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    76f2:	lsls	r3, r3, #1
    76f4:	orr.w	r3, r3, r2, lsr #7
    76f8:	adds	r2, r5, #1
    76fa:	orrs	r2, r6
    76fc:	tst	r3, r2
    76fe:	beq.n	7704 <SdSpiCard::erase(unsigned long, unsigned long)+0x34>
    7700:	movs	r3, #39	; 0x27
    7702:	b.n	7742 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    7704:	ldrb	r3, [r4, #18]
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7706:	movs	r1, #32
    7708:	mov	r0, r4
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    770a:	cmp	r3, #3
    firstSector <<= 9;
    770c:	itt	ne
    770e:	lslne	r6, r6, #9
    lastSector <<= 9;
    7710:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD32, firstSector)
    7712:	mov	r2, r6
    7714:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7718:	cbnz	r0, 774e <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    771a:	mov	r2, r5
    771c:	movs	r1, #33	; 0x21
    771e:	mov	r0, r4
    7720:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7724:	mov	r2, r0
    7726:	cbnz	r0, 774e <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
      || cardCommand(CMD38, 0)) {
    7728:	movs	r1, #38	; 0x26
    772a:	mov	r0, r4
    772c:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7730:	cbnz	r0, 774e <SdSpiCard::erase(unsigned long, unsigned long)+0x7e>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    7732:	movw	r1, #10000	; 0x2710
    7736:	mov	r0, r4
    7738:	bl	7254 <SdSpiCard::waitNotBusy(unsigned short)>
    773c:	mov	r5, r0
    773e:	cbnz	r0, 7752 <SdSpiCard::erase(unsigned long, unsigned long)+0x82>
    7740:	movs	r3, #40	; 0x28
    7742:	strb	r3, [r4, #15]
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;

 fail:
  spiStop();
    7744:	mov	r0, r4
  return false;
    7746:	movs	r5, #0
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;

 fail:
  spiStop();
    7748:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    774c:	b.n	7758 <SdSpiCard::erase(unsigned long, unsigned long)+0x88>
    774e:	movs	r3, #38	; 0x26
    7750:	b.n	7742 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
    7752:	mov	r0, r4
    7754:	bl	70ae <SdSpiCard::spiStop()>
  return true;

 fail:
  spiStop();
  return false;
}
    7758:	mov	r0, r5
    775a:	add	sp, #16
    775c:	pop	{r4, r5, r6, pc}

0000775e <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    775e:	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7760:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7764:	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7766:	bl	7254 <SdSpiCard::waitNotBusy(unsigned short)>
    776a:	mov	r5, r0
    776c:	cbz	r0, 7778 <SdSpiCard::writeStop()+0x1a>
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
    776e:	movs	r1, #253	; 0xfd
    7770:	ldr	r0, [r4, #4]
    7772:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    7776:	b.n	777c <SdSpiCard::writeStop()+0x1e>
    7778:	movs	r3, #30
    777a:	strb	r3, [r4, #15]
  spiStop();
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
    777c:	mov	r0, r4
    777e:	bl	70ae <SdSpiCard::spiStop()>
  return false;
}
    7782:	mov	r0, r5
    7784:	pop	{r3, r4, r5, pc}

00007786 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    7786:	push	{r3, r4, r5, lr}
    7788:	mov	r4, r0
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
    778a:	ldr	r0, [r0, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    778c:	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
    778e:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
    7792:	ldr	r0, [r4, #4]
  }
  void spiSend(uint8_t data) {
    m_spiDriverPtr->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriverPtr->send(buf, n);
    7794:	mov.w	r2, #512	; 0x200
    7798:	mov	r1, r5
    779a:	ldr	r3, [r0, #0]
    779c:	ldr	r3, [r3, #24]
    779e:	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
    77a0:	movs	r1, #255	; 0xff
    77a2:	ldr	r0, [r4, #4]
    77a4:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>
  spiSend(crc & 0XFF);
    77a8:	movs	r1, #255	; 0xff
    77aa:	ldr	r0, [r4, #4]
    77ac:	bl	707c <SdSpiCard::spiSend(unsigned char) [clone .isra.10] [clone .constprop.32]>

  m_status = spiReceive();
    77b0:	ldr	r0, [r4, #4]
    77b2:	bl	7082 <SdSpiCard::spiReceive() [clone .isra.8] [clone .constprop.34]>
    77b6:	strb	r0, [r4, #17]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    77b8:	and.w	r0, r0, #31
    77bc:	cmp	r0, #5
    77be:	beq.n	77ce <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    77c0:	movs	r3, #32
    goto fail;
  }
  return true;

 fail:
  spiStop();
    77c2:	mov	r0, r4
    77c4:	strb	r3, [r4, #15]
    77c6:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    77ca:	movs	r0, #0
    77cc:	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    77ce:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    77d0:	pop	{r3, r4, r5, pc}

000077d2 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    77d2:	push	{r3, r4, r5, lr}
    77d4:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    77d6:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    77da:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    77dc:	bl	7254 <SdSpiCard::waitNotBusy(unsigned short)>
    77e0:	cbnz	r0, 77e8 <SdSpiCard::writeData(unsigned char const*)+0x16>
    77e2:	movs	r3, #36	; 0x24
    77e4:	strb	r3, [r4, #15]
    77e6:	b.n	77f4 <SdSpiCard::writeData(unsigned char const*)+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    77e8:	mov	r2, r5
    77ea:	movs	r1, #252	; 0xfc
    77ec:	mov	r0, r4
    77ee:	bl	7786 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    77f2:	cbnz	r0, 77fc <SdSpiCard::writeData(unsigned char const*)+0x2a>
    goto fail;
  }
  return true;

 fail:
  spiStop();
    77f4:	mov	r0, r4
    77f6:	bl	70ae <SdSpiCard::spiStop()>
  return false;
    77fa:	movs	r0, #0
}
    77fc:	pop	{r3, r4, r5, pc}

000077fe <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    77fe:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7800:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7802:	ldr	r3, [r3, #72]	; 0x48
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7804:	mov	r5, r1
    7806:	mov	r4, r0
    7808:	mov	r6, r2
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    780a:	blx	r3
    780c:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    780e:	mov.w	r1, #24
    7812:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    7814:	it	ne
    7816:	lslne	r5, r5, #9
  }
  if (cardCommand(CMD24, sector)) {
    7818:	mov	r2, r5
    781a:	bl	7284 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    781e:	cbz	r0, 7826 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x28>
    7820:	movs	r3, #13
    7822:	strb	r3, [r4, #15]
    7824:	b.n	783c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3e>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    7826:	mov	r2, r6
    7828:	movs	r1, #254	; 0xfe
    782a:	mov	r0, r4
    782c:	bl	7786 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7830:	mov	r5, r0
    7832:	cbz	r0, 783c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3e>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_FLASH_PROGRAMMING

  spiStop();
    7834:	mov	r0, r4
    7836:	bl	70ae <SdSpiCard::spiStop()>
  return true;
    783a:	b.n	7844 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x46>

 fail:
  spiStop();
  return false;
    783c:	movs	r5, #0

  spiStop();
  return true;

 fail:
  spiStop();
    783e:	mov	r0, r4
    7840:	bl	70ae <SdSpiCard::spiStop()>
  return false;
}
    7844:	mov	r0, r5
    7846:	pop	{r4, r5, r6, pc}

00007848 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7848:	push	{r4}
    if (m_sharedSpi) {
    784a:	ldrb	r4, [r0, #13]
    784c:	cbz	r4, 7856 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    }
  }
    784e:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    7852:	b.w	77fe <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    } else {
      return writeSectors(sector, src, 1);
    7856:	ldr	r3, [r0, #0]
    7858:	ldr	r4, [r3, #36]	; 0x24
    785a:	movs	r3, #1
    785c:	mov	ip, r4
    }
  }
    785e:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    7862:	bx	ip

00007864 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7864:	ldr	r3, [pc, #28]	; (7884 <sdIrs()+0x20>)
    7866:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    7868:	ldr	r2, [pc, #28]	; (7888 <sdIrs()+0x24>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    786a:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    786c:	ldr	r0, [r3, #48]	; 0x30
    786e:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    7870:	ldr	r2, [r2, #0]
    7872:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    7874:	ldr	r2, [r3, #72]	; 0x48
    7876:	bic.w	r2, r2, #129	; 0x81
    787a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    787c:	ldr	r3, [pc, #12]	; (788c <sdIrs()+0x28>)
    787e:	strb	r1, [r3, #0]
    7880:	bx	lr
    7882:	nop
    7884:	.word	0x402c0000
    7888:	.word	0x20003d50
    788c:	.word	0x2003738e

00007890 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7890:	ldr	r3, [pc, #24]	; (78ac <gpioMux(unsigned char)+0x1c>)
    7892:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    7896:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    789a:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    789e:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    78a2:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    78a6:	str.w	r0, [r3, #456]	; 0x1c8
    78aa:	bx	lr
    78ac:	.word	0x401f8000

000078b0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    78b0:	ldr	r3, [pc, #12]	; (78c0 <isBusyCommandComplete()+0x10>)
    78b2:	ldr	r0, [pc, #16]	; (78c4 <isBusyCommandComplete()+0x14>)
    78b4:	ldr	r3, [r3, #48]	; 0x30
    78b6:	ands	r0, r3
}
    78b8:	clz	r0, r0
    78bc:	lsrs	r0, r0, #5
    78be:	bx	lr
    78c0:	.word	0x402c0000
    78c4:	.word	0x000f0001

000078c8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    78c8:	ldr	r3, [pc, #8]	; (78d4 <isBusyCommandInhibit()+0xc>)
    78ca:	ldr	r0, [r3, #36]	; 0x24
}
    78cc:	and.w	r0, r0, #1
    78d0:	bx	lr
    78d2:	nop
    78d4:	.word	0x402c0000

000078d8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    78d8:	ldr	r3, [pc, #12]	; (78e8 <isBusyDat()+0x10>)
    78da:	ldr	r0, [r3, #36]	; 0x24
    78dc:	eor.w	r0, r0, #16777216	; 0x1000000
}
    78e0:	ubfx	r0, r0, #24, #1
    78e4:	bx	lr
    78e6:	nop
    78e8:	.word	0x402c0000

000078ec <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    78ec:	ldr	r3, [pc, #4]	; (78f4 <isBusyDMA()+0x8>)
    78ee:	ldrb	r0, [r3, #0]
}
    78f0:	bx	lr
    78f2:	nop
    78f4:	.word	0x2003738e

000078f8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    78f8:	ldr	r3, [pc, #12]	; (7908 <isBusyFifoRead()+0x10>)
    78fa:	ldr	r0, [r3, #36]	; 0x24
    78fc:	eor.w	r0, r0, #2048	; 0x800
}
    7900:	ubfx	r0, r0, #11, #1
    7904:	bx	lr
    7906:	nop
    7908:	.word	0x402c0000

0000790c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    790c:	ldr	r3, [pc, #12]	; (791c <isBusyFifoWrite()+0x10>)
    790e:	ldr	r0, [r3, #36]	; 0x24
    7910:	eor.w	r0, r0, #1024	; 0x400
}
    7914:	ubfx	r0, r0, #10, #1
    7918:	bx	lr
    791a:	nop
    791c:	.word	0x402c0000

00007920 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7920:	ldr	r3, [pc, #12]	; (7930 <isBusyTransferComplete()+0x10>)
    7922:	ldr	r0, [pc, #16]	; (7934 <isBusyTransferComplete()+0x14>)
    7924:	ldr	r3, [r3, #48]	; 0x30
    7926:	ands	r0, r3
}
    7928:	clz	r0, r0
    792c:	lsrs	r0, r0, #5
    792e:	bx	lr
    7930:	.word	0x402c0000
    7934:	.word	0x117f0002

00007938 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7938:	mov.w	r3, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    793c:	movs	r2, #6
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    793e:	muls	r0, r3
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7940:	ldr	r3, [pc, #136]	; (79cc <setSdclk(unsigned long)+0x94>)
    7942:	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7944:	sub.w	r3, r3, #147456	; 0x24000
    7948:	ldr.w	r3, [r3, #256]	; 0x100
    794c:	ubfx	r1, r1, #11, #3
    7950:	and.w	r3, r3, #63	; 0x3f
    7954:	adds	r1, #1
    7956:	udiv	r2, r3, r2
    795a:	ldr	r3, [pc, #116]	; (79d0 <setSdclk(unsigned long)+0x98>)
    795c:	udiv	r3, r3, r2
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7960:	movs	r2, #1
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7962:	udiv	r1, r3, r1
    7966:	movs	r3, #9
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7968:	push	{r4, r5, lr}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    796a:	lsls	r4, r2, #4
    796c:	udiv	r4, r1, r4
    7970:	cmp	r0, r4
    7972:	bcc.n	797a <setSdclk(unsigned long)+0x42>
    7974:	movs	r4, #1
    7976:	mov	r3, r2
    7978:	b.n	798e <setSdclk(unsigned long)+0x56>
    797a:	subs	r3, #1
    797c:	beq.n	7974 <setSdclk(unsigned long)+0x3c>
    sdclkfs <<= 1;
    797e:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7980:	b.n	796a <setSdclk(unsigned long)+0x32>
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7982:	cmp	r4, #16
    7984:	add.w	r5, r3, r2
    7988:	beq.n	7996 <setSdclk(unsigned long)+0x5e>
    dvs++;
    798a:	adds	r4, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    798c:	mov	r3, r5
    798e:	udiv	r5, r1, r3
    7992:	cmp	r0, r5
    7994:	bcc.n	7982 <setSdclk(unsigned long)+0x4a>
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7996:	mov.w	r0, #1000	; 0x3e8
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    799a:	lsls	r2, r2, #7
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    799c:	muls	r3, r0
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    799e:	ldr	r0, [pc, #52]	; (79d4 <setSdclk(unsigned long)+0x9c>)
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    79a0:	and.w	r2, r2, #65280	; 0xff00
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    79a4:	udiv	r1, r1, r3
    79a8:	ldr	r3, [pc, #44]	; (79d8 <setSdclk(unsigned long)+0xa0>)
    79aa:	str	r1, [r3, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    79ac:	ldr	r1, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    79ae:	bic.w	r3, r1, #1044480	; 0xff000
    79b2:	bic.w	r3, r3, #4080	; 0xff0
    79b6:	orr.w	r3, r3, #917504	; 0xe0000
    79ba:	orrs	r2, r3
    79bc:	subs	r3, r4, #1
    79be:	orr.w	r3, r2, r3, lsl #4
    79c2:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    79c4:	ldr	r3, [r0, #36]	; 0x24
    79c6:	lsls	r3, r3, #28
    79c8:	bpl.n	79c4 <setSdclk(unsigned long)+0x8c>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    79ca:	pop	{r4, r5, pc}
    79cc:	.word	0x400fc000
    79d0:	.word	0x5e69ec00
    79d4:	.word	0x402c0000
    79d8:	.word	0x20002930

000079dc <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    79dc:	ldr	r3, [pc, #4]	; (79e4 <SdioCard::errorCode() const+0x8>)
    79de:	ldrb	r0, [r3, #0]
    79e0:	bx	lr
    79e2:	nop
    79e4:	.word	0x20001dfe

000079e8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    79e8:	ldr	r3, [pc, #4]	; (79f0 <SdioCard::errorData() const+0x8>)
    79ea:	ldr	r0, [r3, #0]
}
    79ec:	bx	lr
    79ee:	nop
    79f0:	.word	0x20003d50

000079f4 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    79f4:	ldr	r3, [pc, #20]	; (7a0c <SdioCard::readCID(CID*)+0x18>)
    79f6:	add.w	r2, r3, #16
    79fa:	ldr.w	r0, [r3], #4
    79fe:	cmp	r3, r2
    7a00:	str.w	r0, [r1], #4
    7a04:	bne.n	79fa <SdioCard::readCID(CID*)+0x6>
  return true;
}
    7a06:	movs	r0, #1
    7a08:	bx	lr
    7a0a:	nop
    7a0c:	.word	0x2003736e

00007a10 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    7a10:	ldr	r3, [pc, #20]	; (7a28 <SdioCard::readCSD(csd_t*)+0x18>)
    7a12:	add.w	r2, r3, #16
    7a16:	ldr.w	r0, [r3], #4
    7a1a:	cmp	r3, r2
    7a1c:	str.w	r0, [r1], #4
    7a20:	bne.n	7a16 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    7a22:	movs	r0, #1
    7a24:	bx	lr
    7a26:	nop
    7a28:	.word	0x2003737e

00007a2c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7a2c:	ldr	r3, [pc, #8]	; (7a38 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    7a2e:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7a30:	ldr	r3, [r3, #0]
    7a32:	str	r3, [r1, #0]
  return true;
}
    7a34:	bx	lr
    7a36:	nop
    7a38:	.word	0x20003d44

00007a3c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7a3c:	bx	lr
	...

00007a40 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7a40:	push	{r3, r4, r5, r6, r7, lr}
    7a42:	mov	r7, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7a44:	ldr	r5, [pc, #24]	; (7a60 <waitTimeout(bool (*)())+0x20>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7a46:	bl	999c <micros>
    7a4a:	mov	r6, r0
  while (fcn()) {
    7a4c:	blx	r7
    7a4e:	mov	r4, r0
    7a50:	cbz	r0, 7a5c <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7a52:	bl	999c <micros>
    7a56:	subs	r0, r0, r6
    7a58:	cmp	r0, r5
    7a5a:	bls.n	7a4c <waitTimeout(bool (*)())+0xc>
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7a5c:	mov	r0, r4
    7a5e:	pop	{r3, r4, r5, r6, r7, pc}
    7a60:	.word	0x000f4240

00007a64 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7a64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    7a68:	ldr	r4, [pc, #48]	; (7a9c <yieldTimeout(bool (*)())+0x38>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7a6a:	mov	r6, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7a6c:	ldr.w	r8, [pc, #48]	; 7aa0 <yieldTimeout(bool (*)())+0x3c>
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7a70:	str	r0, [r4, #0]
  uint32_t m = micros();
    7a72:	bl	999c <micros>
    7a76:	mov	r7, r0
  while (fcn()) {
    7a78:	blx	r6
    7a7a:	mov	r5, r0
    7a7c:	cbz	r0, 7a94 <yieldTimeout(bool (*)())+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7a7e:	bl	999c <micros>
    7a82:	subs	r0, r0, r7
    7a84:	cmp	r0, r8
    7a86:	bls.n	7a8e <yieldTimeout(bool (*)())+0x2a>
      m_busyFcn = 0;
    7a88:	movs	r3, #0
    7a8a:	str	r3, [r4, #0]
      return true;
    7a8c:	b.n	7a96 <yieldTimeout(bool (*)())+0x32>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    7a8e:	bl	9e60 <yield>
    7a92:	b.n	7a78 <yieldTimeout(bool (*)())+0x14>
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    7a94:	str	r0, [r4, #0]
  return false;  // Caller will set errorCode.
}
    7a96:	mov	r0, r5
    7a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a9c:	.word	0x20003d4c
    7aa0:	.word	0x000f4240

00007aa4 <SdioCard::~SdioCard()>:
    7aa4:	push	{r4, lr}
    7aa6:	mov	r4, r0
    7aa8:	movs	r1, #12
    7aaa:	bl	a2c2 <operator delete(void*, unsigned int)>
    7aae:	mov	r0, r4
    7ab0:	pop	{r4, pc}
	...

00007ab4 <enableGPIO(bool) [clone .part.0]>:
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
}
//------------------------------------------------------------------------------
// add speed strength args?
static void enableGPIO(bool enable) {
    7ab4:	push	{r3, lr}
                              IOMUXC_SW_PAD_CTL_PAD_SPEED(2);

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    7ab6:	movs	r0, #0
    7ab8:	bl	7890 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    7abc:	ldr	r3, [pc, #32]	; (7ae0 <enableGPIO(bool) [clone .part.0]+0x2c>)
    7abe:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    7ac2:	movw	r1, #4280	; 0x10b8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    7ac6:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    7aca:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    7ace:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    7ad2:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    7ad6:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    7ada:	str.w	r2, [r3, #952]	; 0x3b8
    7ade:	pop	{r3, pc}
    7ae0:	.word	0x401f8000

00007ae4 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7ae4:	ldr	r3, [pc, #20]	; (7afc <SdioCard::type() const+0x18>)
    7ae6:	ldrb	r3, [r3, #0]
    7ae8:	cbz	r3, 7af8 <SdioCard::type() const+0x14>
    7aea:	ldr	r3, [pc, #20]	; (7b00 <SdioCard::type() const+0x1c>)
    7aec:	ldrb	r3, [r3, #0]
    7aee:	cmp	r3, #0
    7af0:	ite	ne
    7af2:	movne	r0, #3
    7af4:	moveq	r0, #2
    7af6:	bx	lr
    7af8:	movs	r0, #1
}
    7afa:	bx	lr
    7afc:	.word	0x2003736b
    7b00:	.word	0x2003736c

00007b04 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7b04:	push	{r3, r4, r5, lr}
    7b06:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7b08:	ldr	r0, [pc, #80]	; (7b5c <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7b0a:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7b0c:	bl	7a40 <waitTimeout(bool (*)())>
    7b10:	cbnz	r0, 7b52 <cardCommand(unsigned long, unsigned long)+0x4e>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7b12:	ldr	r3, [pc, #76]	; (7b60 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7b14:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7b16:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7b18:	bpl.n	7b2a <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    7b1a:	ldr	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7b1c:	uxtb	r1, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    7b1e:	bic.w	r2, r2, #255	; 0xff
    7b22:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7b24:	ldr	r2, [r3, #72]	; 0x48
    7b26:	orrs	r2, r1
    7b28:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    7b2a:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7b2e:	ldr	r5, [pc, #48]	; (7b60 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    7b30:	ldr	r0, [pc, #48]	; (7b64 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7b32:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    7b34:	bl	7a40 <waitTimeout(bool (*)())>
    7b38:	cbnz	r0, 7b52 <cardCommand(unsigned long, unsigned long)+0x4e>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7b3a:	ldr	r2, [r5, #48]	; 0x30
    7b3c:	ldr	r3, [pc, #40]	; (7b68 <cardCommand(unsigned long, unsigned long)+0x64>)
    7b3e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7b40:	ldr	r2, [r3, #0]
    7b42:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7b44:	ldr	r2, [r3, #0]
    7b46:	lsls	r2, r2, #31
    7b48:	bpl.n	7b52 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7b4a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7b4c:	tst.w	r3, #983040	; 0xf0000
    7b50:	beq.n	7b56 <cardCommand(unsigned long, unsigned long)+0x52>
    7b52:	movs	r0, #0
    7b54:	pop	{r3, r4, r5, pc}
    7b56:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    7b58:	pop	{r3, r4, r5, pc}
    7b5a:	nop
    7b5c:	.word	0x000078c9
    7b60:	.word	0x402c0000
    7b64:	.word	0x000078b1
    7b68:	.word	0x20003d50

00007b6c <statusCMD13()>:
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
    7b6c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7b6e:	ldr	r3, [pc, #16]	; (7b80 <statusCMD13()+0x14>)
    7b70:	ldr	r0, [pc, #16]	; (7b84 <statusCMD13()+0x18>)
    7b72:	ldr	r1, [r3, #0]
    7b74:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7b78:	cbz	r0, 7b7e <statusCMD13()+0x12>
    7b7a:	ldr	r3, [pc, #12]	; (7b88 <statusCMD13()+0x1c>)
    7b7c:	ldr	r0, [r3, #16]
}
    7b7e:	pop	{r3, pc}
    7b80:	.word	0x20003d48
    7b84:	.word	0x0d1a0000
    7b88:	.word	0x402c0000

00007b8c <isBusyCMD13()>:
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7b8c:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    7b8e:	bl	7b6c <statusCMD13()>
    7b92:	eor.w	r0, r0, #256	; 0x100
}
    7b96:	ubfx	r0, r0, #8, #1
    7b9a:	pop	{r3, pc}

00007b9c <SdioCard::status()>:
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
    7b9c:	b.w	7b6c <statusCMD13()>

00007ba0 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7ba0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7ba2:	ldr	r3, [pc, #76]	; (7bf0 <readReg16(unsigned long, void*)+0x50>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7ba4:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7ba6:	ldr	r1, [r3, #0]
    7ba8:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7bac:	cbz	r0, 7bea <readReg16(unsigned long, void*)+0x4a>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7bae:	ldr	r3, [pc, #68]	; (7bf4 <readReg16(unsigned long, void*)+0x54>)
    7bb0:	add.w	r6, r5, #15
    7bb4:	ldr	r2, [r3, #16]
    7bb6:	str	r2, [sp, #0]
    7bb8:	ldr	r2, [r3, #20]
    7bba:	str	r2, [sp, #4]
    7bbc:	ldr	r2, [r3, #24]
    7bbe:	str	r2, [sp, #8]
    7bc0:	ldr	r3, [r3, #28]
    7bc2:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    7bc4:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7bc6:	bic.w	r4, r3, #3
    7bca:	add	r2, sp, #16
    7bcc:	add	r4, r2
    7bce:	and.w	r2, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7bd2:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7bd4:	lsls	r1, r2, #3
    7bd6:	ldr.w	r2, [r4, #-16]
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7bda:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7bdc:	lsr.w	r2, r2, r1
    7be0:	strb.w	r2, [r6, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7be4:	bne.n	7bc6 <readReg16(unsigned long, void*)+0x26>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    7be6:	movs	r3, #0
    7be8:	strb	r3, [r5, #15]
  return true;
}
    7bea:	add	sp, #16
    7bec:	pop	{r4, r5, r6, pc}
    7bee:	nop
    7bf0:	.word	0x20003d48
    7bf4:	.word	0x402c0000

00007bf8 <waitDmaStatus() [clone .part.5]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7bf8:	ldr	r3, [pc, #20]	; (7c10 <waitDmaStatus() [clone .part.5]+0x18>)
    7bfa:	ldr	r0, [r3, #0]
    7bfc:	ands.w	r0, r0, #2
    7c00:	beq.n	7c0e <waitDmaStatus() [clone .part.5]+0x16>
    7c02:	ldr	r3, [r3, #0]
    7c04:	ldr	r0, [pc, #12]	; (7c14 <waitDmaStatus() [clone .part.5]+0x1c>)
    7c06:	ands	r0, r3
    7c08:	clz	r0, r0
    7c0c:	lsrs	r0, r0, #5
}
    7c0e:	bx	lr
    7c10:	.word	0x20003d50
    7c14:	.word	0x117f0000

00007c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7c18:	push	{r3, r4, r5, r6, r7, lr}
    7c1a:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    7c1c:	lsls	r3, r2, #30
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7c1e:	mov	r6, r0
    7c20:	mov	r4, r1
    7c22:	mov	r7, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    7c24:	bne.n	7c28 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    7c26:	cbnz	r5, 7c34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c28:	movs	r2, #37	; 0x25
    7c2a:	ldr	r3, [pc, #104]	; (7c94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    7c2c:	strb	r2, [r3, #0]
  m_errorLine = line;
    7c2e:	mov.w	r2, #506	; 0x1fa
    7c32:	b.n	7c46 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2e>
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7c34:	ldr	r0, [pc, #96]	; (7c98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    7c36:	bl	7a64 <yieldTimeout(bool (*)())>
    7c3a:	cbz	r0, 7c4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c3c:	movs	r2, #10
    7c3e:	ldr	r3, [pc, #84]	; (7c94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    7c40:	strb	r2, [r3, #0]
  m_errorLine = line;
    7c42:	movw	r2, #509	; 0x1fd
    7c46:	ldr	r3, [pc, #84]	; (7c9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
    7c48:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7c4a:	b.n	7c8e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7c4c:	movs	r2, #1
    7c4e:	ldr	r3, [pc, #80]	; (7ca0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7c50:	lsls	r5, r5, #16
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7c52:	strb	r2, [r3, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7c54:	ldr	r2, [pc, #76]	; (7ca4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7c56:	ldr	r3, [pc, #80]	; (7ca8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7c58:	ands	r2, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7c5a:	str	r0, [r3, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7c5c:	orr.w	r2, r2, #512	; 0x200
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7c60:	ldr	r3, [pc, #72]	; (7cac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    7c62:	str	r7, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7c64:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7c66:	ldr	r2, [pc, #72]	; (7cb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    7c68:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7c6a:	ldr	r3, [pc, #72]	; (7cb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    7c6c:	ldrb	r3, [r3, #0]
    7c6e:	cbnz	r3, 7c74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5c>
    7c70:	lsls	r1, r4, #9
    7c72:	b.n	7c76 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    7c74:	mov	r1, r4
    7c76:	mov	r0, r6
    7c78:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7c7c:	cbz	r0, 7c8e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7c7e:	ldr	r0, [pc, #56]	; (7cb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    7c80:	bl	7a64 <yieldTimeout(bool (*)())>
    7c84:	cbnz	r0, 7c8e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7c86:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7c8a:	b.w	7bf8 <waitDmaStatus() [clone .part.5]>
    7c8e:	movs	r0, #0
    7c90:	pop	{r3, r4, r5, r6, r7, pc}
    7c92:	nop
    7c94:	.word	0x20001dfe
    7c98:	.word	0x00007b8d
    7c9c:	.word	0x20002934
    7ca0:	.word	0x2003738e
    7ca4:	.word	0x1fff0000
    7ca8:	.word	0x20003d50
    7cac:	.word	0x402c0000
    7cb0:	.word	0x117f0002
    7cb4:	.word	0x2003736c
    7cb8:	.word	0x000078ed

00007cbc <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7cbc:	ldr	r2, [pc, #92]	; (7d1c <SdioCard::sectorCount()+0x60>)
    7cbe:	ldrb	r3, [r2, #0]
    7cc0:	ands.w	r3, r3, #192	; 0xc0
    7cc4:	bne.n	7cfa <SdioCard::sectorCount()+0x3e>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7cc6:	ldrb	r0, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cc8:	ldrb	r3, [r2, #7]
    7cca:	and.w	r0, r0, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7cce:	ldrb	r1, [r2, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cd0:	lsls	r3, r3, #2
    7cd2:	orr.w	r3, r3, r0, lsl #10
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7cd6:	ldrb	r0, [r2, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cd8:	orr.w	r0, r3, r0, lsr #6
    7cdc:	adds	r3, r0, #1
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7cde:	ldrb	r0, [r2, #9]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7ce0:	ldrb	r2, [r2, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ce2:	and.w	r0, r0, #3
    7ce6:	and.w	r2, r2, #15
    7cea:	lsls	r0, r0, #1
    7cec:	orr.w	r0, r0, r1, lsr #7
    7cf0:	add	r0, r2
    7cf2:	subs	r0, #7
    7cf4:	lsl.w	r0, r3, r0
    7cf8:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    7cfa:	cmp	r3, #64	; 0x40
    7cfc:	bne.n	7d16 <SdioCard::sectorCount()+0x5a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7cfe:	ldrb	r0, [r2, #9]
    7d00:	adds	r3, r0, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7d02:	ldrb	r0, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7d04:	and.w	r0, r0, #63	; 0x3f
    7d08:	add.w	r0, r3, r0, lsl #16
    7d0c:	ldrb	r3, [r2, #8]
    7d0e:	add.w	r0, r0, r3, lsl #8
    7d12:	lsls	r0, r0, #10
    7d14:	bx	lr
  } else {
    return 0;
    7d16:	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    7d18:	bx	lr
    7d1a:	nop
    7d1c:	.word	0x2003737e

00007d20 <SdioCard::isBusy()>:
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    7d20:	ldrb	r3, [r0, #8]
    7d22:	lsls	r3, r3, #31
    7d24:	bpl.n	7d38 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7d26:	ldr	r3, [pc, #40]	; (7d50 <SdioCard::isBusy()+0x30>)
    7d28:	ldr	r3, [r3, #0]
    7d2a:	cbz	r3, 7d2e <SdioCard::isBusy()+0xe>
    7d2c:	bx	r3
    7d2e:	ldr	r3, [pc, #36]	; (7d54 <SdioCard::isBusy()+0x34>)
    7d30:	ldrb	r0, [r3, #0]
    7d32:	cbz	r0, 7d4e <SdioCard::isBusy()+0x2e>
    7d34:	b.w	7b8c <isBusyCMD13()>
  } else {
    if (m_transferActive) {
    7d38:	ldr	r3, [pc, #28]	; (7d58 <SdioCard::isBusy()+0x38>)
    7d3a:	ldrb	r3, [r3, #0]
    7d3c:	cbz	r3, 7d42 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    7d3e:	b.w	7920 <isBusyTransferComplete()>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7d42:	ldr	r3, [pc, #24]	; (7d5c <SdioCard::isBusy()+0x3c>)
    7d44:	ldr	r0, [r3, #36]	; 0x24
    7d46:	eor.w	r0, r0, #16777216	; 0x1000000
    7d4a:	ubfx	r0, r0, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7d4e:	bx	lr
    7d50:	.word	0x20003d4c
    7d54:	.word	0x2003736a
    7d58:	.word	0x2003736d
    7d5c:	.word	0x402c0000

00007d60 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7d60:	push	{r4, r5, r6, lr}
    7d62:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7d64:	ldrb	r2, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7d66:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7d68:	cbz	r2, 7d76 <SdioCard::erase(unsigned long, unsigned long)+0x16>
    7d6a:	ldr	r3, [r0, #0]
    7d6c:	ldr	r3, [r3, #28]
    7d6e:	blx	r3
    7d70:	mov	r4, r0
    7d72:	cmp	r0, #0
    7d74:	beq.n	7e12 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7d76:	ldr	r1, [pc, #160]	; (7e18 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    7d78:	ldrb	r3, [r1, #10]
    7d7a:	and.w	r2, r3, #64	; 0x40
    7d7e:	and.w	r4, r2, #255	; 0xff
    7d82:	cbnz	r2, 7da4 <SdioCard::erase(unsigned long, unsigned long)+0x44>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7d84:	and.w	r3, r3, #63	; 0x3f
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7d88:	ldrb	r2, [r1, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7d8a:	lsls	r3, r3, #1
    7d8c:	orr.w	r3, r3, r2, lsr #7
    7d90:	adds	r2, r6, #1
    7d92:	orrs	r2, r5
    7d94:	tst	r3, r2
    7d96:	beq.n	7da4 <SdioCard::erase(unsigned long, unsigned long)+0x44>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d98:	movs	r2, #39	; 0x27
    7d9a:	ldr	r3, [pc, #128]	; (7e1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7d9c:	strb	r2, [r3, #0]
  m_errorLine = line;
    7d9e:	movw	r2, #747	; 0x2eb
    7da2:	b.n	7df4 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7da4:	ldr	r3, [pc, #120]	; (7e20 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    7da6:	ldrb	r3, [r3, #0]
    7da8:	cbnz	r3, 7dae <SdioCard::erase(unsigned long, unsigned long)+0x4e>
    firstSector <<= 9;
    7daa:	lsls	r5, r5, #9
    lastSector <<= 9;
    7dac:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7dae:	mov	r1, r5
    7db0:	ldr	r0, [pc, #112]	; (7e24 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    7db2:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7db6:	mov	r4, r0
    7db8:	cbnz	r0, 7dc6 <SdioCard::erase(unsigned long, unsigned long)+0x66>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dba:	movs	r2, #15
    7dbc:	ldr	r3, [pc, #92]	; (7e1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7dbe:	strb	r2, [r3, #0]
  m_errorLine = line;
    7dc0:	movw	r2, #755	; 0x2f3
    7dc4:	b.n	7df4 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7dc6:	mov	r1, r6
    7dc8:	ldr	r0, [pc, #92]	; (7e28 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    7dca:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7dce:	mov	r4, r0
    7dd0:	cbnz	r0, 7dde <SdioCard::erase(unsigned long, unsigned long)+0x7e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dd2:	movs	r2, #16
    7dd4:	ldr	r3, [pc, #68]	; (7e1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7dd6:	strb	r2, [r3, #0]
  m_errorLine = line;
    7dd8:	movw	r2, #758	; 0x2f6
    7ddc:	b.n	7df4 <SdioCard::erase(unsigned long, unsigned long)+0x94>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7dde:	movs	r1, #0
    7de0:	ldr	r0, [pc, #72]	; (7e2c <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    7de2:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7de6:	mov	r4, r0
    7de8:	cbnz	r0, 7dfa <SdioCard::erase(unsigned long, unsigned long)+0x9a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dea:	movs	r2, #17
    7dec:	ldr	r3, [pc, #44]	; (7e1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7dee:	strb	r2, [r3, #0]
  m_errorLine = line;
    7df0:	movw	r2, #761	; 0x2f9
    7df4:	ldr	r3, [pc, #56]	; (7e30 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7df6:	str	r2, [r3, #0]
    7df8:	b.n	7e12 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7dfa:	ldr	r0, [pc, #56]	; (7e34 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7dfc:	bl	7a40 <waitTimeout(bool (*)())>
    7e00:	cbz	r0, 7e12 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e02:	movs	r2, #40	; 0x28
    7e04:	ldr	r3, [pc, #20]	; (7e1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7e06:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e08:	strb	r2, [r3, #0]
  m_errorLine = line;
    7e0a:	mov.w	r2, #764	; 0x2fc
    7e0e:	ldr	r3, [pc, #32]	; (7e30 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7e10:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7e12:	mov	r0, r4
    7e14:	pop	{r4, r5, r6, pc}
    7e16:	nop
    7e18:	.word	0x2003737e
    7e1c:	.word	0x20001dfe
    7e20:	.word	0x2003736c
    7e24:	.word	0x201a0000
    7e28:	.word	0x211a0000
    7e2c:	.word	0x261b0000
    7e30:	.word	0x20002934
    7e34:	.word	0x00007b8d

00007e38 <waitTransferComplete()>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    7e38:	push	{r4, lr}
  if (!m_transferActive) {
    7e3a:	ldr	r4, [pc, #60]	; (7e78 <waitTransferComplete()+0x40>)
    7e3c:	ldrb	r3, [r4, #0]
    7e3e:	cbnz	r3, 7e44 <waitTransferComplete()+0xc>
    return true;
    7e40:	movs	r0, #1
    7e42:	pop	{r4, pc}
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    7e44:	ldr	r0, [pc, #52]	; (7e7c <waitTransferComplete()+0x44>)
    7e46:	bl	7a40 <waitTimeout(bool (*)())>
  m_transferActive = false;
    7e4a:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    7e4c:	ldr	r2, [pc, #48]	; (7e80 <waitTransferComplete()+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    7e4e:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7e50:	ldr	r1, [r2, #48]	; 0x30
    7e52:	ldr	r3, [pc, #48]	; (7e84 <waitTransferComplete()+0x4c>)
    7e54:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7e56:	ldr	r1, [r3, #0]
    7e58:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7e5a:	cbnz	r0, 7e66 <waitTransferComplete()+0x2e>
    7e5c:	ldr	r2, [r3, #0]
    7e5e:	ldr	r3, [pc, #40]	; (7e88 <waitTransferComplete()+0x50>)
    7e60:	ands	r3, r2
    7e62:	cmp	r3, #0
    7e64:	beq.n	7e40 <waitTransferComplete()+0x8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e66:	movs	r2, #31
    7e68:	ldr	r3, [pc, #32]	; (7e8c <waitTransferComplete()+0x54>)
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    7e6a:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e6c:	strb	r2, [r3, #0]
  m_errorLine = line;
    7e6e:	movw	r2, #641	; 0x281
    7e72:	ldr	r3, [pc, #28]	; (7e90 <waitTransferComplete()+0x58>)
    7e74:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    7e76:	pop	{r4, pc}
    7e78:	.word	0x2003736d
    7e7c:	.word	0x00007921
    7e80:	.word	0x402c0000
    7e84:	.word	0x20003d50
    7e88:	.word	0x117f0000
    7e8c:	.word	0x20001dfe
    7e90:	.word	0x20002934

00007e94 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    7e94:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e96:	ldr	r4, [pc, #92]	; (7ef4 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7e98:	movs	r1, #0
    7e9a:	ldr	r0, [pc, #92]	; (7ef8 <SdioCard::readStop()+0x64>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e9c:	ldr	r3, [r4, #40]	; 0x28
    7e9e:	bic.w	r3, r3, #65536	; 0x10000
    7ea2:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7ea4:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7ea8:	mov	r5, r0
    7eaa:	cbnz	r0, 7ebc <SdioCard::readStop()+0x28>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eac:	movs	r2, #9
    7eae:	ldr	r3, [pc, #76]	; (7efc <SdioCard::readStop()+0x68>)
    7eb0:	strb	r2, [r3, #0]
  m_errorLine = line;
    7eb2:	movw	r2, #578	; 0x242
    7eb6:	ldr	r3, [pc, #72]	; (7f00 <SdioCard::readStop()+0x6c>)
    7eb8:	str	r2, [r3, #0]
    7eba:	b.n	7ef0 <SdioCard::readStop()+0x5c>
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    7ebc:	ldr	r0, [pc, #68]	; (7f04 <SdioCard::readStop()+0x70>)
    7ebe:	bl	7a64 <yieldTimeout(bool (*)())>
    7ec2:	cbz	r0, 7ed6 <SdioCard::readStop()+0x42>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ec4:	movs	r2, #10
    7ec6:	ldr	r3, [pc, #52]	; (7efc <SdioCard::readStop()+0x68>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7ec8:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eca:	strb	r2, [r3, #0]
  m_errorLine = line;
    7ecc:	movw	r2, #582	; 0x246
    7ed0:	ldr	r3, [pc, #44]	; (7f00 <SdioCard::readStop()+0x6c>)
    7ed2:	str	r2, [r3, #0]
    7ed4:	b.n	7ef0 <SdioCard::readStop()+0x5c>
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    7ed6:	ldr	r3, [r4, #36]	; 0x24
    7ed8:	lsls	r3, r3, #30
    7eda:	bpl.n	7ef0 <SdioCard::readStop()+0x5c>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7edc:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7ede:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7ee0:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7ee2:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7ee6:	orr.w	r2, r2, #67108864	; 0x4000000
    7eea:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    7eec:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    7eee:	str	r3, [r4, #40]	; 0x28
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7ef0:	mov	r0, r5
    7ef2:	pop	{r3, r4, r5, pc}
    7ef4:	.word	0x402c0000
    7ef8:	.word	0x0cdb0000
    7efc:	.word	0x20001dfe
    7f00:	.word	0x20002934
    7f04:	.word	0x000078d9

00007f08 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7f08:	push	{r3, r4, r5, lr}
    7f0a:	mov	r4, r1
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7f0c:	bl	7e38 <waitTransferComplete()>
    7f10:	mov	r5, r0
    7f12:	cmp	r0, #0
    7f14:	beq.n	7f78 <SdioCard::writeData(unsigned char const*)+0x70>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7f16:	ldr	r3, [pc, #100]	; (7f7c <SdioCard::writeData(unsigned char const*)+0x74>)
    7f18:	ldr	r2, [r3, #36]	; 0x24
    7f1a:	lsls	r1, r2, #23
    7f1c:	bmi.n	7f2e <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7f1e:	ldr	r2, [r3, #40]	; 0x28
    7f20:	bic.w	r2, r2, #65536	; 0x10000
    7f24:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7f26:	ldr	r2, [r3, #40]	; 0x28
    7f28:	orr.w	r2, r2, #131072	; 0x20000
    7f2c:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f2e:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    7f30:	ldr	r0, [pc, #76]	; (7f80 <SdioCard::writeData(unsigned char const*)+0x78>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f32:	orr.w	r2, r2, #65536	; 0x10000
    7f36:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    7f38:	bl	7a40 <waitTimeout(bool (*)())>
    7f3c:	cbnz	r0, 7f68 <SdioCard::writeData(unsigned char const*)+0x60>
    7f3e:	subs	r3, r4, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7f40:	ldr	r1, [pc, #56]	; (7f7c <SdioCard::writeData(unsigned char const*)+0x74>)
    7f42:	add.w	r4, r4, #508	; 0x1fc
    7f46:	ldr	r2, [r1, #36]	; 0x24
    7f48:	lsls	r2, r2, #21
    7f4a:	bpl.n	7f46 <SdioCard::writeData(unsigned char const*)+0x3e>
    7f4c:	add.w	r2, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7f50:	ldr.w	r0, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7f54:	cmp	r2, r3
      SDHC_DATPORT = p32[i];
    7f56:	str	r0, [r1, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7f58:	bne.n	7f50 <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7f5a:	cmp	r4, r2
    7f5c:	mov	r3, r2
    7f5e:	bne.n	7f46 <SdioCard::writeData(unsigned char const*)+0x3e>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    7f60:	movs	r2, #1
    7f62:	ldr	r3, [pc, #32]	; (7f84 <SdioCard::writeData(unsigned char const*)+0x7c>)
    7f64:	strb	r2, [r3, #0]
    7f66:	b.n	7f78 <SdioCard::writeData(unsigned char const*)+0x70>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f68:	movs	r2, #33	; 0x21
    7f6a:	ldr	r3, [pc, #28]	; (7f88 <SdioCard::writeData(unsigned char const*)+0x80>)
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7f6c:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f6e:	strb	r2, [r3, #0]
  m_errorLine = line;
    7f70:	movw	r2, #1015	; 0x3f7
    7f74:	ldr	r3, [pc, #20]	; (7f8c <SdioCard::writeData(unsigned char const*)+0x84>)
    7f76:	str	r2, [r3, #0]
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7f78:	mov	r0, r5
    7f7a:	pop	{r3, r4, r5, pc}
    7f7c:	.word	0x402c0000
    7f80:	.word	0x0000790d
    7f84:	.word	0x2003736d
    7f88:	.word	0x20001dfe
    7f8c:	.word	0x20002934

00007f90 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7f90:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7f92:	ldr	r0, [pc, #80]	; (7fe4 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7f94:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7f96:	bl	7a64 <yieldTimeout(bool (*)())>
    7f9a:	cbz	r0, 7fae <SdioCard::writeStart(unsigned long)+0x1e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f9c:	movs	r2, #10
    7f9e:	ldr	r3, [pc, #72]	; (7fe8 <SdioCard::writeStart(unsigned long)+0x58>)
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7fa0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fa2:	strb	r2, [r3, #0]
  m_errorLine = line;
    7fa4:	movw	r2, #1119	; 0x45f
    7fa8:	ldr	r3, [pc, #64]	; (7fec <SdioCard::writeStart(unsigned long)+0x5c>)
    7faa:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7fac:	pop	{r4, pc}
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7fae:	ldr	r3, [pc, #64]	; (7ff0 <SdioCard::writeStart(unsigned long)+0x60>)
    7fb0:	ldr	r2, [r3, #40]	; 0x28
    7fb2:	bic.w	r2, r2, #65536	; 0x10000
    7fb6:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7fb8:	mov.w	r2, #512	; 0x200
    7fbc:	str	r2, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7fbe:	ldr	r3, [pc, #52]	; (7ff4 <SdioCard::writeStart(unsigned long)+0x64>)
    7fc0:	ldrb	r3, [r3, #0]
    7fc2:	cbnz	r3, 7fc8 <SdioCard::writeStart(unsigned long)+0x38>
    7fc4:	lsls	r1, r4, #9
    7fc6:	b.n	7fca <SdioCard::writeStart(unsigned long)+0x3a>
    7fc8:	mov	r1, r4
    7fca:	ldr	r0, [pc, #44]	; (7ff8 <SdioCard::writeStart(unsigned long)+0x68>)
    7fcc:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    7fd0:	cbnz	r0, 7fe0 <SdioCard::writeStart(unsigned long)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fd2:	movs	r2, #14
    7fd4:	ldr	r3, [pc, #16]	; (7fe8 <SdioCard::writeStart(unsigned long)+0x58>)
    7fd6:	strb	r2, [r3, #0]
  m_errorLine = line;
    7fd8:	movw	r2, #1131	; 0x46b
    7fdc:	ldr	r3, [pc, #12]	; (7fec <SdioCard::writeStart(unsigned long)+0x5c>)
    7fde:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7fe0:	pop	{r4, pc}
    7fe2:	nop
    7fe4:	.word	0x00007b8d
    7fe8:	.word	0x20001dfe
    7fec:	.word	0x20002934
    7ff0:	.word	0x402c0000
    7ff4:	.word	0x2003736c
    7ff8:	.word	0x193a0020

00007ffc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7ffc:	push	{r3, r4, r5, r6, r7, lr}
    7ffe:	mov	r7, r0
    8000:	mov	r4, r1
    8002:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8004:	ldrb	r6, [r7, #8]
    8006:	lsls	r6, r6, #31
    8008:	bpl.n	8046 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    800a:	lsls	r6, r2, #30
    800c:	beq.n	802e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    800e:	adds	r6, r1, r3
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8010:	cmp	r4, r6
    8012:	beq.n	8064 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
        if (!writeSector(sector, ptr)) {
    8014:	ldr	r3, [r7, #0]
    8016:	mov	r2, r5
    8018:	mov	r1, r4
    801a:	mov	r0, r7
    801c:	ldr	r3, [r3, #32]
    801e:	blx	r3
    8020:	cbnz	r0, 8026 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
          return false;  // writeSector will set errorCode.
    8022:	movs	r0, #0
    8024:	pop	{r3, r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8026:	adds	r4, #1
    8028:	add.w	r5, r5, #512	; 0x200
    802c:	b.n	8010 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
          return false;  // writeSector will set errorCode.
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    802e:	ldr	r0, [pc, #56]	; (8068 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6c>)
    8030:	bl	7c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8034:	cbnz	r0, 8064 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8036:	movs	r2, #14
    8038:	ldr	r3, [pc, #48]	; (806c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    803a:	strb	r2, [r3, #0]
  m_errorLine = line;
    803c:	movw	r2, #1105	; 0x451
    8040:	ldr	r3, [pc, #44]	; (8070 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    8042:	str	r2, [r3, #0]
    8044:	pop	{r3, r4, r5, r6, r7, pc}
    8046:	adds	r6, r1, r3
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8048:	cmp	r4, r6
    804a:	beq.n	8064 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x68>
      if (!writeSector(sector + i, src + i*512UL)) {
    804c:	ldr	r3, [r7, #0]
    804e:	mov	r2, r5
    8050:	mov	r1, r4
    8052:	mov	r0, r7
    8054:	ldr	r3, [r3, #32]
    8056:	adds	r4, #1
    8058:	blx	r3
    805a:	add.w	r5, r5, #512	; 0x200
    805e:	cmp	r0, #0
    8060:	bne.n	8048 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    8062:	b.n	8022 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
        }
      }
      return true;
    8064:	movs	r0, #1
        return false;
      }
    }
  }
  return true;
}
    8066:	pop	{r3, r4, r5, r6, r7, pc}
    8068:	.word	0x193a0027
    806c:	.word	0x20001dfe
    8070:	.word	0x20002934

00008074 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8074:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8076:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8078:	mov	r5, r2
    807a:	sub.w	sp, sp, #512	; 0x200
    807e:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    8080:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8082:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    8084:	bpl.n	80b8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    8086:	lsls	r3, r5, #30
    8088:	beq.n	8098 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x24>
      ptr = aligned;
      memcpy(aligned, src, 512);
    808a:	mov	r1, r5
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    808c:	mov	r5, sp
      memcpy(aligned, src, 512);
    808e:	mov.w	r2, #512	; 0x200
    8092:	mov	r0, sp
    8094:	bl	87a4 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8098:	movs	r3, #1
    809a:	mov	r2, r5
    809c:	mov	r1, r6
    809e:	ldr	r0, [pc, #104]	; (8108 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    80a0:	bl	7c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    80a4:	cmp	r0, #0
    80a6:	bne.n	8102 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80a8:	movs	r2, #13
    80aa:	ldr	r3, [pc, #96]	; (810c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    80ac:	strb	r2, [r3, #0]
  m_errorLine = line;
    80ae:	movw	r2, #1049	; 0x419
    80b2:	ldr	r3, [pc, #92]	; (8110 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    80b4:	str	r2, [r3, #0]
    80b6:	b.n	8102 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    80b8:	bl	7e38 <waitTransferComplete()>
    80bc:	cbnz	r0, 80c2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4e>
      return false;
    80be:	movs	r0, #0
    80c0:	b.n	8102 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    80c2:	ldrb	r3, [r4, #9]
    80c4:	cmp	r3, #2
    80c6:	bne.n	80ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    80c8:	ldr	r3, [r4, #4]
    80ca:	cmp	r6, r3
    80cc:	beq.n	80ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    80ce:	ldr	r3, [r4, #0]
    80d0:	mov	r0, r4
    80d2:	ldr	r3, [r3, #28]
    80d4:	blx	r3
    80d6:	cmp	r0, #0
    80d8:	beq.n	80be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
        return false;
      }
      if (!writeStart(sector )) {
    80da:	ldr	r3, [r4, #0]
    80dc:	mov	r1, r6
    80de:	mov	r0, r4
    80e0:	ldr	r3, [r3, #80]	; 0x50
    80e2:	blx	r3
    80e4:	cmp	r0, #0
    80e6:	beq.n	80be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    80e8:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    80ea:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    80ec:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    80ee:	ldr	r3, [r4, #0]
    80f0:	mov	r1, r5
    80f2:	mov	r0, r4
    80f4:	ldr	r3, [r3, #76]	; 0x4c
    80f6:	blx	r3
    80f8:	cmp	r0, #0
    80fa:	beq.n	80be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4a>
      return false;
    }
    m_curSector++;
    80fc:	ldr	r3, [r4, #4]
    80fe:	adds	r3, #1
    8100:	str	r3, [r4, #4]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    8102:	add.w	sp, sp, #512	; 0x200
    8106:	pop	{r4, r5, r6, pc}
    8108:	.word	0x183a0001
    810c:	.word	0x20001dfe
    8110:	.word	0x20002934

00008114 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8114:	push	{r3, r4, r5, r6, r7, lr}
    8116:	mov	r7, r0
    8118:	mov	r4, r1
    811a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    811c:	ldrb	r6, [r7, #8]
    811e:	lsls	r6, r6, #31
    8120:	bpl.n	815e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    8122:	lsls	r6, r2, #30
    8124:	beq.n	8146 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    8126:	adds	r6, r1, r3
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8128:	cmp	r4, r6
    812a:	beq.n	817c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
        if (!readSector(sector, dst)) {
    812c:	ldr	r3, [r7, #0]
    812e:	mov	r2, r5
    8130:	mov	r1, r4
    8132:	mov	r0, r7
    8134:	ldr	r3, [r3, #12]
    8136:	blx	r3
    8138:	cbnz	r0, 813e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
          return false;  // readSector will set errorCode.
    813a:	movs	r0, #0
    813c:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    813e:	adds	r4, #1
    8140:	add.w	r5, r5, #512	; 0x200
    8144:	b.n	8128 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
          return false;  // readSector will set errorCode.
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8146:	ldr	r0, [pc, #56]	; (8180 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6c>)
    8148:	bl	7c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    814c:	cbnz	r0, 817c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    814e:	movs	r2, #12
    8150:	ldr	r3, [pc, #48]	; (8184 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    8152:	strb	r2, [r3, #0]
  m_errorLine = line;
    8154:	mov.w	r2, #912	; 0x390
    8158:	ldr	r3, [pc, #44]	; (8188 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    815a:	str	r2, [r3, #0]
    815c:	pop	{r3, r4, r5, r6, r7, pc}
    815e:	adds	r6, r1, r3
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8160:	cmp	r4, r6
    8162:	beq.n	817c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
      if (!readSector(sector + i, dst + i*512UL)) {
    8164:	ldr	r3, [r7, #0]
    8166:	mov	r2, r5
    8168:	mov	r1, r4
    816a:	mov	r0, r7
    816c:	ldr	r3, [r3, #12]
    816e:	adds	r4, #1
    8170:	blx	r3
    8172:	add.w	r5, r5, #512	; 0x200
    8176:	cmp	r0, #0
    8178:	bne.n	8160 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    817a:	b.n	813a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
        }
      }
      return true;
    817c:	movs	r0, #1
        return false;
      }
    }
  }
  return true;
}
    817e:	pop	{r3, r4, r5, r6, r7, pc}
    8180:	.word	0x123a0037
    8184:	.word	0x20001dfe
    8188:	.word	0x20002934

0000818c <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    818c:	push	{r3, r4, r5, lr}
    818e:	mov	r4, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8190:	ldr	r0, [pc, #104]	; (81fc <cardCMD6(unsigned long, unsigned char*)+0x70>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8192:	mov	r5, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8194:	bl	7a40 <waitTimeout(bool (*)())>
    8198:	cbz	r0, 81a6 <cardCMD6(unsigned long, unsigned char*)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    819a:	movs	r2, #10
    819c:	ldr	r3, [pc, #96]	; (8200 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    819e:	strb	r2, [r3, #0]
  m_errorLine = line;
    81a0:	movw	r2, #413	; 0x19d
    81a4:	b.n	81e8 <cardCMD6(unsigned long, unsigned char*)+0x5c>
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    81a6:	movs	r2, #1
    81a8:	ldr	r3, [pc, #88]	; (8204 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    81aa:	mov	r1, r4
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    81ac:	strb	r2, [r3, #0]
  m_irqstat = 0;
    81ae:	ldr	r3, [pc, #88]	; (8208 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    81b0:	ldr	r2, [pc, #88]	; (820c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    81b2:	str	r0, [r3, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    81b4:	ldr	r3, [pc, #88]	; (8210 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    81b6:	ldr	r0, [pc, #92]	; (8214 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    81b8:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    81ba:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    81bc:	ldr	r2, [pc, #88]	; (8218 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    81be:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    81c0:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    81c4:	cbnz	r0, 81d6 <cardCMD6(unsigned long, unsigned char*)+0x4a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81c6:	movs	r2, #4
    81c8:	ldr	r3, [pc, #52]	; (8200 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    81ca:	strb	r2, [r3, #0]
  m_errorLine = line;
    81cc:	mov.w	r2, #420	; 0x1a4
    81d0:	ldr	r3, [pc, #72]	; (821c <cardCMD6(unsigned long, unsigned char*)+0x90>)
    81d2:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    81d4:	pop	{r3, r4, r5, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    81d6:	ldr	r0, [pc, #72]	; (8220 <cardCMD6(unsigned long, unsigned char*)+0x94>)
    81d8:	bl	7a64 <yieldTimeout(bool (*)())>
    81dc:	cbz	r0, 81f0 <cardCMD6(unsigned long, unsigned char*)+0x64>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81de:	movs	r2, #37	; 0x25
    81e0:	ldr	r3, [pc, #28]	; (8200 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    81e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    81e4:	movw	r2, #423	; 0x1a7
    81e8:	ldr	r3, [pc, #48]	; (821c <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    81ea:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81ec:	str	r2, [r3, #0]
    81ee:	pop	{r3, r4, r5, pc}
    81f0:	bl	7bf8 <waitDmaStatus() [clone .part.5]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    81f4:	cmp	r0, #0
    81f6:	beq.n	81de <cardCMD6(unsigned long, unsigned char*)+0x52>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    81f8:	pop	{r3, r4, r5, pc}
    81fa:	nop
    81fc:	.word	0x00007b8d
    8200:	.word	0x20001dfe
    8204:	.word	0x2003738e
    8208:	.word	0x20003d50
    820c:	.word	0x00010040
    8210:	.word	0x402c0000
    8214:	.word	0x063a0011
    8218:	.word	0x117f0002
    821c:	.word	0x20002934
    8220:	.word	0x000078ed

00008224 <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8224:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8228:	movs	r3, #0
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    822a:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
  m_initDone = false;
    822c:	ldr	r7, [pc, #636]	; (84ac <SdioCard::begin(SdioConfig)+0x288>)
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    822e:	sub	sp, #68	; 0x44
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8230:	ldr	r1, [pc, #636]	; (84b0 <SdioCard::begin(SdioConfig)+0x28c>)
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8232:	ldr	r5, [pc, #640]	; (84b4 <SdioCard::begin(SdioConfig)+0x290>)
  m_highCapacity = false;
  m_version2 = false;
    8234:	ldr	r6, [pc, #640]	; (84b8 <SdioCard::begin(SdioConfig)+0x294>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8236:	strb	r3, [r0, #9]
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    8238:	movs	r0, #5
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    823a:	strb	r3, [r5, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    823c:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    823e:	strb	r3, [r1, #0]
  m_version2 = false;
    8240:	strb	r3, [r6, #0]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8242:	ldr	r3, [pc, #632]	; (84bc <SdioCard::begin(SdioConfig)+0x298>)
    8244:	ldr.w	r2, [r3, #256]	; 0x100
    8248:	orr.w	r2, r2, #128	; 0x80
    824c:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8250:	ldr.w	r2, [r3, #256]	; 0x100
    8254:	bic.w	r2, r2, #63	; 0x3f
    8258:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    825c:	ldr.w	r2, [r3, #256]	; 0x100
    8260:	orr.w	r2, r2, #24
    8264:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    8268:	ldr.w	r2, [r3, #256]	; 0x100
    826c:	bic.w	r2, r2, #128	; 0x80
    8270:	str.w	r2, [r3, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    8274:	add.w	r3, r3, #147456	; 0x24000
    8278:	ldr.w	r2, [r3, #128]	; 0x80
    827c:	orr.w	r2, r2, #12
    8280:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    8284:	ldr	r2, [r3, #36]	; 0x24
    8286:	bic.w	r2, r2, #14336	; 0x3800
    828a:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    828c:	ldr	r2, [r3, #28]
    828e:	orr.w	r2, r2, #65536	; 0x10000
    8292:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    8294:	ldr	r2, [r3, #36]	; 0x24
    8296:	orr.w	r2, r2, #2048	; 0x800
    829a:	str	r2, [r3, #36]	; 0x24
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    829c:	bl	7890 <gpioMux(unsigned char)>

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    82a0:	ldr	r3, [pc, #540]	; (84c0 <SdioCard::begin(SdioConfig)+0x29c>)
    82a2:	mov	r8, r1
    82a4:	ldr	r2, [r3, #72]	; 0x48
    82a6:	orr.w	r2, r2, #2147483648	; 0x80000000
    82aa:	str	r2, [r3, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    82ac:	ldr	r2, [r3, #44]	; 0x2c
    82ae:	orr.w	r2, r2, #16777216	; 0x1000000
    82b2:	orr.w	r2, r2, #32768	; 0x8000
    82b6:	str	r2, [r3, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    82b8:	ldr	r2, [r3, #44]	; 0x2c
    82ba:	ldr	r4, [pc, #516]	; (84c0 <SdioCard::begin(SdioConfig)+0x29c>)
    82bc:	lsls	r1, r2, #7
    82be:	bmi.n	82b8 <SdioCard::begin(SdioConfig)+0x94>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    82c0:	mov.w	r0, #400	; 0x190
    82c4:	bl	7938 <setSdclk(unsigned long)>
    82c8:	bl	7ab4 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    82cc:	ldr	r3, [pc, #500]	; (84c4 <SdioCard::begin(SdioConfig)+0x2a0>)


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    82ce:	ldr	r2, [pc, #504]	; (84c8 <SdioCard::begin(SdioConfig)+0x2a4>)
    82d0:	str	r3, [r4, #52]	; 0x34
    82d2:	ldr	r3, [pc, #504]	; (84cc <SdioCard::begin(SdioConfig)+0x2a8>)
    82d4:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    82d8:	movs	r2, #96	; 0x60
    82da:	ldr	r3, [pc, #500]	; (84d0 <SdioCard::begin(SdioConfig)+0x2ac>)
    82dc:	strb	r2, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    82de:	subw	r3, r3, #866	; 0x362
    82e2:	mov.w	r2, #16384	; 0x4000
    82e6:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    82e8:	ldr	r3, [r4, #44]	; 0x2c
    82ea:	orr.w	r3, r3, #134217728	; 0x8000000
    82ee:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    82f0:	ldr	r1, [r4, #44]	; 0x2c
    82f2:	ands.w	r1, r1, #134217728	; 0x8000000
    82f6:	bne.n	82f0 <SdioCard::begin(SdioConfig)+0xcc>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    82f8:	mov	r0, r1
    82fa:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    82fe:	mov	r4, r0
    8300:	cbnz	r0, 830c <SdioCard::begin(SdioConfig)+0xe8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8302:	movs	r3, #1
  m_errorLine = line;
    8304:	movw	r2, #662	; 0x296
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8308:	strb	r3, [r5, #0]
    830a:	b.n	839e <SdioCard::begin(SdioConfig)+0x17a>
    830c:	movs	r4, #3
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    830e:	mov.w	r1, #426	; 0x1aa
    8312:	ldr	r0, [pc, #448]	; (84d4 <SdioCard::begin(SdioConfig)+0x2b0>)
    8314:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8318:	cbz	r0, 8334 <SdioCard::begin(SdioConfig)+0x110>
      if (SDHC_CMDRSP0 != 0X1AA) {
    831a:	ldr	r3, [pc, #420]	; (84c0 <SdioCard::begin(SdioConfig)+0x29c>)
    831c:	ldr	r3, [r3, #16]
    831e:	cmp.w	r3, #426	; 0x1aa
    8322:	beq.n	832e <SdioCard::begin(SdioConfig)+0x10a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8324:	movs	r3, #6
  m_errorLine = line;
    8326:	mov.w	r2, #668	; 0x29c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    832a:	strb	r3, [r5, #0]
    832c:	b.n	843a <SdioCard::begin(SdioConfig)+0x216>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    832e:	movs	r3, #1
    8330:	strb	r3, [r6, #0]
      break;
    8332:	b.n	8338 <SdioCard::begin(SdioConfig)+0x114>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8334:	subs	r4, #1
    8336:	bne.n	830e <SdioCard::begin(SdioConfig)+0xea>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8338:	ldrb	r3, [r6, #0]
    833a:	ldr	r4, [pc, #412]	; (84d8 <SdioCard::begin(SdioConfig)+0x2b4>)
    833c:	cmp	r3, #0
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    833e:	ldr	r6, [pc, #412]	; (84dc <SdioCard::begin(SdioConfig)+0x2b8>)
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8340:	it	eq
    8342:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    8346:	bl	999c <micros>
    834a:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    834c:	movs	r1, #0
    834e:	ldr	r0, [pc, #400]	; (84e0 <SdioCard::begin(SdioConfig)+0x2bc>)
    8350:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8354:	cmp	r0, #0
    8356:	beq.n	8428 <SdioCard::begin(SdioConfig)+0x204>
    8358:	mov	r1, r4
    835a:	ldr	r0, [pc, #392]	; (84e4 <SdioCard::begin(SdioConfig)+0x2c0>)
    835c:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8360:	cmp	r0, #0
    8362:	beq.n	8428 <SdioCard::begin(SdioConfig)+0x204>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8364:	bl	999c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8368:	rsb	r0, r9, r0
    836c:	cmp	r0, r6
    836e:	bhi.n	8428 <SdioCard::begin(SdioConfig)+0x204>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8370:	ldr	r3, [pc, #332]	; (84c0 <SdioCard::begin(SdioConfig)+0x29c>)
    8372:	ldr	r2, [r3, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8374:	cmp	r2, #0
    8376:	bge.n	834c <SdioCard::begin(SdioConfig)+0x128>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8378:	ldr	r1, [r3, #16]
    837a:	ldr	r2, [pc, #364]	; (84e8 <SdioCard::begin(SdioConfig)+0x2c4>)
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    837c:	ldr	r0, [pc, #364]	; (84ec <SdioCard::begin(SdioConfig)+0x2c8>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    837e:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8380:	movs	r1, #0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8382:	ldr	r3, [r3, #16]
    8384:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8386:	itt	mi
    8388:	movmi	r3, #1
    838a:	strbmi.w	r3, [r8]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    838e:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8392:	mov	r4, r0
    8394:	cbnz	r0, 83a4 <SdioCard::begin(SdioConfig)+0x180>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8396:	movs	r3, #2
  m_errorLine = line;
    8398:	mov.w	r2, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    839c:	strb	r3, [r5, #0]
  m_errorLine = line;
    839e:	ldr	r3, [pc, #336]	; (84f0 <SdioCard::begin(SdioConfig)+0x2cc>)
    83a0:	str	r2, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
    83a2:	b.n	84a2 <SdioCard::begin(SdioConfig)+0x27e>
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    83a4:	movs	r1, #0
    83a6:	ldr	r0, [pc, #332]	; (84f4 <SdioCard::begin(SdioConfig)+0x2d0>)
    83a8:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    83ac:	mov	r4, r0
    83ae:	cbnz	r0, 83ba <SdioCard::begin(SdioConfig)+0x196>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b0:	movs	r3, #3
  m_errorLine = line;
    83b2:	movw	r2, #691	; 0x2b3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83b6:	strb	r3, [r5, #0]
    83b8:	b.n	839e <SdioCard::begin(SdioConfig)+0x17a>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    83ba:	ldr	r6, [pc, #260]	; (84c0 <SdioCard::begin(SdioConfig)+0x29c>)
    83bc:	ldr.w	r8, [pc, #340]	; 8514 <SdioCard::begin(SdioConfig)+0x2f0>
    83c0:	ldr	r3, [r6, #16]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    83c2:	ldr	r1, [pc, #308]	; (84f8 <SdioCard::begin(SdioConfig)+0x2d4>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    83c4:	lsrs	r3, r3, #16

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    83c6:	ldr	r0, [pc, #308]	; (84fc <SdioCard::begin(SdioConfig)+0x2d8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    83c8:	lsls	r3, r3, #16
    83ca:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    83ce:	bl	7ba0 <readReg16(unsigned long, void*)>
    83d2:	mov	r4, r0
    83d4:	cbnz	r0, 83e0 <SdioCard::begin(SdioConfig)+0x1bc>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83d6:	movs	r3, #7
  m_errorLine = line;
    83d8:	mov.w	r2, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83dc:	strb	r3, [r5, #0]
    83de:	b.n	839e <SdioCard::begin(SdioConfig)+0x17a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    83e0:	ldr	r1, [pc, #284]	; (8500 <SdioCard::begin(SdioConfig)+0x2dc>)
    83e2:	ldr	r0, [pc, #288]	; (8504 <SdioCard::begin(SdioConfig)+0x2e0>)
    83e4:	bl	7ba0 <readReg16(unsigned long, void*)>
    83e8:	mov	r4, r0
    83ea:	cbnz	r0, 83f6 <SdioCard::begin(SdioConfig)+0x1d2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83ec:	movs	r3, #8
  m_errorLine = line;
    83ee:	movw	r2, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    83f2:	strb	r3, [r5, #0]
    83f4:	b.n	839e <SdioCard::begin(SdioConfig)+0x17a>
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    83f6:	ldr.w	r1, [r8]
    83fa:	ldr	r0, [pc, #268]	; (8508 <SdioCard::begin(SdioConfig)+0x2e4>)
    83fc:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8400:	mov	r4, r0
    8402:	cbnz	r0, 840e <SdioCard::begin(SdioConfig)+0x1ea>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8404:	movs	r3, #5
  m_errorLine = line;
    8406:	movw	r2, #702	; 0x2be
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    840a:	strb	r3, [r5, #0]
    840c:	b.n	839e <SdioCard::begin(SdioConfig)+0x17a>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    840e:	ldr.w	r1, [r8]
    8412:	ldr	r0, [pc, #204]	; (84e0 <SdioCard::begin(SdioConfig)+0x2bc>)
    8414:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8418:	cbz	r0, 8432 <SdioCard::begin(SdioConfig)+0x20e>
    841a:	movs	r1, #2
    841c:	ldr	r0, [pc, #236]	; (850c <SdioCard::begin(SdioConfig)+0x2e8>)
    841e:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8422:	mov	r4, r0
    8424:	cbz	r0, 8432 <SdioCard::begin(SdioConfig)+0x20e>
    8426:	b.n	8442 <SdioCard::begin(SdioConfig)+0x21e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8428:	movs	r3, #23
  m_errorLine = line;
    842a:	movw	r2, #679	; 0x2a7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    842e:	strb	r3, [r5, #0]
    8430:	b.n	843a <SdioCard::begin(SdioConfig)+0x216>
    8432:	movs	r3, #20
  m_errorLine = line;
    8434:	movw	r2, #706	; 0x2c2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8438:	strb	r3, [r5, #0]
  m_errorLine = line;
    843a:	ldr	r3, [pc, #180]	; (84f0 <SdioCard::begin(SdioConfig)+0x2cc>)
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    843c:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    843e:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8440:	b.n	84a2 <SdioCard::begin(SdioConfig)+0x27e>
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8442:	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8444:	mov	r1, sp
    8446:	mvn.w	r0, #4278190080	; 0xff000000
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    844a:	bic.w	r3, r3, #6
    844e:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8450:	ldr	r3, [r6, #40]	; 0x28
    8452:	orr.w	r3, r3, #2
    8456:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8458:	mov.w	r3, #1048592	; 0x100010
    845c:	str	r3, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    845e:	bl	818c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8462:	cbz	r0, 846c <SdioCard::begin(SdioConfig)+0x248>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8464:	ldrb.w	r3, [sp, #13]
    8468:	lsls	r3, r3, #30
    846a:	bmi.n	8472 <SdioCard::begin(SdioConfig)+0x24e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    846c:	movw	r2, #25000	; 0x61a8
    8470:	b.n	848e <SdioCard::begin(SdioConfig)+0x26a>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8472:	mov	r1, sp
    8474:	ldr	r0, [pc, #152]	; (8510 <SdioCard::begin(SdioConfig)+0x2ec>)
    8476:	bl	818c <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    847a:	cmp	r0, #0
    847c:	beq.n	846c <SdioCard::begin(SdioConfig)+0x248>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    847e:	ldrb.w	r3, [sp, #16]
    8482:	and.w	r3, r3, #15
    8486:	cmp	r3, #1
    8488:	bne.n	846c <SdioCard::begin(SdioConfig)+0x248>
    kHzSdClk = 50000;
    848a:	movw	r2, #50000	; 0xc350
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
  } else {
    gpioMux(5);
    848e:	movs	r0, #5
    8490:	bl	7890 <gpioMux(unsigned char)>
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8494:	mov	r0, r2
    8496:	bl	7938 <setSdclk(unsigned long)>
    849a:	bl	7ab4 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    849e:	movs	r3, #1
    84a0:	strb	r3, [r7, #0]
  return true;
}
    84a2:	mov	r0, r4
    84a4:	add	sp, #68	; 0x44
    84a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    84aa:	nop
    84ac:	.word	0x2003736a
    84b0:	.word	0x2003736c
    84b4:	.word	0x20001dfe
    84b8:	.word	0x2003736b
    84bc:	.word	0x400d8000
    84c0:	.word	0x402c0000
    84c4:	.word	0x117f000b
    84c8:	.word	0x00007865
    84cc:	.word	0x20002000
    84d0:	.word	0xe000e46e
    84d4:	.word	0x081a0000
    84d8:	.word	0x40300000
    84dc:	.word	0x000f4240
    84e0:	.word	0x371a0000
    84e4:	.word	0x29020000
    84e8:	.word	0x20003d44
    84ec:	.word	0x02090000
    84f0:	.word	0x20002934
    84f4:	.word	0x031a0000
    84f8:	.word	0x2003737e
    84fc:	.word	0x09090000
    8500:	.word	0x2003736e
    8504:	.word	0x0a090000
    8508:	.word	0x071b0000
    850c:	.word	0x061a0000
    8510:	.word	0x80fffff1
    8514:	.word	0x20003d48

00008518 <SdioCard::readData(unsigned char*)>:
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8518:	ldr	r3, [pc, #152]	; (85b4 <SdioCard::readData(unsigned char*)+0x9c>)
    851a:	ldr	r2, [r3, #36]	; 0x24
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    851c:	push	{r4, r5, r6, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    851e:	lsls	r6, r2, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    8520:	mov	r4, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8522:	bmi.n	8540 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8524:	ldr	r2, [r3, #40]	; 0x28
    8526:	bic.w	r2, r2, #65536	; 0x10000
    852a:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    852c:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    852e:	ldr	r2, [r3, #40]	; 0x28
    8530:	orr.w	r2, r2, #131072	; 0x20000
    8534:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8536:	ldr	r2, [r3, #40]	; 0x28
    8538:	orr.w	r2, r2, #65536	; 0x10000
    853c:	str	r2, [r3, #40]	; 0x28
    interrupts();
    853e:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    8540:	ldr	r0, [pc, #116]	; (85b8 <SdioCard::readData(unsigned char*)+0xa0>)
    8542:	bl	7a40 <waitTimeout(bool (*)())>
    8546:	cbnz	r0, 85a0 <SdioCard::readData(unsigned char*)+0x88>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8548:	ldr	r1, [pc, #104]	; (85b4 <SdioCard::readData(unsigned char*)+0x9c>)
    854a:	subs	r3, r4, #4
    854c:	add.w	r4, r4, #508	; 0x1fc
    8550:	mov	r0, r1
    8552:	ldr	r2, [r1, #36]	; 0x24
    8554:	lsls	r5, r2, #20
    8556:	bpl.n	8552 <SdioCard::readData(unsigned char*)+0x3a>
    8558:	add.w	r2, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    855c:	ldr	r6, [r0, #32]
    855e:	ldr	r5, [pc, #84]	; (85b4 <SdioCard::readData(unsigned char*)+0x9c>)
    8560:	str.w	r6, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8564:	cmp	r2, r3
    8566:	bne.n	855c <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8568:	cmp	r4, r2
    856a:	mov	r3, r2
    856c:	bne.n	8552 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    856e:	ldr	r0, [pc, #76]	; (85bc <SdioCard::readData(unsigned char*)+0xa4>)
    8570:	bl	7a40 <waitTimeout(bool (*)())>
    8574:	cbz	r0, 8582 <SdioCard::readData(unsigned char*)+0x6a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8576:	movs	r2, #29
    8578:	ldr	r3, [pc, #68]	; (85c0 <SdioCard::readData(unsigned char*)+0xa8>)
    857a:	strb	r2, [r3, #0]
  m_errorLine = line;
    857c:	movw	r2, #846	; 0x34e
    8580:	b.n	85aa <SdioCard::readData(unsigned char*)+0x92>
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8582:	ldr	r2, [r5, #48]	; 0x30
    8584:	ldr	r3, [pc, #60]	; (85c4 <SdioCard::readData(unsigned char*)+0xac>)
    8586:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8588:	ldr	r2, [r3, #0]
    858a:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    858c:	ldr	r2, [r3, #0]
    858e:	lsls	r2, r2, #30
    8590:	bpl.n	85b0 <SdioCard::readData(unsigned char*)+0x98>
    8592:	ldr	r3, [r3, #0]
    8594:	ldr	r0, [pc, #48]	; (85c8 <SdioCard::readData(unsigned char*)+0xb0>)
    8596:	ands	r0, r3
    8598:	clz	r0, r0
    859c:	lsrs	r0, r0, #5
    859e:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85a0:	movs	r2, #26
    85a2:	ldr	r3, [pc, #28]	; (85c0 <SdioCard::readData(unsigned char*)+0xa8>)
    85a4:	strb	r2, [r3, #0]
  m_errorLine = line;
    85a6:	movw	r2, #835	; 0x343
    85aa:	ldr	r3, [pc, #32]	; (85cc <SdioCard::readData(unsigned char*)+0xb4>)
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    85ac:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    85ae:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    85b0:	pop	{r4, r5, r6, pc}
    85b2:	nop
    85b4:	.word	0x402c0000
    85b8:	.word	0x000078f9
    85bc:	.word	0x00007921
    85c0:	.word	0x20001dfe
    85c4:	.word	0x20003d50
    85c8:	.word	0x117f0000
    85cc:	.word	0x20002934

000085d0 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    85d0:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    85d2:	ldr	r0, [pc, #80]	; (8624 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    85d4:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    85d6:	bl	7a64 <yieldTimeout(bool (*)())>
    85da:	cbz	r0, 85ee <SdioCard::readStart(unsigned long)+0x1e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85dc:	movs	r2, #10
    85de:	ldr	r3, [pc, #72]	; (8628 <SdioCard::readStart(unsigned long)+0x58>)
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    85e0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    85e4:	mov.w	r2, #928	; 0x3a0
    85e8:	ldr	r3, [pc, #64]	; (862c <SdioCard::readStart(unsigned long)+0x5c>)
    85ea:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    85ec:	pop	{r4, pc}
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    85ee:	ldr	r3, [pc, #64]	; (8630 <SdioCard::readStart(unsigned long)+0x60>)
    85f0:	ldr	r2, [r3, #40]	; 0x28
    85f2:	orr.w	r2, r2, #65536	; 0x10000
    85f6:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    85f8:	mov.w	r2, #512	; 0x200
    85fc:	str	r2, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    85fe:	ldr	r3, [pc, #52]	; (8634 <SdioCard::readStart(unsigned long)+0x64>)
    8600:	ldrb	r3, [r3, #0]
    8602:	cbnz	r3, 8608 <SdioCard::readStart(unsigned long)+0x38>
    8604:	lsls	r1, r4, #9
    8606:	b.n	860a <SdioCard::readStart(unsigned long)+0x3a>
    8608:	mov	r1, r4
    860a:	ldr	r0, [pc, #44]	; (8638 <SdioCard::readStart(unsigned long)+0x68>)
    860c:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    8610:	cbnz	r0, 8620 <SdioCard::readStart(unsigned long)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8612:	movs	r2, #12
    8614:	ldr	r3, [pc, #16]	; (8628 <SdioCard::readStart(unsigned long)+0x58>)
    8616:	strb	r2, [r3, #0]
  m_errorLine = line;
    8618:	mov.w	r2, #940	; 0x3ac
    861c:	ldr	r3, [pc, #12]	; (862c <SdioCard::readStart(unsigned long)+0x5c>)
    861e:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8620:	pop	{r4, pc}
    8622:	nop
    8624:	.word	0x00007b8d
    8628:	.word	0x20001dfe
    862c:	.word	0x20002934
    8630:	.word	0x402c0000
    8634:	.word	0x2003736c
    8638:	.word	0x123a0030

0000863c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    863c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    863e:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8640:	mov	r6, r2
    8642:	sub.w	sp, sp, #512	; 0x200
    8646:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    8648:	lsls	r2, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    864a:	mov	r5, r1
  if (m_sdioConfig.useDma()) {
    864c:	bpl.n	8688 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    864e:	lsls	r3, r6, #30

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8650:	ldr	r0, [pc, #132]	; (86d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    8652:	mov.w	r3, #1
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    8656:	ite	eq
    8658:	moveq	r4, r6
    865a:	movne	r4, sp

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    865c:	mov	r2, r4
    865e:	bl	7c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8662:	mov	r5, r0
    8664:	cbnz	r0, 8676 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8666:	movs	r2, #11
    8668:	ldr	r3, [pc, #112]	; (86dc <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    866a:	strb	r2, [r3, #0]
  m_errorLine = line;
    866c:	movw	r2, #865	; 0x361
    8670:	ldr	r3, [pc, #108]	; (86e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    8672:	str	r2, [r3, #0]
    8674:	b.n	86d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
    8676:	cmp	r4, r6
    8678:	beq.n	86d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
      memcpy(dst, aligned, 512);
    867a:	mov.w	r2, #512	; 0x200
    867e:	mov	r1, sp
    8680:	mov	r0, r6
    8682:	bl	87a4 <memcpy>
    8686:	b.n	86d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    8688:	bl	7e38 <waitTransferComplete()>
    868c:	cbnz	r0, 8692 <SdioCard::readSector(unsigned long, unsigned char*)+0x56>
      return false;
    868e:	movs	r5, #0
    8690:	b.n	86d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    8692:	ldrb	r3, [r4, #9]
    8694:	cmp	r3, #1
    8696:	bne.n	869e <SdioCard::readSector(unsigned long, unsigned char*)+0x62>
    8698:	ldr	r3, [r4, #4]
    869a:	cmp	r5, r3
    869c:	beq.n	86bc <SdioCard::readSector(unsigned long, unsigned char*)+0x80>
      if (!syncDevice()) {
    869e:	ldr	r3, [r4, #0]
    86a0:	mov	r0, r4
    86a2:	ldr	r3, [r3, #28]
    86a4:	blx	r3
    86a6:	cmp	r0, #0
    86a8:	beq.n	868e <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
        return false;
      }
      if (!readStart(sector)) {
    86aa:	mov	r1, r5
    86ac:	mov	r0, r4
    86ae:	bl	85d0 <SdioCard::readStart(unsigned long)>
    86b2:	cmp	r0, #0
    86b4:	beq.n	868e <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    86b6:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    86b8:	str	r5, [r4, #4]
      m_curState = READ_STATE;
    86ba:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    86bc:	mov	r1, r6
    86be:	mov	r0, r4
    86c0:	bl	8518 <SdioCard::readData(unsigned char*)>
    86c4:	mov	r5, r0
    86c6:	cmp	r0, #0
    86c8:	beq.n	868e <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    86ca:	ldr	r3, [r4, #4]
    86cc:	adds	r3, #1
    86ce:	str	r3, [r4, #4]
  }
  return true;
}
    86d0:	mov	r0, r5
    86d2:	add.w	sp, sp, #512	; 0x200
    86d6:	pop	{r4, r5, r6, pc}
    86d8:	.word	0x113a0011
    86dc:	.word	0x20001dfe
    86e0:	.word	0x20002934

000086e4 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    86e4:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    86e6:	ldr	r2, [pc, #72]	; (8730 <SdioCard::stopTransmission(bool)+0x4c>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    86e8:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    86ea:	mov	r6, r1
  m_curState = IDLE_STATE;
    86ec:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    86ee:	mov	r1, r5
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    86f0:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    86f2:	ldr	r0, [pc, #64]	; (8734 <SdioCard::stopTransmission(bool)+0x50>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    86f4:	bic.w	r3, r3, #65536	; 0x10000
    86f8:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    86fa:	bl	7b04 <cardCommand(unsigned long, unsigned long)>
    86fe:	mov	r4, r0
    8700:	cbnz	r0, 8712 <SdioCard::stopTransmission(bool)+0x2e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8702:	movs	r2, #9
    8704:	ldr	r3, [pc, #48]	; (8738 <SdioCard::stopTransmission(bool)+0x54>)
    8706:	strb	r2, [r3, #0]
  m_errorLine = line;
    8708:	movw	r2, #962	; 0x3c2
    870c:	ldr	r3, [pc, #44]	; (873c <SdioCard::stopTransmission(bool)+0x58>)
    870e:	str	r2, [r3, #0]
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
    8710:	b.n	872c <SdioCard::stopTransmission(bool)+0x48>
  }
  if (blocking) {
    8712:	cbz	r6, 872c <SdioCard::stopTransmission(bool)+0x48>
    if (yieldTimeout(isBusyDat)) {
    8714:	ldr	r0, [pc, #40]	; (8740 <SdioCard::stopTransmission(bool)+0x5c>)
    8716:	bl	7a64 <yieldTimeout(bool (*)())>
    871a:	cbz	r0, 872c <SdioCard::stopTransmission(bool)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    871c:	movs	r2, #10
    871e:	ldr	r3, [pc, #24]	; (8738 <SdioCard::stopTransmission(bool)+0x54>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    8720:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8722:	strb	r2, [r3, #0]
  m_errorLine = line;
    8724:	movw	r2, #966	; 0x3c6
    8728:	ldr	r3, [pc, #16]	; (873c <SdioCard::stopTransmission(bool)+0x58>)
    872a:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    872c:	mov	r0, r4
    872e:	pop	{r4, r5, r6, pc}
    8730:	.word	0x402c0000
    8734:	.word	0x0cdb0000
    8738:	.word	0x20001dfe
    873c:	.word	0x20002934
    8740:	.word	0x000078d9

00008744 <SdioCard::syncDevice()>:
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    8744:	push	{r4, lr}
    8746:	mov	r4, r0
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    8748:	bl	7e38 <waitTransferComplete()>
    874c:	cbz	r0, 875e <SdioCard::syncDevice()+0x1a>
    return false;
  }
  if (m_curState != IDLE_STATE) {
    874e:	ldrb	r3, [r4, #9]
    8750:	cbz	r3, 875e <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    8752:	mov	r0, r4
    8754:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    8756:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    875a:	b.w	86e4 <SdioCard::stopTransmission(bool)>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    875e:	pop	{r4, pc}

00008760 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    8760:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    8762:	cbz	r2, 87a0 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    8764:	cmp	r2, #16
    blt     .L_bytewise
    8766:	blt.n	8798 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    8768:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    876c:	cbz	r3, 877c <memset+0x1c>
    rsb     r3, #8
    876e:	rsb	r3, r3, #8
    subs    r2, r3
    8772:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    8774:	subs	r3, #1
    strb    r1, [r0], #1
    8776:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    877a:	bgt.n	8774 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    877c:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    877e:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    8782:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    8786:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    8788:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    878a:	subs	r3, #1
    strd    r1, r12, [r0], #8
    878c:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    8790:	bgt.n	878a <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    8792:	ands.w	r2, r2, #7
    beq     .L_done
    8796:	beq.n	87a0 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    8798:	subs	r2, #1
    strb    r1, [r0], #1
    879a:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    879e:	bgt.n	8798 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    87a0:	pop	{r0, pc}
    87a2:	nop

000087a4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    87a4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    87a6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    87aa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    87ae:	bne.n	888c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    87b0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    87b2:	bcc.n	8838 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    87b4:	ldr.w	r3, [r1], #4
    87b8:	str.w	r3, [r0], #4
    87bc:	ldr.w	r3, [r1], #4
    87c0:	str.w	r3, [r0], #4
    87c4:	ldr.w	r3, [r1], #4
    87c8:	str.w	r3, [r0], #4
    87cc:	ldr.w	r3, [r1], #4
    87d0:	str.w	r3, [r0], #4
    87d4:	ldr.w	r3, [r1], #4
    87d8:	str.w	r3, [r0], #4
    87dc:	ldr.w	r3, [r1], #4
    87e0:	str.w	r3, [r0], #4
    87e4:	ldr.w	r3, [r1], #4
    87e8:	str.w	r3, [r0], #4
    87ec:	ldr.w	r3, [r1], #4
    87f0:	str.w	r3, [r0], #4
    87f4:	ldr.w	r3, [r1], #4
    87f8:	str.w	r3, [r0], #4
    87fc:	ldr.w	r3, [r1], #4
    8800:	str.w	r3, [r0], #4
    8804:	ldr.w	r3, [r1], #4
    8808:	str.w	r3, [r0], #4
    880c:	ldr.w	r3, [r1], #4
    8810:	str.w	r3, [r0], #4
    8814:	ldr.w	r3, [r1], #4
    8818:	str.w	r3, [r0], #4
    881c:	ldr.w	r3, [r1], #4
    8820:	str.w	r3, [r0], #4
    8824:	ldr.w	r3, [r1], #4
    8828:	str.w	r3, [r0], #4
    882c:	ldr.w	r3, [r1], #4
    8830:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8834:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8836:	bcs.n	87b4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8838:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    883a:	bcc.n	8860 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    883c:	ldr.w	r3, [r1], #4
    8840:	str.w	r3, [r0], #4
    8844:	ldr.w	r3, [r1], #4
    8848:	str.w	r3, [r0], #4
    884c:	ldr.w	r3, [r1], #4
    8850:	str.w	r3, [r0], #4
    8854:	ldr.w	r3, [r1], #4
    8858:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    885c:	subs	r2, #16
	bhs	.Lmid_block_loop
    885e:	bcs.n	883c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8860:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8862:	bcc.n	8870 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8864:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8868:	str.w	r3, [r0], #4
	subs	r2, #4
    886c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    886e:	bcs.n	8864 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8870:	adds	r2, #4
	beq	.Ldone
    8872:	beq.n	8886 <memcpy+0xe2>

	lsls	r2, r2, #31
    8874:	lsls	r2, r2, #31
	itt ne
    8876:	itt	ne
	ldrbne  r3, [r1], #1
    8878:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    887c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8880:	bcc.n	8886 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8882:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8884:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8886:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8888:	bx	lr
    888a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    888c:	cmp	r2, #8
	blo	.Lbyte_copy
    888e:	bcc.n	88b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8890:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8892:	beq.n	87b0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8894:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8898:	beq.n	87b0 <memcpy+0xc>

	rsb	r3, #4
    889a:	rsb	r3, r3, #4
	subs	r2, r3
    889e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    88a0:	lsls	r3, r3, #31
	itt ne
    88a2:	itt	ne
	ldrbne  r3, [r1], #1
    88a4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    88a8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    88ac:	bcc.n	87b0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    88ae:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    88b2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    88b6:	b.n	87b0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    88b8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    88ba:	bcc.n	8870 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    88bc:	subs	r2, #1
	ldrb    r3, [r1], #1
    88be:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    88c2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    88c6:	bcs.n	88bc <memcpy+0x118>

	ldrb	r3, [r1]
    88c8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    88ca:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    88cc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    88ce:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    88d0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    88d2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    88d4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    88d6:	bx	lr

000088d8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    88d8:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    88da:	ldr	r4, [pc, #80]	; (892c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    88dc:	mov.w	r1, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    88e0:	ldr	r5, [pc, #76]	; (8930 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    88e2:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    88e4:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    88e8:	ldr	r6, [pc, #72]	; (8934 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    88ea:	ldr	r2, [pc, #76]	; (8938 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    88ec:	add.w	r5, r5, r0, lsl #5
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    88f0:	str	r1, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    88f2:	mov	r0, r5
    88f4:	ldrh	r2, [r6, #0]
    88f6:	mov	r1, r4
    88f8:	bl	9924 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    88fc:	ldrh	r2, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    88fe:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8902:	add	r4, r2
	asm volatile("": : :"memory");
	asm("dsb");
    8904:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8908:	ldr	r2, [pc, #48]	; (893c <rx_queue_transfer+0x64>)
    890a:	str	r3, [r2, #0]
		location += 32;
    890c:	adds	r3, #32
	} while (location < end_addr);
    890e:	cmp	r4, r3
    8910:	bhi.n	890a <rx_queue_transfer+0x32>
	asm("dsb");
    8912:	dsb	sy
	asm("isb");
    8916:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    891a:	movs	r0, #3
    891c:	mov	r1, r5
    891e:	bl	997c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8922:	mov.w	r2, #131072	; 0x20000
    8926:	ldr	r3, [pc, #24]	; (8940 <rx_queue_transfer+0x68>)
    8928:	str	r2, [r3, #0]
    892a:	pop	{r4, r5, r6, pc}
    892c:	.word	0x20200800
    8930:	.word	0x200022c0
    8934:	.word	0x20037344
    8938:	.word	0xe000e18c
    893c:	.word	0xe000ef5c
    8940:	.word	0xe000e10c

00008944 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8944:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8948:	ldr	r2, [pc, #132]	; (89d0 <rx_event+0x8c>)
    894a:	ldr	r3, [r0, #4]
    894c:	ldrh	r4, [r2, #0]
    894e:	ubfx	r3, r3, #16, #15
	int i = t->callback_param;
    8952:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8954:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8956:	cmp	r4, #0
    8958:	ble.n	89c4 <rx_event+0x80>
		// received a packet with data
		uint32_t head = rx_head;
    895a:	ldr	r2, [pc, #120]	; (89d4 <rx_event+0x90>)
		if (head != rx_tail) {
    895c:	ldr	r1, [pc, #120]	; (89d8 <rx_event+0x94>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    895e:	ldrb	r3, [r2, #0]
		if (head != rx_tail) {
    8960:	ldrb	r1, [r1, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8962:	uxtb	r3, r3
    8964:	ldr.w	r8, [pc, #132]	; 89ec <rx_event+0xa8>
    8968:	ldr	r7, [pc, #112]	; (89dc <rx_event+0x98>)
		if (head != rx_tail) {
    896a:	cmp	r3, r1
    896c:	ldr	r1, [pc, #112]	; (89e0 <rx_event+0x9c>)
    896e:	beq.n	89a0 <rx_event+0x5c>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8970:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    8974:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8978:	rsb	r0, r6, #512	; 0x200
    897c:	cmp	r4, r0
    897e:	bhi.n	89a0 <rx_event+0x5c>
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8980:	ldr	r3, [pc, #96]	; (89e4 <rx_event+0xa0>)
    8982:	add.w	r0, r6, r9, lsl #9
    8986:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    8988:	add	r6, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    898a:	add.w	r1, r3, r5, lsl #9
    898e:	add	r0, r3
    8990:	bl	87a4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    8994:	ldr	r3, [r7, #0]
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    8996:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    899a:	add	r4, r3
    899c:	str	r4, [r7, #0]
    899e:	b.n	89c4 <rx_event+0x80>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    89a0:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    89a2:	movs	r6, #0
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    89a4:	strh.w	r4, [r8, r5, lsl #1]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    89a8:	cmp	r3, #9
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    89aa:	ldr	r0, [pc, #60]	; (89e8 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    89ac:	it	cs
    89ae:	movcs	r3, r6
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    89b0:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    89b4:	strb	r5, [r1, r3]
		rx_head = head;
    89b6:	uxtb	r3, r3
    89b8:	strb	r3, [r2, #0]
		rx_available += len;
    89ba:	ldr	r3, [r7, #0]
    89bc:	add	r4, r3
    89be:	str	r4, [r7, #0]
    89c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    89c4:	mov	r0, r5
	}
}
    89c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    89ca:	b.w	88d8 <rx_queue_transfer>
    89ce:	nop
    89d0:	.word	0x20037344
    89d4:	.word	0x20037644
    89d8:	.word	0x2003764e
    89dc:	.word	0x20036e30
    89e0:	.word	0x20037645
    89e4:	.word	0x20200800
    89e8:	.word	0x20037334
    89ec:	.word	0x20037324

000089f0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    89f0:	ldr	r3, [pc, #112]	; (8a64 <usb_serial_flush_callback+0x74>)
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    89f2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    89f6:	ldrb	r2, [r3, #0]
    89f8:	and.w	r3, r2, #255	; 0xff
    89fc:	cbnz	r2, 8a60 <usb_serial_flush_callback+0x70>
	if (!usb_configuration) return;
    89fe:	ldr	r2, [pc, #104]	; (8a68 <usb_serial_flush_callback+0x78>)
    8a00:	ldrb	r2, [r2, #0]
    8a02:	cbz	r2, 8a60 <usb_serial_flush_callback+0x70>
	if (tx_available == 0) return;
    8a04:	ldr	r6, [pc, #100]	; (8a6c <usb_serial_flush_callback+0x7c>)
    8a06:	ldrh	r5, [r6, #0]
    8a08:	cbz	r5, 8a60 <usb_serial_flush_callback+0x70>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a0a:	ldr	r7, [pc, #100]	; (8a70 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8a0c:	rsb	r5, r5, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a10:	ldr	r2, [pc, #96]	; (8a74 <usb_serial_flush_callback+0x84>)
    8a12:	ldrb	r4, [r7, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8a14:	ldr	r1, [pc, #96]	; (8a78 <usb_serial_flush_callback+0x88>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a16:	add.w	r8, r2, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8a1a:	mov	r2, r5
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8a1c:	add.w	r4, r1, r4, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8a20:	mov	r0, r8
    8a22:	mov	r1, r4
    8a24:	bl	9924 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8a28:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8a2c:	add	r4, r5
	asm volatile("": : :"memory");
	asm("dsb");
    8a2e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8a32:	ldr	r2, [pc, #72]	; (8a7c <usb_serial_flush_callback+0x8c>)
    8a34:	str	r3, [r2, #0]
		location += 32;
    8a36:	adds	r3, #32
	} while (location < end_addr);
    8a38:	cmp	r4, r3
    8a3a:	bhi.n	8a34 <usb_serial_flush_callback+0x44>
	asm("dsb");
    8a3c:	dsb	sy
	asm("isb");
    8a40:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8a44:	movs	r0, #4
    8a46:	mov	r1, r8
    8a48:	bl	9950 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8a4c:	ldrb	r3, [r7, #0]
    8a4e:	ldr	r1, [pc, #32]	; (8a70 <usb_serial_flush_callback+0x80>)
    8a50:	movs	r2, #0
    8a52:	adds	r3, #1
	tx_available = 0;
    8a54:	strh	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    8a56:	uxtb	r3, r3
    8a58:	cmp	r3, #3
    8a5a:	ite	ls
    8a5c:	strbls	r3, [r1, #0]
    8a5e:	strbhi	r2, [r1, #0]
    8a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a64:	.word	0x20037652
    8a68:	.word	0x20037654
    8a6c:	.word	0x20037366
    8a70:	.word	0x20037651
    8a74:	.word	0x200023c0
    8a78:	.word	0x20201800
    8a7c:	.word	0xe000ef70

00008a80 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    8a80:	bx	lr
	...

00008a84 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8a84:	ldr	r3, [pc, #168]	; (8b30 <usb_serial_configure+0xac>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    8a86:	push	{r4, r5, r6, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8a88:	ldrb	r3, [r3, #0]
    8a8a:	ldr	r5, [pc, #168]	; (8b34 <usb_serial_configure+0xb0>)
    8a8c:	ldr	r6, [pc, #168]	; (8b38 <usb_serial_configure+0xb4>)
    8a8e:	cbz	r3, 8a96 <usb_serial_configure+0x12>
		tx_packet_size = CDC_TX_SIZE_480;
    8a90:	mov.w	r3, #512	; 0x200
    8a94:	b.n	8a98 <usb_serial_configure+0x14>
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8a96:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8a98:	movs	r2, #128	; 0x80
    8a9a:	movs	r1, #0
    8a9c:	ldr	r0, [pc, #156]	; (8b3c <usb_serial_configure+0xb8>)
	tx_head = 0;
    8a9e:	movs	r4, #0
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8aa0:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    8aa2:	strh	r3, [r6, #0]
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8aa4:	bl	8760 <memset>
	tx_head = 0;
    8aa8:	ldr	r3, [pc, #148]	; (8b40 <usb_serial_configure+0xbc>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8aaa:	mov.w	r2, #256	; 0x100
    8aae:	mov	r1, r4
    8ab0:	ldr	r0, [pc, #144]	; (8b44 <usb_serial_configure+0xc0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8ab2:	strb	r4, [r3, #0]
	tx_available = 0;
    8ab4:	ldr	r3, [pc, #144]	; (8b48 <usb_serial_configure+0xc4>)
    8ab6:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8ab8:	bl	8760 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8abc:	movs	r2, #16
    8abe:	mov	r1, r4
    8ac0:	ldr	r0, [pc, #136]	; (8b4c <usb_serial_configure+0xc8>)
    8ac2:	bl	8760 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    8ac6:	movs	r2, #16
    8ac8:	mov	r1, r4
    8aca:	ldr	r0, [pc, #132]	; (8b50 <usb_serial_configure+0xcc>)
    8acc:	bl	8760 <memset>
	rx_head = 0;
    8ad0:	ldr	r3, [pc, #128]	; (8b54 <usb_serial_configure+0xd0>)
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8ad2:	mov	r2, r4
    8ad4:	movs	r1, #16
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8ad6:	strb	r4, [r3, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8ad8:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8ada:	ldr	r3, [pc, #124]	; (8b58 <usb_serial_configure+0xd4>)
    8adc:	strb	r4, [r3, #0]
	rx_available = 0;
    8ade:	ldr	r3, [pc, #124]	; (8b5c <usb_serial_configure+0xd8>)
    8ae0:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8ae2:	mov	r3, r4
    8ae4:	bl	98c0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8ae8:	ldr	r3, [pc, #116]	; (8b60 <usb_serial_configure+0xdc>)
    8aea:	mov	r2, r4
    8aec:	ldrh	r1, [r6, #0]
    8aee:	movs	r0, #3
    8af0:	bl	9868 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8af4:	mov	r3, r4
    8af6:	movs	r2, #1
    8af8:	ldrh	r1, [r5, #0]
    8afa:	movs	r0, #4
    8afc:	bl	98c0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8b00:	mov	r0, r4
    8b02:	adds	r4, #1
    8b04:	bl	88d8 <rx_queue_transfer>
    8b08:	cmp	r4, #8
    8b0a:	bne.n	8b00 <usb_serial_configure+0x7c>
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8b0c:	ldr	r2, [pc, #84]	; (8b64 <usb_serial_configure+0xe0>)
    8b0e:	ldr	r3, [pc, #88]	; (8b68 <usb_serial_configure+0xe4>)
    8b10:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    8b12:	movs	r2, #0
    8b14:	ldr	r3, [pc, #84]	; (8b6c <usb_serial_configure+0xe8>)
    8b16:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8b1a:	movs	r2, #74	; 0x4a
    8b1c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8b20:	ldr.w	r2, [r3, #328]	; 0x148
    8b24:	orr.w	r2, r2, #16777216	; 0x1000000
    8b28:	str.w	r2, [r3, #328]	; 0x148
    8b2c:	pop	{r4, r5, r6, pc}
    8b2e:	nop
    8b30:	.word	0x20037655
    8b34:	.word	0x20037368
    8b38:	.word	0x20037344
    8b3c:	.word	0x200023c0
    8b40:	.word	0x20037651
    8b44:	.word	0x200022c0
    8b48:	.word	0x20037366
    8b4c:	.word	0x20037324
    8b50:	.word	0x20037334
    8b54:	.word	0x20037644
    8b58:	.word	0x2003764e
    8b5c:	.word	0x20036e30
    8b60:	.word	0x00008945
    8b64:	.word	0x000089f1
    8b68:	.word	0x20037318
    8b6c:	.word	0x402e0000

00008b70 <usb_serial_read>:

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8b70:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8b74:	ldr	r3, [pc, #172]	; (8c24 <usb_serial_read+0xb4>)
    8b76:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8b7a:	mov	r8, r0
    8b7c:	mov	fp, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8b7e:	str	r2, [r3, #0]

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;
    8b80:	movs	r6, #0

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8b82:	ldr	r3, [pc, #164]	; (8c28 <usb_serial_read+0xb8>)
    8b84:	ldrb	r4, [r3, #0]
    8b86:	str	r3, [sp, #0]
    8b88:	uxtb	r4, r4
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b8a:	ldr	r3, [pc, #160]	; (8c2c <usb_serial_read+0xbc>)

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8b8c:	cmp	r6, fp
    8b8e:	bcs.n	8c12 <usb_serial_read+0xa2>
    8b90:	ldr	r2, [pc, #156]	; (8c30 <usb_serial_read+0xc0>)
    8b92:	ldrb	r2, [r2, #0]
    8b94:	cmp	r4, r2
    8b96:	beq.n	8c12 <usb_serial_read+0xa2>
		if (++tail > RX_NUM) tail = 0;
    8b98:	adds	r4, #1
		uint32_t i = rx_list[tail];
    8b9a:	ldr	r2, [pc, #152]	; (8c34 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b9c:	ldr	r1, [pc, #152]	; (8c38 <usb_serial_read+0xc8>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    8b9e:	rsb	sl, r6, fp
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8ba2:	cmp	r4, #9
    8ba4:	ldr.w	r9, [pc, #156]	; 8c44 <usb_serial_read+0xd4>
    8ba8:	str	r3, [sp, #4]
    8baa:	it	cs
    8bac:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8bae:	ldrb	r7, [r2, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8bb0:	ldrh.w	r2, [r3, r7, lsl #1]
    8bb4:	lsls	r0, r7, #9
    8bb6:	ldrh.w	r5, [r1, r7, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8bba:	add	r0, r2
    8bbc:	ldr	r1, [pc, #124]	; (8c3c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8bbe:	subs	r5, r5, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8bc0:	cmp	sl, r5
    8bc2:	bcs.n	8bea <usb_serial_read+0x7a>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8bc4:	mov	r2, sl
    8bc6:	add	r1, r0
    8bc8:	mov	r0, r8
    8bca:	mov	r6, fp
    8bcc:	bl	87a4 <memcpy>
			rx_available -= len;
    8bd0:	ldr.w	r2, [r9]
			rx_index[i] += len;
    8bd4:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8bd6:	rsb	r2, sl, r2
    8bda:	str.w	r2, [r9]
			rx_index[i] += len;
    8bde:	ldrh.w	r2, [r3, r7, lsl #1]
    8be2:	add	sl, r2
    8be4:	strh.w	sl, [r3, r7, lsl #1]
    8be8:	b.n	8b8c <usb_serial_read+0x1c>
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8bea:	add	r1, r0
    8bec:	mov	r2, r5
    8bee:	mov	r0, r8
			p += avail;
			rx_available -= avail;
			count += avail;
    8bf0:	add	r6, r5
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8bf2:	bl	87a4 <memcpy>
			p += avail;
			rx_available -= avail;
    8bf6:	ldr.w	r2, [r9]
			count += avail;
			rx_tail = tail;
    8bfa:	ldr	r3, [sp, #0]
			rx_queue_transfer(i);
    8bfc:	mov	r0, r7
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    8bfe:	subs	r2, r2, r5
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    8c00:	add	r8, r5
			rx_available -= avail;
    8c02:	str.w	r2, [r9]
			count += avail;
			rx_tail = tail;
    8c06:	uxtb	r2, r4
    8c08:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    8c0a:	bl	88d8 <rx_queue_transfer>
    8c0e:	ldr	r3, [sp, #4]
    8c10:	b.n	8b8c <usb_serial_read+0x1c>
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8c12:	mov.w	r2, #131072	; 0x20000
    8c16:	ldr	r3, [pc, #40]	; (8c40 <usb_serial_read+0xd0>)
	return count;
}
    8c18:	mov	r0, r6
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8c1a:	str	r2, [r3, #0]
	return count;
}
    8c1c:	add	sp, #12
    8c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c22:	nop
    8c24:	.word	0xe000e18c
    8c28:	.word	0x2003764e
    8c2c:	.word	0x20037334
    8c30:	.word	0x20037644
    8c34:	.word	0x20037645
    8c38:	.word	0x20037324
    8c3c:	.word	0x20200800
    8c40:	.word	0xe000e10c
    8c44:	.word	0x20036e30

00008c48 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8c48:	ldr	r3, [pc, #44]	; (8c78 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8c4a:	ldr	r2, [pc, #48]	; (8c7c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8c4c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8c4e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8c50:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8c52:	cmp	r3, r2
    8c54:	beq.n	8c72 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8c56:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8c58:	ldr	r2, [pc, #36]	; (8c80 <usb_serial_peekchar+0x38>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8c5a:	cmp	r3, #9
    8c5c:	it	cs
    8c5e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8c60:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8c62:	ldr	r3, [pc, #32]	; (8c84 <usb_serial_peekchar+0x3c>)
    8c64:	ldrh.w	r1, [r3, r2, lsl #1]
    8c68:	ldr	r3, [pc, #28]	; (8c88 <usb_serial_peekchar+0x40>)
    8c6a:	add.w	r3, r3, r2, lsl #9
    8c6e:	ldrb	r0, [r3, r1]
    8c70:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8c72:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    8c76:	bx	lr
    8c78:	.word	0x2003764e
    8c7c:	.word	0x20037644
    8c80:	.word	0x20037645
    8c84:	.word	0x20037334
    8c88:	.word	0x20200800

00008c8c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8c8c:	ldr	r3, [pc, #4]	; (8c94 <usb_serial_available+0x8>)
    8c8e:	ldr	r0, [r3, #0]
}
    8c90:	bx	lr
    8c92:	nop
    8c94:	.word	0x20036e30

00008c98 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8c98:	ldr	r3, [pc, #68]	; (8ce0 <usb_serial_flush_input+0x48>)
	return rx_available;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8c9a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    8c9e:	ldrb	r4, [r3, #0]
    8ca0:	mov	r5, r3
	while (tail != rx_head) {
    8ca2:	ldr	r7, [pc, #64]	; (8ce4 <usb_serial_flush_input+0x4c>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8ca4:	uxtb	r4, r4
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    8ca6:	ldr.w	r8, [pc, #76]	; 8cf4 <usb_serial_flush_input+0x5c>
		rx_available -= rx_count[i] - rx_index[i];
    8caa:	ldr	r6, [pc, #60]	; (8ce8 <usb_serial_flush_input+0x50>)

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    8cac:	ldrb	r3, [r7, #0]
    8cae:	cmp	r4, r3
    8cb0:	beq.n	8cdc <usb_serial_flush_input+0x44>
		if (++tail > RX_NUM) tail = 0;
    8cb2:	adds	r4, #1
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    8cb4:	ldr	r3, [pc, #52]	; (8cec <usb_serial_flush_input+0x54>)
    8cb6:	ldr	r1, [pc, #56]	; (8cf0 <usb_serial_flush_input+0x58>)
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8cb8:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    8cba:	ldr	r2, [r6, #0]
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8cbc:	it	cs
    8cbe:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8cc0:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8cc4:	ldrh.w	r3, [r3, r0, lsl #1]
    8cc8:	ldrh.w	r1, [r1, r0, lsl #1]
    8ccc:	subs	r3, r3, r1
    8cce:	subs	r3, r2, r3
    8cd0:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    8cd2:	bl	88d8 <rx_queue_transfer>
		rx_tail = tail;
    8cd6:	uxtb	r3, r4
    8cd8:	strb	r3, [r5, #0]
    8cda:	b.n	8cac <usb_serial_flush_input+0x14>
	}
}
    8cdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ce0:	.word	0x2003764e
    8ce4:	.word	0x20037644
    8ce8:	.word	0x20036e30
    8cec:	.word	0x20037324
    8cf0:	.word	0x20037334
    8cf4:	.word	0x20037645

00008cf8 <usb_serial_getchar>:


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8cf8:	push	{r0, r1, r2, lr}
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    8cfa:	movs	r1, #1
    8cfc:	add.w	r0, sp, #7
    8d00:	bl	8b70 <usb_serial_read>
    8d04:	cbz	r0, 8d0c <usb_serial_getchar+0x14>
    8d06:	ldrb.w	r0, [sp, #7]
    8d0a:	b.n	8d10 <usb_serial_getchar+0x18>
	return -1;
    8d0c:	mov.w	r0, #4294967295
}
    8d10:	add	sp, #12
    8d12:	ldr.w	pc, [sp], #4
	...

00008d18 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8d18:	ldr	r2, [pc, #336]	; (8e6c <usb_serial_write+0x154>)
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8d1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d1e:	sub	sp, #20
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8d20:	ldrb	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8d22:	mov	r9, r0
    8d24:	mov	r6, r1
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8d26:	and.w	r4, r3, #255	; 0xff
    8d2a:	str	r2, [sp, #4]
    8d2c:	cmp	r3, #0
    8d2e:	beq.w	8e64 <usb_serial_write+0x14c>
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8d32:	ldr.w	sl, [pc, #328]	; 8e7c <usb_serial_write+0x164>
    8d36:	movs	r4, #0
    8d38:	mov	fp, sl
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8d3a:	cmp	r6, #0
    8d3c:	beq.w	8e64 <usb_serial_write+0x14c>
		tx_noautoflush = 1;
    8d40:	movs	r3, #1
    8d42:	ldr	r2, [pc, #300]	; (8e70 <usb_serial_write+0x158>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
    8d44:	movs	r7, #0
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    8d46:	strb	r3, [r2, #0]
    8d48:	mov	r5, r2
		transfer_t *xfer = tx_transfer + tx_head;
    8d4a:	ldr	r3, [pc, #296]	; (8e74 <usb_serial_write+0x15c>)
    8d4c:	ldrb.w	r8, [r3]
    8d50:	ldr	r3, [pc, #292]	; (8e78 <usb_serial_write+0x160>)
    8d52:	add.w	r8, r3, r8, lsl #5
		int waiting=0;
    8d56:	mov	r3, r7
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8d58:	ldrh.w	r1, [sl]
    8d5c:	cmp	r1, #0
    8d5e:	bne.n	8dba <usb_serial_write+0xa2>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    8d60:	mov	r0, r8
    8d62:	str	r1, [sp, #12]
    8d64:	str	r3, [sp, #8]
    8d66:	bl	9998 <usb_transfer_status>
			if (!(status & 0x80)) {
    8d6a:	ands.w	r0, r0, #128	; 0x80
    8d6e:	ldr	r3, [sp, #8]
    8d70:	ldr	r1, [sp, #12]
    8d72:	bne.n	8d82 <usb_serial_write+0x6a>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8d74:	mov.w	r3, #2048	; 0x800
    8d78:	ldr	r2, [pc, #256]	; (8e7c <usb_serial_write+0x164>)
    8d7a:	strh	r3, [r2, #0]
				transmit_previous_timeout = 0;
    8d7c:	ldr	r3, [pc, #256]	; (8e80 <usb_serial_write+0x168>)
    8d7e:	strb	r0, [r3, #0]
    8d80:	b.n	8dba <usb_serial_write+0xa2>
				break;
			}
			asm("dsb" ::: "memory");
    8d82:	dsb	sy
			tx_noautoflush = 0;
    8d86:	strb	r1, [r5, #0]
			if (!waiting) {
    8d88:	cbnz	r3, 8d8e <usb_serial_write+0x76>
				wait_begin_at = systick_millis_count;
    8d8a:	ldr	r3, [pc, #248]	; (8e84 <usb_serial_write+0x16c>)
    8d8c:	ldr	r7, [r3, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8d8e:	ldr	r3, [pc, #240]	; (8e80 <usb_serial_write+0x168>)
    8d90:	ldrb	r3, [r3, #0]
    8d92:	cmp	r3, #0
    8d94:	bne.n	8e64 <usb_serial_write+0x14c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8d96:	ldr	r3, [pc, #236]	; (8e84 <usb_serial_write+0x16c>)
    8d98:	ldr	r3, [r3, #0]
    8d9a:	subs	r3, r3, r7
    8d9c:	cmp	r3, #120	; 0x78
    8d9e:	bls.n	8da8 <usb_serial_write+0x90>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    8da0:	movs	r2, #1
    8da2:	ldr	r3, [pc, #220]	; (8e80 <usb_serial_write+0x168>)
    8da4:	strb	r2, [r3, #0]
    8da6:	b.n	8e64 <usb_serial_write+0x14c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8da8:	ldr	r3, [sp, #4]
    8daa:	ldrb	r3, [r3, #0]
    8dac:	cmp	r3, #0
    8dae:	beq.n	8e64 <usb_serial_write+0x14c>
			yield();
    8db0:	bl	9e60 <yield>
			tx_noautoflush = 1;
    8db4:	movs	r3, #1
    8db6:	strb	r3, [r5, #0]
    8db8:	b.n	8d58 <usb_serial_write+0x40>
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8dba:	ldr	r3, [pc, #184]	; (8e74 <usb_serial_write+0x15c>)
    8dbc:	ldrh.w	r7, [fp]
    8dc0:	ldrb	r5, [r3, #0]
    8dc2:	rsb	r0, r7, #2048	; 0x800
    8dc6:	ldr	r3, [pc, #192]	; (8e88 <usb_serial_write+0x170>)
    8dc8:	lsls	r5, r5, #11
		if (size >= tx_available) {
    8dca:	cmp	r7, r6
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8dcc:	str	r3, [sp, #8]
    8dce:	add	r0, r5
    8dd0:	add	r0, r3
		if (size >= tx_available) {
    8dd2:	bhi.n	8e3c <usb_serial_write+0x124>
			memcpy(txdata, data, tx_available);
    8dd4:	mov	r2, r7
    8dd6:	mov	r1, r9
    8dd8:	bl	87a4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8ddc:	ldr	r3, [sp, #8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8dde:	mov.w	r2, #2048	; 0x800
    8de2:	mov	r0, r8
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8de4:	add	r5, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8de6:	movs	r3, #0
    8de8:	mov	r1, r5
    8dea:	bl	9924 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8dee:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8df2:	add.w	r5, r5, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8df6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8dfa:	ldr	r2, [pc, #144]	; (8e8c <usb_serial_write+0x174>)
    8dfc:	str	r3, [r2, #0]
		location += 32;
    8dfe:	adds	r3, #32
	} while (location < end_addr);
    8e00:	cmp	r5, r3
    8e02:	bhi.n	8dfc <usb_serial_write+0xe4>
	asm("dsb");
    8e04:	dsb	sy
	asm("isb");
    8e08:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8e0c:	movs	r0, #4
    8e0e:	mov	r1, r8
    8e10:	bl	9950 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8e14:	ldr	r2, [pc, #92]	; (8e74 <usb_serial_write+0x15c>)
    8e16:	ldrb	r3, [r2, #0]
    8e18:	adds	r3, #1
    8e1a:	uxtb	r3, r3
    8e1c:	cmp	r3, #3
    8e1e:	it	hi
    8e20:	movhi	r3, #0
    8e22:	strb	r3, [r2, #0]
			size -= tx_available;
    8e24:	ldrh.w	r3, [fp]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8e28:	ldr	r2, [pc, #100]	; (8e90 <usb_serial_write+0x178>)
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    8e2a:	subs	r6, r6, r3
			sent += tx_available;
    8e2c:	add	r4, r3
			data += tx_available;
    8e2e:	add	r9, r3
			tx_available = 0;
    8e30:	movs	r3, #0
    8e32:	strh.w	r3, [fp]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8e36:	str.w	r3, [r2, #132]	; 0x84
    8e3a:	b.n	8e58 <usb_serial_write+0x140>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    8e3c:	mov	r2, r6
    8e3e:	mov	r1, r9
    8e40:	bl	87a4 <memcpy>
			tx_available -= size;
    8e44:	subs	r7, r7, r6
			sent += size;
    8e46:	add	r4, r6
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8e48:	mov.w	r2, #3221225472	; 0xc0000000
    8e4c:	ldr	r3, [pc, #64]	; (8e90 <usb_serial_write+0x178>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    8e4e:	movs	r6, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    8e50:	strh.w	r7, [sl]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8e54:	str.w	r2, [r3, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    8e58:	dsb	sy
		tx_noautoflush = 0;
    8e5c:	movs	r3, #0
    8e5e:	ldr	r2, [pc, #16]	; (8e70 <usb_serial_write+0x158>)
    8e60:	strb	r3, [r2, #0]
    8e62:	b.n	8d3a <usb_serial_write+0x22>
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8e64:	mov	r0, r4
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    8e66:	add	sp, #20
    8e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e6c:	.word	0x20037654
    8e70:	.word	0x20037652
    8e74:	.word	0x20037651
    8e78:	.word	0x200023c0
    8e7c:	.word	0x20037366
    8e80:	.word	0x20037650
    8e84:	.word	0x20037314
    8e88:	.word	0x20201800
    8e8c:	.word	0xe000ef70
    8e90:	.word	0x402e0000

00008e94 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8e94:	push	{r0, r1, r2, lr}
    8e96:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8e98:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8e9a:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8e9e:	mov	r0, r3
    8ea0:	bl	8d18 <usb_serial_write>
}
    8ea4:	add	sp, #12
    8ea6:	ldr.w	pc, [sp], #4
	...

00008eac <usb_serial_write_buffer_free>:
	}
	return sent;
}

int usb_serial_write_buffer_free(void)
{
    8eac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8eb0:	ldr	r3, [pc, #56]	; (8eec <usb_serial_write_buffer_free+0x40>)
	for (uint32_t i=0; i < TX_NUM; i++) {
    8eb2:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8eb4:	movs	r2, #1
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8eb6:	ldr	r7, [pc, #56]	; (8ef0 <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8eb8:	mov	r6, r4
    8eba:	mov	r5, r3
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8ebc:	ldr.w	r8, [pc, #52]	; 8ef4 <usb_serial_write_buffer_free+0x48>
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8ec0:	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8ec2:	ldrb	r3, [r7, #0]
    8ec4:	cmp	r3, r4
    8ec6:	beq.n	8ed8 <usb_serial_write_buffer_free+0x2c>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8ec8:	add.w	r0, r8, r4, lsl #5
    8ecc:	bl	9998 <usb_transfer_status>
    8ed0:	lsls	r3, r0, #24
    8ed2:	it	pl
    8ed4:	addpl.w	r6, r6, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8ed8:	adds	r4, #1
    8eda:	cmp	r4, #4
    8edc:	bne.n	8ec2 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    8ede:	dsb	sy
	tx_noautoflush = 0;
    8ee2:	movs	r3, #0
	return sum;
}
    8ee4:	mov	r0, r6
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    8ee6:	strb	r3, [r5, #0]
	return sum;
}
    8ee8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8eec:	.word	0x20037652
    8ef0:	.word	0x20037651
    8ef4:	.word	0x200023c0

00008ef8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8ef8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8efc:	ldr	r3, [pc, #120]	; (8f78 <usb_serial_flush_output+0x80>)
    8efe:	ldrb	r3, [r3, #0]
    8f00:	cmp	r3, #0
    8f02:	beq.n	8f74 <usb_serial_flush_output+0x7c>
	if (tx_available == 0) return;
    8f04:	ldr	r6, [pc, #116]	; (8f7c <usb_serial_flush_output+0x84>)
    8f06:	ldrh	r5, [r6, #0]
    8f08:	cbz	r5, 8f74 <usb_serial_flush_output+0x7c>
	tx_noautoflush = 1;
    8f0a:	ldr	r7, [pc, #116]	; (8f80 <usb_serial_flush_output+0x88>)
    8f0c:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8f0e:	ldr.w	r8, [pc, #128]	; 8f90 <usb_serial_flush_output+0x98>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8f12:	rsb	r5, r5, #2048	; 0x800
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8f16:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    8f18:	ldrb.w	r4, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8f1c:	mov	r2, r5
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8f1e:	ldr	r3, [pc, #100]	; (8f84 <usb_serial_flush_output+0x8c>)
    8f20:	add.w	r9, r3, r4, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8f24:	ldr	r3, [pc, #96]	; (8f88 <usb_serial_flush_output+0x90>)
    8f26:	add.w	r4, r3, r4, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8f2a:	mov	r0, r9
    8f2c:	movs	r3, #0
    8f2e:	mov	r1, r4
    8f30:	bl	9924 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8f34:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8f38:	add	r4, r5
	asm volatile("": : :"memory");
	asm("dsb");
    8f3a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8f3e:	ldr	r2, [pc, #76]	; (8f8c <usb_serial_flush_output+0x94>)
    8f40:	str	r3, [r2, #0]
		location += 32;
    8f42:	adds	r3, #32
	} while (location < end_addr);
    8f44:	cmp	r4, r3
    8f46:	bhi.n	8f40 <usb_serial_flush_output+0x48>
	asm("dsb");
    8f48:	dsb	sy
	asm("isb");
    8f4c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8f50:	movs	r0, #4
    8f52:	mov	r1, r9
    8f54:	bl	9950 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8f58:	ldrb.w	r3, [r8]
    8f5c:	ldr	r1, [pc, #48]	; (8f90 <usb_serial_flush_output+0x98>)
    8f5e:	movs	r2, #0
    8f60:	adds	r3, #1
	tx_available = 0;
    8f62:	strh	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    8f64:	uxtb	r3, r3
    8f66:	cmp	r3, #3
    8f68:	ite	ls
    8f6a:	strbls	r3, [r1, #0]
    8f6c:	strbhi	r2, [r1, #0]
	tx_available = 0;
	asm("dsb" ::: "memory");
    8f6e:	dsb	sy
	tx_noautoflush = 0;
    8f72:	strb	r2, [r7, #0]
    8f74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f78:	.word	0x20037654
    8f7c:	.word	0x20037366
    8f80:	.word	0x20037652
    8f84:	.word	0x200023c0
    8f88:	.word	0x20201800
    8f8c:	.word	0xe000ef70
    8f90:	.word	0x20037651

00008f94 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8f94:	ldr	r2, [pc, #520]	; (91a0 <set_arm_clock+0x20c>)
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    8f96:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8f98:	ldr	r3, [r2, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8f9a:	ldr	r6, [r2, #24]
	uint32_t dcdc = DCDC_REG3;
    8f9c:	sub.w	r2, r2, #507904	; 0x7c000
    8fa0:	ldr	r4, [r2, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8fa2:	ldr	r2, [pc, #512]	; (91a4 <set_arm_clock+0x210>)
    8fa4:	cmp	r0, r2
    8fa6:	bls.n	8fcc <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    8fa8:	ldr	r2, [pc, #508]	; (91a8 <set_arm_clock+0x214>)
    8faa:	cmp	r0, r2
    8fac:	bls.n	8fde <set_arm_clock+0x4a>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8fae:	ldr	r1, [pc, #508]	; (91ac <set_arm_clock+0x218>)
    8fb0:	movs	r5, #25
    8fb2:	ldr	r2, [pc, #508]	; (91b0 <set_arm_clock+0x21c>)
    8fb4:	add	r1, r0
    8fb6:	udiv	r1, r1, r2
    8fba:	muls	r1, r5
    8fbc:	movw	r2, #1575	; 0x627
    8fc0:	addw	r1, r1, #1250	; 0x4e2
    8fc4:	cmp	r2, r1
    8fc6:	it	cs
    8fc8:	movcs	r2, r1
    8fca:	b.n	8fe2 <set_arm_clock+0x4e>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    8fcc:	movw	r2, #950	; 0x3b6
    8fd0:	movw	r1, #1150	; 0x47e
    8fd4:	ldr	r5, [pc, #476]	; (91b4 <set_arm_clock+0x220>)
    8fd6:	cmp	r0, r5
    8fd8:	it	hi
    8fda:	movhi	r2, r1
    8fdc:	b.n	8fe2 <set_arm_clock+0x4e>
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
		voltage = 1250; // 1.25V
    8fde:	movw	r2, #1250	; 0x4e2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8fe2:	ldr	r5, [pc, #444]	; (91a0 <set_arm_clock+0x20c>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8fe4:	sub.w	r2, r2, #800	; 0x320
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8fe8:	ldr.w	r1, [r5, #128]	; 0x80
    8fec:	orr.w	r1, r1, #192	; 0xc0
    8ff0:	str.w	r1, [r5, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8ff4:	movs	r1, #25
    8ff6:	udiv	r1, r2, r1
    8ffa:	and.w	r2, r4, #31
    8ffe:	cmp	r2, r1
    9000:	bcs.n	9012 <set_arm_clock+0x7e>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9002:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9006:	ldr	r2, [pc, #432]	; (91b8 <set_arm_clock+0x224>)
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9008:	orrs	r4, r1
		DCDC_REG3 = dcdc;
    900a:	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    900c:	ldr	r5, [r2, #0]
    900e:	cmp	r5, #0
    9010:	bge.n	900c <set_arm_clock+0x78>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    9012:	lsls	r7, r3, #6
    9014:	bmi.n	9070 <set_arm_clock+0xdc>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    9016:	ldr	r2, [pc, #420]	; (91bc <set_arm_clock+0x228>)
    9018:	ldr	r5, [r2, #16]
    901a:	ldr	r2, [pc, #420]	; (91c0 <set_arm_clock+0x22c>)
    901c:	ands	r2, r5
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    901e:	ldr	r5, [pc, #416]	; (91c0 <set_arm_clock+0x22c>)
    9020:	cmp	r2, r5
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    9022:	itete	eq
    9024:	moveq.w	r5, #402653184	; 0x18000000
    9028:	movne	r5, #0
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    902a:	moveq	r2, #0
    902c:	movne	r2, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    902e:	eor.w	r7, r3, r5
    9032:	tst.w	r7, #939524096	; 0x38000000
    9036:	beq.n	9042 <set_arm_clock+0xae>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    9038:	bic.w	r3, r3, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    903c:	orrs	r3, r5
			CCM_CBCDR = cbcdr;
    903e:	ldr	r5, [pc, #352]	; (91a0 <set_arm_clock+0x20c>)
    9040:	str	r3, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    9042:	lsls	r5, r2, #12
    9044:	eor.w	r2, r6, r5
    9048:	tst.w	r2, #12288	; 0x3000
    904c:	bne.n	9058 <set_arm_clock+0xc4>
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    904e:	orr.w	r3, r3, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    9052:	ldr	r2, [pc, #332]	; (91a0 <set_arm_clock+0x20c>)
    9054:	str	r3, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9056:	b.n	906a <set_arm_clock+0xd6>
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    9058:	bic.w	r2, r6, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    905c:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    905e:	ldr	r5, [pc, #320]	; (91a0 <set_arm_clock+0x20c>)
    9060:	str	r2, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    9062:	ldr	r2, [r5, #72]	; 0x48
    9064:	lsls	r6, r2, #28
    9066:	bmi.n	9062 <set_arm_clock+0xce>
    9068:	b.n	904e <set_arm_clock+0xba>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    906a:	ldr	r5, [r2, #72]	; 0x48
    906c:	lsls	r5, r5, #26
    906e:	bmi.n	906a <set_arm_clock+0xd6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    9070:	movs	r5, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    9072:	ldr	r7, [pc, #336]	; (91c4 <set_arm_clock+0x230>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    9074:	mov	r6, r5
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    9076:	mul.w	r2, r5, r6
    907a:	muls	r2, r0
    907c:	cmp	r2, r7
    907e:	bhi.n	908c <set_arm_clock+0xf8>
		if (div_arm < 8) {
    9080:	cmp	r6, #7
    9082:	bhi.n	9088 <set_arm_clock+0xf4>
			div_arm = div_arm + 1;
    9084:	adds	r6, #1
    9086:	b.n	9076 <set_arm_clock+0xe2>
		} else {
			if (div_ahb < 5) {
    9088:	cmp	r5, #4
    908a:	bls.n	90a6 <set_arm_clock+0x112>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    908c:	add.w	r2, r2, #5996544	; 0x5b8000
    9090:	ldr	r0, [pc, #308]	; (91c8 <set_arm_clock+0x234>)
    9092:	add.w	r2, r2, #3456	; 0xd80
    9096:	udiv	r2, r2, r0
	if (mult > 108) mult = 108;
    909a:	cmp	r2, #108	; 0x6c
    909c:	bhi.n	90ac <set_arm_clock+0x118>
	if (mult < 54) mult = 54;
    909e:	cmp	r2, #53	; 0x35
    90a0:	it	ls
    90a2:	movls	r2, #54	; 0x36
    90a4:	b.n	90ae <set_arm_clock+0x11a>
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
				div_ahb = div_ahb + 1;
    90a6:	adds	r5, #1
				div_arm = 1;
    90a8:	movs	r6, #1
    90aa:	b.n	9076 <set_arm_clock+0xe2>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    90ac:	movs	r2, #108	; 0x6c

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    90ae:	ldr	r7, [pc, #268]	; (91bc <set_arm_clock+0x228>)
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    90b0:	muls	r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    90b2:	ldr.w	ip, [pc, #304]	; 91e4 <set_arm_clock+0x250>
    90b6:	ldr.w	lr, [r7]
    90ba:	and.w	ip, lr, ip
    90be:	orr.w	lr, r2, #2147483648	; 0x80000000
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    90c2:	udiv	r0, r0, r6

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    90c6:	orr.w	lr, lr, #8192	; 0x2000
    90ca:	cmp	ip, lr
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    90cc:	udiv	r0, r0, r5

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    90d0:	bne.n	90e6 <set_arm_clock+0x152>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    90d2:	ldr	r7, [pc, #204]	; (91a0 <set_arm_clock+0x20c>)
    90d4:	subs	r2, r6, #1
    90d6:	ldr.w	lr, [r7, #16]
    90da:	and.w	r6, lr, #7
    90de:	cmp	r6, r2
    90e0:	mov	r6, r7
    90e2:	bne.n	90fc <set_arm_clock+0x168>
    90e4:	b.n	9108 <set_arm_clock+0x174>
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    90e6:	mov.w	lr, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    90ea:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    90ee:	str.w	lr, [r7]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    90f2:	str	r2, [r7, #0]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    90f4:	ldr	r2, [r7, #0]
    90f6:	cmp	r2, #0
    90f8:	bge.n	90f4 <set_arm_clock+0x160>
    90fa:	b.n	90d2 <set_arm_clock+0x13e>
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    90fc:	and.w	r2, r2, #7
    9100:	str	r2, [r7, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9102:	ldr	r2, [r6, #72]	; 0x48
    9104:	lsls	r7, r2, #15
    9106:	bmi.n	9102 <set_arm_clock+0x16e>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9108:	subs	r5, #1
    910a:	lsls	r5, r5, #10
    910c:	eor.w	r2, r3, r5
    9110:	tst.w	r2, #7168	; 0x1c00
    9114:	beq.n	912a <set_arm_clock+0x196>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    9116:	bic.w	r3, r3, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    911a:	and.w	r5, r5, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    911e:	ldr	r2, [pc, #128]	; (91a0 <set_arm_clock+0x20c>)
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9120:	orrs	r3, r5
		CCM_CBCDR = cbcdr;
    9122:	str	r3, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9124:	ldr	r5, [r2, #72]	; 0x48
    9126:	lsls	r5, r5, #30
    9128:	bmi.n	9124 <set_arm_clock+0x190>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    912a:	ldr	r2, [pc, #160]	; (91cc <set_arm_clock+0x238>)
    912c:	ldr	r5, [pc, #160]	; (91d0 <set_arm_clock+0x23c>)
    912e:	add	r2, r0
    9130:	udiv	r5, r2, r5
    9134:	cmp	r5, #4
    9136:	it	cs
    9138:	movcs	r5, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    913a:	subs	r2, r5, #1
    913c:	lsls	r2, r2, #8
    913e:	eor.w	r6, r3, r2
    9142:	tst.w	r6, #768	; 0x300
    9146:	ldr	r6, [pc, #88]	; (91a0 <set_arm_clock+0x20c>)
    9148:	beq.n	9156 <set_arm_clock+0x1c2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    914a:	bic.w	r3, r3, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    914e:	and.w	r2, r2, #768	; 0x300
    9152:	orrs	r3, r2
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9154:	str	r3, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9156:	ldr	r3, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9158:	ldr	r2, [pc, #68]	; (91a0 <set_arm_clock+0x20c>)
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    915a:	bic.w	r3, r3, #33554432	; 0x2000000
    915e:	str	r3, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9160:	ldr	r3, [r2, #72]	; 0x48
    9162:	lsls	r3, r3, #26
    9164:	bmi.n	9160 <set_arm_clock+0x1cc>

	F_CPU_ACTUAL = frequency;
    9166:	ldr	r3, [pc, #108]	; (91d4 <set_arm_clock+0x240>)
	F_BUS_ACTUAL = frequency / div_ipg;
    9168:	udiv	r5, r0, r5
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    916c:	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    916e:	ldr	r3, [pc, #104]	; (91d8 <set_arm_clock+0x244>)
    9170:	str	r5, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    9172:	ldr	r3, [pc, #104]	; (91dc <set_arm_clock+0x248>)
    9174:	udiv	r2, r0, r3
    9178:	mov.w	r3, #4294967295
    917c:	udiv	r3, r3, r2
    9180:	ldr	r2, [pc, #92]	; (91e0 <set_arm_clock+0x24c>)
    9182:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    9184:	and.w	r3, r4, #31
    9188:	cmp	r1, r3
    918a:	bcs.n	919c <set_arm_clock+0x208>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    918c:	bic.w	r3, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9190:	ldr	r2, [pc, #36]	; (91b8 <set_arm_clock+0x224>)

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9192:	orrs	r3, r1
		DCDC_REG3 = dcdc;
    9194:	str	r3, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9196:	ldr	r3, [r2, #0]
    9198:	cmp	r3, #0
    919a:	bge.n	9196 <set_arm_clock+0x202>
	}

	return frequency;
}
    919c:	pop	{r4, r5, r6, r7, pc}
    919e:	nop
    91a0:	.word	0x400fc000
    91a4:	.word	0x1f78a400
    91a8:	.word	0x23c34600
    91ac:	.word	0xdc3cba00
    91b0:	.word	0x01ab3f00
    91b4:	.word	0x016e3600
    91b8:	.word	0x40080000
    91bc:	.word	0x400d8000
    91c0:	.word	0x80003040
    91c4:	.word	0x269fb1ff
    91c8:	.word	0x00b71b00
    91cc:	.word	0x08f0d17f
    91d0:	.word	0x08f0d180
    91d4:	.word	0x200016b0
    91d8:	.word	0x200016ac
    91dc:	.word	0x000f4240
    91e0:	.word	0x20036e44
    91e4:	.word	0x8001307f

000091e8 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    91e8:	push	{r4, r5, lr}
    91ea:	ldr	r4, [pc, #148]	; (9280 <endpoint0_receive+0x98>)
	//printf("rx %lu\n", len);
	if (len > 0) {
    91ec:	cbnz	r1, 9232 <endpoint0_receive+0x4a>
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91ee:	cmp	r2, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91f0:	ldr	r3, [pc, #144]	; (9284 <endpoint0_receive+0x9c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91f2:	movw	r2, #32896	; 0x8080
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91f6:	mov.w	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91fa:	it	eq
    91fc:	moveq	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    91fe:	str	r3, [r4, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9200:	str	r1, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9202:	it	ne
    9204:	movne.w	r1, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9208:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    920a:	mov.w	r2, #0
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    920e:	it	eq
    9210:	moveq	r1, #0
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9212:	str	r2, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9214:	str	r2, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9216:	mov.w	r2, #65537	; 0x10001
    921a:	ldr	r3, [pc, #108]	; (9288 <endpoint0_receive+0xa0>)
    921c:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9220:	ldr.w	r2, [r3, #432]	; 0x1b0
    9224:	orr.w	r2, r2, #65536	; 0x10000
    9228:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    922c:	ldr	r2, [pc, #92]	; (928c <endpoint0_receive+0xa4>)
    922e:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    9230:	b.n	9276 <endpoint0_receive+0x8e>
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9232:	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9234:	ldr	r3, [pc, #88]	; (9290 <endpoint0_receive+0xa8>)
    9236:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9238:	orr.w	r1, r1, #128	; 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    923c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    923e:	str	r3, [r4, #8]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9240:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9242:	add.w	r1, r0, #4096	; 0x1000
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9246:	str	r5, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9248:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    924a:	add.w	r1, r0, #8192	; 0x2000
    924e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9250:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9254:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9258:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    925a:	str	r0, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    925c:	movs	r3, #0
    925e:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    9260:	ldr	r3, [pc, #36]	; (9288 <endpoint0_receive+0xa0>)
    9262:	ldr.w	r1, [r3, #432]	; 0x1b0
    9266:	orrs	r1, r5
    9268:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    926c:	ldr.w	r1, [r3, #432]	; 0x1b0
    9270:	cmp	r1, #0
    9272:	bne.n	926c <endpoint0_receive+0x84>
    9274:	b.n	91ee <endpoint0_receive+0x6>
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9276:	ldr.w	r2, [r3, #432]	; 0x1b0
    927a:	cmp	r2, #0
    927c:	bne.n	9276 <endpoint0_receive+0x8e>
}
    927e:	pop	{r4, r5, pc}
    9280:	.word	0x20000000
    9284:	.word	0x20037680
    9288:	.word	0x402e0000
    928c:	.word	0x20036de8
    9290:	.word	0x20037660

00009294 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9294:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    9296:	push	{r4, r5, r6, r7, lr}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9298:	cbz	r3, 92a2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    929a:	ldr	r3, [r2, #4]
    929c:	orr.w	r3, r3, #32768	; 0x8000
    92a0:	str	r3, [r2, #4]
	}
	__disable_irq();
    92a2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    92a4:	ldr	r4, [r0, #52]	; 0x34
    92a6:	ldr	r3, [pc, #100]	; (930c <schedule_transfer+0x78>)
	if (last) {
    92a8:	cbz	r4, 92f4 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    92aa:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    92ac:	ldr.w	r4, [r3, #432]	; 0x1b0
    92b0:	tst	r4, r1
    92b2:	bne.n	9304 <schedule_transfer+0x70>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    92b4:	ldr	r4, [pc, #88]	; (9310 <schedule_transfer+0x7c>)
    92b6:	ldr	r7, [r4, #0]
    92b8:	mov	r5, r4
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    92ba:	ldr.w	r4, [r3, #320]	; 0x140
    92be:	orr.w	r4, r4, #16384	; 0x4000
    92c2:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    92c6:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    92ca:	ldr.w	r6, [r3, #320]	; 0x140
    92ce:	lsls	r6, r6, #17
    92d0:	bpl.n	92e8 <schedule_transfer+0x54>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    92d2:	ands	r4, r1
    92d4:	bne.n	9304 <schedule_transfer+0x70>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    92d6:	str	r4, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    92d8:	ldr	r4, [pc, #48]	; (930c <schedule_transfer+0x78>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    92da:	str	r2, [r0, #8]
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    92dc:	ldr.w	r3, [r4, #432]	; 0x1b0
    92e0:	orrs	r1, r3
    92e2:	str.w	r1, [r4, #432]	; 0x1b0
		goto end;
    92e6:	b.n	9304 <schedule_transfer+0x70>
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    92e8:	ldr	r6, [r5, #0]
    92ea:	subs	r6, r6, r7
    92ec:	cmp.w	r6, #2400	; 0x960
    92f0:	bcc.n	92ba <schedule_transfer+0x26>
    92f2:	b.n	92d2 <schedule_transfer+0x3e>
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    92f4:	str	r2, [r0, #8]
	endpoint->status = 0;
    92f6:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    92f8:	ldr.w	r4, [r3, #432]	; 0x1b0
    92fc:	orrs	r1, r4
    92fe:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    9302:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    9304:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9306:	cpsie	i
    9308:	pop	{r4, r5, r6, r7, pc}
    930a:	nop
    930c:	.word	0x402e0000
    9310:	.word	0xe0001004

00009314 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9314:	push	{r4, r5, r6, lr}
    9316:	mov	r5, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9318:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    931a:	cbz	r0, 9346 <run_callbacks+0x32>
    931c:	mov	r2, r0
    931e:	movs	r4, #0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    9320:	ldr	r3, [r2, #4]
    9322:	ands.w	r3, r3, #128	; 0x80
    9326:	beq.n	932c <run_callbacks+0x18>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    9328:	str	r2, [r5, #48]	; 0x30
			break;
    932a:	b.n	9338 <run_callbacks+0x24>
		}
		count++;
		t = (transfer_t *)t->next;
    932c:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    932e:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    9330:	cmp	r2, #1
    9332:	bne.n	9320 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    9334:	str	r3, [r5, #48]	; 0x30
			ep->last_transfer = NULL;
    9336:	str	r3, [r5, #52]	; 0x34
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9338:	cbz	r4, 9346 <run_callbacks+0x32>
		transfer_t *next = (transfer_t *)first->next;
    933a:	ldr	r6, [r0, #0]
		ep->callback_function(first);
		first = next;
		count--;
    933c:	subs	r4, #1
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    933e:	ldr	r3, [r5, #56]	; 0x38
    9340:	blx	r3
		first = next;
    9342:	mov	r0, r6
    9344:	b.n	9338 <run_callbacks+0x24>
    9346:	pop	{r4, r5, r6, pc}

00009348 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    9348:	push	{r4, lr}
    934a:	ldr	r2, [pc, #128]	; (93cc <endpoint0_transmit.constprop.1+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    934c:	cbnz	r1, 937c <endpoint0_transmit.constprop.1+0x34>
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    934e:	ldr	r3, [pc, #128]	; (93d0 <endpoint0_transmit.constprop.1+0x88>)
    9350:	movs	r1, #1
    9352:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9354:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    9356:	str	r3, [r2, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9358:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    935a:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    935c:	str	r1, [r2, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    935e:	mov.w	r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9362:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9364:	ldr	r3, [pc, #108]	; (93d4 <endpoint0_transmit.constprop.1+0x8c>)
    9366:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    936a:	ldr.w	r2, [r3, #432]	; 0x1b0
    936e:	orr.w	r2, r2, #1
    9372:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9376:	ldr	r2, [pc, #96]	; (93d8 <endpoint0_transmit.constprop.1+0x90>)
    9378:	str	r1, [r2, #0]
    937a:	b.n	93c2 <endpoint0_transmit.constprop.1+0x7a>
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    937c:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    937e:	ldr	r3, [pc, #92]	; (93dc <endpoint0_transmit.constprop.1+0x94>)
    9380:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9382:	orr.w	r1, r1, #128	; 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9386:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9388:	str	r3, [r2, #72]	; 0x48
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    938a:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    938c:	add.w	r1, r0, #4096	; 0x1000
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9390:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9392:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9394:	add.w	r1, r0, #8192	; 0x2000
    9398:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    939a:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    939e:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    93a2:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    93a4:	str	r0, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    93a6:	movs	r3, #0
    93a8:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    93aa:	ldr	r3, [pc, #40]	; (93d4 <endpoint0_transmit.constprop.1+0x8c>)
    93ac:	ldr.w	r1, [r3, #432]	; 0x1b0
    93b0:	orr.w	r1, r1, #65536	; 0x10000
    93b4:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    93b8:	ldr.w	r1, [r3, #432]	; 0x1b0
    93bc:	cmp	r1, #0
    93be:	bne.n	93b8 <endpoint0_transmit.constprop.1+0x70>
    93c0:	b.n	934e <endpoint0_transmit.constprop.1+0x6>
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    93c2:	ldr.w	r2, [r3, #432]	; 0x1b0
    93c6:	cmp	r2, #0
    93c8:	bne.n	93c2 <endpoint0_transmit.constprop.1+0x7a>
}
    93ca:	pop	{r4, pc}
    93cc:	.word	0x20000000
    93d0:	.word	0x20037680
    93d4:	.word	0x402e0000
    93d8:	.word	0x20036de8
    93dc:	.word	0x20037660

000093e0 <usb_start_sof_interrupts>:
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    93e0:	cpsid	i
	sof_usage |= (1 << interface);
    93e2:	ldr	r2, [pc, #40]	; (940c <usb_start_sof_interrupts+0x2c>)
    93e4:	movs	r3, #1
    93e6:	lsl.w	r0, r3, r0
    93ea:	ldrb	r3, [r2, #0]
    93ec:	orrs	r0, r3
    93ee:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    93f0:	ldr	r2, [pc, #28]	; (9410 <usb_start_sof_interrupts+0x30>)
    93f2:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    93f6:	lsls	r1, r3, #24
    93f8:	bmi.n	9406 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    93fa:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    93fc:	orrs	r3, r1
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    93fe:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9402:	str.w	r3, [r2, #328]	; 0x148
	}
	__enable_irq();
    9406:	cpsie	i
    9408:	bx	lr
    940a:	nop
    940c:	.word	0x2003764f
    9410:	.word	0x402e0000

00009414 <usb_stop_sof_interrupts>:
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    9414:	movs	r3, #1
    9416:	ldr	r2, [pc, #32]	; (9438 <usb_stop_sof_interrupts+0x24>)
    9418:	lsl.w	r0, r3, r0
    941c:	ldrb	r3, [r2, #0]
    941e:	bic.w	r0, r3, r0
    9422:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    9424:	cbnz	r0, 9434 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    9426:	ldr	r2, [pc, #20]	; (943c <usb_stop_sof_interrupts+0x28>)
    9428:	ldr.w	r3, [r2, #328]	; 0x148
    942c:	bic.w	r3, r3, #128	; 0x80
    9430:	str.w	r3, [r2, #328]	; 0x148
    9434:	bx	lr
    9436:	nop
    9438:	.word	0x2003764f
    943c:	.word	0x402e0000

00009440 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    9440:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    9444:	ldr	r5, [pc, #648]	; (96d0 <usb_isr+0x290>)
    9446:	ldr.w	r6, [r5, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    944a:	lsls	r0, r6, #31
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    944c:	str.w	r6, [r5, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9450:	bmi.n	946c <usb_isr+0x2c>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    9452:	lsls	r1, r6, #25
    9454:	bpl.w	97e4 <usb_isr+0x3a4>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9458:	ldr	r3, [pc, #628]	; (96d0 <usb_isr+0x290>)
    945a:	ldr.w	r2, [r3, #428]	; 0x1ac
    945e:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    9462:	ldr.w	r2, [r3, #444]	; 0x1bc
    9466:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    946a:	b.n	97c6 <usb_isr+0x386>
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    946c:	ldr.w	r3, [r5, #428]	; 0x1ac
    9470:	mov	r8, r5
    9472:	mov	r9, r5
    9474:	ldr	r2, [pc, #600]	; (96d0 <usb_isr+0x290>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9476:	cmp	r3, #0
    9478:	beq.w	9720 <usb_isr+0x2e0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    947c:	str.w	r3, [r5, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
				s.word1 = endpoint_queue_head[0].setup0;
    9480:	ldr	r3, [pc, #592]	; (96d4 <usb_isr+0x294>)
    9482:	ldr	r4, [r3, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    9484:	ldr	r3, [r3, #44]	; 0x2c
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9486:	ldr.w	r2, [r5, #320]	; 0x140
    948a:	orr.w	r2, r2, #8192	; 0x2000
    948e:	str.w	r2, [r5, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9492:	ldr.w	r2, [r5, #320]	; 0x140
    9496:	lsls	r2, r2, #18
    9498:	bpl.n	9486 <usb_isr+0x46>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    949a:	ldr.w	r2, [r8, #320]	; 0x140
    949e:	bic.w	r2, r2, #8192	; 0x2000
    94a2:	str.w	r2, [r8, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    94a6:	mov.w	r2, #65537	; 0x10001
    94aa:	str.w	r2, [r8, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    94ae:	ldr.w	r7, [r9, #436]	; 0x1b4
    94b2:	ands.w	r7, r7, #65537	; 0x10001
    94b6:	bne.n	94ae <usb_isr+0x6e>
			endpoint0_notify_mask = 0;
    94b8:	ldr	r2, [pc, #540]	; (96d8 <usb_isr+0x298>)
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    94ba:	uxth	r1, r4
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    94bc:	str	r7, [r2, #0]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    94be:	movw	r2, #1665	; 0x681
    94c2:	cmp	r1, r2
    94c4:	bhi.n	9508 <usb_isr+0xc8>
    94c6:	cmp.w	r1, #1664	; 0x680
    94ca:	bcs.n	9558 <usb_isr+0x118>
    94cc:	cmp.w	r1, #258	; 0x102
    94d0:	beq.w	95da <usb_isr+0x19a>
    94d4:	bhi.n	94e0 <usb_isr+0xa0>
    94d6:	cmp	r1, #128	; 0x80
    94d8:	beq.n	956c <usb_isr+0x12c>
    94da:	cmp	r1, #130	; 0x82
    94dc:	beq.n	9576 <usb_isr+0x136>
    94de:	b.n	96c0 <usb_isr+0x280>
    94e0:	movw	r2, #770	; 0x302
    94e4:	cmp	r1, r2
    94e6:	beq.n	95ac <usb_isr+0x16c>
    94e8:	cmp.w	r1, #1280	; 0x500
    94ec:	bne.w	96c0 <usb_isr+0x280>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    94f0:	lsrs	r4, r4, #16
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
    94f2:	mov	r2, r7
    94f4:	mov	r1, r7
    94f6:	mov	r0, r7
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    94f8:	lsls	r4, r4, #25
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
    94fa:	bl	91e8 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    94fe:	orr.w	r4, r4, #16777216	; 0x1000000
    9502:	str.w	r4, [r8, #340]	; 0x154
    9506:	b.n	96c8 <usb_isr+0x288>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9508:	movw	r2, #8225	; 0x2021
    950c:	cmp	r1, r2
    950e:	beq.w	96aa <usb_isr+0x26a>
    9512:	bhi.n	9544 <usb_isr+0x104>
    9514:	cmp.w	r1, #2176	; 0x880
    9518:	beq.n	9560 <usb_isr+0x120>
    951a:	cmp.w	r1, #2304	; 0x900
    951e:	bne.w	96c0 <usb_isr+0x280>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    9522:	ldr	r3, [pc, #440]	; (96dc <usb_isr+0x29c>)
    9524:	ubfx	r4, r4, #16, #8
    9528:	strb	r4, [r3, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    952a:	ldr	r3, [pc, #436]	; (96e0 <usb_isr+0x2a0>)
    952c:	str.w	r3, [r8, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9530:	ldr	r3, [pc, #432]	; (96e4 <usb_isr+0x2a4>)
    9532:	str.w	r3, [r8, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    9536:	ldr	r3, [pc, #432]	; (96e8 <usb_isr+0x2a8>)
    9538:	str.w	r3, [r8, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    953c:	bl	8a84 <usb_serial_configure>
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
    9540:	mov	r2, r7
    9542:	b.n	95d4 <usb_isr+0x194>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9544:	movw	r2, #8737	; 0x2221
    9548:	cmp	r1, r2
    954a:	beq.w	9692 <usb_isr+0x252>
    954e:	movw	r3, #8993	; 0x2321
    9552:	cmp	r1, r3
    9554:	beq.n	95d2 <usb_isr+0x192>
    9556:	b.n	96c0 <usb_isr+0x280>
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9558:	lsrs	r4, r4, #16
    955a:	ldr	r2, [pc, #400]	; (96ec <usb_isr+0x2ac>)
    955c:	uxth	r0, r3
    955e:	b.n	964c <usb_isr+0x20c>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9560:	ldr	r3, [pc, #376]	; (96dc <usb_isr+0x29c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9562:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9564:	ldr	r0, [pc, #392]	; (96f0 <usb_isr+0x2b0>)
    9566:	ldrb	r3, [r3, #0]
    9568:	strb	r3, [r0, #0]
    956a:	b.n	963e <usb_isr+0x1fe>
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    956c:	ldr	r0, [pc, #384]	; (96f0 <usb_isr+0x2b0>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    956e:	movs	r1, #2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9570:	strb	r7, [r0, #0]
		reply_buffer[1] = 0;
    9572:	strb	r7, [r0, #1]
    9574:	b.n	963e <usb_isr+0x1fe>
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9576:	uxth	r3, r3
    9578:	and.w	r2, r3, #127	; 0x7f
		if (endpoint > 7) break;
    957c:	cmp	r2, #7
    957e:	bhi.w	96c0 <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9582:	lsls	r2, r2, #2
    9584:	ldr	r1, [pc, #364]	; (96f4 <usb_isr+0x2b4>)
    9586:	ldr	r1, [r1, r2]
		reply_buffer[0] = 0;
    9588:	ldr	r2, [pc, #356]	; (96f0 <usb_isr+0x2b0>)
    958a:	strb	r7, [r2, #0]
		reply_buffer[1] = 0;
    958c:	strb	r7, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    958e:	lsls	r7, r3, #24
    9590:	bpl.n	9598 <usb_isr+0x158>
    9592:	tst.w	r1, #65536	; 0x10000
    9596:	b.n	959c <usb_isr+0x15c>
    9598:	tst.w	r1, #1
			reply_buffer[0] = 1;
    959c:	it	ne
    959e:	movne	r3, #1
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    95a0:	mov.w	r1, #2
    95a4:	ldr	r0, [pc, #328]	; (96f0 <usb_isr+0x2b0>)
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
			reply_buffer[0] = 1;
    95a6:	it	ne
    95a8:	strbne	r3, [r2, #0]
    95aa:	b.n	963e <usb_isr+0x1fe>
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    95ac:	uxth	r2, r3
    95ae:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    95b2:	cmp	r3, #7
    95b4:	bhi.w	96c0 <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		if (dir) {
    95b8:	tst.w	r2, #128	; 0x80
    95bc:	mov.w	r3, r3, lsl #2
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    95c0:	ldr	r2, [pc, #304]	; (96f4 <usb_isr+0x2b4>)
    95c2:	add	r2, r3
    95c4:	ldr	r3, [r2, #0]
    95c6:	ite	ne
    95c8:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    95cc:	orreq.w	r3, r3, #1
    95d0:	str	r3, [r2, #0]
		}
		endpoint0_receive(NULL, 0, 0);
    95d2:	movs	r2, #0
    95d4:	mov	r1, r2
    95d6:	mov	r0, r2
    95d8:	b.n	96ba <usb_isr+0x27a>
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    95da:	uxth	r2, r3
    95dc:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    95e0:	cmp	r3, #7
    95e2:	bhi.n	96c0 <usb_isr+0x280>
		dir = setup.wIndex & 0x80;
		if (dir) {
    95e4:	tst.w	r2, #128	; 0x80
    95e8:	mov.w	r3, r3, lsl #2
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    95ec:	ldr	r2, [pc, #260]	; (96f4 <usb_isr+0x2b4>)
    95ee:	add	r2, r3
    95f0:	ldr	r3, [r2, #0]
    95f2:	ite	ne
    95f4:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    95f8:	biceq.w	r3, r3, #1
    95fc:	b.n	95d0 <usb_isr+0x190>
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    95fe:	cmp.w	r4, #1792	; 0x700
    9602:	bne.n	9688 <usb_isr+0x248>
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    9604:	ldr	r3, [pc, #240]	; (96f8 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9606:	mov	r2, sl
    9608:	ldr	r1, [pc, #240]	; (96fc <usb_isr+0x2bc>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    960a:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    960c:	ldr	r3, [pc, #240]	; (9700 <usb_isr+0x2c0>)
    960e:	cmp	r0, #0
    9610:	it	ne
    9612:	movne	r1, r3
    9614:	mov	r0, r7
    9616:	bl	87a4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    961a:	movs	r3, #7
    961c:	strb	r3, [r7, #1]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    961e:	bic.w	r3, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9622:	add	r7, sl
	asm volatile("": : :"memory");
	asm("dsb");
    9624:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9628:	ldr	r2, [pc, #216]	; (9704 <usb_isr+0x2c4>)
    962a:	str	r3, [r2, #0]
		location += 32;
    962c:	adds	r3, #32
	} while (location < end_addr);
    962e:	cmp	r7, r3
    9630:	bhi.n	962a <usb_isr+0x1ea>
	asm("dsb");
    9632:	dsb	sy
	asm("isb");
    9636:	isb	sy
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    963a:	ldr	r0, [pc, #204]	; (9708 <usb_isr+0x2c8>)
    963c:	mov	r1, sl
    963e:	bl	9348 <endpoint0_transmit.constprop.1>
    9642:	b.n	96c8 <usb_isr+0x288>
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9644:	ldrh	r7, [r2, #0]
    9646:	cmp	r7, r4
    9648:	beq.n	9654 <usb_isr+0x214>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    964a:	adds	r2, #12
    964c:	ldr	r1, [r2, #4]
    964e:	cmp	r1, #0
    9650:	bne.n	9644 <usb_isr+0x204>
    9652:	b.n	96c0 <usb_isr+0x280>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9654:	ldrh	r7, [r2, #2]
    9656:	cmp	r7, r0
    9658:	bne.n	964a <usb_isr+0x20a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    965a:	lsrs	r0, r4, #8
    965c:	ldr	r7, [pc, #168]	; (9708 <usb_isr+0x2c8>)
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    965e:	mov.w	sl, r3, lsr #16
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    9662:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9664:	ite	eq
    9666:	ldrbeq	r2, [r1, #0]
				} else {
					datalen = list->length;
    9668:	ldrhne	r2, [r2, #8]
    966a:	cmp	sl, r2
    966c:	it	cs
    966e:	movcs	sl, r2
				}
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    9670:	cmp.w	r4, #512	; 0x200
    9674:	bne.n	95fe <usb_isr+0x1be>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    9676:	ldr	r3, [pc, #128]	; (96f8 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9678:	mov	r2, sl
    967a:	ldr	r1, [pc, #132]	; (9700 <usb_isr+0x2c0>)

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    967c:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    967e:	ldr	r3, [pc, #124]	; (96fc <usb_isr+0x2bc>)
    9680:	cmp	r0, #0
    9682:	it	ne
    9684:	movne	r1, r3
    9686:	b.n	968a <usb_isr+0x24a>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9688:	mov	r2, sl
    968a:	mov	r0, r7
    968c:	bl	87a4 <memcpy>
    9690:	b.n	961e <usb_isr+0x1de>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9692:	uxth	r3, r3
    9694:	cmp	r3, #0
    9696:	bne.n	95d2 <usb_isr+0x192>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9698:	ldr	r3, [pc, #112]	; (970c <usb_isr+0x2cc>)
			usb_cdc_line_rtsdtr = setup.wValue;
    969a:	ubfx	r4, r4, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    969e:	ldr	r2, [r3, #0]
    96a0:	ldr	r3, [pc, #108]	; (9710 <usb_isr+0x2d0>)
    96a2:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    96a4:	ldr	r3, [pc, #108]	; (9714 <usb_isr+0x2d4>)
    96a6:	strb	r4, [r3, #0]
    96a8:	b.n	95d2 <usb_isr+0x192>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    96aa:	lsrs	r1, r3, #16
    96ac:	cmp	r1, #7
    96ae:	bne.n	96c0 <usb_isr+0x280>
		endpoint0_setupdata.bothwords = setupdata;
    96b0:	ldr	r2, [pc, #100]	; (9718 <usb_isr+0x2d8>)
		endpoint0_receive(endpoint0_buffer, 7, 1);
    96b2:	ldr	r0, [pc, #104]	; (971c <usb_isr+0x2dc>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    96b4:	str	r4, [r2, #0]
    96b6:	str	r3, [r2, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    96b8:	movs	r2, #1
    96ba:	bl	91e8 <endpoint0_receive>
    96be:	b.n	96c8 <usb_isr+0x288>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    96c0:	mov.w	r3, #65537	; 0x10001
    96c4:	str.w	r3, [r5, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    96c8:	ldr.w	r3, [r5, #428]	; 0x1ac
    96cc:	b.n	9474 <usb_isr+0x34>
    96ce:	nop
    96d0:	.word	0x402e0000
    96d4:	.word	0x20000000
    96d8:	.word	0x20036de8
    96dc:	.word	0x20037654
    96e0:	.word	0x00cc0002
    96e4:	.word	0x000200c8
    96e8:	.word	0x00c80002
    96ec:	.word	0x20000bbc
    96f0:	.word	0x2003763c
    96f4:	.word	0x402e01c0
    96f8:	.word	0x20037655
    96fc:	.word	0x60001d45
    9700:	.word	0x60001cfa
    9704:	.word	0xe000ef70
    9708:	.word	0x20203800
    970c:	.word	0x20037314
    9710:	.word	0x200376a8
    9714:	.word	0x20037653
    9718:	.word	0x20002440
    971c:	.word	0x20037634
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    9720:	ldr.w	r4, [r2, #444]	; 0x1bc
		if (completestatus) {
    9724:	cmp	r4, #0
    9726:	beq.w	9452 <usb_isr+0x12>
			USB1_ENDPTCOMPLETE = completestatus;
    972a:	str.w	r4, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    972e:	ldr	r2, [pc, #268]	; (983c <usb_isr+0x3fc>)
    9730:	ldr	r1, [r2, #0]
    9732:	tst	r4, r1
    9734:	beq.n	976c <usb_isr+0x32c>
				endpoint0_notify_mask = 0;
    9736:	str	r3, [r2, #0]

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9738:	ldr	r2, [pc, #260]	; (9840 <usb_isr+0x400>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    973a:	ldrh	r1, [r2, #0]

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    973c:	ldr	r3, [r2, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    973e:	movw	r2, #8225	; 0x2021
    9742:	cmp	r1, r2
    9744:	bne.n	976c <usb_isr+0x32c>
    9746:	uxth	r3, r3
    9748:	cbnz	r3, 976c <usb_isr+0x32c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    974a:	ldr	r2, [pc, #248]	; (9844 <usb_isr+0x404>)
    974c:	ldr	r3, [pc, #248]	; (9848 <usb_isr+0x408>)
    974e:	ldr	r0, [r2, #0]
    9750:	ldrh	r1, [r2, #4]
    9752:	ldrb	r2, [r2, #6]
    9754:	str	r0, [r3, #0]
    9756:	strh	r1, [r3, #4]
    9758:	strb	r2, [r3, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    975a:	ldr	r3, [r3, #0]
    975c:	cmp	r3, #134	; 0x86
    975e:	bne.n	976c <usb_isr+0x32c>
			usb_start_sof_interrupts(NUM_INTERFACE);
    9760:	movs	r0, #2
    9762:	bl	93e0 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9766:	movs	r2, #80	; 0x50
    9768:	ldr	r3, [pc, #224]	; (984c <usb_isr+0x40c>)
    976a:	strb	r2, [r3, #0]
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    976c:	ldr	r3, [pc, #224]	; (9850 <usb_isr+0x410>)
    976e:	ldr	r3, [r3, #0]
#if 1
			if (completestatus) {
    9770:	ands	r4, r3
    9772:	beq.w	9452 <usb_isr+0x12>

				// transmit:
				uint32_t tx = completestatus >> 16;
    9776:	lsrs	r7, r4, #16
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9778:	ldr.w	r8, [pc, #216]	; 9854 <usb_isr+0x414>
					tx &= ~(1<<p);
    977c:	mov.w	r9, #1
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    9780:	cbz	r7, 979e <usb_isr+0x35e>
					int p=__builtin_ctz(tx);
    9782:	rbit	r5, r7
    9786:	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    978a:	add.w	r0, r8, r5, lsl #7
					tx &= ~(1<<p);
    978e:	lsl.w	r5, r9, r5

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9792:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    9794:	bic.w	r7, r7, r5

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9798:	bl	9314 <run_callbacks>
    979c:	b.n	9780 <usb_isr+0x340>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    979e:	uxth	r4, r4
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    97a0:	ldr	r7, [pc, #176]	; (9854 <usb_isr+0x414>)
					rx &= ~(1<<p);
    97a2:	mov.w	r8, #1
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    97a6:	cmp	r4, #0
    97a8:	beq.w	9452 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    97ac:	rbit	r5, r4
    97b0:	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    97b4:	add.w	r0, r7, r5, lsl #7
					rx &= ~(1<<p);
    97b8:	lsl.w	r5, r8, r5

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    97bc:	bl	9314 <run_callbacks>
					rx &= ~(1<<p);
    97c0:	bic.w	r4, r4, r5
    97c4:	b.n	97a6 <usb_isr+0x366>
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    97c6:	ldr.w	r4, [r3, #432]	; 0x1b0
    97ca:	ldr	r2, [pc, #140]	; (9858 <usb_isr+0x418>)
    97cc:	cmp	r4, #0
    97ce:	bne.n	97c6 <usb_isr+0x386>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    97d0:	mov.w	r3, #4294967295
    97d4:	str.w	r3, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    97d8:	ldr.w	r3, [r2, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    97dc:	bl	8a80 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    97e0:	ldr	r3, [pc, #108]	; (9850 <usb_isr+0x410>)
    97e2:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    97e4:	lsls	r4, r6, #7
    97e6:	bpl.n	97f0 <usb_isr+0x3b0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    97e8:	ldr	r3, [pc, #112]	; (985c <usb_isr+0x41c>)
    97ea:	ldr	r3, [r3, #0]
    97ec:	cbz	r3, 97f0 <usb_isr+0x3b0>
    97ee:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    97f0:	lsls	r0, r6, #6
    97f2:	bpl.n	97fc <usb_isr+0x3bc>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    97f4:	ldr	r3, [pc, #104]	; (9860 <usb_isr+0x420>)
    97f6:	ldr	r3, [r3, #0]
    97f8:	cbz	r3, 97fc <usb_isr+0x3bc>
    97fa:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    97fc:	lsls	r1, r6, #29
    97fe:	bpl.n	9812 <usb_isr+0x3d2>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    9800:	ldr	r3, [pc, #84]	; (9858 <usb_isr+0x418>)
    9802:	ldr	r2, [pc, #96]	; (9864 <usb_isr+0x424>)
    9804:	ldr.w	r3, [r3, #388]	; 0x184
    9808:	ands.w	r3, r3, #512	; 0x200
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    980c:	it	ne
    980e:	movne	r3, #1
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    9810:	strb	r3, [r2, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    9812:	ldr	r3, [pc, #68]	; (9858 <usb_isr+0x418>)
    9814:	ldr.w	r3, [r3, #328]	; 0x148
    9818:	lsls	r2, r3, #24
    981a:	bpl.n	9838 <usb_isr+0x3f8>
    981c:	lsls	r3, r6, #24
    981e:	bpl.n	9838 <usb_isr+0x3f8>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    9820:	ldr	r2, [pc, #40]	; (984c <usb_isr+0x40c>)
    9822:	ldrb	r3, [r2, #0]
    9824:	cbz	r3, 9838 <usb_isr+0x3f8>
			if (--usb_reboot_timer == 0) {
    9826:	subs	r3, #1
    9828:	uxtb	r3, r3
    982a:	strb	r3, [r2, #0]
    982c:	cbnz	r3, 9838 <usb_isr+0x3f8>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    982e:	movs	r0, #2
    9830:	bl	9414 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9834:	bl	11490 <___reboot_Teensyduino__veneer>
    9838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    983c:	.word	0x20036de8
    9840:	.word	0x20002440
    9844:	.word	0x20037634
    9848:	.word	0x200376a0
    984c:	.word	0x20037656
    9850:	.word	0x20036dec
    9854:	.word	0x20000000
    9858:	.word	0x402e0000
    985c:	.word	0x20037318
    9860:	.word	0x2003731c
    9864:	.word	0x20037655

00009868 <usb_config_rx>:
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9868:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    986c:	cmp	r2, #0
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    986e:	mov	r7, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9870:	sub.w	r3, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9874:	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9876:	ite	ne
    9878:	movne	r6, #0
    987a:	moveq.w	r6, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    987e:	cmp	r3, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9880:	mov	sl, r1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9882:	bhi.n	98b4 <usb_config_rx+0x4c>
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9884:	mov.w	r8, r0, lsl #7
    9888:	ldr.w	r9, [pc, #48]	; 98bc <usb_config_rx+0x54>
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    988c:	movs	r2, #64	; 0x40
    988e:	movs	r1, #0

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9890:	add.w	r5, r9, r8
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9894:	orr.w	r6, r6, sl, lsl #16
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9898:	mov	r0, r5
    989a:	bl	8760 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    989e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    98a0:	str.w	r6, [r9, r8]
	qh->next = 1; // Terminate bit = 1
    98a4:	str	r0, [r5, #8]
	qh->callback_function = callback;
    98a6:	str	r7, [r5, #56]	; 0x38
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    98a8:	cbz	r7, 98b4 <usb_config_rx+0x4c>
    98aa:	ldr	r2, [pc, #12]	; (98b8 <usb_config_rx+0x50>)
    98ac:	lsls	r0, r4
    98ae:	ldr	r3, [r2, #0]
    98b0:	orrs	r0, r3
    98b2:	str	r0, [r2, #0]
    98b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98b8:	.word	0x20036dec
    98bc:	.word	0x20000000

000098c0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    98c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    98c4:	cmp	r2, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    98c6:	mov	r8, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    98c8:	sub.w	r3, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    98cc:	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    98ce:	ite	ne
    98d0:	movne	r7, #0
    98d2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    98d6:	cmp	r3, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    98d8:	mov	sl, r1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    98da:	bhi.n	9916 <usb_config_tx+0x56>
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    98dc:	lsls	r5, r0, #7
    98de:	ldr.w	r9, [pc, #64]	; 9920 <usb_config_tx+0x60>
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    98e2:	movs	r2, #64	; 0x40
    98e4:	movs	r1, #0

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    98e6:	adds	r5, #64	; 0x40
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    98e8:	orr.w	r7, r7, sl, lsl #16

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    98ec:	add.w	r6, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    98f0:	mov	r0, r6
    98f2:	bl	8760 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    98f6:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    98f8:	str.w	r7, [r9, r5]
	qh->next = 1; // Terminate bit = 1
    98fc:	str	r2, [r6, #8]
	qh->callback_function = callback;
    98fe:	str.w	r8, [r6, #56]	; 0x38
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9902:	cmp.w	r8, #0
    9906:	beq.n	9916 <usb_config_tx+0x56>
    9908:	ldr	r3, [pc, #16]	; (991c <usb_config_tx+0x5c>)
    990a:	adds	r4, #16
    990c:	lsl.w	r4, r2, r4
    9910:	ldr	r2, [r3, #0]
    9912:	orrs	r4, r2
    9914:	str	r4, [r3, #0]
    9916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    991a:	nop
    991c:	.word	0x20036dec
    9920:	.word	0x20000000

00009924 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9924:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9926:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9928:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    992a:	orr.w	r2, r2, #128	; 0x80
    992e:	str	r2, [r0, #4]
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9930:	add.w	r2, r1, #4096	; 0x1000
    9934:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9936:	add.w	r2, r1, #8192	; 0x2000
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    993a:	push	{r4, lr}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
    993c:	str	r2, [r0, #16]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    993e:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
    9940:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9944:	add.w	r1, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9948:	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
    994a:	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    994c:	str	r1, [r0, #24]
	transfer->callback_param = param;
    994e:	pop	{r4, pc}

00009950 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9950:	subs	r3, r0, #2
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9952:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9954:	cmp	r3, #2
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9956:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9958:	bhi.n	9972 <usb_transmit+0x22>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    995a:	ldr	r3, [pc, #28]	; (9978 <usb_transmit+0x28>)
    995c:	add.w	r4, r0, #16
    9960:	movs	r1, #1
    9962:	add.w	r0, r3, r0, lsl #7
    9966:	lsls	r1, r4
}
    9968:	ldr.w	r4, [sp], #4
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    996c:	adds	r0, #64	; 0x40
    996e:	b.w	9294 <schedule_transfer>
}
    9972:	ldr.w	r4, [sp], #4
    9976:	bx	lr
    9978:	.word	0x20000000

0000997c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    997c:	subs	r3, r0, #2
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    997e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9980:	cmp	r3, #2
    9982:	bhi.n	9992 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9984:	movs	r1, #1
    9986:	ldr	r3, [pc, #12]	; (9994 <usb_receive+0x18>)
    9988:	lsls	r1, r0
    998a:	add.w	r0, r3, r0, lsl #7
    998e:	b.w	9294 <schedule_transfer>
    9992:	bx	lr
    9994:	.word	0x20000000

00009998 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9998:	ldr	r0, [r0, #4]
#endif
}
    999a:	bx	lr

0000999c <micros>:
	}
	// TODO...
}

uint32_t micros(void)
{
    999c:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    999e:	ldr	r2, [pc, #68]	; (99e4 <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    99a0:	movs	r3, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    99a2:	ldr	r6, [pc, #68]	; (99e8 <micros+0x4c>)
		scc = systick_cycle_count;
    99a4:	ldr	r5, [pc, #68]	; (99ec <micros+0x50>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    99a6:	ldrex	r1, [r2]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    99aa:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    99ac:	ldr	r4, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    99ae:	strex	r1, r3, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    99b2:	cmp	r1, #0
    99b4:	bne.n	99a6 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    99b6:	ldr	r3, [pc, #56]	; (99f0 <micros+0x54>)
    99b8:	ldr	r3, [r3, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    99ba:	ldr	r2, [pc, #56]	; (99f4 <micros+0x58>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    99bc:	subs	r3, r3, r4
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    99be:	ldr	r4, [r2, #0]
    99c0:	umull	r4, r5, r3, r4
	if (frac > 1000) frac = 1000;
    99c4:	mov.w	r4, #1000	; 0x3e8
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    99c8:	mov.w	r3, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    99cc:	mov	r2, r5
	if (frac > 1000) frac = 1000;
    99ce:	movs	r5, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    99d0:	cmp	r5, r1
    99d2:	it	eq
    99d4:	cmpeq	r4, r2
    99d6:	it	cc
    99d8:	movcc.w	r2, #1000	; 0x3e8
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    99dc:	mla	r0, r3, r0, r2
    99e0:	pop	{r4, r5, r6, pc}
    99e2:	nop
    99e4:	.word	0x200376ac
    99e8:	.word	0x20037314
    99ec:	.word	0x20037310
    99f0:	.word	0xe0001004
    99f4:	.word	0x20036e44

000099f8 <delay>:
{

}*/

void delay(uint32_t msec)
{
    99f8:	push	{r3, r4, r5, lr}
	uint32_t start;

	if (msec == 0) return;
    99fa:	mov	r4, r0
    99fc:	cbz	r0, 9a20 <delay+0x28>
	start = micros();
    99fe:	bl	999c <micros>
    9a02:	mov	r5, r0
	while (1) {
		while ((micros() - start) >= 1000) {
    9a04:	bl	999c <micros>
    9a08:	subs	r0, r0, r5
    9a0a:	cmp.w	r0, #1000	; 0x3e8
    9a0e:	bcc.n	9a1a <delay+0x22>
			if (--msec == 0) return;
    9a10:	subs	r4, #1
    9a12:	beq.n	9a20 <delay+0x28>
			start += 1000;
    9a14:	add.w	r5, r5, #1000	; 0x3e8
    9a18:	b.n	9a04 <delay+0xc>
		}
		yield();
    9a1a:	bl	9e60 <yield>
	}
    9a1e:	b.n	9a04 <delay+0xc>
    9a20:	pop	{r3, r4, r5, pc}
	...

00009a24 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    9a24:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    9a26:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    9a2a:	ldr	r4, [pc, #260]	; (9b30 <unused_interrupt_vector+0x10c>)
    9a2c:	str	r3, [r4, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    9a2e:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    9a32:	ldr	r2, [pc, #256]	; (9b34 <unused_interrupt_vector+0x110>)
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9a34:	ldr	r6, [pc, #256]	; (9b38 <unused_interrupt_vector+0x114>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    9a36:	ldr	r2, [r2, #0]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9a38:	ldr	r5, [pc, #256]	; (9b3c <unused_interrupt_vector+0x118>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    9a3a:	str	r2, [r4, #8]
	info->hfsr = SCB_HFSR;
    9a3c:	ldr	r2, [pc, #256]	; (9b40 <unused_interrupt_vector+0x11c>)
    9a3e:	ldr	r2, [r2, #0]
    9a40:	str	r2, [r4, #12]
	info->mmfar = SCB_MMFAR;
    9a42:	ldr	r2, [pc, #256]	; (9b44 <unused_interrupt_vector+0x120>)
    9a44:	ldr	r2, [r2, #0]
    9a46:	str	r2, [r4, #16]
	info->bfar = SCB_BFAR;
    9a48:	ldr	r2, [pc, #252]	; (9b48 <unused_interrupt_vector+0x124>)
    9a4a:	ldr	r2, [r2, #0]
    9a4c:	str	r2, [r4, #20]
	info->ret = stack[6];
    9a4e:	ldr	r2, [r3, #24]
    9a50:	str	r2, [r4, #24]
	info->xpsr = stack[7];
    9a52:	ldr	r3, [r3, #28]
    9a54:	str	r3, [r4, #28]
	info->temp = tempmonGetTemp();
    9a56:	bl	9c34 <tempmonGetTemp>
    9a5a:	vstr	s0, [r4, #32]
	info->time = rtc_get();
    9a5e:	bl	9bb8 <rtc_get>
	info->len = sizeof(*info) / 4;
    9a62:	movs	r3, #11
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    9a64:	str	r0, [r4, #36]	; 0x24
    9a66:	mov	r0, r4
	info->len = sizeof(*info) / 4;
    9a68:	str	r3, [r4, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    9a6a:	mov.w	r3, #4294967295
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    9a6e:	ldr.w	r2, [r4], #4
    9a72:	eors	r3, r2
    9a74:	movs	r2, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9a76:	and.w	r1, r3, #1
    9a7a:	subs	r2, #1
    9a7c:	mul.w	r1, r6, r1
    9a80:	eor.w	r3, r1, r3, lsr #1
    9a84:	bne.n	9a76 <unused_interrupt_vector+0x52>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9a86:	cmp	r4, r5
    9a88:	bne.n	9a6e <unused_interrupt_vector+0x4a>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    9a8a:	str	r3, [r0, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9a8c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9a90:	ldr	r3, [pc, #184]	; (9b4c <unused_interrupt_vector+0x128>)
    9a92:	ldr	r2, [pc, #188]	; (9b50 <unused_interrupt_vector+0x12c>)
    9a94:	str	r0, [r3, #0]
    9a96:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    9a98:	dsb	sy
	asm("isb");
    9a9c:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9aa0:	ldr	r2, [pc, #176]	; (9b54 <unused_interrupt_vector+0x130>)
	PIT_MCR = PIT_MCR_MDIS;
    9aa2:	ldr	r5, [pc, #180]	; (9b58 <unused_interrupt_vector+0x134>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9aa4:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9aa6:	ldr	r0, [pc, #180]	; (9b5c <unused_interrupt_vector+0x138>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9aa8:	orr.w	r3, r3, #12288	; 0x3000
    9aac:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    9aae:	movs	r3, #2
    9ab0:	str	r3, [r5, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    9ab2:	ldr	r3, [r2, #28]
    9ab4:	bic.w	r3, r3, #127	; 0x7f
    9ab8:	orr.w	r3, r3, #64	; 0x40
    9abc:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9abe:	ldr	r3, [pc, #160]	; (9b60 <unused_interrupt_vector+0x13c>)
    9ac0:	ldr	r3, [r3, #0]
    9ac2:	cmp	r3, r0
    9ac4:	bls.n	9aca <unused_interrupt_vector+0xa6>
    9ac6:	bl	8f94 <set_arm_clock>
	PIT_MCR = 0;
    9aca:	movs	r4, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9acc:	ldr	r3, [pc, #148]	; (9b64 <unused_interrupt_vector+0x140>)
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9ace:	movs	r2, #1
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    9ad0:	ldr	r1, [pc, #148]	; (9b68 <unused_interrupt_vector+0x144>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    9ad2:	str	r4, [r5, #0]
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    9ad4:	ldr	r6, [pc, #128]	; (9b58 <unused_interrupt_vector+0x134>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    9ad6:	str.w	r4, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9ada:	str.w	r3, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    9ade:	mov.w	r3, #4294967295
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9ae2:	str.w	r2, [r5, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    9ae6:	mov	r5, r2
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    9ae8:	str	r3, [r1, #0]
	NVIC_ICER1 = 0xFFFFFFFF;
    9aea:	str	r3, [r1, #4]
	NVIC_ICER2 = 0xFFFFFFFF;
    9aec:	str	r3, [r1, #8]
	NVIC_ICER3 = 0xFFFFFFFF;
    9aee:	str	r3, [r1, #12]
	NVIC_ICER4 = 0xFFFFFFFF;
    9af0:	str	r3, [r1, #16]
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    9af2:	ldr.w	r3, [r6, #268]	; 0x10c
    9af6:	cbz	r3, 9b02 <unused_interrupt_vector+0xde>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    9af8:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    9afa:	str.w	r5, [r6, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    9afe:	cmp	r4, #79	; 0x4f
    9b00:	bhi.n	9b08 <unused_interrupt_vector+0xe4>
		}
		usb_isr();
    9b02:	bl	9440 <usb_isr>
		// TODO: should other data flush / cleanup tasks be done here?
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
    9b06:	b.n	9af2 <unused_interrupt_vector+0xce>
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    9b08:	movs	r2, #2
    9b0a:	ldr	r3, [pc, #96]	; (9b6c <unused_interrupt_vector+0x148>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9b0c:	ldr	r1, [pc, #96]	; (9b70 <unused_interrupt_vector+0x14c>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    9b0e:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9b12:	mov.w	r2, #2147483648	; 0x80000000
    9b16:	ldr	r3, [pc, #92]	; (9b74 <unused_interrupt_vector+0x150>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9b18:	ldr	r0, [pc, #92]	; (9b78 <unused_interrupt_vector+0x154>)
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9b1a:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9b1c:	ldr	r2, [pc, #56]	; (9b58 <unused_interrupt_vector+0x134>)
    9b1e:	ldr.w	r3, [r2, #268]	; 0x10c
    9b22:	cbnz	r3, 9b28 <unused_interrupt_vector+0x104>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9b24:	str	r0, [r1, #48]	; 0x30
    9b26:	b.n	9b1e <unused_interrupt_vector+0xfa>
	SCB_AIRCR = 0x05FA0004;
    9b28:	ldr	r2, [pc, #80]	; (9b7c <unused_interrupt_vector+0x158>)
    9b2a:	ldr	r3, [pc, #84]	; (9b80 <unused_interrupt_vector+0x15c>)
    9b2c:	str	r2, [r3, #0]
    9b2e:	b.n	9b2e <unused_interrupt_vector+0x10a>
    9b30:	.word	0x2027ff80
    9b34:	.word	0xe000ed28
    9b38:	.word	0xedb88320
    9b3c:	.word	0x2027ffa8
    9b40:	.word	0xe000ed2c
    9b44:	.word	0xe000ed34
    9b48:	.word	0xe000ed38
    9b4c:	.word	0xe000ef70
    9b50:	.word	0x2027ffa0
    9b54:	.word	0x400fc000
    9b58:	.word	0x40084000
    9b5c:	.word	0x0bcd3d80
    9b60:	.word	0x200016b0
    9b64:	.word	0x00249f00
    9b68:	.word	0xe000e180
    9b6c:	.word	0x402e0000
    9b70:	.word	0x400f8000
    9b74:	.word	0x400d9000
    9b78:	.word	0x0bad00f1
    9b7c:	.word	0x05fa0004
    9b80:	.word	0xe000ed0c

00009b84 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9b84:	ldr	r2, [pc, #36]	; (9bac <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9b86:	push	{r3, lr}
        char *prev = __brkval;
    9b88:	ldr	r3, [r2, #0]
        if (incr != 0) {
    9b8a:	cbz	r0, 9ba8 <_sbrk+0x24>
                if (prev + incr > (char *)&_heap_end) {
    9b8c:	add	r0, r3
    9b8e:	ldr	r1, [pc, #32]	; (9bb0 <_sbrk+0x2c>)
    9b90:	cmp	r0, r1
    9b92:	bls.n	9ba2 <_sbrk+0x1e>
                        errno = ENOMEM;
    9b94:	bl	a650 <__errno>
    9b98:	movs	r3, #12
    9b9a:	str	r3, [r0, #0]
                        return (void *)-1;
    9b9c:	mov.w	r0, #4294967295
    9ba0:	pop	{r3, pc}
                }
                __brkval = prev + incr;
    9ba2:	str	r0, [r2, #0]
        }
        return prev;
    9ba4:	mov	r0, r3
    9ba6:	pop	{r3, pc}
    9ba8:	mov	r0, r3
}
    9baa:	pop	{r3, pc}
    9bac:	.word	0x20001858
    9bb0:	.word	0x20280000

00009bb4 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    9bb4:	wfi
    9bb6:	b.n	9bb4 <__cxa_pure_virtual>

00009bb8 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    9bb8:	ldr	r3, [pc, #32]	; (9bdc <rtc_get+0x24>)
    9bba:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    9bbc:	ldr	r2, [r3, #40]	; 0x28
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    9bbe:	push	{r4, lr}
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9bc0:	ldr	r1, [r3, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    9bc2:	ldr	r4, [r3, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    9bc4:	cmp	r2, r4
    9bc6:	beq.n	9bce <rtc_get+0x16>
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    9bc8:	mov	r2, r4
    9bca:	mov	r0, r1
    9bcc:	b.n	9bc0 <rtc_get+0x8>
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
    9bce:	cmp	r0, r1
    9bd0:	bne.n	9bc8 <rtc_get+0x10>
			return (hi2 << 17) | (lo2 >> 15);
    9bd2:	lsrs	r2, r2, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    9bd4:	orr.w	r0, r2, r0, lsl #17
    9bd8:	pop	{r4, pc}
    9bda:	nop
    9bdc:	.word	0x400d4000

00009be0 <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    9be0:	ldr	r3, [pc, #72]	; (9c2c <rtc_set+0x4c>)
    9be2:	ldr	r2, [r3, #8]
    9be4:	bic.w	r2, r2, #65537	; 0x10001
    9be8:	str	r2, [r3, #8]
    9bea:	mov	r2, r3
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    9bec:	ldr	r1, [r2, #8]
    9bee:	ldr	r3, [pc, #60]	; (9c2c <rtc_set+0x4c>)
    9bf0:	lsls	r1, r1, #31
    9bf2:	bmi.n	9bec <rtc_set+0xc>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    9bf4:	ldr	r2, [r3, #56]	; 0x38
    9bf6:	bic.w	r2, r2, #1
    9bfa:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    9bfc:	mov	r2, r3
    9bfe:	ldr	r3, [r2, #56]	; 0x38
    9c00:	tst.w	r3, #1
    9c04:	ldr	r3, [pc, #36]	; (9c2c <rtc_set+0x4c>)
    9c06:	bne.n	9bfe <rtc_set+0x1e>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    9c08:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    9c0a:	lsrs	r0, r0, #17
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    9c0c:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    9c0e:	str	r0, [r3, #80]	; 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    9c10:	ldr	r2, [r3, #56]	; 0x38
    9c12:	orr.w	r2, r2, #1
    9c16:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    9c18:	ldr	r1, [r3, #56]	; 0x38
    9c1a:	ldr	r2, [pc, #16]	; (9c2c <rtc_set+0x4c>)
    9c1c:	lsls	r1, r1, #31
    9c1e:	bpl.n	9c18 <rtc_set+0x38>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    9c20:	ldr	r3, [r2, #8]
    9c22:	orr.w	r3, r3, #65537	; 0x10001
    9c26:	str	r3, [r2, #8]
    9c28:	bx	lr
    9c2a:	nop
    9c2c:	.word	0x400d4000

00009c30 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    9c30:	b.w	9a24 <unused_interrupt_vector>

00009c34 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    9c34:	ldr	r2, [pc, #72]	; (9c80 <tempmonGetTemp+0x4c>)
    9c36:	ldr	r3, [r2, #0]
    9c38:	lsls	r3, r3, #29
    9c3a:	bpl.n	9c36 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9c3c:	ldr	r3, [pc, #64]	; (9c80 <tempmonGetTemp+0x4c>)
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c3e:	ldr	r2, [pc, #68]	; (9c84 <tempmonGetTemp+0x50>)
    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9c40:	ldr	r3, [r3, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
    9c42:	vldr	s0, [r2]
    9c46:	ubfx	r3, r3, #8, #12
    9c4a:	vcvt.f32.u32	s0, s0
    9c4e:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c52:	ldr	r3, [pc, #52]	; (9c88 <tempmonGetTemp+0x54>)

    return tmeas;
    9c54:	vcvt.f32.s32	s14, s15
    9c58:	vldr	s15, [r3]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c5c:	ldr	r3, [pc, #44]	; (9c8c <tempmonGetTemp+0x58>)

    return tmeas;
    9c5e:	vcvt.f32.u32	s15, s15
    9c62:	vsub.f32	s15, s14, s15
    9c66:	vldr	s14, [r3]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c6a:	ldr	r3, [pc, #36]	; (9c90 <tempmonGetTemp+0x5c>)

    return tmeas;
    9c6c:	vmul.f32	s15, s15, s14
    9c70:	vldr	s13, [r3]
    9c74:	vdiv.f32	s14, s15, s13
}
    9c78:	vsub.f32	s0, s0, s14
    9c7c:	bx	lr
    9c7e:	nop
    9c80:	.word	0x400d8180
    9c84:	.word	0x20036e38
    9c88:	.word	0x20036e34
    9c8c:	.word	0x20036e3c
    9c90:	.word	0x20036e40

00009c94 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9c94:	cmp	r0, #39	; 0x27
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9c96:	push	{r4, r5, lr}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9c98:	bhi.n	9cea <pinMode+0x56>
	p = digital_pin_to_info_PGM + pin;
    9c9a:	ldr	r5, [pc, #80]	; (9cec <pinMode+0x58>)
    9c9c:	lsls	r0, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9c9e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9ca0:	add.w	r4, r5, r0
    9ca4:	ldr	r2, [r4, #12]
    9ca6:	ldr	r3, [r4, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9ca8:	beq.n	9cae <pinMode+0x1a>
    9caa:	cmp	r1, #4
    9cac:	bne.n	9cc2 <pinMode+0x2e>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9cae:	ldr	r0, [r5, r0]
		if (mode == OUTPUT) {
    9cb0:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9cb2:	ldr	r5, [r0, #4]
    9cb4:	orr.w	r2, r2, r5
    9cb8:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
    9cba:	beq.n	9cce <pinMode+0x3a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9cbc:	movw	r2, #2104	; 0x838
    9cc0:	b.n	9ce2 <pinMode+0x4e>
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9cc2:	ldr	r5, [r5, r0]
    9cc4:	ldr	r0, [r5, #4]
    9cc6:	bic.w	r2, r0, r2
    9cca:	str	r2, [r5, #4]
		if (mode == INPUT) {
    9ccc:	cbnz	r1, 9cd2 <pinMode+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9cce:	movs	r2, #56	; 0x38
    9cd0:	b.n	9ce2 <pinMode+0x4e>
		} else if (mode == INPUT_PULLUP) {
    9cd2:	cmp	r1, #2
    9cd4:	bne.n	9cda <pinMode+0x46>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9cd6:	ldr	r2, [pc, #24]	; (9cf0 <pinMode+0x5c>)
    9cd8:	b.n	9ce2 <pinMode+0x4e>
		} else if (mode == INPUT_PULLDOWN) {
    9cda:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9cdc:	ite	eq
    9cde:	ldreq	r2, [pc, #20]	; (9cf4 <pinMode+0x60>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9ce0:	ldrne	r2, [pc, #20]	; (9cf8 <pinMode+0x64>)
    9ce2:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9ce4:	movs	r2, #21
    9ce6:	ldr	r3, [r4, #4]
    9ce8:	str	r2, [r3, #0]
    9cea:	pop	{r4, r5, pc}
    9cec:	.word	0x2000088c
    9cf0:	.word	0x0001f038
    9cf4:	.word	0x00013038
    9cf8:	.word	0x00010038

00009cfc <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9cfc:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9d00:	movs	r2, #0

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d02:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    9d06:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9d08:	mov	r1, r2
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9d0a:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    9d0e:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9d12:	ldrh.w	r3, [r0, #392]	; 0x188
    9d16:	uxth	r3, r3
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
    9d18:	push	{r4, r5, r6, r7, lr}
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9d1a:	orr.w	r3, r3, #240	; 0xf0
    9d1e:	movs	r7, #96	; 0x60
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d20:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d24:	mov.w	r5, #1024	; 0x400
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9d28:	movw	r4, #33464	; 0x82b8
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9d2c:	strh.w	r3, [r0, #392]	; 0x188
    9d30:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    9d34:	adds	r2, #1
    9d36:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d38:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d3a:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    9d3c:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9d3e:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9d40:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    9d42:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9d44:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    9d46:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    9d48:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    9d4a:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    9d4c:	strh	r1, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d4e:	bne.n	9d30 <flexpwm_init+0x34>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9d50:	ldrh.w	r3, [r0, #392]	; 0x188
    9d54:	uxth	r3, r3
    9d56:	orr.w	r3, r3, #15
    9d5a:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9d5e:	ldrh.w	r3, [r0, #392]	; 0x188
    9d62:	uxth	r3, r3
    9d64:	orr.w	r3, r3, #3840	; 0xf00
    9d68:	strh.w	r3, [r0, #392]	; 0x188
    9d6c:	pop	{r4, r5, r6, r7, pc}

00009d6e <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d6e:	movs	r2, #0
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
}

void quadtimer_init(IMXRT_TMR_t *p)
{
    9d70:	push	{r4, r5, r6, r7, lr}
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d72:	mov	r1, r2
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d74:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d78:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d7c:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d80:	movw	r5, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d84:	lsls	r4, r2, #5

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d86:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9d88:	adds	r3, r0, r4

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d8a:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9d8c:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9d8e:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d90:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d94:	strh	r7, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d96:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9d98:	strh	r1, [r0, r4]
		p->CH[i].CMPLD1 = 0;
    9d9a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d9c:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d9e:	bne.n	9d84 <quadtimer_init+0x16>
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    9da0:	pop	{r4, r5, r6, r7, pc}
	...

00009da4 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9da4:	ldr	r2, [pc, #72]	; (9df0 <pwm_init+0x4c>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9da6:	ldr	r0, [pc, #76]	; (9df4 <pwm_init+0x50>)
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    9da8:	push	{r3, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9daa:	ldr	r3, [r2, #120]	; 0x78
    9dac:	orr.w	r3, r3, #16711680	; 0xff0000
    9db0:	str	r3, [r2, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9db2:	ldr.w	r3, [r2, #128]	; 0x80
    9db6:	orr.w	r3, r3, #4227858432	; 0xfc000000
    9dba:	orr.w	r3, r3, #196608	; 0x30000
    9dbe:	str.w	r3, [r2, #128]	; 0x80
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9dc2:	bl	9cfc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    9dc6:	ldr	r0, [pc, #48]	; (9df8 <pwm_init+0x54>)
    9dc8:	bl	9cfc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    9dcc:	ldr	r0, [pc, #44]	; (9dfc <pwm_init+0x58>)
    9dce:	bl	9cfc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    9dd2:	ldr	r0, [pc, #44]	; (9e00 <pwm_init+0x5c>)
    9dd4:	bl	9cfc <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    9dd8:	ldr	r0, [pc, #40]	; (9e04 <pwm_init+0x60>)
    9dda:	bl	9d6e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    9dde:	ldr	r0, [pc, #40]	; (9e08 <pwm_init+0x64>)
    9de0:	bl	9d6e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    9de4:	ldr	r0, [pc, #36]	; (9e0c <pwm_init+0x68>)
}
    9de6:	ldmia.w	sp!, {r3, lr}
	flexpwm_init(&IMXRT_FLEXPWM2);
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
    9dea:	b.w	9d6e <quadtimer_init>
    9dee:	nop
    9df0:	.word	0x400fc000
    9df4:	.word	0x403dc000
    9df8:	.word	0x403e0000
    9dfc:	.word	0x403e4000
    9e00:	.word	0x403e8000
    9e04:	.word	0x401dc000
    9e08:	.word	0x401e0000
    9e0c:	.word	0x401e4000

00009e10 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    9e10:	push	{r0, r1, r2, r3, r4, lr}
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9e12:	ldr	r3, [pc, #60]	; (9e50 <usb_init_serialnumber+0x40>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    9e14:	add	r4, sp, #4
    9e16:	movs	r2, #10
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9e18:	ldr.w	r0, [r3, #544]	; 0x220
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    9e1c:	mov	r1, r4
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9e1e:	ldr	r3, [pc, #52]	; (9e54 <usb_init_serialnumber+0x44>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9e20:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9e24:	cmp	r0, r3
    9e26:	itt	ls
    9e28:	movls	r3, #10
    9e2a:	mulls	r0, r3
	ultoa(num, buf, 10);
    9e2c:	bl	a2c6 <ultoa>
    9e30:	ldr	r2, [pc, #36]	; (9e58 <usb_init_serialnumber+0x48>)
	for (i=0; i<10; i++) {
    9e32:	movs	r3, #0
		char c = buf[i];
    9e34:	ldrb	r1, [r4, r3]
		if (!c) break;
    9e36:	cbz	r1, 9e42 <usb_init_serialnumber+0x32>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9e38:	adds	r3, #1
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9e3a:	strh.w	r1, [r2], #2

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9e3e:	cmp	r3, #10
    9e40:	bne.n	9e34 <usb_init_serialnumber+0x24>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9e42:	adds	r3, #1
    9e44:	ldr	r2, [pc, #20]	; (9e5c <usb_init_serialnumber+0x4c>)
    9e46:	lsls	r3, r3, #1
    9e48:	strb	r3, [r2, #0]
}
    9e4a:	add	sp, #16
    9e4c:	pop	{r4, pc}
    9e4e:	nop
    9e50:	.word	0x401f4400
    9e54:	.word	0x0098967f
    9e58:	.word	0x20001dea
    9e5c:	.word	0x20001de8

00009e60 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9e60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9e64:	ldr	r4, [pc, #176]	; (9f18 <yield+0xb8>)
    9e66:	ldrb	r3, [r4, #0]
    9e68:	cmp	r3, #0
    9e6a:	beq.n	9f14 <yield+0xb4>
	if (running) return; // TODO: does this need to be atomic?
    9e6c:	ldr	r5, [pc, #172]	; (9f1c <yield+0xbc>)
    9e6e:	ldrb	r2, [r5, #0]
    9e70:	cmp	r2, #0
    9e72:	bne.n	9f14 <yield+0xb4>
	running = 1;
    9e74:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e76:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9e78:	strb	r2, [r5, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e7a:	bpl.n	9e94 <yield+0x34>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9e7c:	bl	8c8c <usb_serial_available>
		if (Serial.available()) serialEvent();
    9e80:	cbz	r0, 9e86 <yield+0x26>
    9e82:	bl	a2bc <serialEvent()>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9e86:	ldr	r3, [pc, #152]	; (9f20 <yield+0xc0>)
    9e88:	ldrb	r3, [r3, #0]
    9e8a:	cbz	r3, 9e94 <yield+0x34>
    9e8c:	ldrb	r3, [r4, #0]
    9e8e:	bic.w	r3, r3, #1
    9e92:	strb	r3, [r4, #0]
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9e94:	ldrb	r3, [r4, #0]
    9e96:	lsls	r2, r3, #30
    9e98:	bpl.n	9ec6 <yield+0x66>
    9e9a:	movs	r6, #0
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9e9c:	ldr.w	r8, [pc, #144]	; 9f30 <yield+0xd0>
			s_serials_with_serial_events[i]->doYieldCode();
    9ea0:	ldr.w	r9, [pc, #144]	; 9f34 <yield+0xd4>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9ea4:	ldrb.w	r2, [r8]
    9ea8:	uxtb	r3, r6
    9eaa:	cmp	r2, r3
    9eac:	bls.n	9ec6 <yield+0x66>
			s_serials_with_serial_events[i]->doYieldCode();
    9eae:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9eb2:	ldr	r3, [r7, #0]
    9eb4:	mov	r0, r7
    9eb6:	ldr	r3, [r3, #16]
    9eb8:	blx	r3
    9eba:	cbz	r0, 9ec2 <yield+0x62>
    9ebc:	ldr	r3, [r7, #20]
    9ebe:	ldr	r3, [r3, #8]
    9ec0:	blx	r3
    9ec2:	adds	r6, #1
    9ec4:	b.n	9ea4 <yield+0x44>

	running = 0;
    9ec6:	movs	r3, #0
    9ec8:	strb	r3, [r5, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9eca:	ldrb	r3, [r4, #0]
    9ecc:	lsls	r3, r3, #29
    9ece:	bpl.n	9f14 <yield+0xb4>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    9ed0:	ldr	r1, [pc, #80]	; (9f24 <yield+0xc4>)
    9ed2:	ldr	r3, [r1, #0]
    9ed4:	cbz	r3, 9f14 <yield+0xb4>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9ed6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    9eda:	cbnz	r3, 9f14 <yield+0xb4>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9edc:	mrs	r2, PRIMASK
		__disable_irq();
    9ee0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9ee2:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    9ee4:	cbz	r0, 9eec <yield+0x8c>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9ee6:	ldr	r4, [pc, #64]	; (9f28 <yield+0xc8>)
    9ee8:	ldrb	r5, [r4, #0]
    9eea:	cbz	r5, 9ef4 <yield+0x94>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9eec:	cbnz	r2, 9f14 <yield+0xb4>
    9eee:	cpsie	i
    9ef0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9ef4:	movs	r3, #1
    9ef6:	strb	r3, [r4, #0]
		firstYield = first->_next;
    9ef8:	ldr	r3, [r0, #20]
    9efa:	str	r3, [r1, #0]
		if (firstYield) {
    9efc:	cbz	r3, 9f02 <yield+0xa2>
			firstYield->_prev = nullptr;
    9efe:	str	r5, [r3, #24]
    9f00:	b.n	9f06 <yield+0xa6>
		} else {
			lastYield = nullptr;
    9f02:	ldr	r1, [pc, #40]	; (9f2c <yield+0xcc>)
    9f04:	str	r3, [r1, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9f06:	cbnz	r2, 9f0a <yield+0xaa>
    9f08:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9f0a:	movs	r5, #0
		(*(first->_function))(*first);
    9f0c:	ldr	r3, [r0, #8]
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9f0e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9f10:	blx	r3
		runningFromYield = false;
    9f12:	strb	r5, [r4, #0]
    9f14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f18:	.word	0x20001e11
    9f1c:	.word	0x20037391
    9f20:	.word	0x60001d9a
    9f24:	.word	0x20003d5c
    9f28:	.word	0x2003738f
    9f2c:	.word	0x20003d68
    9f30:	.word	0x20037390
    9f34:	.word	0x20003d6c

00009f38 <MillisTimer::disableTimerInterrupt()>:
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9f38:	mrs	r0, PRIMASK
		__disable_irq();
    9f3c:	cpsid	i
		return (primask == 0) ? true : false;
	}
    9f3e:	clz	r0, r0
    9f42:	lsrs	r0, r0, #5
    9f44:	bx	lr

00009f46 <MillisTimer::enableTimerInterrupt(bool)>:
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9f46:	cbz	r0, 9f4a <MillisTimer::enableTimerInterrupt(bool)+0x4>
    9f48:	cpsie	i
    9f4a:	bx	lr

00009f4c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9f4c:	push	{r3, r4, r5, r6, r7, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9f4e:	ldr	r6, [pc, #48]	; (9f80 <EventResponder::runFromInterrupt()+0x34>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9f50:	movs	r5, #0
			} else {
				lastInterrupt = nullptr;
    9f52:	ldr	r7, [pc, #48]	; (9f84 <EventResponder::runFromInterrupt()+0x38>)
}

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
    9f54:	bl	9f38 <MillisTimer::disableTimerInterrupt()>
		EventResponder *first = firstInterrupt;
    9f58:	ldr	r4, [r6, #0]
}

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
    9f5a:	mov	r2, r0
		EventResponder *first = firstInterrupt;
		if (first) {
    9f5c:	cbz	r4, 9f7a <EventResponder::runFromInterrupt()+0x2e>
			firstInterrupt = first->_next;
    9f5e:	ldr	r3, [r4, #20]
    9f60:	str	r3, [r6, #0]
			if (firstInterrupt) {
    9f62:	cbz	r3, 9f68 <EventResponder::runFromInterrupt()+0x1c>
				firstInterrupt->_prev = nullptr;
    9f64:	str	r5, [r3, #24]
    9f66:	b.n	9f6a <EventResponder::runFromInterrupt()+0x1e>
			} else {
				lastInterrupt = nullptr;
    9f68:	str	r3, [r7, #0]
			}
			enableInterrupts(irq);
    9f6a:	mov	r0, r2
    9f6c:	bl	9f46 <MillisTimer::enableTimerInterrupt(bool)>
			first->_triggered = false;
    9f70:	strb	r5, [r4, #29]
			(*(first->_function))(*first);
    9f72:	ldr	r3, [r4, #8]
    9f74:	mov	r0, r4
    9f76:	blx	r3
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
	while (1) {
    9f78:	b.n	9f54 <EventResponder::runFromInterrupt()+0x8>
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
		} else {
			enableInterrupts(irq);
    9f7a:	bl	9f46 <MillisTimer::enableTimerInterrupt(bool)>
    9f7e:	pop	{r3, r4, r5, r6, r7, pc}
    9f80:	.word	0x20003d64
    9f84:	.word	0x20003d60

00009f88 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9f88:	b.w	9f4c <EventResponder::runFromInterrupt()>

00009f8c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9f8c:	ldr	r3, [pc, #16]	; (9fa0 <systick_isr+0x14>)
    9f8e:	ldr	r2, [r3, #0]
    9f90:	ldr	r3, [pc, #16]	; (9fa4 <systick_isr+0x18>)
    9f92:	str	r2, [r3, #0]
	systick_millis_count++;
    9f94:	ldr	r2, [pc, #16]	; (9fa8 <systick_isr+0x1c>)
    9f96:	ldr	r3, [r2, #0]
    9f98:	adds	r3, #1
    9f9a:	str	r3, [r2, #0]
    9f9c:	bx	lr
    9f9e:	nop
    9fa0:	.word	0xe0001004
    9fa4:	.word	0x20037310
    9fa8:	.word	0x20037314

00009fac <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    9fac:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    9fae:	cpsid	i
    9fb0:	ldr	r4, [pc, #136]	; (a03c <DMAChannel::begin(bool)+0x90>)
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    9fb2:	cbnz	r1, 9fd8 <DMAChannel::begin(bool)+0x2c>
    9fb4:	ldr	r1, [r0, #0]
    9fb6:	cbz	r1, 9fd8 <DMAChannel::begin(bool)+0x2c>
    9fb8:	ldrb	r3, [r0, #4]
    9fba:	cmp	r3, #15
    9fbc:	bhi.n	9fd8 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    9fbe:	ldrh	r2, [r4, #0]
    9fc0:	asrs	r2, r3
    9fc2:	lsls	r2, r2, #31
    9fc4:	bpl.n	9fd8 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    9fc6:	add.w	r3, r3, #33554432	; 0x2000000
    9fca:	add.w	r3, r3, #29824	; 0x7480
    9fce:	cmp.w	r1, r3, lsl #5
    9fd2:	bne.n	9fd8 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    9fd4:	cpsie	i
		return;
    9fd6:	pop	{r4, r5, pc}
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9fd8:	ldrh	r1, [r4, #0]
    9fda:	movs	r3, #0
    9fdc:	asr.w	r2, r1, r3
    9fe0:	ands.w	r2, r2, #1
    9fe4:	bne.n	a02c <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    9fe6:	movs	r5, #1
    9fe8:	lsls	r5, r3
    9fea:	orrs	r1, r5
    9fec:	strh	r1, [r4, #0]
			__enable_irq();
    9fee:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9ff0:	ldr	r5, [pc, #76]	; (a040 <DMAChannel::begin(bool)+0x94>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9ff2:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9ff4:	add.w	r3, r3, #33554432	; 0x2000000
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9ff8:	strb	r4, [r0, #4]

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9ffa:	ldr	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9ffc:	add.w	r3, r3, #29824	; 0x7480
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    a000:	orr.w	r1, r1, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    a004:	lsls	r3, r3, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    a006:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    a008:	movw	r5, #1154	; 0x482
    a00c:	ldr	r1, [pc, #52]	; (a044 <DMAChannel::begin(bool)+0x98>)
    a00e:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    a010:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    a012:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    a014:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    a016:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    a018:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    a01a:	str	r2, [r3, #0]
	*p++ = 0;
    a01c:	str	r2, [r3, #4]
	*p++ = 0;
    a01e:	str	r2, [r3, #8]
	*p++ = 0;
    a020:	str	r2, [r3, #12]
	*p++ = 0;
    a022:	str	r2, [r3, #16]
	*p++ = 0;
    a024:	str	r2, [r3, #20]
	*p++ = 0;
    a026:	str	r2, [r3, #24]
	*p++ = 0;
    a028:	str	r2, [r3, #28]
    a02a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    a02c:	adds	r3, #1
    a02e:	cmp	r3, #16
    a030:	bne.n	9fdc <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    a032:	cpsie	i
			TCD = (TCD_t *)0;
    a034:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    a036:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    a038:	str	r2, [r0, #0]
    a03a:	pop	{r4, r5, pc}
    a03c:	.word	0x20037322
    a040:	.word	0x400fc000
    a044:	.word	0x400e8000

0000a048 <DMAChannel::release()>:
	*p++ = 0;
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    a048:	ldrb	r3, [r0, #4]
    a04a:	cmp	r3, #15
    a04c:	bhi.n	a070 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    a04e:	ldr	r2, [pc, #36]	; (a074 <DMAChannel::release()+0x2c>)
    a050:	strb	r3, [r2, #26]
	__disable_irq();
    a052:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    a054:	ldr	r1, [pc, #32]	; (a078 <DMAChannel::release()+0x30>)
    a056:	movs	r3, #1
    a058:	ldrb	r2, [r0, #4]
    a05a:	lsl.w	r2, r3, r2
    a05e:	ldrh	r3, [r1, #0]
    a060:	bic.w	r3, r3, r2
    a064:	strh	r3, [r1, #0]
	__enable_irq();
    a066:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    a068:	movs	r3, #16
    a06a:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    a06c:	movs	r3, #0
    a06e:	str	r3, [r0, #0]
    a070:	bx	lr
    a072:	nop
    a074:	.word	0x400e8000
    a078:	.word	0x20037322

0000a07c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a07c:	b.w	8c98 <usb_serial_flush_input>

0000a080 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a080:	b.w	8c48 <usb_serial_peekchar>

0000a084 <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a084:	b.w	8cf8 <usb_serial_getchar>

0000a088 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a088:	b.w	8c8c <usb_serial_available>

0000a08c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a08c:	b.w	8ef8 <usb_serial_flush_output>

0000a090 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a090:	b.w	8eac <usb_serial_write_buffer_free>

0000a094 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a094:	mov	r0, r1
    a096:	mov	r1, r2
    a098:	b.w	8d18 <usb_serial_write>

0000a09c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a09c:	mov	r0, r1
    a09e:	b.w	8e94 <usb_serial_putchar>

0000a0a2 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a0a2:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a0a4:	bl	44c <setup>
	while (1) {
		loop();
    a0a8:	bl	4d8 <loop>
		yield();
    a0ac:	bl	9e60 <yield>
    a0b0:	b.n	a0a8 <main+0x6>
	...

0000a0b4 <Stream::timedRead()>:
    a0b4:	ldr	r3, [pc, #40]	; (a0e0 <Stream::timedRead()+0x2c>)
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    a0b6:	push	{r4, r5, r6, lr}
    a0b8:	mov	r4, r0
    a0ba:	ldr	r6, [r3, #0]
    a0bc:	mov	r5, r3
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    a0be:	ldr	r3, [r4, #0]
    a0c0:	mov	r0, r4
    a0c2:	ldr	r3, [r3, #20]
    a0c4:	blx	r3
    if (c >= 0) return c;
    a0c6:	cmp	r0, #0
    a0c8:	bge.n	a0dc <Stream::timedRead()+0x28>
    yield();
    a0ca:	bl	9e60 <yield>
    a0ce:	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a0d0:	ldr	r2, [r4, #8]
    a0d2:	subs	r3, r3, r6
    a0d4:	cmp	r3, r2
    a0d6:	bcc.n	a0be <Stream::timedRead()+0xa>
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a0d8:	mov.w	r0, #4294967295
}
    a0dc:	pop	{r4, r5, r6, pc}
    a0de:	nop
    a0e0:	.word	0x20037314

0000a0e4 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    a0e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0e8:	mov	r7, r0
    a0ea:	mov	r9, r1
	if (buffer == nullptr) return 0;
    a0ec:	mov	r5, r2
    a0ee:	cbz	r2, a11e <Stream::readBytesUntil(char, char*, unsigned int)+0x3a>
	if (length < 1) return 0;
    a0f0:	cbz	r3, a122 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	length--;
    a0f2:	add.w	r8, r3, #4294967295
    a0f6:	mov	r6, r2
    a0f8:	subs	r4, r6, r5
	size_t index = 0;
	while (index < length) {
    a0fa:	cmp	r8, r4
    a0fc:	bls.n	a118 <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
		int c = timedRead();
    a0fe:	mov	r0, r7
    a100:	bl	a0b4 <Stream::timedRead()>
		if (c == terminator) break;
    a104:	cmp	r0, r9
    a106:	beq.n	a118 <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
		if (c < 0) {
    a108:	cmp	r0, #0
    a10a:	bge.n	a112 <Stream::readBytesUntil(char, char*, unsigned int)+0x2e>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    a10c:	movs	r3, #1
    a10e:	strb	r3, [r7, #12]
    a110:	b.n	a118 <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    a112:	strb.w	r0, [r6], #1
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
	while (index < length) {
    a116:	b.n	a0f8 <Stream::readBytesUntil(char, char*, unsigned int)+0x14>
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    a118:	movs	r3, #0
    a11a:	strb	r3, [r6, #0]
	return index; // return number of characters, not including null terminator
    a11c:	b.n	a124 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
    a11e:	mov	r4, r2
    a120:	b.n	a124 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
    a122:	mov	r4, r3
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    a124:	mov	r0, r4
    a126:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a12a <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    a12a:	push	{r3, r4, r5, r6, r7, lr}
    a12c:	mov	r7, r0
	if (buffer == nullptr) return 0;
    a12e:	mov	r5, r1
    a130:	cbz	r1, a14a <Print::write(unsigned char const*, unsigned int)+0x20>
    a132:	adds	r6, r1, r2
    a134:	movs	r4, #0
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a136:	cmp	r5, r6
    a138:	beq.n	a14e <Print::write(unsigned char const*, unsigned int)+0x24>
    a13a:	ldr	r3, [r7, #0]
    a13c:	mov	r0, r7
    a13e:	ldrb.w	r1, [r5], #1
    a142:	ldr	r3, [r3, #0]
    a144:	blx	r3
    a146:	add	r4, r0
    a148:	b.n	a136 <Print::write(unsigned char const*, unsigned int)+0xc>
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a14a:	mov	r0, r1
    a14c:	pop	{r3, r4, r5, r6, r7, pc}
    a14e:	mov	r0, r4
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a150:	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a154 <Print::println()>:
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a154:	ldr	r3, [pc, #24]	; (a170 <Print::println()+0x1c>)
    a156:	ldrh	r3, [r3, #0]
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a158:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    a15a:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    a15e:	movs	r2, #2
    a160:	ldr	r3, [r0, #0]
    a162:	add	r1, sp, #4
    a164:	ldr	r3, [r3, #4]
    a166:	blx	r3
}
    a168:	add	sp, #12
    a16a:	ldr.w	pc, [sp], #4
    a16e:	nop
    a170:	.word	0x20000e38

0000a174 <Print::printf(char const*, ...)>:
	return len;
}
}

int Print::printf(const char *format, ...)
{
    a174:	push	{r1, r2, r3}
    a176:	push	{r0, r1, lr}
    a178:	add	r2, sp, #12
    a17a:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a17e:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    a180:	bl	e918 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    a184:	add	sp, #8
    a186:	ldr.w	lr, [sp], #4
    a18a:	add	sp, #12
    a18c:	bx	lr

0000a18e <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a18e:	push	{r4, r5, r6, lr}
    a190:	mov	r5, r0
    a192:	sub	sp, #40	; 0x28
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a194:	cbnz	r2, a1a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    a196:	ldr	r3, [r0, #0]
    a198:	uxtb	r1, r1
    a19a:	ldr	r3, [r3, #0]
    a19c:	blx	r3
    a19e:	b.n	a200 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
	} else if (base == 1) {
		base = 10;
    a1a0:	cmp	r2, #1
    a1a2:	it	eq
    a1a4:	moveq	r2, #10
	}


	if (n == 0) {
    a1a6:	cbz	r1, a1ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    a1a8:	movs	r0, #33	; 0x21
    a1aa:	b.n	a1b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x28>
		buf[sizeof(buf) - 1] = '0';
    a1ac:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a1ae:	movs	r0, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a1b0:	strb.w	r2, [sp, #37]	; 0x25
    a1b4:	b.n	a1e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x52>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a1b6:	udiv	r6, r1, r2
    a1ba:	mls	r1, r2, r6, r1
    a1be:	uxtb	r4, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a1c0:	cmp	r1, #9
    a1c2:	ite	ls
    a1c4:	addls.w	r1, r4, #48	; 0x30
    a1c8:	addhi.w	r1, r4, #55	; 0x37
    a1cc:	add	r4, sp, #40	; 0x28
    a1ce:	uxtb	r1, r1
    a1d0:	add	r4, r0
    a1d2:	strb.w	r1, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a1d6:	mov	r1, r6
    a1d8:	cbz	r6, a1e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x52>
			i--;
    a1da:	subs	r0, #1
    a1dc:	uxtb	r0, r0
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
    a1de:	b.n	a1b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x28>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    a1e0:	cbz	r3, a1f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
		i--;
    a1e2:	subs	r0, #1
		buf[i] = '-';
    a1e4:	add	r3, sp, #40	; 0x28
    a1e6:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a1e8:	uxtb	r0, r0
		buf[i] = '-';
    a1ea:	add	r3, r0
    a1ec:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a1f0:	ldr	r3, [r5, #0]
    a1f2:	add	r1, sp, #4
    a1f4:	rsb	r2, r0, #34	; 0x22
    a1f8:	add	r1, r0
    a1fa:	ldr	r3, [r3, #4]
    a1fc:	mov	r0, r5
    a1fe:	blx	r3
}
    a200:	add	sp, #40	; 0x28
    a202:	pop	{r4, r5, r6, pc}

0000a204 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a204:	cmp	r1, #0
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a206:	mov.w	r2, #10
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    a20a:	itte	lt
    a20c:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a20e:	movlt	r3, #45	; 0x2d
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    a210:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a212:	b.w	a18e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000a216 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    a216:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a21a:	sub	sp, #72	; 0x48
    a21c:	mov	r5, r0
    a21e:	mov	r6, r2
    a220:	mov	r7, r3
    a222:	ldrb.w	r8, [sp, #104]	; 0x68
    a226:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    a22a:	cmp.w	r8, #1
    a22e:	bls.n	a2b4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9e>
	if (n == 0) {
    a230:	orrs.w	r3, r6, r7
    a234:	beq.n	a242 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
    a236:	movs	r4, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a238:	uxtb.w	r8, r8
    a23c:	mov.w	r9, #0
    a240:	b.n	a24c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x36>
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a242:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    a244:	movs	r4, #65	; 0x41
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a246:	strb.w	r3, [sp, #69]	; 0x45
    a24a:	b.n	a28e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a24c:	mov	r0, r6
    a24e:	mov	r1, r7
    a250:	mov	r2, r8
    a252:	mov	r3, r9
    a254:	bl	a32c <__aeabi_uldivmod>
    a258:	mov	r1, r3
    a25a:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    a25c:	mov	r0, r6
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a25e:	cmp	r1, #0
			n /= base;
    a260:	mov	r1, r7
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a262:	it	eq
    a264:	cmpeq	r2, #10
    a266:	add	r2, sp, #72	; 0x48
    a268:	ite	cc
    a26a:	addcc	r3, #48	; 0x30
    a26c:	addcs	r3, #55	; 0x37
    a26e:	add	r2, r4
    a270:	uxtb	r3, r3
    a272:	strb.w	r3, [r2, #-68]
			n /= base;
    a276:	mov	r3, r9
    a278:	mov	r2, r8
    a27a:	bl	a32c <__aeabi_uldivmod>
    a27e:	mov	r6, r0
    a280:	mov	r7, r1
			if (n == 0) break;
    a282:	orrs.w	r3, r6, r7
    a286:	beq.n	a28e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
			i--;
    a288:	subs	r4, #1
    a28a:	uxtb	r4, r4
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
    a28c:	b.n	a24c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x36>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    a28e:	cmp.w	sl, #0
    a292:	beq.n	a2a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    a294:	subs	r4, #1
		buf[i] = '-';
    a296:	add	r3, sp, #72	; 0x48
    a298:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a29a:	uxtb	r4, r4
		buf[i] = '-';
    a29c:	add	r3, r4
    a29e:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    a2a2:	ldr	r3, [r5, #0]
    a2a4:	add	r1, sp, #4
    a2a6:	rsb	r2, r4, #66	; 0x42
    a2aa:	mov	r0, r5
    a2ac:	ldr	r3, [r3, #4]
    a2ae:	add	r1, r4
    a2b0:	blx	r3
    a2b2:	b.n	a2b6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa0>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    a2b4:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a2b6:	add	sp, #72	; 0x48
    a2b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a2bc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a2bc:	bx	lr

0000a2be <operator new(unsigned int)>:
    a2be:	b.w	a6fc <malloc>

0000a2c2 <operator delete(void*, unsigned int)>:
    a2c2:	b.w	a70c <free>

0000a2c6 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a2c6:	mov	r3, r0
	unsigned digit;
	int i=0, j;
    a2c8:	movs	r0, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a2ca:	push	{r4, r5, lr}
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a2cc:	udiv	r4, r3, r2
    a2d0:	mls	r3, r2, r4, r3
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a2d4:	cmp	r3, #9
    a2d6:	ite	ls
    a2d8:	addls	r3, #48	; 0x30
    a2da:	addhi	r3, #55	; 0x37
    a2dc:	uxtb	r3, r3
    a2de:	strb	r3, [r1, r0]
		val /= radix;
		if (val == 0) break;
    a2e0:	mov	r3, r4
    a2e2:	cbz	r4, a2e8 <ultoa+0x22>
		i++;
    a2e4:	adds	r0, #1
	}
    a2e6:	b.n	a2cc <ultoa+0x6>
	buf[i + 1] = 0;
    a2e8:	adds	r2, r1, r0
	for (j=0; j < i; j++, i--) {
    a2ea:	mov	r3, r4
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
    a2ec:	strb	r4, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a2ee:	subs	r4, r0, r3
    a2f0:	cmp	r3, r4
    a2f2:	bge.n	a302 <ultoa+0x3c>
		t = buf[j];
    a2f4:	ldrb	r4, [r1, r3]
		buf[j] = buf[i];
    a2f6:	ldrb	r5, [r2, #0]
    a2f8:	strb	r5, [r1, r3]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a2fa:	adds	r3, #1
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a2fc:	strb.w	r4, [r2], #-1
    a300:	b.n	a2ee <ultoa+0x28>
	}
	return buf;
}
    a302:	mov	r0, r1
    a304:	pop	{r4, r5, pc}
	...

0000a308 <__aeabi_atexit>:
    a308:	mov	r3, r1
    a30a:	mov	r1, r0
    a30c:	mov	r0, r3
    a30e:	b.w	a644 <__cxa_atexit>
    a312:	nop

0000a314 <__aeabi_llsr>:
    a314:	lsrs	r0, r2
    a316:	adds	r3, r1, #0
    a318:	lsrs	r1, r2
    a31a:	mov	ip, r3
    a31c:	subs	r2, #32
    a31e:	lsrs	r3, r2
    a320:	orrs	r0, r3
    a322:	negs	r2, r2
    a324:	mov	r3, ip
    a326:	lsls	r3, r2
    a328:	orrs	r0, r3
    a32a:	bx	lr

0000a32c <__aeabi_uldivmod>:
    a32c:	cbnz	r3, a344 <__aeabi_uldivmod+0x18>
    a32e:	cbnz	r2, a344 <__aeabi_uldivmod+0x18>
    a330:	cmp	r1, #0
    a332:	it	eq
    a334:	cmpeq	r0, #0
    a336:	itt	ne
    a338:	movne.w	r1, #4294967295
    a33c:	movne.w	r0, #4294967295
    a340:	b.w	a640 <__aeabi_idiv0>
    a344:	sub.w	ip, sp, #8
    a348:	strd	ip, lr, [sp, #-16]!
    a34c:	bl	a35c <__udivmoddi4>
    a350:	ldr.w	lr, [sp, #4]
    a354:	ldrd	r2, r3, [sp, #8]
    a358:	add	sp, #16
    a35a:	bx	lr

0000a35c <__udivmoddi4>:
    a35c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a360:	mov	ip, r1
    a362:	mov	r6, r1
    a364:	mov	r4, r0
    a366:	ldr	r5, [sp, #32]
    a368:	cmp	r3, #0
    a36a:	bne.n	a40e <__udivmoddi4+0xb2>
    a36c:	cmp	r2, r1
    a36e:	mov	r7, r2
    a370:	bls.n	a44c <__udivmoddi4+0xf0>
    a372:	clz	lr, r2
    a376:	cmp.w	lr, #0
    a37a:	beq.n	a394 <__udivmoddi4+0x38>
    a37c:	rsb	r4, lr, #32
    a380:	lsr.w	r4, r0, r4
    a384:	lsl.w	r6, r1, lr
    a388:	orr.w	ip, r4, r6
    a38c:	lsl.w	r7, r2, lr
    a390:	lsl.w	r4, r0, lr
    a394:	mov.w	r9, r7, lsr #16
    a398:	lsrs	r2, r4, #16
    a39a:	udiv	r0, ip, r9
    a39e:	uxth.w	r8, r7
    a3a2:	mls	r6, r9, r0, ip
    a3a6:	orr.w	r6, r2, r6, lsl #16
    a3aa:	mul.w	r3, r0, r8
    a3ae:	cmp	r3, r6
    a3b0:	bls.n	a3c6 <__udivmoddi4+0x6a>
    a3b2:	adds	r6, r6, r7
    a3b4:	add.w	r2, r0, #4294967295
    a3b8:	bcs.w	a600 <__udivmoddi4+0x2a4>
    a3bc:	cmp	r3, r6
    a3be:	bls.w	a600 <__udivmoddi4+0x2a4>
    a3c2:	subs	r0, #2
    a3c4:	add	r6, r7
    a3c6:	subs	r6, r6, r3
    a3c8:	uxth	r2, r4
    a3ca:	udiv	r3, r6, r9
    a3ce:	mls	r6, r9, r3, r6
    a3d2:	orr.w	r4, r2, r6, lsl #16
    a3d6:	mul.w	r8, r3, r8
    a3da:	cmp	r8, r4
    a3dc:	bls.n	a3f2 <__udivmoddi4+0x96>
    a3de:	adds	r4, r4, r7
    a3e0:	add.w	r2, r3, #4294967295
    a3e4:	bcs.w	a5fc <__udivmoddi4+0x2a0>
    a3e8:	cmp	r8, r4
    a3ea:	bls.w	a5fc <__udivmoddi4+0x2a0>
    a3ee:	subs	r3, #2
    a3f0:	add	r4, r7
    a3f2:	rsb	r4, r8, r4
    a3f6:	orr.w	r0, r3, r0, lsl #16
    a3fa:	movs	r1, #0
    a3fc:	cmp	r5, #0
    a3fe:	beq.n	a4c6 <__udivmoddi4+0x16a>
    a400:	lsr.w	r4, r4, lr
    a404:	movs	r3, #0
    a406:	str	r4, [r5, #0]
    a408:	str	r3, [r5, #4]
    a40a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a40e:	cmp	r3, r1
    a410:	bls.n	a422 <__udivmoddi4+0xc6>
    a412:	cmp	r5, #0
    a414:	beq.n	a4c2 <__udivmoddi4+0x166>
    a416:	movs	r1, #0
    a418:	stmia.w	r5, {r0, r6}
    a41c:	mov	r0, r1
    a41e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a422:	clz	r1, r3
    a426:	cmp	r1, #0
    a428:	bne.w	a54c <__udivmoddi4+0x1f0>
    a42c:	cmp	r3, r6
    a42e:	bcc.n	a436 <__udivmoddi4+0xda>
    a430:	cmp	r2, r0
    a432:	bhi.w	a626 <__udivmoddi4+0x2ca>
    a436:	subs	r4, r0, r2
    a438:	sbc.w	r6, r6, r3
    a43c:	movs	r0, #1
    a43e:	mov	ip, r6
    a440:	cmp	r5, #0
    a442:	beq.n	a4c6 <__udivmoddi4+0x16a>
    a444:	stmia.w	r5, {r4, ip}
    a448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a44c:	cbnz	r2, a454 <__udivmoddi4+0xf8>
    a44e:	movs	r7, #1
    a450:	udiv	r7, r7, r2
    a454:	clz	lr, r7
    a458:	cmp.w	lr, #0
    a45c:	bne.n	a4ca <__udivmoddi4+0x16e>
    a45e:	subs	r3, r6, r7
    a460:	mov.w	r8, r7, lsr #16
    a464:	uxth.w	ip, r7
    a468:	movs	r1, #1
    a46a:	udiv	r0, r3, r8
    a46e:	lsrs	r2, r4, #16
    a470:	mls	r6, r8, r0, r3
    a474:	orr.w	r6, r2, r6, lsl #16
    a478:	mul.w	r3, ip, r0
    a47c:	cmp	r3, r6
    a47e:	bls.n	a490 <__udivmoddi4+0x134>
    a480:	adds	r6, r6, r7
    a482:	add.w	r2, r0, #4294967295
    a486:	bcs.n	a48e <__udivmoddi4+0x132>
    a488:	cmp	r3, r6
    a48a:	bhi.w	a62a <__udivmoddi4+0x2ce>
    a48e:	mov	r0, r2
    a490:	subs	r6, r6, r3
    a492:	uxth	r2, r4
    a494:	udiv	r3, r6, r8
    a498:	mls	r6, r8, r3, r6
    a49c:	orr.w	r4, r2, r6, lsl #16
    a4a0:	mul.w	ip, ip, r3
    a4a4:	cmp	ip, r4
    a4a6:	bls.n	a4b8 <__udivmoddi4+0x15c>
    a4a8:	adds	r4, r4, r7
    a4aa:	add.w	r2, r3, #4294967295
    a4ae:	bcs.n	a4b6 <__udivmoddi4+0x15a>
    a4b0:	cmp	ip, r4
    a4b2:	bhi.w	a620 <__udivmoddi4+0x2c4>
    a4b6:	mov	r3, r2
    a4b8:	rsb	r4, ip, r4
    a4bc:	orr.w	r0, r3, r0, lsl #16
    a4c0:	b.n	a3fc <__udivmoddi4+0xa0>
    a4c2:	mov	r1, r5
    a4c4:	mov	r0, r5
    a4c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4ca:	rsb	r1, lr, #32
    a4ce:	lsl.w	r3, r6, lr
    a4d2:	lsl.w	r7, r7, lr
    a4d6:	lsr.w	r9, r0, r1
    a4da:	mov.w	r8, r7, lsr #16
    a4de:	lsrs	r6, r1
    a4e0:	orr.w	r9, r9, r3
    a4e4:	udiv	sl, r6, r8
    a4e8:	mov.w	r4, r9, lsr #16
    a4ec:	mls	r6, r8, sl, r6
    a4f0:	uxth.w	ip, r7
    a4f4:	orr.w	r3, r4, r6, lsl #16
    a4f8:	mul.w	r2, sl, ip
    a4fc:	cmp	r2, r3
    a4fe:	lsl.w	r4, r0, lr
    a502:	bls.n	a51a <__udivmoddi4+0x1be>
    a504:	adds	r3, r3, r7
    a506:	add.w	r1, sl, #4294967295
    a50a:	bcs.w	a61c <__udivmoddi4+0x2c0>
    a50e:	cmp	r2, r3
    a510:	bls.w	a61c <__udivmoddi4+0x2c0>
    a514:	sub.w	sl, sl, #2
    a518:	add	r3, r7
    a51a:	subs	r3, r3, r2
    a51c:	uxth.w	r9, r9
    a520:	udiv	r1, r3, r8
    a524:	mls	r3, r8, r1, r3
    a528:	orr.w	r3, r9, r3, lsl #16
    a52c:	mul.w	r6, r1, ip
    a530:	cmp	r6, r3
    a532:	bls.n	a544 <__udivmoddi4+0x1e8>
    a534:	adds	r3, r3, r7
    a536:	add.w	r2, r1, #4294967295
    a53a:	bcs.n	a614 <__udivmoddi4+0x2b8>
    a53c:	cmp	r6, r3
    a53e:	bls.n	a614 <__udivmoddi4+0x2b8>
    a540:	subs	r1, #2
    a542:	add	r3, r7
    a544:	subs	r3, r3, r6
    a546:	orr.w	r1, r1, sl, lsl #16
    a54a:	b.n	a46a <__udivmoddi4+0x10e>
    a54c:	rsb	lr, r1, #32
    a550:	lsr.w	r4, r2, lr
    a554:	lsls	r3, r1
    a556:	orrs	r3, r4
    a558:	lsr.w	r7, r0, lr
    a55c:	lsl.w	r4, r6, r1
    a560:	mov.w	ip, r3, lsr #16
    a564:	lsr.w	r6, r6, lr
    a568:	orrs	r4, r7
    a56a:	udiv	r9, r6, ip
    a56e:	lsrs	r7, r4, #16
    a570:	mls	r6, ip, r9, r6
    a574:	uxth.w	r8, r3
    a578:	orr.w	r6, r7, r6, lsl #16
    a57c:	mul.w	r7, r9, r8
    a580:	cmp	r7, r6
    a582:	lsl.w	r2, r2, r1
    a586:	lsl.w	sl, r0, r1
    a58a:	bls.n	a59e <__udivmoddi4+0x242>
    a58c:	adds	r6, r6, r3
    a58e:	add.w	r0, r9, #4294967295
    a592:	bcs.n	a618 <__udivmoddi4+0x2bc>
    a594:	cmp	r7, r6
    a596:	bls.n	a618 <__udivmoddi4+0x2bc>
    a598:	sub.w	r9, r9, #2
    a59c:	add	r6, r3
    a59e:	subs	r6, r6, r7
    a5a0:	uxth	r0, r4
    a5a2:	udiv	r4, r6, ip
    a5a6:	mls	r6, ip, r4, r6
    a5aa:	orr.w	r7, r0, r6, lsl #16
    a5ae:	mul.w	r8, r4, r8
    a5b2:	cmp	r8, r7
    a5b4:	bls.n	a5c6 <__udivmoddi4+0x26a>
    a5b6:	adds	r7, r7, r3
    a5b8:	add.w	r0, r4, #4294967295
    a5bc:	bcs.n	a610 <__udivmoddi4+0x2b4>
    a5be:	cmp	r8, r7
    a5c0:	bls.n	a610 <__udivmoddi4+0x2b4>
    a5c2:	subs	r4, #2
    a5c4:	add	r7, r3
    a5c6:	orr.w	r0, r4, r9, lsl #16
    a5ca:	rsb	r7, r8, r7
    a5ce:	umull	r8, r9, r0, r2
    a5d2:	cmp	r7, r9
    a5d4:	mov	r4, r8
    a5d6:	mov	r6, r9
    a5d8:	bcc.n	a604 <__udivmoddi4+0x2a8>
    a5da:	beq.n	a630 <__udivmoddi4+0x2d4>
    a5dc:	cbz	r5, a638 <__udivmoddi4+0x2dc>
    a5de:	subs.w	r3, sl, r4
    a5e2:	sbc.w	r7, r7, r6
    a5e6:	lsl.w	lr, r7, lr
    a5ea:	lsrs	r3, r1
    a5ec:	lsrs	r7, r1
    a5ee:	orr.w	r3, lr, r3
    a5f2:	stmia.w	r5, {r3, r7}
    a5f6:	movs	r1, #0
    a5f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5fc:	mov	r3, r2
    a5fe:	b.n	a3f2 <__udivmoddi4+0x96>
    a600:	mov	r0, r2
    a602:	b.n	a3c6 <__udivmoddi4+0x6a>
    a604:	subs.w	r4, r8, r2
    a608:	sbc.w	r6, r9, r3
    a60c:	subs	r0, #1
    a60e:	b.n	a5dc <__udivmoddi4+0x280>
    a610:	mov	r4, r0
    a612:	b.n	a5c6 <__udivmoddi4+0x26a>
    a614:	mov	r1, r2
    a616:	b.n	a544 <__udivmoddi4+0x1e8>
    a618:	mov	r9, r0
    a61a:	b.n	a59e <__udivmoddi4+0x242>
    a61c:	mov	sl, r1
    a61e:	b.n	a51a <__udivmoddi4+0x1be>
    a620:	subs	r3, #2
    a622:	add	r4, r7
    a624:	b.n	a4b8 <__udivmoddi4+0x15c>
    a626:	mov	r0, r1
    a628:	b.n	a440 <__udivmoddi4+0xe4>
    a62a:	subs	r0, #2
    a62c:	add	r6, r7
    a62e:	b.n	a490 <__udivmoddi4+0x134>
    a630:	cmp	sl, r8
    a632:	bcc.n	a604 <__udivmoddi4+0x2a8>
    a634:	mov	r6, r7
    a636:	b.n	a5dc <__udivmoddi4+0x280>
    a638:	mov	r1, r5
    a63a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a63e:	nop

0000a640 <__aeabi_idiv0>:
    a640:	bx	lr
    a642:	nop

0000a644 <__cxa_atexit>:
    a644:	mov	r3, r2
    a646:	mov	r2, r1
    a648:	mov	r1, r0
    a64a:	movs	r0, #2
    a64c:	b.w	e978 <__register_exitproc>

0000a650 <__errno>:
    a650:	ldr	r3, [pc, #4]	; (a658 <__errno+0x8>)
    a652:	ldr	r0, [r3, #0]
    a654:	bx	lr
    a656:	nop
    a658:	.word	0x20001dd8

0000a65c <__libc_init_array>:
    a65c:	push	{r4, r5, r6, lr}
    a65e:	ldr	r6, [pc, #60]	; (a69c <__libc_init_array+0x40>)
    a660:	ldr	r5, [pc, #60]	; (a6a0 <__libc_init_array+0x44>)
    a662:	subs	r6, r6, r5
    a664:	asrs	r6, r6, #2
    a666:	it	ne
    a668:	movne	r4, #0
    a66a:	beq.n	a678 <__libc_init_array+0x1c>
    a66c:	adds	r4, #1
    a66e:	ldr.w	r3, [r5], #4
    a672:	blx	r3
    a674:	cmp	r6, r4
    a676:	bne.n	a66c <__libc_init_array+0x10>
    a678:	ldr	r6, [pc, #40]	; (a6a4 <__libc_init_array+0x48>)
    a67a:	ldr	r5, [pc, #44]	; (a6a8 <__libc_init_array+0x4c>)
    a67c:	subs	r6, r6, r5
    a67e:	bl	11488 <___init_veneer>
    a682:	asrs	r6, r6, #2
    a684:	it	ne
    a686:	movne	r4, #0
    a688:	beq.n	a698 <__libc_init_array+0x3c>
    a68a:	adds	r4, #1
    a68c:	ldr.w	r3, [r5], #4
    a690:	blx	r3
    a692:	cmp	r6, r4
    a694:	bne.n	a68a <__libc_init_array+0x2e>
    a696:	pop	{r4, r5, r6, pc}
    a698:	pop	{r4, r5, r6, pc}
    a69a:	nop
    a69c:	.word	0x60001bc0
    a6a0:	.word	0x60001bc0
    a6a4:	.word	0x60001bd4
    a6a8:	.word	0x60001bc0

0000a6ac <__get_current_locale>:
    a6ac:	ldr	r2, [pc, #12]	; (a6bc <__get_current_locale+0x10>)
    a6ae:	ldr	r3, [pc, #16]	; (a6c0 <__get_current_locale+0x14>)
    a6b0:	ldr	r2, [r2, #0]
    a6b2:	ldr	r0, [r2, #52]	; 0x34
    a6b4:	cmp	r0, #0
    a6b6:	it	eq
    a6b8:	moveq	r0, r3
    a6ba:	bx	lr
    a6bc:	.word	0x20001dd8
    a6c0:	.word	0x2000185c

0000a6c4 <__locale_mb_cur_max>:
    a6c4:	ldr	r3, [pc, #16]	; (a6d8 <__locale_mb_cur_max+0x14>)
    a6c6:	ldr	r2, [pc, #20]	; (a6dc <__locale_mb_cur_max+0x18>)
    a6c8:	ldr	r3, [r3, #0]
    a6ca:	ldr	r3, [r3, #52]	; 0x34
    a6cc:	cmp	r3, #0
    a6ce:	it	eq
    a6d0:	moveq	r3, r2
    a6d2:	ldrb.w	r0, [r3, #296]	; 0x128
    a6d6:	bx	lr
    a6d8:	.word	0x20001dd8
    a6dc:	.word	0x2000185c

0000a6e0 <__locale_ctype_ptr_l>:
    a6e0:	ldr.w	r0, [r0, #236]	; 0xec
    a6e4:	bx	lr
    a6e6:	nop

0000a6e8 <__locale_ctype_ptr>:
    a6e8:	push	{r3, lr}
    a6ea:	ldr	r3, [pc, #12]	; (a6f8 <__locale_ctype_ptr+0x10>)
    a6ec:	ldr	r0, [r3, #0]
    a6ee:	bl	a6ac <__get_current_locale>
    a6f2:	ldr.w	r0, [r0, #236]	; 0xec
    a6f6:	pop	{r3, pc}
    a6f8:	.word	0x20001dd8

0000a6fc <malloc>:
    a6fc:	ldr	r3, [pc, #8]	; (a708 <malloc+0xc>)
    a6fe:	mov	r1, r0
    a700:	ldr	r0, [r3, #0]
    a702:	b.w	a71c <_malloc_r>
    a706:	nop
    a708:	.word	0x20001dd8

0000a70c <free>:
    a70c:	ldr	r3, [pc, #8]	; (a718 <free+0xc>)
    a70e:	mov	r1, r0
    a710:	ldr	r0, [r3, #0]
    a712:	b.w	f868 <_free_r>
    a716:	nop
    a718:	.word	0x20001dd8

0000a71c <_malloc_r>:
    a71c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a720:	add.w	r5, r1, #11
    a724:	cmp	r5, #22
    a726:	sub	sp, #12
    a728:	mov	r6, r0
    a72a:	bls.w	a86c <_malloc_r+0x150>
    a72e:	bics.w	r5, r5, #7
    a732:	bmi.w	a8b4 <_malloc_r+0x198>
    a736:	cmp	r1, r5
    a738:	bhi.w	a8b4 <_malloc_r+0x198>
    a73c:	bl	ae8c <__malloc_lock>
    a740:	cmp.w	r5, #504	; 0x1f8
    a744:	bcc.w	ac80 <_malloc_r+0x564>
    a748:	lsrs	r3, r5, #9
    a74a:	beq.w	a8c2 <_malloc_r+0x1a6>
    a74e:	cmp	r3, #4
    a750:	bhi.w	aa5a <_malloc_r+0x33e>
    a754:	lsrs	r0, r5, #6
    a756:	add.w	lr, r0, #57	; 0x39
    a75a:	mov.w	r3, lr, lsl #1
    a75e:	adds	r0, #56	; 0x38
    a760:	ldr	r7, [pc, #784]	; (aa74 <_malloc_r+0x358>)
    a762:	add.w	r3, r7, r3, lsl #2
    a766:	sub.w	r1, r3, #8
    a76a:	ldr	r4, [r3, #4]
    a76c:	cmp	r1, r4
    a76e:	bne.n	a780 <_malloc_r+0x64>
    a770:	b.n	a8cc <_malloc_r+0x1b0>
    a772:	cmp	r2, #0
    a774:	bge.w	a8d0 <_malloc_r+0x1b4>
    a778:	ldr	r4, [r4, #12]
    a77a:	cmp	r1, r4
    a77c:	beq.w	a8cc <_malloc_r+0x1b0>
    a780:	ldr	r3, [r4, #4]
    a782:	bic.w	r3, r3, #3
    a786:	subs	r2, r3, r5
    a788:	cmp	r2, #15
    a78a:	ble.n	a772 <_malloc_r+0x56>
    a78c:	ldr	r1, [pc, #740]	; (aa74 <_malloc_r+0x358>)
    a78e:	ldr	r4, [r7, #16]
    a790:	add.w	lr, r1, #8
    a794:	cmp	r4, lr
    a796:	beq.w	ab00 <_malloc_r+0x3e4>
    a79a:	ldr	r3, [r4, #4]
    a79c:	bic.w	r3, r3, #3
    a7a0:	subs	r2, r3, r5
    a7a2:	cmp	r2, #15
    a7a4:	bgt.w	aada <_malloc_r+0x3be>
    a7a8:	cmp	r2, #0
    a7aa:	str.w	lr, [r1, #20]
    a7ae:	str.w	lr, [r1, #16]
    a7b2:	bge.w	a8f2 <_malloc_r+0x1d6>
    a7b6:	cmp.w	r3, #512	; 0x200
    a7ba:	bcs.w	aa8c <_malloc_r+0x370>
    a7be:	lsrs	r3, r3, #3
    a7c0:	add.w	ip, r3, #1
    a7c4:	movs	r2, #1
    a7c6:	asrs	r3, r3, #2
    a7c8:	lsl.w	r3, r2, r3
    a7cc:	ldr	r2, [r1, #4]
    a7ce:	ldr.w	r8, [r1, ip, lsl #3]
    a7d2:	str.w	r8, [r4, #8]
    a7d6:	add.w	r9, r1, ip, lsl #3
    a7da:	orrs	r2, r3
    a7dc:	sub.w	r3, r9, #8
    a7e0:	str	r3, [r4, #12]
    a7e2:	str	r2, [r1, #4]
    a7e4:	str.w	r4, [r1, ip, lsl #3]
    a7e8:	str.w	r4, [r8, #12]
    a7ec:	asrs	r3, r0, #2
    a7ee:	movs	r4, #1
    a7f0:	lsls	r4, r3
    a7f2:	cmp	r4, r2
    a7f4:	bhi.w	a90c <_malloc_r+0x1f0>
    a7f8:	tst	r4, r2
    a7fa:	bne.n	a80a <_malloc_r+0xee>
    a7fc:	bic.w	r0, r0, #3
    a800:	lsls	r4, r4, #1
    a802:	tst	r4, r2
    a804:	add.w	r0, r0, #4
    a808:	beq.n	a800 <_malloc_r+0xe4>
    a80a:	add.w	r9, r7, r0, lsl #3
    a80e:	mov	ip, r9
    a810:	mov	r8, r0
    a812:	ldr.w	r1, [ip, #12]
    a816:	cmp	ip, r1
    a818:	bne.n	a82a <_malloc_r+0x10e>
    a81a:	b.n	ab04 <_malloc_r+0x3e8>
    a81c:	cmp	r2, #0
    a81e:	bge.w	ab24 <_malloc_r+0x408>
    a822:	ldr	r1, [r1, #12]
    a824:	cmp	ip, r1
    a826:	beq.w	ab04 <_malloc_r+0x3e8>
    a82a:	ldr	r3, [r1, #4]
    a82c:	bic.w	r3, r3, #3
    a830:	subs	r2, r3, r5
    a832:	cmp	r2, #15
    a834:	ble.n	a81c <_malloc_r+0x100>
    a836:	mov	r4, r1
    a838:	ldr.w	ip, [r1, #12]
    a83c:	ldr.w	r8, [r4, #8]!
    a840:	adds	r3, r1, r5
    a842:	orr.w	r5, r5, #1
    a846:	str	r5, [r1, #4]
    a848:	orr.w	r1, r2, #1
    a84c:	str.w	ip, [r8, #12]
    a850:	mov	r0, r6
    a852:	str.w	r8, [ip, #8]
    a856:	str	r3, [r7, #20]
    a858:	str	r3, [r7, #16]
    a85a:	str.w	lr, [r3, #12]
    a85e:	str.w	lr, [r3, #8]
    a862:	str	r1, [r3, #4]
    a864:	str	r2, [r3, r2]
    a866:	bl	ae90 <__malloc_unlock>
    a86a:	b.n	a8ac <_malloc_r+0x190>
    a86c:	cmp	r1, #16
    a86e:	bhi.n	a8b4 <_malloc_r+0x198>
    a870:	bl	ae8c <__malloc_lock>
    a874:	movs	r5, #16
    a876:	movs	r3, #6
    a878:	movs	r0, #2
    a87a:	ldr	r7, [pc, #504]	; (aa74 <_malloc_r+0x358>)
    a87c:	add.w	r3, r7, r3, lsl #2
    a880:	sub.w	r2, r3, #8
    a884:	ldr	r4, [r3, #4]
    a886:	cmp	r4, r2
    a888:	beq.w	ab16 <_malloc_r+0x3fa>
    a88c:	ldr	r3, [r4, #4]
    a88e:	ldr	r1, [r4, #12]
    a890:	ldr	r5, [r4, #8]
    a892:	bic.w	r3, r3, #3
    a896:	add	r3, r4
    a898:	mov	r0, r6
    a89a:	ldr	r2, [r3, #4]
    a89c:	str	r1, [r5, #12]
    a89e:	orr.w	r2, r2, #1
    a8a2:	str	r5, [r1, #8]
    a8a4:	str	r2, [r3, #4]
    a8a6:	bl	ae90 <__malloc_unlock>
    a8aa:	adds	r4, #8
    a8ac:	mov	r0, r4
    a8ae:	add	sp, #12
    a8b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b4:	movs	r4, #0
    a8b6:	movs	r3, #12
    a8b8:	mov	r0, r4
    a8ba:	str	r3, [r6, #0]
    a8bc:	add	sp, #12
    a8be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c2:	movs	r3, #128	; 0x80
    a8c4:	mov.w	lr, #64	; 0x40
    a8c8:	movs	r0, #63	; 0x3f
    a8ca:	b.n	a760 <_malloc_r+0x44>
    a8cc:	mov	r0, lr
    a8ce:	b.n	a78c <_malloc_r+0x70>
    a8d0:	add	r3, r4
    a8d2:	ldr	r1, [r4, #12]
    a8d4:	ldr	r2, [r3, #4]
    a8d6:	ldr	r5, [r4, #8]
    a8d8:	orr.w	r2, r2, #1
    a8dc:	str	r1, [r5, #12]
    a8de:	mov	r0, r6
    a8e0:	str	r5, [r1, #8]
    a8e2:	str	r2, [r3, #4]
    a8e4:	bl	ae90 <__malloc_unlock>
    a8e8:	adds	r4, #8
    a8ea:	mov	r0, r4
    a8ec:	add	sp, #12
    a8ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8f2:	add	r3, r4
    a8f4:	mov	r0, r6
    a8f6:	ldr	r2, [r3, #4]
    a8f8:	orr.w	r2, r2, #1
    a8fc:	str	r2, [r3, #4]
    a8fe:	bl	ae90 <__malloc_unlock>
    a902:	adds	r4, #8
    a904:	mov	r0, r4
    a906:	add	sp, #12
    a908:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a90c:	ldr	r4, [r7, #8]
    a90e:	ldr	r3, [r4, #4]
    a910:	bic.w	r8, r3, #3
    a914:	cmp	r8, r5
    a916:	bcc.n	a922 <_malloc_r+0x206>
    a918:	rsb	r3, r5, r8
    a91c:	cmp	r3, #15
    a91e:	bgt.w	aa3a <_malloc_r+0x31e>
    a922:	ldr	r3, [pc, #340]	; (aa78 <_malloc_r+0x35c>)
    a924:	ldr.w	r9, [pc, #352]	; aa88 <_malloc_r+0x36c>
    a928:	ldr	r2, [r3, #0]
    a92a:	ldr.w	r3, [r9]
    a92e:	adds	r3, #1
    a930:	add	r2, r5
    a932:	add.w	sl, r4, r8
    a936:	beq.w	abfa <_malloc_r+0x4de>
    a93a:	add.w	r2, r2, #4096	; 0x1000
    a93e:	adds	r2, #15
    a940:	bic.w	r2, r2, #4080	; 0xff0
    a944:	bic.w	r2, r2, #15
    a948:	mov	r1, r2
    a94a:	mov	r0, r6
    a94c:	str	r2, [sp, #4]
    a94e:	bl	b274 <_sbrk_r>
    a952:	cmp.w	r0, #4294967295
    a956:	mov	fp, r0
    a958:	ldr	r2, [sp, #4]
    a95a:	beq.w	ac0e <_malloc_r+0x4f2>
    a95e:	cmp	sl, r0
    a960:	bhi.w	ab5c <_malloc_r+0x440>
    a964:	ldr	r3, [pc, #276]	; (aa7c <_malloc_r+0x360>)
    a966:	ldr	r1, [r3, #0]
    a968:	cmp	sl, fp
    a96a:	add	r1, r2
    a96c:	str	r1, [r3, #0]
    a96e:	beq.w	ac18 <_malloc_r+0x4fc>
    a972:	ldr.w	r0, [r9]
    a976:	ldr.w	lr, [pc, #272]	; aa88 <_malloc_r+0x36c>
    a97a:	adds	r0, #1
    a97c:	ittet	ne
    a97e:	rsbne	sl, sl, fp
    a982:	addne	r1, sl
    a984:	streq.w	fp, [lr]
    a988:	strne	r1, [r3, #0]
    a98a:	ands.w	r1, fp, #7
    a98e:	beq.w	abc0 <_malloc_r+0x4a4>
    a992:	rsb	r0, r1, #8
    a996:	rsb	r1, r1, #4096	; 0x1000
    a99a:	add	fp, r0
    a99c:	adds	r1, #8
    a99e:	add	r2, fp
    a9a0:	ubfx	r2, r2, #0, #12
    a9a4:	rsb	r9, r2, r1
    a9a8:	mov	r1, r9
    a9aa:	mov	r0, r6
    a9ac:	str	r3, [sp, #4]
    a9ae:	bl	b274 <_sbrk_r>
    a9b2:	adds	r3, r0, #1
    a9b4:	ldr	r3, [sp, #4]
    a9b6:	beq.w	ac38 <_malloc_r+0x51c>
    a9ba:	rsb	r2, fp, r0
    a9be:	add	r2, r9
    a9c0:	orr.w	r2, r2, #1
    a9c4:	ldr	r1, [r3, #0]
    a9c6:	str.w	fp, [r7, #8]
    a9ca:	add	r1, r9
    a9cc:	cmp	r4, r7
    a9ce:	str.w	r2, [fp, #4]
    a9d2:	str	r1, [r3, #0]
    a9d4:	ldr.w	r9, [pc, #164]	; aa7c <_malloc_r+0x360>
    a9d8:	beq.n	aa08 <_malloc_r+0x2ec>
    a9da:	cmp.w	r8, #15
    a9de:	bls.w	abdc <_malloc_r+0x4c0>
    a9e2:	ldr	r2, [r4, #4]
    a9e4:	sub.w	r3, r8, #12
    a9e8:	bic.w	r3, r3, #7
    a9ec:	adds	r0, r4, r3
    a9ee:	and.w	r2, r2, #1
    a9f2:	mov.w	lr, #5
    a9f6:	orrs	r2, r3
    a9f8:	cmp	r3, #15
    a9fa:	str	r2, [r4, #4]
    a9fc:	str.w	lr, [r0, #4]
    aa00:	str.w	lr, [r0, #8]
    aa04:	bhi.w	ac40 <_malloc_r+0x524>
    aa08:	ldr	r3, [pc, #116]	; (aa80 <_malloc_r+0x364>)
    aa0a:	ldr	r4, [r7, #8]
    aa0c:	ldr	r2, [r3, #0]
    aa0e:	cmp	r1, r2
    aa10:	it	hi
    aa12:	strhi	r1, [r3, #0]
    aa14:	ldr	r3, [pc, #108]	; (aa84 <_malloc_r+0x368>)
    aa16:	ldr	r2, [r3, #0]
    aa18:	cmp	r1, r2
    aa1a:	ldr	r2, [r4, #4]
    aa1c:	it	hi
    aa1e:	strhi	r1, [r3, #0]
    aa20:	bic.w	r2, r2, #3
    aa24:	cmp	r5, r2
    aa26:	sub.w	r3, r2, r5
    aa2a:	bhi.n	aa30 <_malloc_r+0x314>
    aa2c:	cmp	r3, #15
    aa2e:	bgt.n	aa3a <_malloc_r+0x31e>
    aa30:	mov	r0, r6
    aa32:	bl	ae90 <__malloc_unlock>
    aa36:	movs	r4, #0
    aa38:	b.n	a8ac <_malloc_r+0x190>
    aa3a:	adds	r2, r4, r5
    aa3c:	orr.w	r3, r3, #1
    aa40:	orr.w	r5, r5, #1
    aa44:	str	r5, [r4, #4]
    aa46:	mov	r0, r6
    aa48:	str	r2, [r7, #8]
    aa4a:	str	r3, [r2, #4]
    aa4c:	bl	ae90 <__malloc_unlock>
    aa50:	adds	r4, #8
    aa52:	mov	r0, r4
    aa54:	add	sp, #12
    aa56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa5a:	cmp	r3, #20
    aa5c:	bls.n	ab42 <_malloc_r+0x426>
    aa5e:	cmp	r3, #84	; 0x54
    aa60:	bhi.w	abac <_malloc_r+0x490>
    aa64:	lsrs	r0, r5, #12
    aa66:	add.w	lr, r0, #111	; 0x6f
    aa6a:	mov.w	r3, lr, lsl #1
    aa6e:	adds	r0, #110	; 0x6e
    aa70:	b.n	a760 <_malloc_r+0x44>
    aa72:	nop
    aa74:	.word	0x200019c8
    aa78:	.word	0x20003dcc
    aa7c:	.word	0x20003d9c
    aa80:	.word	0x20003dc4
    aa84:	.word	0x20003dc8
    aa88:	.word	0x20001dd0
    aa8c:	lsrs	r2, r3, #9
    aa8e:	cmp	r2, #4
    aa90:	bls.n	ab50 <_malloc_r+0x434>
    aa92:	cmp	r2, #20
    aa94:	bhi.w	abfe <_malloc_r+0x4e2>
    aa98:	add.w	r1, r2, #92	; 0x5c
    aa9c:	lsls	r1, r1, #1
    aa9e:	adds	r2, #91	; 0x5b
    aaa0:	add.w	ip, r7, r1, lsl #2
    aaa4:	ldr.w	r1, [r7, r1, lsl #2]
    aaa8:	ldr.w	r8, [pc, #476]	; ac88 <_malloc_r+0x56c>
    aaac:	sub.w	ip, ip, #8
    aab0:	cmp	ip, r1
    aab2:	beq.w	abc6 <_malloc_r+0x4aa>
    aab6:	ldr	r2, [r1, #4]
    aab8:	bic.w	r2, r2, #3
    aabc:	cmp	r3, r2
    aabe:	bcs.n	aac6 <_malloc_r+0x3aa>
    aac0:	ldr	r1, [r1, #8]
    aac2:	cmp	ip, r1
    aac4:	bne.n	aab6 <_malloc_r+0x39a>
    aac6:	ldr.w	ip, [r1, #12]
    aaca:	ldr	r2, [r7, #4]
    aacc:	str.w	ip, [r4, #12]
    aad0:	str	r1, [r4, #8]
    aad2:	str.w	r4, [ip, #8]
    aad6:	str	r4, [r1, #12]
    aad8:	b.n	a7ec <_malloc_r+0xd0>
    aada:	adds	r3, r4, r5
    aadc:	orr.w	r7, r2, #1
    aae0:	orr.w	r5, r5, #1
    aae4:	str	r5, [r4, #4]
    aae6:	mov	r0, r6
    aae8:	str	r3, [r1, #20]
    aaea:	str	r3, [r1, #16]
    aaec:	str.w	lr, [r3, #12]
    aaf0:	str.w	lr, [r3, #8]
    aaf4:	str	r7, [r3, #4]
    aaf6:	str	r2, [r3, r2]
    aaf8:	adds	r4, #8
    aafa:	bl	ae90 <__malloc_unlock>
    aafe:	b.n	a8ac <_malloc_r+0x190>
    ab00:	ldr	r2, [r1, #4]
    ab02:	b.n	a7ec <_malloc_r+0xd0>
    ab04:	add.w	r8, r8, #1
    ab08:	tst.w	r8, #3
    ab0c:	add.w	ip, ip, #8
    ab10:	bne.w	a812 <_malloc_r+0xf6>
    ab14:	b.n	ab78 <_malloc_r+0x45c>
    ab16:	ldr	r4, [r3, #12]
    ab18:	cmp	r3, r4
    ab1a:	it	eq
    ab1c:	addeq	r0, #2
    ab1e:	beq.w	a78c <_malloc_r+0x70>
    ab22:	b.n	a88c <_malloc_r+0x170>
    ab24:	add	r3, r1
    ab26:	mov	r4, r1
    ab28:	ldr	r2, [r3, #4]
    ab2a:	ldr	r1, [r1, #12]
    ab2c:	ldr.w	r5, [r4, #8]!
    ab30:	orr.w	r2, r2, #1
    ab34:	str	r2, [r3, #4]
    ab36:	mov	r0, r6
    ab38:	str	r1, [r5, #12]
    ab3a:	str	r5, [r1, #8]
    ab3c:	bl	ae90 <__malloc_unlock>
    ab40:	b.n	a8ac <_malloc_r+0x190>
    ab42:	add.w	lr, r3, #92	; 0x5c
    ab46:	add.w	r0, r3, #91	; 0x5b
    ab4a:	mov.w	r3, lr, lsl #1
    ab4e:	b.n	a760 <_malloc_r+0x44>
    ab50:	lsrs	r2, r3, #6
    ab52:	add.w	r1, r2, #57	; 0x39
    ab56:	lsls	r1, r1, #1
    ab58:	adds	r2, #56	; 0x38
    ab5a:	b.n	aaa0 <_malloc_r+0x384>
    ab5c:	cmp	r4, r7
    ab5e:	ldr	r3, [pc, #296]	; (ac88 <_malloc_r+0x56c>)
    ab60:	beq.w	a964 <_malloc_r+0x248>
    ab64:	ldr	r4, [r3, #8]
    ab66:	ldr	r2, [r4, #4]
    ab68:	bic.w	r2, r2, #3
    ab6c:	b.n	aa24 <_malloc_r+0x308>
    ab6e:	ldr.w	r3, [r9], #-8
    ab72:	cmp	r9, r3
    ab74:	bne.w	ac7c <_malloc_r+0x560>
    ab78:	tst.w	r0, #3
    ab7c:	add.w	r0, r0, #4294967295
    ab80:	bne.n	ab6e <_malloc_r+0x452>
    ab82:	ldr	r3, [r7, #4]
    ab84:	bic.w	r3, r3, r4
    ab88:	str	r3, [r7, #4]
    ab8a:	lsls	r4, r4, #1
    ab8c:	cmp	r4, r3
    ab8e:	bhi.w	a90c <_malloc_r+0x1f0>
    ab92:	cmp	r4, #0
    ab94:	beq.w	a90c <_malloc_r+0x1f0>
    ab98:	tst	r4, r3
    ab9a:	mov	r0, r8
    ab9c:	bne.w	a80a <_malloc_r+0xee>
    aba0:	lsls	r4, r4, #1
    aba2:	tst	r4, r3
    aba4:	add.w	r0, r0, #4
    aba8:	beq.n	aba0 <_malloc_r+0x484>
    abaa:	b.n	a80a <_malloc_r+0xee>
    abac:	cmp.w	r3, #340	; 0x154
    abb0:	bhi.n	abe4 <_malloc_r+0x4c8>
    abb2:	lsrs	r0, r5, #15
    abb4:	add.w	lr, r0, #120	; 0x78
    abb8:	mov.w	r3, lr, lsl #1
    abbc:	adds	r0, #119	; 0x77
    abbe:	b.n	a760 <_malloc_r+0x44>
    abc0:	mov.w	r1, #4096	; 0x1000
    abc4:	b.n	a99e <_malloc_r+0x282>
    abc6:	movs	r1, #1
    abc8:	ldr.w	r3, [r8, #4]
    abcc:	asrs	r2, r2, #2
    abce:	lsl.w	r2, r1, r2
    abd2:	orrs	r2, r3
    abd4:	str.w	r2, [r8, #4]
    abd8:	mov	r1, ip
    abda:	b.n	aacc <_malloc_r+0x3b0>
    abdc:	movs	r3, #1
    abde:	str.w	r3, [fp, #4]
    abe2:	b.n	aa30 <_malloc_r+0x314>
    abe4:	movw	r2, #1364	; 0x554
    abe8:	cmp	r3, r2
    abea:	bhi.n	ac2e <_malloc_r+0x512>
    abec:	lsrs	r0, r5, #18
    abee:	add.w	lr, r0, #125	; 0x7d
    abf2:	mov.w	r3, lr, lsl #1
    abf6:	adds	r0, #124	; 0x7c
    abf8:	b.n	a760 <_malloc_r+0x44>
    abfa:	adds	r2, #16
    abfc:	b.n	a948 <_malloc_r+0x22c>
    abfe:	cmp	r2, #84	; 0x54
    ac00:	bhi.n	ac50 <_malloc_r+0x534>
    ac02:	lsrs	r2, r3, #12
    ac04:	add.w	r1, r2, #111	; 0x6f
    ac08:	lsls	r1, r1, #1
    ac0a:	adds	r2, #110	; 0x6e
    ac0c:	b.n	aaa0 <_malloc_r+0x384>
    ac0e:	ldr	r4, [r7, #8]
    ac10:	ldr	r2, [r4, #4]
    ac12:	bic.w	r2, r2, #3
    ac16:	b.n	aa24 <_malloc_r+0x308>
    ac18:	ubfx	r0, sl, #0, #12
    ac1c:	cmp	r0, #0
    ac1e:	bne.w	a972 <_malloc_r+0x256>
    ac22:	add	r2, r8
    ac24:	ldr	r3, [r7, #8]
    ac26:	orr.w	r2, r2, #1
    ac2a:	str	r2, [r3, #4]
    ac2c:	b.n	aa08 <_malloc_r+0x2ec>
    ac2e:	movs	r3, #254	; 0xfe
    ac30:	mov.w	lr, #127	; 0x7f
    ac34:	movs	r0, #126	; 0x7e
    ac36:	b.n	a760 <_malloc_r+0x44>
    ac38:	movs	r2, #1
    ac3a:	mov.w	r9, #0
    ac3e:	b.n	a9c4 <_malloc_r+0x2a8>
    ac40:	add.w	r1, r4, #8
    ac44:	mov	r0, r6
    ac46:	bl	f868 <_free_r>
    ac4a:	ldr.w	r1, [r9]
    ac4e:	b.n	aa08 <_malloc_r+0x2ec>
    ac50:	cmp.w	r2, #340	; 0x154
    ac54:	bhi.n	ac62 <_malloc_r+0x546>
    ac56:	lsrs	r2, r3, #15
    ac58:	add.w	r1, r2, #120	; 0x78
    ac5c:	lsls	r1, r1, #1
    ac5e:	adds	r2, #119	; 0x77
    ac60:	b.n	aaa0 <_malloc_r+0x384>
    ac62:	movw	r1, #1364	; 0x554
    ac66:	cmp	r2, r1
    ac68:	bhi.n	ac76 <_malloc_r+0x55a>
    ac6a:	lsrs	r2, r3, #18
    ac6c:	add.w	r1, r2, #125	; 0x7d
    ac70:	lsls	r1, r1, #1
    ac72:	adds	r2, #124	; 0x7c
    ac74:	b.n	aaa0 <_malloc_r+0x384>
    ac76:	movs	r1, #254	; 0xfe
    ac78:	movs	r2, #126	; 0x7e
    ac7a:	b.n	aaa0 <_malloc_r+0x384>
    ac7c:	ldr	r3, [r7, #4]
    ac7e:	b.n	ab8a <_malloc_r+0x46e>
    ac80:	lsrs	r0, r5, #3
    ac82:	adds	r3, r0, #1
    ac84:	lsls	r3, r3, #1
    ac86:	b.n	a87a <_malloc_r+0x15e>
    ac88:	.word	0x200019c8

0000ac8c <__ascii_mbtowc>:
    ac8c:	sub	sp, #8
    ac8e:	cbz	r1, aca4 <__ascii_mbtowc+0x18>
    ac90:	cbz	r2, acaa <__ascii_mbtowc+0x1e>
    ac92:	cbz	r3, acb0 <__ascii_mbtowc+0x24>
    ac94:	ldrb	r3, [r2, #0]
    ac96:	str	r3, [r1, #0]
    ac98:	ldrb	r2, [r2, #0]
    ac9a:	adds	r0, r2, #0
    ac9c:	it	ne
    ac9e:	movne	r0, #1
    aca0:	add	sp, #8
    aca2:	bx	lr
    aca4:	add	r1, sp, #4
    aca6:	cmp	r2, #0
    aca8:	bne.n	ac92 <__ascii_mbtowc+0x6>
    acaa:	mov	r0, r2
    acac:	add	sp, #8
    acae:	bx	lr
    acb0:	mvn.w	r0, #1
    acb4:	b.n	aca0 <__ascii_mbtowc+0x14>
    acb6:	nop
	...

0000acc0 <memchr>:
    acc0:	and.w	r1, r1, #255	; 0xff
    acc4:	cmp	r2, #16
    acc6:	blt.n	ad20 <memchr+0x60>
    acc8:	tst.w	r0, #7
    accc:	beq.n	ace0 <memchr+0x20>
    acce:	ldrb.w	r3, [r0], #1
    acd2:	subs	r2, #1
    acd4:	cmp	r3, r1
    acd6:	beq.n	ad34 <memchr+0x74>
    acd8:	tst.w	r0, #7
    acdc:	cbz	r2, ad30 <memchr+0x70>
    acde:	bne.n	acce <memchr+0xe>
    ace0:	push	{r4, r5, r6, r7}
    ace2:	orr.w	r1, r1, r1, lsl #8
    ace6:	orr.w	r1, r1, r1, lsl #16
    acea:	bic.w	r4, r2, #7
    acee:	mvns.w	r7, #0
    acf2:	movs	r3, #0
    acf4:	ldrd	r5, r6, [r0], #8
    acf8:	subs	r4, #8
    acfa:	eor.w	r5, r5, r1
    acfe:	eor.w	r6, r6, r1
    ad02:	uadd8	r5, r5, r7
    ad06:	sel	r5, r3, r7
    ad0a:	uadd8	r6, r6, r7
    ad0e:	sel	r6, r5, r7
    ad12:	cbnz	r6, ad38 <memchr+0x78>
    ad14:	bne.n	acf4 <memchr+0x34>
    ad16:	pop	{r4, r5, r6, r7}
    ad18:	and.w	r1, r1, #255	; 0xff
    ad1c:	and.w	r2, r2, #7
    ad20:	cbz	r2, ad30 <memchr+0x70>
    ad22:	ldrb.w	r3, [r0], #1
    ad26:	subs	r2, #1
    ad28:	eor.w	r3, r3, r1
    ad2c:	cbz	r3, ad34 <memchr+0x74>
    ad2e:	bne.n	ad22 <memchr+0x62>
    ad30:	movs	r0, #0
    ad32:	bx	lr
    ad34:	subs	r0, #1
    ad36:	bx	lr
    ad38:	cmp	r5, #0
    ad3a:	itte	eq
    ad3c:	moveq	r5, r6
    ad3e:	subeq	r0, #3
    ad40:	subne	r0, #7
    ad42:	tst.w	r5, #1
    ad46:	bne.n	ad58 <memchr+0x98>
    ad48:	adds	r0, #1
    ad4a:	tst.w	r5, #256	; 0x100
    ad4e:	ittt	eq
    ad50:	addeq	r0, #1
    ad52:	tsteq.w	r5, #98304	; 0x18000
    ad56:	addeq	r0, #1
    ad58:	pop	{r4, r5, r6, r7}
    ad5a:	subs	r0, #1
    ad5c:	bx	lr
    ad5e:	nop

0000ad60 <memcmp>:
    ad60:	cmp	r2, #3
    ad62:	push	{r4, r5, r6}
    ad64:	bls.n	adb4 <memcmp+0x54>
    ad66:	orr.w	r3, r0, r1
    ad6a:	lsls	r3, r3, #30
    ad6c:	beq.n	ad92 <memcmp+0x32>
    ad6e:	ldrb	r4, [r0, #0]
    ad70:	ldrb	r5, [r1, #0]
    ad72:	cmp	r4, r5
    ad74:	bne.n	adbc <memcmp+0x5c>
    ad76:	add	r2, r0
    ad78:	adds	r3, r0, #1
    ad7a:	b.n	ad88 <memcmp+0x28>
    ad7c:	ldrb.w	r4, [r3], #1
    ad80:	ldrb.w	r5, [r1, #1]!
    ad84:	cmp	r4, r5
    ad86:	bne.n	adbc <memcmp+0x5c>
    ad88:	cmp	r3, r2
    ad8a:	bne.n	ad7c <memcmp+0x1c>
    ad8c:	movs	r0, #0
    ad8e:	pop	{r4, r5, r6}
    ad90:	bx	lr
    ad92:	mov	r4, r1
    ad94:	mov	r3, r0
    ad96:	ldr	r6, [r3, #0]
    ad98:	ldr	r5, [r4, #0]
    ad9a:	cmp	r6, r5
    ad9c:	mov	r0, r3
    ad9e:	mov	r1, r4
    ada0:	add.w	r3, r3, #4
    ada4:	add.w	r4, r4, #4
    ada8:	bne.n	ad6e <memcmp+0xe>
    adaa:	subs	r2, #4
    adac:	cmp	r2, #3
    adae:	mov	r0, r3
    adb0:	mov	r1, r4
    adb2:	bhi.n	ad96 <memcmp+0x36>
    adb4:	cmp	r2, #0
    adb6:	bne.n	ad6e <memcmp+0xe>
    adb8:	mov	r0, r2
    adba:	b.n	ad8e <memcmp+0x2e>
    adbc:	subs	r0, r4, r5
    adbe:	pop	{r4, r5, r6}
    adc0:	bx	lr
    adc2:	nop

0000adc4 <memmove>:
    adc4:	cmp	r0, r1
    adc6:	push	{r4, r5, r6, r7, lr}
    adc8:	bls.n	ade6 <memmove+0x22>
    adca:	adds	r3, r1, r2
    adcc:	cmp	r0, r3
    adce:	bcs.n	ade6 <memmove+0x22>
    add0:	adds	r1, r0, r2
    add2:	cmp	r2, #0
    add4:	beq.n	ae7a <memmove+0xb6>
    add6:	subs	r2, r3, r2
    add8:	ldrb.w	r4, [r3, #-1]!
    addc:	strb.w	r4, [r1, #-1]!
    ade0:	cmp	r3, r2
    ade2:	bne.n	add8 <memmove+0x14>
    ade4:	pop	{r4, r5, r6, r7, pc}
    ade6:	cmp	r2, #15
    ade8:	bls.n	ae7c <memmove+0xb8>
    adea:	orr.w	r3, r1, r0
    adee:	lsls	r3, r3, #30
    adf0:	bne.n	ae80 <memmove+0xbc>
    adf2:	add.w	r4, r0, #16
    adf6:	add.w	r3, r1, #16
    adfa:	mov	r5, r2
    adfc:	ldr.w	r6, [r3, #-16]
    ae00:	str.w	r6, [r4, #-16]
    ae04:	ldr.w	r6, [r3, #-12]
    ae08:	str.w	r6, [r4, #-12]
    ae0c:	ldr.w	r6, [r3, #-8]
    ae10:	str.w	r6, [r4, #-8]
    ae14:	subs	r5, #16
    ae16:	ldr.w	r6, [r3, #-4]
    ae1a:	str.w	r6, [r4, #-4]
    ae1e:	cmp	r5, #15
    ae20:	add.w	r3, r3, #16
    ae24:	add.w	r4, r4, #16
    ae28:	bhi.n	adfc <memmove+0x38>
    ae2a:	sub.w	r3, r2, #16
    ae2e:	bic.w	r3, r3, #15
    ae32:	and.w	lr, r2, #15
    ae36:	adds	r3, #16
    ae38:	cmp.w	lr, #3
    ae3c:	add	r1, r3
    ae3e:	add	r3, r0
    ae40:	bls.n	ae86 <memmove+0xc2>
    ae42:	subs	r6, r3, #4
    ae44:	mov	r5, r1
    ae46:	mov	r4, lr
    ae48:	subs	r4, #4
    ae4a:	ldr.w	r7, [r5], #4
    ae4e:	str.w	r7, [r6, #4]!
    ae52:	cmp	r4, #3
    ae54:	bhi.n	ae48 <memmove+0x84>
    ae56:	sub.w	r4, lr, #4
    ae5a:	bic.w	r4, r4, #3
    ae5e:	adds	r4, #4
    ae60:	add	r3, r4
    ae62:	add	r1, r4
    ae64:	and.w	r2, r2, #3
    ae68:	cbz	r2, ae84 <memmove+0xc0>
    ae6a:	subs	r3, #1
    ae6c:	add	r2, r1
    ae6e:	ldrb.w	r4, [r1], #1
    ae72:	strb.w	r4, [r3, #1]!
    ae76:	cmp	r2, r1
    ae78:	bne.n	ae6e <memmove+0xaa>
    ae7a:	pop	{r4, r5, r6, r7, pc}
    ae7c:	mov	r3, r0
    ae7e:	b.n	ae68 <memmove+0xa4>
    ae80:	mov	r3, r0
    ae82:	b.n	ae6a <memmove+0xa6>
    ae84:	pop	{r4, r5, r6, r7, pc}
    ae86:	mov	r2, lr
    ae88:	b.n	ae68 <memmove+0xa4>
    ae8a:	nop

0000ae8c <__malloc_lock>:
    ae8c:	bx	lr
    ae8e:	nop

0000ae90 <__malloc_unlock>:
    ae90:	bx	lr
    ae92:	nop

0000ae94 <_realloc_r>:
    ae94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae98:	mov	r7, r2
    ae9a:	sub	sp, #12
    ae9c:	cmp	r1, #0
    ae9e:	beq.w	b024 <_realloc_r+0x190>
    aea2:	mov	r6, r1
    aea4:	mov	r9, r0
    aea6:	add.w	r5, r7, #11
    aeaa:	bl	ae8c <__malloc_lock>
    aeae:	ldr.w	lr, [r6, #-4]
    aeb2:	cmp	r5, #22
    aeb4:	bic.w	r4, lr, #3
    aeb8:	sub.w	r8, r6, #8
    aebc:	bhi.n	af40 <_realloc_r+0xac>
    aebe:	movs	r2, #16
    aec0:	mov	r5, r2
    aec2:	cmp	r7, r5
    aec4:	bhi.n	af4a <_realloc_r+0xb6>
    aec6:	cmp	r4, r2
    aec8:	bge.n	afb6 <_realloc_r+0x122>
    aeca:	ldr	r3, [pc, #804]	; (b1f0 <_realloc_r+0x35c>)
    aecc:	ldr	r1, [r3, #8]
    aece:	add.w	r0, r8, r4
    aed2:	cmp	r0, r1
    aed4:	ldr	r1, [r0, #4]
    aed6:	beq.w	b08c <_realloc_r+0x1f8>
    aeda:	bic.w	r3, r1, #1
    aede:	add	r3, r0
    aee0:	ldr	r3, [r3, #4]
    aee2:	lsls	r3, r3, #31
    aee4:	bpl.n	afe2 <_realloc_r+0x14e>
    aee6:	tst.w	lr, #1
    aeea:	beq.n	af58 <_realloc_r+0xc4>
    aeec:	mov	r1, r7
    aeee:	mov	r0, r9
    aef0:	bl	a71c <_malloc_r>
    aef4:	mov	r7, r0
    aef6:	cbz	r0, af32 <_realloc_r+0x9e>
    aef8:	ldr.w	r3, [r6, #-4]
    aefc:	bic.w	r3, r3, #1
    af00:	add	r3, r8
    af02:	sub.w	r2, r0, #8
    af06:	cmp	r2, r3
    af08:	beq.w	b194 <_realloc_r+0x300>
    af0c:	subs	r2, r4, #4
    af0e:	cmp	r2, #36	; 0x24
    af10:	bhi.w	b176 <_realloc_r+0x2e2>
    af14:	cmp	r2, #19
    af16:	bhi.w	b122 <_realloc_r+0x28e>
    af1a:	mov	r3, r0
    af1c:	mov	r2, r6
    af1e:	ldr	r1, [r2, #0]
    af20:	str	r1, [r3, #0]
    af22:	ldr	r1, [r2, #4]
    af24:	str	r1, [r3, #4]
    af26:	ldr	r2, [r2, #8]
    af28:	str	r2, [r3, #8]
    af2a:	mov	r1, r6
    af2c:	mov	r0, r9
    af2e:	bl	f868 <_free_r>
    af32:	mov	r0, r9
    af34:	bl	ae90 <__malloc_unlock>
    af38:	mov	r0, r7
    af3a:	add	sp, #12
    af3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af40:	bic.w	r5, r5, #7
    af44:	cmp	r5, #0
    af46:	mov	r2, r5
    af48:	bge.n	aec2 <_realloc_r+0x2e>
    af4a:	movs	r3, #12
    af4c:	movs	r0, #0
    af4e:	str.w	r3, [r9]
    af52:	add	sp, #12
    af54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af58:	ldr.w	r3, [r6, #-8]
    af5c:	rsb	sl, r3, r8
    af60:	ldr.w	r3, [sl, #4]
    af64:	bic.w	ip, r3, #3
    af68:	add.w	r3, r4, ip
    af6c:	cmp	r3, r2
    af6e:	blt.n	aeec <_realloc_r+0x58>
    af70:	mov	r7, sl
    af72:	ldr.w	r1, [sl, #12]
    af76:	ldr.w	r0, [r7, #8]!
    af7a:	subs	r2, r4, #4
    af7c:	cmp	r2, #36	; 0x24
    af7e:	str	r1, [r0, #12]
    af80:	str	r0, [r1, #8]
    af82:	bhi.w	b1b4 <_realloc_r+0x320>
    af86:	cmp	r2, #19
    af88:	bls.w	b1b0 <_realloc_r+0x31c>
    af8c:	ldr	r1, [r6, #0]
    af8e:	str.w	r1, [sl, #8]
    af92:	ldr	r1, [r6, #4]
    af94:	str.w	r1, [sl, #12]
    af98:	cmp	r2, #27
    af9a:	bhi.w	b1f4 <_realloc_r+0x360>
    af9e:	adds	r6, #8
    afa0:	add.w	r2, sl, #16
    afa4:	ldr	r1, [r6, #0]
    afa6:	str	r1, [r2, #0]
    afa8:	ldr	r1, [r6, #4]
    afaa:	str	r1, [r2, #4]
    afac:	ldr	r1, [r6, #8]
    afae:	str	r1, [r2, #8]
    afb0:	mov	r6, r7
    afb2:	mov	r4, r3
    afb4:	mov	r8, sl
    afb6:	subs	r3, r4, r5
    afb8:	cmp	r3, #15
    afba:	bhi.n	aff8 <_realloc_r+0x164>
    afbc:	ldr.w	r3, [r8, #4]
    afc0:	and.w	r3, r3, #1
    afc4:	orrs	r3, r4
    afc6:	add	r4, r8
    afc8:	str.w	r3, [r8, #4]
    afcc:	ldr	r3, [r4, #4]
    afce:	orr.w	r3, r3, #1
    afd2:	str	r3, [r4, #4]
    afd4:	mov	r0, r9
    afd6:	bl	ae90 <__malloc_unlock>
    afda:	mov	r0, r6
    afdc:	add	sp, #12
    afde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afe2:	bic.w	r1, r1, #3
    afe6:	add	r1, r4
    afe8:	cmp	r1, r2
    afea:	blt.n	b030 <_realloc_r+0x19c>
    afec:	ldr	r3, [r0, #12]
    afee:	ldr	r2, [r0, #8]
    aff0:	mov	r4, r1
    aff2:	str	r3, [r2, #12]
    aff4:	str	r2, [r3, #8]
    aff6:	b.n	afb6 <_realloc_r+0x122>
    aff8:	ldr.w	r2, [r8, #4]
    affc:	add.w	r1, r8, r5
    b000:	and.w	r2, r2, #1
    b004:	orrs	r5, r2
    b006:	orr.w	r2, r3, #1
    b00a:	add	r3, r1
    b00c:	str.w	r5, [r8, #4]
    b010:	str	r2, [r1, #4]
    b012:	ldr	r2, [r3, #4]
    b014:	orr.w	r2, r2, #1
    b018:	adds	r1, #8
    b01a:	str	r2, [r3, #4]
    b01c:	mov	r0, r9
    b01e:	bl	f868 <_free_r>
    b022:	b.n	afd4 <_realloc_r+0x140>
    b024:	mov	r1, r2
    b026:	add	sp, #12
    b028:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b02c:	b.w	a71c <_malloc_r>
    b030:	tst.w	lr, #1
    b034:	bne.w	aeec <_realloc_r+0x58>
    b038:	ldr.w	r3, [r6, #-8]
    b03c:	rsb	sl, r3, r8
    b040:	ldr.w	r3, [sl, #4]
    b044:	bic.w	ip, r3, #3
    b048:	add.w	lr, r1, ip
    b04c:	cmp	lr, r2
    b04e:	blt.n	af68 <_realloc_r+0xd4>
    b050:	ldr	r3, [r0, #12]
    b052:	ldr	r2, [r0, #8]
    b054:	mov	r7, sl
    b056:	str	r3, [r2, #12]
    b058:	str	r2, [r3, #8]
    b05a:	ldr.w	r1, [r7, #8]!
    b05e:	ldr.w	r3, [sl, #12]
    b062:	str	r3, [r1, #12]
    b064:	subs	r2, r4, #4
    b066:	cmp	r2, #36	; 0x24
    b068:	str	r1, [r3, #8]
    b06a:	bhi.w	b1a0 <_realloc_r+0x30c>
    b06e:	cmp	r2, #19
    b070:	bls.n	b138 <_realloc_r+0x2a4>
    b072:	ldr	r3, [r6, #0]
    b074:	str.w	r3, [sl, #8]
    b078:	ldr	r3, [r6, #4]
    b07a:	str.w	r3, [sl, #12]
    b07e:	cmp	r2, #27
    b080:	bhi.w	b1c4 <_realloc_r+0x330>
    b084:	adds	r6, #8
    b086:	add.w	r3, sl, #16
    b08a:	b.n	b13a <_realloc_r+0x2a6>
    b08c:	bic.w	fp, r1, #3
    b090:	add	fp, r4
    b092:	add.w	r0, r5, #16
    b096:	cmp	fp, r0
    b098:	bge.n	b14e <_realloc_r+0x2ba>
    b09a:	tst.w	lr, #1
    b09e:	bne.w	aeec <_realloc_r+0x58>
    b0a2:	ldr.w	r1, [r6, #-8]
    b0a6:	rsb	sl, r1, r8
    b0aa:	ldr.w	r1, [sl, #4]
    b0ae:	bic.w	ip, r1, #3
    b0b2:	add	fp, ip
    b0b4:	cmp	r0, fp
    b0b6:	bgt.w	af68 <_realloc_r+0xd4>
    b0ba:	mov	r7, sl
    b0bc:	ldr.w	r1, [sl, #12]
    b0c0:	ldr.w	r0, [r7, #8]!
    b0c4:	subs	r2, r4, #4
    b0c6:	cmp	r2, #36	; 0x24
    b0c8:	str	r1, [r0, #12]
    b0ca:	str	r0, [r1, #8]
    b0cc:	bhi.w	b238 <_realloc_r+0x3a4>
    b0d0:	cmp	r2, #19
    b0d2:	bls.w	b220 <_realloc_r+0x38c>
    b0d6:	ldr	r1, [r6, #0]
    b0d8:	str.w	r1, [sl, #8]
    b0dc:	ldr	r1, [r6, #4]
    b0de:	str.w	r1, [sl, #12]
    b0e2:	cmp	r2, #27
    b0e4:	bhi.w	b246 <_realloc_r+0x3b2>
    b0e8:	adds	r6, #8
    b0ea:	add.w	r2, sl, #16
    b0ee:	ldr	r1, [r6, #0]
    b0f0:	str	r1, [r2, #0]
    b0f2:	ldr	r1, [r6, #4]
    b0f4:	str	r1, [r2, #4]
    b0f6:	ldr	r1, [r6, #8]
    b0f8:	str	r1, [r2, #8]
    b0fa:	add.w	r1, sl, r5
    b0fe:	rsb	r2, r5, fp
    b102:	orr.w	r2, r2, #1
    b106:	str	r1, [r3, #8]
    b108:	str	r2, [r1, #4]
    b10a:	ldr.w	r3, [sl, #4]
    b10e:	and.w	r3, r3, #1
    b112:	orrs	r5, r3
    b114:	mov	r0, r9
    b116:	str.w	r5, [sl, #4]
    b11a:	bl	ae90 <__malloc_unlock>
    b11e:	mov	r0, r7
    b120:	b.n	afdc <_realloc_r+0x148>
    b122:	ldr	r3, [r6, #0]
    b124:	str	r3, [r0, #0]
    b126:	ldr	r3, [r6, #4]
    b128:	str	r3, [r0, #4]
    b12a:	cmp	r2, #27
    b12c:	bhi.n	b17e <_realloc_r+0x2ea>
    b12e:	add.w	r3, r0, #8
    b132:	add.w	r2, r6, #8
    b136:	b.n	af1e <_realloc_r+0x8a>
    b138:	mov	r3, r7
    b13a:	ldr	r2, [r6, #0]
    b13c:	str	r2, [r3, #0]
    b13e:	ldr	r2, [r6, #4]
    b140:	str	r2, [r3, #4]
    b142:	ldr	r2, [r6, #8]
    b144:	str	r2, [r3, #8]
    b146:	mov	r6, r7
    b148:	mov	r4, lr
    b14a:	mov	r8, sl
    b14c:	b.n	afb6 <_realloc_r+0x122>
    b14e:	add.w	r1, r8, r5
    b152:	rsb	fp, r5, fp
    b156:	orr.w	r2, fp, #1
    b15a:	str	r1, [r3, #8]
    b15c:	str	r2, [r1, #4]
    b15e:	ldr.w	r3, [r6, #-4]
    b162:	and.w	r3, r3, #1
    b166:	orrs	r5, r3
    b168:	mov	r0, r9
    b16a:	str.w	r5, [r6, #-4]
    b16e:	bl	ae90 <__malloc_unlock>
    b172:	mov	r0, r6
    b174:	b.n	afdc <_realloc_r+0x148>
    b176:	mov	r1, r6
    b178:	bl	adc4 <memmove>
    b17c:	b.n	af2a <_realloc_r+0x96>
    b17e:	ldr	r3, [r6, #8]
    b180:	str	r3, [r0, #8]
    b182:	ldr	r3, [r6, #12]
    b184:	str	r3, [r0, #12]
    b186:	cmp	r2, #36	; 0x24
    b188:	beq.n	b1dc <_realloc_r+0x348>
    b18a:	add.w	r3, r0, #16
    b18e:	add.w	r2, r6, #16
    b192:	b.n	af1e <_realloc_r+0x8a>
    b194:	ldr.w	r3, [r0, #-4]
    b198:	bic.w	r3, r3, #3
    b19c:	add	r4, r3
    b19e:	b.n	afb6 <_realloc_r+0x122>
    b1a0:	mov	r1, r6
    b1a2:	mov	r0, r7
    b1a4:	mov	r4, lr
    b1a6:	mov	r8, sl
    b1a8:	bl	adc4 <memmove>
    b1ac:	mov	r6, r7
    b1ae:	b.n	afb6 <_realloc_r+0x122>
    b1b0:	mov	r2, r7
    b1b2:	b.n	afa4 <_realloc_r+0x110>
    b1b4:	mov	r1, r6
    b1b6:	mov	r0, r7
    b1b8:	mov	r4, r3
    b1ba:	mov	r8, sl
    b1bc:	bl	adc4 <memmove>
    b1c0:	mov	r6, r7
    b1c2:	b.n	afb6 <_realloc_r+0x122>
    b1c4:	ldr	r3, [r6, #8]
    b1c6:	str.w	r3, [sl, #16]
    b1ca:	ldr	r3, [r6, #12]
    b1cc:	str.w	r3, [sl, #20]
    b1d0:	cmp	r2, #36	; 0x24
    b1d2:	beq.n	b20c <_realloc_r+0x378>
    b1d4:	adds	r6, #16
    b1d6:	add.w	r3, sl, #24
    b1da:	b.n	b13a <_realloc_r+0x2a6>
    b1dc:	ldr	r3, [r6, #16]
    b1de:	str	r3, [r0, #16]
    b1e0:	ldr	r3, [r6, #20]
    b1e2:	str	r3, [r0, #20]
    b1e4:	add.w	r2, r6, #24
    b1e8:	add.w	r3, r0, #24
    b1ec:	b.n	af1e <_realloc_r+0x8a>
    b1ee:	nop
    b1f0:	.word	0x200019c8
    b1f4:	ldr	r1, [r6, #8]
    b1f6:	str.w	r1, [sl, #16]
    b1fa:	ldr	r1, [r6, #12]
    b1fc:	str.w	r1, [sl, #20]
    b200:	cmp	r2, #36	; 0x24
    b202:	beq.n	b224 <_realloc_r+0x390>
    b204:	adds	r6, #16
    b206:	add.w	r2, sl, #24
    b20a:	b.n	afa4 <_realloc_r+0x110>
    b20c:	ldr	r3, [r6, #16]
    b20e:	str.w	r3, [sl, #24]
    b212:	ldr	r3, [r6, #20]
    b214:	str.w	r3, [sl, #28]
    b218:	adds	r6, #24
    b21a:	add.w	r3, sl, #32
    b21e:	b.n	b13a <_realloc_r+0x2a6>
    b220:	mov	r2, r7
    b222:	b.n	b0ee <_realloc_r+0x25a>
    b224:	ldr	r2, [r6, #16]
    b226:	str.w	r2, [sl, #24]
    b22a:	ldr	r2, [r6, #20]
    b22c:	str.w	r2, [sl, #28]
    b230:	adds	r6, #24
    b232:	add.w	r2, sl, #32
    b236:	b.n	afa4 <_realloc_r+0x110>
    b238:	mov	r1, r6
    b23a:	mov	r0, r7
    b23c:	str	r3, [sp, #4]
    b23e:	bl	adc4 <memmove>
    b242:	ldr	r3, [sp, #4]
    b244:	b.n	b0fa <_realloc_r+0x266>
    b246:	ldr	r1, [r6, #8]
    b248:	str.w	r1, [sl, #16]
    b24c:	ldr	r1, [r6, #12]
    b24e:	str.w	r1, [sl, #20]
    b252:	cmp	r2, #36	; 0x24
    b254:	beq.n	b25e <_realloc_r+0x3ca>
    b256:	adds	r6, #16
    b258:	add.w	r2, sl, #24
    b25c:	b.n	b0ee <_realloc_r+0x25a>
    b25e:	ldr	r2, [r6, #16]
    b260:	str.w	r2, [sl, #24]
    b264:	ldr	r2, [r6, #20]
    b266:	str.w	r2, [sl, #28]
    b26a:	adds	r6, #24
    b26c:	add.w	r2, sl, #32
    b270:	b.n	b0ee <_realloc_r+0x25a>
    b272:	nop

0000b274 <_sbrk_r>:
    b274:	push	{r3, r4, r5, lr}
    b276:	ldr	r4, [pc, #28]	; (b294 <_sbrk_r+0x20>)
    b278:	movs	r3, #0
    b27a:	mov	r5, r0
    b27c:	mov	r0, r1
    b27e:	str	r3, [r4, #0]
    b280:	bl	9b84 <_sbrk>
    b284:	adds	r3, r0, #1
    b286:	beq.n	b28a <_sbrk_r+0x16>
    b288:	pop	{r3, r4, r5, pc}
    b28a:	ldr	r3, [r4, #0]
    b28c:	cmp	r3, #0
    b28e:	beq.n	b288 <_sbrk_r+0x14>
    b290:	str	r3, [r5, #0]
    b292:	pop	{r3, r4, r5, pc}
    b294:	.word	0x200376b0

0000b298 <sprintf>:
    b298:	push	{r1, r2, r3}
    b29a:	push	{r4, r5, r6, r7, lr}
    b29c:	sub	sp, #112	; 0x70
    b29e:	add	r3, sp, #132	; 0x84
    b2a0:	ldr	r1, [pc, #60]	; (b2e0 <sprintf+0x48>)
    b2a2:	ldr.w	r2, [r3], #4
    b2a6:	str	r3, [sp, #4]
    b2a8:	mov	r5, r0
    b2aa:	mvn.w	r4, #2147483648	; 0x80000000
    b2ae:	ldr	r0, [r1, #0]
    b2b0:	str	r5, [sp, #8]
    b2b2:	mov.w	r7, #520	; 0x208
    b2b6:	movw	r6, #65535	; 0xffff
    b2ba:	add	r1, sp, #8
    b2bc:	str	r5, [sp, #24]
    b2be:	strh.w	r7, [sp, #20]
    b2c2:	str	r4, [sp, #16]
    b2c4:	str	r4, [sp, #28]
    b2c6:	strh.w	r6, [sp, #22]
    b2ca:	bl	c4e0 <_svfprintf_r>
    b2ce:	ldr	r3, [sp, #8]
    b2d0:	movs	r2, #0
    b2d2:	strb	r2, [r3, #0]
    b2d4:	add	sp, #112	; 0x70
    b2d6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b2da:	add	sp, #12
    b2dc:	bx	lr
    b2de:	nop
    b2e0:	.word	0x20001dd8

0000b2e4 <sscanf>:
    b2e4:	push	{r1, r2, r3}
    b2e6:	push	{r4, r5, r6, r7, lr}
    b2e8:	sub	sp, #112	; 0x70
    b2ea:	add	r4, sp, #132	; 0x84
    b2ec:	mov.w	r2, #516	; 0x204
    b2f0:	ldr.w	r6, [r4], #4
    b2f4:	strh.w	r2, [sp, #20]
    b2f8:	str	r0, [sp, #8]
    b2fa:	str	r0, [sp, #24]
    b2fc:	bl	b340 <strlen>
    b300:	ldr	r3, [pc, #48]	; (b334 <sscanf+0x50>)
    b302:	str	r4, [sp, #4]
    b304:	mov	r5, r0
    b306:	mov	r2, r6
    b308:	ldr	r7, [pc, #44]	; (b338 <sscanf+0x54>)
    b30a:	ldr	r0, [r3, #0]
    b30c:	str	r5, [sp, #12]
    b30e:	mov	r3, r4
    b310:	movw	r6, #65535	; 0xffff
    b314:	movs	r4, #0
    b316:	add	r1, sp, #8
    b318:	str	r5, [sp, #28]
    b31a:	str	r7, [sp, #40]	; 0x28
    b31c:	str	r4, [sp, #56]	; 0x38
    b31e:	str	r4, [sp, #76]	; 0x4c
    b320:	strh.w	r6, [sp, #22]
    b324:	bl	da50 <__ssvfscanf_r>
    b328:	add	sp, #112	; 0x70
    b32a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b32e:	add	sp, #12
    b330:	bx	lr
    b332:	nop
    b334:	.word	0x20001dd8
    b338:	.word	0x0000b33d

0000b33c <__seofread>:
    b33c:	movs	r0, #0
    b33e:	bx	lr

0000b340 <strlen>:
    b340:	pld	[r0]
    b344:	strd	r4, r5, [sp, #-8]!
    b348:	bic.w	r1, r0, #7
    b34c:	mvn.w	ip, #0
    b350:	ands.w	r4, r0, #7
    b354:	pld	[r1, #32]
    b358:	bne.w	b3ee <strlen+0xae>
    b35c:	mov.w	r4, #0
    b360:	mvn.w	r0, #7
    b364:	ldrd	r2, r3, [r1]
    b368:	pld	[r1, #64]	; 0x40
    b36c:	add.w	r0, r0, #8
    b370:	uadd8	r2, r2, ip
    b374:	sel	r2, r4, ip
    b378:	uadd8	r3, r3, ip
    b37c:	sel	r3, r2, ip
    b380:	cbnz	r3, b3d6 <strlen+0x96>
    b382:	ldrd	r2, r3, [r1, #8]
    b386:	uadd8	r2, r2, ip
    b38a:	add.w	r0, r0, #8
    b38e:	sel	r2, r4, ip
    b392:	uadd8	r3, r3, ip
    b396:	sel	r3, r2, ip
    b39a:	cbnz	r3, b3d6 <strlen+0x96>
    b39c:	ldrd	r2, r3, [r1, #16]
    b3a0:	uadd8	r2, r2, ip
    b3a4:	add.w	r0, r0, #8
    b3a8:	sel	r2, r4, ip
    b3ac:	uadd8	r3, r3, ip
    b3b0:	sel	r3, r2, ip
    b3b4:	cbnz	r3, b3d6 <strlen+0x96>
    b3b6:	ldrd	r2, r3, [r1, #24]
    b3ba:	add.w	r1, r1, #32
    b3be:	uadd8	r2, r2, ip
    b3c2:	add.w	r0, r0, #8
    b3c6:	sel	r2, r4, ip
    b3ca:	uadd8	r3, r3, ip
    b3ce:	sel	r3, r2, ip
    b3d2:	cmp	r3, #0
    b3d4:	beq.n	b364 <strlen+0x24>
    b3d6:	cmp	r2, #0
    b3d8:	itt	eq
    b3da:	addeq	r0, #4
    b3dc:	moveq	r2, r3
    b3de:	rev	r2, r2
    b3e0:	clz	r2, r2
    b3e4:	ldrd	r4, r5, [sp], #8
    b3e8:	add.w	r0, r0, r2, lsr #3
    b3ec:	bx	lr
    b3ee:	ldrd	r2, r3, [r1]
    b3f2:	and.w	r5, r4, #3
    b3f6:	rsb	r0, r4, #0
    b3fa:	mov.w	r5, r5, lsl #3
    b3fe:	tst.w	r4, #4
    b402:	pld	[r1, #64]	; 0x40
    b406:	lsl.w	r5, ip, r5
    b40a:	orn	r2, r2, r5
    b40e:	itt	ne
    b410:	ornne	r3, r3, r5
    b414:	movne	r2, ip
    b416:	mov.w	r4, #0
    b41a:	b.n	b370 <strlen+0x30>

0000b41c <strncmp>:
    b41c:	cmp	r2, #0
    b41e:	beq.n	b4a4 <strncmp+0x88>
    b420:	orr.w	r3, r0, r1
    b424:	ands.w	r3, r3, #3
    b428:	push	{r4, r5, r6, r7}
    b42a:	bne.n	b478 <strncmp+0x5c>
    b42c:	cmp	r2, #3
    b42e:	bls.n	b478 <strncmp+0x5c>
    b430:	ldr	r4, [r0, #0]
    b432:	ldr	r5, [r1, #0]
    b434:	cmp	r4, r5
    b436:	bne.n	b478 <strncmp+0x5c>
    b438:	subs	r2, #4
    b43a:	beq.n	b4a8 <strncmp+0x8c>
    b43c:	sub.w	r5, r4, #16843009	; 0x1010101
    b440:	bic.w	r4, r5, r4
    b444:	tst.w	r4, #2155905152	; 0x80808080
    b448:	bne.n	b4ae <strncmp+0x92>
    b44a:	adds	r7, r0, #4
    b44c:	adds	r5, r1, #4
    b44e:	b.n	b46c <strncmp+0x50>
    b450:	ldr.w	r3, [r7], #4
    b454:	ldr	r6, [r1, #0]
    b456:	sub.w	r4, r3, #16843009	; 0x1010101
    b45a:	cmp	r3, r6
    b45c:	bic.w	r4, r4, r3
    b460:	bne.n	b478 <strncmp+0x5c>
    b462:	subs	r2, #4
    b464:	beq.n	b4a8 <strncmp+0x8c>
    b466:	tst.w	r4, #2155905152	; 0x80808080
    b46a:	bne.n	b4b4 <strncmp+0x98>
    b46c:	cmp	r2, #3
    b46e:	mov	r1, r5
    b470:	mov	r0, r7
    b472:	add.w	r5, r5, #4
    b476:	bhi.n	b450 <strncmp+0x34>
    b478:	ldrb	r3, [r0, #0]
    b47a:	ldrb	r4, [r1, #0]
    b47c:	cmp	r4, r3
    b47e:	add.w	r2, r2, #4294967295
    b482:	bne.n	b49e <strncmp+0x82>
    b484:	cbz	r2, b4a8 <strncmp+0x8c>
    b486:	cbnz	r4, b48e <strncmp+0x72>
    b488:	b.n	b4b8 <strncmp+0x9c>
    b48a:	cbz	r2, b4a8 <strncmp+0x8c>
    b48c:	cbz	r3, b4ae <strncmp+0x92>
    b48e:	ldrb.w	r3, [r0, #1]!
    b492:	ldrb.w	r4, [r1, #1]!
    b496:	cmp	r3, r4
    b498:	add.w	r2, r2, #4294967295
    b49c:	beq.n	b48a <strncmp+0x6e>
    b49e:	subs	r0, r3, r4
    b4a0:	pop	{r4, r5, r6, r7}
    b4a2:	bx	lr
    b4a4:	mov	r0, r2
    b4a6:	bx	lr
    b4a8:	mov	r0, r2
    b4aa:	pop	{r4, r5, r6, r7}
    b4ac:	bx	lr
    b4ae:	mov	r0, r3
    b4b0:	pop	{r4, r5, r6, r7}
    b4b2:	bx	lr
    b4b4:	movs	r0, #0
    b4b6:	b.n	b4a0 <strncmp+0x84>
    b4b8:	mov	r0, r4
    b4ba:	b.n	b4a0 <strncmp+0x84>

0000b4bc <sulp>:
    b4bc:	push	{r4, r5, r6, lr}
    b4be:	mov	r4, r0
    b4c0:	mov	r5, r1
    b4c2:	mov	r6, r2
    b4c4:	vmov	d0, r4, r5
    b4c8:	bl	10838 <__ulp>
    b4cc:	cbz	r6, b4ee <sulp+0x32>
    b4ce:	ubfx	r3, r5, #20, #11
    b4d2:	rsb	r3, r3, #107	; 0x6b
    b4d6:	cmp	r3, #0
    b4d8:	ble.n	b4ee <sulp+0x32>
    b4da:	lsls	r3, r3, #20
    b4dc:	add.w	r1, r3, #1069547520	; 0x3fc00000
    b4e0:	movs	r0, #0
    b4e2:	add.w	r1, r1, #3145728	; 0x300000
    b4e6:	vmov	d7, r0, r1
    b4ea:	vmul.f64	d0, d0, d7
    b4ee:	pop	{r4, r5, r6, pc}

0000b4f0 <_strtod_l>:
    b4f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4f4:	vpush	{d8-d14}
    b4f8:	mov	r6, r3
    b4fa:	sub	sp, #100	; 0x64
    b4fc:	movs	r3, #0
    b4fe:	mov	r9, r0
    b500:	mov	r0, r6
    b502:	mov	r8, r1
    b504:	mov	sl, r2
    b506:	str	r3, [sp, #80]	; 0x50
    b508:	bl	101bc <__localeconv_l>
    b50c:	movs	r4, #0
    b50e:	movs	r3, #0
    b510:	mov	fp, r0
    b512:	ldr	r0, [r0, #0]
    b514:	strd	r3, r4, [sp, #24]
    b518:	bl	b340 <strlen>
    b51c:	str.w	r8, [sp, #76]	; 0x4c
    b520:	str	r0, [sp, #16]
    b522:	mov	r3, r8
    b524:	mov	r5, r3
    b526:	ldrb.w	r4, [r3], #1
    b52a:	cmp	r4, #45	; 0x2d
    b52c:	bhi.w	b766 <_strtod_l+0x276>
    b530:	tbh	[pc, r4, lsl #1]
    b534:	.word	0x0119002e
    b538:	.word	0x01190119
    b53c:	.word	0x01190119
    b540:	.word	0x01190119
    b544:	.word	0x00ef0119
    b548:	.word	0x00ef00ef
    b54c:	.word	0x00ef00ef
    b550:	.word	0x01190119
    b554:	.word	0x01190119
    b558:	.word	0x01190119
    b55c:	.word	0x01190119
    b560:	.word	0x01190119
    b564:	.word	0x01190119
    b568:	.word	0x01190119
    b56c:	.word	0x01190119
    b570:	.word	0x01190119
    b574:	.word	0x011900ef
    b578:	.word	0x01190119
    b57c:	.word	0x01190119
    b580:	.word	0x01190119
    b584:	.word	0x01190119
    b588:	.word	0x00490119
    b58c:	.word	0x00ec0119
    b590:	vldr	d7, [pc, #700]	; b850 <_strtod_l+0x360>
    b594:	vstr	d7, [sp, #16]
    b598:	cmp.w	sl, #0
    b59c:	beq.n	b5b8 <_strtod_l+0xc8>
    b59e:	movs	r2, #0
    b5a0:	mov	r3, r8
    b5a2:	str	r2, [sp, #32]
    b5a4:	str.w	r3, [sl]
    b5a8:	ldr	r3, [sp, #32]
    b5aa:	cbz	r3, b5b8 <_strtod_l+0xc8>
    b5ac:	vldr	d7, [sp, #16]
    b5b0:	vneg.f64	d7, d7
    b5b4:	vstr	d7, [sp, #16]
    b5b8:	vldr	d0, [sp, #16]
    b5bc:	add	sp, #100	; 0x64
    b5be:	vpop	{d8-d14}
    b5c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5c6:	movs	r3, #0
    b5c8:	str	r3, [sp, #32]
    b5ca:	adds	r3, r5, #1
    b5cc:	str	r3, [sp, #76]	; 0x4c
    b5ce:	ldrb	r4, [r5, #1]
    b5d0:	cmp	r4, #0
    b5d2:	beq.n	b590 <_strtod_l+0xa0>
    b5d4:	cmp	r4, #48	; 0x30
    b5d6:	mov	r5, r3
    b5d8:	beq.w	b770 <_strtod_l+0x280>
    b5dc:	movs	r3, #0
    b5de:	str	r5, [sp, #40]	; 0x28
    b5e0:	str	r3, [sp, #36]	; 0x24
    b5e2:	sub.w	r3, r4, #48	; 0x30
    b5e6:	cmp	r3, #9
    b5e8:	bhi.w	bd96 <_strtod_l+0x8a6>
    b5ec:	movs	r7, #0
    b5ee:	mov	r0, r5
    b5f0:	mov	r6, r7
    b5f2:	mov	r5, r7
    b5f4:	cmp	r5, #8
    b5f6:	it	gt
    b5f8:	addgt.w	r7, r7, r7, lsl #2
    b5fc:	add.w	r3, r6, r6, lsl #2
    b600:	add.w	r0, r0, #1
    b604:	add.w	r3, r4, r3, lsl #1
    b608:	str	r0, [sp, #76]	; 0x4c
    b60a:	itt	gt
    b60c:	addgt.w	r4, r4, r7, lsl #1
    b610:	subgt.w	r7, r4, #48	; 0x30
    b614:	ldrb	r4, [r0, #0]
    b616:	it	le
    b618:	suble.w	r6, r3, #48	; 0x30
    b61c:	sub.w	r3, r4, #48	; 0x30
    b620:	cmp	r3, #9
    b622:	add.w	r5, r5, #1
    b626:	bls.n	b5f4 <_strtod_l+0x104>
    b628:	ldr.w	r1, [fp]
    b62c:	ldr	r2, [sp, #16]
    b62e:	bl	b41c <strncmp>
    b632:	cmp	r0, #0
    b634:	beq.n	b716 <_strtod_l+0x226>
    b636:	movs	r0, #0
    b638:	mov	ip, r0
    b63a:	mov	fp, r0
    b63c:	mov	r2, r5
    b63e:	cmp	r4, #101	; 0x65
    b640:	beq.w	b868 <_strtod_l+0x378>
    b644:	cmp	r4, #69	; 0x45
    b646:	beq.w	b868 <_strtod_l+0x378>
    b64a:	movs	r3, #0
    b64c:	cmp	r5, #0
    b64e:	bne.w	b7a6 <_strtod_l+0x2b6>
    b652:	cmp	r0, #0
    b654:	bne.w	b792 <_strtod_l+0x2a2>
    b658:	ldr	r3, [sp, #36]	; 0x24
    b65a:	cmp	r3, #0
    b65c:	bne.w	b792 <_strtod_l+0x2a2>
    b660:	cmp.w	fp, #0
    b664:	bne.n	b590 <_strtod_l+0xa0>
    b666:	subs	r4, #73	; 0x49
    b668:	cmp	r4, #37	; 0x25
    b66a:	bhi.n	b590 <_strtod_l+0xa0>
    b66c:	add	r3, pc, #4	; (adr r3, b674 <_strtod_l+0x184>)
    b66e:	ldr.w	pc, [r3, r4, lsl #2]
    b672:	nop
    b674:	.word	0x0000b81b
    b678:	.word	0x0000b591
    b67c:	.word	0x0000b591
    b680:	.word	0x0000b591
    b684:	.word	0x0000b591
    b688:	.word	0x0000bd2f
    b68c:	.word	0x0000b591
    b690:	.word	0x0000b591
    b694:	.word	0x0000b591
    b698:	.word	0x0000b591
    b69c:	.word	0x0000b591
    b6a0:	.word	0x0000b591
    b6a4:	.word	0x0000b591
    b6a8:	.word	0x0000b591
    b6ac:	.word	0x0000b591
    b6b0:	.word	0x0000b591
    b6b4:	.word	0x0000b591
    b6b8:	.word	0x0000b591
    b6bc:	.word	0x0000b591
    b6c0:	.word	0x0000b591
    b6c4:	.word	0x0000b591
    b6c8:	.word	0x0000b591
    b6cc:	.word	0x0000b591
    b6d0:	.word	0x0000b591
    b6d4:	.word	0x0000b591
    b6d8:	.word	0x0000b591
    b6dc:	.word	0x0000b591
    b6e0:	.word	0x0000b591
    b6e4:	.word	0x0000b591
    b6e8:	.word	0x0000b591
    b6ec:	.word	0x0000b591
    b6f0:	.word	0x0000b591
    b6f4:	.word	0x0000b81b
    b6f8:	.word	0x0000b591
    b6fc:	.word	0x0000b591
    b700:	.word	0x0000b591
    b704:	.word	0x0000b591
    b708:	.word	0x0000bd2f
    b70c:	movs	r3, #1
    b70e:	str	r3, [sp, #32]
    b710:	b.n	b5ca <_strtod_l+0xda>
    b712:	str	r3, [sp, #76]	; 0x4c
    b714:	b.n	b524 <_strtod_l+0x34>
    b716:	ldr	r3, [sp, #76]	; 0x4c
    b718:	ldr	r1, [sp, #16]
    b71a:	adds	r2, r3, r1
    b71c:	str	r2, [sp, #76]	; 0x4c
    b71e:	ldrb	r4, [r3, r1]
    b720:	mov	ip, r0
    b722:	mov	r2, r5
    b724:	sub.w	r3, r4, #48	; 0x30
    b728:	cmp	r3, #9
    b72a:	bhi.w	bbb6 <_strtod_l+0x6c6>
    b72e:	adds	r1, r0, #1
    b730:	mov	r4, r3
    b732:	cmp	r3, #0
    b734:	beq.w	c346 <_strtod_l+0xe56>
    b738:	cmp	r1, #1
    b73a:	add	ip, r1
    b73c:	it	ne
    b73e:	addne	r0, r0, r5
    b740:	bne.n	b74e <_strtod_l+0x25e>
    b742:	b.w	c32a <_strtod_l+0xe3a>
    b746:	lsls	r6, r1, #1
    b748:	cmp	r5, r0
    b74a:	beq.w	bfd2 <_strtod_l+0xae2>
    b74e:	adds	r5, #1
    b750:	subs	r1, r5, #1
    b752:	cmp	r1, #8
    b754:	add.w	r1, r6, r6, lsl #2
    b758:	ble.n	b746 <_strtod_l+0x256>
    b75a:	cmp	r5, #16
    b75c:	itt	le
    b75e:	addle.w	r7, r7, r7, lsl #2
    b762:	lslle	r7, r7, #1
    b764:	b.n	b748 <_strtod_l+0x258>
    b766:	movs	r3, #0
    b768:	cmp	r4, #48	; 0x30
    b76a:	str	r3, [sp, #32]
    b76c:	bne.w	b5dc <_strtod_l+0xec>
    b770:	ldrb	r3, [r5, #1]
    b772:	cmp	r3, #88	; 0x58
    b774:	beq.w	bd5e <_strtod_l+0x86e>
    b778:	cmp	r3, #120	; 0x78
    b77a:	beq.w	bd5e <_strtod_l+0x86e>
    b77e:	adds	r5, #1
    b780:	str	r5, [sp, #76]	; 0x4c
    b782:	ldrb	r4, [r5, #0]
    b784:	cmp	r4, #48	; 0x30
    b786:	beq.n	b77e <_strtod_l+0x28e>
    b788:	cbz	r4, b792 <_strtod_l+0x2a2>
    b78a:	movs	r3, #1
    b78c:	str	r5, [sp, #40]	; 0x28
    b78e:	str	r3, [sp, #36]	; 0x24
    b790:	b.n	b5e2 <_strtod_l+0xf2>
    b792:	vldr	d7, [pc, #188]	; b850 <_strtod_l+0x360>
    b796:	vstr	d7, [sp, #16]
    b79a:	cmp.w	sl, #0
    b79e:	beq.w	b5a8 <_strtod_l+0xb8>
    b7a2:	ldr	r3, [sp, #76]	; 0x4c
    b7a4:	b.n	b5a4 <_strtod_l+0xb4>
    b7a6:	vmov	s15, r6
    b7aa:	vcvt.f64.u32	d7, s15
    b7ae:	cmp	r5, #16
    b7b0:	vstr	d7, [sp, #16]
    b7b4:	rsb	r4, ip, r3
    b7b8:	ldrd	fp, ip, [sp, #16]
    b7bc:	mov	r1, r5
    b7be:	it	ge
    b7c0:	movge	r1, #16
    b7c2:	cmp	r2, #0
    b7c4:	it	eq
    b7c6:	moveq	r2, r5
    b7c8:	cmp	r1, #9
    b7ca:	strd	fp, ip, [sp, #24]
    b7ce:	ble.n	b7ee <_strtod_l+0x2fe>
    b7d0:	ldr	r3, [pc, #132]	; (b858 <_strtod_l+0x368>)
    b7d2:	add.w	r3, r3, r1, lsl #3
    b7d6:	vldr	d6, [r3, #-72]	; 0xffffffb8
    b7da:	vldr	d5, [sp, #16]
    b7de:	vmov	s15, r7
    b7e2:	vcvt.f64.u32	d7, s15
    b7e6:	vfma.f64	d7, d5, d6
    b7ea:	vstr	d7, [sp, #24]
    b7ee:	cmp	r5, #15
    b7f0:	bgt.w	b90a <_strtod_l+0x41a>
    b7f4:	cmp	r4, #0
    b7f6:	beq.n	b846 <_strtod_l+0x356>
    b7f8:	ble.w	c0fe <_strtod_l+0xc0e>
    b7fc:	cmp	r4, #22
    b7fe:	bgt.w	c004 <_strtod_l+0xb14>
    b802:	ldr	r3, [pc, #84]	; (b858 <_strtod_l+0x368>)
    b804:	add.w	r4, r3, r4, lsl #3
    b808:	vldr	d7, [r4]
    b80c:	vldr	d6, [sp, #24]
    b810:	vmul.f64	d7, d7, d6
    b814:	vstr	d7, [sp, #16]
    b818:	b.n	b79a <_strtod_l+0x2aa>
    b81a:	add	r0, sp, #76	; 0x4c
    b81c:	ldr	r1, [pc, #60]	; (b85c <_strtod_l+0x36c>)
    b81e:	bl	fff0 <__match>
    b822:	cmp	r0, #0
    b824:	beq.w	b590 <_strtod_l+0xa0>
    b828:	ldr	r3, [sp, #76]	; 0x4c
    b82a:	ldr	r1, [pc, #52]	; (b860 <_strtod_l+0x370>)
    b82c:	subs	r3, #1
    b82e:	add	r0, sp, #76	; 0x4c
    b830:	str	r3, [sp, #76]	; 0x4c
    b832:	bl	fff0 <__match>
    b836:	cbnz	r0, b83e <_strtod_l+0x34e>
    b838:	ldr	r3, [sp, #76]	; 0x4c
    b83a:	adds	r3, #1
    b83c:	str	r3, [sp, #76]	; 0x4c
    b83e:	ldr	r3, [pc, #36]	; (b864 <_strtod_l+0x374>)
    b840:	str	r3, [sp, #28]
    b842:	movs	r3, #0
    b844:	str	r3, [sp, #24]
    b846:	vldr	d7, [sp, #24]
    b84a:	vstr	d7, [sp, #16]
    b84e:	b.n	b79a <_strtod_l+0x2aa>
	...
    b858:	.word	0x200002a8
    b85c:	.word	0x20000b50
    b860:	.word	0x20000b54
    b864:	.word	0x7ff00000
    b868:	cmp	r5, #0
    b86a:	beq.w	bba0 <_strtod_l+0x6b0>
    b86e:	ldr.w	r8, [sp, #76]	; 0x4c
    b872:	add.w	r3, r8, #1
    b876:	str	r3, [sp, #76]	; 0x4c
    b878:	ldrb.w	r4, [r8, #1]
    b87c:	cmp	r4, #43	; 0x2b
    b87e:	beq.w	bd58 <_strtod_l+0x868>
    b882:	cmp	r4, #45	; 0x2d
    b884:	beq.w	bbf2 <_strtod_l+0x702>
    b888:	movs	r3, #0
    b88a:	str	r3, [sp, #16]
    b88c:	sub.w	r3, r4, #48	; 0x30
    b890:	cmp	r3, #9
    b892:	bhi.w	bd50 <_strtod_l+0x860>
    b896:	cmp	r4, #48	; 0x30
    b898:	bne.n	b8a6 <_strtod_l+0x3b6>
    b89a:	ldr	r3, [sp, #76]	; 0x4c
    b89c:	adds	r3, #1
    b89e:	str	r3, [sp, #76]	; 0x4c
    b8a0:	ldrb	r4, [r3, #0]
    b8a2:	cmp	r4, #48	; 0x30
    b8a4:	beq.n	b89c <_strtod_l+0x3ac>
    b8a6:	sub.w	r3, r4, #49	; 0x31
    b8aa:	cmp	r3, #8
    b8ac:	bhi.w	b64a <_strtod_l+0x15a>
    b8b0:	ldr	r3, [sp, #76]	; 0x4c
    b8b2:	str	r3, [sp, #48]	; 0x30
    b8b4:	adds	r1, r3, #1
    b8b6:	subs	r4, #48	; 0x30
    b8b8:	str	r1, [sp, #76]	; 0x4c
    b8ba:	str	r4, [sp, #44]	; 0x2c
    b8bc:	ldrb	r4, [r3, #1]
    b8be:	sub.w	lr, r4, #48	; 0x30
    b8c2:	cmp.w	lr, #9
    b8c6:	bhi.n	b8e8 <_strtod_l+0x3f8>
    b8c8:	ldr	r3, [sp, #44]	; 0x2c
    b8ca:	adds	r1, #1
    b8cc:	str	r1, [sp, #76]	; 0x4c
    b8ce:	add.w	r3, r3, r3, lsl #2
    b8d2:	add.w	r3, r4, r3, lsl #1
    b8d6:	ldrb	r4, [r1, #0]
    b8d8:	sub.w	lr, r4, #48	; 0x30
    b8dc:	cmp.w	lr, #9
    b8e0:	sub.w	r3, r3, #48	; 0x30
    b8e4:	bls.n	b8ca <_strtod_l+0x3da>
    b8e6:	str	r3, [sp, #44]	; 0x2c
    b8e8:	ldr	r3, [sp, #48]	; 0x30
    b8ea:	subs	r1, r1, r3
    b8ec:	cmp	r1, #8
    b8ee:	bgt.w	bff4 <_strtod_l+0xb04>
    b8f2:	ldr	r3, [sp, #44]	; 0x2c
    b8f4:	movw	r1, #19999	; 0x4e1f
    b8f8:	cmp	r3, r1
    b8fa:	it	ge
    b8fc:	movge	r3, r1
    b8fe:	ldr	r1, [sp, #16]
    b900:	cmp	r1, #0
    b902:	beq.w	b64c <_strtod_l+0x15c>
    b906:	negs	r3, r3
    b908:	b.n	b64c <_strtod_l+0x15c>
    b90a:	subs	r3, r5, r1
    b90c:	add	r3, r4
    b90e:	cmp	r3, #0
    b910:	ble.w	bf18 <_strtod_l+0xa28>
    b914:	ands.w	r0, r3, #15
    b918:	beq.n	b930 <_strtod_l+0x440>
    b91a:	ldr	r1, [pc, #780]	; (bc28 <_strtod_l+0x738>)
    b91c:	add.w	r1, r1, r0, lsl #3
    b920:	vldr	d6, [sp, #24]
    b924:	vldr	d7, [r1]
    b928:	vmul.f64	d7, d7, d6
    b92c:	vstr	d7, [sp, #24]
    b930:	bics.w	r3, r3, #15
    b934:	bne.w	bc44 <_strtod_l+0x754>
    b938:	movs	r3, #0
    b93a:	str	r3, [sp, #36]	; 0x24
    b93c:	str	r6, [sp, #0]
    b93e:	mov	r3, r5
    b940:	ldr	r1, [sp, #40]	; 0x28
    b942:	mov	r0, r9
    b944:	bl	10318 <__s2b>
    b948:	mov	fp, r0
    b94a:	cmp	r0, #0
    b94c:	beq.w	be3c <_strtod_l+0x94c>
    b950:	cmp	r4, #0
    b952:	mov.w	r8, #0
    b956:	rsb	r3, r4, #0
    b95a:	vldr	d10, [pc, #684]	; bc08 <_strtod_l+0x718>
    b95e:	it	ge
    b960:	movge	r3, r8
    b962:	vldr	d9, [pc, #684]	; bc10 <_strtod_l+0x720>
    b966:	vldr	d11, [pc, #688]	; bc18 <_strtod_l+0x728>
    b96a:	vldr	d8, [pc, #692]	; bc20 <_strtod_l+0x730>
    b96e:	str	r3, [sp, #44]	; 0x2c
    b970:	bic.w	r3, r4, r4, asr #31
    b974:	str	r3, [sp, #40]	; 0x28
    b976:	mov	r4, r8
    b978:	str.w	sl, [sp, #60]	; 0x3c
    b97c:	ldr.w	r1, [fp, #4]
    b980:	mov	r0, r9
    b982:	bl	10238 <_Balloc>
    b986:	mov	r6, r0
    b988:	cmp	r0, #0
    b98a:	beq.w	beb8 <_strtod_l+0x9c8>
    b98e:	ldr.w	r2, [fp, #16]
    b992:	vldr	d7, [sp, #24]
    b996:	adds	r2, #2
    b998:	lsls	r2, r2, #2
    b99a:	add.w	r1, fp, #12
    b99e:	adds	r0, #12
    b9a0:	vstr	d7, [sp, #16]
    b9a4:	bl	87a4 <memcpy>
    b9a8:	vldr	d0, [sp, #16]
    b9ac:	add	r2, sp, #88	; 0x58
    b9ae:	add	r1, sp, #84	; 0x54
    b9b0:	mov	r0, r9
    b9b2:	bl	1095c <__d2b>
    b9b6:	str	r0, [sp, #80]	; 0x50
    b9b8:	cmp	r0, #0
    b9ba:	beq.w	c120 <_strtod_l+0xc30>
    b9be:	movs	r1, #1
    b9c0:	mov	r0, r9
    b9c2:	bl	1044c <__i2b>
    b9c6:	mov	r4, r0
    b9c8:	cmp	r0, #0
    b9ca:	beq.w	beb8 <_strtod_l+0x9c8>
    b9ce:	ldr	r2, [sp, #84]	; 0x54
    b9d0:	cmp	r2, #0
    b9d2:	blt.w	bbae <_strtod_l+0x6be>
    b9d6:	ldr	r3, [sp, #44]	; 0x2c
    b9d8:	ldr	r5, [sp, #40]	; 0x28
    b9da:	adds	r7, r3, r2
    b9dc:	ldr	r1, [sp, #36]	; 0x24
    b9de:	ldr	r3, [sp, #88]	; 0x58
    b9e0:	subs	r2, r2, r1
    b9e2:	add	r2, r3
    b9e4:	ldr	r1, [pc, #580]	; (bc2c <_strtod_l+0x73c>)
    b9e6:	subs	r2, #1
    b9e8:	cmp	r2, r1
    b9ea:	rsb	r3, r3, #54	; 0x36
    b9ee:	bge.w	bb7c <_strtod_l+0x68c>
    b9f2:	subs	r1, r1, r2
    b9f4:	cmp	r1, #31
    b9f6:	sub.w	r3, r3, r1
    b9fa:	bgt.w	bbbc <_strtod_l+0x6cc>
    b9fe:	movs	r2, #1
    ba00:	lsls	r2, r1
    ba02:	str	r2, [sp, #52]	; 0x34
    ba04:	movs	r2, #0
    ba06:	str	r2, [sp, #56]	; 0x38
    ba08:	add.w	sl, r7, r3
    ba0c:	add	r5, r3
    ba0e:	ldr	r3, [sp, #36]	; 0x24
    ba10:	cmp	r7, sl
    ba12:	mov	r2, r7
    ba14:	add	r5, r3
    ba16:	it	ge
    ba18:	movge	r2, sl
    ba1a:	cmp	r2, r5
    ba1c:	it	ge
    ba1e:	movge	r2, r5
    ba20:	cmp	r2, #0
    ba22:	ble.n	ba2c <_strtod_l+0x53c>
    ba24:	rsb	sl, r2, sl
    ba28:	subs	r5, r5, r2
    ba2a:	subs	r7, r7, r2
    ba2c:	ldr	r3, [sp, #44]	; 0x2c
    ba2e:	cbz	r3, ba60 <_strtod_l+0x570>
    ba30:	mov	r1, r4
    ba32:	mov	r2, r3
    ba34:	mov	r0, r9
    ba36:	bl	10590 <__pow5mult>
    ba3a:	mov	r4, r0
    ba3c:	cmp	r0, #0
    ba3e:	beq.w	beb8 <_strtod_l+0x9c8>
    ba42:	mov	r1, r0
    ba44:	ldr	r2, [sp, #80]	; 0x50
    ba46:	mov	r0, r9
    ba48:	bl	10460 <__multiply>
    ba4c:	cmp	r0, #0
    ba4e:	beq.w	beb8 <_strtod_l+0x9c8>
    ba52:	str	r0, [sp, #48]	; 0x30
    ba54:	ldr	r1, [sp, #80]	; 0x50
    ba56:	mov	r0, r9
    ba58:	bl	10284 <_Bfree>
    ba5c:	ldr	r2, [sp, #48]	; 0x30
    ba5e:	str	r2, [sp, #80]	; 0x50
    ba60:	cmp.w	sl, #0
    ba64:	ble.n	ba78 <_strtod_l+0x588>
    ba66:	mov	r2, sl
    ba68:	ldr	r1, [sp, #80]	; 0x50
    ba6a:	mov	r0, r9
    ba6c:	bl	10630 <__lshift>
    ba70:	str	r0, [sp, #80]	; 0x50
    ba72:	cmp	r0, #0
    ba74:	beq.w	c120 <_strtod_l+0xc30>
    ba78:	ldr	r3, [sp, #40]	; 0x28
    ba7a:	cbz	r3, ba8e <_strtod_l+0x59e>
    ba7c:	mov	r1, r6
    ba7e:	ldr	r2, [sp, #40]	; 0x28
    ba80:	mov	r0, r9
    ba82:	bl	10590 <__pow5mult>
    ba86:	mov	r6, r0
    ba88:	cmp	r0, #0
    ba8a:	beq.w	beb8 <_strtod_l+0x9c8>
    ba8e:	cmp	r5, #0
    ba90:	ble.n	baa4 <_strtod_l+0x5b4>
    ba92:	mov	r1, r6
    ba94:	mov	r2, r5
    ba96:	mov	r0, r9
    ba98:	bl	10630 <__lshift>
    ba9c:	mov	r6, r0
    ba9e:	cmp	r0, #0
    baa0:	beq.w	beb8 <_strtod_l+0x9c8>
    baa4:	cmp	r7, #0
    baa6:	ble.n	baba <_strtod_l+0x5ca>
    baa8:	mov	r1, r4
    baaa:	mov	r2, r7
    baac:	mov	r0, r9
    baae:	bl	10630 <__lshift>
    bab2:	mov	r4, r0
    bab4:	cmp	r0, #0
    bab6:	beq.w	beb8 <_strtod_l+0x9c8>
    baba:	mov	r2, r6
    babc:	ldr	r1, [sp, #80]	; 0x50
    babe:	mov	r0, r9
    bac0:	bl	10724 <__mdiff>
    bac4:	mov	r8, r0
    bac6:	cmp	r0, #0
    bac8:	beq.w	beb8 <_strtod_l+0x9c8>
    bacc:	movs	r3, #0
    bace:	ldr	r5, [r0, #12]
    bad0:	str	r3, [r0, #12]
    bad2:	mov	r1, r4
    bad4:	bl	106e0 <__mcmp>
    bad8:	cmp	r0, #0
    bada:	blt.w	c126 <_strtod_l+0xc36>
    bade:	beq.w	c1e8 <_strtod_l+0xcf8>
    bae2:	mov	r1, r4
    bae4:	mov	r0, r8
    bae6:	bl	10a18 <__ratio>
    baea:	vmov.f64	d7, #0	; 0x40000000  2.0
    baee:	vcmpe.f64	d0, d7
    baf2:	vmrs	APSR_nzcv, fpscr
    baf6:	bhi.n	bb86 <_strtod_l+0x696>
    baf8:	cmp	r5, #0
    bafa:	beq.n	bbcc <_strtod_l+0x6dc>
    bafc:	vmov.f64	d13, #112	; 0x3f800000  1.0
    bb00:	ldr	r3, [pc, #300]	; (bc30 <_strtod_l+0x740>)
    bb02:	ldr	r1, [sp, #28]
    bb04:	movs	r2, #0
    bb06:	ldr	r7, [pc, #300]	; (bc34 <_strtod_l+0x744>)
    bb08:	ldr	r0, [pc, #300]	; (bc38 <_strtod_l+0x748>)
    bb0a:	ands	r7, r1
    bb0c:	cmp	r7, r0
    bb0e:	beq.w	bdf0 <_strtod_l+0x900>
    bb12:	ldr	r1, [sp, #36]	; 0x24
    bb14:	cbz	r1, bb2e <_strtod_l+0x63e>
    bb16:	cmp.w	r7, #111149056	; 0x6a00000
    bb1a:	bhi.n	bb2e <_strtod_l+0x63e>
    bb1c:	vcmpe.f64	d13, d8
    bb20:	vmrs	APSR_nzcv, fpscr
    bb24:	bls.w	bd0c <_strtod_l+0x81c>
    bb28:	add.w	r1, r3, #112197632	; 0x6b00000
    bb2c:	subs	r3, r1, r7
    bb2e:	vldr	d0, [sp, #16]
    bb32:	vmov	d12, r2, r3
    bb36:	bl	10838 <__ulp>
    bb3a:	vldr	d7, [sp, #16]
    bb3e:	vfma.f64	d7, d12, d0
    bb42:	vmov	r2, r3, d7
    bb46:	strd	r2, r3, [sp, #24]
    bb4a:	mov	r2, r3
    bb4c:	ldr	r3, [sp, #36]	; 0x24
    bb4e:	cbnz	r3, bb5a <_strtod_l+0x66a>
    bb50:	ldr	r3, [pc, #224]	; (bc34 <_strtod_l+0x744>)
    bb52:	ands	r3, r2
    bb54:	cmp	r7, r3
    bb56:	beq.w	be54 <_strtod_l+0x964>
    bb5a:	ldr	r1, [sp, #80]	; 0x50
    bb5c:	mov	r0, r9
    bb5e:	bl	10284 <_Bfree>
    bb62:	mov	r1, r6
    bb64:	mov	r0, r9
    bb66:	bl	10284 <_Bfree>
    bb6a:	mov	r1, r4
    bb6c:	mov	r0, r9
    bb6e:	bl	10284 <_Bfree>
    bb72:	mov	r1, r8
    bb74:	mov	r0, r9
    bb76:	bl	10284 <_Bfree>
    bb7a:	b.n	b97c <_strtod_l+0x48c>
    bb7c:	movs	r2, #0
    bb7e:	str	r2, [sp, #56]	; 0x38
    bb80:	movs	r2, #1
    bb82:	str	r2, [sp, #52]	; 0x34
    bb84:	b.n	ba08 <_strtod_l+0x518>
    bb86:	vmov.f64	d7, #96	; 0x3f000000  0.5
    bb8a:	vmul.f64	d13, d0, d7
    bb8e:	cbnz	r5, bbec <_strtod_l+0x6fc>
    bb90:	vneg.f64	d7, d13
    bb94:	vmov	r2, r3, d7
    bb98:	ldr	r1, [sp, #28]
    bb9a:	b.n	bb06 <_strtod_l+0x616>
    bb9c:	mov.w	fp, #1
    bba0:	cbnz	r0, bc02 <_strtod_l+0x712>
    bba2:	ldr	r3, [sp, #36]	; 0x24
    bba4:	cmp	r3, #0
    bba6:	beq.w	b590 <_strtod_l+0xa0>
    bbaa:	mov	r5, r0
    bbac:	b.n	b86e <_strtod_l+0x37e>
    bbae:	ldr	r3, [sp, #40]	; 0x28
    bbb0:	ldr	r7, [sp, #44]	; 0x2c
    bbb2:	subs	r5, r3, r2
    bbb4:	b.n	b9dc <_strtod_l+0x4ec>
    bbb6:	mov.w	fp, #1
    bbba:	b.n	b63e <_strtod_l+0x14e>
    bbbc:	ldr	r1, [pc, #124]	; (bc3c <_strtod_l+0x74c>)
    bbbe:	subs	r1, r1, r2
    bbc0:	movs	r2, #1
    bbc2:	lsl.w	r1, r2, r1
    bbc6:	str	r1, [sp, #56]	; 0x38
    bbc8:	str	r2, [sp, #52]	; 0x34
    bbca:	b.n	ba08 <_strtod_l+0x518>
    bbcc:	ldrd	r1, r2, [sp, #24]
    bbd0:	cmp	r1, #0
    bbd2:	beq.w	bcde <_strtod_l+0x7ee>
    bbd6:	ldrd	r1, r2, [sp, #24]
    bbda:	cmp	r1, #1
    bbdc:	beq.w	c0bc <_strtod_l+0xbcc>
    bbe0:	mov	r1, r2
    bbe2:	vmov.f64	d13, #112	; 0x3f800000  1.0
    bbe6:	movs	r2, #0
    bbe8:	ldr	r3, [pc, #84]	; (bc40 <_strtod_l+0x750>)
    bbea:	b.n	bb06 <_strtod_l+0x616>
    bbec:	vmov	r2, r3, d13
    bbf0:	b.n	bb98 <_strtod_l+0x6a8>
    bbf2:	movs	r3, #1
    bbf4:	str	r3, [sp, #16]
    bbf6:	add.w	r3, r8, #2
    bbfa:	str	r3, [sp, #76]	; 0x4c
    bbfc:	ldrb.w	r4, [r8, #2]
    bc00:	b.n	b88c <_strtod_l+0x39c>
    bc02:	movs	r5, #0
    bc04:	b.n	b86e <_strtod_l+0x37e>
    bc06:	nop
    bc08:	.word	0x94a03595
    bc0c:	.word	0x3fdfffff
    bc10:	.word	0x35afe535
    bc14:	.word	0x3fe00000
    bc18:	.word	0x94a03595
    bc1c:	.word	0x3fcfffff
    bc20:	.word	0xffc00000
    bc24:	.word	0x41dfffff
    bc28:	.word	0x200002a8
    bc2c:	.word	0xfffffc02
    bc30:	.word	0x3ff00000
    bc34:	.word	0x7ff00000
    bc38:	.word	0x7fe00000
    bc3c:	.word	0xfffffbe2
    bc40:	.word	0xbff00000
    bc44:	cmp.w	r3, #308	; 0x134
    bc48:	bgt.w	be3c <_strtod_l+0x94c>
    bc4c:	asrs	r3, r3, #4
    bc4e:	cmp	r3, #1
    bc50:	ldr.w	lr, [pc, #704]	; bf14 <_strtod_l+0xa24>
    bc54:	ble.w	c252 <_strtod_l+0xd62>
    bc58:	vldr	d7, [sp, #24]
    bc5c:	vstr	d7, [sp, #16]
    bc60:	movs	r7, #0
    bc62:	mov	r1, lr
    bc64:	mov	r0, r7
    bc66:	tst.w	r3, #1
    bc6a:	add.w	r0, r0, #1
    bc6e:	mov.w	r3, r3, asr #1
    bc72:	beq.n	bc86 <_strtod_l+0x796>
    bc74:	vldr	d6, [sp, #16]
    bc78:	vldr	d7, [r1]
    bc7c:	vmul.f64	d7, d6, d7
    bc80:	vstr	d7, [sp, #16]
    bc84:	movs	r7, #1
    bc86:	cmp	r3, #1
    bc88:	add.w	r1, r1, #8
    bc8c:	bne.n	bc66 <_strtod_l+0x776>
    bc8e:	cmp	r7, #0
    bc90:	bne.w	c332 <_strtod_l+0xe42>
    bc94:	ldr	r3, [sp, #28]
    bc96:	ldr	r1, [pc, #608]	; (bef8 <_strtod_l+0xa08>)
    bc98:	sub.w	r3, r3, #55574528	; 0x3500000
    bc9c:	str	r3, [sp, #28]
    bc9e:	add.w	r0, lr, r0, lsl #3
    bca2:	vldr	d6, [sp, #24]
    bca6:	vldr	d7, [r0]
    bcaa:	vmul.f64	d7, d7, d6
    bcae:	vmov	r7, r8, d7
    bcb2:	bic.w	r3, r8, #2147483648	; 0x80000000
    bcb6:	lsrs	r3, r3, #20
    bcb8:	lsls	r3, r3, #20
    bcba:	cmp	r3, r1
    bcbc:	strd	r7, r8, [sp, #24]
    bcc0:	bhi.w	be3c <_strtod_l+0x94c>
    bcc4:	sub.w	r1, r1, #1048576	; 0x100000
    bcc8:	cmp	r3, r1
    bcca:	bls.w	c220 <_strtod_l+0xd30>
    bcce:	ldr	r3, [pc, #556]	; (befc <_strtod_l+0xa0c>)
    bcd0:	str	r3, [sp, #28]
    bcd2:	movs	r3, #0
    bcd4:	str	r3, [sp, #36]	; 0x24
    bcd6:	mov.w	r3, #4294967295
    bcda:	str	r3, [sp, #24]
    bcdc:	b.n	b93c <_strtod_l+0x44c>
    bcde:	ubfx	r3, r2, #0, #20
    bce2:	mov	r1, r2
    bce4:	cmp	r3, #0
    bce6:	bne.w	bbe2 <_strtod_l+0x6f2>
    bcea:	vmov.f64	d7, #112	; 0x3f800000  1.0
    bcee:	vcmpe.f64	d0, d7
    bcf2:	vmrs	APSR_nzcv, fpscr
    bcf6:	bmi.w	c22a <_strtod_l+0xd3a>
    bcfa:	vmov.f64	d7, #96	; 0x3f000000  0.5
    bcfe:	vmul.f64	d13, d0, d7
    bd02:	vneg.f64	d7, d13
    bd06:	vmov	r2, r3, d7
    bd0a:	b.n	bb06 <_strtod_l+0x616>
    bd0c:	vcvt.u32.f64	s0, d13
    bd10:	vmov	r3, s0
    bd14:	cmp	r3, #0
    bd16:	beq.w	c03a <_strtod_l+0xb4a>
    bd1a:	vcvt.f64.u32	d13, s0
    bd1e:	cmp	r5, #0
    bd20:	bne.w	c0b6 <_strtod_l+0xbc6>
    bd24:	vneg.f64	d7, d13
    bd28:	vmov	r2, r3, d7
    bd2c:	b.n	bb28 <_strtod_l+0x638>
    bd2e:	add	r0, sp, #76	; 0x4c
    bd30:	ldr	r1, [pc, #460]	; (bf00 <_strtod_l+0xa10>)
    bd32:	bl	fff0 <__match>
    bd36:	cmp	r0, #0
    bd38:	beq.w	b590 <_strtod_l+0xa0>
    bd3c:	ldr	r3, [sp, #76]	; 0x4c
    bd3e:	ldrb	r3, [r3, #0]
    bd40:	cmp	r3, #40	; 0x28
    bd42:	beq.w	c2d4 <_strtod_l+0xde4>
    bd46:	ldr	r3, [pc, #444]	; (bf04 <_strtod_l+0xa14>)
    bd48:	str	r3, [sp, #28]
    bd4a:	movs	r3, #0
    bd4c:	str	r3, [sp, #24]
    bd4e:	b.n	b846 <_strtod_l+0x356>
    bd50:	str.w	r8, [sp, #76]	; 0x4c
    bd54:	movs	r3, #0
    bd56:	b.n	b64c <_strtod_l+0x15c>
    bd58:	movs	r3, #0
    bd5a:	str	r3, [sp, #16]
    bd5c:	b.n	bbf6 <_strtod_l+0x706>
    bd5e:	ldr	r2, [sp, #32]
    bd60:	str	r6, [sp, #8]
    bd62:	add	r3, sp, #80	; 0x50
    bd64:	str	r2, [sp, #4]
    bd66:	str	r3, [sp, #0]
    bd68:	ldr	r2, [pc, #412]	; (bf08 <_strtod_l+0xa18>)
    bd6a:	add	r3, sp, #84	; 0x54
    bd6c:	add	r1, sp, #76	; 0x4c
    bd6e:	mov	r0, r9
    bd70:	bl	fae0 <__gethex>
    bd74:	ands.w	r6, r0, #7
    bd78:	mov	r4, r0
    bd7a:	beq.w	b792 <_strtod_l+0x2a2>
    bd7e:	cmp	r6, #6
    bd80:	bne.w	c040 <_strtod_l+0xb50>
    bd84:	vldr	d7, [pc, #360]	; bef0 <_strtod_l+0xa00>
    bd88:	adds	r5, #1
    bd8a:	movs	r3, #0
    bd8c:	str	r5, [sp, #76]	; 0x4c
    bd8e:	vstr	d7, [sp, #16]
    bd92:	str	r3, [sp, #32]
    bd94:	b.n	b79a <_strtod_l+0x2aa>
    bd96:	ldr.w	r1, [fp]
    bd9a:	ldr	r2, [sp, #16]
    bd9c:	mov	r0, r5
    bd9e:	bl	b41c <strncmp>
    bda2:	cbz	r0, bdb4 <_strtod_l+0x8c4>
    bda4:	movs	r2, #0
    bda6:	mov	r7, r2
    bda8:	mov	r6, r2
    bdaa:	mov	r0, r2
    bdac:	mov	ip, r2
    bdae:	mov	r5, r2
    bdb0:	mov	fp, r2
    bdb2:	b.n	b63e <_strtod_l+0x14e>
    bdb4:	ldr	r2, [sp, #76]	; 0x4c
    bdb6:	ldr	r1, [sp, #16]
    bdb8:	adds	r3, r2, r1
    bdba:	str	r3, [sp, #76]	; 0x4c
    bdbc:	ldrb	r4, [r2, r1]
    bdbe:	cmp	r4, #48	; 0x30
    bdc0:	bne.n	bdd0 <_strtod_l+0x8e0>
    bdc2:	adds	r3, #1
    bdc4:	str	r3, [sp, #76]	; 0x4c
    bdc6:	ldrb	r4, [r3, #0]
    bdc8:	cmp	r4, #48	; 0x30
    bdca:	add.w	r0, r0, #1
    bdce:	beq.n	bdc2 <_strtod_l+0x8d2>
    bdd0:	sub.w	r3, r4, #49	; 0x31
    bdd4:	cmp	r3, #8
    bdd6:	bls.w	c0de <_strtod_l+0xbee>
    bdda:	movs	r2, #0
    bddc:	cmp	r4, #101	; 0x65
    bdde:	mov	r7, r2
    bde0:	mov	r6, r2
    bde2:	mov	ip, r2
    bde4:	beq.w	bb9c <_strtod_l+0x6ac>
    bde8:	mov	r5, r2
    bdea:	mov.w	fp, #1
    bdee:	b.n	b644 <_strtod_l+0x154>
    bdf0:	sub.w	r1, r1, #55574528	; 0x3500000
    bdf4:	str	r1, [sp, #28]
    bdf6:	vldr	d14, [sp, #24]
    bdfa:	vmov.f64	d0, d14
    bdfe:	vmov	d12, r2, r3
    be02:	bl	10838 <__ulp>
    be06:	vfma.f64	d14, d12, d0
    be0a:	vmov	r2, r3, d14
    be0e:	strd	r2, r3, [sp, #24]
    be12:	bic.w	r3, r3, #2147483648	; 0x80000000
    be16:	lsrs	r3, r3, #20
    be18:	ldr	r2, [pc, #240]	; (bf0c <_strtod_l+0xa1c>)
    be1a:	ldrd	r0, r1, [sp, #16]
    be1e:	lsls	r3, r3, #20
    be20:	cmp	r3, r2
    be22:	strd	r0, r1, [sp, #64]	; 0x40
    be26:	bls.w	bffa <_strtod_l+0xb0a>
    be2a:	ldr	r3, [pc, #208]	; (befc <_strtod_l+0xa0c>)
    be2c:	cmp	r1, r3
    be2e:	beq.n	beb2 <_strtod_l+0x9c2>
    be30:	ldr	r3, [pc, #200]	; (befc <_strtod_l+0xa0c>)
    be32:	str	r3, [sp, #28]
    be34:	mov.w	r3, #4294967295
    be38:	str	r3, [sp, #24]
    be3a:	b.n	bb5a <_strtod_l+0x66a>
    be3c:	ldr	r3, [pc, #208]	; (bf10 <_strtod_l+0xa20>)
    be3e:	str	r3, [sp, #28]
    be40:	movs	r2, #0
    be42:	str	r2, [sp, #24]
    be44:	vldr	d7, [sp, #24]
    be48:	movs	r3, #34	; 0x22
    be4a:	vstr	d7, [sp, #16]
    be4e:	str.w	r3, [r9]
    be52:	b.n	b79a <_strtod_l+0x2aa>
    be54:	vcvt.s32.f64	s14, d13
    be58:	vcvt.f64.s32	d7, s14
    be5c:	vsub.f64	d7, d13, d7
    be60:	cmp	r5, #0
    be62:	bne.n	bed6 <_strtod_l+0x9e6>
    be64:	ldr	r3, [sp, #24]
    be66:	cbnz	r3, bed6 <_strtod_l+0x9e6>
    be68:	ubfx	r2, r2, #0, #20
    be6c:	cbnz	r2, bed6 <_strtod_l+0x9e6>
    be6e:	vcmpe.f64	d7, d11
    be72:	vmrs	APSR_nzcv, fpscr
    be76:	bpl.w	bb5a <_strtod_l+0x66a>
    be7a:	vldr	d7, [sp, #24]
    be7e:	vstr	d7, [sp, #16]
    be82:	ldr.w	sl, [sp, #60]	; 0x3c
    be86:	ldr	r0, [sp, #80]	; 0x50
    be88:	mov	r1, r0
    be8a:	mov	r0, r9
    be8c:	bl	10284 <_Bfree>
    be90:	mov	r1, r6
    be92:	mov	r0, r9
    be94:	bl	10284 <_Bfree>
    be98:	mov	r1, r4
    be9a:	mov	r0, r9
    be9c:	bl	10284 <_Bfree>
    bea0:	mov	r1, fp
    bea2:	mov	r0, r9
    bea4:	bl	10284 <_Bfree>
    bea8:	mov	r1, r8
    beaa:	mov	r0, r9
    beac:	bl	10284 <_Bfree>
    beb0:	b.n	b79a <_strtod_l+0x2aa>
    beb2:	ldr	r3, [sp, #64]	; 0x40
    beb4:	adds	r3, #1
    beb6:	bne.n	be30 <_strtod_l+0x940>
    beb8:	ldr.w	sl, [sp, #60]	; 0x3c
    bebc:	ldr	r0, [sp, #80]	; 0x50
    bebe:	ldr	r3, [pc, #80]	; (bf10 <_strtod_l+0xa20>)
    bec0:	str	r3, [sp, #28]
    bec2:	movs	r2, #0
    bec4:	str	r2, [sp, #24]
    bec6:	vldr	d7, [sp, #24]
    beca:	movs	r3, #34	; 0x22
    becc:	vstr	d7, [sp, #16]
    bed0:	str.w	r3, [r9]
    bed4:	b.n	be88 <_strtod_l+0x998>
    bed6:	vcmpe.f64	d7, d10
    beda:	vmrs	APSR_nzcv, fpscr
    bede:	bmi.n	be7a <_strtod_l+0x98a>
    bee0:	vcmpe.f64	d7, d9
    bee4:	vmrs	APSR_nzcv, fpscr
    bee8:	ble.w	bb5a <_strtod_l+0x66a>
    beec:	b.n	be7a <_strtod_l+0x98a>
    beee:	nop
	...
    bef8:	.word	0x7ca00000
    befc:	.word	0x7fefffff
    bf00:	.word	0x20000b5c
    bf04:	.word	0xfff80000
    bf08:	.word	0x20000b0c
    bf0c:	.word	0x7c9fffff
    bf10:	.word	0x7ff00000
    bf14:	.word	0x20000280
    bf18:	beq.w	b938 <_strtod_l+0x448>
    bf1c:	negs	r3, r3
    bf1e:	ands.w	r0, r3, #15
    bf22:	beq.n	bf3a <_strtod_l+0xa4a>
    bf24:	ldr	r1, [pc, #688]	; (c1d8 <_strtod_l+0xce8>)
    bf26:	add.w	r1, r1, r0, lsl #3
    bf2a:	vldr	d5, [sp, #24]
    bf2e:	vldr	d7, [r1]
    bf32:	vdiv.f64	d6, d5, d7
    bf36:	vstr	d6, [sp, #24]
    bf3a:	asrs	r3, r3, #4
    bf3c:	beq.w	b938 <_strtod_l+0x448>
    bf40:	cmp	r3, #31
    bf42:	bgt.n	bfc0 <_strtod_l+0xad0>
    bf44:	ands.w	r1, r3, #16
    bf48:	beq.w	c2ba <_strtod_l+0xdca>
    bf4c:	cmp	r3, #0
    bf4e:	ble.w	c324 <_strtod_l+0xe34>
    bf52:	movs	r1, #106	; 0x6a
    bf54:	str	r1, [sp, #36]	; 0x24
    bf56:	vldr	d7, [sp, #24]
    bf5a:	vstr	d7, [sp, #16]
    bf5e:	ldr	r1, [pc, #636]	; (c1dc <_strtod_l+0xcec>)
    bf60:	movs	r0, #0
    bf62:	lsls	r7, r3, #31
    bf64:	bpl.n	bf78 <_strtod_l+0xa88>
    bf66:	vldr	d6, [sp, #16]
    bf6a:	vldr	d7, [r1]
    bf6e:	vmul.f64	d7, d6, d7
    bf72:	vstr	d7, [sp, #16]
    bf76:	movs	r0, #1
    bf78:	asrs	r3, r3, #1
    bf7a:	add.w	r1, r1, #8
    bf7e:	bne.n	bf62 <_strtod_l+0xa72>
    bf80:	cmp	r0, #0
    bf82:	bne.w	c33c <_strtod_l+0xe4c>
    bf86:	ldr	r3, [sp, #36]	; 0x24
    bf88:	cbz	r3, bfb0 <_strtod_l+0xac0>
    bf8a:	ldrd	r0, r1, [sp, #24]
    bf8e:	ubfx	r3, r1, #20, #11
    bf92:	rsb	r3, r3, #107	; 0x6b
    bf96:	cmp	r3, #0
    bf98:	ble.n	bfb0 <_strtod_l+0xac0>
    bf9a:	cmp	r3, #31
    bf9c:	ble.w	c2c4 <_strtod_l+0xdd4>
    bfa0:	movs	r0, #0
    bfa2:	cmp	r3, #52	; 0x34
    bfa4:	str	r0, [sp, #24]
    bfa6:	ble.w	c30e <_strtod_l+0xe1e>
    bfaa:	mov.w	r3, #57671680	; 0x3700000
    bfae:	str	r3, [sp, #28]
    bfb0:	vldr	d7, [sp, #24]
    bfb4:	vcmp.f64	d7, #0.0
    bfb8:	vmrs	APSR_nzcv, fpscr
    bfbc:	bne.w	b93c <_strtod_l+0x44c>
    bfc0:	vldr	d7, [pc, #524]	; c1d0 <_strtod_l+0xce0>
    bfc4:	movs	r3, #34	; 0x22
    bfc6:	str.w	r3, [r9]
    bfca:	vstr	d7, [sp, #16]
    bfce:	b.w	b79a <_strtod_l+0x2aa>
    bfd2:	ldr	r1, [sp, #76]	; 0x4c
    bfd4:	adds	r5, #1
    bfd6:	cmp	r0, #8
    bfd8:	ble.w	c0f2 <_strtod_l+0xc02>
    bfdc:	cmp	r5, #16
    bfde:	itt	le
    bfe0:	addle.w	r7, r7, r7, lsl #2
    bfe4:	addle.w	r7, r3, r7, lsl #1
    bfe8:	movs	r0, #0
    bfea:	adds	r3, r1, #1
    bfec:	str	r3, [sp, #76]	; 0x4c
    bfee:	ldrb	r4, [r1, #1]
    bff0:	b.w	b724 <_strtod_l+0x234>
    bff4:	movw	r3, #19999	; 0x4e1f
    bff8:	b.n	b8fe <_strtod_l+0x40e>
    bffa:	ldr	r3, [sp, #28]
    bffc:	add.w	r2, r3, #55574528	; 0x3500000
    c000:	str	r2, [sp, #28]
    c002:	b.n	bb4c <_strtod_l+0x65c>
    c004:	rsb	r3, r5, #37	; 0x25
    c008:	cmp	r4, r3
    c00a:	bgt.w	b90a <_strtod_l+0x41a>
    c00e:	rsb	r5, r5, #15
    c012:	ldr	r3, [pc, #452]	; (c1d8 <_strtod_l+0xce8>)
    c014:	subs	r2, r4, r5
    c016:	add.w	r2, r3, r2, lsl #3
    c01a:	add.w	r3, r3, r5, lsl #3
    c01e:	vldr	d6, [r2]
    c022:	vldr	d7, [r3]
    c026:	vldr	d5, [sp, #24]
    c02a:	vmul.f64	d7, d7, d5
    c02e:	vmul.f64	d7, d7, d6
    c032:	vstr	d7, [sp, #16]
    c036:	b.w	b79a <_strtod_l+0x2aa>
    c03a:	vmov.f64	d13, #112	; 0x3f800000  1.0
    c03e:	b.n	bd1e <_strtod_l+0x82e>
    c040:	ldr	r2, [sp, #80]	; 0x50
    c042:	cbz	r2, c054 <_strtod_l+0xb64>
    c044:	movs	r1, #53	; 0x35
    c046:	add	r0, sp, #88	; 0x58
    c048:	bl	10a74 <__copybits>
    c04c:	mov	r0, r9
    c04e:	ldr	r1, [sp, #80]	; 0x50
    c050:	bl	10284 <_Bfree>
    c054:	cmp	r6, #6
    c056:	bhi.n	c070 <_strtod_l+0xb80>
    c058:	tbb	[pc, r6]
    c05c:	.word	0x13181d29
    c060:	.short	0x1d04
    c062:	.byte	0x29
    c063:	.byte	0x00
    c064:	mvn.w	r3, #2147483648	; 0x80000000
    c068:	str	r3, [sp, #28]
    c06a:	mov.w	r3, #4294967295
    c06e:	str	r3, [sp, #24]
    c070:	lsls	r3, r4, #28
    c072:	bpl.w	b846 <_strtod_l+0x356>
    c076:	ldr	r3, [sp, #28]
    c078:	orr.w	r3, r3, #2147483648	; 0x80000000
    c07c:	str	r3, [sp, #28]
    c07e:	b.w	b846 <_strtod_l+0x356>
    c082:	ldr	r3, [pc, #348]	; (c1e0 <_strtod_l+0xcf0>)
    c084:	str	r3, [sp, #28]
    c086:	movs	r3, #0
    c088:	str	r3, [sp, #24]
    c08a:	b.n	c070 <_strtod_l+0xb80>
    c08c:	ldr	r3, [sp, #88]	; 0x58
    c08e:	str	r3, [sp, #24]
    c090:	ldr	r3, [sp, #92]	; 0x5c
    c092:	str	r3, [sp, #28]
    c094:	b.n	c070 <_strtod_l+0xb80>
    c096:	ldr	r2, [sp, #84]	; 0x54
    c098:	ldr	r3, [sp, #92]	; 0x5c
    c09a:	ldr	r1, [sp, #88]	; 0x58
    c09c:	str	r1, [sp, #24]
    c09e:	addw	r2, r2, #1075	; 0x433
    c0a2:	bic.w	r3, r3, #1048576	; 0x100000
    c0a6:	orr.w	r3, r3, r2, lsl #20
    c0aa:	str	r3, [sp, #28]
    c0ac:	b.n	c070 <_strtod_l+0xb80>
    c0ae:	movs	r3, #0
    c0b0:	str	r3, [sp, #28]
    c0b2:	str	r3, [sp, #24]
    c0b4:	b.n	c070 <_strtod_l+0xb80>
    c0b6:	vmov	r2, r3, d13
    c0ba:	b.n	bb28 <_strtod_l+0x638>
    c0bc:	ldrd	r2, r3, [sp, #24]
    c0c0:	mov	r1, r3
    c0c2:	cmp	r3, #0
    c0c4:	bne.w	bbe2 <_strtod_l+0x6f2>
    c0c8:	ldr.w	sl, [sp, #60]	; 0x3c
    c0cc:	ldr	r0, [sp, #80]	; 0x50
    c0ce:	vldr	d7, [pc, #256]	; c1d0 <_strtod_l+0xce0>
    c0d2:	movs	r3, #34	; 0x22
    c0d4:	str.w	r3, [r9]
    c0d8:	vstr	d7, [sp, #16]
    c0dc:	b.n	be88 <_strtod_l+0x998>
    c0de:	ldr	r3, [sp, #76]	; 0x4c
    c0e0:	str	r3, [sp, #40]	; 0x28
    c0e2:	movs	r6, #0
    c0e4:	subs	r4, #48	; 0x30
    c0e6:	add.w	ip, r0, #1
    c0ea:	mov	r1, r3
    c0ec:	mov	r2, r6
    c0ee:	mov	r7, r6
    c0f0:	movs	r5, #1
    c0f2:	add.w	r6, r6, r6, lsl #2
    c0f6:	add.w	r6, r4, r6, lsl #1
    c0fa:	movs	r0, #0
    c0fc:	b.n	bfea <_strtod_l+0xafa>
    c0fe:	cmn.w	r4, #22
    c102:	blt.w	b90a <_strtod_l+0x41a>
    c106:	ldr	r3, [pc, #208]	; (c1d8 <_strtod_l+0xce8>)
    c108:	sub.w	r4, r3, r4, lsl #3
    c10c:	vldr	d7, [r4]
    c110:	vldr	d5, [sp, #24]
    c114:	vdiv.f64	d6, d5, d7
    c118:	vstr	d6, [sp, #16]
    c11c:	b.w	b79a <_strtod_l+0x2aa>
    c120:	ldr.w	sl, [sp, #60]	; 0x3c
    c124:	b.n	bebe <_strtod_l+0x9ce>
    c126:	ldr.w	sl, [sp, #60]	; 0x3c
    c12a:	cbnz	r5, c194 <_strtod_l+0xca4>
    c12c:	ldrd	r1, r2, [sp, #24]
    c130:	cbnz	r1, c194 <_strtod_l+0xca4>
    c132:	ubfx	r3, r2, #0, #20
    c136:	mov	r7, r2
    c138:	cbnz	r3, c194 <_strtod_l+0xca4>
    c13a:	bic.w	r3, r2, #2147483648	; 0x80000000
    c13e:	lsrs	r3, r3, #20
    c140:	lsls	r3, r3, #20
    c142:	cmp.w	r3, #112197632	; 0x6b00000
    c146:	bls.n	c194 <_strtod_l+0xca4>
    c148:	ldr.w	r3, [r8, #20]
    c14c:	cbnz	r3, c156 <_strtod_l+0xc66>
    c14e:	ldr.w	r3, [r8, #16]
    c152:	cmp	r3, #1
    c154:	ble.n	c194 <_strtod_l+0xca4>
    c156:	mov	r1, r8
    c158:	movs	r2, #1
    c15a:	mov	r0, r9
    c15c:	bl	10630 <__lshift>
    c160:	mov	r1, r4
    c162:	mov	r8, r0
    c164:	bl	106e0 <__mcmp>
    c168:	cmp	r0, #0
    c16a:	ble.n	c194 <_strtod_l+0xca4>
    c16c:	ldr	r3, [sp, #36]	; 0x24
    c16e:	cmp	r3, #0
    c170:	bne.w	c2f8 <_strtod_l+0xe08>
    c174:	ldr	r3, [pc, #104]	; (c1e0 <_strtod_l+0xcf0>)
    c176:	ands	r3, r7
    c178:	sub.w	r3, r3, #1048576	; 0x100000
    c17c:	mvn.w	r3, r3, lsr #20
    c180:	mvn.w	r3, r3, lsl #20
    c184:	str	r3, [sp, #28]
    c186:	mov.w	r3, #4294967295
    c18a:	str	r3, [sp, #24]
    c18c:	vldr	d7, [sp, #24]
    c190:	vstr	d7, [sp, #16]
    c194:	ldr	r3, [sp, #36]	; 0x24
    c196:	cbz	r3, c1c8 <_strtod_l+0xcd8>
    c198:	ldr	r3, [pc, #72]	; (c1e4 <_strtod_l+0xcf4>)
    c19a:	str	r3, [sp, #68]	; 0x44
    c19c:	movs	r3, #0
    c19e:	str	r3, [sp, #64]	; 0x40
    c1a0:	vldr	d7, [sp, #16]
    c1a4:	vldr	d6, [sp, #64]	; 0x40
    c1a8:	vmul.f64	d7, d7, d6
    c1ac:	vstr	d7, [sp, #16]
    c1b0:	ldrd	r2, r3, [sp, #16]
    c1b4:	strd	r2, r3, [sp, #24]
    c1b8:	cbnz	r3, c1c8 <_strtod_l+0xcd8>
    c1ba:	ldr	r3, [sp, #24]
    c1bc:	cbnz	r3, c1c8 <_strtod_l+0xcd8>
    c1be:	movs	r3, #34	; 0x22
    c1c0:	ldr	r0, [sp, #80]	; 0x50
    c1c2:	str.w	r3, [r9]
    c1c6:	b.n	be88 <_strtod_l+0x998>
    c1c8:	ldr	r0, [sp, #80]	; 0x50
    c1ca:	b.n	be88 <_strtod_l+0x998>
    c1cc:	nop.w
	...
    c1d8:	.word	0x200002a8
    c1dc:	.word	0x20000370
    c1e0:	.word	0x7ff00000
    c1e4:	.word	0x39500000
    c1e8:	ldr.w	sl, [sp, #60]	; 0x3c
    c1ec:	cbz	r5, c234 <_strtod_l+0xd44>
    c1ee:	ldr	r2, [sp, #28]
    c1f0:	ldr	r3, [pc, #344]	; (c34c <_strtod_l+0xe5c>)
    c1f2:	ubfx	r1, r2, #0, #20
    c1f6:	cmp	r1, r3
    c1f8:	beq.n	c256 <_strtod_l+0xd66>
    c1fa:	ldr	r3, [sp, #56]	; 0x38
    c1fc:	cbz	r3, c248 <_strtod_l+0xd58>
    c1fe:	ldr	r2, [sp, #28]
    c200:	tst	r3, r2
    c202:	beq.n	c194 <_strtod_l+0xca4>
    c204:	ldrd	r0, r1, [sp, #24]
    c208:	ldr	r2, [sp, #36]	; 0x24
    c20a:	cmp	r5, #0
    c20c:	beq.n	c296 <_strtod_l+0xda6>
    c20e:	bl	b4bc <sulp>
    c212:	vldr	d7, [sp, #16]
    c216:	vadd.f64	d7, d7, d0
    c21a:	vstr	d7, [sp, #16]
    c21e:	b.n	c194 <_strtod_l+0xca4>
    c220:	add.w	r3, r8, #55574528	; 0x3500000
    c224:	str	r3, [sp, #28]
    c226:	b.w	b938 <_strtod_l+0x448>
    c22a:	movs	r2, #0
    c22c:	ldr	r3, [pc, #288]	; (c350 <_strtod_l+0xe60>)
    c22e:	vmov.f64	d13, #96	; 0x3f000000  0.5
    c232:	b.n	bb06 <_strtod_l+0x616>
    c234:	ldrd	r1, r2, [sp, #24]
    c238:	ubfx	r3, r2, #0, #20
    c23c:	mov	r7, r2
    c23e:	cmp	r3, #0
    c240:	bne.n	c1fa <_strtod_l+0xd0a>
    c242:	cmp	r1, #0
    c244:	bne.n	c1fa <_strtod_l+0xd0a>
    c246:	b.n	c16c <_strtod_l+0xc7c>
    c248:	ldr	r3, [sp, #52]	; 0x34
    c24a:	ldr	r2, [sp, #24]
    c24c:	tst	r3, r2
    c24e:	beq.n	c194 <_strtod_l+0xca4>
    c250:	b.n	c204 <_strtod_l+0xd14>
    c252:	movs	r0, #0
    c254:	b.n	bc94 <_strtod_l+0x7a4>
    c256:	ldr	r3, [sp, #36]	; 0x24
    c258:	ldr	r1, [sp, #24]
    c25a:	cbz	r3, c2b4 <_strtod_l+0xdc4>
    c25c:	ldr	r3, [pc, #244]	; (c354 <_strtod_l+0xe64>)
    c25e:	ands	r3, r2
    c260:	cmp.w	r3, #111149056	; 0x6a00000
    c264:	bhi.n	c2b4 <_strtod_l+0xdc4>
    c266:	lsrs	r3, r3, #20
    c268:	rsb	r3, r3, #107	; 0x6b
    c26c:	mov.w	r0, #4294967295
    c270:	lsl.w	r3, r0, r3
    c274:	cmp	r3, r1
    c276:	bne.n	c1fa <_strtod_l+0xd0a>
    c278:	ldr	r1, [pc, #220]	; (c358 <_strtod_l+0xe68>)
    c27a:	cmp	r2, r1
    c27c:	beq.n	c31e <_strtod_l+0xe2e>
    c27e:	ldr	r3, [pc, #212]	; (c354 <_strtod_l+0xe64>)
    c280:	ands	r3, r2
    c282:	add.w	r3, r3, #1048576	; 0x100000
    c286:	str	r3, [sp, #28]
    c288:	movs	r3, #0
    c28a:	str	r3, [sp, #24]
    c28c:	vldr	d7, [sp, #24]
    c290:	vstr	d7, [sp, #16]
    c294:	b.n	c194 <_strtod_l+0xca4>
    c296:	bl	b4bc <sulp>
    c29a:	vldr	d7, [sp, #16]
    c29e:	vsub.f64	d7, d7, d0
    c2a2:	vcmp.f64	d7, #0.0
    c2a6:	vmrs	APSR_nzcv, fpscr
    c2aa:	vstr	d7, [sp, #16]
    c2ae:	beq.w	c0cc <_strtod_l+0xbdc>
    c2b2:	b.n	c194 <_strtod_l+0xca4>
    c2b4:	mov.w	r3, #4294967295
    c2b8:	b.n	c274 <_strtod_l+0xd84>
    c2ba:	cmp	r3, #0
    c2bc:	str	r1, [sp, #36]	; 0x24
    c2be:	bgt.w	bf56 <_strtod_l+0xa66>
    c2c2:	b.n	bfb0 <_strtod_l+0xac0>
    c2c4:	mov.w	r1, #4294967295
    c2c8:	lsl.w	r3, r1, r3
    c2cc:	ldr	r1, [sp, #24]
    c2ce:	ands	r1, r3
    c2d0:	str	r1, [sp, #24]
    c2d2:	b.n	bfb0 <_strtod_l+0xac0>
    c2d4:	add	r0, sp, #76	; 0x4c
    c2d6:	add	r2, sp, #88	; 0x58
    c2d8:	ldr	r1, [pc, #128]	; (c35c <_strtod_l+0xe6c>)
    c2da:	bl	10020 <__hexnan>
    c2de:	cmp	r0, #5
    c2e0:	bne.w	bd46 <_strtod_l+0x856>
    c2e4:	ldr	r3, [sp, #92]	; 0x5c
    c2e6:	orr.w	r3, r3, #2139095040	; 0x7f800000
    c2ea:	orr.w	r3, r3, #7340032	; 0x700000
    c2ee:	str	r3, [sp, #28]
    c2f0:	ldr	r3, [sp, #88]	; 0x58
    c2f2:	str	r3, [sp, #24]
    c2f4:	b.w	b846 <_strtod_l+0x356>
    c2f8:	ldr	r3, [pc, #88]	; (c354 <_strtod_l+0xe64>)
    c2fa:	ands	r3, r7
    c2fc:	cmp.w	r3, #112197632	; 0x6b00000
    c300:	bgt.w	c178 <_strtod_l+0xc88>
    c304:	cmp.w	r3, #57671680	; 0x3700000
    c308:	bgt.w	c198 <_strtod_l+0xca8>
    c30c:	b.n	c0cc <_strtod_l+0xbdc>
    c30e:	subs	r3, #32
    c310:	mov.w	r0, #4294967295
    c314:	lsl.w	r3, r0, r3
    c318:	ands	r3, r1
    c31a:	str	r3, [sp, #28]
    c31c:	b.n	bfb0 <_strtod_l+0xac0>
    c31e:	adds	r3, #1
    c320:	bne.n	c27e <_strtod_l+0xd8e>
    c322:	b.n	bebc <_strtod_l+0x9cc>
    c324:	movs	r3, #106	; 0x6a
    c326:	str	r3, [sp, #36]	; 0x24
    c328:	b.n	bf8a <_strtod_l+0xa9a>
    c32a:	mov	r0, r5
    c32c:	ldr	r1, [sp, #76]	; 0x4c
    c32e:	adds	r5, #1
    c330:	b.n	bfd6 <_strtod_l+0xae6>
    c332:	ldrd	r7, r8, [sp, #16]
    c336:	strd	r7, r8, [sp, #24]
    c33a:	b.n	bc94 <_strtod_l+0x7a4>
    c33c:	ldrd	r0, r1, [sp, #16]
    c340:	strd	r0, r1, [sp, #24]
    c344:	b.n	bf86 <_strtod_l+0xa96>
    c346:	mov	r0, r1
    c348:	ldr	r1, [sp, #76]	; 0x4c
    c34a:	b.n	bfea <_strtod_l+0xafa>
    c34c:	.word	0x000fffff
    c350:	.word	0xbfe00000
    c354:	.word	0x7ff00000
    c358:	.word	0x7fefffff
    c35c:	.word	0x20000b20

0000c360 <_strtod_r>:
    c360:	ldr	r3, [pc, #20]	; (c378 <_strtod_r+0x18>)
    c362:	ldr	r3, [r3, #0]
    c364:	push	{r4}
    c366:	ldr	r3, [r3, #52]	; 0x34
    c368:	ldr	r4, [pc, #16]	; (c37c <_strtod_r+0x1c>)
    c36a:	cmp	r3, #0
    c36c:	it	eq
    c36e:	moveq	r3, r4
    c370:	ldr.w	r4, [sp], #4
    c374:	b.w	b4f0 <_strtod_l>
    c378:	.word	0x20001dd8
    c37c:	.word	0x2000185c

0000c380 <_strtol_l.isra.0>:
    c380:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c384:	ldr.w	r9, [sp, #40]	; 0x28
    c388:	mov	r7, r1
    c38a:	mov	r8, r0
    c38c:	mov	r6, r2
    c38e:	mov	r5, r3
    c390:	mov	fp, r1
    c392:	b.n	c396 <_strtol_l.isra.0+0x16>
    c394:	mov	fp, r4
    c396:	mov	r4, fp
    c398:	mov	r0, r9
    c39a:	ldrb.w	sl, [r4], #1
    c39e:	bl	a6e0 <__locale_ctype_ptr_l>
    c3a2:	add	r0, sl
    c3a4:	ldrb	r1, [r0, #1]
    c3a6:	and.w	r1, r1, #8
    c3aa:	and.w	ip, r1, #255	; 0xff
    c3ae:	cmp	r1, #0
    c3b0:	bne.n	c394 <_strtol_l.isra.0+0x14>
    c3b2:	mov	r2, sl
    c3b4:	cmp	r2, #45	; 0x2d
    c3b6:	beq.n	c47c <_strtol_l.isra.0+0xfc>
    c3b8:	cmp	r2, #43	; 0x2b
    c3ba:	itt	eq
    c3bc:	ldrbeq.w	r2, [fp, #1]
    c3c0:	addeq.w	r4, fp, #2
    c3c4:	cmp	r5, #0
    c3c6:	beq.n	c450 <_strtol_l.isra.0+0xd0>
    c3c8:	cmp	r5, #16
    c3ca:	beq.n	c498 <_strtol_l.isra.0+0x118>
    c3cc:	mov	r9, r5
    c3ce:	cmp.w	ip, #0
    c3d2:	ite	eq
    c3d4:	mvneq.w	sl, #2147483648	; 0x80000000
    c3d8:	movne.w	sl, #2147483648	; 0x80000000
    c3dc:	movs	r1, #0
    c3de:	udiv	lr, sl, r9
    c3e2:	mov	r0, r1
    c3e4:	mls	sl, r9, lr, sl
    c3e8:	b.n	c3f6 <_strtol_l.isra.0+0x76>
    c3ea:	beq.n	c440 <_strtol_l.isra.0+0xc0>
    c3ec:	mla	r0, r9, r0, r3
    c3f0:	movs	r1, #1
    c3f2:	ldrb.w	r2, [r4], #1
    c3f6:	sub.w	r3, r2, #48	; 0x30
    c3fa:	cmp	r3, #9
    c3fc:	bls.n	c40a <_strtol_l.isra.0+0x8a>
    c3fe:	sub.w	r3, r2, #65	; 0x41
    c402:	cmp	r3, #25
    c404:	bhi.n	c41c <_strtol_l.isra.0+0x9c>
    c406:	sub.w	r3, r2, #55	; 0x37
    c40a:	cmp	r5, r3
    c40c:	ble.n	c42c <_strtol_l.isra.0+0xac>
    c40e:	adds	r2, r1, #1
    c410:	beq.n	c3f2 <_strtol_l.isra.0+0x72>
    c412:	cmp	lr, r0
    c414:	bcs.n	c3ea <_strtol_l.isra.0+0x6a>
    c416:	mov.w	r1, #4294967295
    c41a:	b.n	c3f2 <_strtol_l.isra.0+0x72>
    c41c:	sub.w	r3, r2, #97	; 0x61
    c420:	cmp	r3, #25
    c422:	bhi.n	c42c <_strtol_l.isra.0+0xac>
    c424:	sub.w	r3, r2, #87	; 0x57
    c428:	cmp	r5, r3
    c42a:	bgt.n	c40e <_strtol_l.isra.0+0x8e>
    c42c:	adds	r3, r1, #1
    c42e:	beq.n	c45c <_strtol_l.isra.0+0xdc>
    c430:	cmp.w	ip, #0
    c434:	bne.n	c458 <_strtol_l.isra.0+0xd8>
    c436:	cbz	r6, c44c <_strtol_l.isra.0+0xcc>
    c438:	cbnz	r1, c474 <_strtol_l.isra.0+0xf4>
    c43a:	str	r7, [r6, #0]
    c43c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c440:	cmp	sl, r3
    c442:	bge.n	c3ec <_strtol_l.isra.0+0x6c>
    c444:	mov	r0, lr
    c446:	mov.w	r1, #4294967295
    c44a:	b.n	c3f2 <_strtol_l.isra.0+0x72>
    c44c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c450:	cmp	r2, #48	; 0x30
    c452:	beq.n	c48a <_strtol_l.isra.0+0x10a>
    c454:	movs	r5, #10
    c456:	b.n	c3cc <_strtol_l.isra.0+0x4c>
    c458:	negs	r0, r0
    c45a:	b.n	c436 <_strtol_l.isra.0+0xb6>
    c45c:	cmp.w	ip, #0
    c460:	mov.w	r3, #34	; 0x22
    c464:	ite	eq
    c466:	mvneq.w	r0, #2147483648	; 0x80000000
    c46a:	movne.w	r0, #2147483648	; 0x80000000
    c46e:	str.w	r3, [r8]
    c472:	cbz	r6, c4b2 <_strtol_l.isra.0+0x132>
    c474:	subs	r7, r4, #1
    c476:	str	r7, [r6, #0]
    c478:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c47c:	add.w	r4, fp, #2
    c480:	ldrb.w	r2, [fp, #1]
    c484:	mov.w	ip, #1
    c488:	b.n	c3c4 <_strtol_l.isra.0+0x44>
    c48a:	ldrb	r3, [r4, #0]
    c48c:	and.w	r3, r3, #223	; 0xdf
    c490:	cmp	r3, #88	; 0x58
    c492:	beq.n	c4a6 <_strtol_l.isra.0+0x126>
    c494:	movs	r5, #8
    c496:	b.n	c3cc <_strtol_l.isra.0+0x4c>
    c498:	cmp	r2, #48	; 0x30
    c49a:	bne.n	c3cc <_strtol_l.isra.0+0x4c>
    c49c:	ldrb	r3, [r4, #0]
    c49e:	and.w	r3, r3, #223	; 0xdf
    c4a2:	cmp	r3, #88	; 0x58
    c4a4:	bne.n	c3cc <_strtol_l.isra.0+0x4c>
    c4a6:	mov.w	r9, #16
    c4aa:	ldrb	r2, [r4, #1]
    c4ac:	mov	r5, r9
    c4ae:	adds	r4, #2
    c4b0:	b.n	c3ce <_strtol_l.isra.0+0x4e>
    c4b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4b6:	nop

0000c4b8 <_strtol_r>:
    c4b8:	push	{r4, r5, lr}
    c4ba:	ldr	r4, [pc, #24]	; (c4d4 <_strtol_r+0x1c>)
    c4bc:	ldr	r5, [pc, #24]	; (c4d8 <_strtol_r+0x20>)
    c4be:	ldr	r4, [r4, #0]
    c4c0:	ldr	r4, [r4, #52]	; 0x34
    c4c2:	sub	sp, #12
    c4c4:	cmp	r4, #0
    c4c6:	it	eq
    c4c8:	moveq	r4, r5
    c4ca:	str	r4, [sp, #0]
    c4cc:	bl	c380 <_strtol_l.isra.0>
    c4d0:	add	sp, #12
    c4d2:	pop	{r4, r5, pc}
    c4d4:	.word	0x20001dd8
    c4d8:	.word	0x2000185c
    c4dc:	.word	0x00000000

0000c4e0 <_svfprintf_r>:
    c4e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4e4:	vpush	{d8-d10}
    c4e8:	sub	sp, #228	; 0xe4
    c4ea:	mov	r4, r1
    c4ec:	str	r1, [sp, #12]
    c4ee:	mov	sl, r2
    c4f0:	str	r3, [sp, #36]	; 0x24
    c4f2:	str	r0, [sp, #20]
    c4f4:	bl	101c0 <_localeconv_r>
    c4f8:	ldr	r3, [r0, #0]
    c4fa:	str	r3, [sp, #64]	; 0x40
    c4fc:	mov	r0, r3
    c4fe:	bl	b340 <strlen>
    c502:	ldrh	r3, [r4, #12]
    c504:	str	r0, [sp, #60]	; 0x3c
    c506:	lsls	r1, r3, #24
    c508:	bpl.n	c512 <_svfprintf_r+0x32>
    c50a:	ldr	r3, [r4, #16]
    c50c:	cmp	r3, #0
    c50e:	beq.w	d60c <_svfprintf_r+0x112c>
    c512:	movs	r3, #0
    c514:	vldr	d8, [pc, #656]	; c7a8 <_svfprintf_r+0x2c8>
    c518:	vldr	d9, [pc, #660]	; c7b0 <_svfprintf_r+0x2d0>
    c51c:	str	r3, [sp, #52]	; 0x34
    c51e:	str	r3, [sp, #116]	; 0x74
    c520:	str	r3, [sp, #112]	; 0x70
    c522:	str	r3, [sp, #68]	; 0x44
    c524:	str	r3, [sp, #24]
    c526:	add	r3, sp, #160	; 0xa0
    c528:	str	r3, [sp, #108]	; 0x6c
    c52a:	mov	r9, r3
    c52c:	ldrb.w	r3, [sl]
    c530:	mov	r4, sl
    c532:	cbz	r3, c570 <_svfprintf_r+0x90>
    c534:	cmp	r3, #37	; 0x25
    c536:	bne.n	c53e <_svfprintf_r+0x5e>
    c538:	b.n	c570 <_svfprintf_r+0x90>
    c53a:	cmp	r3, #37	; 0x25
    c53c:	beq.n	c546 <_svfprintf_r+0x66>
    c53e:	ldrb.w	r3, [r4, #1]!
    c542:	cmp	r3, #0
    c544:	bne.n	c53a <_svfprintf_r+0x5a>
    c546:	rsb	r5, sl, r4
    c54a:	cbz	r5, c570 <_svfprintf_r+0x90>
    c54c:	ldr	r3, [sp, #112]	; 0x70
    c54e:	ldr	r2, [sp, #116]	; 0x74
    c550:	str.w	sl, [r9]
    c554:	adds	r3, #1
    c556:	add	r2, r5
    c558:	cmp	r3, #7
    c55a:	str.w	r5, [r9, #4]
    c55e:	str	r2, [sp, #116]	; 0x74
    c560:	str	r3, [sp, #112]	; 0x70
    c562:	bgt.w	c6ac <_svfprintf_r+0x1cc>
    c566:	add.w	r9, r9, #8
    c56a:	ldr	r3, [sp, #24]
    c56c:	add	r3, r5
    c56e:	str	r3, [sp, #24]
    c570:	ldrb	r3, [r4, #0]
    c572:	cmp	r3, #0
    c574:	beq.w	c6be <_svfprintf_r+0x1de>
    c578:	movs	r3, #0
    c57a:	mov	r2, r3
    c57c:	strb.w	r3, [sp, #79]	; 0x4f
    c580:	mov	r1, r3
    c582:	str	r3, [sp, #28]
    c584:	mov	fp, r3
    c586:	mov.w	r8, #4294967295
    c58a:	ldrb	r3, [r4, #1]
    c58c:	add.w	sl, r4, #1
    c590:	mov	r5, r8
    c592:	add.w	sl, sl, #1
    c596:	sub.w	r0, r3, #32
    c59a:	cmp	r0, #88	; 0x58
    c59c:	bhi.w	cd90 <_svfprintf_r+0x8b0>
    c5a0:	tbh	[pc, r0, lsl #1]
    c5a4:	.word	0x03f60363
    c5a8:	.word	0x036b03f6
    c5ac:	.word	0x03f603f6
    c5b0:	.word	0x03f603f6
    c5b4:	.word	0x03f603f6
    c5b8:	.word	0x037e0370
    c5bc:	.word	0x005d03f6
    c5c0:	.word	0x03f600df
    c5c4:	.word	0x010c00fb
    c5c8:	.word	0x010c010c
    c5cc:	.word	0x010c010c
    c5d0:	.word	0x010c010c
    c5d4:	.word	0x010c010c
    c5d8:	.word	0x03f603f6
    c5dc:	.word	0x03f603f6
    c5e0:	.word	0x03f603f6
    c5e4:	.word	0x03f603f6
    c5e8:	.word	0x03f603f6
    c5ec:	.word	0x015e011c
    c5f0:	.word	0x015e03f6
    c5f4:	.word	0x03f603f6
    c5f8:	.word	0x03f603f6
    c5fc:	.word	0x03f602a1
    c600:	.word	0x02a603f6
    c604:	.word	0x03f603f6
    c608:	.word	0x03f603f6
    c60c:	.word	0x02d803f6
    c610:	.word	0x03f603f6
    c614:	.word	0x03f60305
    c618:	.word	0x03f603f6
    c61c:	.word	0x03f603f6
    c620:	.word	0x03f603f6
    c624:	.word	0x03f603f6
    c628:	.word	0x034303f6
    c62c:	.word	0x015e0356
    c630:	.word	0x015e015e
    c634:	.word	0x0356035e
    c638:	.word	0x03f603f6
    c63c:	.word	0x03f603a4
    c640:	.word	0x00a203b1
    c644:	.word	0x03c30062
    c648:	.word	0x03c803f6
    c64c:	.word	0x038303f6
    c650:	.word	0x03f603f6
    c654:	.short	0x038b
    c656:	ldr	r0, [sp, #28]
    c658:	str	r3, [sp, #36]	; 0x24
    c65a:	negs	r0, r0
    c65c:	str	r0, [sp, #28]
    c65e:	orr.w	fp, fp, #4
    c662:	ldrb.w	r3, [sl]
    c666:	b.n	c592 <_svfprintf_r+0xb2>
    c668:	mov	r8, r5
    c66a:	ldr	r0, [sp, #36]	; 0x24
    c66c:	movs	r1, #0
    c66e:	movs	r3, #48	; 0x30
    c670:	movs	r2, #120	; 0x78
    c672:	cmp	r8, r1
    c674:	strb.w	r3, [sp, #80]	; 0x50
    c678:	ldr	r4, [r0, #0]
    c67a:	strb.w	r2, [sp, #81]	; 0x51
    c67e:	add.w	r7, r0, #4
    c682:	mov.w	r5, #0
    c686:	strb.w	r1, [sp, #79]	; 0x4f
    c68a:	orr.w	r3, fp, #2
    c68e:	blt.w	cdca <_svfprintf_r+0x8ea>
    c692:	bic.w	r3, fp, #128	; 0x80
    c696:	orr.w	fp, r3, #2
    c69a:	orrs.w	r3, r4, r5
    c69e:	str	r7, [sp, #36]	; 0x24
    c6a0:	beq.w	cd76 <_svfprintf_r+0x896>
    c6a4:	mov	r7, r1
    c6a6:	str	r2, [sp, #48]	; 0x30
    c6a8:	ldr	r0, [pc, #268]	; (c7b8 <_svfprintf_r+0x2d8>)
    c6aa:	b.n	cc0a <_svfprintf_r+0x72a>
    c6ac:	add	r2, sp, #108	; 0x6c
    c6ae:	ldr	r1, [sp, #12]
    c6b0:	ldr	r0, [sp, #20]
    c6b2:	bl	11108 <__ssprint_r>
    c6b6:	cbnz	r0, c6cc <_svfprintf_r+0x1ec>
    c6b8:	add.w	r9, sp, #160	; 0xa0
    c6bc:	b.n	c56a <_svfprintf_r+0x8a>
    c6be:	ldr	r3, [sp, #116]	; 0x74
    c6c0:	cbz	r3, c6cc <_svfprintf_r+0x1ec>
    c6c2:	ldr	r0, [sp, #20]
    c6c4:	ldr	r1, [sp, #12]
    c6c6:	add	r2, sp, #108	; 0x6c
    c6c8:	bl	11108 <__ssprint_r>
    c6cc:	ldr	r3, [sp, #12]
    c6ce:	ldrh	r3, [r3, #12]
    c6d0:	tst.w	r3, #64	; 0x40
    c6d4:	ldr	r3, [sp, #24]
    c6d6:	it	ne
    c6d8:	movne.w	r3, #4294967295
    c6dc:	mov	r0, r3
    c6de:	add	sp, #228	; 0xe4
    c6e0:	vpop	{d8-d10}
    c6e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6e8:	str	r3, [sp, #48]	; 0x30
    c6ea:	mov	r8, r5
    c6ec:	cmp	r2, #0
    c6ee:	bne.w	da26 <_svfprintf_r+0x1546>
    c6f2:	ands.w	r3, fp, #32
    c6f6:	beq.w	cb06 <_svfprintf_r+0x626>
    c6fa:	ldr	r7, [sp, #36]	; 0x24
    c6fc:	adds	r7, #7
    c6fe:	bic.w	r3, r7, #7
    c702:	movs	r7, #0
    c704:	add.w	r2, r3, #8
    c708:	cmp	r8, r7
    c70a:	str	r2, [sp, #36]	; 0x24
    c70c:	ldrd	r4, r5, [r3]
    c710:	strb.w	r7, [sp, #79]	; 0x4f
    c714:	blt.w	d3d4 <_svfprintf_r+0xef4>
    c718:	orrs.w	r3, r4, r5
    c71c:	bic.w	fp, fp, #128	; 0x80
    c720:	beq.w	cdba <_svfprintf_r+0x8da>
    c724:	add	r6, sp, #160	; 0xa0
    c726:	lsrs	r2, r4, #3
    c728:	orr.w	r2, r2, r5, lsl #29
    c72c:	lsrs	r1, r5, #3
    c72e:	and.w	r3, r4, #7
    c732:	mov	r5, r1
    c734:	mov	r4, r2
    c736:	adds	r3, #48	; 0x30
    c738:	orrs.w	r2, r4, r5
    c73c:	strb.w	r3, [r6, #-1]!
    c740:	bne.n	c726 <_svfprintf_r+0x246>
    c742:	tst.w	fp, #1
    c746:	beq.w	cb98 <_svfprintf_r+0x6b8>
    c74a:	cmp	r3, #48	; 0x30
    c74c:	beq.w	cb98 <_svfprintf_r+0x6b8>
    c750:	movs	r2, #48	; 0x30
    c752:	subs	r3, r6, #1
    c754:	strb.w	r2, [r6, #-1]
    c758:	add	r2, sp, #160	; 0xa0
    c75a:	subs	r2, r2, r3
    c75c:	str	r2, [sp, #32]
    c75e:	mov	r6, r3
    c760:	b.n	cb9e <_svfprintf_r+0x6be>
    c762:	ldrb.w	r3, [sl]
    c766:	cmp	r3, #42	; 0x2a
    c768:	add.w	r4, sl, #1
    c76c:	beq.w	d9ce <_svfprintf_r+0x14ee>
    c770:	sub.w	r0, r3, #48	; 0x30
    c774:	cmp	r0, #9
    c776:	it	ls
    c778:	movls	r5, #0
    c77a:	bhi.w	d928 <_svfprintf_r+0x1448>
    c77e:	ldrb.w	r3, [r4], #1
    c782:	add.w	r5, r5, r5, lsl #2
    c786:	add.w	r5, r0, r5, lsl #1
    c78a:	sub.w	r0, r3, #48	; 0x30
    c78e:	cmp	r0, #9
    c790:	bls.n	c77e <_svfprintf_r+0x29e>
    c792:	orr.w	r5, r5, r5, asr #31
    c796:	mov	sl, r4
    c798:	b.n	c596 <_svfprintf_r+0xb6>
    c79a:	orr.w	fp, fp, #128	; 0x80
    c79e:	ldrb.w	r3, [sl]
    c7a2:	b.n	c592 <_svfprintf_r+0xb2>
    c7a4:	nop.w
	...
    c7b0:	.word	0xffffffff
    c7b4:	.word	0x7fefffff
    c7b8:	.word	0x20000b84
    c7bc:	sub.w	r0, r3, #48	; 0x30
    c7c0:	movs	r3, #0
    c7c2:	mov	r4, r3
    c7c4:	ldrb.w	r3, [sl], #1
    c7c8:	add.w	r4, r4, r4, lsl #2
    c7cc:	add.w	r4, r0, r4, lsl #1
    c7d0:	sub.w	r0, r3, #48	; 0x30
    c7d4:	cmp	r0, #9
    c7d6:	bls.n	c7c4 <_svfprintf_r+0x2e4>
    c7d8:	str	r4, [sp, #28]
    c7da:	b.n	c596 <_svfprintf_r+0xb6>
    c7dc:	str	r3, [sp, #48]	; 0x30
    c7de:	mov	r8, r5
    c7e0:	cmp	r2, #0
    c7e2:	bne.w	da3e <_svfprintf_r+0x155e>
    c7e6:	orr.w	fp, fp, #16
    c7ea:	tst.w	fp, #32
    c7ee:	beq.w	d1f8 <_svfprintf_r+0xd18>
    c7f2:	ldr	r7, [sp, #36]	; 0x24
    c7f4:	adds	r7, #7
    c7f6:	bic.w	r7, r7, #7
    c7fa:	ldrd	r2, r3, [r7]
    c7fe:	add.w	r1, r7, #8
    c802:	str	r1, [sp, #36]	; 0x24
    c804:	mov	r4, r2
    c806:	mov	r5, r3
    c808:	cmp	r2, #0
    c80a:	sbcs.w	r3, r3, #0
    c80e:	blt.w	d280 <_svfprintf_r+0xda0>
    c812:	cmp.w	r8, #0
    c816:	ldrb.w	r7, [sp, #79]	; 0x4f
    c81a:	blt.w	cb88 <_svfprintf_r+0x6a8>
    c81e:	orrs.w	r3, r4, r5
    c822:	bic.w	fp, fp, #128	; 0x80
    c826:	beq.w	d016 <_svfprintf_r+0xb36>
    c82a:	cmp	r5, #0
    c82c:	it	eq
    c82e:	cmpeq	r4, #10
    c830:	bcc.w	cb90 <_svfprintf_r+0x6b0>
    c834:	add	r6, sp, #160	; 0xa0
    c836:	mov	r0, r4
    c838:	mov	r1, r5
    c83a:	movs	r2, #10
    c83c:	movs	r3, #0
    c83e:	bl	a32c <__aeabi_uldivmod>
    c842:	adds	r2, #48	; 0x30
    c844:	strb.w	r2, [r6, #-1]!
    c848:	mov	r0, r4
    c84a:	mov	r1, r5
    c84c:	movs	r3, #0
    c84e:	movs	r2, #10
    c850:	bl	a32c <__aeabi_uldivmod>
    c854:	mov	r4, r0
    c856:	mov	r5, r1
    c858:	orrs.w	r3, r4, r5
    c85c:	bne.n	c836 <_svfprintf_r+0x356>
    c85e:	b.n	cb98 <_svfprintf_r+0x6b8>
    c860:	str	r3, [sp, #48]	; 0x30
    c862:	mov	r8, r5
    c864:	cmp	r2, #0
    c866:	bne.w	da36 <_svfprintf_r+0x1556>
    c86a:	ldr	r7, [sp, #36]	; 0x24
    c86c:	tst.w	fp, #8
    c870:	add.w	r7, r7, #7
    c874:	beq.w	d4f8 <_svfprintf_r+0x1018>
    c878:	bic.w	r3, r7, #7
    c87c:	vldr	d8, [r3]
    c880:	add.w	r2, r3, #8
    c884:	str	r2, [sp, #36]	; 0x24
    c886:	vabs.f64	d7, d8
    c88a:	vcmp.f64	d7, d9
    c88e:	vmrs	APSR_nzcv, fpscr
    c892:	ble.w	d40e <_svfprintf_r+0xf2e>
    c896:	vcmpe.f64	d8, #0.0
    c89a:	vmrs	APSR_nzcv, fpscr
    c89e:	bmi.w	d836 <_svfprintf_r+0x1356>
    c8a2:	ldrb.w	r7, [sp, #79]	; 0x4f
    c8a6:	ldr	r6, [pc, #668]	; (cb44 <_svfprintf_r+0x664>)
    c8a8:	ldr	r3, [pc, #668]	; (cb48 <_svfprintf_r+0x668>)
    c8aa:	ldr	r1, [sp, #48]	; 0x30
    c8ac:	movs	r2, #3
    c8ae:	mov.w	r8, #0
    c8b2:	str	r2, [sp, #16]
    c8b4:	bic.w	fp, fp, #128	; 0x80
    c8b8:	cmp	r1, #71	; 0x47
    c8ba:	it	le
    c8bc:	movle	r6, r3
    c8be:	str	r2, [sp, #32]
    c8c0:	str.w	r8, [sp, #56]	; 0x38
    c8c4:	cbz	r7, c8cc <_svfprintf_r+0x3ec>
    c8c6:	ldr	r3, [sp, #16]
    c8c8:	adds	r3, #1
    c8ca:	str	r3, [sp, #16]
    c8cc:	ands.w	r3, fp, #2
    c8d0:	str	r3, [sp, #40]	; 0x28
    c8d2:	beq.n	c8da <_svfprintf_r+0x3fa>
    c8d4:	ldr	r3, [sp, #16]
    c8d6:	adds	r3, #2
    c8d8:	str	r3, [sp, #16]
    c8da:	ands.w	r3, fp, #132	; 0x84
    c8de:	str	r3, [sp, #44]	; 0x2c
    c8e0:	bne.w	cde4 <_svfprintf_r+0x904>
    c8e4:	ldr	r3, [sp, #28]
    c8e6:	ldr	r2, [sp, #16]
    c8e8:	subs	r4, r3, r2
    c8ea:	cmp	r4, #0
    c8ec:	ble.w	cde4 <_svfprintf_r+0x904>
    c8f0:	cmp	r4, #16
    c8f2:	ldr	r1, [sp, #116]	; 0x74
    c8f4:	ldr	r2, [sp, #112]	; 0x70
    c8f6:	ldr	r7, [pc, #596]	; (cb4c <_svfprintf_r+0x66c>)
    c8f8:	ble.n	c942 <_svfprintf_r+0x462>
    c8fa:	mov	r0, r9
    c8fc:	movs	r5, #16
    c8fe:	mov	r9, r8
    c900:	mov	r8, r6
    c902:	ldr	r6, [sp, #20]
    c904:	b.n	c910 <_svfprintf_r+0x430>
    c906:	subs	r4, #16
    c908:	cmp	r4, #16
    c90a:	add.w	r0, r0, #8
    c90e:	ble.n	c93c <_svfprintf_r+0x45c>
    c910:	adds	r2, #1
    c912:	adds	r1, #16
    c914:	cmp	r2, #7
    c916:	str	r1, [sp, #116]	; 0x74
    c918:	str	r2, [sp, #112]	; 0x70
    c91a:	str	r7, [r0, #0]
    c91c:	str	r5, [r0, #4]
    c91e:	ble.n	c906 <_svfprintf_r+0x426>
    c920:	add	r2, sp, #108	; 0x6c
    c922:	ldr	r1, [sp, #12]
    c924:	mov	r0, r6
    c926:	bl	11108 <__ssprint_r>
    c92a:	cmp	r0, #0
    c92c:	bne.w	c6cc <_svfprintf_r+0x1ec>
    c930:	subs	r4, #16
    c932:	cmp	r4, #16
    c934:	ldr	r1, [sp, #116]	; 0x74
    c936:	ldr	r2, [sp, #112]	; 0x70
    c938:	add	r0, sp, #160	; 0xa0
    c93a:	bgt.n	c910 <_svfprintf_r+0x430>
    c93c:	mov	r6, r8
    c93e:	mov	r8, r9
    c940:	mov	r9, r0
    c942:	adds	r2, #1
    c944:	adds	r3, r4, r1
    c946:	cmp	r2, #7
    c948:	str	r3, [sp, #116]	; 0x74
    c94a:	str	r2, [sp, #112]	; 0x70
    c94c:	str.w	r7, [r9]
    c950:	str.w	r4, [r9, #4]
    c954:	bgt.w	d11c <_svfprintf_r+0xc3c>
    c958:	ldrb.w	r7, [sp, #79]	; 0x4f
    c95c:	add.w	r9, r9, #8
    c960:	cbz	r7, c980 <_svfprintf_r+0x4a0>
    c962:	ldr	r2, [sp, #112]	; 0x70
    c964:	adds	r2, #1
    c966:	adds	r3, #1
    c968:	add.w	r0, sp, #79	; 0x4f
    c96c:	movs	r1, #1
    c96e:	cmp	r2, #7
    c970:	str	r3, [sp, #116]	; 0x74
    c972:	str	r2, [sp, #112]	; 0x70
    c974:	stmia.w	r9, {r0, r1}
    c978:	bgt.w	d03a <_svfprintf_r+0xb5a>
    c97c:	add.w	r9, r9, #8
    c980:	ldr	r2, [sp, #40]	; 0x28
    c982:	cbz	r2, c9a0 <_svfprintf_r+0x4c0>
    c984:	ldr	r2, [sp, #112]	; 0x70
    c986:	adds	r2, #1
    c988:	adds	r3, #2
    c98a:	add	r0, sp, #80	; 0x50
    c98c:	movs	r1, #2
    c98e:	cmp	r2, #7
    c990:	str	r3, [sp, #116]	; 0x74
    c992:	str	r2, [sp, #112]	; 0x70
    c994:	stmia.w	r9, {r0, r1}
    c998:	bgt.w	d052 <_svfprintf_r+0xb72>
    c99c:	add.w	r9, r9, #8
    c9a0:	ldr	r2, [sp, #44]	; 0x2c
    c9a2:	cmp	r2, #128	; 0x80
    c9a4:	beq.w	cea4 <_svfprintf_r+0x9c4>
    c9a8:	ldr	r2, [sp, #32]
    c9aa:	rsb	r4, r2, r8
    c9ae:	cmp	r4, #0
    c9b0:	ble.n	ca1c <_svfprintf_r+0x53c>
    c9b2:	cmp	r4, #16
    c9b4:	ldr	r2, [sp, #112]	; 0x70
    c9b6:	ldr	r7, [pc, #408]	; (cb50 <_svfprintf_r+0x670>)
    c9b8:	ble.n	ca02 <_svfprintf_r+0x522>
    c9ba:	mov	r1, r9
    c9bc:	mov.w	r8, #16
    c9c0:	mov	r9, r6
    c9c2:	ldr	r5, [sp, #20]
    c9c4:	ldr	r6, [sp, #12]
    c9c6:	b.n	c9d2 <_svfprintf_r+0x4f2>
    c9c8:	subs	r4, #16
    c9ca:	cmp	r4, #16
    c9cc:	add.w	r1, r1, #8
    c9d0:	ble.n	c9fe <_svfprintf_r+0x51e>
    c9d2:	adds	r2, #1
    c9d4:	adds	r3, #16
    c9d6:	cmp	r2, #7
    c9d8:	str	r3, [sp, #116]	; 0x74
    c9da:	str	r2, [sp, #112]	; 0x70
    c9dc:	stmia.w	r1, {r7, r8}
    c9e0:	ble.n	c9c8 <_svfprintf_r+0x4e8>
    c9e2:	add	r2, sp, #108	; 0x6c
    c9e4:	mov	r1, r6
    c9e6:	mov	r0, r5
    c9e8:	bl	11108 <__ssprint_r>
    c9ec:	cmp	r0, #0
    c9ee:	bne.w	c6cc <_svfprintf_r+0x1ec>
    c9f2:	subs	r4, #16
    c9f4:	cmp	r4, #16
    c9f6:	ldr	r3, [sp, #116]	; 0x74
    c9f8:	ldr	r2, [sp, #112]	; 0x70
    c9fa:	add	r1, sp, #160	; 0xa0
    c9fc:	bgt.n	c9d2 <_svfprintf_r+0x4f2>
    c9fe:	mov	r6, r9
    ca00:	mov	r9, r1
    ca02:	adds	r2, #1
    ca04:	add	r3, r4
    ca06:	cmp	r2, #7
    ca08:	str	r3, [sp, #116]	; 0x74
    ca0a:	str	r2, [sp, #112]	; 0x70
    ca0c:	str.w	r7, [r9]
    ca10:	str.w	r4, [r9, #4]
    ca14:	bgt.w	d022 <_svfprintf_r+0xb42>
    ca18:	add.w	r9, r9, #8
    ca1c:	tst.w	fp, #256	; 0x100
    ca20:	bne.w	cde8 <_svfprintf_r+0x908>
    ca24:	ldr	r2, [sp, #112]	; 0x70
    ca26:	ldr	r0, [sp, #32]
    ca28:	str.w	r6, [r9]
    ca2c:	adds	r2, #1
    ca2e:	add	r3, r0
    ca30:	cmp	r2, #7
    ca32:	str	r3, [sp, #116]	; 0x74
    ca34:	str.w	r0, [r9, #4]
    ca38:	str	r2, [sp, #112]	; 0x70
    ca3a:	bgt.w	cfc2 <_svfprintf_r+0xae2>
    ca3e:	add.w	r9, r9, #8
    ca42:	tst.w	fp, #4
    ca46:	beq.n	cac6 <_svfprintf_r+0x5e6>
    ca48:	ldr	r2, [sp, #28]
    ca4a:	ldr	r1, [sp, #16]
    ca4c:	subs	r4, r2, r1
    ca4e:	cmp	r4, #0
    ca50:	ble.n	cac6 <_svfprintf_r+0x5e6>
    ca52:	cmp	r4, #16
    ca54:	ldr	r2, [sp, #112]	; 0x70
    ca56:	ldr	r7, [pc, #244]	; (cb4c <_svfprintf_r+0x66c>)
    ca58:	ble.n	caa0 <_svfprintf_r+0x5c0>
    ca5a:	movs	r5, #16
    ca5c:	ldr	r6, [sp, #20]
    ca5e:	ldr.w	r8, [sp, #12]
    ca62:	b.n	ca6e <_svfprintf_r+0x58e>
    ca64:	subs	r4, #16
    ca66:	cmp	r4, #16
    ca68:	add.w	r9, r9, #8
    ca6c:	ble.n	caa0 <_svfprintf_r+0x5c0>
    ca6e:	adds	r2, #1
    ca70:	adds	r3, #16
    ca72:	cmp	r2, #7
    ca74:	str	r3, [sp, #116]	; 0x74
    ca76:	str	r2, [sp, #112]	; 0x70
    ca78:	str.w	r7, [r9]
    ca7c:	str.w	r5, [r9, #4]
    ca80:	ble.n	ca64 <_svfprintf_r+0x584>
    ca82:	add	r2, sp, #108	; 0x6c
    ca84:	mov	r1, r8
    ca86:	mov	r0, r6
    ca88:	bl	11108 <__ssprint_r>
    ca8c:	cmp	r0, #0
    ca8e:	bne.w	c6cc <_svfprintf_r+0x1ec>
    ca92:	subs	r4, #16
    ca94:	cmp	r4, #16
    ca96:	ldr	r3, [sp, #116]	; 0x74
    ca98:	ldr	r2, [sp, #112]	; 0x70
    ca9a:	add.w	r9, sp, #160	; 0xa0
    ca9e:	bgt.n	ca6e <_svfprintf_r+0x58e>
    caa0:	adds	r2, #1
    caa2:	add	r3, r4
    caa4:	cmp	r2, #7
    caa6:	str	r3, [sp, #116]	; 0x74
    caa8:	str	r2, [sp, #112]	; 0x70
    caaa:	str.w	r7, [r9]
    caae:	str.w	r4, [r9, #4]
    cab2:	ble.n	cac6 <_svfprintf_r+0x5e6>
    cab4:	add	r2, sp, #108	; 0x6c
    cab6:	ldr	r1, [sp, #12]
    cab8:	ldr	r0, [sp, #20]
    caba:	bl	11108 <__ssprint_r>
    cabe:	cmp	r0, #0
    cac0:	bne.w	c6cc <_svfprintf_r+0x1ec>
    cac4:	ldr	r3, [sp, #116]	; 0x74
    cac6:	ldr	r2, [sp, #24]
    cac8:	ldr	r1, [sp, #28]
    caca:	ldr	r0, [sp, #16]
    cacc:	cmp	r1, r0
    cace:	ite	ge
    cad0:	addge	r2, r2, r1
    cad2:	addlt	r2, r2, r0
    cad4:	str	r2, [sp, #24]
    cad6:	cmp	r3, #0
    cad8:	bne.w	cfda <_svfprintf_r+0xafa>
    cadc:	movs	r3, #0
    cade:	str	r3, [sp, #112]	; 0x70
    cae0:	add.w	r9, sp, #160	; 0xa0
    cae4:	b.n	c52c <_svfprintf_r+0x4c>
    cae6:	orr.w	fp, fp, #8
    caea:	ldrb.w	r3, [sl]
    caee:	b.n	c592 <_svfprintf_r+0xb2>
    caf0:	str	r3, [sp, #48]	; 0x30
    caf2:	mov	r8, r5
    caf4:	cmp	r2, #0
    caf6:	bne.w	da2e <_svfprintf_r+0x154e>
    cafa:	orr.w	fp, fp, #16
    cafe:	ands.w	r3, fp, #32
    cb02:	bne.w	c6fa <_svfprintf_r+0x21a>
    cb06:	ands.w	r2, fp, #16
    cb0a:	bne.w	d230 <_svfprintf_r+0xd50>
    cb0e:	ands.w	r3, fp, #64	; 0x40
    cb12:	beq.w	d230 <_svfprintf_r+0xd50>
    cb16:	ldr	r1, [sp, #36]	; 0x24
    cb18:	strb.w	r2, [sp, #79]	; 0x4f
    cb1c:	mov	r3, r1
    cb1e:	cmp.w	r8, #0
    cb22:	add.w	r3, r3, #4
    cb26:	ldrh	r4, [r1, #0]
    cb28:	mov.w	r5, #0
    cb2c:	blt.w	d686 <_svfprintf_r+0x11a6>
    cb30:	orrs.w	r1, r4, r5
    cb34:	bic.w	fp, fp, #128	; 0x80
    cb38:	str	r3, [sp, #36]	; 0x24
    cb3a:	beq.w	cdba <_svfprintf_r+0x8da>
    cb3e:	mov	r7, r2
    cb40:	b.n	c724 <_svfprintf_r+0x244>
    cb42:	nop
    cb44:	.word	0x20000b64
    cb48:	.word	0x20000b60
    cb4c:	.word	0x2000087c
    cb50:	.word	0x20000c28
    cb54:	str	r3, [sp, #48]	; 0x30
    cb56:	mov	r8, r5
    cb58:	cmp	r2, #0
    cb5a:	bne.w	da10 <_svfprintf_r+0x1530>
    cb5e:	orr.w	fp, fp, #16
    cb62:	ands.w	r3, fp, #32
    cb66:	beq.w	d138 <_svfprintf_r+0xc58>
    cb6a:	ldr	r7, [sp, #36]	; 0x24
    cb6c:	adds	r7, #7
    cb6e:	bic.w	r3, r7, #7
    cb72:	movs	r7, #0
    cb74:	add.w	r2, r3, #8
    cb78:	cmp	r8, r7
    cb7a:	str	r2, [sp, #36]	; 0x24
    cb7c:	ldrd	r4, r5, [r3]
    cb80:	strb.w	r7, [sp, #79]	; 0x4f
    cb84:	bge.w	c81e <_svfprintf_r+0x33e>
    cb88:	orrs.w	r3, r4, r5
    cb8c:	bne.w	c82a <_svfprintf_r+0x34a>
    cb90:	add	r6, sp, #224	; 0xe0
    cb92:	adds	r4, #48	; 0x30
    cb94:	strb.w	r4, [r6, #-65]!
    cb98:	add	r3, sp, #160	; 0xa0
    cb9a:	subs	r3, r3, r6
    cb9c:	str	r3, [sp, #32]
    cb9e:	ldr	r3, [sp, #32]
    cba0:	cmp	r3, r8
    cba2:	it	lt
    cba4:	movlt	r3, r8
    cba6:	str	r3, [sp, #16]
    cba8:	movs	r3, #0
    cbaa:	str	r3, [sp, #56]	; 0x38
    cbac:	b.n	c8c4 <_svfprintf_r+0x3e4>
    cbae:	str	r3, [sp, #48]	; 0x30
    cbb0:	mov	r8, r5
    cbb2:	cmp	r2, #0
    cbb4:	bne.w	da08 <_svfprintf_r+0x1528>
    cbb8:	tst.w	fp, #32
    cbbc:	ldr	r0, [pc, #776]	; (cec8 <_svfprintf_r+0x9e8>)
    cbbe:	beq.w	ccce <_svfprintf_r+0x7ee>
    cbc2:	ldr	r7, [sp, #36]	; 0x24
    cbc4:	adds	r7, #7
    cbc6:	bic.w	r3, r7, #7
    cbca:	ldrd	r4, r5, [r3]
    cbce:	add.w	r2, r3, #8
    cbd2:	str	r2, [sp, #36]	; 0x24
    cbd4:	ands.w	r7, fp, #1
    cbd8:	beq.w	d06a <_svfprintf_r+0xb8a>
    cbdc:	orrs.w	r3, r4, r5
    cbe0:	beq.w	d52a <_svfprintf_r+0x104a>
    cbe4:	movs	r7, #0
    cbe6:	movs	r3, #48	; 0x30
    cbe8:	ldrb.w	r2, [sp, #48]	; 0x30
    cbec:	strb.w	r3, [sp, #80]	; 0x50
    cbf0:	cmp	r8, r7
    cbf2:	strb.w	r2, [sp, #81]	; 0x51
    cbf6:	strb.w	r7, [sp, #79]	; 0x4f
    cbfa:	orr.w	r3, fp, #2
    cbfe:	blt.w	d830 <_svfprintf_r+0x1350>
    cc02:	bic.w	r3, fp, #128	; 0x80
    cc06:	orr.w	fp, r3, #2
    cc0a:	add	r6, sp, #160	; 0xa0
    cc0c:	lsrs	r3, r4, #4
    cc0e:	and.w	r1, r4, #15
    cc12:	orr.w	r3, r3, r5, lsl #28
    cc16:	lsrs	r2, r5, #4
    cc18:	mov	r4, r3
    cc1a:	mov	r5, r2
    cc1c:	ldrb	r3, [r0, r1]
    cc1e:	strb.w	r3, [r6, #-1]!
    cc22:	orrs.w	r3, r4, r5
    cc26:	bne.n	cc0c <_svfprintf_r+0x72c>
    cc28:	b.n	cb98 <_svfprintf_r+0x6b8>
    cc2a:	ldr	r1, [sp, #36]	; 0x24
    cc2c:	str	r3, [sp, #48]	; 0x30
    cc2e:	ldr	r2, [r1, #0]
    cc30:	strb.w	r2, [sp, #120]	; 0x78
    cc34:	movs	r3, #0
    cc36:	mov	r2, r1
    cc38:	mov	r7, r3
    cc3a:	strb.w	r3, [sp, #79]	; 0x4f
    cc3e:	adds	r2, #4
    cc40:	movs	r3, #1
    cc42:	str	r3, [sp, #16]
    cc44:	mov	r8, r7
    cc46:	str	r7, [sp, #56]	; 0x38
    cc48:	str	r2, [sp, #36]	; 0x24
    cc4a:	str	r3, [sp, #32]
    cc4c:	add	r6, sp, #120	; 0x78
    cc4e:	b.n	c8cc <_svfprintf_r+0x3ec>
    cc50:	str	r3, [sp, #48]	; 0x30
    cc52:	mov	r8, r5
    cc54:	cmp	r2, #0
    cc56:	beq.w	c7ea <_svfprintf_r+0x30a>
    cc5a:	strb.w	r1, [sp, #79]	; 0x4f
    cc5e:	b.n	c7ea <_svfprintf_r+0x30a>
    cc60:	orr.w	fp, fp, #64	; 0x40
    cc64:	ldrb.w	r3, [sl]
    cc68:	b.n	c592 <_svfprintf_r+0xb2>
    cc6a:	ldrb.w	r3, [sl]
    cc6e:	cmp	r1, #0
    cc70:	bne.w	c592 <_svfprintf_r+0xb2>
    cc74:	movs	r2, #1
    cc76:	movs	r1, #32
    cc78:	b.n	c592 <_svfprintf_r+0xb2>
    cc7a:	orr.w	fp, fp, #1
    cc7e:	ldrb.w	r3, [sl]
    cc82:	b.n	c592 <_svfprintf_r+0xb2>
    cc84:	ldr	r4, [sp, #36]	; 0x24
    cc86:	ldr	r3, [r4, #0]
    cc88:	str	r3, [sp, #28]
    cc8a:	mov	r0, r3
    cc8c:	cmp	r0, #0
    cc8e:	mov	r3, r4
    cc90:	add.w	r3, r3, #4
    cc94:	blt.w	c656 <_svfprintf_r+0x176>
    cc98:	str	r3, [sp, #36]	; 0x24
    cc9a:	ldrb.w	r3, [sl]
    cc9e:	b.n	c592 <_svfprintf_r+0xb2>
    cca0:	ldrb.w	r3, [sl]
    cca4:	movs	r2, #1
    cca6:	movs	r1, #43	; 0x2b
    cca8:	b.n	c592 <_svfprintf_r+0xb2>
    ccaa:	str	r3, [sp, #48]	; 0x30
    ccac:	mov	r8, r5
    ccae:	cmp	r2, #0
    ccb0:	beq.w	cb62 <_svfprintf_r+0x682>
    ccb4:	strb.w	r1, [sp, #79]	; 0x4f
    ccb8:	b.n	cb62 <_svfprintf_r+0x682>
    ccba:	str	r3, [sp, #48]	; 0x30
    ccbc:	mov	r8, r5
    ccbe:	cmp	r2, #0
    ccc0:	bne.w	da18 <_svfprintf_r+0x1538>
    ccc4:	tst.w	fp, #32
    ccc8:	ldr	r0, [pc, #512]	; (cecc <_svfprintf_r+0x9ec>)
    ccca:	bne.w	cbc2 <_svfprintf_r+0x6e2>
    ccce:	ldr	r2, [sp, #36]	; 0x24
    ccd0:	tst.w	fp, #16
    ccd4:	mov	r3, r2
    ccd6:	bne.w	d25c <_svfprintf_r+0xd7c>
    ccda:	tst.w	fp, #64	; 0x40
    ccde:	beq.w	d25c <_svfprintf_r+0xd7c>
    cce2:	adds	r3, #4
    cce4:	ldrh	r4, [r2, #0]
    cce6:	str	r3, [sp, #36]	; 0x24
    cce8:	movs	r5, #0
    ccea:	b.n	cbd4 <_svfprintf_r+0x6f4>
    ccec:	ldrb.w	r3, [sl]
    ccf0:	cmp	r3, #108	; 0x6c
    ccf2:	ittte	eq
    ccf4:	ldrbeq.w	r3, [sl, #1]
    ccf8:	orreq.w	fp, fp, #32
    ccfc:	addeq.w	sl, sl, #1
    cd00:	orrne.w	fp, fp, #16
    cd04:	b.n	c592 <_svfprintf_r+0xb2>
    cd06:	cmp	r2, #0
    cd08:	bne.w	d9ea <_svfprintf_r+0x150a>
    cd0c:	tst.w	fp, #32
    cd10:	beq.w	d3e0 <_svfprintf_r+0xf00>
    cd14:	ldr	r2, [sp, #36]	; 0x24
    cd16:	ldr	r1, [sp, #24]
    cd18:	ldr	r3, [r2, #0]
    cd1a:	asrs	r5, r1, #31
    cd1c:	mov	r0, r1
    cd1e:	adds	r2, #4
    cd20:	mov	r1, r5
    cd22:	str	r2, [sp, #36]	; 0x24
    cd24:	strd	r0, r1, [r3]
    cd28:	b.n	c52c <_svfprintf_r+0x4c>
    cd2a:	orr.w	fp, fp, #32
    cd2e:	ldrb.w	r3, [sl]
    cd32:	b.n	c592 <_svfprintf_r+0xb2>
    cd34:	ldr	r2, [sp, #36]	; 0x24
    cd36:	str	r3, [sp, #48]	; 0x30
    cd38:	ldr	r6, [r2, #0]
    cd3a:	movs	r4, #0
    cd3c:	strb.w	r4, [sp, #79]	; 0x4f
    cd40:	adds	r7, r2, #4
    cd42:	cmp	r6, #0
    cd44:	beq.w	d812 <_svfprintf_r+0x1332>
    cd48:	cmp	r5, #0
    cd4a:	blt.w	d692 <_svfprintf_r+0x11b2>
    cd4e:	mov	r2, r5
    cd50:	mov	r1, r4
    cd52:	mov	r0, r6
    cd54:	bl	acc0 <memchr>
    cd58:	cmp	r0, #0
    cd5a:	beq.w	d8f6 <_svfprintf_r+0x1416>
    cd5e:	subs	r3, r0, r6
    cd60:	str	r3, [sp, #32]
    cd62:	mov	r8, r4
    cd64:	bic.w	r3, r3, r3, asr #31
    cd68:	str	r7, [sp, #36]	; 0x24
    cd6a:	str	r3, [sp, #16]
    cd6c:	str.w	r8, [sp, #56]	; 0x38
    cd70:	ldrb.w	r7, [sp, #79]	; 0x4f
    cd74:	b.n	c8c4 <_svfprintf_r+0x3e4>
    cd76:	ldr	r0, [pc, #340]	; (cecc <_svfprintf_r+0x9ec>)
    cd78:	str	r2, [sp, #48]	; 0x30
    cd7a:	cmp.w	r8, #0
    cd7e:	bne.w	d08a <_svfprintf_r+0xbaa>
    cd82:	mov	r7, r8
    cd84:	mov.w	r8, #0
    cd88:	str.w	r8, [sp, #32]
    cd8c:	add	r6, sp, #160	; 0xa0
    cd8e:	b.n	cb9e <_svfprintf_r+0x6be>
    cd90:	str	r3, [sp, #48]	; 0x30
    cd92:	cmp	r2, #0
    cd94:	bne.w	d9f2 <_svfprintf_r+0x1512>
    cd98:	ldr	r2, [sp, #48]	; 0x30
    cd9a:	cmp	r2, #0
    cd9c:	beq.w	c6be <_svfprintf_r+0x1de>
    cda0:	movs	r3, #0
    cda2:	movs	r1, #1
    cda4:	mov	r7, r3
    cda6:	str	r1, [sp, #16]
    cda8:	strb.w	r2, [sp, #120]	; 0x78
    cdac:	strb.w	r3, [sp, #79]	; 0x4f
    cdb0:	mov	r8, r3
    cdb2:	str	r3, [sp, #56]	; 0x38
    cdb4:	str	r1, [sp, #32]
    cdb6:	add	r6, sp, #120	; 0x78
    cdb8:	b.n	c8cc <_svfprintf_r+0x3ec>
    cdba:	cmp.w	r8, #0
    cdbe:	beq.w	d8d8 <_svfprintf_r+0x13f8>
    cdc2:	movs	r7, #0
    cdc4:	movs	r4, #0
    cdc6:	movs	r5, #0
    cdc8:	b.n	c724 <_svfprintf_r+0x244>
    cdca:	ldr	r0, [pc, #256]	; (cecc <_svfprintf_r+0x9ec>)
    cdcc:	str	r2, [sp, #48]	; 0x30
    cdce:	mov	fp, r3
    cdd0:	orrs.w	r3, r4, r5
    cdd4:	str	r7, [sp, #36]	; 0x24
    cdd6:	mov.w	r7, #0
    cdda:	bne.w	cc0a <_svfprintf_r+0x72a>
    cdde:	movs	r4, #0
    cde0:	movs	r5, #0
    cde2:	b.n	cc0a <_svfprintf_r+0x72a>
    cde4:	ldr	r3, [sp, #116]	; 0x74
    cde6:	b.n	c960 <_svfprintf_r+0x480>
    cde8:	ldr	r2, [sp, #48]	; 0x30
    cdea:	cmp	r2, #101	; 0x65
    cdec:	ble.w	cf32 <_svfprintf_r+0xa52>
    cdf0:	vcmp.f64	d8, #0.0
    cdf4:	vmrs	APSR_nzcv, fpscr
    cdf8:	bne.w	d08e <_svfprintf_r+0xbae>
    cdfc:	ldr	r2, [sp, #112]	; 0x70
    cdfe:	ldr	r1, [pc, #208]	; (ced0 <_svfprintf_r+0x9f0>)
    ce00:	str.w	r1, [r9]
    ce04:	adds	r2, #1
    ce06:	adds	r3, #1
    ce08:	movs	r1, #1
    ce0a:	cmp	r2, #7
    ce0c:	str	r3, [sp, #116]	; 0x74
    ce0e:	str	r2, [sp, #112]	; 0x70
    ce10:	str.w	r1, [r9, #4]
    ce14:	bgt.w	d53c <_svfprintf_r+0x105c>
    ce18:	add.w	r9, r9, #8
    ce1c:	ldr	r2, [sp, #84]	; 0x54
    ce1e:	ldr	r1, [sp, #52]	; 0x34
    ce20:	cmp	r2, r1
    ce22:	blt.n	ce2c <_svfprintf_r+0x94c>
    ce24:	tst.w	fp, #1
    ce28:	beq.w	ca42 <_svfprintf_r+0x562>
    ce2c:	ldr	r2, [sp, #112]	; 0x70
    ce2e:	ldr	r0, [sp, #60]	; 0x3c
    ce30:	ldr	r1, [sp, #64]	; 0x40
    ce32:	str.w	r1, [r9]
    ce36:	adds	r2, #1
    ce38:	add	r3, r0
    ce3a:	cmp	r2, #7
    ce3c:	str	r3, [sp, #116]	; 0x74
    ce3e:	str.w	r0, [r9, #4]
    ce42:	str	r2, [sp, #112]	; 0x70
    ce44:	bgt.w	d5f4 <_svfprintf_r+0x1114>
    ce48:	add.w	r9, r9, #8
    ce4c:	ldr	r2, [sp, #52]	; 0x34
    ce4e:	subs	r4, r2, #1
    ce50:	cmp	r4, #0
    ce52:	ble.w	ca42 <_svfprintf_r+0x562>
    ce56:	cmp	r4, #16
    ce58:	ldr	r2, [sp, #112]	; 0x70
    ce5a:	ldr	r7, [pc, #120]	; (ced4 <_svfprintf_r+0x9f4>)
    ce5c:	ble.w	d218 <_svfprintf_r+0xd38>
    ce60:	movs	r5, #16
    ce62:	ldr	r6, [sp, #20]
    ce64:	ldr.w	r8, [sp, #12]
    ce68:	b.n	ce76 <_svfprintf_r+0x996>
    ce6a:	add.w	r9, r9, #8
    ce6e:	subs	r4, #16
    ce70:	cmp	r4, #16
    ce72:	ble.w	d218 <_svfprintf_r+0xd38>
    ce76:	adds	r2, #1
    ce78:	adds	r3, #16
    ce7a:	cmp	r2, #7
    ce7c:	str	r3, [sp, #116]	; 0x74
    ce7e:	str	r2, [sp, #112]	; 0x70
    ce80:	str.w	r7, [r9]
    ce84:	str.w	r5, [r9, #4]
    ce88:	ble.n	ce6a <_svfprintf_r+0x98a>
    ce8a:	add	r2, sp, #108	; 0x6c
    ce8c:	mov	r1, r8
    ce8e:	mov	r0, r6
    ce90:	bl	11108 <__ssprint_r>
    ce94:	cmp	r0, #0
    ce96:	bne.w	c6cc <_svfprintf_r+0x1ec>
    ce9a:	ldr	r3, [sp, #116]	; 0x74
    ce9c:	ldr	r2, [sp, #112]	; 0x70
    ce9e:	add.w	r9, sp, #160	; 0xa0
    cea2:	b.n	ce6e <_svfprintf_r+0x98e>
    cea4:	ldr	r2, [sp, #28]
    cea6:	ldr	r1, [sp, #16]
    cea8:	subs	r4, r2, r1
    ceaa:	cmp	r4, #0
    ceac:	ble.w	c9a8 <_svfprintf_r+0x4c8>
    ceb0:	cmp	r4, #16
    ceb2:	ldr	r2, [sp, #112]	; 0x70
    ceb4:	ldr	r7, [pc, #28]	; (ced4 <_svfprintf_r+0x9f4>)
    ceb6:	ble.n	cf16 <_svfprintf_r+0xa36>
    ceb8:	mov	r1, r9
    ceba:	movs	r5, #16
    cebc:	mov	r9, r8
    cebe:	mov	r0, r3
    cec0:	mov	r8, r6
    cec2:	ldr	r6, [sp, #20]
    cec4:	b.n	cee2 <_svfprintf_r+0xa02>
    cec6:	nop
    cec8:	.word	0x20000b70
    cecc:	.word	0x20000b84
    ced0:	.word	0x20000ba0
    ced4:	.word	0x20000c28
    ced8:	subs	r4, #16
    ceda:	cmp	r4, #16
    cedc:	add.w	r1, r1, #8
    cee0:	ble.n	cf0e <_svfprintf_r+0xa2e>
    cee2:	adds	r2, #1
    cee4:	adds	r0, #16
    cee6:	cmp	r2, #7
    cee8:	str	r0, [sp, #116]	; 0x74
    ceea:	str	r2, [sp, #112]	; 0x70
    ceec:	str	r7, [r1, #0]
    ceee:	str	r5, [r1, #4]
    cef0:	ble.n	ced8 <_svfprintf_r+0x9f8>
    cef2:	add	r2, sp, #108	; 0x6c
    cef4:	ldr	r1, [sp, #12]
    cef6:	mov	r0, r6
    cef8:	bl	11108 <__ssprint_r>
    cefc:	cmp	r0, #0
    cefe:	bne.w	c6cc <_svfprintf_r+0x1ec>
    cf02:	subs	r4, #16
    cf04:	cmp	r4, #16
    cf06:	ldr	r0, [sp, #116]	; 0x74
    cf08:	ldr	r2, [sp, #112]	; 0x70
    cf0a:	add	r1, sp, #160	; 0xa0
    cf0c:	bgt.n	cee2 <_svfprintf_r+0xa02>
    cf0e:	mov	r6, r8
    cf10:	mov	r3, r0
    cf12:	mov	r8, r9
    cf14:	mov	r9, r1
    cf16:	adds	r2, #1
    cf18:	add	r3, r4
    cf1a:	cmp	r2, #7
    cf1c:	str	r3, [sp, #116]	; 0x74
    cf1e:	str	r2, [sp, #112]	; 0x70
    cf20:	str.w	r7, [r9]
    cf24:	str.w	r4, [r9, #4]
    cf28:	bgt.w	d3b8 <_svfprintf_r+0xed8>
    cf2c:	add.w	r9, r9, #8
    cf30:	b.n	c9a8 <_svfprintf_r+0x4c8>
    cf32:	ldr	r2, [sp, #52]	; 0x34
    cf34:	str.w	r6, [r9]
    cf38:	cmp	r2, #1
    cf3a:	ldr	r2, [sp, #112]	; 0x70
    cf3c:	add.w	r3, r3, #1
    cf40:	add.w	r2, r2, #1
    cf44:	mov.w	r1, #1
    cf48:	str	r3, [sp, #116]	; 0x74
    cf4a:	str	r2, [sp, #112]	; 0x70
    cf4c:	str.w	r1, [r9, #4]
    cf50:	ble.w	d374 <_svfprintf_r+0xe94>
    cf54:	cmp	r2, #7
    cf56:	bgt.w	d384 <_svfprintf_r+0xea4>
    cf5a:	add.w	r9, r9, #8
    cf5e:	ldr	r0, [sp, #60]	; 0x3c
    cf60:	ldr	r1, [sp, #64]	; 0x40
    cf62:	str.w	r1, [r9]
    cf66:	adds	r2, #1
    cf68:	add	r3, r0
    cf6a:	cmp	r2, #7
    cf6c:	str	r3, [sp, #116]	; 0x74
    cf6e:	str	r2, [sp, #112]	; 0x70
    cf70:	str.w	r0, [r9, #4]
    cf74:	bgt.w	d39e <_svfprintf_r+0xebe>
    cf78:	add.w	r9, r9, #8
    cf7c:	vcmp.f64	d8, #0.0
    cf80:	vmrs	APSR_nzcv, fpscr
    cf84:	ldr	r1, [sp, #52]	; 0x34
    cf86:	beq.w	d174 <_svfprintf_r+0xc94>
    cf8a:	subs	r1, #1
    cf8c:	adds	r2, #1
    cf8e:	adds	r6, #1
    cf90:	add	r3, r1
    cf92:	cmp	r2, #7
    cf94:	str.w	r6, [r9]
    cf98:	str	r2, [sp, #112]	; 0x70
    cf9a:	str	r3, [sp, #116]	; 0x74
    cf9c:	str.w	r1, [r9, #4]
    cfa0:	bgt.w	d1de <_svfprintf_r+0xcfe>
    cfa4:	add.w	r9, r9, #8
    cfa8:	ldr	r0, [sp, #68]	; 0x44
    cfaa:	str.w	r0, [r9, #4]
    cfae:	adds	r2, #1
    cfb0:	add	r3, r0
    cfb2:	add	r1, sp, #92	; 0x5c
    cfb4:	cmp	r2, #7
    cfb6:	str	r3, [sp, #116]	; 0x74
    cfb8:	str	r2, [sp, #112]	; 0x70
    cfba:	str.w	r1, [r9]
    cfbe:	ble.w	ca3e <_svfprintf_r+0x55e>
    cfc2:	add	r2, sp, #108	; 0x6c
    cfc4:	ldr	r1, [sp, #12]
    cfc6:	ldr	r0, [sp, #20]
    cfc8:	bl	11108 <__ssprint_r>
    cfcc:	cmp	r0, #0
    cfce:	bne.w	c6cc <_svfprintf_r+0x1ec>
    cfd2:	ldr	r3, [sp, #116]	; 0x74
    cfd4:	add.w	r9, sp, #160	; 0xa0
    cfd8:	b.n	ca42 <_svfprintf_r+0x562>
    cfda:	add	r2, sp, #108	; 0x6c
    cfdc:	ldr	r1, [sp, #12]
    cfde:	ldr	r0, [sp, #20]
    cfe0:	bl	11108 <__ssprint_r>
    cfe4:	cmp	r0, #0
    cfe6:	beq.w	cadc <_svfprintf_r+0x5fc>
    cfea:	b.w	c6cc <_svfprintf_r+0x1ec>
    cfee:	ldr	r1, [sp, #36]	; 0x24
    cff0:	cmp.w	r8, #0
    cff4:	ldr	r4, [r1, #0]
    cff6:	strb.w	r3, [sp, #79]	; 0x4f
    cffa:	add.w	r7, r1, #4
    cffe:	mov.w	r5, #0
    d002:	blt.w	d6e8 <_svfprintf_r+0x1208>
    d006:	orrs.w	r2, r4, r5
    d00a:	str	r7, [sp, #36]	; 0x24
    d00c:	bic.w	fp, fp, #128	; 0x80
    d010:	mov	r7, r3
    d012:	bne.w	c82a <_svfprintf_r+0x34a>
    d016:	cmp.w	r8, #0
    d01a:	beq.w	cd84 <_svfprintf_r+0x8a4>
    d01e:	movs	r4, #0
    d020:	b.n	cb90 <_svfprintf_r+0x6b0>
    d022:	add	r2, sp, #108	; 0x6c
    d024:	ldr	r1, [sp, #12]
    d026:	ldr	r0, [sp, #20]
    d028:	bl	11108 <__ssprint_r>
    d02c:	cmp	r0, #0
    d02e:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d032:	ldr	r3, [sp, #116]	; 0x74
    d034:	add.w	r9, sp, #160	; 0xa0
    d038:	b.n	ca1c <_svfprintf_r+0x53c>
    d03a:	add	r2, sp, #108	; 0x6c
    d03c:	ldr	r1, [sp, #12]
    d03e:	ldr	r0, [sp, #20]
    d040:	bl	11108 <__ssprint_r>
    d044:	cmp	r0, #0
    d046:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d04a:	ldr	r3, [sp, #116]	; 0x74
    d04c:	add.w	r9, sp, #160	; 0xa0
    d050:	b.n	c980 <_svfprintf_r+0x4a0>
    d052:	add	r2, sp, #108	; 0x6c
    d054:	ldr	r1, [sp, #12]
    d056:	ldr	r0, [sp, #20]
    d058:	bl	11108 <__ssprint_r>
    d05c:	cmp	r0, #0
    d05e:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d062:	ldr	r3, [sp, #116]	; 0x74
    d064:	add.w	r9, sp, #160	; 0xa0
    d068:	b.n	c9a0 <_svfprintf_r+0x4c0>
    d06a:	cmp.w	r8, #0
    d06e:	strb.w	r7, [sp, #79]	; 0x4f
    d072:	blt.w	d554 <_svfprintf_r+0x1074>
    d076:	orrs.w	r3, r4, r5
    d07a:	bic.w	fp, fp, #128	; 0x80
    d07e:	bne.w	cc0a <_svfprintf_r+0x72a>
    d082:	cmp.w	r8, #0
    d086:	beq.w	cd82 <_svfprintf_r+0x8a2>
    d08a:	movs	r7, #0
    d08c:	b.n	cdde <_svfprintf_r+0x8fe>
    d08e:	ldr	r4, [sp, #84]	; 0x54
    d090:	cmp	r4, #0
    d092:	ble.w	d558 <_svfprintf_r+0x1078>
    d096:	ldr	r2, [sp, #56]	; 0x38
    d098:	ldr	r1, [sp, #52]	; 0x34
    d09a:	cmp	r2, r1
    d09c:	it	ge
    d09e:	movge	r2, r1
    d0a0:	cmp	r2, #0
    d0a2:	mov	r4, r2
    d0a4:	ble.n	d0c2 <_svfprintf_r+0xbe2>
    d0a6:	ldr	r2, [sp, #112]	; 0x70
    d0a8:	str.w	r6, [r9]
    d0ac:	adds	r2, #1
    d0ae:	add	r3, r4
    d0b0:	cmp	r2, #7
    d0b2:	str	r3, [sp, #116]	; 0x74
    d0b4:	str.w	r4, [r9, #4]
    d0b8:	str	r2, [sp, #112]	; 0x70
    d0ba:	bgt.w	d7a2 <_svfprintf_r+0x12c2>
    d0be:	add.w	r9, r9, #8
    d0c2:	ldr	r2, [sp, #56]	; 0x38
    d0c4:	cmp	r4, #0
    d0c6:	it	ge
    d0c8:	subge	r2, r2, r4
    d0ca:	cmp	r2, #0
    d0cc:	mov	r4, r2
    d0ce:	ble.w	d2b4 <_svfprintf_r+0xdd4>
    d0d2:	cmp	r4, #16
    d0d4:	ldr	r2, [sp, #112]	; 0x70
    d0d6:	ldr	r7, [pc, #772]	; (d3dc <_svfprintf_r+0xefc>)
    d0d8:	ble.w	d50e <_svfprintf_r+0x102e>
    d0dc:	mov	r1, r9
    d0de:	movs	r5, #16
    d0e0:	mov	r9, r6
    d0e2:	ldr.w	r8, [sp, #20]
    d0e6:	ldr	r6, [sp, #12]
    d0e8:	b.n	d0f4 <_svfprintf_r+0xc14>
    d0ea:	adds	r1, #8
    d0ec:	subs	r4, #16
    d0ee:	cmp	r4, #16
    d0f0:	ble.w	d50a <_svfprintf_r+0x102a>
    d0f4:	adds	r2, #1
    d0f6:	adds	r3, #16
    d0f8:	cmp	r2, #7
    d0fa:	str	r3, [sp, #116]	; 0x74
    d0fc:	str	r2, [sp, #112]	; 0x70
    d0fe:	str	r7, [r1, #0]
    d100:	str	r5, [r1, #4]
    d102:	ble.n	d0ea <_svfprintf_r+0xc0a>
    d104:	add	r2, sp, #108	; 0x6c
    d106:	mov	r1, r6
    d108:	mov	r0, r8
    d10a:	bl	11108 <__ssprint_r>
    d10e:	cmp	r0, #0
    d110:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d114:	ldr	r3, [sp, #116]	; 0x74
    d116:	ldr	r2, [sp, #112]	; 0x70
    d118:	add	r1, sp, #160	; 0xa0
    d11a:	b.n	d0ec <_svfprintf_r+0xc0c>
    d11c:	add	r2, sp, #108	; 0x6c
    d11e:	ldr	r1, [sp, #12]
    d120:	ldr	r0, [sp, #20]
    d122:	bl	11108 <__ssprint_r>
    d126:	cmp	r0, #0
    d128:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d12c:	ldrb.w	r7, [sp, #79]	; 0x4f
    d130:	ldr	r3, [sp, #116]	; 0x74
    d132:	add.w	r9, sp, #160	; 0xa0
    d136:	b.n	c960 <_svfprintf_r+0x480>
    d138:	ands.w	r2, fp, #16
    d13c:	bne.w	cfee <_svfprintf_r+0xb0e>
    d140:	ands.w	r3, fp, #64	; 0x40
    d144:	beq.w	cfee <_svfprintf_r+0xb0e>
    d148:	ldr	r1, [sp, #36]	; 0x24
    d14a:	strb.w	r2, [sp, #79]	; 0x4f
    d14e:	mov	r3, r1
    d150:	cmp.w	r8, #0
    d154:	add.w	r3, r3, #4
    d158:	ldrh	r4, [r1, #0]
    d15a:	mov.w	r5, #0
    d15e:	blt.w	d68a <_svfprintf_r+0x11aa>
    d162:	orrs.w	r1, r4, r5
    d166:	bic.w	fp, fp, #128	; 0x80
    d16a:	str	r3, [sp, #36]	; 0x24
    d16c:	mov	r7, r2
    d16e:	bne.w	c82a <_svfprintf_r+0x34a>
    d172:	b.n	d016 <_svfprintf_r+0xb36>
    d174:	subs	r4, r1, #1
    d176:	cmp	r4, #0
    d178:	ble.w	cfa8 <_svfprintf_r+0xac8>
    d17c:	cmp	r4, #16
    d17e:	ldr	r7, [pc, #604]	; (d3dc <_svfprintf_r+0xefc>)
    d180:	ble.n	d1c8 <_svfprintf_r+0xce8>
    d182:	movs	r5, #16
    d184:	ldr	r6, [sp, #20]
    d186:	ldr.w	r8, [sp, #12]
    d18a:	b.n	d196 <_svfprintf_r+0xcb6>
    d18c:	subs	r4, #16
    d18e:	cmp	r4, #16
    d190:	add.w	r9, r9, #8
    d194:	ble.n	d1c8 <_svfprintf_r+0xce8>
    d196:	adds	r2, #1
    d198:	adds	r3, #16
    d19a:	cmp	r2, #7
    d19c:	str	r3, [sp, #116]	; 0x74
    d19e:	str	r2, [sp, #112]	; 0x70
    d1a0:	str.w	r7, [r9]
    d1a4:	str.w	r5, [r9, #4]
    d1a8:	ble.n	d18c <_svfprintf_r+0xcac>
    d1aa:	add	r2, sp, #108	; 0x6c
    d1ac:	mov	r1, r8
    d1ae:	mov	r0, r6
    d1b0:	bl	11108 <__ssprint_r>
    d1b4:	cmp	r0, #0
    d1b6:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d1ba:	subs	r4, #16
    d1bc:	cmp	r4, #16
    d1be:	ldr	r3, [sp, #116]	; 0x74
    d1c0:	ldr	r2, [sp, #112]	; 0x70
    d1c2:	add.w	r9, sp, #160	; 0xa0
    d1c6:	bgt.n	d196 <_svfprintf_r+0xcb6>
    d1c8:	adds	r2, #1
    d1ca:	add	r3, r4
    d1cc:	cmp	r2, #7
    d1ce:	str	r3, [sp, #116]	; 0x74
    d1d0:	str	r2, [sp, #112]	; 0x70
    d1d2:	str.w	r7, [r9]
    d1d6:	str.w	r4, [r9, #4]
    d1da:	ble.w	cfa4 <_svfprintf_r+0xac4>
    d1de:	add	r2, sp, #108	; 0x6c
    d1e0:	ldr	r1, [sp, #12]
    d1e2:	ldr	r0, [sp, #20]
    d1e4:	bl	11108 <__ssprint_r>
    d1e8:	cmp	r0, #0
    d1ea:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d1ee:	ldr	r3, [sp, #116]	; 0x74
    d1f0:	ldr	r2, [sp, #112]	; 0x70
    d1f2:	add.w	r9, sp, #160	; 0xa0
    d1f6:	b.n	cfa8 <_svfprintf_r+0xac8>
    d1f8:	tst.w	fp, #16
    d1fc:	bne.n	d266 <_svfprintf_r+0xd86>
    d1fe:	tst.w	fp, #64	; 0x40
    d202:	beq.n	d266 <_svfprintf_r+0xd86>
    d204:	ldr	r1, [sp, #36]	; 0x24
    d206:	ldrsh.w	r4, [r1]
    d20a:	adds	r1, #4
    d20c:	asrs	r5, r4, #31
    d20e:	mov	r2, r4
    d210:	mov	r3, r5
    d212:	str	r1, [sp, #36]	; 0x24
    d214:	b.w	c808 <_svfprintf_r+0x328>
    d218:	adds	r2, #1
    d21a:	add	r3, r4
    d21c:	cmp	r2, #7
    d21e:	str	r3, [sp, #116]	; 0x74
    d220:	str	r2, [sp, #112]	; 0x70
    d222:	str.w	r7, [r9]
    d226:	str.w	r4, [r9, #4]
    d22a:	ble.w	ca3e <_svfprintf_r+0x55e>
    d22e:	b.n	cfc2 <_svfprintf_r+0xae2>
    d230:	ldr	r1, [sp, #36]	; 0x24
    d232:	cmp.w	r8, #0
    d236:	ldr	r4, [r1, #0]
    d238:	strb.w	r3, [sp, #79]	; 0x4f
    d23c:	add.w	r7, r1, #4
    d240:	mov.w	r5, #0
    d244:	blt.w	d3d2 <_svfprintf_r+0xef2>
    d248:	orrs.w	r2, r4, r5
    d24c:	bic.w	fp, fp, #128	; 0x80
    d250:	str	r7, [sp, #36]	; 0x24
    d252:	beq.w	cdba <_svfprintf_r+0x8da>
    d256:	mov	r7, r3
    d258:	b.w	c724 <_svfprintf_r+0x244>
    d25c:	ldr	r4, [r3, #0]
    d25e:	adds	r3, #4
    d260:	str	r3, [sp, #36]	; 0x24
    d262:	movs	r5, #0
    d264:	b.n	cbd4 <_svfprintf_r+0x6f4>
    d266:	ldr	r2, [sp, #36]	; 0x24
    d268:	ldr	r4, [r2, #0]
    d26a:	mov	r3, r2
    d26c:	adds	r3, #4
    d26e:	asrs	r5, r4, #31
    d270:	mov	r2, r4
    d272:	str	r3, [sp, #36]	; 0x24
    d274:	cmp	r2, #0
    d276:	mov	r3, r5
    d278:	sbcs.w	r3, r3, #0
    d27c:	bge.w	c812 <_svfprintf_r+0x332>
    d280:	negs	r4, r4
    d282:	mov.w	r7, #45	; 0x2d
    d286:	sbc.w	r5, r5, r5, lsl #1
    d28a:	cmp.w	r8, #0
    d28e:	strb.w	r7, [sp, #79]	; 0x4f
    d292:	blt.w	c82a <_svfprintf_r+0x34a>
    d296:	bic.w	fp, fp, #128	; 0x80
    d29a:	b.w	c82a <_svfprintf_r+0x34a>
    d29e:	add	r2, sp, #108	; 0x6c
    d2a0:	ldr	r1, [sp, #12]
    d2a2:	ldr	r0, [sp, #20]
    d2a4:	bl	11108 <__ssprint_r>
    d2a8:	cmp	r0, #0
    d2aa:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d2ae:	ldr	r3, [sp, #116]	; 0x74
    d2b0:	add.w	r9, sp, #160	; 0xa0
    d2b4:	ldr	r1, [sp, #56]	; 0x38
    d2b6:	ldr	r2, [sp, #84]	; 0x54
    d2b8:	add	r1, r6
    d2ba:	mov	r5, r1
    d2bc:	ldr	r1, [sp, #52]	; 0x34
    d2be:	cmp	r2, r1
    d2c0:	blt.n	d352 <_svfprintf_r+0xe72>
    d2c2:	tst.w	fp, #1
    d2c6:	bne.n	d352 <_svfprintf_r+0xe72>
    d2c8:	ldr	r0, [sp, #52]	; 0x34
    d2ca:	add	r6, r0
    d2cc:	subs	r4, r6, r5
    d2ce:	subs	r2, r0, r2
    d2d0:	cmp	r4, r2
    d2d2:	it	ge
    d2d4:	movge	r4, r2
    d2d6:	cmp	r4, #0
    d2d8:	mov	r6, r4
    d2da:	ble.n	d2f8 <_svfprintf_r+0xe18>
    d2dc:	ldr	r1, [sp, #112]	; 0x70
    d2de:	str.w	r5, [r9]
    d2e2:	adds	r1, #1
    d2e4:	add	r3, r4
    d2e6:	cmp	r1, #7
    d2e8:	str	r3, [sp, #116]	; 0x74
    d2ea:	str.w	r4, [r9, #4]
    d2ee:	str	r1, [sp, #112]	; 0x70
    d2f0:	bgt.w	d7f4 <_svfprintf_r+0x1314>
    d2f4:	add.w	r9, r9, #8
    d2f8:	cmp	r6, #0
    d2fa:	ite	ge
    d2fc:	subge	r4, r2, r6
    d2fe:	movlt	r4, r2
    d300:	cmp	r4, #0
    d302:	ble.w	ca42 <_svfprintf_r+0x562>
    d306:	cmp	r4, #16
    d308:	ldr	r2, [sp, #112]	; 0x70
    d30a:	ldr	r7, [pc, #208]	; (d3dc <_svfprintf_r+0xefc>)
    d30c:	ble.n	d218 <_svfprintf_r+0xd38>
    d30e:	movs	r5, #16
    d310:	ldr	r6, [sp, #20]
    d312:	ldr.w	r8, [sp, #12]
    d316:	b.n	d324 <_svfprintf_r+0xe44>
    d318:	add.w	r9, r9, #8
    d31c:	subs	r4, #16
    d31e:	cmp	r4, #16
    d320:	ble.w	d218 <_svfprintf_r+0xd38>
    d324:	adds	r2, #1
    d326:	adds	r3, #16
    d328:	cmp	r2, #7
    d32a:	str	r3, [sp, #116]	; 0x74
    d32c:	str	r2, [sp, #112]	; 0x70
    d32e:	str.w	r7, [r9]
    d332:	str.w	r5, [r9, #4]
    d336:	ble.n	d318 <_svfprintf_r+0xe38>
    d338:	add	r2, sp, #108	; 0x6c
    d33a:	mov	r1, r8
    d33c:	mov	r0, r6
    d33e:	bl	11108 <__ssprint_r>
    d342:	cmp	r0, #0
    d344:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d348:	ldr	r3, [sp, #116]	; 0x74
    d34a:	ldr	r2, [sp, #112]	; 0x70
    d34c:	add.w	r9, sp, #160	; 0xa0
    d350:	b.n	d31c <_svfprintf_r+0xe3c>
    d352:	ldr	r1, [sp, #112]	; 0x70
    d354:	ldr	r4, [sp, #60]	; 0x3c
    d356:	ldr	r0, [sp, #64]	; 0x40
    d358:	str.w	r0, [r9]
    d35c:	adds	r1, #1
    d35e:	add	r3, r4
    d360:	cmp	r1, #7
    d362:	str	r3, [sp, #116]	; 0x74
    d364:	str.w	r4, [r9, #4]
    d368:	str	r1, [sp, #112]	; 0x70
    d36a:	bgt.w	d7ba <_svfprintf_r+0x12da>
    d36e:	add.w	r9, r9, #8
    d372:	b.n	d2c8 <_svfprintf_r+0xde8>
    d374:	tst.w	fp, #1
    d378:	bne.w	cf54 <_svfprintf_r+0xa74>
    d37c:	cmp	r2, #7
    d37e:	ble.w	cfa4 <_svfprintf_r+0xac4>
    d382:	b.n	d1de <_svfprintf_r+0xcfe>
    d384:	add	r2, sp, #108	; 0x6c
    d386:	ldr	r1, [sp, #12]
    d388:	ldr	r0, [sp, #20]
    d38a:	bl	11108 <__ssprint_r>
    d38e:	cmp	r0, #0
    d390:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d394:	ldr	r3, [sp, #116]	; 0x74
    d396:	ldr	r2, [sp, #112]	; 0x70
    d398:	add.w	r9, sp, #160	; 0xa0
    d39c:	b.n	cf5e <_svfprintf_r+0xa7e>
    d39e:	add	r2, sp, #108	; 0x6c
    d3a0:	ldr	r1, [sp, #12]
    d3a2:	ldr	r0, [sp, #20]
    d3a4:	bl	11108 <__ssprint_r>
    d3a8:	cmp	r0, #0
    d3aa:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d3ae:	ldr	r3, [sp, #116]	; 0x74
    d3b0:	ldr	r2, [sp, #112]	; 0x70
    d3b2:	add.w	r9, sp, #160	; 0xa0
    d3b6:	b.n	cf7c <_svfprintf_r+0xa9c>
    d3b8:	add	r2, sp, #108	; 0x6c
    d3ba:	ldr	r1, [sp, #12]
    d3bc:	ldr	r0, [sp, #20]
    d3be:	bl	11108 <__ssprint_r>
    d3c2:	cmp	r0, #0
    d3c4:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d3c8:	ldr	r3, [sp, #116]	; 0x74
    d3ca:	add.w	r9, sp, #160	; 0xa0
    d3ce:	b.w	c9a8 <_svfprintf_r+0x4c8>
    d3d2:	str	r7, [sp, #36]	; 0x24
    d3d4:	movs	r7, #0
    d3d6:	b.w	c724 <_svfprintf_r+0x244>
    d3da:	nop
    d3dc:	.word	0x20000c28
    d3e0:	tst.w	fp, #16
    d3e4:	bne.n	d3fe <_svfprintf_r+0xf1e>
    d3e6:	tst.w	fp, #64	; 0x40
    d3ea:	beq.n	d3fe <_svfprintf_r+0xf1e>
    d3ec:	ldr	r2, [sp, #36]	; 0x24
    d3ee:	ldr	r3, [r2, #0]
    d3f0:	adds	r2, #4
    d3f2:	str	r2, [sp, #36]	; 0x24
    d3f4:	ldrh.w	r2, [sp, #24]
    d3f8:	strh	r2, [r3, #0]
    d3fa:	b.w	c52c <_svfprintf_r+0x4c>
    d3fe:	ldr	r2, [sp, #36]	; 0x24
    d400:	ldr	r3, [r2, #0]
    d402:	adds	r2, #4
    d404:	str	r2, [sp, #36]	; 0x24
    d406:	ldr	r2, [sp, #24]
    d408:	str	r2, [r3, #0]
    d40a:	b.w	c52c <_svfprintf_r+0x4c>
    d40e:	vcmp.f64	d8, d8
    d412:	vmrs	APSR_nzcv, fpscr
    d416:	bvs.w	d956 <_svfprintf_r+0x1476>
    d41a:	ldr	r3, [sp, #48]	; 0x30
    d41c:	cmp.w	r8, #4294967295
    d420:	bic.w	r5, r3, #32
    d424:	beq.w	d872 <_svfprintf_r+0x1392>
    d428:	cmp	r5, #71	; 0x47
    d42a:	beq.w	d67a <_svfprintf_r+0x119a>
    d42e:	orr.w	r3, fp, #256	; 0x100
    d432:	str	r3, [sp, #40]	; 0x28
    d434:	vmov	r3, s17
    d438:	cmp	r3, #0
    d43a:	blt.w	d878 <_svfprintf_r+0x1398>
    d43e:	vmov.f64	d10, d8
    d442:	movs	r7, #0
    d444:	ldr	r3, [sp, #48]	; 0x30
    d446:	cmp	r3, #102	; 0x66
    d448:	beq.w	d850 <_svfprintf_r+0x1370>
    d44c:	cmp	r3, #70	; 0x46
    d44e:	beq.w	d62a <_svfprintf_r+0x114a>
    d452:	vmov.f64	d0, d10
    d456:	cmp	r5, #69	; 0x45
    d458:	ite	eq
    d45a:	addeq.w	r4, r8, #1
    d45e:	movne	r4, r8
    d460:	add	r2, sp, #100	; 0x64
    d462:	add	r3, sp, #88	; 0x58
    d464:	str	r2, [sp, #4]
    d466:	str	r3, [sp, #0]
    d468:	mov	r2, r4
    d46a:	add	r3, sp, #84	; 0x54
    d46c:	movs	r1, #2
    d46e:	ldr	r0, [sp, #20]
    d470:	bl	eb48 <_dtoa_r>
    d474:	ldr	r3, [sp, #48]	; 0x30
    d476:	cmp	r3, #103	; 0x67
    d478:	mov	r6, r0
    d47a:	bne.w	d89a <_svfprintf_r+0x13ba>
    d47e:	tst.w	fp, #1
    d482:	beq.w	d952 <_svfprintf_r+0x1472>
    d486:	adds	r1, r6, r4
    d488:	vcmp.f64	d10, #0.0
    d48c:	vmrs	APSR_nzcv, fpscr
    d490:	beq.w	d79e <_svfprintf_r+0x12be>
    d494:	ldr	r3, [sp, #100]	; 0x64
    d496:	cmp	r1, r3
    d498:	bls.n	d4a8 <_svfprintf_r+0xfc8>
    d49a:	movs	r0, #48	; 0x30
    d49c:	adds	r2, r3, #1
    d49e:	str	r2, [sp, #100]	; 0x64
    d4a0:	strb	r0, [r3, #0]
    d4a2:	ldr	r3, [sp, #100]	; 0x64
    d4a4:	cmp	r1, r3
    d4a6:	bhi.n	d49c <_svfprintf_r+0xfbc>
    d4a8:	subs	r3, r3, r6
    d4aa:	cmp	r5, #71	; 0x47
    d4ac:	str	r3, [sp, #52]	; 0x34
    d4ae:	beq.w	d6f0 <_svfprintf_r+0x1210>
    d4b2:	ldr	r3, [sp, #48]	; 0x30
    d4b4:	cmp	r3, #101	; 0x65
    d4b6:	ble.w	d8b8 <_svfprintf_r+0x13d8>
    d4ba:	ldr	r3, [sp, #48]	; 0x30
    d4bc:	cmp	r3, #102	; 0x66
    d4be:	ldr	r3, [sp, #84]	; 0x54
    d4c0:	beq.w	d8bc <_svfprintf_r+0x13dc>
    d4c4:	str	r3, [sp, #56]	; 0x38
    d4c6:	ldr	r2, [sp, #56]	; 0x38
    d4c8:	ldr	r1, [sp, #52]	; 0x34
    d4ca:	cmp	r2, r1
    d4cc:	blt.w	d880 <_svfprintf_r+0x13a0>
    d4d0:	tst.w	fp, #1
    d4d4:	bne.w	d940 <_svfprintf_r+0x1460>
    d4d8:	bic.w	r3, r2, r2, asr #31
    d4dc:	str	r2, [sp, #32]
    d4de:	movs	r2, #103	; 0x67
    d4e0:	str	r2, [sp, #48]	; 0x30
    d4e2:	cmp	r7, #0
    d4e4:	bne.w	d6d4 <_svfprintf_r+0x11f4>
    d4e8:	mov	r8, r7
    d4ea:	str	r3, [sp, #16]
    d4ec:	ldr.w	fp, [sp, #40]	; 0x28
    d4f0:	ldrb.w	r7, [sp, #79]	; 0x4f
    d4f4:	b.w	c8c4 <_svfprintf_r+0x3e4>
    d4f8:	bic.w	r7, r7, #7
    d4fc:	add.w	r3, r7, #8
    d500:	vldr	d8, [r7]
    d504:	str	r3, [sp, #36]	; 0x24
    d506:	b.w	c886 <_svfprintf_r+0x3a6>
    d50a:	mov	r6, r9
    d50c:	mov	r9, r1
    d50e:	adds	r2, #1
    d510:	add	r3, r4
    d512:	cmp	r2, #7
    d514:	str	r3, [sp, #116]	; 0x74
    d516:	str	r2, [sp, #112]	; 0x70
    d518:	str.w	r7, [r9]
    d51c:	str.w	r4, [r9, #4]
    d520:	bgt.w	d29e <_svfprintf_r+0xdbe>
    d524:	add.w	r9, r9, #8
    d528:	b.n	d2b4 <_svfprintf_r+0xdd4>
    d52a:	movs	r7, #0
    d52c:	cmp	r8, r7
    d52e:	strb.w	r7, [sp, #79]	; 0x4f
    d532:	blt.w	cdde <_svfprintf_r+0x8fe>
    d536:	bic.w	fp, fp, #128	; 0x80
    d53a:	b.n	cd7a <_svfprintf_r+0x89a>
    d53c:	add	r2, sp, #108	; 0x6c
    d53e:	ldr	r1, [sp, #12]
    d540:	ldr	r0, [sp, #20]
    d542:	bl	11108 <__ssprint_r>
    d546:	cmp	r0, #0
    d548:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d54c:	ldr	r3, [sp, #116]	; 0x74
    d54e:	add.w	r9, sp, #160	; 0xa0
    d552:	b.n	ce1c <_svfprintf_r+0x93c>
    d554:	ldr	r7, [sp, #36]	; 0x24
    d556:	b.n	cdd0 <_svfprintf_r+0x8f0>
    d558:	ldr	r2, [sp, #112]	; 0x70
    d55a:	ldr	r1, [pc, #740]	; (d840 <_svfprintf_r+0x1360>)
    d55c:	str.w	r1, [r9]
    d560:	adds	r2, #1
    d562:	adds	r3, #1
    d564:	movs	r1, #1
    d566:	cmp	r2, #7
    d568:	str	r3, [sp, #116]	; 0x74
    d56a:	str	r2, [sp, #112]	; 0x70
    d56c:	str.w	r1, [r9, #4]
    d570:	bgt.n	d660 <_svfprintf_r+0x1180>
    d572:	add.w	r9, r9, #8
    d576:	cbnz	r4, d584 <_svfprintf_r+0x10a4>
    d578:	ldr	r2, [sp, #52]	; 0x34
    d57a:	cbnz	r2, d584 <_svfprintf_r+0x10a4>
    d57c:	tst.w	fp, #1
    d580:	beq.w	ca42 <_svfprintf_r+0x562>
    d584:	ldr	r2, [sp, #112]	; 0x70
    d586:	ldr	r0, [sp, #60]	; 0x3c
    d588:	ldr	r1, [sp, #64]	; 0x40
    d58a:	str.w	r1, [r9]
    d58e:	adds	r2, #1
    d590:	add	r3, r0
    d592:	cmp	r2, #7
    d594:	str	r3, [sp, #116]	; 0x74
    d596:	str.w	r0, [r9, #4]
    d59a:	str	r2, [sp, #112]	; 0x70
    d59c:	bgt.w	d90c <_svfprintf_r+0x142c>
    d5a0:	add.w	r9, r9, #8
    d5a4:	negs	r4, r4
    d5a6:	cmp	r4, #0
    d5a8:	ble.w	d6ba <_svfprintf_r+0x11da>
    d5ac:	cmp	r4, #16
    d5ae:	ldr	r7, [pc, #660]	; (d844 <_svfprintf_r+0x1364>)
    d5b0:	ble.w	d7d8 <_svfprintf_r+0x12f8>
    d5b4:	mov	r1, r9
    d5b6:	movs	r5, #16
    d5b8:	mov	r9, r6
    d5ba:	ldr.w	r8, [sp, #20]
    d5be:	ldr	r6, [sp, #12]
    d5c0:	b.n	d5cc <_svfprintf_r+0x10ec>
    d5c2:	adds	r1, #8
    d5c4:	subs	r4, #16
    d5c6:	cmp	r4, #16
    d5c8:	ble.w	d7d4 <_svfprintf_r+0x12f4>
    d5cc:	adds	r2, #1
    d5ce:	adds	r3, #16
    d5d0:	cmp	r2, #7
    d5d2:	str	r3, [sp, #116]	; 0x74
    d5d4:	str	r2, [sp, #112]	; 0x70
    d5d6:	str	r7, [r1, #0]
    d5d8:	str	r5, [r1, #4]
    d5da:	ble.n	d5c2 <_svfprintf_r+0x10e2>
    d5dc:	add	r2, sp, #108	; 0x6c
    d5de:	mov	r1, r6
    d5e0:	mov	r0, r8
    d5e2:	bl	11108 <__ssprint_r>
    d5e6:	cmp	r0, #0
    d5e8:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d5ec:	ldr	r3, [sp, #116]	; 0x74
    d5ee:	ldr	r2, [sp, #112]	; 0x70
    d5f0:	add	r1, sp, #160	; 0xa0
    d5f2:	b.n	d5c4 <_svfprintf_r+0x10e4>
    d5f4:	add	r2, sp, #108	; 0x6c
    d5f6:	ldr	r1, [sp, #12]
    d5f8:	ldr	r0, [sp, #20]
    d5fa:	bl	11108 <__ssprint_r>
    d5fe:	cmp	r0, #0
    d600:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d604:	ldr	r3, [sp, #116]	; 0x74
    d606:	add.w	r9, sp, #160	; 0xa0
    d60a:	b.n	ce4c <_svfprintf_r+0x96c>
    d60c:	movs	r1, #64	; 0x40
    d60e:	ldr	r0, [sp, #20]
    d610:	bl	a71c <_malloc_r>
    d614:	ldr	r2, [sp, #12]
    d616:	str	r0, [r2, #0]
    d618:	str	r0, [r2, #16]
    d61a:	cmp	r0, #0
    d61c:	beq.w	d9fa <_svfprintf_r+0x151a>
    d620:	ldr	r2, [sp, #12]
    d622:	movs	r3, #64	; 0x40
    d624:	str	r3, [r2, #20]
    d626:	b.w	c512 <_svfprintf_r+0x32>
    d62a:	add	r2, sp, #100	; 0x64
    d62c:	add	r3, sp, #88	; 0x58
    d62e:	str	r2, [sp, #4]
    d630:	str	r3, [sp, #0]
    d632:	mov	r2, r8
    d634:	add	r3, sp, #84	; 0x54
    d636:	movs	r1, #3
    d638:	vmov.f64	d0, d10
    d63c:	ldr	r0, [sp, #20]
    d63e:	bl	eb48 <_dtoa_r>
    d642:	mov	r4, r8
    d644:	mov	r6, r0
    d646:	ldr	r3, [sp, #48]	; 0x30
    d648:	cmp	r3, #70	; 0x46
    d64a:	add.w	r1, r6, r4
    d64e:	bne.w	d488 <_svfprintf_r+0xfa8>
    d652:	ldrb	r3, [r6, #0]
    d654:	cmp	r3, #48	; 0x30
    d656:	beq.w	d974 <_svfprintf_r+0x1494>
    d65a:	ldr	r4, [sp, #84]	; 0x54
    d65c:	add	r1, r4
    d65e:	b.n	d488 <_svfprintf_r+0xfa8>
    d660:	add	r2, sp, #108	; 0x6c
    d662:	ldr	r1, [sp, #12]
    d664:	ldr	r0, [sp, #20]
    d666:	bl	11108 <__ssprint_r>
    d66a:	cmp	r0, #0
    d66c:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d670:	ldr	r4, [sp, #84]	; 0x54
    d672:	ldr	r3, [sp, #116]	; 0x74
    d674:	add.w	r9, sp, #160	; 0xa0
    d678:	b.n	d576 <_svfprintf_r+0x1096>
    d67a:	cmp.w	r8, #0
    d67e:	it	eq
    d680:	moveq.w	r8, #1
    d684:	b.n	d42e <_svfprintf_r+0xf4e>
    d686:	str	r3, [sp, #36]	; 0x24
    d688:	b.n	d3d4 <_svfprintf_r+0xef4>
    d68a:	str	r3, [sp, #36]	; 0x24
    d68c:	mov	r7, r2
    d68e:	b.w	cb88 <_svfprintf_r+0x6a8>
    d692:	mov	r0, r6
    d694:	bl	b340 <strlen>
    d698:	mov	r8, r4
    d69a:	mov	r3, r0
    d69c:	str	r0, [sp, #32]
    d69e:	b.w	cd64 <_svfprintf_r+0x884>
    d6a2:	add	r2, sp, #108	; 0x6c
    d6a4:	ldr	r1, [sp, #12]
    d6a6:	ldr	r0, [sp, #20]
    d6a8:	bl	11108 <__ssprint_r>
    d6ac:	cmp	r0, #0
    d6ae:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d6b2:	ldr	r3, [sp, #116]	; 0x74
    d6b4:	ldr	r2, [sp, #112]	; 0x70
    d6b6:	add.w	r9, sp, #160	; 0xa0
    d6ba:	ldr	r0, [sp, #52]	; 0x34
    d6bc:	str.w	r6, [r9]
    d6c0:	adds	r2, #1
    d6c2:	add	r3, r0
    d6c4:	cmp	r2, #7
    d6c6:	str	r3, [sp, #116]	; 0x74
    d6c8:	str	r2, [sp, #112]	; 0x70
    d6ca:	str.w	r0, [r9, #4]
    d6ce:	ble.w	ca3e <_svfprintf_r+0x55e>
    d6d2:	b.n	cfc2 <_svfprintf_r+0xae2>
    d6d4:	movs	r7, #45	; 0x2d
    d6d6:	str	r3, [sp, #16]
    d6d8:	ldr.w	fp, [sp, #40]	; 0x28
    d6dc:	strb.w	r7, [sp, #79]	; 0x4f
    d6e0:	mov.w	r8, #0
    d6e4:	b.w	c8c6 <_svfprintf_r+0x3e6>
    d6e8:	str	r7, [sp, #36]	; 0x24
    d6ea:	mov	r7, r3
    d6ec:	b.w	cb88 <_svfprintf_r+0x6a8>
    d6f0:	ldr	r3, [sp, #84]	; 0x54
    d6f2:	adds	r2, r3, #3
    d6f4:	blt.n	d6fc <_svfprintf_r+0x121c>
    d6f6:	cmp	r8, r3
    d6f8:	bge.w	d4c4 <_svfprintf_r+0xfe4>
    d6fc:	ldr	r2, [sp, #48]	; 0x30
    d6fe:	subs	r2, #2
    d700:	str	r2, [sp, #48]	; 0x30
    d702:	subs	r3, #1
    d704:	cmp	r3, #0
    d706:	ldrb.w	r2, [sp, #48]	; 0x30
    d70a:	str	r3, [sp, #84]	; 0x54
    d70c:	it	lt
    d70e:	neglt	r3, r3
    d710:	strb.w	r2, [sp, #92]	; 0x5c
    d714:	ite	lt
    d716:	movlt	r2, #45	; 0x2d
    d718:	movge	r2, #43	; 0x2b
    d71a:	cmp	r3, #9
    d71c:	strb.w	r2, [sp, #93]	; 0x5d
    d720:	ble.w	d930 <_svfprintf_r+0x1450>
    d724:	add.w	r0, sp, #107	; 0x6b
    d728:	mov	r4, r0
    d72a:	ldr	r2, [pc, #284]	; (d848 <_svfprintf_r+0x1368>)
    d72c:	smull	r2, r1, r2, r3
    d730:	asrs	r2, r3, #31
    d732:	rsb	r2, r2, r1, asr #2
    d736:	add.w	r1, r2, r2, lsl #2
    d73a:	sub.w	r3, r3, r1, lsl #1
    d73e:	add.w	r1, r3, #48	; 0x30
    d742:	cmp	r2, #9
    d744:	mov	r3, r2
    d746:	strb.w	r1, [r4, #-1]!
    d74a:	bgt.n	d72a <_svfprintf_r+0x124a>
    d74c:	mov	r1, r4
    d74e:	adds	r3, #48	; 0x30
    d750:	uxtb	r2, r3
    d752:	strb.w	r2, [r1, #-1]!
    d756:	cmp	r0, r1
    d758:	bls.w	da20 <_svfprintf_r+0x1540>
    d75c:	add.w	r1, sp, #94	; 0x5e
    d760:	mov	r3, r4
    d762:	b.n	d768 <_svfprintf_r+0x1288>
    d764:	ldrb.w	r2, [r3], #1
    d768:	strb.w	r2, [r1], #1
    d76c:	cmp	r0, r3
    d76e:	bne.n	d764 <_svfprintf_r+0x1284>
    d770:	adds	r3, r0, #1
    d772:	subs	r3, r3, r4
    d774:	add.w	r2, sp, #94	; 0x5e
    d778:	add	r3, r2
    d77a:	add	r2, sp, #92	; 0x5c
    d77c:	subs	r3, r3, r2
    d77e:	ldr	r2, [sp, #52]	; 0x34
    d780:	str	r3, [sp, #68]	; 0x44
    d782:	cmp	r2, #1
    d784:	add	r3, r2
    d786:	str	r3, [sp, #32]
    d788:	ble.w	d98a <_svfprintf_r+0x14aa>
    d78c:	ldr	r3, [sp, #32]
    d78e:	ldr	r2, [sp, #60]	; 0x3c
    d790:	add	r3, r2
    d792:	movs	r2, #0
    d794:	str	r3, [sp, #32]
    d796:	str	r2, [sp, #56]	; 0x38
    d798:	bic.w	r3, r3, r3, asr #31
    d79c:	b.n	d4e2 <_svfprintf_r+0x1002>
    d79e:	mov	r3, r1
    d7a0:	b.n	d4a8 <_svfprintf_r+0xfc8>
    d7a2:	add	r2, sp, #108	; 0x6c
    d7a4:	ldr	r1, [sp, #12]
    d7a6:	ldr	r0, [sp, #20]
    d7a8:	bl	11108 <__ssprint_r>
    d7ac:	cmp	r0, #0
    d7ae:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d7b2:	ldr	r3, [sp, #116]	; 0x74
    d7b4:	add.w	r9, sp, #160	; 0xa0
    d7b8:	b.n	d0c2 <_svfprintf_r+0xbe2>
    d7ba:	add	r2, sp, #108	; 0x6c
    d7bc:	ldr	r1, [sp, #12]
    d7be:	ldr	r0, [sp, #20]
    d7c0:	bl	11108 <__ssprint_r>
    d7c4:	cmp	r0, #0
    d7c6:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d7ca:	ldr	r2, [sp, #84]	; 0x54
    d7cc:	ldr	r3, [sp, #116]	; 0x74
    d7ce:	add.w	r9, sp, #160	; 0xa0
    d7d2:	b.n	d2c8 <_svfprintf_r+0xde8>
    d7d4:	mov	r6, r9
    d7d6:	mov	r9, r1
    d7d8:	adds	r2, #1
    d7da:	add	r3, r4
    d7dc:	cmp	r2, #7
    d7de:	str	r3, [sp, #116]	; 0x74
    d7e0:	str	r2, [sp, #112]	; 0x70
    d7e2:	str.w	r7, [r9]
    d7e6:	str.w	r4, [r9, #4]
    d7ea:	bgt.w	d6a2 <_svfprintf_r+0x11c2>
    d7ee:	add.w	r9, r9, #8
    d7f2:	b.n	d6ba <_svfprintf_r+0x11da>
    d7f4:	add	r2, sp, #108	; 0x6c
    d7f6:	ldr	r1, [sp, #12]
    d7f8:	ldr	r0, [sp, #20]
    d7fa:	bl	11108 <__ssprint_r>
    d7fe:	cmp	r0, #0
    d800:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d804:	ldr	r2, [sp, #84]	; 0x54
    d806:	ldr	r1, [sp, #52]	; 0x34
    d808:	ldr	r3, [sp, #116]	; 0x74
    d80a:	subs	r2, r1, r2
    d80c:	add.w	r9, sp, #160	; 0xa0
    d810:	b.n	d2f8 <_svfprintf_r+0xe18>
    d812:	cmp	r5, #6
    d814:	mov	r3, r5
    d816:	it	cs
    d818:	movcs	r3, #6
    d81a:	str	r3, [sp, #32]
    d81c:	bic.w	r3, r3, r3, asr #31
    d820:	mov	r8, r6
    d822:	str	r7, [sp, #36]	; 0x24
    d824:	str	r6, [sp, #56]	; 0x38
    d826:	mov	r7, r6
    d828:	str	r3, [sp, #16]
    d82a:	ldr	r6, [pc, #32]	; (d84c <_svfprintf_r+0x136c>)
    d82c:	b.w	c8c4 <_svfprintf_r+0x3e4>
    d830:	mov	fp, r3
    d832:	b.w	cc0a <_svfprintf_r+0x72a>
    d836:	movs	r7, #45	; 0x2d
    d838:	strb.w	r7, [sp, #79]	; 0x4f
    d83c:	b.w	c8a6 <_svfprintf_r+0x3c6>
    d840:	.word	0x20000ba0
    d844:	.word	0x20000c28
    d848:	.word	0x66666667
    d84c:	.word	0x20000b98
    d850:	add	r2, sp, #100	; 0x64
    d852:	add	r3, sp, #88	; 0x58
    d854:	str	r2, [sp, #4]
    d856:	str	r3, [sp, #0]
    d858:	movs	r1, #3
    d85a:	add	r3, sp, #84	; 0x54
    d85c:	mov	r2, r8
    d85e:	vmov.f64	d0, d10
    d862:	ldr	r0, [sp, #20]
    d864:	bl	eb48 <_dtoa_r>
    d868:	mov	r4, r8
    d86a:	mov	r6, r0
    d86c:	add.w	r1, r0, r8
    d870:	b.n	d652 <_svfprintf_r+0x1172>
    d872:	mov.w	r8, #6
    d876:	b.n	d42e <_svfprintf_r+0xf4e>
    d878:	vneg.f64	d10, d8
    d87c:	movs	r7, #45	; 0x2d
    d87e:	b.n	d444 <_svfprintf_r+0xf64>
    d880:	ldr	r2, [sp, #60]	; 0x3c
    d882:	ldr	r3, [sp, #52]	; 0x34
    d884:	add	r3, r2
    d886:	ldr	r2, [sp, #56]	; 0x38
    d888:	str	r3, [sp, #32]
    d88a:	cmp	r2, #0
    d88c:	ble.w	d99c <_svfprintf_r+0x14bc>
    d890:	movs	r2, #103	; 0x67
    d892:	bic.w	r3, r3, r3, asr #31
    d896:	str	r2, [sp, #48]	; 0x30
    d898:	b.n	d4e2 <_svfprintf_r+0x1002>
    d89a:	ldr	r3, [sp, #48]	; 0x30
    d89c:	cmp	r3, #71	; 0x47
    d89e:	bne.w	d486 <_svfprintf_r+0xfa6>
    d8a2:	tst.w	fp, #1
    d8a6:	bne.w	d646 <_svfprintf_r+0x1166>
    d8aa:	ldr	r3, [sp, #100]	; 0x64
    d8ac:	cmp	r5, #71	; 0x47
    d8ae:	sub.w	r3, r3, r6
    d8b2:	str	r3, [sp, #52]	; 0x34
    d8b4:	beq.w	d6f0 <_svfprintf_r+0x1210>
    d8b8:	ldr	r3, [sp, #84]	; 0x54
    d8ba:	b.n	d702 <_svfprintf_r+0x1222>
    d8bc:	cmp	r3, #0
    d8be:	mov	r2, r3
    d8c0:	str	r3, [sp, #56]	; 0x38
    d8c2:	ble.n	d9ac <_svfprintf_r+0x14cc>
    d8c4:	cmp.w	r8, #0
    d8c8:	bne.n	d962 <_svfprintf_r+0x1482>
    d8ca:	tst.w	fp, #1
    d8ce:	bne.n	d962 <_svfprintf_r+0x1482>
    d8d0:	bic.w	r3, r3, r3, asr #31
    d8d4:	str	r2, [sp, #32]
    d8d6:	b.n	d4e2 <_svfprintf_r+0x1002>
    d8d8:	tst.w	fp, #1
    d8dc:	mov	r7, r8
    d8de:	beq.n	d8ec <_svfprintf_r+0x140c>
    d8e0:	add	r6, sp, #224	; 0xe0
    d8e2:	movs	r3, #48	; 0x30
    d8e4:	strb.w	r3, [r6, #-65]!
    d8e8:	b.w	cb98 <_svfprintf_r+0x6b8>
    d8ec:	str.w	r8, [sp, #32]
    d8f0:	add	r6, sp, #160	; 0xa0
    d8f2:	b.w	cb9e <_svfprintf_r+0x6be>
    d8f6:	bic.w	r3, r5, r5, asr #31
    d8fa:	str	r7, [sp, #36]	; 0x24
    d8fc:	str	r3, [sp, #16]
    d8fe:	str	r5, [sp, #32]
    d900:	mov	r8, r0
    d902:	str	r0, [sp, #56]	; 0x38
    d904:	ldrb.w	r7, [sp, #79]	; 0x4f
    d908:	b.w	c8c4 <_svfprintf_r+0x3e4>
    d90c:	add	r2, sp, #108	; 0x6c
    d90e:	ldr	r1, [sp, #12]
    d910:	ldr	r0, [sp, #20]
    d912:	bl	11108 <__ssprint_r>
    d916:	cmp	r0, #0
    d918:	bne.w	c6cc <_svfprintf_r+0x1ec>
    d91c:	ldr	r4, [sp, #84]	; 0x54
    d91e:	ldr	r3, [sp, #116]	; 0x74
    d920:	ldr	r2, [sp, #112]	; 0x70
    d922:	add.w	r9, sp, #160	; 0xa0
    d926:	b.n	d5a4 <_svfprintf_r+0x10c4>
    d928:	mov	sl, r4
    d92a:	movs	r5, #0
    d92c:	b.w	c596 <_svfprintf_r+0xb6>
    d930:	adds	r3, #48	; 0x30
    d932:	movs	r2, #48	; 0x30
    d934:	strb.w	r3, [sp, #95]	; 0x5f
    d938:	strb.w	r2, [sp, #94]	; 0x5e
    d93c:	add	r3, sp, #96	; 0x60
    d93e:	b.n	d77a <_svfprintf_r+0x129a>
    d940:	ldr	r2, [sp, #60]	; 0x3c
    d942:	ldr	r3, [sp, #56]	; 0x38
    d944:	add	r3, r2
    d946:	movs	r2, #103	; 0x67
    d948:	str	r3, [sp, #32]
    d94a:	str	r2, [sp, #48]	; 0x30
    d94c:	bic.w	r3, r3, r3, asr #31
    d950:	b.n	d4e2 <_svfprintf_r+0x1002>
    d952:	ldr	r3, [sp, #100]	; 0x64
    d954:	b.n	d4a8 <_svfprintf_r+0xfc8>
    d956:	ldr	r6, [pc, #240]	; (da48 <_svfprintf_r+0x1568>)
    d958:	ldr	r3, [pc, #240]	; (da4c <_svfprintf_r+0x156c>)
    d95a:	ldrb.w	r7, [sp, #79]	; 0x4f
    d95e:	b.w	c8aa <_svfprintf_r+0x3ca>
    d962:	ldr	r3, [sp, #56]	; 0x38
    d964:	ldr	r2, [sp, #60]	; 0x3c
    d966:	adds	r5, r3, r2
    d968:	add.w	r3, r5, r8
    d96c:	str	r3, [sp, #32]
    d96e:	bic.w	r3, r3, r3, asr #31
    d972:	b.n	d4e2 <_svfprintf_r+0x1002>
    d974:	vcmp.f64	d10, #0.0
    d978:	vmrs	APSR_nzcv, fpscr
    d97c:	beq.w	d65a <_svfprintf_r+0x117a>
    d980:	rsb	r4, r4, #1
    d984:	str	r4, [sp, #84]	; 0x54
    d986:	add	r1, r4
    d988:	b.n	d488 <_svfprintf_r+0xfa8>
    d98a:	ands.w	r3, fp, #1
    d98e:	bne.w	d78c <_svfprintf_r+0x12ac>
    d992:	str	r3, [sp, #56]	; 0x38
    d994:	ldr	r3, [sp, #32]
    d996:	bic.w	r3, r3, r3, asr #31
    d99a:	b.n	d4e2 <_svfprintf_r+0x1002>
    d99c:	ldr	r3, [sp, #56]	; 0x38
    d99e:	ldr	r2, [sp, #32]
    d9a0:	rsb	r3, r3, #1
    d9a4:	add	r2, r3
    d9a6:	mov	r3, r2
    d9a8:	str	r2, [sp, #32]
    d9aa:	b.n	d890 <_svfprintf_r+0x13b0>
    d9ac:	cmp.w	r8, #0
    d9b0:	bne.n	d9b8 <_svfprintf_r+0x14d8>
    d9b2:	tst.w	fp, #1
    d9b6:	beq.n	d9c8 <_svfprintf_r+0x14e8>
    d9b8:	ldr	r3, [sp, #60]	; 0x3c
    d9ba:	adds	r5, r3, #1
    d9bc:	add.w	r3, r5, r8
    d9c0:	str	r3, [sp, #32]
    d9c2:	bic.w	r3, r3, r3, asr #31
    d9c6:	b.n	d4e2 <_svfprintf_r+0x1002>
    d9c8:	movs	r3, #1
    d9ca:	str	r3, [sp, #32]
    d9cc:	b.n	d4e2 <_svfprintf_r+0x1002>
    d9ce:	ldr	r0, [sp, #36]	; 0x24
    d9d0:	ldrb.w	r3, [sl, #1]
    d9d4:	ldr	r5, [r0, #0]
    d9d6:	adds	r0, #4
    d9d8:	cmp	r5, #0
    d9da:	str	r0, [sp, #36]	; 0x24
    d9dc:	mov	sl, r4
    d9de:	bge.w	c592 <_svfprintf_r+0xb2>
    d9e2:	mov.w	r5, #4294967295
    d9e6:	b.w	c592 <_svfprintf_r+0xb2>
    d9ea:	strb.w	r1, [sp, #79]	; 0x4f
    d9ee:	b.w	cd0c <_svfprintf_r+0x82c>
    d9f2:	strb.w	r1, [sp, #79]	; 0x4f
    d9f6:	b.w	cd98 <_svfprintf_r+0x8b8>
    d9fa:	ldr	r2, [sp, #20]
    d9fc:	movs	r3, #12
    d9fe:	str	r3, [r2, #0]
    da00:	mov.w	r0, #4294967295
    da04:	b.w	c6de <_svfprintf_r+0x1fe>
    da08:	strb.w	r1, [sp, #79]	; 0x4f
    da0c:	b.w	cbb8 <_svfprintf_r+0x6d8>
    da10:	strb.w	r1, [sp, #79]	; 0x4f
    da14:	b.w	cb5e <_svfprintf_r+0x67e>
    da18:	strb.w	r1, [sp, #79]	; 0x4f
    da1c:	b.w	ccc4 <_svfprintf_r+0x7e4>
    da20:	add.w	r3, sp, #94	; 0x5e
    da24:	b.n	d77a <_svfprintf_r+0x129a>
    da26:	strb.w	r1, [sp, #79]	; 0x4f
    da2a:	b.w	c6f2 <_svfprintf_r+0x212>
    da2e:	strb.w	r1, [sp, #79]	; 0x4f
    da32:	b.w	cafa <_svfprintf_r+0x61a>
    da36:	strb.w	r1, [sp, #79]	; 0x4f
    da3a:	b.w	c86a <_svfprintf_r+0x38a>
    da3e:	strb.w	r1, [sp, #79]	; 0x4f
    da42:	b.w	c7e6 <_svfprintf_r+0x306>
    da46:	nop
    da48:	.word	0x20000b6c
    da4c:	.word	0x20000b68

0000da50 <__ssvfscanf_r>:
    da50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da54:	mov	fp, r1
    da56:	ldrsh.w	r1, [r1, #12]
    da5a:	sub.w	sp, sp, #684	; 0x2ac
    da5e:	mov	sl, r0
    da60:	lsls	r0, r1, #18
    da62:	mov	r4, r2
    da64:	str	r3, [sp, #16]
    da66:	bmi.n	da7c <__ssvfscanf_r+0x2c>
    da68:	ldr.w	r3, [fp, #100]	; 0x64
    da6c:	orr.w	r1, r1, #8192	; 0x2000
    da70:	bic.w	r3, r3, #8192	; 0x2000
    da74:	strh.w	r1, [fp, #12]
    da78:	str.w	r3, [fp, #100]	; 0x64
    da7c:	mov	r6, r4
    da7e:	movs	r3, #0
    da80:	str	r3, [sp, #24]
    da82:	str	r3, [sp, #12]
    da84:	mov	r7, r3
    da86:	str	r3, [sp, #20]
    da88:	ldrb.w	r3, [r6], #1
    da8c:	str	r3, [sp, #60]	; 0x3c
    da8e:	cbz	r3, daec <__ssvfscanf_r+0x9c>
    da90:	bl	a6e8 <__locale_ctype_ptr>
    da94:	ldr	r2, [sp, #60]	; 0x3c
    da96:	add	r0, r2
    da98:	ldrb	r3, [r0, #1]
    da9a:	and.w	r3, r3, #8
    da9e:	and.w	r5, r3, #255	; 0xff
    daa2:	cbz	r3, daf6 <__ssvfscanf_r+0xa6>
    daa4:	ldr.w	r3, [fp, #4]
    daa8:	b.n	dace <__ssvfscanf_r+0x7e>
    daaa:	bl	a6e8 <__locale_ctype_ptr>
    daae:	ldr.w	r3, [fp]
    dab2:	ldrb	r2, [r3, #0]
    dab4:	add	r0, r2
    dab6:	adds	r3, #1
    dab8:	ldrb	r2, [r0, #1]
    daba:	lsls	r1, r2, #28
    dabc:	bpl.n	dade <__ssvfscanf_r+0x8e>
    dabe:	ldr.w	r2, [fp, #4]
    dac2:	str.w	r3, [fp]
    dac6:	subs	r3, r2, #1
    dac8:	adds	r7, #1
    daca:	str.w	r3, [fp, #4]
    dace:	cmp	r3, #0
    dad0:	bgt.n	daaa <__ssvfscanf_r+0x5a>
    dad2:	mov	r1, fp
    dad4:	mov	r0, sl
    dad6:	bl	1128c <__ssrefill_r>
    dada:	cmp	r0, #0
    dadc:	beq.n	daaa <__ssvfscanf_r+0x5a>
    dade:	mov	r4, r6
    dae0:	mov	r6, r4
    dae2:	ldrb.w	r3, [r6], #1
    dae6:	str	r3, [sp, #60]	; 0x3c
    dae8:	cmp	r3, #0
    daea:	bne.n	da90 <__ssvfscanf_r+0x40>
    daec:	ldr	r0, [sp, #20]
    daee:	add.w	sp, sp, #684	; 0x2ac
    daf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    daf6:	cmp	r2, #37	; 0x25
    daf8:	bne.w	dc04 <__ssvfscanf_r+0x1b4>
    dafc:	ldrb.w	r8, [r4, #1]
    db00:	mov	r4, r5
    db02:	adds	r3, r6, #1
    db04:	cmp.w	r8, #120	; 0x78
    db08:	bhi.w	df92 <__ssvfscanf_r+0x542>
    db0c:	tbh	[pc, r8, lsl #1]
    db10:	.word	0x02410092
    db14:	.word	0x02410241
    db18:	.word	0x02410241
    db1c:	.word	0x02410241
    db20:	.word	0x02410241
    db24:	.word	0x02410241
    db28:	.word	0x02410241
    db2c:	.word	0x02410241
    db30:	.word	0x02410241
    db34:	.word	0x02410241
    db38:	.word	0x02410241
    db3c:	.word	0x02410241
    db40:	.word	0x02410241
    db44:	.word	0x02410241
    db48:	.word	0x02410241
    db4c:	.word	0x02410241
    db50:	.word	0x02410241
    db54:	.word	0x02410241
    db58:	.word	0x00790241
    db5c:	.word	0x02410241
    db60:	.word	0x02410241
    db64:	.word	0x024101d8
    db68:	.word	0x02410241
    db6c:	.word	0x02410241
    db70:	.word	0x01cf01cf
    db74:	.word	0x01cf01cf
    db78:	.word	0x01cf01cf
    db7c:	.word	0x01cf01cf
    db80:	.word	0x01cf01cf
    db84:	.word	0x02410241
    db88:	.word	0x02410241
    db8c:	.word	0x02410241
    db90:	.word	0x02410241
    db94:	.word	0x02410241
    db98:	.word	0x01b901c1
    db9c:	.word	0x01b90241
    dba0:	.word	0x02410241
    dba4:	.word	0x02410241
    dba8:	.word	0x024101b3
    dbac:	.word	0x01a30241
    dbb0:	.word	0x02410241
    dbb4:	.word	0x02410241
    dbb8:	.word	0x02410241
    dbbc:	.word	0x02410241
    dbc0:	.word	0x02410193
    dbc4:	.word	0x01510241
    dbc8:	.word	0x02410241
    dbcc:	.word	0x02410241
    dbd0:	.word	0x02410241
    dbd4:	.word	0x01220241
    dbd8:	.word	0x01b90188
    dbdc:	.word	0x01b901b9
    dbe0:	.word	0x0098011c
    dbe4:	.word	0x02410241
    dbe8:	.word	0x024100d5
    dbec:	.word	0x0101010d
    dbf0:	.word	0x024100f3
    dbf4:	.word	0x00eb0241
    dbf8:	.word	0x00df0241
    dbfc:	.word	0x02410241
    dc00:	.short	0x0193
    dc02:	mov	r6, r3
    dc04:	ldr.w	r3, [fp, #4]
    dc08:	cmp	r3, #0
    dc0a:	ble.w	e0b4 <__ssvfscanf_r+0x664>
    dc0e:	ldr.w	r3, [fp]
    dc12:	ldrb.w	r2, [r6, #-1]
    dc16:	ldrb	r1, [r3, #0]
    dc18:	cmp	r1, r2
    dc1a:	bne.w	daec <__ssvfscanf_r+0x9c>
    dc1e:	ldr.w	r2, [fp, #4]
    dc22:	adds	r3, #1
    dc24:	subs	r2, #1
    dc26:	str.w	r3, [fp]
    dc2a:	adds	r7, #1
    dc2c:	str.w	r2, [fp, #4]
    dc30:	mov	r4, r6
    dc32:	b.n	dae0 <__ssvfscanf_r+0x90>
    dc34:	mov.w	r0, #4294967295
    dc38:	add.w	sp, sp, #684	; 0x2ac
    dc3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc40:	str	r3, [sp, #8]
    dc42:	ldr.w	r3, [fp, #4]
    dc46:	cmp	r3, #0
    dc48:	ble.w	e112 <__ssvfscanf_r+0x6c2>
    dc4c:	ldr	r3, [pc, #736]	; (df30 <__ssvfscanf_r+0x4e0>)
    dc4e:	str	r3, [sp, #24]
    dc50:	movs	r3, #0
    dc52:	str	r3, [sp, #12]
    dc54:	movs	r6, #3
    dc56:	b.n	dc5c <__ssvfscanf_r+0x20c>
    dc58:	str.w	lr, [fp]
    dc5c:	bl	a6e8 <__locale_ctype_ptr>
    dc60:	ldr.w	r2, [fp]
    dc64:	ldrb	r1, [r2, #0]
    dc66:	add	r0, r1
    dc68:	add.w	lr, r2, #1
    dc6c:	ldrb	r3, [r0, #1]
    dc6e:	and.w	r3, r3, #8
    dc72:	and.w	r8, r3, #255	; 0xff
    dc76:	cmp	r3, #0
    dc78:	beq.w	e17a <__ssvfscanf_r+0x72a>
    dc7c:	ldr.w	r3, [fp, #4]
    dc80:	subs	r3, #1
    dc82:	cmp	r3, #0
    dc84:	add.w	r7, r7, #1
    dc88:	str.w	r3, [fp, #4]
    dc8c:	bgt.n	dc58 <__ssvfscanf_r+0x208>
    dc8e:	mov	r1, fp
    dc90:	mov	r0, sl
    dc92:	bl	1128c <__ssrefill_r>
    dc96:	cmp	r0, #0
    dc98:	beq.n	dc5c <__ssvfscanf_r+0x20c>
    dc9a:	ldr	r2, [sp, #20]
    dc9c:	cmp	r2, #0
    dc9e:	beq.n	dc34 <__ssvfscanf_r+0x1e4>
    dca0:	ldrh.w	r3, [fp, #12]
    dca4:	tst.w	r3, #64	; 0x40
    dca8:	mov	r3, r2
    dcaa:	it	ne
    dcac:	movne.w	r3, #4294967295
    dcb0:	mov	r0, r3
    dcb2:	add.w	sp, sp, #684	; 0x2ac
    dcb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcba:	ldrb.w	r8, [r6, #1]
    dcbe:	cmp.w	r8, #108	; 0x6c
    dcc2:	beq.w	e0ca <__ssvfscanf_r+0x67a>
    dcc6:	orr.w	r5, r5, #1
    dcca:	mov	r6, r3
    dccc:	b.n	db02 <__ssvfscanf_r+0xb2>
    dcce:	str	r3, [sp, #8]
    dcd0:	ldr.w	r3, [fp, #4]
    dcd4:	cmp	r3, #0
    dcd6:	ble.w	e16a <__ssvfscanf_r+0x71a>
    dcda:	ldr	r3, [pc, #600]	; (df34 <__ssvfscanf_r+0x4e4>)
    dcdc:	str	r3, [sp, #24]
    dcde:	movs	r3, #10
    dce0:	str	r3, [sp, #12]
    dce2:	movs	r6, #3
    dce4:	b.n	dc5c <__ssvfscanf_r+0x20c>
    dce6:	str	r3, [sp, #8]
    dce8:	ldr.w	r3, [fp, #4]
    dcec:	cmp	r3, #0
    dcee:	ble.w	e15a <__ssvfscanf_r+0x70a>
    dcf2:	movs	r6, #2
    dcf4:	b.n	dc5c <__ssvfscanf_r+0x20c>
    dcf6:	str	r3, [sp, #8]
    dcf8:	ldr.w	r3, [fp, #4]
    dcfc:	cmp	r3, #0
    dcfe:	orr.w	r5, r5, #544	; 0x220
    dd02:	ble.w	de46 <__ssvfscanf_r+0x3f6>
    dd06:	ldr	r3, [pc, #556]	; (df34 <__ssvfscanf_r+0x4e4>)
    dd08:	str	r3, [sp, #24]
    dd0a:	movs	r3, #16
    dd0c:	str	r3, [sp, #12]
    dd0e:	movs	r6, #3
    dd10:	b.n	dc5c <__ssvfscanf_r+0x20c>
    dd12:	str	r3, [sp, #8]
    dd14:	ldr.w	r3, [fp, #4]
    dd18:	cmp	r3, #0
    dd1a:	ble.w	de66 <__ssvfscanf_r+0x416>
    dd1e:	ldr	r3, [pc, #532]	; (df34 <__ssvfscanf_r+0x4e4>)
    dd20:	str	r3, [sp, #24]
    dd22:	movs	r3, #8
    dd24:	str	r3, [sp, #12]
    dd26:	movs	r6, #3
    dd28:	b.n	dc5c <__ssvfscanf_r+0x20c>
    dd2a:	lsls	r2, r5, #27
    dd2c:	mov	r6, r3
    dd2e:	str	r3, [sp, #8]
    dd30:	bmi.w	df18 <__ssvfscanf_r+0x4c8>
    dd34:	lsls	r3, r5, #29
    dd36:	bpl.w	e0e2 <__ssvfscanf_r+0x692>
    dd3a:	ldr	r1, [sp, #16]
    dd3c:	ldr	r3, [r1, #0]
    dd3e:	strh	r7, [r3, #0]
    dd40:	adds	r3, r1, #4
    dd42:	str	r3, [sp, #16]
    dd44:	mov	r4, r6
    dd46:	b.n	dae0 <__ssvfscanf_r+0x90>
    dd48:	ldrb.w	r8, [r6, #1]
    dd4c:	orr.w	r5, r5, #4
    dd50:	mov	r6, r3
    dd52:	b.n	db02 <__ssvfscanf_r+0xb2>
    dd54:	str	r3, [sp, #8]
    dd56:	ldr.w	r3, [fp, #4]
    dd5a:	cmp	r3, #0
    dd5c:	ble.w	e13a <__ssvfscanf_r+0x6ea>
    dd60:	cmp	r4, #0
    dd62:	it	eq
    dd64:	moveq	r4, #1
    dd66:	ands.w	r3, r5, #1
    dd6a:	bne.w	dfb2 <__ssvfscanf_r+0x562>
    dd6e:	lsls	r2, r5, #27
    dd70:	bpl.w	e08a <__ssvfscanf_r+0x63a>
    dd74:	mov	r5, r3
    dd76:	b.n	dd8c <__ssvfscanf_r+0x33c>
    dd78:	add	r3, r2
    dd7a:	str.w	r3, [fp]
    dd7e:	add	r5, r2
    dd80:	subs	r4, r4, r2
    dd82:	bl	1128c <__ssrefill_r>
    dd86:	cmp	r0, #0
    dd88:	bne.w	e082 <__ssvfscanf_r+0x632>
    dd8c:	ldr.w	r2, [fp, #4]
    dd90:	ldr.w	r3, [fp]
    dd94:	cmp	r2, r4
    dd96:	mov	r1, fp
    dd98:	mov	r0, sl
    dd9a:	blt.n	dd78 <__ssvfscanf_r+0x328>
    dd9c:	subs	r2, r2, r4
    dd9e:	add	r3, r4
    dda0:	str.w	r2, [fp, #4]
    dda4:	add	r5, r4
    dda6:	str.w	r3, [fp]
    ddaa:	ldr	r6, [sp, #8]
    ddac:	add	r7, r5
    ddae:	mov	r4, r6
    ddb0:	b.n	dae0 <__ssvfscanf_r+0x90>
    ddb2:	add.w	r9, sp, #72	; 0x48
    ddb6:	mov	r1, r3
    ddb8:	mov	r0, r9
    ddba:	bl	10b1c <__sccl>
    ddbe:	ldr.w	r3, [fp, #4]
    ddc2:	cmp	r3, #0
    ddc4:	mov	r6, r0
    ddc6:	ble.w	e12a <__ssvfscanf_r+0x6da>
    ddca:	cmp	r4, #0
    ddcc:	ldr.w	r2, [fp]
    ddd0:	it	eq
    ddd2:	moveq.w	r4, #4294967295
    ddd6:	lsls	r3, r5, #27
    ddd8:	ldrb	r1, [r2, #0]
    ddda:	bpl.w	df1e <__ssvfscanf_r+0x4ce>
    ddde:	mov	r8, r4
    dde0:	movs	r5, #0
    dde2:	b.n	dde6 <__ssvfscanf_r+0x396>
    dde4:	ldrb	r1, [r2, #0]
    dde6:	ldrb.w	r3, [r9, r1]
    ddea:	adds	r2, #1
    ddec:	cmp	r3, #0
    ddee:	beq.w	e078 <__ssvfscanf_r+0x628>
    ddf2:	ldr.w	r3, [fp, #4]
    ddf6:	str.w	r2, [fp]
    ddfa:	adds	r5, #1
    ddfc:	subs	r3, #1
    ddfe:	cmp	r5, r4
    de00:	str.w	r3, [fp, #4]
    de04:	beq.w	e072 <__ssvfscanf_r+0x622>
    de08:	cmp	r3, #0
    de0a:	bgt.n	dde4 <__ssvfscanf_r+0x394>
    de0c:	mov	r1, fp
    de0e:	mov	r0, sl
    de10:	bl	1128c <__ssrefill_r>
    de14:	cmp	r0, #0
    de16:	bne.w	e070 <__ssvfscanf_r+0x620>
    de1a:	ldr.w	r2, [fp]
    de1e:	b.n	dde4 <__ssvfscanf_r+0x394>
    de20:	str	r3, [sp, #8]
    de22:	ldr.w	r3, [fp, #4]
    de26:	cmp	r3, #0
    de28:	ble.n	dea0 <__ssvfscanf_r+0x450>
    de2a:	ldr	r3, [pc, #260]	; (df30 <__ssvfscanf_r+0x4e0>)
    de2c:	str	r3, [sp, #24]
    de2e:	movs	r3, #10
    de30:	str	r3, [sp, #12]
    de32:	movs	r6, #3
    de34:	b.n	dc5c <__ssvfscanf_r+0x20c>
    de36:	str	r3, [sp, #8]
    de38:	ldr.w	r3, [fp, #4]
    de3c:	cmp	r3, #0
    de3e:	orr.w	r5, r5, #512	; 0x200
    de42:	bgt.w	dd06 <__ssvfscanf_r+0x2b6>
    de46:	mov	r1, fp
    de48:	mov	r0, sl
    de4a:	bl	1128c <__ssrefill_r>
    de4e:	cmp	r0, #0
    de50:	beq.w	dd06 <__ssvfscanf_r+0x2b6>
    de54:	b.n	dc9a <__ssvfscanf_r+0x24a>
    de56:	str	r3, [sp, #8]
    de58:	ldr.w	r3, [fp, #4]
    de5c:	cmp	r3, #0
    de5e:	orr.w	r5, r5, #1
    de62:	bgt.w	dd1e <__ssvfscanf_r+0x2ce>
    de66:	mov	r1, fp
    de68:	mov	r0, sl
    de6a:	bl	1128c <__ssrefill_r>
    de6e:	cmp	r0, #0
    de70:	beq.w	dd1e <__ssvfscanf_r+0x2ce>
    de74:	b.n	dc9a <__ssvfscanf_r+0x24a>
    de76:	ldrb.w	r8, [r6, #1]
    de7a:	orr.w	r5, r5, #2
    de7e:	mov	r6, r3
    de80:	b.n	db02 <__ssvfscanf_r+0xb2>
    de82:	str	r3, [sp, #8]
    de84:	ldr.w	r3, [fp, #4]
    de88:	cmp	r3, #0
    de8a:	ble.w	e14a <__ssvfscanf_r+0x6fa>
    de8e:	movs	r6, #4
    de90:	b.n	dc5c <__ssvfscanf_r+0x20c>
    de92:	str	r3, [sp, #8]
    de94:	ldr.w	r3, [fp, #4]
    de98:	cmp	r3, #0
    de9a:	orr.w	r5, r5, #1
    de9e:	bgt.n	de2a <__ssvfscanf_r+0x3da>
    dea0:	mov	r1, fp
    dea2:	mov	r0, sl
    dea4:	bl	1128c <__ssrefill_r>
    dea8:	cmp	r0, #0
    deaa:	beq.n	de2a <__ssvfscanf_r+0x3da>
    deac:	b.n	dc9a <__ssvfscanf_r+0x24a>
    deae:	add.w	r4, r4, r4, lsl #2
    deb2:	add.w	r4, r8, r4, lsl #1
    deb6:	subs	r4, #48	; 0x30
    deb8:	ldrb.w	r8, [r6, #1]
    debc:	mov	r6, r3
    debe:	b.n	db02 <__ssvfscanf_r+0xb2>
    dec0:	ldrb.w	r8, [r6, #1]
    dec4:	orr.w	r5, r5, #16
    dec8:	mov	r6, r3
    deca:	b.n	db02 <__ssvfscanf_r+0xb2>
    decc:	add	r3, sp, #64	; 0x40
    dece:	mov	r1, r8
    ded0:	mov	r0, r3
    ded2:	movs	r2, #8
    ded4:	str	r3, [sp, #28]
    ded6:	bl	8760 <memset>
    deda:	ands.w	r9, r5, #16
    dede:	bne.w	e796 <__ssvfscanf_r+0xd46>
    dee2:	ldr	r2, [sp, #16]
    dee4:	mov	r3, r2
    dee6:	adds	r3, #4
    dee8:	ldr.w	r8, [r2]
    deec:	str	r3, [sp, #16]
    deee:	movs	r6, #0
    def0:	bl	a6e8 <__locale_ctype_ptr>
    def4:	ldr.w	r3, [fp]
    def8:	ldrb	r3, [r3, #0]
    defa:	add	r0, r3
    defc:	ldrb	r3, [r0, #1]
    defe:	lsls	r0, r3, #28
    df00:	bmi.n	df08 <__ssvfscanf_r+0x4b8>
    df02:	cmp	r4, #0
    df04:	bne.w	e6fa <__ssvfscanf_r+0xcaa>
    df08:	cmp.w	r9, #0
    df0c:	bne.n	df18 <__ssvfscanf_r+0x4c8>
    df0e:	str.w	r9, [r8]
    df12:	ldr	r3, [sp, #20]
    df14:	adds	r3, #1
    df16:	str	r3, [sp, #20]
    df18:	ldr	r6, [sp, #8]
    df1a:	mov	r4, r6
    df1c:	b.n	dae0 <__ssvfscanf_r+0x90>
    df1e:	ldr	r0, [sp, #16]
    df20:	ldr	r5, [r0, #0]
    df22:	mov	r3, r0
    df24:	adds	r3, #4
    df26:	add.w	r8, r5, r4
    df2a:	str	r3, [sp, #8]
    df2c:	mov	r4, r5
    df2e:	b.n	df3e <__ssvfscanf_r+0x4ee>
    df30:	.word	0x0000c4b9
    df34:	.word	0x00010ed5
    df38:	ldr.w	r2, [fp]
    df3c:	ldrb	r1, [r2, #0]
    df3e:	ldrb.w	r3, [r9, r1]
    df42:	adds	r0, r2, #1
    df44:	cbz	r3, df78 <__ssvfscanf_r+0x528>
    df46:	ldr.w	r3, [fp, #4]
    df4a:	str.w	r0, [fp]
    df4e:	subs	r3, #1
    df50:	str.w	r3, [fp, #4]
    df54:	ldrb	r3, [r2, #0]
    df56:	strb.w	r3, [r4], #1
    df5a:	cmp	r8, r4
    df5c:	beq.n	df78 <__ssvfscanf_r+0x528>
    df5e:	ldr.w	r3, [fp, #4]
    df62:	cmp	r3, #0
    df64:	bgt.n	df38 <__ssvfscanf_r+0x4e8>
    df66:	mov	r1, fp
    df68:	mov	r0, sl
    df6a:	bl	1128c <__ssrefill_r>
    df6e:	cmp	r0, #0
    df70:	beq.n	df38 <__ssvfscanf_r+0x4e8>
    df72:	cmp	r5, r4
    df74:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    df78:	subs	r5, r4, r5
    df7a:	beq.w	daec <__ssvfscanf_r+0x9c>
    df7e:	ldr	r2, [sp, #20]
    df80:	adds	r2, #1
    df82:	movs	r3, #0
    df84:	str	r2, [sp, #20]
    df86:	ldr	r2, [sp, #8]
    df88:	str	r2, [sp, #16]
    df8a:	strb	r3, [r4, #0]
    df8c:	add	r7, r5
    df8e:	mov	r4, r6
    df90:	b.n	dae0 <__ssvfscanf_r+0x90>
    df92:	str	r3, [sp, #8]
    df94:	bl	a6e8 <__locale_ctype_ptr>
    df98:	add	r0, r8
    df9a:	ldrb	r3, [r0, #1]
    df9c:	and.w	r3, r3, #3
    dfa0:	cmp	r3, #1
    dfa2:	ldr.w	r3, [fp, #4]
    dfa6:	beq.w	e0d6 <__ssvfscanf_r+0x686>
    dfaa:	cmp	r3, #0
    dfac:	bgt.w	de2a <__ssvfscanf_r+0x3da>
    dfb0:	b.n	dea0 <__ssvfscanf_r+0x450>
    dfb2:	add	r3, sp, #64	; 0x40
    dfb4:	mov	r0, r3
    dfb6:	movs	r2, #8
    dfb8:	movs	r1, #0
    dfba:	str	r3, [sp, #28]
    dfbc:	bl	8760 <memset>
    dfc0:	ands.w	r3, r5, #16
    dfc4:	str	r3, [sp, #32]
    dfc6:	bne.n	e0c4 <__ssvfscanf_r+0x674>
    dfc8:	ldr	r2, [sp, #16]
    dfca:	mov	r3, r2
    dfcc:	adds	r3, #4
    dfce:	ldr.w	r9, [r2]
    dfd2:	str	r3, [sp, #16]
    dfd4:	movs	r5, #0
    dfd6:	add.w	r8, sp, #328	; 0x148
    dfda:	bl	a6c4 <__locale_mb_cur_max>
    dfde:	cmp	r0, r5
    dfe0:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    dfe4:	ldmia.w	fp, {r2, r3}
    dfe8:	ldrb.w	r0, [r2], #1
    dfec:	str.w	r2, [fp]
    dff0:	subs	r3, #1
    dff2:	ldr	r2, [sp, #28]
    dff4:	str	r2, [sp, #0]
    dff6:	adds	r6, r5, #1
    dff8:	str.w	r3, [fp, #4]
    dffc:	mov	r1, r9
    dffe:	strb.w	r0, [r8, r5]
    e002:	mov	r3, r6
    e004:	mov	r2, r8
    e006:	mov	r0, sl
    e008:	bl	101dc <_mbrtowc_r>
    e00c:	adds	r1, r0, #1
    e00e:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    e012:	cbnz	r0, e03e <__ssvfscanf_r+0x5ee>
    e014:	ldr	r3, [sp, #32]
    e016:	cbnz	r3, e05e <__ssvfscanf_r+0x60e>
    e018:	str.w	r3, [r9]
    e01c:	add	r7, r6
    e01e:	subs	r4, #1
    e020:	add.w	r9, r9, #4
    e024:	ldr.w	r3, [fp, #4]
    e028:	cmp	r3, #0
    e02a:	mov.w	r5, #0
    e02e:	ble.n	e04c <__ssvfscanf_r+0x5fc>
    e030:	cmp	r4, #0
    e032:	bne.n	dfda <__ssvfscanf_r+0x58a>
    e034:	ldr	r3, [sp, #32]
    e036:	cmp	r3, #0
    e038:	beq.w	df12 <__ssvfscanf_r+0x4c2>
    e03c:	b.n	df18 <__ssvfscanf_r+0x4c8>
    e03e:	adds	r0, #2
    e040:	bne.n	e064 <__ssvfscanf_r+0x614>
    e042:	ldr.w	r3, [fp, #4]
    e046:	cmp	r3, #0
    e048:	mov	r5, r6
    e04a:	bgt.n	dfda <__ssvfscanf_r+0x58a>
    e04c:	mov	r1, fp
    e04e:	mov	r0, sl
    e050:	bl	1128c <__ssrefill_r>
    e054:	cmp	r0, #0
    e056:	beq.n	e030 <__ssvfscanf_r+0x5e0>
    e058:	cmp	r5, #0
    e05a:	beq.n	e034 <__ssvfscanf_r+0x5e4>
    e05c:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e05e:	add	r7, r6
    e060:	subs	r4, #1
    e062:	b.n	e024 <__ssvfscanf_r+0x5d4>
    e064:	ldr	r3, [sp, #32]
    e066:	add	r7, r6
    e068:	subs	r4, #1
    e06a:	cmp	r3, #0
    e06c:	bne.n	e024 <__ssvfscanf_r+0x5d4>
    e06e:	b.n	e020 <__ssvfscanf_r+0x5d0>
    e070:	mov	r8, r5
    e072:	mov	r5, r8
    e074:	add	r7, r5
    e076:	b.n	df8e <__ssvfscanf_r+0x53e>
    e078:	cmp	r5, #0
    e07a:	beq.w	daec <__ssvfscanf_r+0x9c>
    e07e:	add	r7, r5
    e080:	b.n	df8e <__ssvfscanf_r+0x53e>
    e082:	cmp	r5, #0
    e084:	bne.w	ddaa <__ssvfscanf_r+0x35a>
    e088:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e08a:	ldr	r5, [sp, #16]
    e08c:	mov	r3, r4
    e08e:	ldr	r1, [r5, #0]
    e090:	str.w	fp, [sp]
    e094:	movs	r2, #1
    e096:	mov	r0, sl
    e098:	bl	112c8 <_sfread_r>
    e09c:	adds	r6, r5, #4
    e09e:	cmp	r0, #0
    e0a0:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    e0a4:	ldr	r3, [sp, #20]
    e0a6:	str	r6, [sp, #16]
    e0a8:	ldr	r6, [sp, #8]
    e0aa:	adds	r3, #1
    e0ac:	add	r7, r0
    e0ae:	str	r3, [sp, #20]
    e0b0:	mov	r4, r6
    e0b2:	b.n	dae0 <__ssvfscanf_r+0x90>
    e0b4:	mov	r1, fp
    e0b6:	mov	r0, sl
    e0b8:	bl	1128c <__ssrefill_r>
    e0bc:	cmp	r0, #0
    e0be:	beq.w	dc0e <__ssvfscanf_r+0x1be>
    e0c2:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e0c4:	mov.w	r9, #0
    e0c8:	b.n	dfd4 <__ssvfscanf_r+0x584>
    e0ca:	ldrb.w	r8, [r6, #2]
    e0ce:	orr.w	r5, r5, #2
    e0d2:	adds	r6, #2
    e0d4:	b.n	db02 <__ssvfscanf_r+0xb2>
    e0d6:	cmp	r3, #0
    e0d8:	orr.w	r5, r5, #1
    e0dc:	bgt.w	de2a <__ssvfscanf_r+0x3da>
    e0e0:	b.n	dea0 <__ssvfscanf_r+0x450>
    e0e2:	lsls	r4, r5, #31
    e0e4:	bmi.n	e100 <__ssvfscanf_r+0x6b0>
    e0e6:	lsls	r0, r5, #30
    e0e8:	bpl.n	e100 <__ssvfscanf_r+0x6b0>
    e0ea:	ldr	r2, [sp, #16]
    e0ec:	ldr	r6, [sp, #8]
    e0ee:	ldr	r3, [r2, #0]
    e0f0:	mov	r0, r7
    e0f2:	asrs	r1, r7, #31
    e0f4:	adds	r2, #4
    e0f6:	str	r2, [sp, #16]
    e0f8:	strd	r0, r1, [r3]
    e0fc:	mov	r4, r6
    e0fe:	b.n	dae0 <__ssvfscanf_r+0x90>
    e100:	ldr	r2, [sp, #16]
    e102:	ldr	r6, [sp, #8]
    e104:	ldr	r3, [r2, #0]
    e106:	str	r7, [r3, #0]
    e108:	mov	r3, r2
    e10a:	adds	r3, #4
    e10c:	str	r3, [sp, #16]
    e10e:	mov	r4, r6
    e110:	b.n	dae0 <__ssvfscanf_r+0x90>
    e112:	mov	r1, fp
    e114:	mov	r0, sl
    e116:	bl	1128c <__ssrefill_r>
    e11a:	cmp	r0, #0
    e11c:	bne.w	dc9a <__ssvfscanf_r+0x24a>
    e120:	ldr	r3, [pc, #504]	; (e31c <__ssvfscanf_r+0x8cc>)
    e122:	str	r0, [sp, #12]
    e124:	str	r3, [sp, #24]
    e126:	movs	r6, #3
    e128:	b.n	dc5c <__ssvfscanf_r+0x20c>
    e12a:	mov	r1, fp
    e12c:	mov	r0, sl
    e12e:	bl	1128c <__ssrefill_r>
    e132:	cmp	r0, #0
    e134:	beq.w	ddca <__ssvfscanf_r+0x37a>
    e138:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e13a:	mov	r1, fp
    e13c:	mov	r0, sl
    e13e:	bl	1128c <__ssrefill_r>
    e142:	cmp	r0, #0
    e144:	beq.w	dd60 <__ssvfscanf_r+0x310>
    e148:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e14a:	mov	r1, fp
    e14c:	mov	r0, sl
    e14e:	bl	1128c <__ssrefill_r>
    e152:	cmp	r0, #0
    e154:	beq.w	de8e <__ssvfscanf_r+0x43e>
    e158:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e15a:	mov	r1, fp
    e15c:	mov	r0, sl
    e15e:	bl	1128c <__ssrefill_r>
    e162:	cmp	r0, #0
    e164:	beq.w	dcf2 <__ssvfscanf_r+0x2a2>
    e168:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e16a:	mov	r1, fp
    e16c:	mov	r0, sl
    e16e:	bl	1128c <__ssrefill_r>
    e172:	cmp	r0, #0
    e174:	beq.w	dcda <__ssvfscanf_r+0x28a>
    e178:	b.n	dc9a <__ssvfscanf_r+0x24a>
    e17a:	cmp	r6, #3
    e17c:	beq.w	e4b0 <__ssvfscanf_r+0xa60>
    e180:	cmp	r6, #4
    e182:	bne.w	e5f2 <__ssvfscanf_r+0xba2>
    e186:	mov	r0, sl
    e188:	bl	101c0 <_localeconv_r>
    e18c:	subs	r3, r4, #1
    e18e:	ldr	r2, [r0, #0]
    e190:	str	r2, [sp, #40]	; 0x28
    e192:	cmp.w	r3, #348	; 0x15c
    e196:	bls.w	e65a <__ssvfscanf_r+0xc0a>
    e19a:	mvn.w	r1, #348	; 0x15c
    e19e:	adds	r3, r4, r1
    e1a0:	str	r3, [sp, #48]	; 0x30
    e1a2:	movw	r4, #349	; 0x15d
    e1a6:	add	r3, sp, #328	; 0x148
    e1a8:	mov.w	r8, #0
    e1ac:	mov	r2, r3
    e1ae:	str	r3, [sp, #32]
    e1b0:	orr.w	r5, r5, #1920	; 0x780
    e1b4:	mov	r3, r8
    e1b6:	str.w	r8, [sp, #52]	; 0x34
    e1ba:	str.w	r8, [sp, #44]	; 0x2c
    e1be:	mov	r6, r8
    e1c0:	str.w	r8, [sp, #36]	; 0x24
    e1c4:	mov	r9, r2
    e1c6:	ldr.w	r0, [fp]
    e1ca:	ldrb	r1, [r0, #0]
    e1cc:	sub.w	lr, r1, #43	; 0x2b
    e1d0:	cmp.w	lr, #78	; 0x4e
    e1d4:	bhi.w	e460 <__ssvfscanf_r+0xa10>
    e1d8:	tbh	[pc, lr, lsl #1]
    e1dc:	.word	0x0142007a
    e1e0:	.word	0x0142007a
    e1e4:	.word	0x006e0142
    e1e8:	.word	0x004f004f
    e1ec:	.word	0x004f004f
    e1f0:	.word	0x004f004f
    e1f4:	.word	0x004f004f
    e1f8:	.word	0x0142004f
    e1fc:	.word	0x01420142
    e200:	.word	0x01420142
    e204:	.word	0x01420142
    e208:	.word	0x0142013d
    e20c:	.word	0x01420142
    e210:	.word	0x011e0125
    e214:	.word	0x01420142
    e218:	.word	0x014200a2
    e21c:	.word	0x01420142
    e220:	.word	0x008b0142
    e224:	.word	0x01420142
    e228:	.word	0x01420142
    e22c:	.word	0x00850142
    e230:	.word	0x01420142
    e234:	.word	0x01420142
    e238:	.word	0x0142007f
    e23c:	.word	0x01420142
    e240:	.word	0x01420142
    e244:	.word	0x01420142
    e248:	.word	0x0142013d
    e24c:	.word	0x01420142
    e250:	.word	0x011e0125
    e254:	.word	0x01420142
    e258:	.word	0x014200a2
    e25c:	.word	0x01420142
    e260:	.word	0x008b0142
    e264:	.word	0x01420142
    e268:	.word	0x01420142
    e26c:	.word	0x00850142
    e270:	.word	0x01420142
    e274:	.word	0x01420142
    e278:	.short	0x007f
    e27a:	cmn.w	r3, r8
    e27e:	bne.n	e2ae <__ssvfscanf_r+0x85e>
    e280:	bic.w	r5, r5, #384	; 0x180
    e284:	strb.w	r1, [r9]
    e288:	add.w	r9, r9, #1
    e28c:	ldr.w	r1, [fp, #4]
    e290:	subs	r1, #1
    e292:	cmp	r1, #0
    e294:	add.w	r4, r4, #4294967295
    e298:	add.w	r7, r7, #1
    e29c:	str.w	r1, [fp, #4]
    e2a0:	ble.w	e47a <__ssvfscanf_r+0xa2a>
    e2a4:	adds	r0, #1
    e2a6:	str.w	r0, [fp]
    e2aa:	cmp	r4, #0
    e2ac:	bne.n	e1c6 <__ssvfscanf_r+0x776>
    e2ae:	cmp	r6, #0
    e2b0:	beq.n	e338 <__ssvfscanf_r+0x8e8>
    e2b2:	bic.w	r5, r5, #256	; 0x100
    e2b6:	b.n	e338 <__ssvfscanf_r+0x8e8>
    e2b8:	lsls	r2, r5, #23
    e2ba:	bpl.n	e27a <__ssvfscanf_r+0x82a>
    e2bc:	ldr	r2, [sp, #48]	; 0x30
    e2be:	bic.w	r5, r5, #128	; 0x80
    e2c2:	adds	r6, #1
    e2c4:	cmp	r2, #0
    e2c6:	beq.n	e28c <__ssvfscanf_r+0x83c>
    e2c8:	subs	r2, #1
    e2ca:	str	r2, [sp, #48]	; 0x30
    e2cc:	adds	r4, #1
    e2ce:	b.n	e28c <__ssvfscanf_r+0x83c>
    e2d0:	lsls	r2, r5, #24
    e2d2:	bpl.n	e2ae <__ssvfscanf_r+0x85e>
    e2d4:	bic.w	r5, r5, #128	; 0x80
    e2d8:	b.n	e284 <__ssvfscanf_r+0x834>
    e2da:	cmp.w	r8, #7
    e2de:	bne.n	e2ae <__ssvfscanf_r+0x85e>
    e2e0:	mov.w	r8, #8
    e2e4:	b.n	e284 <__ssvfscanf_r+0x834>
    e2e6:	cmp.w	r8, #6
    e2ea:	bne.n	e2ae <__ssvfscanf_r+0x85e>
    e2ec:	mov.w	r8, #7
    e2f0:	b.n	e284 <__ssvfscanf_r+0x834>
    e2f2:	cmp	r3, #0
    e2f4:	bne.w	e4a6 <__ssvfscanf_r+0xa56>
    e2f8:	cbnz	r6, e306 <__ssvfscanf_r+0x8b6>
    e2fa:	and.w	lr, r5, #1792	; 0x700
    e2fe:	cmp.w	lr, #1792	; 0x700
    e302:	beq.w	e77e <__ssvfscanf_r+0xd2e>
    e306:	cmp.w	r8, #1
    e30a:	beq.n	e312 <__ssvfscanf_r+0x8c2>
    e30c:	cmp.w	r8, #4
    e310:	bne.n	e2ae <__ssvfscanf_r+0x85e>
    e312:	add.w	r8, r8, #1
    e316:	uxtb.w	r8, r8
    e31a:	b.n	e284 <__ssvfscanf_r+0x834>
    e31c:	.word	0x0000c4b9
    e320:	cmp.w	r8, #0
    e324:	bne.w	e494 <__ssvfscanf_r+0xa44>
    e328:	cmp	r6, #0
    e32a:	bne.n	e2b2 <__ssvfscanf_r+0x862>
    e32c:	and.w	lr, r5, #1792	; 0x700
    e330:	cmp.w	lr, #1792	; 0x700
    e334:	beq.w	e79e <__ssvfscanf_r+0xd4e>
    e338:	subs	r3, #1
    e33a:	cmp	r3, #1
    e33c:	bls.w	e834 <__ssvfscanf_r+0xde4>
    e340:	add.w	r3, r8, #4294967295
    e344:	cmp	r3, #6
    e346:	bhi.n	e376 <__ssvfscanf_r+0x926>
    e348:	cmp.w	r8, #2
    e34c:	bls.w	e884 <__ssvfscanf_r+0xe34>
    e350:	cmp.w	r8, #3
    e354:	beq.n	e376 <__ssvfscanf_r+0x926>
    e356:	sub.w	r4, r8, #4
    e35a:	uxtb	r4, r4
    e35c:	mvn.w	r8, r4
    e360:	add	r8, r9
    e362:	ldrb.w	r1, [r9, #-1]!
    e366:	mov	r2, fp
    e368:	mov	r0, sl
    e36a:	bl	11208 <_sungetc_r>
    e36e:	cmp	r8, r9
    e370:	bne.n	e362 <__ssvfscanf_r+0x912>
    e372:	subs	r7, #1
    e374:	subs	r7, r7, r4
    e376:	lsls	r1, r5, #23
    e378:	bpl.n	e3b4 <__ssvfscanf_r+0x964>
    e37a:	lsls	r2, r5, #21
    e37c:	bmi.w	e858 <__ssvfscanf_r+0xe08>
    e380:	ldrb.w	r1, [r9, #-1]
    e384:	cmp	r1, #101	; 0x65
    e386:	add.w	r4, r9, #4294967295
    e38a:	add.w	r8, r7, #4294967295
    e38e:	beq.n	e3a8 <__ssvfscanf_r+0x958>
    e390:	cmp	r1, #69	; 0x45
    e392:	beq.n	e3a8 <__ssvfscanf_r+0x958>
    e394:	mov	r2, fp
    e396:	mov	r0, sl
    e398:	bl	11208 <_sungetc_r>
    e39c:	ldrb.w	r1, [r9, #-2]
    e3a0:	sub.w	r8, r7, #2
    e3a4:	sub.w	r4, r9, #2
    e3a8:	mov	r2, fp
    e3aa:	mov	r0, sl
    e3ac:	bl	11208 <_sungetc_r>
    e3b0:	mov	r7, r8
    e3b2:	mov	r9, r4
    e3b4:	ands.w	r2, r5, #16
    e3b8:	bne.w	df18 <__ssvfscanf_r+0x4c8>
    e3bc:	and.w	r3, r5, #1536	; 0x600
    e3c0:	cmp.w	r3, #1024	; 0x400
    e3c4:	strb.w	r2, [r9]
    e3c8:	beq.w	e7a8 <__ssvfscanf_r+0xd58>
    e3cc:	ldr	r3, [sp, #44]	; 0x2c
    e3ce:	cmp	r3, #0
    e3d0:	bne.w	e7ca <__ssvfscanf_r+0xd7a>
    e3d4:	ldr	r1, [sp, #32]
    e3d6:	movs	r2, #0
    e3d8:	mov	r0, sl
    e3da:	bl	c360 <_strtod_r>
    e3de:	lsls	r3, r5, #31
    e3e0:	bmi.w	e660 <__ssvfscanf_r+0xc10>
    e3e4:	ands.w	r0, r5, #2
    e3e8:	bne.w	e660 <__ssvfscanf_r+0xc10>
    e3ec:	vcmp.f64	d0, d0
    e3f0:	ldr	r3, [sp, #16]
    e3f2:	vmrs	APSR_nzcv, fpscr
    e3f6:	add.w	r5, r3, #4
    e3fa:	ldr	r4, [r3, #0]
    e3fc:	bvs.w	e8b8 <__ssvfscanf_r+0xe68>
    e400:	vcvt.f32.f64	s0, d0
    e404:	str	r5, [sp, #16]
    e406:	vstr	s0, [r4]
    e40a:	ldr	r3, [sp, #20]
    e40c:	ldr	r6, [sp, #8]
    e40e:	adds	r3, #1
    e410:	str	r3, [sp, #20]
    e412:	mov	r4, r6
    e414:	b.w	dae0 <__ssvfscanf_r+0x90>
    e418:	cmp.w	r8, #2
    e41c:	bne.w	e2ae <__ssvfscanf_r+0x85e>
    e420:	mov.w	r8, #3
    e424:	b.n	e284 <__ssvfscanf_r+0x834>
    e426:	and.w	lr, r5, #1280	; 0x500
    e42a:	cmp.w	lr, #1024	; 0x400
    e42e:	beq.n	e43c <__ssvfscanf_r+0x9ec>
    e430:	lsls	r2, r5, #21
    e432:	bpl.w	e2ae <__ssvfscanf_r+0x85e>
    e436:	cmp	r6, #0
    e438:	beq.w	e338 <__ssvfscanf_r+0x8e8>
    e43c:	lsls	r2, r5, #22
    e43e:	bmi.n	e44a <__ssvfscanf_r+0x9fa>
    e440:	ldr	r2, [sp, #36]	; 0x24
    e442:	str.w	r9, [sp, #52]	; 0x34
    e446:	subs	r2, r6, r2
    e448:	str	r2, [sp, #44]	; 0x2c
    e44a:	bic.w	r5, r5, #1920	; 0x780
    e44e:	orr.w	r5, r5, #384	; 0x180
    e452:	movs	r6, #0
    e454:	b.n	e284 <__ssvfscanf_r+0x834>
    e456:	cmp	r3, #1
    e458:	bne.w	e2ae <__ssvfscanf_r+0x85e>
    e45c:	movs	r3, #2
    e45e:	b.n	e284 <__ssvfscanf_r+0x834>
    e460:	ldr	r2, [sp, #40]	; 0x28
    e462:	ldrb.w	lr, [r2]
    e466:	cmp	lr, r1
    e468:	bne.w	e2ae <__ssvfscanf_r+0x85e>
    e46c:	lsls	r2, r5, #22
    e46e:	bpl.w	e2ae <__ssvfscanf_r+0x85e>
    e472:	bic.w	r5, r5, #640	; 0x280
    e476:	str	r6, [sp, #36]	; 0x24
    e478:	b.n	e284 <__ssvfscanf_r+0x834>
    e47a:	mov	r1, fp
    e47c:	mov	r0, sl
    e47e:	str	r3, [sp, #28]
    e480:	bl	1128c <__ssrefill_r>
    e484:	ldr	r3, [sp, #28]
    e486:	cmp	r0, #0
    e488:	bne.w	e2ae <__ssvfscanf_r+0x85e>
    e48c:	cmp	r4, #0
    e48e:	bne.w	e1c6 <__ssvfscanf_r+0x776>
    e492:	b.n	e2ae <__ssvfscanf_r+0x85e>
    e494:	cmp.w	r8, #3
    e498:	beq.w	e312 <__ssvfscanf_r+0x8c2>
    e49c:	cmp.w	r8, #5
    e4a0:	beq.w	e312 <__ssvfscanf_r+0x8c2>
    e4a4:	b.n	e2ae <__ssvfscanf_r+0x85e>
    e4a6:	cmp	r3, #2
    e4a8:	bne.w	e306 <__ssvfscanf_r+0x8b6>
    e4ac:	movs	r3, #3
    e4ae:	b.n	e284 <__ssvfscanf_r+0x834>
    e4b0:	subs	r3, r4, #1
    e4b2:	cmp.w	r3, #348	; 0x15c
    e4b6:	itte	hi
    e4b8:	mvnhi.w	r0, #348	; 0x15c
    e4bc:	addhi.w	r9, r4, r0
    e4c0:	movls	r9, r8
    e4c2:	add	r3, sp, #328	; 0x148
    e4c4:	mov	r0, r2
    e4c6:	mov	r2, r7
    e4c8:	mov	r7, r9
    e4ca:	ldr.w	r9, [sp, #12]
    e4ce:	str	r3, [sp, #32]
    e4d0:	it	hi
    e4d2:	movwhi	r4, #349	; 0x15d
    e4d6:	orr.w	r5, r5, #3456	; 0xd80
    e4da:	mov	r6, r3
    e4dc:	mov.w	r8, #0
    e4e0:	sub.w	r3, r1, #43	; 0x2b
    e4e4:	cmp	r3, #77	; 0x4d
    e4e6:	bhi.n	e58c <__ssvfscanf_r+0xb3c>
    e4e8:	tbb	[pc, r3]
    e4ec:	.word	0x507e507e
    e4f0:	.word	0x69696f50
    e4f4:	.word	0x69696969
    e4f8:	.word	0x504a4a69
    e4fc:	.word	0x50505050
    e500:	.word	0x44445050
    e504:	.word	0x44444444
    e508:	.word	0x50505050
    e50c:	.word	0x50505050
    e510:	.word	0x50505050
    e514:	.word	0x50505050
    e518:	.word	0x50502750
    e51c:	.word	0x50505050
    e520:	.word	0x44445050
    e524:	.word	0x44444444
    e528:	.word	0x50505050
    e52c:	.word	0x50505050
    e530:	.word	0x50505050
    e534:	.word	0x50505050
    e538:	.short	0x2750
    e53a:	and.w	r3, r5, #1536	; 0x600
    e53e:	cmp.w	r3, #512	; 0x200
    e542:	bne.n	e58c <__ssvfscanf_r+0xb3c>
    e544:	bic.w	r5, r5, #512	; 0x200
    e548:	orr.w	r5, r5, #1280	; 0x500
    e54c:	mov.w	r9, #16
    e550:	strb	r1, [r6, #0]
    e552:	adds	r6, #1
    e554:	ldr.w	r3, [fp, #4]
    e558:	subs	r3, #1
    e55a:	cmp	r3, #0
    e55c:	str.w	r3, [fp, #4]
    e560:	ble.n	e648 <__ssvfscanf_r+0xbf8>
    e562:	adds	r0, #1
    e564:	str.w	r0, [fp]
    e568:	subs	r4, #1
    e56a:	beq.n	e58c <__ssvfscanf_r+0xb3c>
    e56c:	ldr.w	r0, [fp]
    e570:	ldrb	r1, [r0, #0]
    e572:	b.n	e4e0 <__ssvfscanf_r+0xa90>
    e574:	cmp.w	r9, #10
    e578:	ble.n	e58c <__ssvfscanf_r+0xb3c>
    e57a:	bic.w	r5, r5, #2944	; 0xb80
    e57e:	b.n	e550 <__ssvfscanf_r+0xb00>
    e580:	ldr	r3, [pc, #756]	; (e878 <__ssvfscanf_r+0xe28>)
    e582:	ldrsh.w	r9, [r3, r9, lsl #1]
    e586:	cmp.w	r9, #8
    e58a:	bgt.n	e57a <__ssvfscanf_r+0xb2a>
    e58c:	lsls	r1, r5, #23
    e58e:	mov	r7, r2
    e590:	str.w	r9, [sp, #12]
    e594:	bpl.n	e5a6 <__ssvfscanf_r+0xb56>
    e596:	ldr	r3, [sp, #32]
    e598:	cmp	r6, r3
    e59a:	bhi.w	e786 <__ssvfscanf_r+0xd36>
    e59e:	ldr	r3, [sp, #32]
    e5a0:	cmp	r6, r3
    e5a2:	beq.w	daec <__ssvfscanf_r+0x9c>
    e5a6:	ands.w	r4, r5, #16
    e5aa:	beq.w	e6d2 <__ssvfscanf_r+0xc82>
    e5ae:	ldr	r3, [sp, #32]
    e5b0:	subs	r6, r6, r3
    e5b2:	add	r6, r8
    e5b4:	add	r7, r6
    e5b6:	ldr	r6, [sp, #8]
    e5b8:	mov	r4, r6
    e5ba:	b.w	dae0 <__ssvfscanf_r+0x90>
    e5be:	ldr	r3, [pc, #696]	; (e878 <__ssvfscanf_r+0xe28>)
    e5c0:	bic.w	r5, r5, #2944	; 0xb80
    e5c4:	ldrsh.w	r9, [r3, r9, lsl #1]
    e5c8:	b.n	e550 <__ssvfscanf_r+0xb00>
    e5ca:	lsls	r3, r5, #20
    e5cc:	bpl.n	e550 <__ssvfscanf_r+0xb00>
    e5ce:	cmp.w	r9, #0
    e5d2:	bne.n	e5dc <__ssvfscanf_r+0xb8c>
    e5d4:	orr.w	r5, r5, #512	; 0x200
    e5d8:	mov.w	r9, #8
    e5dc:	lsls	r3, r5, #21
    e5de:	bpl.w	e762 <__ssvfscanf_r+0xd12>
    e5e2:	bic.w	r5, r5, #1408	; 0x580
    e5e6:	b.n	e550 <__ssvfscanf_r+0xb00>
    e5e8:	lsls	r3, r5, #24
    e5ea:	bpl.n	e58c <__ssvfscanf_r+0xb3c>
    e5ec:	bic.w	r5, r5, #128	; 0x80
    e5f0:	b.n	e550 <__ssvfscanf_r+0xb00>
    e5f2:	cmp	r4, #0
    e5f4:	it	eq
    e5f6:	moveq.w	r4, #4294967295
    e5fa:	ands.w	r3, r5, #1
    e5fe:	bne.w	decc <__ssvfscanf_r+0x47c>
    e602:	lsls	r1, r5, #27
    e604:	bpl.n	e66e <__ssvfscanf_r+0xc1e>
    e606:	mov	r5, r3
    e608:	bl	a6e8 <__locale_ctype_ptr>
    e60c:	ldr.w	r3, [fp]
    e610:	ldrb	r2, [r3, #0]
    e612:	add	r0, r2
    e614:	adds	r3, #1
    e616:	ldrb	r2, [r0, #1]
    e618:	lsls	r2, r2, #28
    e61a:	bmi.w	ddaa <__ssvfscanf_r+0x35a>
    e61e:	ldr.w	r2, [fp, #4]
    e622:	str.w	r3, [fp]
    e626:	adds	r5, #1
    e628:	subs	r3, r2, #1
    e62a:	cmp	r4, r5
    e62c:	str.w	r3, [fp, #4]
    e630:	beq.w	ddaa <__ssvfscanf_r+0x35a>
    e634:	cmp	r3, #0
    e636:	bgt.n	e608 <__ssvfscanf_r+0xbb8>
    e638:	mov	r1, fp
    e63a:	mov	r0, sl
    e63c:	bl	1128c <__ssrefill_r>
    e640:	cmp	r0, #0
    e642:	beq.n	e608 <__ssvfscanf_r+0xbb8>
    e644:	b.w	ddaa <__ssvfscanf_r+0x35a>
    e648:	mov	r1, fp
    e64a:	mov	r0, sl
    e64c:	str	r2, [sp, #12]
    e64e:	bl	1128c <__ssrefill_r>
    e652:	ldr	r2, [sp, #12]
    e654:	cmp	r0, #0
    e656:	beq.n	e568 <__ssvfscanf_r+0xb18>
    e658:	b.n	e58c <__ssvfscanf_r+0xb3c>
    e65a:	str.w	r8, [sp, #48]	; 0x30
    e65e:	b.n	e1a6 <__ssvfscanf_r+0x756>
    e660:	ldr	r2, [sp, #16]
    e662:	ldr	r3, [r2, #0]
    e664:	adds	r2, #4
    e666:	str	r2, [sp, #16]
    e668:	vstr	d0, [r3]
    e66c:	b.n	e40a <__ssvfscanf_r+0x9ba>
    e66e:	ldr	r2, [sp, #16]
    e670:	ldr	r5, [r2, #0]
    e672:	adds	r6, r2, #4
    e674:	add	r4, r5
    e676:	mov	r8, r5
    e678:	bl	a6e8 <__locale_ctype_ptr>
    e67c:	ldr.w	r2, [fp]
    e680:	ldrb	r3, [r2, #0]
    e682:	add	r0, r3
    e684:	adds	r1, r2, #1
    e686:	ldrb	r3, [r0, #1]
    e688:	lsls	r3, r3, #28
    e68a:	bmi.n	e6b8 <__ssvfscanf_r+0xc68>
    e68c:	ldr.w	r3, [fp, #4]
    e690:	str.w	r1, [fp]
    e694:	subs	r3, #1
    e696:	str.w	r3, [fp, #4]
    e69a:	ldrb	r3, [r2, #0]
    e69c:	strb.w	r3, [r8], #1
    e6a0:	cmp	r4, r8
    e6a2:	beq.n	e6ba <__ssvfscanf_r+0xc6a>
    e6a4:	ldr.w	r3, [fp, #4]
    e6a8:	cmp	r3, #0
    e6aa:	bgt.n	e678 <__ssvfscanf_r+0xc28>
    e6ac:	mov	r1, fp
    e6ae:	mov	r0, sl
    e6b0:	bl	1128c <__ssrefill_r>
    e6b4:	cmp	r0, #0
    e6b6:	beq.n	e678 <__ssvfscanf_r+0xc28>
    e6b8:	mov	r4, r8
    e6ba:	ldr	r2, [sp, #20]
    e6bc:	str	r6, [sp, #16]
    e6be:	ldr	r6, [sp, #8]
    e6c0:	subs	r5, r4, r5
    e6c2:	movs	r3, #0
    e6c4:	adds	r2, #1
    e6c6:	strb	r3, [r4, #0]
    e6c8:	add	r7, r5
    e6ca:	str	r2, [sp, #20]
    e6cc:	mov	r4, r6
    e6ce:	b.w	dae0 <__ssvfscanf_r+0x90>
    e6d2:	mov	r2, r4
    e6d4:	strb	r4, [r6, #0]
    e6d6:	ldr	r3, [sp, #12]
    e6d8:	ldr	r1, [sp, #32]
    e6da:	ldr	r4, [sp, #24]
    e6dc:	mov	r0, sl
    e6de:	blx	r4
    e6e0:	lsls	r2, r5, #26
    e6e2:	bmi.n	e772 <__ssvfscanf_r+0xd22>
    e6e4:	lsls	r3, r5, #29
    e6e6:	bpl.n	e7e0 <__ssvfscanf_r+0xd90>
    e6e8:	ldr	r2, [sp, #16]
    e6ea:	ldr	r3, [r2, #0]
    e6ec:	adds	r2, #4
    e6ee:	str	r2, [sp, #16]
    e6f0:	strh	r0, [r3, #0]
    e6f2:	ldr	r3, [sp, #20]
    e6f4:	adds	r3, #1
    e6f6:	str	r3, [sp, #20]
    e6f8:	b.n	e5ae <__ssvfscanf_r+0xb5e>
    e6fa:	bl	a6c4 <__locale_mb_cur_max>
    e6fe:	cmp	r6, r0
    e700:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    e704:	ldmia.w	fp, {r2, r3}
    e708:	ldrb.w	r0, [r2], #1
    e70c:	str.w	r2, [fp]
    e710:	ldr	r2, [sp, #28]
    e712:	str	r2, [sp, #0]
    e714:	add	r2, sp, #328	; 0x148
    e716:	adds	r5, r6, #1
    e718:	subs	r3, #1
    e71a:	strb	r0, [r2, r6]
    e71c:	str.w	r3, [fp, #4]
    e720:	mov	r1, r8
    e722:	mov	r3, r5
    e724:	mov	r0, sl
    e726:	bl	101dc <_mbrtowc_r>
    e72a:	adds	r6, r0, #1
    e72c:	beq.w	dc9a <__ssvfscanf_r+0x24a>
    e730:	cmp	r0, #0
    e732:	bne.n	e80c <__ssvfscanf_r+0xdbc>
    e734:	str.w	r0, [r8]
    e738:	bl	101a0 <iswspace>
    e73c:	cmp	r0, #0
    e73e:	beq.w	e8a2 <__ssvfscanf_r+0xe52>
    e742:	cmp	r5, #0
    e744:	beq.w	df08 <__ssvfscanf_r+0x4b8>
    e748:	add	r3, sp, #328	; 0x148
    e74a:	adds	r4, r3, r5
    e74c:	subs	r5, #1
    e74e:	mov	r2, fp
    e750:	ldrb.w	r1, [r4, #-1]!
    e754:	mov	r0, sl
    e756:	bl	11208 <_sungetc_r>
    e75a:	cmp	r5, #0
    e75c:	bne.n	e74c <__ssvfscanf_r+0xcfc>
    e75e:	b.w	df08 <__ssvfscanf_r+0x4b8>
    e762:	bic.w	r5, r5, #896	; 0x380
    e766:	cbz	r7, e76c <__ssvfscanf_r+0xd1c>
    e768:	subs	r7, #1
    e76a:	adds	r4, #1
    e76c:	add.w	r8, r8, #1
    e770:	b.n	e554 <__ssvfscanf_r+0xb04>
    e772:	ldr	r2, [sp, #16]
    e774:	ldr	r3, [r2, #0]
    e776:	adds	r2, #4
    e778:	str	r2, [sp, #16]
    e77a:	str	r0, [r3, #0]
    e77c:	b.n	e6f2 <__ssvfscanf_r+0xca2>
    e77e:	bic.w	r5, r5, #1920	; 0x780
    e782:	movs	r3, #1
    e784:	b.n	e284 <__ssvfscanf_r+0x834>
    e786:	ldrb.w	r1, [r6, #-1]
    e78a:	mov	r2, fp
    e78c:	mov	r0, sl
    e78e:	bl	11208 <_sungetc_r>
    e792:	subs	r6, #1
    e794:	b.n	e59e <__ssvfscanf_r+0xb4e>
    e796:	add.w	r8, sp, #60	; 0x3c
    e79a:	b.w	deee <__ssvfscanf_r+0x49e>
    e79e:	bic.w	r5, r5, #1920	; 0x780
    e7a2:	mov.w	r8, #1
    e7a6:	b.n	e284 <__ssvfscanf_r+0x834>
    e7a8:	ldr	r3, [sp, #36]	; 0x24
    e7aa:	subs	r6, r6, r3
    e7ac:	negs	r2, r6
    e7ae:	cmp	r6, #0
    e7b0:	beq.w	e3d4 <__ssvfscanf_r+0x984>
    e7b4:	addw	r3, sp, #667	; 0x29b
    e7b8:	cmp	r9, r3
    e7ba:	it	cs
    e7bc:	addwcs	r9, sp, #666	; 0x29a
    e7c0:	mov	r0, r9
    e7c2:	ldr	r1, [pc, #184]	; (e87c <__ssvfscanf_r+0xe2c>)
    e7c4:	bl	b298 <sprintf>
    e7c8:	b.n	e3d4 <__ssvfscanf_r+0x984>
    e7ca:	ldr	r4, [sp, #52]	; 0x34
    e7cc:	mov	r1, r4
    e7ce:	movs	r3, #10
    e7d0:	adds	r1, #1
    e7d2:	mov	r0, sl
    e7d4:	bl	c4b8 <_strtol_r>
    e7d8:	ldr	r3, [sp, #44]	; 0x2c
    e7da:	mov	r9, r4
    e7dc:	subs	r2, r0, r3
    e7de:	b.n	e7b4 <__ssvfscanf_r+0xd64>
    e7e0:	ands.w	r2, r5, #1
    e7e4:	bne.n	e772 <__ssvfscanf_r+0xd22>
    e7e6:	lsls	r4, r5, #30
    e7e8:	bpl.n	e772 <__ssvfscanf_r+0xd22>
    e7ea:	ldr	r3, [sp, #24]
    e7ec:	mov	r1, r3
    e7ee:	ldr	r3, [pc, #144]	; (e880 <__ssvfscanf_r+0xe30>)
    e7f0:	cmp	r1, r3
    e7f2:	mov	r0, sl
    e7f4:	ldr	r3, [sp, #12]
    e7f6:	ldr	r1, [sp, #32]
    e7f8:	beq.n	e8c4 <__ssvfscanf_r+0xe74>
    e7fa:	bl	10d48 <_strtoll_r>
    e7fe:	ldr	r2, [sp, #16]
    e800:	ldr	r3, [r2, #0]
    e802:	adds	r2, #4
    e804:	str	r2, [sp, #16]
    e806:	strd	r0, r1, [r3]
    e80a:	b.n	e6f2 <__ssvfscanf_r+0xca2>
    e80c:	adds	r0, #2
    e80e:	bne.n	e852 <__ssvfscanf_r+0xe02>
    e810:	mov	r6, r5
    e812:	ldr.w	r3, [fp, #4]
    e816:	cmp	r3, #0
    e818:	bgt.w	def0 <__ssvfscanf_r+0x4a0>
    e81c:	mov	r1, fp
    e81e:	mov	r0, sl
    e820:	bl	1128c <__ssrefill_r>
    e824:	cmp	r0, #0
    e826:	beq.w	def0 <__ssvfscanf_r+0x4a0>
    e82a:	cmp	r6, #0
    e82c:	bne.w	dc9a <__ssvfscanf_r+0x24a>
    e830:	b.w	df08 <__ssvfscanf_r+0x4b8>
    e834:	ldr	r3, [sp, #32]
    e836:	cmp	r9, r3
    e838:	bls.w	daec <__ssvfscanf_r+0x9c>
    e83c:	ldrb.w	r1, [r9, #-1]!
    e840:	mov	r2, fp
    e842:	mov	r0, sl
    e844:	bl	11208 <_sungetc_r>
    e848:	ldr	r3, [sp, #32]
    e84a:	cmp	r9, r3
    e84c:	bne.n	e83c <__ssvfscanf_r+0xdec>
    e84e:	b.w	daec <__ssvfscanf_r+0x9c>
    e852:	ldr.w	r0, [r8]
    e856:	b.n	e738 <__ssvfscanf_r+0xce8>
    e858:	ldr	r3, [sp, #32]
    e85a:	cmp	r9, r3
    e85c:	bls.w	daec <__ssvfscanf_r+0x9c>
    e860:	ldrb.w	r1, [r9, #-1]!
    e864:	mov	r2, fp
    e866:	mov	r0, sl
    e868:	bl	11208 <_sungetc_r>
    e86c:	ldr	r3, [sp, #32]
    e86e:	cmp	r9, r3
    e870:	bne.n	e860 <__ssvfscanf_r+0xe10>
    e872:	b.w	daec <__ssvfscanf_r+0x9c>
    e876:	nop
    e878:	.word	0x20000858
    e87c:	.word	0x20000ba4
    e880:	.word	0x00010ed5
    e884:	ldr	r3, [sp, #32]
    e886:	cmp	r9, r3
    e888:	bls.w	daec <__ssvfscanf_r+0x9c>
    e88c:	ldrb.w	r1, [r9, #-1]!
    e890:	mov	r2, fp
    e892:	mov	r0, sl
    e894:	bl	11208 <_sungetc_r>
    e898:	ldr	r3, [sp, #32]
    e89a:	cmp	r9, r3
    e89c:	bne.n	e88c <__ssvfscanf_r+0xe3c>
    e89e:	b.w	daec <__ssvfscanf_r+0x9c>
    e8a2:	add	r7, r5
    e8a4:	subs	r4, #1
    e8a6:	cmp.w	r9, #0
    e8aa:	bne.n	e8b4 <__ssvfscanf_r+0xe64>
    e8ac:	add.w	r8, r8, #4
    e8b0:	mov	r6, r9
    e8b2:	b.n	e812 <__ssvfscanf_r+0xdc2>
    e8b4:	mov	r6, r0
    e8b6:	b.n	e812 <__ssvfscanf_r+0xdc2>
    e8b8:	bl	10b90 <nanf>
    e8bc:	str	r5, [sp, #16]
    e8be:	vstr	s0, [r4]
    e8c2:	b.n	e40a <__ssvfscanf_r+0x9ba>
    e8c4:	bl	110e4 <_strtoull_r>
    e8c8:	b.n	e7fe <__ssvfscanf_r+0xdae>
    e8ca:	nop

0000e8cc <_vdprintf_r>:
    e8cc:	push	{r4, r5, r6, r7, lr}
    e8ce:	sub.w	sp, sp, #532	; 0x214
    e8d2:	add	r5, sp, #16
    e8d4:	str	r3, [sp, #0]
    e8d6:	mov	r7, r1
    e8d8:	mov	r3, r2
    e8da:	mov.w	r4, #512	; 0x200
    e8de:	add	r2, sp, #12
    e8e0:	mov	r1, r5
    e8e2:	str	r4, [sp, #12]
    e8e4:	mov	r6, r0
    e8e6:	bl	113c4 <_vasnprintf_r>
    e8ea:	cbz	r0, e910 <_vdprintf_r+0x44>
    e8ec:	mov	r4, r0
    e8ee:	mov	r2, r0
    e8f0:	mov	r1, r7
    e8f2:	ldr	r3, [sp, #12]
    e8f4:	mov	r0, r6
    e8f6:	bl	e94c <_write_r>
    e8fa:	cmp	r4, r5
    e8fc:	str	r0, [sp, #12]
    e8fe:	beq.n	e90a <_vdprintf_r+0x3e>
    e900:	mov	r0, r6
    e902:	mov	r1, r4
    e904:	bl	f868 <_free_r>
    e908:	ldr	r0, [sp, #12]
    e90a:	add.w	sp, sp, #532	; 0x214
    e90e:	pop	{r4, r5, r6, r7, pc}
    e910:	mov.w	r0, #4294967295
    e914:	b.n	e90a <_vdprintf_r+0x3e>
    e916:	nop

0000e918 <vdprintf>:
    e918:	push	{r4}
    e91a:	ldr	r4, [pc, #16]	; (e92c <vdprintf+0x14>)
    e91c:	mov	r3, r2
    e91e:	mov	r2, r1
    e920:	mov	r1, r0
    e922:	ldr	r0, [r4, #0]
    e924:	ldr.w	r4, [sp], #4
    e928:	b.w	e8cc <_vdprintf_r>
    e92c:	.word	0x20001dd8

0000e930 <__ascii_wctomb>:
    e930:	cbz	r1, e93c <__ascii_wctomb+0xc>
    e932:	cmp	r2, #255	; 0xff
    e934:	bhi.n	e940 <__ascii_wctomb+0x10>
    e936:	strb	r2, [r1, #0]
    e938:	movs	r0, #1
    e93a:	bx	lr
    e93c:	mov	r0, r1
    e93e:	bx	lr
    e940:	movs	r3, #138	; 0x8a
    e942:	str	r3, [r0, #0]
    e944:	mov.w	r0, #4294967295
    e948:	bx	lr
    e94a:	nop

0000e94c <_write_r>:
    e94c:	push	{r4, r5, r6, lr}
    e94e:	mov	r5, r1
    e950:	ldr	r4, [pc, #32]	; (e974 <_write_r+0x28>)
    e952:	mov	r1, r2
    e954:	mov	r6, r0
    e956:	mov	r2, r3
    e958:	mov	r0, r5
    e95a:	movs	r3, #0
    e95c:	str	r3, [r4, #0]
    e95e:	bl	21f8 <_write>
    e962:	adds	r3, r0, #1
    e964:	beq.n	e968 <_write_r+0x1c>
    e966:	pop	{r4, r5, r6, pc}
    e968:	ldr	r3, [r4, #0]
    e96a:	cmp	r3, #0
    e96c:	beq.n	e966 <_write_r+0x1a>
    e96e:	str	r3, [r6, #0]
    e970:	pop	{r4, r5, r6, pc}
    e972:	nop
    e974:	.word	0x200376b0

0000e978 <__register_exitproc>:
    e978:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e97c:	ldr	r4, [pc, #148]	; (ea14 <__register_exitproc+0x9c>)
    e97e:	ldr	r5, [r4, #0]
    e980:	ldr.w	r4, [r5, #328]	; 0x148
    e984:	mov	r6, r0
    e986:	mov	r8, r1
    e988:	mov	sl, r2
    e98a:	mov	r9, r3
    e98c:	cbz	r4, ea00 <__register_exitproc+0x88>
    e98e:	ldr	r0, [r4, #4]
    e990:	cmp	r0, #31
    e992:	bgt.n	e9c4 <__register_exitproc+0x4c>
    e994:	adds	r3, r0, #1
    e996:	cbz	r6, e9b6 <__register_exitproc+0x3e>
    e998:	add.w	r5, r4, r0, lsl #2
    e99c:	movs	r2, #1
    e99e:	str.w	sl, [r5, #136]	; 0x88
    e9a2:	ldr.w	r1, [r4, #392]	; 0x188
    e9a6:	lsls	r2, r0
    e9a8:	orrs	r1, r2
    e9aa:	cmp	r6, #2
    e9ac:	str.w	r1, [r4, #392]	; 0x188
    e9b0:	str.w	r9, [r5, #264]	; 0x108
    e9b4:	beq.n	e9f4 <__register_exitproc+0x7c>
    e9b6:	adds	r0, #2
    e9b8:	str	r3, [r4, #4]
    e9ba:	str.w	r8, [r4, r0, lsl #2]
    e9be:	movs	r0, #0
    e9c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e9c4:	ldr	r3, [pc, #80]	; (ea18 <__register_exitproc+0xa0>)
    e9c6:	cbz	r3, ea0a <__register_exitproc+0x92>
    e9c8:	mov.w	r0, #400	; 0x190
    e9cc:	bl	a6fc <malloc>
    e9d0:	mov	r4, r0
    e9d2:	cbz	r0, ea0a <__register_exitproc+0x92>
    e9d4:	ldr.w	r3, [r5, #328]	; 0x148
    e9d8:	movs	r7, #0
    e9da:	stmia.w	r0, {r3, r7}
    e9de:	str.w	r4, [r5, #328]	; 0x148
    e9e2:	mov	r0, r7
    e9e4:	movs	r3, #1
    e9e6:	str.w	r7, [r4, #392]	; 0x188
    e9ea:	str.w	r7, [r4, #396]	; 0x18c
    e9ee:	cmp	r6, #0
    e9f0:	beq.n	e9b6 <__register_exitproc+0x3e>
    e9f2:	b.n	e998 <__register_exitproc+0x20>
    e9f4:	ldr.w	r1, [r4, #396]	; 0x18c
    e9f8:	orrs	r2, r1
    e9fa:	str.w	r2, [r4, #396]	; 0x18c
    e9fe:	b.n	e9b6 <__register_exitproc+0x3e>
    ea00:	add.w	r4, r5, #332	; 0x14c
    ea04:	str.w	r4, [r5, #328]	; 0x148
    ea08:	b.n	e98e <__register_exitproc+0x16>
    ea0a:	mov.w	r0, #4294967295
    ea0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea12:	nop
    ea14:	.word	0x20000854
    ea18:	.word	0x0000a6fd

0000ea1c <quorem>:
    ea1c:	ldr	r2, [r0, #16]
    ea1e:	ldr	r3, [r1, #16]
    ea20:	cmp	r3, r2
    ea22:	bgt.w	eb40 <quorem+0x124>
    ea26:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea2a:	add.w	r8, r3, #4294967295
    ea2e:	add.w	r7, r1, #20
    ea32:	add.w	fp, r0, #20
    ea36:	ldr.w	r2, [r7, r8, lsl #2]
    ea3a:	ldr.w	r3, [fp, r8, lsl #2]
    ea3e:	mov.w	r4, r8, lsl #2
    ea42:	sub	sp, #12
    ea44:	adds	r2, #1
    ea46:	udiv	r9, r3, r2
    ea4a:	add.w	r3, fp, r4
    ea4e:	str	r4, [sp, #0]
    ea50:	add.w	sl, r7, r4
    ea54:	str	r3, [sp, #4]
    ea56:	cmp.w	r9, #0
    ea5a:	beq.n	ead0 <quorem+0xb4>
    ea5c:	movs	r5, #0
    ea5e:	mov	ip, r7
    ea60:	mov	lr, fp
    ea62:	mov	r3, r5
    ea64:	ldr.w	r6, [ip], #4
    ea68:	ldr.w	r2, [lr]
    ea6c:	uxth	r4, r6
    ea6e:	mla	r5, r9, r4, r5
    ea72:	lsrs	r6, r6, #16
    ea74:	lsrs	r4, r5, #16
    ea76:	mla	r4, r9, r6, r4
    ea7a:	uxth	r5, r5
    ea7c:	subs	r3, r3, r5
    ea7e:	uxth	r6, r4
    ea80:	uxtah	r3, r3, r2
    ea84:	rsb	r6, r6, r2, lsr #16
    ea88:	add.w	r6, r6, r3, asr #16
    ea8c:	uxth	r3, r3
    ea8e:	orr.w	r3, r3, r6, lsl #16
    ea92:	cmp	sl, ip
    ea94:	str.w	r3, [lr], #4
    ea98:	mov.w	r5, r4, lsr #16
    ea9c:	mov.w	r3, r6, asr #16
    eaa0:	bcs.n	ea64 <quorem+0x48>
    eaa2:	ldr	r3, [sp, #0]
    eaa4:	ldr.w	r3, [fp, r3]
    eaa8:	cbnz	r3, ead0 <quorem+0xb4>
    eaaa:	ldr	r4, [sp, #4]
    eaac:	subs	r3, r4, #4
    eaae:	cmp	fp, r3
    eab0:	bcs.n	eacc <quorem+0xb0>
    eab2:	ldr.w	r3, [r4, #-4]
    eab6:	cbnz	r3, eacc <quorem+0xb0>
    eab8:	sub.w	r3, r4, #8
    eabc:	b.n	eac4 <quorem+0xa8>
    eabe:	ldr	r2, [r3, #0]
    eac0:	subs	r3, #4
    eac2:	cbnz	r2, eacc <quorem+0xb0>
    eac4:	cmp	fp, r3
    eac6:	add.w	r8, r8, #4294967295
    eaca:	bcc.n	eabe <quorem+0xa2>
    eacc:	str.w	r8, [r0, #16]
    ead0:	mov	r4, r0
    ead2:	bl	106e0 <__mcmp>
    ead6:	cmp	r0, #0
    ead8:	blt.n	eb38 <quorem+0x11c>
    eada:	add.w	r9, r9, #1
    eade:	mov	r5, fp
    eae0:	movs	r3, #0
    eae2:	ldr.w	r1, [r7], #4
    eae6:	ldr	r0, [r5, #0]
    eae8:	uxth	r2, r1
    eaea:	subs	r2, r3, r2
    eaec:	lsrs	r1, r1, #16
    eaee:	uxtah	r2, r2, r0
    eaf2:	rsb	r3, r1, r0, lsr #16
    eaf6:	add.w	r3, r3, r2, asr #16
    eafa:	uxth	r1, r2
    eafc:	orr.w	r1, r1, r3, lsl #16
    eb00:	cmp	sl, r7
    eb02:	str.w	r1, [r5], #4
    eb06:	mov.w	r3, r3, asr #16
    eb0a:	bcs.n	eae2 <quorem+0xc6>
    eb0c:	ldr.w	r2, [fp, r8, lsl #2]
    eb10:	add.w	r3, fp, r8, lsl #2
    eb14:	cbnz	r2, eb38 <quorem+0x11c>
    eb16:	subs	r2, r3, #4
    eb18:	cmp	fp, r2
    eb1a:	bcs.n	eb34 <quorem+0x118>
    eb1c:	ldr.w	r2, [r3, #-4]
    eb20:	cbnz	r2, eb34 <quorem+0x118>
    eb22:	subs	r3, #8
    eb24:	b.n	eb2c <quorem+0x110>
    eb26:	ldr	r2, [r3, #0]
    eb28:	subs	r3, #4
    eb2a:	cbnz	r2, eb34 <quorem+0x118>
    eb2c:	cmp	fp, r3
    eb2e:	add.w	r8, r8, #4294967295
    eb32:	bcc.n	eb26 <quorem+0x10a>
    eb34:	str.w	r8, [r4, #16]
    eb38:	mov	r0, r9
    eb3a:	add	sp, #12
    eb3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb40:	movs	r0, #0
    eb42:	bx	lr
    eb44:	movs	r0, r0
	...

0000eb48 <_dtoa_r>:
    eb48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb4c:	vmov	r6, r7, d0
    eb50:	sub	sp, #76	; 0x4c
    eb52:	ldr	r5, [r0, #64]	; 0x40
    eb54:	str	r1, [sp, #4]
    eb56:	mov	r4, r0
    eb58:	mov	r8, r2
    eb5a:	str	r3, [sp, #16]
    eb5c:	vmov	sl, s0
    eb60:	mov	fp, r7
    eb62:	cbz	r5, eb78 <_dtoa_r+0x30>
    eb64:	ldr	r2, [r0, #68]	; 0x44
    eb66:	str	r2, [r5, #4]
    eb68:	movs	r3, #1
    eb6a:	lsls	r3, r2
    eb6c:	str	r3, [r5, #8]
    eb6e:	mov	r1, r5
    eb70:	bl	10284 <_Bfree>
    eb74:	movs	r3, #0
    eb76:	str	r3, [r4, #64]	; 0x40
    eb78:	cmp.w	fp, #0
    eb7c:	mov	r6, fp
    eb7e:	blt.n	ebea <_dtoa_r+0xa2>
    eb80:	ldr	r2, [sp, #112]	; 0x70
    eb82:	movs	r3, #0
    eb84:	str	r3, [r2, #0]
    eb86:	ldr	r3, [pc, #784]	; (ee98 <_dtoa_r+0x350>)
    eb88:	mov	r2, r3
    eb8a:	ands	r3, r6
    eb8c:	cmp	r3, r2
    eb8e:	beq.n	ebbc <_dtoa_r+0x74>
    eb90:	vmov	d7, sl, fp
    eb94:	vcmp.f64	d7, #0.0
    eb98:	vmrs	APSR_nzcv, fpscr
    eb9c:	strd	sl, fp, [sp, #8]
    eba0:	bne.n	ebf8 <_dtoa_r+0xb0>
    eba2:	ldr	r2, [sp, #16]
    eba4:	movs	r3, #1
    eba6:	str	r3, [r2, #0]
    eba8:	ldr	r3, [sp, #116]	; 0x74
    ebaa:	cmp	r3, #0
    ebac:	beq.w	ed1e <_dtoa_r+0x1d6>
    ebb0:	ldr	r0, [pc, #744]	; (ee9c <_dtoa_r+0x354>)
    ebb2:	str	r0, [r3, #0]
    ebb4:	subs	r0, #1
    ebb6:	add	sp, #76	; 0x4c
    ebb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebbc:	ldr	r2, [sp, #16]
    ebbe:	movw	r3, #9999	; 0x270f
    ebc2:	str	r3, [r2, #0]
    ebc4:	cmp.w	sl, #0
    ebc8:	beq.w	ecf0 <_dtoa_r+0x1a8>
    ebcc:	ldr	r0, [pc, #720]	; (eea0 <_dtoa_r+0x358>)
    ebce:	ldr	r3, [sp, #116]	; 0x74
    ebd0:	cmp	r3, #0
    ebd2:	beq.n	ebb6 <_dtoa_r+0x6e>
    ebd4:	ldrb	r3, [r0, #3]
    ebd6:	cmp	r3, #0
    ebd8:	beq.w	ed22 <_dtoa_r+0x1da>
    ebdc:	add.w	r3, r0, #8
    ebe0:	ldr	r2, [sp, #116]	; 0x74
    ebe2:	str	r3, [r2, #0]
    ebe4:	add	sp, #76	; 0x4c
    ebe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebea:	ldr	r2, [sp, #112]	; 0x70
    ebec:	movs	r3, #1
    ebee:	bic.w	r6, fp, #2147483648	; 0x80000000
    ebf2:	str	r3, [r2, #0]
    ebf4:	mov	fp, r6
    ebf6:	b.n	eb86 <_dtoa_r+0x3e>
    ebf8:	add	r1, sp, #68	; 0x44
    ebfa:	add	r2, sp, #64	; 0x40
    ebfc:	vldr	d0, [sp, #8]
    ec00:	mov	r0, r4
    ec02:	bl	1095c <__d2b>
    ec06:	lsrs	r1, r6, #20
    ec08:	str	r0, [sp, #28]
    ec0a:	bne.n	ed02 <_dtoa_r+0x1ba>
    ec0c:	ldr	r0, [sp, #64]	; 0x40
    ec0e:	ldr	r1, [sp, #68]	; 0x44
    ec10:	add	r1, r0
    ec12:	addw	r3, r1, #1074	; 0x432
    ec16:	cmp	r3, #32
    ec18:	ble.w	f09e <_dtoa_r+0x556>
    ec1c:	rsb	r3, r3, #64	; 0x40
    ec20:	addw	r2, r1, #1042	; 0x412
    ec24:	lsls	r6, r3
    ec26:	lsr.w	r3, sl, r2
    ec2a:	orrs	r3, r6
    ec2c:	vmov	s15, r3
    ec30:	vcvt.f64.u32	d7, s15
    ec34:	movs	r5, #1
    ec36:	vmov	r2, r3, d7
    ec3a:	subs	r1, #1
    ec3c:	sub.w	r3, r3, #32505856	; 0x1f00000
    ec40:	str	r5, [sp, #40]	; 0x28
    ec42:	vmov	d7, r2, r3
    ec46:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    ec4a:	vldr	d4, [pc, #564]	; ee80 <_dtoa_r+0x338>
    ec4e:	vsub.f64	d6, d7, d6
    ec52:	vldr	d7, [pc, #564]	; ee88 <_dtoa_r+0x340>
    ec56:	vldr	d5, [pc, #568]	; ee90 <_dtoa_r+0x348>
    ec5a:	vfma.f64	d7, d6, d4
    ec5e:	vmov	s13, r1
    ec62:	vcvt.f64.s32	d6, s13
    ec66:	vfma.f64	d7, d6, d5
    ec6a:	vcvt.s32.f64	s13, d7
    ec6e:	vcmpe.f64	d7, #0.0
    ec72:	vmrs	APSR_nzcv, fpscr
    ec76:	vstr	s13, [sp, #8]
    ec7a:	bmi.w	eeb6 <_dtoa_r+0x36e>
    ec7e:	ldr	r5, [sp, #8]
    ec80:	cmp	r5, #22
    ec82:	bhi.w	eeb0 <_dtoa_r+0x368>
    ec86:	ldr	r3, [pc, #540]	; (eea4 <_dtoa_r+0x35c>)
    ec88:	add.w	r3, r3, r5, lsl #3
    ec8c:	vldr	d7, [r3]
    ec90:	vmov	d6, sl, fp
    ec94:	vcmpe.f64	d7, d6
    ec98:	vmrs	APSR_nzcv, fpscr
    ec9c:	ble.w	f0ac <_dtoa_r+0x564>
    eca0:	subs	r3, r5, #1
    eca2:	str	r3, [sp, #8]
    eca4:	movs	r3, #0
    eca6:	str	r3, [sp, #48]	; 0x30
    eca8:	subs	r1, r0, r1
    ecaa:	subs.w	r9, r1, #1
    ecae:	bmi.w	eee0 <_dtoa_r+0x398>
    ecb2:	movs	r3, #0
    ecb4:	str	r3, [sp, #24]
    ecb6:	ldr	r3, [sp, #8]
    ecb8:	cmp	r3, #0
    ecba:	blt.w	eece <_dtoa_r+0x386>
    ecbe:	add	r9, r3
    ecc0:	str	r3, [sp, #44]	; 0x2c
    ecc2:	movs	r3, #0
    ecc4:	str	r3, [sp, #20]
    ecc6:	ldr	r3, [sp, #4]
    ecc8:	cmp	r3, #9
    ecca:	bhi.n	ed26 <_dtoa_r+0x1de>
    eccc:	cmp	r3, #5
    ecce:	ble.w	f790 <_dtoa_r+0xc48>
    ecd2:	subs	r3, #4
    ecd4:	str	r3, [sp, #4]
    ecd6:	movs	r3, #0
    ecd8:	str	r3, [sp, #56]	; 0x38
    ecda:	ldr	r3, [sp, #4]
    ecdc:	subs	r3, #2
    ecde:	cmp	r3, #3
    ece0:	bhi.w	f7a2 <_dtoa_r+0xc5a>
    ece4:	tbh	[pc, r3, lsl #1]
    ece8:	.word	0x01e502a9
    ecec:	.word	0x03c802b5
    ecf0:	ldr	r3, [pc, #428]	; (eea0 <_dtoa_r+0x358>)
    ecf2:	ldr	r2, [pc, #436]	; (eea8 <_dtoa_r+0x360>)
    ecf4:	ubfx	r0, r6, #0, #20
    ecf8:	cmp	r0, #0
    ecfa:	ite	ne
    ecfc:	movne	r0, r3
    ecfe:	moveq	r0, r2
    ed00:	b.n	ebce <_dtoa_r+0x86>
    ed02:	ldrd	r2, r3, [sp, #8]
    ed06:	ubfx	r0, r3, #0, #20
    ed0a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    ed0e:	movs	r5, #0
    ed10:	subw	r1, r1, #1023	; 0x3ff
    ed14:	orr.w	r3, r3, #3145728	; 0x300000
    ed18:	ldr	r0, [sp, #64]	; 0x40
    ed1a:	str	r5, [sp, #40]	; 0x28
    ed1c:	b.n	ec42 <_dtoa_r+0xfa>
    ed1e:	ldr	r0, [pc, #396]	; (eeac <_dtoa_r+0x364>)
    ed20:	b.n	ebb6 <_dtoa_r+0x6e>
    ed22:	adds	r3, r0, #3
    ed24:	b.n	ebe0 <_dtoa_r+0x98>
    ed26:	movs	r1, #0
    ed28:	str	r1, [r4, #68]	; 0x44
    ed2a:	mov	r0, r4
    ed2c:	mov	r8, r1
    ed2e:	str	r1, [sp, #4]
    ed30:	bl	10238 <_Balloc>
    ed34:	mov.w	r7, #4294967295
    ed38:	movs	r3, #1
    ed3a:	str	r0, [sp, #32]
    ed3c:	str	r0, [r4, #64]	; 0x40
    ed3e:	str	r7, [sp, #52]	; 0x34
    ed40:	str	r3, [sp, #36]	; 0x24
    ed42:	ldr	r3, [sp, #68]	; 0x44
    ed44:	cmp	r3, #0
    ed46:	blt.n	ee3e <_dtoa_r+0x2f6>
    ed48:	ldr	r2, [sp, #8]
    ed4a:	cmp	r2, #14
    ed4c:	bgt.n	ee3e <_dtoa_r+0x2f6>
    ed4e:	ldr	r3, [pc, #340]	; (eea4 <_dtoa_r+0x35c>)
    ed50:	cmp.w	r8, #0
    ed54:	add.w	r3, r3, r2, lsl #3
    ed58:	vldr	d4, [r3]
    ed5c:	blt.w	f268 <_dtoa_r+0x720>
    ed60:	vneg.f64	d2, d4
    ed64:	vmov	d7, sl, fp
    ed68:	vdiv.f64	d6, d7, d4
    ed6c:	vcvt.s32.f64	s12, d6
    ed70:	ldr	r2, [sp, #32]
    ed72:	vmov	r3, s12
    ed76:	cmp	r7, #1
    ed78:	add.w	r3, r3, #48	; 0x30
    ed7c:	vcvt.f64.s32	d5, s12
    ed80:	add.w	fp, r2, #1
    ed84:	strb	r3, [r2, #0]
    ed86:	vfma.f64	d7, d2, d5
    ed8a:	beq.n	edd2 <_dtoa_r+0x28a>
    ed8c:	vmov.f64	d3, #36	; 0x41200000  10.0
    ed90:	vmul.f64	d7, d7, d3
    ed94:	vcmp.f64	d7, #0.0
    ed98:	vmrs	APSR_nzcv, fpscr
    ed9c:	beq.n	ee14 <_dtoa_r+0x2cc>
    ed9e:	ldr	r2, [sp, #32]
    eda0:	b.n	edb0 <_dtoa_r+0x268>
    eda2:	vmul.f64	d7, d7, d3
    eda6:	vcmp.f64	d7, #0.0
    edaa:	vmrs	APSR_nzcv, fpscr
    edae:	beq.n	ee14 <_dtoa_r+0x2cc>
    edb0:	vdiv.f64	d6, d7, d4
    edb4:	vcvt.s32.f64	s12, d6
    edb8:	vmov	r3, s12
    edbc:	adds	r3, #48	; 0x30
    edbe:	strb.w	r3, [fp], #1
    edc2:	rsb	r3, r2, fp
    edc6:	cmp	r3, r7
    edc8:	vcvt.f64.s32	d5, s12
    edcc:	vfma.f64	d7, d2, d5
    edd0:	bne.n	eda2 <_dtoa_r+0x25a>
    edd2:	vadd.f64	d7, d7, d7
    edd6:	vcmpe.f64	d4, d7
    edda:	vmrs	APSR_nzcv, fpscr
    edde:	bmi.n	edf2 <_dtoa_r+0x2aa>
    ede0:	vcmp.f64	d4, d7
    ede4:	vmrs	APSR_nzcv, fpscr
    ede8:	bne.n	ee14 <_dtoa_r+0x2cc>
    edea:	vmov	r3, s12
    edee:	lsls	r3, r3, #31
    edf0:	bpl.n	ee14 <_dtoa_r+0x2cc>
    edf2:	ldrb.w	r0, [fp, #-1]
    edf6:	ldr	r2, [sp, #32]
    edf8:	add.w	r3, fp, #4294967295
    edfc:	b.n	ee08 <_dtoa_r+0x2c0>
    edfe:	cmp	r2, r3
    ee00:	beq.w	f5ce <_dtoa_r+0xa86>
    ee04:	ldrb.w	r0, [r3, #-1]!
    ee08:	cmp	r0, #57	; 0x39
    ee0a:	add.w	fp, r3, #1
    ee0e:	beq.n	edfe <_dtoa_r+0x2b6>
    ee10:	adds	r0, #1
    ee12:	strb	r0, [r3, #0]
    ee14:	ldr	r1, [sp, #28]
    ee16:	mov	r0, r4
    ee18:	bl	10284 <_Bfree>
    ee1c:	movs	r2, #0
    ee1e:	ldr	r3, [sp, #8]
    ee20:	strb.w	r2, [fp]
    ee24:	ldr	r2, [sp, #16]
    ee26:	adds	r3, #1
    ee28:	str	r3, [r2, #0]
    ee2a:	ldr	r3, [sp, #116]	; 0x74
    ee2c:	cmp	r3, #0
    ee2e:	beq.w	f4fe <_dtoa_r+0x9b6>
    ee32:	ldr	r0, [sp, #32]
    ee34:	str.w	fp, [r3]
    ee38:	add	sp, #76	; 0x4c
    ee3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee3e:	ldr	r2, [sp, #36]	; 0x24
    ee40:	cmp	r2, #0
    ee42:	beq.n	eeec <_dtoa_r+0x3a4>
    ee44:	ldr	r2, [sp, #4]
    ee46:	cmp	r2, #1
    ee48:	ble.w	f2a8 <_dtoa_r+0x760>
    ee4c:	ldr	r1, [sp, #20]
    ee4e:	subs	r2, r7, #1
    ee50:	cmp	r1, r2
    ee52:	blt.w	f504 <_dtoa_r+0x9bc>
    ee56:	subs	r3, r1, r2
    ee58:	str	r3, [sp, #56]	; 0x38
    ee5a:	cmp	r7, #0
    ee5c:	ldr	r3, [sp, #24]
    ee5e:	blt.w	f6aa <_dtoa_r+0xb62>
    ee62:	str	r3, [sp, #40]	; 0x28
    ee64:	mov	r3, r7
    ee66:	ldr	r2, [sp, #24]
    ee68:	movs	r1, #1
    ee6a:	add	r2, r3
    ee6c:	mov	r0, r4
    ee6e:	str	r2, [sp, #24]
    ee70:	add	r9, r3
    ee72:	bl	1044c <__i2b>
    ee76:	mov	r6, r0
    ee78:	b.n	eef6 <_dtoa_r+0x3ae>
    ee7a:	nop
    ee7c:	nop.w
    ee80:	.word	0x636f4361
    ee84:	.word	0x3fd287a7
    ee88:	.word	0x8b60c8b3
    ee8c:	.word	0x3fc68a28
    ee90:	.word	0x509f79fb
    ee94:	.word	0x3fd34413
    ee98:	.word	0x7ff00000
    ee9c:	.word	0x20000ba1
    eea0:	.word	0x20000bb8
    eea4:	.word	0x200002a8
    eea8:	.word	0x20000bac
    eeac:	.word	0x20000ba0
    eeb0:	movs	r3, #1
    eeb2:	str	r3, [sp, #48]	; 0x30
    eeb4:	b.n	eca8 <_dtoa_r+0x160>
    eeb6:	vcvt.f64.s32	d6, s13
    eeba:	vcmp.f64	d7, d6
    eebe:	vmrs	APSR_nzcv, fpscr
    eec2:	beq.w	ec7e <_dtoa_r+0x136>
    eec6:	ldr	r3, [sp, #8]
    eec8:	subs	r3, #1
    eeca:	str	r3, [sp, #8]
    eecc:	b.n	ec7e <_dtoa_r+0x136>
    eece:	ldr	r2, [sp, #24]
    eed0:	ldr	r3, [sp, #8]
    eed2:	subs	r2, r2, r3
    eed4:	negs	r3, r3
    eed6:	str	r3, [sp, #20]
    eed8:	movs	r3, #0
    eeda:	str	r2, [sp, #24]
    eedc:	str	r3, [sp, #44]	; 0x2c
    eede:	b.n	ecc6 <_dtoa_r+0x17e>
    eee0:	rsb	r3, r9, #0
    eee4:	str	r3, [sp, #24]
    eee6:	mov.w	r9, #0
    eeea:	b.n	ecb6 <_dtoa_r+0x16e>
    eeec:	ldr	r3, [sp, #20]
    eeee:	str	r3, [sp, #56]	; 0x38
    eef0:	ldr	r6, [sp, #36]	; 0x24
    eef2:	ldr	r3, [sp, #24]
    eef4:	str	r3, [sp, #40]	; 0x28
    eef6:	ldr	r1, [sp, #40]	; 0x28
    eef8:	mov	r3, r1
    eefa:	cbz	r1, ef16 <_dtoa_r+0x3ce>
    eefc:	cmp.w	r9, #0
    ef00:	ble.n	ef16 <_dtoa_r+0x3ce>
    ef02:	cmp	r1, r9
    ef04:	ldr	r2, [sp, #24]
    ef06:	it	ge
    ef08:	movge	r3, r9
    ef0a:	subs	r2, r2, r3
    ef0c:	str	r2, [sp, #24]
    ef0e:	subs	r2, r1, r3
    ef10:	str	r2, [sp, #40]	; 0x28
    ef12:	rsb	r9, r3, r9
    ef16:	ldr	r3, [sp, #20]
    ef18:	cmp	r3, #0
    ef1a:	ble.w	f41e <_dtoa_r+0x8d6>
    ef1e:	ldr	r2, [sp, #36]	; 0x24
    ef20:	cmp	r2, #0
    ef22:	beq.w	f25a <_dtoa_r+0x712>
    ef26:	ldr	r2, [sp, #56]	; 0x38
    ef28:	cmp	r2, #0
    ef2a:	beq.w	f25a <_dtoa_r+0x712>
    ef2e:	mov	r1, r6
    ef30:	mov	r0, r4
    ef32:	bl	10590 <__pow5mult>
    ef36:	ldr	r2, [sp, #28]
    ef38:	mov	r1, r0
    ef3a:	mov	r6, r0
    ef3c:	mov	r0, r4
    ef3e:	bl	10460 <__multiply>
    ef42:	ldr	r1, [sp, #28]
    ef44:	mov	r5, r0
    ef46:	mov	r0, r4
    ef48:	bl	10284 <_Bfree>
    ef4c:	ldr	r3, [sp, #20]
    ef4e:	ldr	r2, [sp, #56]	; 0x38
    ef50:	subs	r3, r3, r2
    ef52:	str	r3, [sp, #20]
    ef54:	bne.w	f258 <_dtoa_r+0x710>
    ef58:	movs	r1, #1
    ef5a:	mov	r0, r4
    ef5c:	bl	1044c <__i2b>
    ef60:	ldr	r3, [sp, #44]	; 0x2c
    ef62:	str	r0, [sp, #20]
    ef64:	cmp	r3, #0
    ef66:	beq.w	f2c2 <_dtoa_r+0x77a>
    ef6a:	mov	r1, r0
    ef6c:	mov	r2, r3
    ef6e:	mov	r0, r4
    ef70:	bl	10590 <__pow5mult>
    ef74:	ldr	r3, [sp, #4]
    ef76:	str	r0, [sp, #20]
    ef78:	cmp	r3, #1
    ef7a:	ble.w	f47e <_dtoa_r+0x936>
    ef7e:	movs	r3, #0
    ef80:	str	r3, [sp, #28]
    ef82:	ldr	r2, [sp, #20]
    ef84:	ldr	r3, [r2, #16]
    ef86:	add.w	r3, r2, r3, lsl #2
    ef8a:	ldr	r0, [r3, #16]
    ef8c:	bl	103b0 <__hi0bits>
    ef90:	rsb	r0, r0, #32
    ef94:	add	r0, r9
    ef96:	ands.w	r0, r0, #31
    ef9a:	beq.w	f2be <_dtoa_r+0x776>
    ef9e:	rsb	r3, r0, #32
    efa2:	cmp	r3, #4
    efa4:	ble.w	f798 <_dtoa_r+0xc50>
    efa8:	rsb	r0, r0, #28
    efac:	ldr	r3, [sp, #24]
    efae:	add	r3, r0
    efb0:	str	r3, [sp, #24]
    efb2:	ldr	r3, [sp, #40]	; 0x28
    efb4:	add	r3, r0
    efb6:	str	r3, [sp, #40]	; 0x28
    efb8:	add	r9, r0
    efba:	ldr	r3, [sp, #24]
    efbc:	cmp	r3, #0
    efbe:	ble.n	efcc <_dtoa_r+0x484>
    efc0:	mov	r1, r5
    efc2:	mov	r2, r3
    efc4:	mov	r0, r4
    efc6:	bl	10630 <__lshift>
    efca:	mov	r5, r0
    efcc:	cmp.w	r9, #0
    efd0:	ble.n	efde <_dtoa_r+0x496>
    efd2:	mov	r2, r9
    efd4:	ldr	r1, [sp, #20]
    efd6:	mov	r0, r4
    efd8:	bl	10630 <__lshift>
    efdc:	str	r0, [sp, #20]
    efde:	ldr	r3, [sp, #48]	; 0x30
    efe0:	cmp	r3, #0
    efe2:	bne.w	f3e8 <_dtoa_r+0x8a0>
    efe6:	cmp	r7, #0
    efe8:	ble.w	f42c <_dtoa_r+0x8e4>
    efec:	ldr	r3, [sp, #36]	; 0x24
    efee:	cmp	r3, #0
    eff0:	bne.w	f2ea <_dtoa_r+0x7a2>
    eff4:	ldr.w	fp, [sp, #32]
    eff8:	ldr.w	sl, [sp, #20]
    effc:	mov	r8, fp
    effe:	b.n	f006 <_dtoa_r+0x4be>
    f000:	bl	10298 <__multadd>
    f004:	mov	r5, r0
    f006:	mov	r1, sl
    f008:	mov	r0, r5
    f00a:	bl	ea1c <quorem>
    f00e:	add.w	r9, r0, #48	; 0x30
    f012:	strb.w	r9, [r8], #1
    f016:	rsb	r3, fp, r8
    f01a:	cmp	r3, r7
    f01c:	mov.w	r2, #10
    f020:	mov.w	r3, #0
    f024:	mov	r1, r5
    f026:	mov	r0, r4
    f028:	blt.n	f000 <_dtoa_r+0x4b8>
    f02a:	ldr	r3, [sp, #32]
    f02c:	cmp	r7, #1
    f02e:	ite	ge
    f030:	addge	r3, r3, r7
    f032:	addlt	r3, #1
    f034:	mov	fp, r3
    f036:	mov.w	sl, #0
    f03a:	mov	r1, r5
    f03c:	movs	r2, #1
    f03e:	mov	r0, r4
    f040:	bl	10630 <__lshift>
    f044:	ldr	r1, [sp, #20]
    f046:	str	r0, [sp, #28]
    f048:	bl	106e0 <__mcmp>
    f04c:	cmp	r0, #0
    f04e:	ble.w	f56a <_dtoa_r+0xa22>
    f052:	ldrb.w	r2, [fp, #-1]
    f056:	ldr	r1, [sp, #32]
    f058:	add.w	r3, fp, #4294967295
    f05c:	b.n	f068 <_dtoa_r+0x520>
    f05e:	cmp	r3, r1
    f060:	beq.w	f46a <_dtoa_r+0x922>
    f064:	ldrb.w	r2, [r3, #-1]!
    f068:	cmp	r2, #57	; 0x39
    f06a:	add.w	fp, r3, #1
    f06e:	beq.n	f05e <_dtoa_r+0x516>
    f070:	adds	r2, #1
    f072:	strb	r2, [r3, #0]
    f074:	ldr	r1, [sp, #20]
    f076:	mov	r0, r4
    f078:	bl	10284 <_Bfree>
    f07c:	cmp	r6, #0
    f07e:	beq.w	ee14 <_dtoa_r+0x2cc>
    f082:	cmp.w	sl, #0
    f086:	beq.n	f094 <_dtoa_r+0x54c>
    f088:	cmp	sl, r6
    f08a:	beq.n	f094 <_dtoa_r+0x54c>
    f08c:	mov	r1, sl
    f08e:	mov	r0, r4
    f090:	bl	10284 <_Bfree>
    f094:	mov	r1, r6
    f096:	mov	r0, r4
    f098:	bl	10284 <_Bfree>
    f09c:	b.n	ee14 <_dtoa_r+0x2cc>
    f09e:	rsb	r3, r3, #32
    f0a2:	lsl.w	r3, sl, r3
    f0a6:	vmov	s15, r3
    f0aa:	b.n	ec30 <_dtoa_r+0xe8>
    f0ac:	movs	r3, #0
    f0ae:	str	r3, [sp, #48]	; 0x30
    f0b0:	b.n	eca8 <_dtoa_r+0x160>
    f0b2:	movs	r3, #0
    f0b4:	str	r3, [sp, #36]	; 0x24
    f0b6:	ldr	r3, [sp, #8]
    f0b8:	add	r3, r8
    f0ba:	adds	r7, r3, #1
    f0bc:	cmp	r7, #0
    f0be:	str	r3, [sp, #52]	; 0x34
    f0c0:	ble.w	f51e <_dtoa_r+0x9d6>
    f0c4:	mov	r6, r7
    f0c6:	mov	r5, r7
    f0c8:	movs	r1, #0
    f0ca:	cmp	r6, #23
    f0cc:	str	r1, [r4, #68]	; 0x44
    f0ce:	bls.n	f0e6 <_dtoa_r+0x59e>
    f0d0:	movs	r2, #1
    f0d2:	movs	r3, #4
    f0d4:	lsls	r3, r3, #1
    f0d6:	add.w	r0, r3, #20
    f0da:	cmp	r0, r6
    f0dc:	mov	r1, r2
    f0de:	add.w	r2, r2, #1
    f0e2:	bls.n	f0d4 <_dtoa_r+0x58c>
    f0e4:	str	r1, [r4, #68]	; 0x44
    f0e6:	mov	r0, r4
    f0e8:	bl	10238 <_Balloc>
    f0ec:	cmp	r5, #14
    f0ee:	str	r0, [sp, #32]
    f0f0:	str	r0, [r4, #64]	; 0x40
    f0f2:	bhi.w	ed42 <_dtoa_r+0x1fa>
    f0f6:	ldr	r3, [sp, #56]	; 0x38
    f0f8:	cmp	r3, #0
    f0fa:	beq.w	ed42 <_dtoa_r+0x1fa>
    f0fe:	ldr	r1, [sp, #8]
    f100:	cmp	r1, #0
    f102:	strd	sl, fp, [sp, #56]	; 0x38
    f106:	ble.w	f58c <_dtoa_r+0xa44>
    f10a:	ldr	r3, [pc, #792]	; (f424 <_dtoa_r+0x8dc>)
    f10c:	and.w	r2, r1, #15
    f110:	add.w	r2, r3, r2, lsl #3
    f114:	asrs	r3, r1, #4
    f116:	lsls	r6, r3, #27
    f118:	vldr	d6, [r2]
    f11c:	bpl.w	f516 <_dtoa_r+0x9ce>
    f120:	ldr	r2, [pc, #772]	; (f428 <_dtoa_r+0x8e0>)
    f122:	vldr	d7, [r2, #32]
    f126:	vmov	d4, sl, fp
    f12a:	and.w	r3, r3, #15
    f12e:	movs	r1, #3
    f130:	vdiv.f64	d5, d4, d7
    f134:	cbz	r3, f14e <_dtoa_r+0x606>
    f136:	ldr	r2, [pc, #752]	; (f428 <_dtoa_r+0x8e0>)
    f138:	lsls	r5, r3, #31
    f13a:	bpl.n	f146 <_dtoa_r+0x5fe>
    f13c:	vldr	d7, [r2]
    f140:	adds	r1, #1
    f142:	vmul.f64	d6, d6, d7
    f146:	asrs	r3, r3, #1
    f148:	add.w	r2, r2, #8
    f14c:	bne.n	f138 <_dtoa_r+0x5f0>
    f14e:	vdiv.f64	d4, d5, d6
    f152:	ldr	r3, [sp, #48]	; 0x30
    f154:	cbz	r3, f166 <_dtoa_r+0x61e>
    f156:	vmov.f64	d7, #112	; 0x3f800000  1.0
    f15a:	vcmpe.f64	d4, d7
    f15e:	vmrs	APSR_nzcv, fpscr
    f162:	bmi.w	f6d4 <_dtoa_r+0xb8c>
    f166:	vmov	s15, r1
    f16a:	vcvt.f64.s32	d6, s15
    f16e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    f172:	vfma.f64	d7, d6, d4
    f176:	vmov	r2, r3, d7
    f17a:	sub.w	r3, r3, #54525952	; 0x3400000
    f17e:	cmp	r7, #0
    f180:	beq.w	f4d0 <_dtoa_r+0x988>
    f184:	ldr	r6, [sp, #8]
    f186:	mov	r1, r7
    f188:	ldr	r0, [sp, #36]	; 0x24
    f18a:	cmp	r0, #0
    f18c:	beq.w	f62a <_dtoa_r+0xae2>
    f190:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f194:	ldr	r0, [pc, #652]	; (f424 <_dtoa_r+0x8dc>)
    f196:	ldr	r5, [sp, #32]
    f198:	add.w	r0, r0, r1, lsl #3
    f19c:	vldr	d6, [r0, #-8]
    f1a0:	vcvt.s32.f64	s14, d4
    f1a4:	vdiv.f64	d5, d3, d6
    f1a8:	vmov	r0, s14
    f1ac:	vmov	d6, r2, r3
    f1b0:	adds	r0, #48	; 0x30
    f1b2:	uxtb	r0, r0
    f1b4:	vsub.f64	d5, d5, d6
    f1b8:	vcvt.f64.s32	d7, s14
    f1bc:	vsub.f64	d7, d4, d7
    f1c0:	vcmpe.f64	d5, d7
    f1c4:	vmrs	APSR_nzcv, fpscr
    f1c8:	strb	r0, [r5, #0]
    f1ca:	add.w	fp, r5, #1
    f1ce:	bgt.n	f236 <_dtoa_r+0x6ee>
    f1d0:	vmov.f64	d3, #112	; 0x3f800000  1.0
    f1d4:	vsub.f64	d6, d3, d7
    f1d8:	vcmpe.f64	d5, d6
    f1dc:	vmrs	APSR_nzcv, fpscr
    f1e0:	bgt.w	f740 <_dtoa_r+0xbf8>
    f1e4:	cmp	r1, #1
    f1e6:	ble.w	f584 <_dtoa_r+0xa3c>
    f1ea:	vmov.f64	d4, #36	; 0x41200000  10.0
    f1ee:	ldr	r3, [sp, #32]
    f1f0:	add	r1, r3
    f1f2:	b.n	f20a <_dtoa_r+0x6c2>
    f1f4:	vsub.f64	d6, d3, d7
    f1f8:	vcmpe.f64	d6, d5
    f1fc:	vmrs	APSR_nzcv, fpscr
    f200:	bmi.w	f740 <_dtoa_r+0xbf8>
    f204:	cmp	fp, r1
    f206:	beq.w	f584 <_dtoa_r+0xa3c>
    f20a:	vmul.f64	d7, d7, d4
    f20e:	vmul.f64	d5, d5, d4
    f212:	vcvt.s32.f64	s12, d7
    f216:	vmov	r3, s12
    f21a:	add.w	r0, r3, #48	; 0x30
    f21e:	uxtb	r0, r0
    f220:	vcvt.f64.s32	d6, s12
    f224:	vsub.f64	d7, d7, d6
    f228:	vcmpe.f64	d7, d5
    f22c:	vmrs	APSR_nzcv, fpscr
    f230:	strb.w	r0, [fp], #1
    f234:	bpl.n	f1f4 <_dtoa_r+0x6ac>
    f236:	str	r6, [sp, #8]
    f238:	b.n	ee14 <_dtoa_r+0x2cc>
    f23a:	movs	r3, #0
    f23c:	str	r3, [sp, #36]	; 0x24
    f23e:	cmp.w	r8, #0
    f242:	ble.w	f526 <_dtoa_r+0x9de>
    f246:	mov	r6, r8
    f248:	mov	r5, r8
    f24a:	str.w	r8, [sp, #52]	; 0x34
    f24e:	mov	r7, r8
    f250:	b.n	f0c8 <_dtoa_r+0x580>
    f252:	movs	r3, #1
    f254:	str	r3, [sp, #36]	; 0x24
    f256:	b.n	f23e <_dtoa_r+0x6f6>
    f258:	str	r5, [sp, #28]
    f25a:	ldr	r2, [sp, #20]
    f25c:	ldr	r1, [sp, #28]
    f25e:	mov	r0, r4
    f260:	bl	10590 <__pow5mult>
    f264:	mov	r5, r0
    f266:	b.n	ef58 <_dtoa_r+0x410>
    f268:	cmp	r7, #0
    f26a:	bgt.w	ed60 <_dtoa_r+0x218>
    f26e:	bne.w	f4f6 <_dtoa_r+0x9ae>
    f272:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f276:	vmul.f64	d4, d4, d7
    f27a:	vmov	d7, sl, fp
    f27e:	vcmpe.f64	d4, d7
    f282:	vmrs	APSR_nzcv, fpscr
    f286:	mov	r6, r7
    f288:	str	r7, [sp, #20]
    f28a:	blt.w	f458 <_dtoa_r+0x910>
    f28e:	mvn.w	r3, r8
    f292:	ldr.w	fp, [sp, #32]
    f296:	str	r3, [sp, #8]
    f298:	ldr	r1, [sp, #20]
    f29a:	mov	r0, r4
    f29c:	bl	10284 <_Bfree>
    f2a0:	cmp	r6, #0
    f2a2:	beq.w	ee14 <_dtoa_r+0x2cc>
    f2a6:	b.n	f094 <_dtoa_r+0x54c>
    f2a8:	ldr	r2, [sp, #40]	; 0x28
    f2aa:	cmp	r2, #0
    f2ac:	beq.w	f6b4 <_dtoa_r+0xb6c>
    f2b0:	ldr	r2, [sp, #20]
    f2b2:	str	r2, [sp, #56]	; 0x38
    f2b4:	ldr	r2, [sp, #24]
    f2b6:	str	r2, [sp, #40]	; 0x28
    f2b8:	addw	r3, r3, #1075	; 0x433
    f2bc:	b.n	ee66 <_dtoa_r+0x31e>
    f2be:	movs	r0, #28
    f2c0:	b.n	efac <_dtoa_r+0x464>
    f2c2:	ldr	r3, [sp, #4]
    f2c4:	cmp	r3, #1
    f2c6:	ble.w	f74a <_dtoa_r+0xc02>
    f2ca:	ldr	r3, [sp, #44]	; 0x2c
    f2cc:	str	r3, [sp, #28]
    f2ce:	movs	r0, #1
    f2d0:	b.n	ef94 <_dtoa_r+0x44c>
    f2d2:	mov	r1, r6
    f2d4:	movs	r3, #0
    f2d6:	movs	r2, #10
    f2d8:	mov	r0, r4
    f2da:	bl	10298 <__multadd>
    f2de:	ldr	r3, [sp, #52]	; 0x34
    f2e0:	cmp	r3, #0
    f2e2:	mov	r6, r0
    f2e4:	ble.w	f782 <_dtoa_r+0xc3a>
    f2e8:	mov	r7, r3
    f2ea:	ldr	r3, [sp, #40]	; 0x28
    f2ec:	cmp	r3, #0
    f2ee:	ble.n	f2fc <_dtoa_r+0x7b4>
    f2f0:	mov	r1, r6
    f2f2:	mov	r2, r3
    f2f4:	mov	r0, r4
    f2f6:	bl	10630 <__lshift>
    f2fa:	mov	r6, r0
    f2fc:	ldr	r3, [sp, #28]
    f2fe:	cmp	r3, #0
    f300:	bne.w	f5e0 <_dtoa_r+0xa98>
    f304:	mov	r8, r6
    f306:	ldr	r3, [sp, #32]
    f308:	subs	r7, #1
    f30a:	adds	r2, r3, r7
    f30c:	str	r2, [sp, #36]	; 0x24
    f30e:	and.w	r2, sl, #1
    f312:	str	r2, [sp, #40]	; 0x28
    f314:	mov	r7, r3
    f316:	ldr.w	fp, [sp, #20]
    f31a:	mov	r0, r5
    f31c:	mov	r1, fp
    f31e:	bl	ea1c <quorem>
    f322:	mov	r1, r6
    f324:	mov	sl, r0
    f326:	mov	r0, r5
    f328:	bl	106e0 <__mcmp>
    f32c:	mov	r2, r8
    f32e:	mov	r1, fp
    f330:	mov	r9, r0
    f332:	mov	r0, r4
    f334:	bl	10724 <__mdiff>
    f338:	ldr	r3, [r0, #12]
    f33a:	mov	fp, r0
    f33c:	add.w	r2, sl, #48	; 0x30
    f340:	cmp	r3, #0
    f342:	bne.n	f3d8 <_dtoa_r+0x890>
    f344:	mov	r1, r0
    f346:	mov	r0, r5
    f348:	str	r2, [sp, #28]
    f34a:	bl	106e0 <__mcmp>
    f34e:	mov	r1, fp
    f350:	str	r0, [sp, #24]
    f352:	mov	r0, r4
    f354:	bl	10284 <_Bfree>
    f358:	ldr	r3, [sp, #24]
    f35a:	ldr	r2, [sp, #28]
    f35c:	cbnz	r3, f36a <_dtoa_r+0x822>
    f35e:	ldr	r1, [sp, #4]
    f360:	cbnz	r1, f36a <_dtoa_r+0x822>
    f362:	ldr	r1, [sp, #40]	; 0x28
    f364:	cmp	r1, #0
    f366:	beq.w	f754 <_dtoa_r+0xc0c>
    f36a:	cmp.w	r9, #0
    f36e:	blt.w	f530 <_dtoa_r+0x9e8>
    f372:	bne.n	f380 <_dtoa_r+0x838>
    f374:	ldr	r1, [sp, #4]
    f376:	cbnz	r1, f380 <_dtoa_r+0x838>
    f378:	ldr	r1, [sp, #40]	; 0x28
    f37a:	cmp	r1, #0
    f37c:	beq.w	f530 <_dtoa_r+0x9e8>
    f380:	cmp	r3, #0
    f382:	bgt.w	f608 <_dtoa_r+0xac0>
    f386:	ldr	r3, [sp, #36]	; 0x24
    f388:	strb	r2, [r7, #0]
    f38a:	add.w	r9, r7, #1
    f38e:	cmp	r7, r3
    f390:	mov	fp, r9
    f392:	beq.w	f622 <_dtoa_r+0xada>
    f396:	mov	r1, r5
    f398:	movs	r3, #0
    f39a:	movs	r2, #10
    f39c:	mov	r0, r4
    f39e:	bl	10298 <__multadd>
    f3a2:	cmp	r6, r8
    f3a4:	mov	r5, r0
    f3a6:	mov	r1, r6
    f3a8:	mov.w	r3, #0
    f3ac:	mov.w	r2, #10
    f3b0:	mov	r0, r4
    f3b2:	beq.n	f3cc <_dtoa_r+0x884>
    f3b4:	bl	10298 <__multadd>
    f3b8:	mov	r1, r8
    f3ba:	mov	r6, r0
    f3bc:	movs	r3, #0
    f3be:	movs	r2, #10
    f3c0:	mov	r0, r4
    f3c2:	bl	10298 <__multadd>
    f3c6:	mov	r7, r9
    f3c8:	mov	r8, r0
    f3ca:	b.n	f316 <_dtoa_r+0x7ce>
    f3cc:	bl	10298 <__multadd>
    f3d0:	mov	r7, r9
    f3d2:	mov	r6, r0
    f3d4:	mov	r8, r0
    f3d6:	b.n	f316 <_dtoa_r+0x7ce>
    f3d8:	mov	r1, r0
    f3da:	mov	r0, r4
    f3dc:	str	r2, [sp, #24]
    f3de:	bl	10284 <_Bfree>
    f3e2:	movs	r3, #1
    f3e4:	ldr	r2, [sp, #24]
    f3e6:	b.n	f36a <_dtoa_r+0x822>
    f3e8:	ldr	r1, [sp, #20]
    f3ea:	mov	r0, r5
    f3ec:	bl	106e0 <__mcmp>
    f3f0:	cmp	r0, #0
    f3f2:	bge.w	efe6 <_dtoa_r+0x49e>
    f3f6:	mov	r1, r5
    f3f8:	ldr	r5, [sp, #8]
    f3fa:	movs	r3, #0
    f3fc:	subs	r5, #1
    f3fe:	movs	r2, #10
    f400:	mov	r0, r4
    f402:	str	r5, [sp, #8]
    f404:	bl	10298 <__multadd>
    f408:	ldr	r3, [sp, #36]	; 0x24
    f40a:	mov	r5, r0
    f40c:	cmp	r3, #0
    f40e:	bne.w	f2d2 <_dtoa_r+0x78a>
    f412:	ldr	r3, [sp, #52]	; 0x34
    f414:	cmp	r3, #0
    f416:	ble.w	f774 <_dtoa_r+0xc2c>
    f41a:	mov	r7, r3
    f41c:	b.n	eff4 <_dtoa_r+0x4ac>
    f41e:	ldr	r5, [sp, #28]
    f420:	b.n	ef58 <_dtoa_r+0x410>
    f422:	nop
    f424:	.word	0x200002a8
    f428:	.word	0x20000280
    f42c:	ldr	r3, [sp, #4]
    f42e:	cmp	r3, #2
    f430:	ble.w	efec <_dtoa_r+0x4a4>
    f434:	cmp	r7, #0
    f436:	bne.w	f70c <_dtoa_r+0xbc4>
    f43a:	mov	r3, r7
    f43c:	ldr	r1, [sp, #20]
    f43e:	movs	r2, #5
    f440:	mov	r0, r4
    f442:	bl	10298 <__multadd>
    f446:	mov	r1, r0
    f448:	str	r0, [sp, #20]
    f44a:	mov	r0, r5
    f44c:	bl	106e0 <__mcmp>
    f450:	cmp	r0, #0
    f452:	str	r5, [sp, #28]
    f454:	ble.w	f28e <_dtoa_r+0x746>
    f458:	ldr	r2, [sp, #8]
    f45a:	ldr	r1, [sp, #32]
    f45c:	movs	r3, #49	; 0x31
    f45e:	adds	r2, #1
    f460:	str	r2, [sp, #8]
    f462:	strb	r3, [r1, #0]
    f464:	add.w	fp, r1, #1
    f468:	b.n	f298 <_dtoa_r+0x750>
    f46a:	ldr	r2, [sp, #8]
    f46c:	adds	r2, #1
    f46e:	str	r2, [sp, #8]
    f470:	ldr	r2, [sp, #32]
    f472:	movs	r3, #49	; 0x31
    f474:	strb	r3, [r2, #0]
    f476:	b.n	f074 <_dtoa_r+0x52c>
    f478:	movs	r3, #1
    f47a:	str	r3, [sp, #36]	; 0x24
    f47c:	b.n	f0b6 <_dtoa_r+0x56e>
    f47e:	cmp.w	sl, #0
    f482:	bne.w	ef7e <_dtoa_r+0x436>
    f486:	ubfx	r3, fp, #0, #20
    f48a:	cmp	r3, #0
    f48c:	bne.w	f6c6 <_dtoa_r+0xb7e>
    f490:	bic.w	r3, fp, #2147483648	; 0x80000000
    f494:	lsrs	r3, r3, #20
    f496:	lsls	r3, r3, #20
    f498:	cmp	r3, #0
    f49a:	beq.w	f746 <_dtoa_r+0xbfe>
    f49e:	ldr	r3, [sp, #24]
    f4a0:	adds	r3, #1
    f4a2:	str	r3, [sp, #24]
    f4a4:	movs	r3, #1
    f4a6:	add.w	r9, r9, #1
    f4aa:	str	r3, [sp, #28]
    f4ac:	ldr	r3, [sp, #44]	; 0x2c
    f4ae:	movs	r0, #1
    f4b0:	cmp	r3, #0
    f4b2:	beq.w	ef94 <_dtoa_r+0x44c>
    f4b6:	b.n	ef82 <_dtoa_r+0x43a>
    f4b8:	vmov	s15, r1
    f4bc:	vcvt.f64.s32	d6, s15
    f4c0:	vmov.f64	d7, #28	; 0x40e00000  7.0
    f4c4:	vfma.f64	d7, d4, d6
    f4c8:	vmov	r2, r3, d7
    f4cc:	sub.w	r3, r3, #54525952	; 0x3400000
    f4d0:	vmov	d6, r2, r3
    f4d4:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f4d8:	vsub.f64	d7, d4, d7
    f4dc:	vcmpe.f64	d7, d6
    f4e0:	vmrs	APSR_nzcv, fpscr
    f4e4:	bgt.w	f6a2 <_dtoa_r+0xb5a>
    f4e8:	vneg.f64	d6, d6
    f4ec:	vcmpe.f64	d7, d6
    f4f0:	vmrs	APSR_nzcv, fpscr
    f4f4:	bpl.n	f584 <_dtoa_r+0xa3c>
    f4f6:	movs	r3, #0
    f4f8:	str	r3, [sp, #20]
    f4fa:	mov	r6, r3
    f4fc:	b.n	f28e <_dtoa_r+0x746>
    f4fe:	ldr	r0, [sp, #32]
    f500:	b.w	ebb6 <_dtoa_r+0x6e>
    f504:	ldr	r3, [sp, #20]
    f506:	ldr	r1, [sp, #44]	; 0x2c
    f508:	str	r2, [sp, #20]
    f50a:	subs	r3, r2, r3
    f50c:	add	r1, r3
    f50e:	movs	r3, #0
    f510:	str	r1, [sp, #44]	; 0x2c
    f512:	str	r3, [sp, #56]	; 0x38
    f514:	b.n	ee5a <_dtoa_r+0x312>
    f516:	vldr	d5, [sp, #56]	; 0x38
    f51a:	movs	r1, #2
    f51c:	b.n	f134 <_dtoa_r+0x5ec>
    f51e:	mov	r5, r7
    f520:	movs	r1, #0
    f522:	str	r1, [r4, #68]	; 0x44
    f524:	b.n	f0e6 <_dtoa_r+0x59e>
    f526:	movs	r5, #1
    f528:	str	r5, [sp, #52]	; 0x34
    f52a:	mov	r7, r5
    f52c:	mov	r8, r5
    f52e:	b.n	f520 <_dtoa_r+0x9d8>
    f530:	cmp	r3, #0
    f532:	mov	r9, r2
    f534:	ble.n	f55a <_dtoa_r+0xa12>
    f536:	mov	r1, r5
    f538:	movs	r2, #1
    f53a:	mov	r0, r4
    f53c:	bl	10630 <__lshift>
    f540:	ldr	r1, [sp, #20]
    f542:	mov	r5, r0
    f544:	bl	106e0 <__mcmp>
    f548:	cmp	r0, #0
    f54a:	ble.w	f766 <_dtoa_r+0xc1e>
    f54e:	cmp.w	r9, #57	; 0x39
    f552:	beq.w	f710 <_dtoa_r+0xbc8>
    f556:	add.w	r9, sl, #49	; 0x31
    f55a:	mov	sl, r6
    f55c:	strb.w	r9, [r7]
    f560:	add.w	fp, r7, #1
    f564:	mov	r6, r8
    f566:	str	r5, [sp, #28]
    f568:	b.n	f074 <_dtoa_r+0x52c>
    f56a:	bne.n	f576 <_dtoa_r+0xa2e>
    f56c:	tst.w	r9, #1
    f570:	beq.n	f576 <_dtoa_r+0xa2e>
    f572:	b.n	f052 <_dtoa_r+0x50a>
    f574:	mov	fp, r2
    f576:	ldrb.w	r3, [fp, #-1]
    f57a:	cmp	r3, #48	; 0x30
    f57c:	add.w	r2, fp, #4294967295
    f580:	beq.n	f574 <_dtoa_r+0xa2c>
    f582:	b.n	f074 <_dtoa_r+0x52c>
    f584:	ldrd	sl, fp, [sp, #56]	; 0x38
    f588:	b.w	ed42 <_dtoa_r+0x1fa>
    f58c:	ldr	r3, [sp, #8]
    f58e:	negs	r3, r3
    f590:	cmp	r3, #0
    f592:	beq.w	f6cc <_dtoa_r+0xb84>
    f596:	ldr	r2, [pc, #556]	; (f7c4 <_dtoa_r+0xc7c>)
    f598:	and.w	r1, r3, #15
    f59c:	add.w	r2, r2, r1, lsl #3
    f5a0:	vldr	d7, [r2]
    f5a4:	vldr	d6, [sp, #56]	; 0x38
    f5a8:	asrs	r3, r3, #4
    f5aa:	vmul.f64	d4, d6, d7
    f5ae:	beq.w	f77e <_dtoa_r+0xc36>
    f5b2:	ldr	r2, [pc, #532]	; (f7c8 <_dtoa_r+0xc80>)
    f5b4:	movs	r1, #2
    f5b6:	lsls	r0, r3, #31
    f5b8:	bpl.n	f5c4 <_dtoa_r+0xa7c>
    f5ba:	vldr	d7, [r2]
    f5be:	adds	r1, #1
    f5c0:	vmul.f64	d4, d4, d7
    f5c4:	asrs	r3, r3, #1
    f5c6:	add.w	r2, r2, #8
    f5ca:	bne.n	f5b6 <_dtoa_r+0xa6e>
    f5cc:	b.n	f152 <_dtoa_r+0x60a>
    f5ce:	ldr	r1, [sp, #32]
    f5d0:	movs	r2, #48	; 0x30
    f5d2:	strb	r2, [r1, #0]
    f5d4:	ldr	r2, [sp, #8]
    f5d6:	ldrb.w	r0, [fp, #-1]
    f5da:	adds	r2, #1
    f5dc:	str	r2, [sp, #8]
    f5de:	b.n	ee10 <_dtoa_r+0x2c8>
    f5e0:	ldr	r1, [r6, #4]
    f5e2:	mov	r0, r4
    f5e4:	bl	10238 <_Balloc>
    f5e8:	ldr	r3, [r6, #16]
    f5ea:	adds	r2, r3, #2
    f5ec:	mov	r8, r0
    f5ee:	lsls	r2, r2, #2
    f5f0:	add.w	r1, r6, #12
    f5f4:	adds	r0, #12
    f5f6:	bl	87a4 <memcpy>
    f5fa:	mov	r1, r8
    f5fc:	movs	r2, #1
    f5fe:	mov	r0, r4
    f600:	bl	10630 <__lshift>
    f604:	mov	r8, r0
    f606:	b.n	f306 <_dtoa_r+0x7be>
    f608:	cmp	r2, #57	; 0x39
    f60a:	beq.w	f710 <_dtoa_r+0xbc8>
    f60e:	add.w	r9, r2, #1
    f612:	mov	sl, r6
    f614:	strb.w	r9, [r7]
    f618:	add.w	fp, r7, #1
    f61c:	mov	r6, r8
    f61e:	str	r5, [sp, #28]
    f620:	b.n	f074 <_dtoa_r+0x52c>
    f622:	mov	sl, r6
    f624:	mov	r9, r2
    f626:	mov	r6, r8
    f628:	b.n	f03a <_dtoa_r+0x4f2>
    f62a:	ldr	r0, [pc, #408]	; (f7c4 <_dtoa_r+0xc7c>)
    f62c:	vcvt.s32.f64	s12, d4
    f630:	subs	r5, r1, #1
    f632:	add.w	r0, r0, r5, lsl #3
    f636:	vmov	d7, r2, r3
    f63a:	vldr	d3, [r0]
    f63e:	vmov	r3, s12
    f642:	vmul.f64	d3, d3, d7
    f646:	ldr	r0, [sp, #32]
    f648:	adds	r3, #48	; 0x30
    f64a:	cmp	r1, #1
    f64c:	vcvt.f64.s32	d6, s12
    f650:	strb	r3, [r0, #0]
    f652:	add.w	fp, r0, #1
    f656:	vsub.f64	d7, d4, d6
    f65a:	beq.n	f686 <_dtoa_r+0xb3e>
    f65c:	vmov.f64	d5, #36	; 0x41200000  10.0
    f660:	ldr	r3, [sp, #32]
    f662:	add	r1, r3
    f664:	mov	r3, fp
    f666:	vmul.f64	d7, d7, d5
    f66a:	vcvt.s32.f64	s12, d7
    f66e:	vmov	r2, s12
    f672:	adds	r2, #48	; 0x30
    f674:	strb.w	r2, [r3], #1
    f678:	cmp	r1, r3
    f67a:	vcvt.f64.s32	d6, s12
    f67e:	vsub.f64	d7, d7, d6
    f682:	bne.n	f666 <_dtoa_r+0xb1e>
    f684:	add	fp, r5
    f686:	vmov.f64	d6, #96	; 0x3f000000  0.5
    f68a:	vadd.f64	d5, d3, d6
    f68e:	vcmpe.f64	d5, d7
    f692:	vmrs	APSR_nzcv, fpscr
    f696:	bpl.n	f720 <_dtoa_r+0xbd8>
    f698:	str	r6, [sp, #8]
    f69a:	ldrb.w	r0, [fp, #-1]
    f69e:	b.w	edf6 <_dtoa_r+0x2ae>
    f6a2:	movs	r3, #0
    f6a4:	str	r3, [sp, #20]
    f6a6:	mov	r6, r3
    f6a8:	b.n	f458 <_dtoa_r+0x910>
    f6aa:	subs	r3, r3, r7
    f6ac:	str	r3, [sp, #40]	; 0x28
    f6ae:	movs	r3, #0
    f6b0:	b.w	ee66 <_dtoa_r+0x31e>
    f6b4:	ldr	r2, [sp, #20]
    f6b6:	ldr	r3, [sp, #64]	; 0x40
    f6b8:	str	r2, [sp, #56]	; 0x38
    f6ba:	ldr	r2, [sp, #24]
    f6bc:	str	r2, [sp, #40]	; 0x28
    f6be:	rsb	r3, r3, #54	; 0x36
    f6c2:	b.w	ee66 <_dtoa_r+0x31e>
    f6c6:	movs	r3, #0
    f6c8:	str	r3, [sp, #28]
    f6ca:	b.n	f4ac <_dtoa_r+0x964>
    f6cc:	vldr	d4, [sp, #56]	; 0x38
    f6d0:	movs	r1, #2
    f6d2:	b.n	f152 <_dtoa_r+0x60a>
    f6d4:	cmp	r7, #0
    f6d6:	beq.w	f4b8 <_dtoa_r+0x970>
    f6da:	ldr	r0, [sp, #52]	; 0x34
    f6dc:	cmp	r0, #0
    f6de:	ble.w	f584 <_dtoa_r+0xa3c>
    f6e2:	vmov.f64	d5, #36	; 0x41200000  10.0
    f6e6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    f6ea:	adds	r1, #1
    f6ec:	vmov	s13, r1
    f6f0:	vmul.f64	d4, d4, d5
    f6f4:	ldr	r3, [sp, #8]
    f6f6:	vcvt.f64.s32	d6, s13
    f6fa:	subs	r6, r3, #1
    f6fc:	vfma.f64	d7, d4, d6
    f700:	vmov	r2, r3, d7
    f704:	mov	r1, r0
    f706:	sub.w	r3, r3, #54525952	; 0x3400000
    f70a:	b.n	f188 <_dtoa_r+0x640>
    f70c:	str	r5, [sp, #28]
    f70e:	b.n	f28e <_dtoa_r+0x746>
    f710:	movs	r2, #57	; 0x39
    f712:	mov	sl, r6
    f714:	str	r5, [sp, #28]
    f716:	mov	r6, r8
    f718:	strb	r2, [r7, #0]
    f71a:	add.w	fp, r7, #1
    f71e:	b.n	f056 <_dtoa_r+0x50e>
    f720:	vsub.f64	d6, d6, d3
    f724:	vcmpe.f64	d6, d7
    f728:	vmrs	APSR_nzcv, fpscr
    f72c:	bgt.n	f732 <_dtoa_r+0xbea>
    f72e:	b.n	f584 <_dtoa_r+0xa3c>
    f730:	mov	fp, r2
    f732:	ldrb.w	r3, [fp, #-1]
    f736:	cmp	r3, #48	; 0x30
    f738:	add.w	r2, fp, #4294967295
    f73c:	beq.n	f730 <_dtoa_r+0xbe8>
    f73e:	b.n	f236 <_dtoa_r+0x6ee>
    f740:	str	r6, [sp, #8]
    f742:	b.w	edf6 <_dtoa_r+0x2ae>
    f746:	str	r3, [sp, #28]
    f748:	b.n	f4ac <_dtoa_r+0x964>
    f74a:	cmp.w	sl, #0
    f74e:	bne.w	f2ca <_dtoa_r+0x782>
    f752:	b.n	f486 <_dtoa_r+0x93e>
    f754:	cmp	r2, #57	; 0x39
    f756:	mov	fp, r9
    f758:	mov	r9, r2
    f75a:	beq.n	f710 <_dtoa_r+0xbc8>
    f75c:	cmp.w	fp, #0
    f760:	bgt.w	f556 <_dtoa_r+0xa0e>
    f764:	b.n	f55a <_dtoa_r+0xa12>
    f766:	bne.w	f55a <_dtoa_r+0xa12>
    f76a:	tst.w	r9, #1
    f76e:	beq.w	f55a <_dtoa_r+0xa12>
    f772:	b.n	f54e <_dtoa_r+0xa06>
    f774:	ldr	r3, [sp, #4]
    f776:	cmp	r3, #2
    f778:	bgt.n	f78c <_dtoa_r+0xc44>
    f77a:	ldr	r7, [sp, #52]	; 0x34
    f77c:	b.n	eff4 <_dtoa_r+0x4ac>
    f77e:	movs	r1, #2
    f780:	b.n	f152 <_dtoa_r+0x60a>
    f782:	ldr	r3, [sp, #4]
    f784:	cmp	r3, #2
    f786:	bgt.n	f78c <_dtoa_r+0xc44>
    f788:	ldr	r7, [sp, #52]	; 0x34
    f78a:	b.n	f2ea <_dtoa_r+0x7a2>
    f78c:	ldr	r7, [sp, #52]	; 0x34
    f78e:	b.n	f434 <_dtoa_r+0x8ec>
    f790:	movs	r3, #1
    f792:	str	r3, [sp, #56]	; 0x38
    f794:	b.w	ecda <_dtoa_r+0x192>
    f798:	beq.w	efba <_dtoa_r+0x472>
    f79c:	rsb	r0, r0, #60	; 0x3c
    f7a0:	b.n	efac <_dtoa_r+0x464>
    f7a2:	movs	r5, #0
    f7a4:	str	r5, [r4, #68]	; 0x44
    f7a6:	mov	r1, r5
    f7a8:	mov	r0, r4
    f7aa:	bl	10238 <_Balloc>
    f7ae:	mov.w	r7, #4294967295
    f7b2:	movs	r3, #1
    f7b4:	str	r0, [sp, #32]
    f7b6:	mov	r8, r5
    f7b8:	str	r0, [r4, #64]	; 0x40
    f7ba:	str	r7, [sp, #52]	; 0x34
    f7bc:	str	r3, [sp, #36]	; 0x24
    f7be:	b.w	ed42 <_dtoa_r+0x1fa>
    f7c2:	nop
    f7c4:	.word	0x200002a8
    f7c8:	.word	0x20000280

0000f7cc <_malloc_trim_r>:
    f7cc:	push	{r3, r4, r5, r6, r7, lr}
    f7ce:	ldr	r7, [pc, #140]	; (f85c <_malloc_trim_r+0x90>)
    f7d0:	mov	r4, r1
    f7d2:	mov	r6, r0
    f7d4:	bl	ae8c <__malloc_lock>
    f7d8:	ldr	r3, [r7, #8]
    f7da:	ldr	r5, [r3, #4]
    f7dc:	bic.w	r5, r5, #3
    f7e0:	subs	r1, r5, r4
    f7e2:	addw	r1, r1, #4079	; 0xfef
    f7e6:	bic.w	r1, r1, #4080	; 0xff0
    f7ea:	bic.w	r1, r1, #15
    f7ee:	sub.w	r4, r1, #4096	; 0x1000
    f7f2:	cmp.w	r4, #4096	; 0x1000
    f7f6:	blt.n	f808 <_malloc_trim_r+0x3c>
    f7f8:	movs	r1, #0
    f7fa:	mov	r0, r6
    f7fc:	bl	b274 <_sbrk_r>
    f800:	ldr	r3, [r7, #8]
    f802:	add	r3, r5
    f804:	cmp	r0, r3
    f806:	beq.n	f812 <_malloc_trim_r+0x46>
    f808:	mov	r0, r6
    f80a:	bl	ae90 <__malloc_unlock>
    f80e:	movs	r0, #0
    f810:	pop	{r3, r4, r5, r6, r7, pc}
    f812:	negs	r1, r4
    f814:	mov	r0, r6
    f816:	bl	b274 <_sbrk_r>
    f81a:	adds	r0, #1
    f81c:	beq.n	f83a <_malloc_trim_r+0x6e>
    f81e:	ldr	r3, [pc, #64]	; (f860 <_malloc_trim_r+0x94>)
    f820:	ldr	r2, [r7, #8]
    f822:	ldr	r1, [r3, #0]
    f824:	subs	r5, r5, r4
    f826:	orr.w	r5, r5, #1
    f82a:	mov	r0, r6
    f82c:	subs	r1, r1, r4
    f82e:	str	r5, [r2, #4]
    f830:	str	r1, [r3, #0]
    f832:	bl	ae90 <__malloc_unlock>
    f836:	movs	r0, #1
    f838:	pop	{r3, r4, r5, r6, r7, pc}
    f83a:	movs	r1, #0
    f83c:	mov	r0, r6
    f83e:	bl	b274 <_sbrk_r>
    f842:	ldr	r2, [r7, #8]
    f844:	subs	r3, r0, r2
    f846:	cmp	r3, #15
    f848:	ble.n	f808 <_malloc_trim_r+0x3c>
    f84a:	ldr	r4, [pc, #24]	; (f864 <_malloc_trim_r+0x98>)
    f84c:	ldr	r1, [pc, #16]	; (f860 <_malloc_trim_r+0x94>)
    f84e:	ldr	r4, [r4, #0]
    f850:	orr.w	r3, r3, #1
    f854:	subs	r0, r0, r4
    f856:	str	r3, [r2, #4]
    f858:	str	r0, [r1, #0]
    f85a:	b.n	f808 <_malloc_trim_r+0x3c>
    f85c:	.word	0x200019c8
    f860:	.word	0x20003d9c
    f864:	.word	0x20001dd0

0000f868 <_free_r>:
    f868:	cmp	r1, #0
    f86a:	beq.n	f8f8 <_free_r+0x90>
    f86c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f870:	mov	r5, r1
    f872:	mov	r8, r0
    f874:	bl	ae8c <__malloc_lock>
    f878:	ldr.w	r7, [r5, #-4]
    f87c:	ldr	r1, [pc, #424]	; (fa28 <_free_r+0x1c0>)
    f87e:	bic.w	r3, r7, #1
    f882:	sub.w	r4, r5, #8
    f886:	adds	r2, r4, r3
    f888:	ldr	r6, [r1, #8]
    f88a:	ldr	r0, [r2, #4]
    f88c:	cmp	r2, r6
    f88e:	bic.w	r0, r0, #3
    f892:	beq.n	f95a <_free_r+0xf2>
    f894:	lsls	r6, r7, #31
    f896:	str	r0, [r2, #4]
    f898:	bmi.n	f8b2 <_free_r+0x4a>
    f89a:	ldr.w	r7, [r5, #-8]
    f89e:	subs	r4, r4, r7
    f8a0:	add.w	lr, r1, #8
    f8a4:	ldr	r5, [r4, #8]
    f8a6:	cmp	r5, lr
    f8a8:	add	r3, r7
    f8aa:	beq.n	f98c <_free_r+0x124>
    f8ac:	ldr	r7, [r4, #12]
    f8ae:	str	r7, [r5, #12]
    f8b0:	str	r5, [r7, #8]
    f8b2:	adds	r5, r2, r0
    f8b4:	ldr	r5, [r5, #4]
    f8b6:	lsls	r5, r5, #31
    f8b8:	bpl.n	f940 <_free_r+0xd8>
    f8ba:	orr.w	r2, r3, #1
    f8be:	str	r2, [r4, #4]
    f8c0:	str	r3, [r4, r3]
    f8c2:	cmp.w	r3, #512	; 0x200
    f8c6:	bcs.n	f8fa <_free_r+0x92>
    f8c8:	lsrs	r3, r3, #3
    f8ca:	adds	r2, r3, #1
    f8cc:	ldr	r5, [r1, #4]
    f8ce:	ldr.w	r7, [r1, r2, lsl #3]
    f8d2:	str	r7, [r4, #8]
    f8d4:	movs	r0, #1
    f8d6:	asrs	r3, r3, #2
    f8d8:	lsl.w	r3, r0, r3
    f8dc:	add.w	r0, r1, r2, lsl #3
    f8e0:	orrs	r5, r3
    f8e2:	subs	r0, #8
    f8e4:	str	r0, [r4, #12]
    f8e6:	str	r5, [r1, #4]
    f8e8:	str.w	r4, [r1, r2, lsl #3]
    f8ec:	str	r4, [r7, #12]
    f8ee:	mov	r0, r8
    f8f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f8f4:	b.w	ae90 <__malloc_unlock>
    f8f8:	bx	lr
    f8fa:	lsrs	r2, r3, #9
    f8fc:	cmp	r2, #4
    f8fe:	bhi.n	f9a8 <_free_r+0x140>
    f900:	lsrs	r2, r3, #6
    f902:	add.w	r7, r2, #57	; 0x39
    f906:	lsls	r7, r7, #1
    f908:	add.w	r5, r2, #56	; 0x38
    f90c:	add.w	r0, r1, r7, lsl #2
    f910:	ldr.w	r2, [r1, r7, lsl #2]
    f914:	ldr	r1, [pc, #272]	; (fa28 <_free_r+0x1c0>)
    f916:	subs	r0, #8
    f918:	cmp	r0, r2
    f91a:	beq.n	f9b8 <_free_r+0x150>
    f91c:	ldr	r1, [r2, #4]
    f91e:	bic.w	r1, r1, #3
    f922:	cmp	r3, r1
    f924:	bcs.n	f92c <_free_r+0xc4>
    f926:	ldr	r2, [r2, #8]
    f928:	cmp	r0, r2
    f92a:	bne.n	f91c <_free_r+0xb4>
    f92c:	ldr	r0, [r2, #12]
    f92e:	str	r0, [r4, #12]
    f930:	str	r2, [r4, #8]
    f932:	str	r4, [r0, #8]
    f934:	str	r4, [r2, #12]
    f936:	mov	r0, r8
    f938:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f93c:	b.w	ae90 <__malloc_unlock>
    f940:	ldr	r5, [r2, #8]
    f942:	ldr	r7, [pc, #232]	; (fa2c <_free_r+0x1c4>)
    f944:	cmp	r5, r7
    f946:	add	r3, r0
    f948:	beq.n	f9ca <_free_r+0x162>
    f94a:	ldr	r0, [r2, #12]
    f94c:	str	r0, [r5, #12]
    f94e:	orr.w	r2, r3, #1
    f952:	str	r5, [r0, #8]
    f954:	str	r2, [r4, #4]
    f956:	str	r3, [r4, r3]
    f958:	b.n	f8c2 <_free_r+0x5a>
    f95a:	lsls	r7, r7, #31
    f95c:	add	r3, r0
    f95e:	bmi.n	f970 <_free_r+0x108>
    f960:	ldr.w	r2, [r5, #-8]
    f964:	subs	r4, r4, r2
    f966:	add	r3, r2
    f968:	ldr	r0, [r4, #8]
    f96a:	ldr	r2, [r4, #12]
    f96c:	str	r2, [r0, #12]
    f96e:	str	r0, [r2, #8]
    f970:	ldr	r2, [pc, #188]	; (fa30 <_free_r+0x1c8>)
    f972:	ldr	r2, [r2, #0]
    f974:	orr.w	r0, r3, #1
    f978:	cmp	r3, r2
    f97a:	str	r0, [r4, #4]
    f97c:	str	r4, [r1, #8]
    f97e:	bcc.n	f8ee <_free_r+0x86>
    f980:	ldr	r3, [pc, #176]	; (fa34 <_free_r+0x1cc>)
    f982:	mov	r0, r8
    f984:	ldr	r1, [r3, #0]
    f986:	bl	f7cc <_malloc_trim_r>
    f98a:	b.n	f8ee <_free_r+0x86>
    f98c:	adds	r1, r2, r0
    f98e:	ldr	r1, [r1, #4]
    f990:	lsls	r1, r1, #31
    f992:	bmi.n	fa1e <_free_r+0x1b6>
    f994:	ldr	r1, [r2, #8]
    f996:	ldr	r2, [r2, #12]
    f998:	str	r2, [r1, #12]
    f99a:	add	r3, r0
    f99c:	orr.w	r0, r3, #1
    f9a0:	str	r1, [r2, #8]
    f9a2:	str	r0, [r4, #4]
    f9a4:	str	r3, [r4, r3]
    f9a6:	b.n	f8ee <_free_r+0x86>
    f9a8:	cmp	r2, #20
    f9aa:	bhi.n	f9dc <_free_r+0x174>
    f9ac:	add.w	r7, r2, #92	; 0x5c
    f9b0:	lsls	r7, r7, #1
    f9b2:	add.w	r5, r2, #91	; 0x5b
    f9b6:	b.n	f90c <_free_r+0xa4>
    f9b8:	asrs	r2, r5, #2
    f9ba:	ldr	r3, [r1, #4]
    f9bc:	movs	r5, #1
    f9be:	lsl.w	r2, r5, r2
    f9c2:	orrs	r3, r2
    f9c4:	str	r3, [r1, #4]
    f9c6:	mov	r2, r0
    f9c8:	b.n	f92e <_free_r+0xc6>
    f9ca:	orr.w	r2, r3, #1
    f9ce:	str	r4, [r1, #20]
    f9d0:	str	r4, [r1, #16]
    f9d2:	str	r5, [r4, #12]
    f9d4:	str	r5, [r4, #8]
    f9d6:	str	r2, [r4, #4]
    f9d8:	str	r3, [r4, r3]
    f9da:	b.n	f8ee <_free_r+0x86>
    f9dc:	cmp	r2, #84	; 0x54
    f9de:	bhi.n	f9ee <_free_r+0x186>
    f9e0:	lsrs	r2, r3, #12
    f9e2:	add.w	r7, r2, #111	; 0x6f
    f9e6:	lsls	r7, r7, #1
    f9e8:	add.w	r5, r2, #110	; 0x6e
    f9ec:	b.n	f90c <_free_r+0xa4>
    f9ee:	cmp.w	r2, #340	; 0x154
    f9f2:	bhi.n	fa02 <_free_r+0x19a>
    f9f4:	lsrs	r2, r3, #15
    f9f6:	add.w	r7, r2, #120	; 0x78
    f9fa:	lsls	r7, r7, #1
    f9fc:	add.w	r5, r2, #119	; 0x77
    fa00:	b.n	f90c <_free_r+0xa4>
    fa02:	movw	r0, #1364	; 0x554
    fa06:	cmp	r2, r0
    fa08:	bhi.n	fa18 <_free_r+0x1b0>
    fa0a:	lsrs	r2, r3, #18
    fa0c:	add.w	r7, r2, #125	; 0x7d
    fa10:	lsls	r7, r7, #1
    fa12:	add.w	r5, r2, #124	; 0x7c
    fa16:	b.n	f90c <_free_r+0xa4>
    fa18:	movs	r7, #254	; 0xfe
    fa1a:	movs	r5, #126	; 0x7e
    fa1c:	b.n	f90c <_free_r+0xa4>
    fa1e:	orr.w	r2, r3, #1
    fa22:	str	r2, [r4, #4]
    fa24:	str	r3, [r4, r3]
    fa26:	b.n	f8ee <_free_r+0x86>
    fa28:	.word	0x200019c8
    fa2c:	.word	0x200019d0
    fa30:	.word	0x20001dd4
    fa34:	.word	0x20003dcc

0000fa38 <rshift>:
    fa38:	ldr	r2, [r0, #16]
    fa3a:	asrs	r3, r1, #5
    fa3c:	cmp	r3, r2
    fa3e:	bge.n	fa9e <rshift+0x66>
    fa40:	push	{r4, r5, r6, r7, lr}
    fa42:	ands.w	r1, r1, #31
    fa46:	add.w	r6, r0, #20
    fa4a:	add.w	r2, r6, r2, lsl #2
    fa4e:	add.w	lr, r6, r3, lsl #2
    fa52:	beq.n	faa8 <rshift+0x70>
    fa54:	ldr.w	r3, [r6, r3, lsl #2]
    fa58:	add.w	r5, lr, #4
    fa5c:	cmp	r2, r5
    fa5e:	lsr.w	r4, r3, r1
    fa62:	rsb	ip, r1, #32
    fa66:	bls.n	fadc <rshift+0xa4>
    fa68:	add.w	r7, r0, #16
    fa6c:	ldr	r3, [r5, #0]
    fa6e:	lsl.w	r3, r3, ip
    fa72:	orrs	r3, r4
    fa74:	str.w	r3, [r7, #4]!
    fa78:	ldr.w	r3, [r5], #4
    fa7c:	cmp	r2, r5
    fa7e:	lsr.w	r4, r3, r1
    fa82:	bhi.n	fa6c <rshift+0x34>
    fa84:	rsb	r2, lr, r2
    fa88:	subs	r2, #5
    fa8a:	bic.w	r2, r2, #3
    fa8e:	adds	r2, #4
    fa90:	add	r2, r6
    fa92:	str	r4, [r2, #0]
    fa94:	cbz	r4, fa98 <rshift+0x60>
    fa96:	adds	r2, #4
    fa98:	subs	r3, r2, r6
    fa9a:	asrs	r3, r3, #2
    fa9c:	b.n	facc <rshift+0x94>
    fa9e:	movs	r3, #0
    faa0:	str	r3, [r0, #16]
    faa2:	movs	r3, #0
    faa4:	str	r3, [r0, #20]
    faa6:	bx	lr
    faa8:	cmp	r2, lr
    faaa:	bls.n	fad2 <rshift+0x9a>
    faac:	add.w	r4, r0, #16
    fab0:	mov	r1, lr
    fab2:	ldr.w	r5, [r1], #4
    fab6:	str.w	r5, [r4, #4]!
    faba:	cmp	r2, r1
    fabc:	bhi.n	fab2 <rshift+0x7a>
    fabe:	mvn.w	r3, lr
    fac2:	add	r3, r2
    fac4:	bic.w	r3, r3, #3
    fac8:	adds	r3, #4
    faca:	asrs	r3, r3, #2
    facc:	str	r3, [r0, #16]
    face:	cbz	r3, fad6 <rshift+0x9e>
    fad0:	pop	{r4, r5, r6, r7, pc}
    fad2:	movs	r3, #0
    fad4:	str	r3, [r0, #16]
    fad6:	movs	r3, #0
    fad8:	str	r3, [r0, #20]
    fada:	pop	{r4, r5, r6, r7, pc}
    fadc:	mov	r2, r6
    fade:	b.n	fa92 <rshift+0x5a>

0000fae0 <__gethex>:
    fae0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fae4:	sub	sp, #44	; 0x2c
    fae6:	mov	r9, r1
    fae8:	str	r0, [sp, #20]
    faea:	ldr	r0, [sp, #88]	; 0x58
    faec:	str	r2, [sp, #12]
    faee:	str	r3, [sp, #32]
    faf0:	bl	101bc <__localeconv_l>
    faf4:	ldr	r3, [r0, #0]
    faf6:	str	r3, [sp, #8]
    faf8:	mov	r0, r3
    fafa:	mov	r4, r3
    fafc:	bl	b340 <strlen>
    fb00:	ldr.w	r3, [r9]
    fb04:	str	r0, [sp, #0]
    fb06:	ldrb	r2, [r3, #2]
    fb08:	adds	r1, r4, r0
    fb0a:	cmp	r2, #48	; 0x30
    fb0c:	ldrb.w	fp, [r1, #-1]
    fb10:	bne.w	fe66 <__gethex+0x386>
    fb14:	adds	r3, #3
    fb16:	mov.w	r8, #0
    fb1a:	mov	r4, r3
    fb1c:	ldrb.w	r2, [r3], #1
    fb20:	cmp	r2, #48	; 0x30
    fb22:	add.w	r8, r8, #1
    fb26:	beq.n	fb1a <__gethex+0x3a>
    fb28:	ldr	r6, [pc, #712]	; (fdf4 <__gethex+0x314>)
    fb2a:	ldrb	r3, [r6, r2]
    fb2c:	cmp	r3, #0
    fb2e:	beq.w	fd12 <__gethex+0x232>
    fb32:	ldrb	r3, [r4, #0]
    fb34:	mov.w	sl, #0
    fb38:	ldrb	r3, [r6, r3]
    fb3a:	mov	r5, sl
    fb3c:	mov	r7, r4
    fb3e:	cbz	r3, fb4a <__gethex+0x6a>
    fb40:	ldrb.w	r3, [r7, #1]!
    fb44:	ldrb	r3, [r6, r3]
    fb46:	cmp	r3, #0
    fb48:	bne.n	fb40 <__gethex+0x60>
    fb4a:	ldr	r2, [sp, #0]
    fb4c:	ldr	r1, [sp, #8]
    fb4e:	mov	r0, r7
    fb50:	bl	b41c <strncmp>
    fb54:	cmp	r0, #0
    fb56:	beq.w	fc7e <__gethex+0x19e>
    fb5a:	ldrb	r3, [r7, #0]
    fb5c:	cmp	r5, #0
    fb5e:	beq.w	fe44 <__gethex+0x364>
    fb62:	subs	r5, r5, r7
    fb64:	lsls	r2, r5, #2
    fb66:	str	r2, [sp, #4]
    fb68:	cmp	r3, #80	; 0x50
    fb6a:	beq.w	fc90 <__gethex+0x1b0>
    fb6e:	cmp	r3, #112	; 0x70
    fb70:	beq.w	fc90 <__gethex+0x1b0>
    fb74:	mov	r5, r7
    fb76:	str.w	r7, [r9]
    fb7a:	cmp.w	sl, #0
    fb7e:	bne.w	fcf0 <__gethex+0x210>
    fb82:	subs	r3, r5, r4
    fb84:	subs	r3, #1
    fb86:	cmp	r3, #7
    fb88:	mov	r1, sl
    fb8a:	ble.n	fb96 <__gethex+0xb6>
    fb8c:	asrs	r3, r3, #1
    fb8e:	cmp	r3, #7
    fb90:	add.w	r1, r1, #1
    fb94:	bgt.n	fb8c <__gethex+0xac>
    fb96:	ldr	r0, [sp, #20]
    fb98:	bl	10238 <_Balloc>
    fb9c:	mov	r3, r0
    fb9e:	adds	r3, #20
    fba0:	cmp	r5, r4
    fba2:	str	r0, [sp, #16]
    fba4:	str	r3, [sp, #28]
    fba6:	bls.w	ff50 <__gethex+0x470>
    fbaa:	mov	r9, r3
    fbac:	ldr	r3, [sp, #0]
    fbae:	mov.w	r8, #0
    fbb2:	rsb	r3, r3, #1
    fbb6:	mov	r7, r8
    fbb8:	str	r3, [sp, #24]
    fbba:	b.n	fbdc <__gethex+0xfc>
    fbbc:	cmp	r7, #32
    fbbe:	beq.w	fd00 <__gethex+0x220>
    fbc2:	mov	r2, r7
    fbc4:	adds	r7, #4
    fbc6:	ldrb.w	r3, [r5, #-1]
    fbca:	ldrb	r3, [r6, r3]
    fbcc:	mov	r5, sl
    fbce:	and.w	r3, r3, #15
    fbd2:	lsls	r3, r2
    fbd4:	cmp	r5, r4
    fbd6:	orr.w	r8, r8, r3
    fbda:	bls.n	fc08 <__gethex+0x128>
    fbdc:	ldrb.w	r3, [r5, #-1]
    fbe0:	cmp	r3, fp
    fbe2:	add.w	sl, r5, #4294967295
    fbe6:	bne.n	fbbc <__gethex+0xdc>
    fbe8:	ldr	r3, [sp, #24]
    fbea:	add	r3, sl
    fbec:	cmp	r3, r4
    fbee:	bcc.n	fbbc <__gethex+0xdc>
    fbf0:	mov	r0, r3
    fbf2:	ldr	r2, [sp, #0]
    fbf4:	ldr	r1, [sp, #8]
    fbf6:	str	r3, [sp, #36]	; 0x24
    fbf8:	bl	b41c <strncmp>
    fbfc:	ldr	r3, [sp, #36]	; 0x24
    fbfe:	cmp	r0, #0
    fc00:	bne.n	fbbc <__gethex+0xdc>
    fc02:	mov	r5, r3
    fc04:	cmp	r5, r4
    fc06:	bhi.n	fbdc <__gethex+0xfc>
    fc08:	str.w	r8, [r9], #4
    fc0c:	ldr	r3, [sp, #28]
    fc0e:	ldr	r2, [sp, #16]
    fc10:	rsb	r9, r3, r9
    fc14:	mov.w	r3, r9, asr #2
    fc18:	str	r3, [r2, #16]
    fc1a:	mov	r0, r8
    fc1c:	mov.w	r9, r3, lsl #5
    fc20:	bl	103b0 <__hi0bits>
    fc24:	ldr	r3, [sp, #12]
    fc26:	ldr	r6, [r3, #0]
    fc28:	rsb	r0, r0, r9
    fc2c:	cmp	r0, r6
    fc2e:	bgt.w	fdf8 <__gethex+0x318>
    fc32:	blt.w	fe48 <__gethex+0x368>
    fc36:	movs	r7, #0
    fc38:	ldr	r3, [sp, #12]
    fc3a:	ldr	r2, [sp, #4]
    fc3c:	ldr	r3, [r3, #8]
    fc3e:	cmp	r2, r3
    fc40:	bgt.w	fd72 <__gethex+0x292>
    fc44:	ldr	r0, [sp, #12]
    fc46:	ldr	r1, [sp, #4]
    fc48:	ldr	r3, [r0, #4]
    fc4a:	cmp	r1, r3
    fc4c:	bge.w	fdba <__gethex+0x2da>
    fc50:	subs	r5, r3, r1
    fc52:	cmp	r6, r5
    fc54:	bgt.w	fe76 <__gethex+0x396>
    fc58:	ldr	r2, [r0, #12]
    fc5a:	cmp	r2, #2
    fc5c:	beq.w	ff5e <__gethex+0x47e>
    fc60:	cmp	r2, #3
    fc62:	beq.w	ff1e <__gethex+0x43e>
    fc66:	cmp	r2, #1
    fc68:	beq.w	ff66 <__gethex+0x486>
    fc6c:	ldr	r0, [sp, #20]
    fc6e:	ldr	r1, [sp, #16]
    fc70:	bl	10284 <_Bfree>
    fc74:	ldr	r2, [sp, #80]	; 0x50
    fc76:	movs	r3, #0
    fc78:	str	r3, [r2, #0]
    fc7a:	movs	r0, #80	; 0x50
    fc7c:	b.n	fcfa <__gethex+0x21a>
    fc7e:	cmp	r5, #0
    fc80:	beq.w	feb6 <__gethex+0x3d6>
    fc84:	ldrb	r3, [r7, #0]
    fc86:	b.n	fb62 <__gethex+0x82>
    fc88:	movs	r3, #0
    fc8a:	str	r3, [sp, #4]
    fc8c:	mov.w	sl, #1
    fc90:	ldrb	r3, [r7, #1]
    fc92:	cmp	r3, #43	; 0x2b
    fc94:	beq.w	fdf0 <__gethex+0x310>
    fc98:	cmp	r3, #45	; 0x2d
    fc9a:	beq.n	fd88 <__gethex+0x2a8>
    fc9c:	adds	r1, r7, #1
    fc9e:	movs	r5, #0
    fca0:	ldrb	r3, [r6, r3]
    fca2:	ldr	r0, [pc, #336]	; (fdf4 <__gethex+0x314>)
    fca4:	subs	r2, r3, #1
    fca6:	cmp	r2, #24
    fca8:	bhi.w	fb74 <__gethex+0x94>
    fcac:	ldrb	r2, [r1, #1]
    fcae:	ldrb	r2, [r0, r2]
    fcb0:	subs	r0, r2, #1
    fcb2:	cmp	r0, #24
    fcb4:	sub.w	r3, r3, #16
    fcb8:	add.w	r1, r1, #1
    fcbc:	bhi.n	fcd6 <__gethex+0x1f6>
    fcbe:	ldrb.w	r0, [r1, #1]!
    fcc2:	add.w	r3, r3, r3, lsl #2
    fcc6:	add.w	r3, r2, r3, lsl #1
    fcca:	ldrb	r2, [r6, r0]
    fccc:	subs	r0, r2, #1
    fcce:	cmp	r0, #24
    fcd0:	sub.w	r3, r3, #16
    fcd4:	bls.n	fcbe <__gethex+0x1de>
    fcd6:	cbz	r5, fcda <__gethex+0x1fa>
    fcd8:	negs	r3, r3
    fcda:	ldr	r2, [sp, #4]
    fcdc:	mov	r5, r7
    fcde:	add	r2, r3
    fce0:	mov	r7, r1
    fce2:	str	r2, [sp, #4]
    fce4:	str.w	r7, [r9]
    fce8:	cmp.w	sl, #0
    fcec:	beq.w	fb82 <__gethex+0xa2>
    fcf0:	cmp.w	r8, #0
    fcf4:	ite	eq
    fcf6:	moveq	r0, #6
    fcf8:	movne	r0, #0
    fcfa:	add	sp, #44	; 0x2c
    fcfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd00:	str.w	r8, [r9]
    fd04:	mov.w	r8, #0
    fd08:	add.w	r9, r9, #4
    fd0c:	mov	r2, r8
    fd0e:	movs	r7, #4
    fd10:	b.n	fbc6 <__gethex+0xe6>
    fd12:	ldr	r5, [sp, #0]
    fd14:	ldr	r1, [sp, #8]
    fd16:	mov	r2, r5
    fd18:	mov	r0, r4
    fd1a:	bl	b41c <strncmp>
    fd1e:	cmp	r0, #0
    fd20:	beq.n	fd90 <__gethex+0x2b0>
    fd22:	ldrb	r3, [r4, #0]
    fd24:	mov	r7, r4
    fd26:	cmp	r3, #80	; 0x50
    fd28:	beq.n	fc88 <__gethex+0x1a8>
    fd2a:	cmp	r3, #112	; 0x70
    fd2c:	beq.n	fc88 <__gethex+0x1a8>
    fd2e:	str.w	r7, [r9]
    fd32:	b.n	fcf0 <__gethex+0x210>
    fd34:	ldr	r3, [sp, #16]
    fd36:	ldr	r3, [r3, #8]
    fd38:	cmp	r7, r3
    fd3a:	bge.w	ffa6 <__gethex+0x4c6>
    fd3e:	mov	r3, r7
    fd40:	ldr	r0, [sp, #16]
    fd42:	add.w	r2, r0, r3, lsl #2
    fd46:	movs	r1, #1
    fd48:	adds	r3, #1
    fd4a:	cmp	r4, #2
    fd4c:	str	r3, [r0, #16]
    fd4e:	str	r1, [r2, #20]
    fd50:	beq.w	ff84 <__gethex+0x4a4>
    fd54:	cmp	r7, r3
    fd56:	bge.w	ff10 <__gethex+0x430>
    fd5a:	movs	r1, #1
    fd5c:	ldr	r0, [sp, #16]
    fd5e:	bl	fa38 <rshift>
    fd62:	ldr	r3, [sp, #12]
    fd64:	ldr	r2, [sp, #4]
    fd66:	ldr	r3, [r3, #8]
    fd68:	adds	r2, #1
    fd6a:	cmp	r2, r3
    fd6c:	str	r2, [sp, #4]
    fd6e:	ble.w	ff16 <__gethex+0x436>
    fd72:	ldr	r0, [sp, #20]
    fd74:	ldr	r1, [sp, #16]
    fd76:	bl	10284 <_Bfree>
    fd7a:	ldr	r2, [sp, #80]	; 0x50
    fd7c:	movs	r3, #0
    fd7e:	movs	r0, #163	; 0xa3
    fd80:	str	r3, [r2, #0]
    fd82:	add	sp, #44	; 0x2c
    fd84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd88:	movs	r5, #1
    fd8a:	ldrb	r3, [r7, #2]
    fd8c:	adds	r1, r7, #2
    fd8e:	b.n	fca0 <__gethex+0x1c0>
    fd90:	ldrb	r2, [r4, r5]
    fd92:	ldrb	r3, [r6, r2]
    fd94:	adds	r7, r4, r5
    fd96:	cmp	r3, #0
    fd98:	beq.n	fe6e <__gethex+0x38e>
    fd9a:	cmp	r2, #48	; 0x30
    fd9c:	mov	r4, r7
    fd9e:	bne.n	fdaa <__gethex+0x2ca>
    fda0:	ldrb.w	r3, [r4, #1]!
    fda4:	cmp	r3, #48	; 0x30
    fda6:	beq.n	fda0 <__gethex+0x2c0>
    fda8:	ldrb	r3, [r6, r3]
    fdaa:	clz	sl, r3
    fdae:	mov	r5, r7
    fdb0:	mov.w	sl, sl, lsr #5
    fdb4:	mov.w	r8, #1
    fdb8:	b.n	fb3c <__gethex+0x5c>
    fdba:	movs	r4, #1
    fdbc:	cbz	r7, fdd8 <__gethex+0x2f8>
    fdbe:	ldr	r3, [sp, #12]
    fdc0:	ldr	r3, [r3, #12]
    fdc2:	cmp	r3, #2
    fdc4:	beq.w	fed2 <__gethex+0x3f2>
    fdc8:	cmp	r3, #3
    fdca:	beq.w	feda <__gethex+0x3fa>
    fdce:	cmp	r3, #1
    fdd0:	beq.w	ff3e <__gethex+0x45e>
    fdd4:	orr.w	r4, r4, #16
    fdd8:	ldr	r3, [sp, #80]	; 0x50
    fdda:	mov	r2, r3
    fddc:	ldr	r3, [sp, #16]
    fdde:	str	r3, [r2, #0]
    fde0:	ldr	r3, [sp, #32]
    fde2:	mov	r2, r3
    fde4:	ldr	r3, [sp, #4]
    fde6:	str	r3, [r2, #0]
    fde8:	mov	r0, r4
    fdea:	add	sp, #44	; 0x2c
    fdec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdf0:	movs	r5, #0
    fdf2:	b.n	fd8a <__gethex+0x2aa>
    fdf4:	.word	0x20000650
    fdf8:	subs	r4, r0, r6
    fdfa:	mov	r1, r4
    fdfc:	ldr	r0, [sp, #16]
    fdfe:	bl	10abc <__any_on>
    fe02:	cmp	r0, #0
    fe04:	beq.n	fe72 <__gethex+0x392>
    fe06:	subs	r2, r4, #1
    fe08:	asrs	r1, r2, #5
    fe0a:	ldr	r0, [sp, #28]
    fe0c:	and.w	r3, r2, #31
    fe10:	ldr.w	r1, [r0, r1, lsl #2]
    fe14:	movs	r7, #1
    fe16:	lsl.w	r3, r7, r3
    fe1a:	tst	r3, r1
    fe1c:	beq.n	fe34 <__gethex+0x354>
    fe1e:	cmp	r2, r7
    fe20:	ble.w	ff5a <__gethex+0x47a>
    fe24:	subs	r1, r4, #2
    fe26:	ldr	r0, [sp, #16]
    fe28:	bl	10abc <__any_on>
    fe2c:	cmp	r0, #0
    fe2e:	beq.w	ff5a <__gethex+0x47a>
    fe32:	movs	r7, #3
    fe34:	ldr	r3, [sp, #4]
    fe36:	ldr	r0, [sp, #16]
    fe38:	add	r3, r4
    fe3a:	mov	r1, r4
    fe3c:	str	r3, [sp, #4]
    fe3e:	bl	fa38 <rshift>
    fe42:	b.n	fc38 <__gethex+0x158>
    fe44:	str	r5, [sp, #4]
    fe46:	b.n	fb68 <__gethex+0x88>
    fe48:	subs	r4, r6, r0
    fe4a:	ldr	r1, [sp, #16]
    fe4c:	ldr	r0, [sp, #20]
    fe4e:	mov	r2, r4
    fe50:	bl	10630 <__lshift>
    fe54:	ldr	r3, [sp, #4]
    fe56:	str	r0, [sp, #16]
    fe58:	subs	r3, r3, r4
    fe5a:	str	r3, [sp, #4]
    fe5c:	mov	r3, r0
    fe5e:	adds	r3, #20
    fe60:	str	r3, [sp, #28]
    fe62:	movs	r7, #0
    fe64:	b.n	fc38 <__gethex+0x158>
    fe66:	adds	r4, r3, #2
    fe68:	mov.w	r8, #0
    fe6c:	b.n	fb28 <__gethex+0x48>
    fe6e:	mov	r3, r2
    fe70:	b.n	fd26 <__gethex+0x246>
    fe72:	mov	r7, r0
    fe74:	b.n	fe34 <__gethex+0x354>
    fe76:	subs	r4, r5, #1
    fe78:	cmp	r7, #0
    fe7a:	bne.n	ff1a <__gethex+0x43a>
    fe7c:	cbz	r4, fe88 <__gethex+0x3a8>
    fe7e:	mov	r1, r4
    fe80:	ldr	r0, [sp, #16]
    fe82:	bl	10abc <__any_on>
    fe86:	mov	r7, r0
    fe88:	asrs	r3, r4, #5
    fe8a:	ldr	r2, [sp, #28]
    fe8c:	ldr	r0, [sp, #16]
    fe8e:	ldr.w	r2, [r2, r3, lsl #2]
    fe92:	and.w	r4, r4, #31
    fe96:	movs	r3, #1
    fe98:	lsl.w	r4, r3, r4
    fe9c:	tst	r4, r2
    fe9e:	mov	r1, r5
    fea0:	it	ne
    fea2:	orrne.w	r7, r7, #2
    fea6:	bl	fa38 <rshift>
    feaa:	ldr	r3, [sp, #12]
    feac:	ldr	r3, [r3, #4]
    feae:	str	r3, [sp, #4]
    feb0:	subs	r6, r6, r5
    feb2:	movs	r4, #2
    feb4:	b.n	fdbc <__gethex+0x2dc>
    feb6:	ldr	r1, [sp, #0]
    feb8:	ldrb	r3, [r7, r1]
    feba:	ldrb	r2, [r6, r3]
    febc:	adds	r5, r7, r1
    febe:	mov	r7, r5
    fec0:	cmp	r2, #0
    fec2:	beq.w	fb62 <__gethex+0x82>
    fec6:	ldrb.w	r3, [r7, #1]!
    feca:	ldrb	r2, [r6, r3]
    fecc:	cmp	r2, #0
    fece:	bne.n	fec6 <__gethex+0x3e6>
    fed0:	b.n	fb62 <__gethex+0x82>
    fed2:	ldr	r3, [sp, #84]	; 0x54
    fed4:	rsb	r3, r3, #1
    fed8:	str	r3, [sp, #84]	; 0x54
    feda:	ldr	r3, [sp, #84]	; 0x54
    fedc:	cmp	r3, #0
    fede:	beq.w	fdd4 <__gethex+0x2f4>
    fee2:	ldr	r3, [sp, #16]
    fee4:	ldr	r5, [sp, #28]
    fee6:	ldr	r7, [r3, #16]
    fee8:	mov.w	r8, r7, lsl #2
    feec:	add.w	r0, r5, r8
    fef0:	mov	r3, r5
    fef2:	movs	r1, #0
    fef4:	b.n	ff00 <__gethex+0x420>
    fef6:	str.w	r1, [r3], #4
    fefa:	cmp	r0, r3
    fefc:	bls.w	fd34 <__gethex+0x254>
    ff00:	ldr	r2, [r3, #0]
    ff02:	cmp.w	r2, #4294967295
    ff06:	beq.n	fef6 <__gethex+0x416>
    ff08:	adds	r2, #1
    ff0a:	cmp	r4, #2
    ff0c:	str	r2, [r3, #0]
    ff0e:	beq.n	ff84 <__gethex+0x4a4>
    ff10:	ands.w	r6, r6, #31
    ff14:	bne.n	ff92 <__gethex+0x4b2>
    ff16:	movs	r4, #33	; 0x21
    ff18:	b.n	fdd8 <__gethex+0x2f8>
    ff1a:	movs	r7, #1
    ff1c:	b.n	fe88 <__gethex+0x3a8>
    ff1e:	ldr	r2, [sp, #84]	; 0x54
    ff20:	cmp	r2, #0
    ff22:	beq.w	fc6c <__gethex+0x18c>
    ff26:	ldr	r1, [sp, #32]
    ff28:	str	r3, [r1, #0]
    ff2a:	ldr	r3, [sp, #28]
    ff2c:	ldr	r1, [sp, #16]
    ff2e:	movs	r2, #1
    ff30:	str	r2, [r1, #16]
    ff32:	str	r2, [r3, #0]
    ff34:	ldr	r3, [sp, #80]	; 0x50
    ff36:	mov	r2, r3
    ff38:	movs	r0, #98	; 0x62
    ff3a:	str	r1, [r2, #0]
    ff3c:	b.n	fcfa <__gethex+0x21a>
    ff3e:	lsls	r2, r7, #30
    ff40:	bpl.w	fdd4 <__gethex+0x2f4>
    ff44:	ldr	r3, [sp, #28]
    ff46:	ldr	r3, [r3, #0]
    ff48:	orrs	r3, r7
    ff4a:	lsls	r3, r3, #31
    ff4c:	bmi.n	fee2 <__gethex+0x402>
    ff4e:	b.n	fdd4 <__gethex+0x2f4>
    ff50:	ldr.w	r9, [sp, #28]
    ff54:	mov.w	r8, #0
    ff58:	b.n	fc08 <__gethex+0x128>
    ff5a:	movs	r7, #2
    ff5c:	b.n	fe34 <__gethex+0x354>
    ff5e:	ldr	r2, [sp, #84]	; 0x54
    ff60:	cmp	r2, #0
    ff62:	beq.n	ff26 <__gethex+0x446>
    ff64:	b.n	fc6c <__gethex+0x18c>
    ff66:	cmp	r6, r5
    ff68:	bne.w	fc6c <__gethex+0x18c>
    ff6c:	cmp	r6, #1
    ff6e:	ble.n	ff26 <__gethex+0x446>
    ff70:	subs	r1, r6, #1
    ff72:	ldr	r0, [sp, #16]
    ff74:	bl	10abc <__any_on>
    ff78:	cmp	r0, #0
    ff7a:	beq.w	fc6c <__gethex+0x18c>
    ff7e:	ldr	r3, [sp, #12]
    ff80:	ldr	r3, [r3, #4]
    ff82:	b.n	ff26 <__gethex+0x446>
    ff84:	ldr	r3, [sp, #12]
    ff86:	ldr	r3, [r3, #0]
    ff88:	subs	r3, #1
    ff8a:	cmp	r6, r3
    ff8c:	beq.n	ffd8 <__gethex+0x4f8>
    ff8e:	movs	r4, #34	; 0x22
    ff90:	b.n	fdd8 <__gethex+0x2f8>
    ff92:	add	r5, r8
    ff94:	rsb	r6, r6, #32
    ff98:	ldr.w	r0, [r5, #-4]
    ff9c:	bl	103b0 <__hi0bits>
    ffa0:	cmp	r0, r6
    ffa2:	bge.n	ff16 <__gethex+0x436>
    ffa4:	b.n	fd5a <__gethex+0x27a>
    ffa6:	ldr	r3, [sp, #16]
    ffa8:	ldr.w	r9, [sp, #20]
    ffac:	ldr	r1, [r3, #4]
    ffae:	mov	r0, r9
    ffb0:	adds	r1, #1
    ffb2:	bl	10238 <_Balloc>
    ffb6:	ldr	r1, [sp, #16]
    ffb8:	ldr	r3, [r1, #16]
    ffba:	adds	r2, r3, #2
    ffbc:	mov	r5, r0
    ffbe:	lsls	r2, r2, #2
    ffc0:	adds	r1, #12
    ffc2:	adds	r0, #12
    ffc4:	bl	87a4 <memcpy>
    ffc8:	ldr	r1, [sp, #16]
    ffca:	mov	r0, r9
    ffcc:	bl	10284 <_Bfree>
    ffd0:	str	r5, [sp, #16]
    ffd2:	ldr	r3, [r5, #16]
    ffd4:	adds	r5, #20
    ffd6:	b.n	fd40 <__gethex+0x260>
    ffd8:	asrs	r3, r6, #5
    ffda:	and.w	r6, r6, #31
    ffde:	ldr.w	r2, [r5, r3, lsl #2]
    ffe2:	movs	r3, #1
    ffe4:	lsls	r3, r6
    ffe6:	tst	r3, r2
    ffe8:	ite	ne
    ffea:	movne	r4, #33	; 0x21
    ffec:	moveq	r4, #34	; 0x22
    ffee:	b.n	fdd8 <__gethex+0x2f8>

0000fff0 <__match>:
    fff0:	push	{r4, r5}
    fff2:	ldr	r4, [r0, #0]
    fff4:	b.n	10008 <__match+0x18>
    fff6:	ldrb.w	r3, [r4, #1]!
    fffa:	sub.w	r5, r3, #65	; 0x41
    fffe:	cmp	r5, #25
   10000:	it	ls
   10002:	addls	r3, #32
   10004:	cmp	r3, r2
   10006:	bne.n	1001a <__match+0x2a>
   10008:	ldrb.w	r2, [r1], #1
   1000c:	cmp	r2, #0
   1000e:	bne.n	fff6 <__match+0x6>
   10010:	adds	r4, #1
   10012:	str	r4, [r0, #0]
   10014:	movs	r0, #1
   10016:	pop	{r4, r5}
   10018:	bx	lr
   1001a:	movs	r0, #0
   1001c:	pop	{r4, r5}
   1001e:	bx	lr

00010020 <__hexnan>:
   10020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10024:	ldr	r3, [r1, #0]
   10026:	ldr.w	r9, [pc, #372]	; 1019c <__hexnan+0x17c>
   1002a:	sub	sp, #20
   1002c:	asrs	r1, r3, #5
   1002e:	add.w	r1, r2, r1, lsl #2
   10032:	ands.w	r3, r3, #31
   10036:	str	r1, [sp, #4]
   10038:	itt	ne
   1003a:	addne	r1, #4
   1003c:	strne	r1, [sp, #4]
   1003e:	ldr	r4, [sp, #4]
   10040:	str	r0, [sp, #8]
   10042:	str	r3, [sp, #12]
   10044:	movs	r3, #0
   10046:	mov	r1, r3
   10048:	str.w	r3, [r4, #-4]
   1004c:	mov	sl, r3
   1004e:	mov	lr, r3
   10050:	ldr	r3, [sp, #8]
   10052:	sub.w	ip, r4, #4
   10056:	ldr	r5, [r3, #0]
   10058:	mov	r8, ip
   1005a:	mov	r0, ip
   1005c:	ldrb.w	r3, [r5, #1]!
   10060:	cbz	r3, 100ac <__hexnan+0x8c>
   10062:	ldrb.w	r4, [r9, r3]
   10066:	cmp	r4, #0
   10068:	bne.n	100f2 <__hexnan+0xd2>
   1006a:	cmp	r3, #32
   1006c:	bhi.n	1012a <__hexnan+0x10a>
   1006e:	cmp	lr, sl
   10070:	ble.n	1005c <__hexnan+0x3c>
   10072:	cmp	r0, r8
   10074:	bcs.n	1009e <__hexnan+0x7e>
   10076:	cmp	r1, #7
   10078:	bgt.n	1009e <__hexnan+0x7e>
   1007a:	rsb	r1, r1, #8
   1007e:	lsls	r1, r1, #2
   10080:	ldr	r6, [r0, #0]
   10082:	rsb	fp, r1, #32
   10086:	mov	r3, r0
   10088:	ldr	r7, [r3, #4]
   1008a:	lsl.w	r4, r7, fp
   1008e:	orrs	r4, r6
   10090:	lsr.w	r6, r7, r1
   10094:	str	r4, [r3, #0]
   10096:	str.w	r6, [r3, #4]!
   1009a:	cmp	r8, r3
   1009c:	bhi.n	10088 <__hexnan+0x68>
   1009e:	cmp	r0, r2
   100a0:	bhi.n	10118 <__hexnan+0xf8>
   100a2:	ldrb.w	r3, [r5, #1]!
   100a6:	movs	r1, #8
   100a8:	cmp	r3, #0
   100aa:	bne.n	10062 <__hexnan+0x42>
   100ac:	cmp.w	lr, #0
   100b0:	beq.n	1012e <__hexnan+0x10e>
   100b2:	cmp	r0, r8
   100b4:	bcs.n	100ba <__hexnan+0x9a>
   100b6:	cmp	r1, #7
   100b8:	ble.n	10174 <__hexnan+0x154>
   100ba:	cmp	r0, r2
   100bc:	bls.n	10136 <__hexnan+0x116>
   100be:	mov	r3, r2
   100c0:	ldr.w	r1, [r0], #4
   100c4:	str.w	r1, [r3], #4
   100c8:	cmp	ip, r0
   100ca:	bcs.n	100c0 <__hexnan+0xa0>
   100cc:	movs	r1, #0
   100ce:	str.w	r1, [r3], #4
   100d2:	cmp	ip, r3
   100d4:	bcs.n	100ce <__hexnan+0xae>
   100d6:	ldr	r3, [sp, #4]
   100d8:	ldr.w	r3, [r3, #-4]
   100dc:	cbnz	r3, 100ea <__hexnan+0xca>
   100de:	cmp	r2, ip
   100e0:	beq.n	10158 <__hexnan+0x138>
   100e2:	ldr.w	r3, [ip, #-4]!
   100e6:	cmp	r3, #0
   100e8:	beq.n	100de <__hexnan+0xbe>
   100ea:	movs	r0, #5
   100ec:	add	sp, #20
   100ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100f2:	adds	r1, #1
   100f4:	cmp	r1, #8
   100f6:	add.w	lr, lr, #1
   100fa:	ble.n	1010a <__hexnan+0xea>
   100fc:	cmp	r0, r2
   100fe:	bls.n	1005c <__hexnan+0x3c>
   10100:	movs	r3, #0
   10102:	str.w	r3, [r0, #-4]
   10106:	movs	r1, #1
   10108:	subs	r0, #4
   1010a:	ldr	r3, [r0, #0]
   1010c:	and.w	r4, r4, #15
   10110:	orr.w	r4, r4, r3, lsl #4
   10114:	str	r4, [r0, #0]
   10116:	b.n	1005c <__hexnan+0x3c>
   10118:	movs	r3, #0
   1011a:	sub.w	r8, r0, #4
   1011e:	str.w	r3, [r0, #-4]
   10122:	mov	sl, lr
   10124:	mov	r0, r8
   10126:	mov	r1, r3
   10128:	b.n	1005c <__hexnan+0x3c>
   1012a:	cmp	r3, #41	; 0x29
   1012c:	beq.n	10166 <__hexnan+0x146>
   1012e:	movs	r0, #4
   10130:	add	sp, #20
   10132:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10136:	ldr	r3, [sp, #12]
   10138:	cmp	r3, #0
   1013a:	beq.n	100d6 <__hexnan+0xb6>
   1013c:	ldr	r4, [sp, #4]
   1013e:	ldr	r3, [sp, #12]
   10140:	ldr.w	r1, [r4, #-4]
   10144:	rsb	r3, r3, #32
   10148:	mov.w	r0, #4294967295
   1014c:	lsr.w	r3, r0, r3
   10150:	ands	r3, r1
   10152:	str.w	r3, [r4, #-4]
   10156:	b.n	100dc <__hexnan+0xbc>
   10158:	movs	r3, #1
   1015a:	movs	r0, #5
   1015c:	str.w	r3, [ip]
   10160:	add	sp, #20
   10162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10166:	ldr	r3, [sp, #8]
   10168:	adds	r5, #1
   1016a:	str	r5, [r3, #0]
   1016c:	cmp.w	lr, #0
   10170:	bne.n	100b2 <__hexnan+0x92>
   10172:	b.n	1012e <__hexnan+0x10e>
   10174:	rsb	r3, r1, #8
   10178:	lsls	r3, r3, #2
   1017a:	ldr	r5, [r0, #0]
   1017c:	rsb	r7, r3, #32
   10180:	mov	r1, r0
   10182:	ldr	r6, [r1, #4]
   10184:	lsl.w	r4, r6, r7
   10188:	orrs	r4, r5
   1018a:	lsr.w	r5, r6, r3
   1018e:	str	r4, [r1, #0]
   10190:	str.w	r5, [r1, #4]!
   10194:	cmp	r8, r1
   10196:	bhi.n	10182 <__hexnan+0x162>
   10198:	b.n	100ba <__hexnan+0x9a>
   1019a:	nop
   1019c:	.word	0x20000650

000101a0 <iswspace>:
   101a0:	cmp	r0, #255	; 0xff
   101a2:	bls.n	101a8 <iswspace+0x8>
   101a4:	movs	r0, #0
   101a6:	bx	lr
   101a8:	push	{r4, lr}
   101aa:	mov	r4, r0
   101ac:	bl	a6e8 <__locale_ctype_ptr>
   101b0:	add	r0, r4
   101b2:	ldrb	r0, [r0, #1]
   101b4:	and.w	r0, r0, #8
   101b8:	uxtb	r0, r0
   101ba:	pop	{r4, pc}

000101bc <__localeconv_l>:
   101bc:	adds	r0, #240	; 0xf0
   101be:	bx	lr

000101c0 <_localeconv_r>:
   101c0:	ldr	r2, [pc, #16]	; (101d4 <_localeconv_r+0x14>)
   101c2:	ldr	r3, [pc, #20]	; (101d8 <_localeconv_r+0x18>)
   101c4:	ldr	r2, [r2, #0]
   101c6:	ldr	r0, [r2, #52]	; 0x34
   101c8:	cmp	r0, #0
   101ca:	it	eq
   101cc:	moveq	r0, r3
   101ce:	adds	r0, #240	; 0xf0
   101d0:	bx	lr
   101d2:	nop
   101d4:	.word	0x20001dd8
   101d8:	.word	0x2000185c

000101dc <_mbrtowc_r>:
   101dc:	push	{r4, r5, r6, r7, lr}
   101de:	sub	sp, #12
   101e0:	mov	r7, r0
   101e2:	ldr	r5, [sp, #32]
   101e4:	cbz	r2, 1020c <_mbrtowc_r+0x30>
   101e6:	ldr	r4, [pc, #68]	; (1022c <_mbrtowc_r+0x50>)
   101e8:	ldr	r6, [pc, #68]	; (10230 <_mbrtowc_r+0x54>)
   101ea:	ldr	r4, [r4, #0]
   101ec:	ldr	r4, [r4, #52]	; 0x34
   101ee:	str	r5, [sp, #0]
   101f0:	cmp	r4, #0
   101f2:	it	eq
   101f4:	moveq	r4, r6
   101f6:	ldr.w	r4, [r4, #228]	; 0xe4
   101fa:	blx	r4
   101fc:	adds	r3, r0, #1
   101fe:	bne.n	10208 <_mbrtowc_r+0x2c>
   10200:	movs	r2, #0
   10202:	movs	r3, #138	; 0x8a
   10204:	str	r2, [r5, #0]
   10206:	str	r3, [r7, #0]
   10208:	add	sp, #12
   1020a:	pop	{r4, r5, r6, r7, pc}
   1020c:	ldr	r3, [pc, #28]	; (1022c <_mbrtowc_r+0x50>)
   1020e:	ldr	r1, [pc, #32]	; (10230 <_mbrtowc_r+0x54>)
   10210:	ldr	r3, [r3, #0]
   10212:	ldr	r3, [r3, #52]	; 0x34
   10214:	str	r5, [sp, #0]
   10216:	cmp	r3, #0
   10218:	it	eq
   1021a:	moveq	r3, r1
   1021c:	mov	r4, r2
   1021e:	mov	r1, r4
   10220:	ldr	r2, [pc, #16]	; (10234 <_mbrtowc_r+0x58>)
   10222:	ldr.w	r4, [r3, #228]	; 0xe4
   10226:	movs	r3, #1
   10228:	blx	r4
   1022a:	b.n	101fc <_mbrtowc_r+0x20>
   1022c:	.word	0x20001dd8
   10230:	.word	0x2000185c
   10234:	.word	0x20000b80

00010238 <_Balloc>:
   10238:	ldr	r3, [r0, #76]	; 0x4c
   1023a:	push	{r4, r5, r6, lr}
   1023c:	mov	r5, r0
   1023e:	mov	r4, r1
   10240:	cbz	r3, 10256 <_Balloc+0x1e>
   10242:	ldr.w	r0, [r3, r4, lsl #2]
   10246:	cbz	r0, 1026a <_Balloc+0x32>
   10248:	ldr	r2, [r0, #0]
   1024a:	str.w	r2, [r3, r4, lsl #2]
   1024e:	movs	r3, #0
   10250:	str	r3, [r0, #16]
   10252:	str	r3, [r0, #12]
   10254:	pop	{r4, r5, r6, pc}
   10256:	movs	r2, #33	; 0x21
   10258:	movs	r1, #4
   1025a:	bl	11424 <_calloc_r>
   1025e:	str	r0, [r5, #76]	; 0x4c
   10260:	mov	r3, r0
   10262:	cmp	r0, #0
   10264:	bne.n	10242 <_Balloc+0xa>
   10266:	movs	r0, #0
   10268:	pop	{r4, r5, r6, pc}
   1026a:	movs	r1, #1
   1026c:	lsl.w	r6, r1, r4
   10270:	adds	r2, r6, #5
   10272:	mov	r0, r5
   10274:	lsls	r2, r2, #2
   10276:	bl	11424 <_calloc_r>
   1027a:	cmp	r0, #0
   1027c:	beq.n	10266 <_Balloc+0x2e>
   1027e:	str	r4, [r0, #4]
   10280:	str	r6, [r0, #8]
   10282:	b.n	1024e <_Balloc+0x16>

00010284 <_Bfree>:
   10284:	cbz	r1, 10294 <_Bfree+0x10>
   10286:	ldr	r3, [r0, #76]	; 0x4c
   10288:	ldr	r2, [r1, #4]
   1028a:	ldr.w	r0, [r3, r2, lsl #2]
   1028e:	str	r0, [r1, #0]
   10290:	str.w	r1, [r3, r2, lsl #2]
   10294:	bx	lr
   10296:	nop

00010298 <__multadd>:
   10298:	push	{r4, r5, r6, r7, lr}
   1029a:	ldr	r4, [r1, #16]
   1029c:	sub	sp, #12
   1029e:	mov	r5, r1
   102a0:	mov	r6, r0
   102a2:	add.w	lr, r1, #20
   102a6:	movs	r7, #0
   102a8:	ldr.w	r0, [lr]
   102ac:	uxth	r1, r0
   102ae:	mla	r1, r2, r1, r3
   102b2:	lsrs	r3, r1, #16
   102b4:	lsrs	r0, r0, #16
   102b6:	mla	r3, r2, r0, r3
   102ba:	uxth	r1, r1
   102bc:	adds	r7, #1
   102be:	add.w	r1, r1, r3, lsl #16
   102c2:	cmp	r4, r7
   102c4:	str.w	r1, [lr], #4
   102c8:	mov.w	r3, r3, lsr #16
   102cc:	bgt.n	102a8 <__multadd+0x10>
   102ce:	cbz	r3, 102e0 <__multadd+0x48>
   102d0:	ldr	r2, [r5, #8]
   102d2:	cmp	r4, r2
   102d4:	bge.n	102e6 <__multadd+0x4e>
   102d6:	add.w	r2, r5, r4, lsl #2
   102da:	adds	r4, #1
   102dc:	str	r3, [r2, #20]
   102de:	str	r4, [r5, #16]
   102e0:	mov	r0, r5
   102e2:	add	sp, #12
   102e4:	pop	{r4, r5, r6, r7, pc}
   102e6:	ldr	r1, [r5, #4]
   102e8:	str	r3, [sp, #4]
   102ea:	adds	r1, #1
   102ec:	mov	r0, r6
   102ee:	bl	10238 <_Balloc>
   102f2:	ldr	r2, [r5, #16]
   102f4:	adds	r2, #2
   102f6:	add.w	r1, r5, #12
   102fa:	mov	r7, r0
   102fc:	lsls	r2, r2, #2
   102fe:	adds	r0, #12
   10300:	bl	87a4 <memcpy>
   10304:	ldr	r2, [r6, #76]	; 0x4c
   10306:	ldr	r1, [r5, #4]
   10308:	ldr	r3, [sp, #4]
   1030a:	ldr.w	r0, [r2, r1, lsl #2]
   1030e:	str	r0, [r5, #0]
   10310:	str.w	r5, [r2, r1, lsl #2]
   10314:	mov	r5, r7
   10316:	b.n	102d6 <__multadd+0x3e>

00010318 <__s2b>:
   10318:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1031c:	ldr	r4, [pc, #140]	; (103ac <__s2b+0x94>)
   1031e:	ldr	r5, [sp, #32]
   10320:	mov	r7, r3
   10322:	adds	r3, #8
   10324:	smull	r4, lr, r4, r3
   10328:	asrs	r3, r3, #31
   1032a:	rsb	lr, r3, lr, asr #1
   1032e:	cmp.w	lr, #1
   10332:	mov	r6, r0
   10334:	mov	r4, r1
   10336:	mov	r8, r2
   10338:	ble.n	103a6 <__s2b+0x8e>
   1033a:	movs	r3, #1
   1033c:	movs	r1, #0
   1033e:	lsls	r3, r3, #1
   10340:	cmp	lr, r3
   10342:	add.w	r1, r1, #1
   10346:	bgt.n	1033e <__s2b+0x26>
   10348:	mov	r0, r6
   1034a:	bl	10238 <_Balloc>
   1034e:	movs	r3, #1
   10350:	cmp.w	r8, #9
   10354:	str	r5, [r0, #20]
   10356:	str	r3, [r0, #16]
   10358:	ble.n	1039e <__s2b+0x86>
   1035a:	add.w	r9, r4, #9
   1035e:	mov	r5, r9
   10360:	add	r4, r8
   10362:	ldrb.w	r3, [r5], #1
   10366:	mov	r1, r0
   10368:	subs	r3, #48	; 0x30
   1036a:	movs	r2, #10
   1036c:	mov	r0, r6
   1036e:	bl	10298 <__multadd>
   10372:	cmp	r5, r4
   10374:	bne.n	10362 <__s2b+0x4a>
   10376:	add.w	r4, r9, r8
   1037a:	subs	r4, #8
   1037c:	cmp	r7, r8
   1037e:	ble.n	1039a <__s2b+0x82>
   10380:	rsb	r7, r8, r7
   10384:	add	r7, r4
   10386:	ldrb.w	r3, [r4], #1
   1038a:	mov	r1, r0
   1038c:	subs	r3, #48	; 0x30
   1038e:	movs	r2, #10
   10390:	mov	r0, r6
   10392:	bl	10298 <__multadd>
   10396:	cmp	r7, r4
   10398:	bne.n	10386 <__s2b+0x6e>
   1039a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1039e:	adds	r4, #10
   103a0:	mov.w	r8, #9
   103a4:	b.n	1037c <__s2b+0x64>
   103a6:	movs	r1, #0
   103a8:	b.n	10348 <__s2b+0x30>
   103aa:	nop
   103ac:	.word	0x38e38e39

000103b0 <__hi0bits>:
   103b0:	lsrs	r3, r0, #16
   103b2:	lsls	r3, r3, #16
   103b4:	cbnz	r3, 103e4 <__hi0bits+0x34>
   103b6:	lsls	r0, r0, #16
   103b8:	movs	r3, #16
   103ba:	tst.w	r0, #4278190080	; 0xff000000
   103be:	itt	eq
   103c0:	lsleq	r0, r0, #8
   103c2:	addeq	r3, #8
   103c4:	tst.w	r0, #4026531840	; 0xf0000000
   103c8:	itt	eq
   103ca:	lsleq	r0, r0, #4
   103cc:	addeq	r3, #4
   103ce:	tst.w	r0, #3221225472	; 0xc0000000
   103d2:	itt	eq
   103d4:	lsleq	r0, r0, #2
   103d6:	addeq	r3, #2
   103d8:	cmp	r0, #0
   103da:	blt.n	103ec <__hi0bits+0x3c>
   103dc:	lsls	r2, r0, #1
   103de:	bmi.n	103e8 <__hi0bits+0x38>
   103e0:	movs	r0, #32
   103e2:	bx	lr
   103e4:	movs	r3, #0
   103e6:	b.n	103ba <__hi0bits+0xa>
   103e8:	adds	r0, r3, #1
   103ea:	bx	lr
   103ec:	mov	r0, r3
   103ee:	bx	lr

000103f0 <__lo0bits>:
   103f0:	ldr	r3, [r0, #0]
   103f2:	ands.w	r2, r3, #7
   103f6:	beq.n	10408 <__lo0bits+0x18>
   103f8:	lsls	r1, r3, #31
   103fa:	bmi.n	1043e <__lo0bits+0x4e>
   103fc:	lsls	r2, r3, #30
   103fe:	bmi.n	10442 <__lo0bits+0x52>
   10400:	lsrs	r3, r3, #2
   10402:	str	r3, [r0, #0]
   10404:	movs	r0, #2
   10406:	bx	lr
   10408:	uxth	r1, r3
   1040a:	cbnz	r1, 10410 <__lo0bits+0x20>
   1040c:	lsrs	r3, r3, #16
   1040e:	movs	r2, #16
   10410:	tst.w	r3, #255	; 0xff
   10414:	itt	eq
   10416:	lsreq	r3, r3, #8
   10418:	addeq	r2, #8
   1041a:	lsls	r1, r3, #28
   1041c:	itt	eq
   1041e:	lsreq	r3, r3, #4
   10420:	addeq	r2, #4
   10422:	lsls	r1, r3, #30
   10424:	itt	eq
   10426:	lsreq	r3, r3, #2
   10428:	addeq	r2, #2
   1042a:	lsls	r1, r3, #31
   1042c:	bmi.n	10438 <__lo0bits+0x48>
   1042e:	lsrs	r3, r3, #1
   10430:	bne.n	10436 <__lo0bits+0x46>
   10432:	movs	r0, #32
   10434:	bx	lr
   10436:	adds	r2, #1
   10438:	str	r3, [r0, #0]
   1043a:	mov	r0, r2
   1043c:	bx	lr
   1043e:	movs	r0, #0
   10440:	bx	lr
   10442:	lsrs	r3, r3, #1
   10444:	str	r3, [r0, #0]
   10446:	movs	r0, #1
   10448:	bx	lr
   1044a:	nop

0001044c <__i2b>:
   1044c:	push	{r4, lr}
   1044e:	mov	r4, r1
   10450:	movs	r1, #1
   10452:	bl	10238 <_Balloc>
   10456:	movs	r2, #1
   10458:	str	r4, [r0, #20]
   1045a:	str	r2, [r0, #16]
   1045c:	pop	{r4, pc}
   1045e:	nop

00010460 <__multiply>:
   10460:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10464:	ldr	r5, [r1, #16]
   10466:	ldr	r7, [r2, #16]
   10468:	cmp	r5, r7
   1046a:	sub	sp, #12
   1046c:	mov	r4, r1
   1046e:	mov	r6, r2
   10470:	bge.n	1047c <__multiply+0x1c>
   10472:	mov	r2, r5
   10474:	mov	r4, r6
   10476:	mov	r5, r7
   10478:	mov	r6, r1
   1047a:	mov	r7, r2
   1047c:	ldr	r3, [r4, #8]
   1047e:	ldr	r1, [r4, #4]
   10480:	add.w	r8, r5, r7
   10484:	cmp	r8, r3
   10486:	it	gt
   10488:	addgt	r1, #1
   1048a:	bl	10238 <_Balloc>
   1048e:	add.w	ip, r0, #20
   10492:	add.w	r9, ip, r8, lsl #2
   10496:	cmp	ip, r9
   10498:	str	r0, [sp, #0]
   1049a:	bcs.n	104a8 <__multiply+0x48>
   1049c:	mov	r3, ip
   1049e:	movs	r1, #0
   104a0:	str.w	r1, [r3], #4
   104a4:	cmp	r9, r3
   104a6:	bhi.n	104a0 <__multiply+0x40>
   104a8:	add.w	r2, r6, #20
   104ac:	add.w	sl, r2, r7, lsl #2
   104b0:	add.w	r3, r4, #20
   104b4:	cmp	r2, sl
   104b6:	add.w	lr, r3, r5, lsl #2
   104ba:	bcs.n	10566 <__multiply+0x106>
   104bc:	str.w	r9, [sp, #4]
   104c0:	mov	r9, r3
   104c2:	ldr.w	r3, [r2], #4
   104c6:	uxth.w	fp, r3
   104ca:	cmp.w	fp, #0
   104ce:	beq.n	10512 <__multiply+0xb2>
   104d0:	movs	r0, #0
   104d2:	mov	r7, r9
   104d4:	mov	r6, ip
   104d6:	mov	r5, r0
   104d8:	b.n	104dc <__multiply+0x7c>
   104da:	mov	r6, r3
   104dc:	ldr.w	r4, [r7], #4
   104e0:	ldr	r0, [r6, #0]
   104e2:	uxth	r1, r4
   104e4:	uxth	r3, r0
   104e6:	mla	r1, fp, r1, r3
   104ea:	lsrs	r4, r4, #16
   104ec:	lsrs	r0, r0, #16
   104ee:	adds	r3, r1, r5
   104f0:	mla	r0, fp, r4, r0
   104f4:	add.w	r0, r0, r3, lsr #16
   104f8:	uxth	r1, r3
   104fa:	mov	r3, r6
   104fc:	orr.w	r1, r1, r0, lsl #16
   10500:	cmp	lr, r7
   10502:	mov.w	r5, r0, lsr #16
   10506:	str.w	r1, [r3], #4
   1050a:	bhi.n	104da <__multiply+0x7a>
   1050c:	str	r5, [r6, #4]
   1050e:	ldr.w	r3, [r2, #-4]
   10512:	movs.w	fp, r3, lsr #16
   10516:	beq.n	1055a <__multiply+0xfa>
   10518:	ldr.w	r3, [ip]
   1051c:	mov	r7, ip
   1051e:	mov	r0, r3
   10520:	mov	r5, r9
   10522:	movs	r1, #0
   10524:	b.n	10528 <__multiply+0xc8>
   10526:	mov	r7, r6
   10528:	ldrh	r4, [r5, #0]
   1052a:	lsrs	r0, r0, #16
   1052c:	mla	r0, fp, r4, r0
   10530:	add	r1, r0
   10532:	uxth	r4, r3
   10534:	mov	r6, r7
   10536:	orr.w	r3, r4, r1, lsl #16
   1053a:	str.w	r3, [r6], #4
   1053e:	ldr	r0, [r7, #4]
   10540:	ldr.w	r4, [r5], #4
   10544:	uxth	r3, r0
   10546:	lsrs	r4, r4, #16
   10548:	mla	r4, fp, r4, r3
   1054c:	add.w	r3, r4, r1, lsr #16
   10550:	cmp	lr, r5
   10552:	mov.w	r1, r3, lsr #16
   10556:	bhi.n	10526 <__multiply+0xc6>
   10558:	str	r3, [r7, #4]
   1055a:	cmp	sl, r2
   1055c:	add.w	ip, ip, #4
   10560:	bhi.n	104c2 <__multiply+0x62>
   10562:	ldr.w	r9, [sp, #4]
   10566:	cmp.w	r8, #0
   1056a:	ble.n	10584 <__multiply+0x124>
   1056c:	ldr.w	r3, [r9, #-4]
   10570:	sub.w	r9, r9, #4
   10574:	cbz	r3, 1057e <__multiply+0x11e>
   10576:	b.n	10584 <__multiply+0x124>
   10578:	ldr.w	r3, [r9, #-4]!
   1057c:	cbnz	r3, 10584 <__multiply+0x124>
   1057e:	subs.w	r8, r8, #1
   10582:	bne.n	10578 <__multiply+0x118>
   10584:	ldr	r0, [sp, #0]
   10586:	str.w	r8, [r0, #16]
   1058a:	add	sp, #12
   1058c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010590 <__pow5mult>:
   10590:	ands.w	r3, r2, #3
   10594:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10598:	mov	r4, r2
   1059a:	mov	r7, r0
   1059c:	bne.n	105fc <__pow5mult+0x6c>
   1059e:	mov	r6, r1
   105a0:	asrs	r4, r4, #2
   105a2:	beq.n	105de <__pow5mult+0x4e>
   105a4:	ldr	r5, [r7, #72]	; 0x48
   105a6:	cbz	r5, 1060e <__pow5mult+0x7e>
   105a8:	lsls	r3, r4, #31
   105aa:	mov.w	r8, #0
   105ae:	bmi.n	105be <__pow5mult+0x2e>
   105b0:	asrs	r4, r4, #1
   105b2:	beq.n	105de <__pow5mult+0x4e>
   105b4:	ldr	r0, [r5, #0]
   105b6:	cbz	r0, 105e4 <__pow5mult+0x54>
   105b8:	mov	r5, r0
   105ba:	lsls	r3, r4, #31
   105bc:	bpl.n	105b0 <__pow5mult+0x20>
   105be:	mov	r2, r5
   105c0:	mov	r1, r6
   105c2:	mov	r0, r7
   105c4:	bl	10460 <__multiply>
   105c8:	cbz	r6, 105f8 <__pow5mult+0x68>
   105ca:	ldr	r2, [r6, #4]
   105cc:	ldr	r3, [r7, #76]	; 0x4c
   105ce:	asrs	r4, r4, #1
   105d0:	ldr.w	r1, [r3, r2, lsl #2]
   105d4:	str	r1, [r6, #0]
   105d6:	str.w	r6, [r3, r2, lsl #2]
   105da:	mov	r6, r0
   105dc:	bne.n	105b4 <__pow5mult+0x24>
   105de:	mov	r0, r6
   105e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105e4:	mov	r2, r5
   105e6:	mov	r1, r5
   105e8:	mov	r0, r7
   105ea:	bl	10460 <__multiply>
   105ee:	str	r0, [r5, #0]
   105f0:	str.w	r8, [r0]
   105f4:	mov	r5, r0
   105f6:	b.n	105ba <__pow5mult+0x2a>
   105f8:	mov	r6, r0
   105fa:	b.n	105b0 <__pow5mult+0x20>
   105fc:	subs	r2, r3, #1
   105fe:	ldr	r5, [pc, #44]	; (1062c <__pow5mult+0x9c>)
   10600:	movs	r3, #0
   10602:	ldr.w	r2, [r5, r2, lsl #2]
   10606:	bl	10298 <__multadd>
   1060a:	mov	r6, r0
   1060c:	b.n	105a0 <__pow5mult+0x10>
   1060e:	movs	r1, #1
   10610:	mov	r0, r7
   10612:	bl	10238 <_Balloc>
   10616:	movw	r1, #625	; 0x271
   1061a:	movs	r2, #1
   1061c:	movs	r3, #0
   1061e:	str	r1, [r0, #20]
   10620:	str	r2, [r0, #16]
   10622:	mov	r5, r0
   10624:	str	r0, [r7, #72]	; 0x48
   10626:	str	r3, [r0, #0]
   10628:	b.n	105a8 <__pow5mult+0x18>
   1062a:	nop
   1062c:	.word	0x20000b34

00010630 <__lshift>:
   10630:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10634:	mov	r9, r2
   10636:	ldr	r2, [r1, #16]
   10638:	ldr	r3, [r1, #8]
   1063a:	mov.w	r4, r9, asr #5
   1063e:	add.w	r8, r4, r2
   10642:	add.w	r5, r8, #1
   10646:	cmp	r5, r3
   10648:	mov	r6, r1
   1064a:	mov	sl, r0
   1064c:	ldr	r1, [r1, #4]
   1064e:	ble.n	1065a <__lshift+0x2a>
   10650:	lsls	r3, r3, #1
   10652:	cmp	r5, r3
   10654:	add.w	r1, r1, #1
   10658:	bgt.n	10650 <__lshift+0x20>
   1065a:	mov	r0, sl
   1065c:	bl	10238 <_Balloc>
   10660:	cmp	r4, #0
   10662:	add.w	r2, r0, #20
   10666:	ble.n	106da <__lshift+0xaa>
   10668:	add.w	r3, r2, r4, lsl #2
   1066c:	movs	r1, #0
   1066e:	str.w	r1, [r2], #4
   10672:	cmp	r3, r2
   10674:	bne.n	1066e <__lshift+0x3e>
   10676:	ldr	r4, [r6, #16]
   10678:	add.w	r1, r6, #20
   1067c:	ands.w	r9, r9, #31
   10680:	add.w	lr, r1, r4, lsl #2
   10684:	beq.n	106ca <__lshift+0x9a>
   10686:	rsb	r2, r9, #32
   1068a:	movs	r4, #0
   1068c:	ldr	r7, [r1, #0]
   1068e:	lsl.w	ip, r7, r9
   10692:	orr.w	r4, ip, r4
   10696:	mov	ip, r3
   10698:	str.w	r4, [r3], #4
   1069c:	ldr.w	r4, [r1], #4
   106a0:	cmp	lr, r1
   106a2:	lsr.w	r4, r4, r2
   106a6:	bhi.n	1068c <__lshift+0x5c>
   106a8:	str.w	r4, [ip, #4]
   106ac:	cbz	r4, 106b2 <__lshift+0x82>
   106ae:	add.w	r5, r8, #2
   106b2:	ldr.w	r3, [sl, #76]	; 0x4c
   106b6:	ldr	r2, [r6, #4]
   106b8:	subs	r5, #1
   106ba:	ldr.w	r1, [r3, r2, lsl #2]
   106be:	str	r5, [r0, #16]
   106c0:	str	r1, [r6, #0]
   106c2:	str.w	r6, [r3, r2, lsl #2]
   106c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106ca:	subs	r3, #4
   106cc:	ldr.w	r2, [r1], #4
   106d0:	str.w	r2, [r3, #4]!
   106d4:	cmp	lr, r1
   106d6:	bhi.n	106cc <__lshift+0x9c>
   106d8:	b.n	106b2 <__lshift+0x82>
   106da:	mov	r3, r2
   106dc:	b.n	10676 <__lshift+0x46>
   106de:	nop

000106e0 <__mcmp>:
   106e0:	ldr	r2, [r0, #16]
   106e2:	ldr	r3, [r1, #16]
   106e4:	subs	r2, r2, r3
   106e6:	bne.n	10710 <__mcmp+0x30>
   106e8:	lsls	r3, r3, #2
   106ea:	adds	r0, #20
   106ec:	adds	r1, #20
   106ee:	add	r1, r3
   106f0:	push	{r4}
   106f2:	add	r3, r0
   106f4:	b.n	106fa <__mcmp+0x1a>
   106f6:	cmp	r0, r3
   106f8:	bcs.n	10714 <__mcmp+0x34>
   106fa:	ldr.w	r4, [r3, #-4]!
   106fe:	ldr.w	r2, [r1, #-4]!
   10702:	cmp	r4, r2
   10704:	beq.n	106f6 <__mcmp+0x16>
   10706:	bcc.n	1071c <__mcmp+0x3c>
   10708:	movs	r0, #1
   1070a:	ldr.w	r4, [sp], #4
   1070e:	bx	lr
   10710:	mov	r0, r2
   10712:	bx	lr
   10714:	movs	r0, #0
   10716:	ldr.w	r4, [sp], #4
   1071a:	bx	lr
   1071c:	mov.w	r0, #4294967295
   10720:	b.n	1070a <__mcmp+0x2a>
   10722:	nop

00010724 <__mdiff>:
   10724:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10728:	ldr	r3, [r1, #16]
   1072a:	mov	r7, r1
   1072c:	ldr	r1, [r2, #16]
   1072e:	subs	r3, r3, r1
   10730:	cmp	r3, #0
   10732:	mov	r8, r2
   10734:	bne.n	10766 <__mdiff+0x42>
   10736:	lsls	r1, r1, #2
   10738:	add.w	r2, r7, #20
   1073c:	add.w	r5, r8, #20
   10740:	adds	r3, r2, r1
   10742:	add	r1, r5
   10744:	b.n	1074a <__mdiff+0x26>
   10746:	cmp	r2, r3
   10748:	bcs.n	10808 <__mdiff+0xe4>
   1074a:	ldr.w	r6, [r3, #-4]!
   1074e:	ldr.w	r4, [r1, #-4]!
   10752:	cmp	r6, r4
   10754:	beq.n	10746 <__mdiff+0x22>
   10756:	bcs.n	1081a <__mdiff+0xf6>
   10758:	mov	r3, r7
   1075a:	mov	r4, r2
   1075c:	mov	r7, r8
   1075e:	mov.w	r9, #1
   10762:	mov	r8, r3
   10764:	b.n	10774 <__mdiff+0x50>
   10766:	blt.n	10824 <__mdiff+0x100>
   10768:	add.w	r5, r7, #20
   1076c:	add.w	r4, r2, #20
   10770:	mov.w	r9, #0
   10774:	ldr	r1, [r7, #4]
   10776:	bl	10238 <_Balloc>
   1077a:	ldr.w	r3, [r8, #16]
   1077e:	ldr	r6, [r7, #16]
   10780:	str.w	r9, [r0, #12]
   10784:	add.w	ip, r4, r3, lsl #2
   10788:	mov	lr, r4
   1078a:	add.w	r7, r5, r6, lsl #2
   1078e:	add.w	r4, r0, #20
   10792:	movs	r3, #0
   10794:	ldr.w	r1, [lr], #4
   10798:	ldr.w	r8, [r5], #4
   1079c:	uxth	r2, r1
   1079e:	uxtah	r3, r3, r8
   107a2:	lsrs	r1, r1, #16
   107a4:	subs	r2, r3, r2
   107a6:	rsb	r3, r1, r8, lsr #16
   107aa:	add.w	r3, r3, r2, asr #16
   107ae:	uxth	r2, r2
   107b0:	orr.w	r2, r2, r3, lsl #16
   107b4:	cmp	ip, lr
   107b6:	str.w	r2, [r4], #4
   107ba:	mov.w	r3, r3, asr #16
   107be:	bhi.n	10794 <__mdiff+0x70>
   107c0:	cmp	r7, r5
   107c2:	bls.n	107f4 <__mdiff+0xd0>
   107c4:	mov	ip, r4
   107c6:	mov	r1, r5
   107c8:	ldr.w	lr, [r1], #4
   107cc:	uxtah	r2, r3, lr
   107d0:	asrs	r3, r2, #16
   107d2:	add.w	r3, r3, lr, lsr #16
   107d6:	uxth	r2, r2
   107d8:	orr.w	r2, r2, r3, lsl #16
   107dc:	cmp	r7, r1
   107de:	str.w	r2, [ip], #4
   107e2:	mov.w	r3, r3, asr #16
   107e6:	bhi.n	107c8 <__mdiff+0xa4>
   107e8:	mvns	r5, r5
   107ea:	add	r5, r7
   107ec:	bic.w	r5, r5, #3
   107f0:	adds	r5, #4
   107f2:	add	r4, r5
   107f4:	subs	r4, #4
   107f6:	cbnz	r2, 10802 <__mdiff+0xde>
   107f8:	ldr.w	r3, [r4, #-4]!
   107fc:	subs	r6, #1
   107fe:	cmp	r3, #0
   10800:	beq.n	107f8 <__mdiff+0xd4>
   10802:	str	r6, [r0, #16]
   10804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10808:	movs	r1, #0
   1080a:	bl	10238 <_Balloc>
   1080e:	movs	r2, #1
   10810:	movs	r3, #0
   10812:	str	r2, [r0, #16]
   10814:	str	r3, [r0, #20]
   10816:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1081a:	mov	r4, r5
   1081c:	mov.w	r9, #0
   10820:	mov	r5, r2
   10822:	b.n	10774 <__mdiff+0x50>
   10824:	mov	r3, r7
   10826:	add.w	r4, r7, #20
   1082a:	add.w	r5, r8, #20
   1082e:	mov	r7, r8
   10830:	mov.w	r9, #1
   10834:	mov	r8, r3
   10836:	b.n	10774 <__mdiff+0x50>

00010838 <__ulp>:
   10838:	ldr	r3, [pc, #76]	; (10888 <__ulp+0x50>)
   1083a:	vmov	r2, s1
   1083e:	ands	r2, r3
   10840:	sub.w	r3, r2, #54525952	; 0x3400000
   10844:	cmp	r3, #0
   10846:	ble.n	10852 <__ulp+0x1a>
   10848:	movs	r0, #0
   1084a:	mov	r1, r3
   1084c:	vmov	d0, r0, r1
   10850:	bx	lr
   10852:	negs	r3, r3
   10854:	asrs	r3, r3, #20
   10856:	cmp	r3, #19
   10858:	ble.n	10876 <__ulp+0x3e>
   1085a:	subs	r3, #20
   1085c:	cmp	r3, #30
   1085e:	ittte	le
   10860:	rsble	r3, r3, #31
   10864:	movle	r2, #1
   10866:	lslle.w	r3, r2, r3
   1086a:	movgt	r3, #1
   1086c:	movs	r1, #0
   1086e:	mov	r0, r3
   10870:	vmov	d0, r0, r1
   10874:	bx	lr
   10876:	mov.w	r2, #524288	; 0x80000
   1087a:	movs	r0, #0
   1087c:	asr.w	r1, r2, r3
   10880:	vmov	d0, r0, r1
   10884:	bx	lr
   10886:	nop
   10888:	.word	0x7ff00000

0001088c <__b2d>:
   1088c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10890:	ldr	r6, [r0, #16]
   10892:	add.w	r8, r0, #20
   10896:	add.w	r6, r8, r6, lsl #2
   1089a:	ldr.w	r7, [r6, #-4]
   1089e:	mov	r0, r7
   108a0:	bl	103b0 <__hi0bits>
   108a4:	rsb	r3, r0, #32
   108a8:	cmp	r0, #10
   108aa:	str	r3, [r1, #0]
   108ac:	sub.w	r3, r6, #4
   108b0:	bgt.n	108e4 <__b2d+0x58>
   108b2:	cmp	r8, r3
   108b4:	rsb	r2, r0, #11
   108b8:	it	cc
   108ba:	ldrcc.w	r3, [r6, #-8]
   108be:	lsr.w	r1, r7, r2
   108c2:	add.w	r0, r0, #21
   108c6:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   108ca:	ite	cc
   108cc:	lsrcc	r3, r2
   108ce:	movcs	r3, #0
   108d0:	lsl.w	r0, r7, r0
   108d4:	orr.w	r5, r5, #3145728	; 0x300000
   108d8:	orr.w	r4, r0, r3
   108dc:	vmov	d0, r4, r5
   108e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108e4:	cmp	r8, r3
   108e6:	bcs.n	1092a <__b2d+0x9e>
   108e8:	subs.w	r3, r0, #11
   108ec:	ldr.w	r2, [r6, #-8]
   108f0:	beq.n	10930 <__b2d+0xa4>
   108f2:	lsl.w	r0, r7, r3
   108f6:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   108fa:	rsb	lr, r3, #32
   108fe:	sub.w	r1, r6, #8
   10902:	orr.w	r7, r7, #3145728	; 0x300000
   10906:	lsr.w	r0, r2, lr
   1090a:	cmp	r8, r1
   1090c:	orr.w	r5, r7, r0
   10910:	bcs.n	10954 <__b2d+0xc8>
   10912:	ldr.w	r1, [r6, #-12]
   10916:	lsl.w	r0, r2, r3
   1091a:	lsr.w	r3, r1, lr
   1091e:	orrs	r0, r3
   10920:	mov	r4, r0
   10922:	vmov	d0, r4, r5
   10926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1092a:	subs	r0, #11
   1092c:	bne.n	10942 <__b2d+0xb6>
   1092e:	mov	r2, r0
   10930:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   10934:	orr.w	r5, r5, #3145728	; 0x300000
   10938:	mov	r4, r2
   1093a:	vmov	d0, r4, r5
   1093e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10942:	lsl.w	r0, r7, r0
   10946:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   1094a:	movs	r0, #0
   1094c:	orr.w	r5, r5, #3145728	; 0x300000
   10950:	mov	r4, r0
   10952:	b.n	10922 <__b2d+0x96>
   10954:	lsl.w	r0, r2, r3
   10958:	mov	r4, r0
   1095a:	b.n	10922 <__b2d+0x96>

0001095c <__d2b>:
   1095c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10960:	vmov	r6, r7, d0
   10964:	sub	sp, #12
   10966:	mov	r8, r1
   10968:	movs	r1, #1
   1096a:	mov	r4, r7
   1096c:	ubfx	r5, r7, #20, #11
   10970:	mov	r7, r2
   10972:	bl	10238 <_Balloc>
   10976:	ubfx	r4, r4, #0, #20
   1097a:	mov	r9, r0
   1097c:	cbz	r5, 10982 <__d2b+0x26>
   1097e:	orr.w	r4, r4, #1048576	; 0x100000
   10982:	str	r4, [sp, #4]
   10984:	cbz	r6, 109ce <__d2b+0x72>
   10986:	add	r0, sp, #8
   10988:	str.w	r6, [r0, #-8]!
   1098c:	bl	103f0 <__lo0bits>
   10990:	cmp	r0, #0
   10992:	bne.n	109fe <__d2b+0xa2>
   10994:	ldmia.w	sp, {r2, r3}
   10998:	str.w	r2, [r9, #20]
   1099c:	cmp	r3, #0
   1099e:	ite	eq
   109a0:	moveq	r1, #1
   109a2:	movne	r1, #2
   109a4:	str.w	r3, [r9, #24]
   109a8:	str.w	r1, [r9, #16]
   109ac:	cbnz	r5, 109e6 <__d2b+0x8a>
   109ae:	add.w	r3, r9, r1, lsl #2
   109b2:	subw	r0, r0, #1074	; 0x432
   109b6:	str.w	r0, [r8]
   109ba:	ldr	r0, [r3, #16]
   109bc:	bl	103b0 <__hi0bits>
   109c0:	rsb	r0, r0, r1, lsl #5
   109c4:	str	r0, [r7, #0]
   109c6:	mov	r0, r9
   109c8:	add	sp, #12
   109ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109ce:	add	r0, sp, #4
   109d0:	bl	103f0 <__lo0bits>
   109d4:	ldr	r3, [sp, #4]
   109d6:	str.w	r3, [r9, #20]
   109da:	movs	r1, #1
   109dc:	adds	r0, #32
   109de:	str.w	r1, [r9, #16]
   109e2:	cmp	r5, #0
   109e4:	beq.n	109ae <__d2b+0x52>
   109e6:	subw	r5, r5, #1075	; 0x433
   109ea:	add	r5, r0
   109ec:	rsb	r0, r0, #53	; 0x35
   109f0:	str.w	r5, [r8]
   109f4:	str	r0, [r7, #0]
   109f6:	mov	r0, r9
   109f8:	add	sp, #12
   109fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109fe:	ldmia.w	sp, {r2, r3}
   10a02:	rsb	r1, r0, #32
   10a06:	lsl.w	r1, r3, r1
   10a0a:	orrs	r2, r1
   10a0c:	lsrs	r3, r0
   10a0e:	str	r3, [sp, #4]
   10a10:	str.w	r2, [r9, #20]
   10a14:	b.n	1099c <__d2b+0x40>
   10a16:	nop

00010a18 <__ratio>:
   10a18:	push	{r4, r5, lr}
   10a1a:	sub	sp, #28
   10a1c:	mov	r4, r1
   10a1e:	add	r1, sp, #16
   10a20:	mov	r5, r0
   10a22:	bl	1088c <__b2d>
   10a26:	mov	r0, r4
   10a28:	add	r1, sp, #20
   10a2a:	vstr	d0, [sp]
   10a2e:	bl	1088c <__b2d>
   10a32:	ldr	r0, [r4, #16]
   10a34:	ldr	r1, [r5, #16]
   10a36:	ldr	r3, [sp, #20]
   10a38:	ldr	r2, [sp, #16]
   10a3a:	subs	r1, r1, r0
   10a3c:	subs	r2, r2, r3
   10a3e:	add.w	r3, r2, r1, lsl #5
   10a42:	vstr	d0, [sp, #8]
   10a46:	cmp	r3, #0
   10a48:	ldrd	r0, r1, [sp]
   10a4c:	ldrd	r4, r5, [sp, #8]
   10a50:	ble.n	10a6a <__ratio+0x52>
   10a52:	add.w	r1, r1, r3, lsl #20
   10a56:	strd	r0, r1, [sp]
   10a5a:	vldr	d7, [sp]
   10a5e:	vldr	d6, [sp, #8]
   10a62:	vdiv.f64	d0, d7, d6
   10a66:	add	sp, #28
   10a68:	pop	{r4, r5, pc}
   10a6a:	sub.w	r5, r5, r3, lsl #20
   10a6e:	strd	r4, r5, [sp, #8]
   10a72:	b.n	10a5a <__ratio+0x42>

00010a74 <__copybits>:
   10a74:	push	{r4, r5, r6}
   10a76:	ldr	r4, [r2, #16]
   10a78:	add.w	r3, r2, #20
   10a7c:	subs	r1, #1
   10a7e:	asrs	r6, r1, #5
   10a80:	add.w	r4, r3, r4, lsl #2
   10a84:	adds	r6, #1
   10a86:	cmp	r3, r4
   10a88:	add.w	r6, r0, r6, lsl #2
   10a8c:	bcs.n	10aa8 <__copybits+0x34>
   10a8e:	subs	r1, r0, #4
   10a90:	ldr.w	r5, [r3], #4
   10a94:	str.w	r5, [r1, #4]!
   10a98:	cmp	r4, r3
   10a9a:	bhi.n	10a90 <__copybits+0x1c>
   10a9c:	subs	r3, r4, r2
   10a9e:	subs	r3, #21
   10aa0:	bic.w	r3, r3, #3
   10aa4:	adds	r3, #4
   10aa6:	add	r0, r3
   10aa8:	cmp	r6, r0
   10aaa:	bls.n	10ab6 <__copybits+0x42>
   10aac:	movs	r3, #0
   10aae:	str.w	r3, [r0], #4
   10ab2:	cmp	r6, r0
   10ab4:	bhi.n	10aae <__copybits+0x3a>
   10ab6:	pop	{r4, r5, r6}
   10ab8:	bx	lr
   10aba:	nop

00010abc <__any_on>:
   10abc:	ldr	r3, [r0, #16]
   10abe:	asrs	r2, r1, #5
   10ac0:	cmp	r3, r2
   10ac2:	push	{r4}
   10ac4:	add.w	r4, r0, #20
   10ac8:	bge.n	10aec <__any_on+0x30>
   10aca:	add.w	r3, r4, r3, lsl #2
   10ace:	cmp	r4, r3
   10ad0:	bcs.n	10b16 <__any_on+0x5a>
   10ad2:	ldr.w	r0, [r3, #-4]
   10ad6:	subs	r3, #4
   10ad8:	cbz	r0, 10ae2 <__any_on+0x26>
   10ada:	b.n	10b08 <__any_on+0x4c>
   10adc:	ldr.w	r2, [r3, #-4]!
   10ae0:	cbnz	r2, 10b08 <__any_on+0x4c>
   10ae2:	cmp	r4, r3
   10ae4:	bcc.n	10adc <__any_on+0x20>
   10ae6:	ldr.w	r4, [sp], #4
   10aea:	bx	lr
   10aec:	ble.n	10b10 <__any_on+0x54>
   10aee:	ands.w	r1, r1, #31
   10af2:	beq.n	10b10 <__any_on+0x54>
   10af4:	ldr.w	r0, [r4, r2, lsl #2]
   10af8:	lsr.w	r3, r0, r1
   10afc:	lsl.w	r1, r3, r1
   10b00:	cmp	r0, r1
   10b02:	add.w	r3, r4, r2, lsl #2
   10b06:	beq.n	10ace <__any_on+0x12>
   10b08:	movs	r0, #1
   10b0a:	ldr.w	r4, [sp], #4
   10b0e:	bx	lr
   10b10:	add.w	r3, r4, r2, lsl #2
   10b14:	b.n	10ace <__any_on+0x12>
   10b16:	movs	r0, #0
   10b18:	b.n	10ae6 <__any_on+0x2a>
   10b1a:	nop

00010b1c <__sccl>:
   10b1c:	push	{r4, r5, r6}
   10b1e:	ldrb	r5, [r1, #0]
   10b20:	cmp	r5, #94	; 0x5e
   10b22:	beq.n	10b84 <__sccl+0x68>
   10b24:	movs	r2, #0
   10b26:	adds	r1, #1
   10b28:	mov	r6, r2
   10b2a:	subs	r3, r0, #1
   10b2c:	add.w	r4, r0, #255	; 0xff
   10b30:	strb.w	r2, [r3, #1]!
   10b34:	cmp	r3, r4
   10b36:	bne.n	10b30 <__sccl+0x14>
   10b38:	cbz	r5, 10b5c <__sccl+0x40>
   10b3a:	eor.w	r2, r6, #1
   10b3e:	strb	r2, [r0, r5]
   10b40:	adds	r4, r1, #1
   10b42:	ldrb.w	r3, [r4, #-1]
   10b46:	cmp	r3, #45	; 0x2d
   10b48:	beq.n	10b68 <__sccl+0x4c>
   10b4a:	cmp	r3, #93	; 0x5d
   10b4c:	beq.n	10b62 <__sccl+0x46>
   10b4e:	cbz	r3, 10b56 <__sccl+0x3a>
   10b50:	mov	r5, r3
   10b52:	mov	r1, r4
   10b54:	b.n	10b3e <__sccl+0x22>
   10b56:	mov	r0, r1
   10b58:	pop	{r4, r5, r6}
   10b5a:	bx	lr
   10b5c:	subs	r0, r1, #1
   10b5e:	pop	{r4, r5, r6}
   10b60:	bx	lr
   10b62:	mov	r0, r4
   10b64:	pop	{r4, r5, r6}
   10b66:	bx	lr
   10b68:	ldrb	r6, [r1, #1]
   10b6a:	cmp	r6, #93	; 0x5d
   10b6c:	beq.n	10b50 <__sccl+0x34>
   10b6e:	cmp	r5, r6
   10b70:	bgt.n	10b50 <__sccl+0x34>
   10b72:	adds	r1, #2
   10b74:	adds	r3, r0, r5
   10b76:	adds	r5, #1
   10b78:	cmp	r6, r5
   10b7a:	strb.w	r2, [r3, #1]!
   10b7e:	bgt.n	10b76 <__sccl+0x5a>
   10b80:	adds	r4, #2
   10b82:	b.n	10b42 <__sccl+0x26>
   10b84:	movs	r2, #1
   10b86:	ldrb	r5, [r1, #1]
   10b88:	mov	r6, r2
   10b8a:	adds	r1, #2
   10b8c:	b.n	10b2a <__sccl+0xe>
   10b8e:	nop

00010b90 <nanf>:
   10b90:	vldr	s0, [pc, #4]	; 10b98 <nanf+0x8>
   10b94:	bx	lr
   10b96:	nop
   10b98:	.word	0x7fc00000

00010b9c <_strtoll_l.isra.0>:
   10b9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ba0:	sub	sp, #20
   10ba2:	mov	sl, r3
   10ba4:	str	r1, [sp, #8]
   10ba6:	str	r0, [sp, #12]
   10ba8:	str	r2, [sp, #4]
   10baa:	mov	r7, r1
   10bac:	ldr	r6, [sp, #56]	; 0x38
   10bae:	b.n	10bb2 <_strtoll_l.isra.0+0x16>
   10bb0:	mov	r7, r5
   10bb2:	mov	r5, r7
   10bb4:	mov	r0, r6
   10bb6:	ldrb.w	r4, [r5], #1
   10bba:	bl	a6e0 <__locale_ctype_ptr_l>
   10bbe:	add	r0, r4
   10bc0:	ldrb	r3, [r0, #1]
   10bc2:	and.w	r3, r3, #8
   10bc6:	and.w	r2, r3, #255	; 0xff
   10bca:	cmp	r3, #0
   10bcc:	bne.n	10bb0 <_strtoll_l.isra.0+0x14>
   10bce:	cmp	r4, #45	; 0x2d
   10bd0:	beq.w	10cda <_strtoll_l.isra.0+0x13e>
   10bd4:	cmp	r4, #43	; 0x2b
   10bd6:	it	eq
   10bd8:	ldrbeq	r4, [r7, #1]
   10bda:	str	r2, [sp, #0]
   10bdc:	it	eq
   10bde:	addeq	r5, r7, #2
   10be0:	cmp.w	sl, #0
   10be4:	beq.n	10c00 <_strtoll_l.isra.0+0x64>
   10be6:	cmp.w	sl, #16
   10bea:	beq.w	10d18 <_strtoll_l.isra.0+0x17c>
   10bee:	ldr	r3, [sp, #0]
   10bf0:	mov	r6, sl
   10bf2:	asrs	r7, r6, #31
   10bf4:	cbnz	r3, 10c12 <_strtoll_l.isra.0+0x76>
   10bf6:	mov.w	r8, #4294967295
   10bfa:	mvn.w	r9, #2147483648	; 0x80000000
   10bfe:	b.n	10c1a <_strtoll_l.isra.0+0x7e>
   10c00:	cmp	r4, #48	; 0x30
   10c02:	beq.n	10d04 <_strtoll_l.isra.0+0x168>
   10c04:	movs	r6, #10
   10c06:	movs	r7, #0
   10c08:	mov.w	sl, #10
   10c0c:	ldr	r3, [sp, #0]
   10c0e:	cmp	r3, #0
   10c10:	beq.n	10bf6 <_strtoll_l.isra.0+0x5a>
   10c12:	mov.w	r8, #0
   10c16:	mov.w	r9, #2147483648	; 0x80000000
   10c1a:	mov	r2, r6
   10c1c:	mov	r3, r7
   10c1e:	mov	r0, r8
   10c20:	mov	r1, r9
   10c22:	bl	a32c <__aeabi_uldivmod>
   10c26:	mov	r3, r7
   10c28:	mov	fp, r2
   10c2a:	mov	r0, r8
   10c2c:	mov	r2, r6
   10c2e:	mov	r1, r9
   10c30:	bl	a32c <__aeabi_uldivmod>
   10c34:	mov.w	lr, #0
   10c38:	movs	r2, #0
   10c3a:	movs	r3, #0
   10c3c:	b.n	10c5e <_strtoll_l.isra.0+0xc2>
   10c3e:	beq.n	10ccc <_strtoll_l.isra.0+0x130>
   10c40:	mul.w	r4, r2, r7
   10c44:	mla	r4, r6, r3, r4
   10c48:	umull	r2, r3, r2, r6
   10c4c:	add	r3, r4
   10c4e:	adds.w	r2, r2, ip
   10c52:	adc.w	r3, r3, ip, asr #31
   10c56:	mov.w	lr, #1
   10c5a:	ldrb.w	r4, [r5], #1
   10c5e:	sub.w	ip, r4, #48	; 0x30
   10c62:	cmp.w	ip, #9
   10c66:	bls.n	10c76 <_strtoll_l.isra.0+0xda>
   10c68:	sub.w	ip, r4, #65	; 0x41
   10c6c:	cmp.w	ip, #25
   10c70:	bhi.n	10c8e <_strtoll_l.isra.0+0xf2>
   10c72:	sub.w	ip, r4, #55	; 0x37
   10c76:	cmp	sl, ip
   10c78:	ble.n	10ca0 <_strtoll_l.isra.0+0x104>
   10c7a:	cmp.w	lr, #4294967295
   10c7e:	beq.n	10c5a <_strtoll_l.isra.0+0xbe>
   10c80:	cmp	r1, r3
   10c82:	it	eq
   10c84:	cmpeq	r0, r2
   10c86:	bcs.n	10c3e <_strtoll_l.isra.0+0xa2>
   10c88:	mov.w	lr, #4294967295
   10c8c:	b.n	10c5a <_strtoll_l.isra.0+0xbe>
   10c8e:	sub.w	ip, r4, #97	; 0x61
   10c92:	cmp.w	ip, #25
   10c96:	bhi.n	10ca0 <_strtoll_l.isra.0+0x104>
   10c98:	sub.w	ip, r4, #87	; 0x57
   10c9c:	cmp	sl, ip
   10c9e:	bgt.n	10c7a <_strtoll_l.isra.0+0xde>
   10ca0:	cmp.w	lr, #4294967295
   10ca4:	beq.n	10ce4 <_strtoll_l.isra.0+0x148>
   10ca6:	ldr	r1, [sp, #0]
   10ca8:	cbz	r1, 10cb0 <_strtoll_l.isra.0+0x114>
   10caa:	negs	r2, r2
   10cac:	sbc.w	r3, r3, r3, lsl #1
   10cb0:	ldr	r1, [sp, #4]
   10cb2:	cmp	r1, #0
   10cb4:	beq.n	10d3c <_strtoll_l.isra.0+0x1a0>
   10cb6:	cmp.w	lr, #0
   10cba:	bne.n	10cfc <_strtoll_l.isra.0+0x160>
   10cbc:	ldr	r5, [sp, #8]
   10cbe:	mov	r0, r2
   10cc0:	mov	r1, r3
   10cc2:	ldr	r3, [sp, #4]
   10cc4:	str	r5, [r3, #0]
   10cc6:	add	sp, #20
   10cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ccc:	cmp	fp, ip
   10cce:	bge.n	10c40 <_strtoll_l.isra.0+0xa4>
   10cd0:	mov	r2, r0
   10cd2:	mov	r3, r1
   10cd4:	mov.w	lr, #4294967295
   10cd8:	b.n	10c5a <_strtoll_l.isra.0+0xbe>
   10cda:	movs	r3, #1
   10cdc:	adds	r5, r7, #2
   10cde:	ldrb	r4, [r7, #1]
   10ce0:	str	r3, [sp, #0]
   10ce2:	b.n	10be0 <_strtoll_l.isra.0+0x44>
   10ce4:	ldr	r3, [sp, #0]
   10ce6:	cbnz	r3, 10d34 <_strtoll_l.isra.0+0x198>
   10ce8:	mov.w	r0, #4294967295
   10cec:	mvn.w	r1, #2147483648	; 0x80000000
   10cf0:	ldr	r2, [sp, #12]
   10cf2:	movs	r3, #34	; 0x22
   10cf4:	str	r3, [r2, #0]
   10cf6:	ldr	r3, [sp, #4]
   10cf8:	cbnz	r3, 10d00 <_strtoll_l.isra.0+0x164>
   10cfa:	b.n	10cc6 <_strtoll_l.isra.0+0x12a>
   10cfc:	mov	r0, r2
   10cfe:	mov	r1, r3
   10d00:	subs	r5, #1
   10d02:	b.n	10cc2 <_strtoll_l.isra.0+0x126>
   10d04:	ldrb	r3, [r5, #0]
   10d06:	and.w	r3, r3, #223	; 0xdf
   10d0a:	cmp	r3, #88	; 0x58
   10d0c:	beq.n	10d26 <_strtoll_l.isra.0+0x18a>
   10d0e:	movs	r6, #8
   10d10:	movs	r7, #0
   10d12:	mov.w	sl, #8
   10d16:	b.n	10c0c <_strtoll_l.isra.0+0x70>
   10d18:	cmp	r4, #48	; 0x30
   10d1a:	bne.n	10d42 <_strtoll_l.isra.0+0x1a6>
   10d1c:	ldrb	r3, [r5, #0]
   10d1e:	and.w	r3, r3, #223	; 0xdf
   10d22:	cmp	r3, #88	; 0x58
   10d24:	bne.n	10d42 <_strtoll_l.isra.0+0x1a6>
   10d26:	ldrb	r4, [r5, #1]
   10d28:	movs	r6, #16
   10d2a:	movs	r7, #0
   10d2c:	adds	r5, #2
   10d2e:	mov.w	sl, #16
   10d32:	b.n	10c0c <_strtoll_l.isra.0+0x70>
   10d34:	movs	r0, #0
   10d36:	mov.w	r1, #2147483648	; 0x80000000
   10d3a:	b.n	10cf0 <_strtoll_l.isra.0+0x154>
   10d3c:	mov	r0, r2
   10d3e:	mov	r1, r3
   10d40:	b.n	10cc6 <_strtoll_l.isra.0+0x12a>
   10d42:	movs	r6, #16
   10d44:	movs	r7, #0
   10d46:	b.n	10c0c <_strtoll_l.isra.0+0x70>

00010d48 <_strtoll_r>:
   10d48:	push	{r4, r5, lr}
   10d4a:	ldr	r4, [pc, #24]	; (10d64 <_strtoll_r+0x1c>)
   10d4c:	ldr	r5, [pc, #24]	; (10d68 <_strtoll_r+0x20>)
   10d4e:	ldr	r4, [r4, #0]
   10d50:	ldr	r4, [r4, #52]	; 0x34
   10d52:	sub	sp, #12
   10d54:	cmp	r4, #0
   10d56:	it	eq
   10d58:	moveq	r4, r5
   10d5a:	str	r4, [sp, #0]
   10d5c:	bl	10b9c <_strtoll_l.isra.0>
   10d60:	add	sp, #12
   10d62:	pop	{r4, r5, pc}
   10d64:	.word	0x20001dd8
   10d68:	.word	0x2000185c

00010d6c <_strtoul_l.isra.0>:
   10d6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d70:	ldr.w	r9, [sp, #40]	; 0x28
   10d74:	mov	r6, r1
   10d76:	mov	r7, r0
   10d78:	mov	r5, r2
   10d7a:	mov	r8, r3
   10d7c:	mov	fp, r1
   10d7e:	b.n	10d82 <_strtoul_l.isra.0+0x16>
   10d80:	mov	fp, r4
   10d82:	mov	r4, fp
   10d84:	mov	r0, r9
   10d86:	ldrb.w	sl, [r4], #1
   10d8a:	bl	a6e0 <__locale_ctype_ptr_l>
   10d8e:	add	r0, sl
   10d90:	ldrb	r0, [r0, #1]
   10d92:	and.w	r0, r0, #8
   10d96:	and.w	ip, r0, #255	; 0xff
   10d9a:	cmp	r0, #0
   10d9c:	bne.n	10d80 <_strtoul_l.isra.0+0x14>
   10d9e:	mov	r1, sl
   10da0:	cmp	r1, #45	; 0x2d
   10da2:	beq.n	10e68 <_strtoul_l.isra.0+0xfc>
   10da4:	cmp	r1, #43	; 0x2b
   10da6:	itt	eq
   10da8:	ldrbeq.w	r1, [fp, #1]
   10dac:	addeq.w	r4, fp, #2
   10db0:	cmp.w	r8, #0
   10db4:	beq.n	10dd0 <_strtoul_l.isra.0+0x64>
   10db6:	cmp.w	r8, #16
   10dba:	beq.n	10e76 <_strtoul_l.isra.0+0x10a>
   10dbc:	mov.w	r3, #4294967295
   10dc0:	udiv	r3, r3, r8
   10dc4:	mul.w	sl, r8, r3
   10dc8:	mvn.w	sl, sl
   10dcc:	mov	r9, r8
   10dce:	b.n	10de0 <_strtoul_l.isra.0+0x74>
   10dd0:	cmp	r1, #48	; 0x30
   10dd2:	beq.n	10e98 <_strtoul_l.isra.0+0x12c>
   10dd4:	mov.w	r8, #10
   10dd8:	ldr	r3, [pc, #244]	; (10ed0 <_strtoul_l.isra.0+0x164>)
   10dda:	mov	r9, r8
   10ddc:	mov.w	sl, #5
   10de0:	mov.w	lr, #0
   10de4:	mov	r0, lr
   10de6:	b.n	10df6 <_strtoul_l.isra.0+0x8a>
   10de8:	beq.n	10e4a <_strtoul_l.isra.0+0xde>
   10dea:	mla	r0, r9, r0, r2
   10dee:	mov.w	lr, #1
   10df2:	ldrb.w	r1, [r4], #1
   10df6:	sub.w	r2, r1, #48	; 0x30
   10dfa:	cmp	r2, #9
   10dfc:	bls.n	10e0a <_strtoul_l.isra.0+0x9e>
   10dfe:	sub.w	r2, r1, #65	; 0x41
   10e02:	cmp	r2, #25
   10e04:	bhi.n	10e1e <_strtoul_l.isra.0+0xb2>
   10e06:	sub.w	r2, r1, #55	; 0x37
   10e0a:	cmp	r8, r2
   10e0c:	ble.n	10e2e <_strtoul_l.isra.0+0xc2>
   10e0e:	cmp.w	lr, #4294967295
   10e12:	beq.n	10df2 <_strtoul_l.isra.0+0x86>
   10e14:	cmp	r0, r3
   10e16:	bls.n	10de8 <_strtoul_l.isra.0+0x7c>
   10e18:	mov.w	lr, #4294967295
   10e1c:	b.n	10df2 <_strtoul_l.isra.0+0x86>
   10e1e:	sub.w	r2, r1, #97	; 0x61
   10e22:	cmp	r2, #25
   10e24:	bhi.n	10e2e <_strtoul_l.isra.0+0xc2>
   10e26:	sub.w	r2, r1, #87	; 0x57
   10e2a:	cmp	r8, r2
   10e2c:	bgt.n	10e0e <_strtoul_l.isra.0+0xa2>
   10e2e:	cmp.w	lr, #4294967295
   10e32:	beq.n	10e58 <_strtoul_l.isra.0+0xec>
   10e34:	cmp.w	ip, #0
   10e38:	beq.n	10e3c <_strtoul_l.isra.0+0xd0>
   10e3a:	negs	r0, r0
   10e3c:	cbz	r5, 10e54 <_strtoul_l.isra.0+0xe8>
   10e3e:	cmp.w	lr, #0
   10e42:	bne.n	10e60 <_strtoul_l.isra.0+0xf4>
   10e44:	str	r6, [r5, #0]
   10e46:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e4a:	cmp	r2, sl
   10e4c:	ble.n	10dea <_strtoul_l.isra.0+0x7e>
   10e4e:	mov.w	lr, #4294967295
   10e52:	b.n	10df2 <_strtoul_l.isra.0+0x86>
   10e54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e58:	movs	r3, #34	; 0x22
   10e5a:	str	r3, [r7, #0]
   10e5c:	mov	r0, lr
   10e5e:	cbz	r5, 10eb2 <_strtoul_l.isra.0+0x146>
   10e60:	subs	r6, r4, #1
   10e62:	str	r6, [r5, #0]
   10e64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e68:	add.w	r4, fp, #2
   10e6c:	ldrb.w	r1, [fp, #1]
   10e70:	mov.w	ip, #1
   10e74:	b.n	10db0 <_strtoul_l.isra.0+0x44>
   10e76:	cmp	r1, #48	; 0x30
   10e78:	bne.n	10eb6 <_strtoul_l.isra.0+0x14a>
   10e7a:	ldrb	r3, [r4, #0]
   10e7c:	and.w	r3, r3, #223	; 0xdf
   10e80:	cmp	r3, #88	; 0x58
   10e82:	bne.n	10ec2 <_strtoul_l.isra.0+0x156>
   10e84:	mov.w	r9, #16
   10e88:	ldrb	r1, [r4, #1]
   10e8a:	mov	r8, r9
   10e8c:	mov.w	sl, #15
   10e90:	adds	r4, #2
   10e92:	mvn.w	r3, #4026531840	; 0xf0000000
   10e96:	b.n	10de0 <_strtoul_l.isra.0+0x74>
   10e98:	ldrb	r3, [r4, #0]
   10e9a:	and.w	r3, r3, #223	; 0xdf
   10e9e:	cmp	r3, #88	; 0x58
   10ea0:	beq.n	10e84 <_strtoul_l.isra.0+0x118>
   10ea2:	mov.w	r8, #8
   10ea6:	mov	r9, r8
   10ea8:	mov.w	sl, #7
   10eac:	mvn.w	r3, #3758096384	; 0xe0000000
   10eb0:	b.n	10de0 <_strtoul_l.isra.0+0x74>
   10eb2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eb6:	mov.w	sl, #15
   10eba:	mvn.w	r3, #4026531840	; 0xf0000000
   10ebe:	mov	r9, r8
   10ec0:	b.n	10de0 <_strtoul_l.isra.0+0x74>
   10ec2:	mov	r9, r8
   10ec4:	mov.w	sl, #15
   10ec8:	mvn.w	r3, #4026531840	; 0xf0000000
   10ecc:	b.n	10de0 <_strtoul_l.isra.0+0x74>
   10ece:	nop
   10ed0:	.word	0x19999999

00010ed4 <_strtoul_r>:
   10ed4:	push	{r4, r5, lr}
   10ed6:	ldr	r4, [pc, #24]	; (10ef0 <_strtoul_r+0x1c>)
   10ed8:	ldr	r5, [pc, #24]	; (10ef4 <_strtoul_r+0x20>)
   10eda:	ldr	r4, [r4, #0]
   10edc:	ldr	r4, [r4, #52]	; 0x34
   10ede:	sub	sp, #12
   10ee0:	cmp	r4, #0
   10ee2:	it	eq
   10ee4:	moveq	r4, r5
   10ee6:	str	r4, [sp, #0]
   10ee8:	bl	10d6c <_strtoul_l.isra.0>
   10eec:	add	sp, #12
   10eee:	pop	{r4, r5, pc}
   10ef0:	.word	0x20001dd8
   10ef4:	.word	0x2000185c

00010ef8 <_strtoull_l.isra.0>:
   10ef8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10efc:	sub	sp, #20
   10efe:	mov	fp, r1
   10f00:	str	r0, [sp, #8]
   10f02:	mov	r7, r2
   10f04:	mov	r6, r3
   10f06:	mov	r8, r1
   10f08:	ldr	r4, [sp, #56]	; 0x38
   10f0a:	b.n	10f0e <_strtoull_l.isra.0+0x16>
   10f0c:	mov	r8, r5
   10f0e:	mov	r5, r8
   10f10:	mov	r0, r4
   10f12:	ldrb.w	r9, [r5], #1
   10f16:	bl	a6e0 <__locale_ctype_ptr_l>
   10f1a:	add	r0, r9
   10f1c:	ldrb	r3, [r0, #1]
   10f1e:	and.w	r3, r3, #8
   10f22:	and.w	r2, r3, #255	; 0xff
   10f26:	cmp	r3, #0
   10f28:	bne.n	10f0c <_strtoull_l.isra.0+0x14>
   10f2a:	mov	r4, r9
   10f2c:	cmp	r4, #45	; 0x2d
   10f2e:	beq.w	1104a <_strtoull_l.isra.0+0x152>
   10f32:	cmp	r4, #43	; 0x2b
   10f34:	it	eq
   10f36:	ldrbeq.w	r4, [r8, #1]
   10f3a:	str	r2, [sp, #4]
   10f3c:	it	eq
   10f3e:	addeq.w	r5, r8, #2
   10f42:	cbz	r6, 10f7c <_strtoull_l.isra.0+0x84>
   10f44:	cmp	r6, #16
   10f46:	beq.w	11058 <_strtoull_l.isra.0+0x160>
   10f4a:	mov.w	r9, r6, asr #31
   10f4e:	mov	r2, r6
   10f50:	mov	r3, r9
   10f52:	mov.w	r0, #4294967295
   10f56:	mov.w	r1, #4294967295
   10f5a:	bl	a32c <__aeabi_uldivmod>
   10f5e:	mov	r2, r6
   10f60:	str	r0, [sp, #12]
   10f62:	mov	sl, r1
   10f64:	mov	r3, r9
   10f66:	mov.w	r0, #4294967295
   10f6a:	mov.w	r1, #4294967295
   10f6e:	bl	a32c <__aeabi_uldivmod>
   10f72:	mov	r8, r6
   10f74:	mov	lr, r2
   10f76:	ldr	r2, [sp, #12]
   10f78:	mov	r3, sl
   10f7a:	b.n	10f96 <_strtoull_l.isra.0+0x9e>
   10f7c:	cmp	r4, #48	; 0x30
   10f7e:	beq.w	11084 <_strtoull_l.isra.0+0x18c>
   10f82:	ldr	r3, [pc, #348]	; (110e0 <_strtoull_l.isra.0+0x1e8>)
   10f84:	mov.w	lr, #5
   10f88:	mov.w	r2, #2576980377	; 0x99999999
   10f8c:	mov.w	r8, #10
   10f90:	mov.w	r9, #0
   10f94:	movs	r6, #10
   10f96:	mov.w	ip, #0
   10f9a:	movs	r0, #0
   10f9c:	movs	r1, #0
   10f9e:	b.n	10fc6 <_strtoull_l.isra.0+0xce>
   10fa0:	cmp	r1, r3
   10fa2:	it	eq
   10fa4:	cmpeq	r0, r2
   10fa6:	beq.n	1102a <_strtoull_l.isra.0+0x132>
   10fa8:	mul.w	r4, r0, r9
   10fac:	mla	r4, r8, r1, r4
   10fb0:	umull	r0, r1, r0, r8
   10fb4:	add	r1, r4
   10fb6:	adds.w	r0, r0, sl
   10fba:	adc.w	r1, r1, sl, asr #31
   10fbe:	mov.w	ip, #1
   10fc2:	ldrb.w	r4, [r5], #1
   10fc6:	sub.w	sl, r4, #48	; 0x30
   10fca:	cmp.w	sl, #9
   10fce:	bls.n	10fde <_strtoull_l.isra.0+0xe6>
   10fd0:	sub.w	sl, r4, #65	; 0x41
   10fd4:	cmp.w	sl, #25
   10fd8:	bhi.n	10ff6 <_strtoull_l.isra.0+0xfe>
   10fda:	sub.w	sl, r4, #55	; 0x37
   10fde:	cmp	r6, sl
   10fe0:	ble.n	11008 <_strtoull_l.isra.0+0x110>
   10fe2:	cmp.w	ip, #4294967295
   10fe6:	beq.n	10fc2 <_strtoull_l.isra.0+0xca>
   10fe8:	cmp	r3, r1
   10fea:	it	eq
   10fec:	cmpeq	r2, r0
   10fee:	bcs.n	10fa0 <_strtoull_l.isra.0+0xa8>
   10ff0:	mov.w	ip, #4294967295
   10ff4:	b.n	10fc2 <_strtoull_l.isra.0+0xca>
   10ff6:	sub.w	sl, r4, #97	; 0x61
   10ffa:	cmp.w	sl, #25
   10ffe:	bhi.n	11008 <_strtoull_l.isra.0+0x110>
   11000:	sub.w	sl, r4, #87	; 0x57
   11004:	cmp	r6, sl
   11006:	bgt.n	10fe2 <_strtoull_l.isra.0+0xea>
   11008:	cmp.w	ip, #4294967295
   1100c:	beq.n	11034 <_strtoull_l.isra.0+0x13c>
   1100e:	ldr	r3, [sp, #4]
   11010:	cbz	r3, 11018 <_strtoull_l.isra.0+0x120>
   11012:	negs	r0, r0
   11014:	sbc.w	r1, r1, r1, lsl #1
   11018:	cbz	r7, 11024 <_strtoull_l.isra.0+0x12c>
   1101a:	cmp.w	ip, #0
   1101e:	bne.n	11046 <_strtoull_l.isra.0+0x14e>
   11020:	mov	r5, fp
   11022:	str	r5, [r7, #0]
   11024:	add	sp, #20
   11026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1102a:	cmp	sl, lr
   1102c:	ble.n	10fa8 <_strtoull_l.isra.0+0xb0>
   1102e:	mov.w	ip, #4294967295
   11032:	b.n	10fc2 <_strtoull_l.isra.0+0xca>
   11034:	ldr	r2, [sp, #8]
   11036:	movs	r3, #34	; 0x22
   11038:	str	r3, [r2, #0]
   1103a:	mov.w	r0, #4294967295
   1103e:	mov.w	r1, #4294967295
   11042:	cmp	r7, #0
   11044:	beq.n	11024 <_strtoull_l.isra.0+0x12c>
   11046:	subs	r5, #1
   11048:	b.n	11022 <_strtoull_l.isra.0+0x12a>
   1104a:	movs	r3, #1
   1104c:	add.w	r5, r8, #2
   11050:	ldrb.w	r4, [r8, #1]
   11054:	str	r3, [sp, #4]
   11056:	b.n	10f42 <_strtoull_l.isra.0+0x4a>
   11058:	cmp	r4, #48	; 0x30
   1105a:	bne.n	110a6 <_strtoull_l.isra.0+0x1ae>
   1105c:	ldrb	r3, [r5, #0]
   1105e:	and.w	r3, r3, #223	; 0xdf
   11062:	cmp	r3, #88	; 0x58
   11064:	bne.n	110bc <_strtoull_l.isra.0+0x1c4>
   11066:	mov.w	r3, #4294967295
   1106a:	ldrb	r4, [r5, #1]
   1106c:	str	r3, [sp, #12]
   1106e:	mov.w	lr, #15
   11072:	adds	r5, #2
   11074:	mvn.w	sl, #4026531840	; 0xf0000000
   11078:	mov.w	r8, #16
   1107c:	mov.w	r9, #0
   11080:	movs	r6, #16
   11082:	b.n	10f76 <_strtoull_l.isra.0+0x7e>
   11084:	ldrb	r3, [r5, #0]
   11086:	and.w	r3, r3, #223	; 0xdf
   1108a:	cmp	r3, #88	; 0x58
   1108c:	beq.n	11066 <_strtoull_l.isra.0+0x16e>
   1108e:	mov.w	lr, #7
   11092:	mov.w	r2, #4294967295
   11096:	mvn.w	r3, #3758096384	; 0xe0000000
   1109a:	mov.w	r8, #8
   1109e:	mov.w	r9, #0
   110a2:	movs	r6, #8
   110a4:	b.n	10f96 <_strtoull_l.isra.0+0x9e>
   110a6:	mov.w	lr, #15
   110aa:	mov.w	r2, #4294967295
   110ae:	mvn.w	r3, #4026531840	; 0xf0000000
   110b2:	mov.w	r8, #16
   110b6:	mov.w	r9, #0
   110ba:	b.n	10f96 <_strtoull_l.isra.0+0x9e>
   110bc:	mov.w	r8, #16
   110c0:	mov.w	r9, #0
   110c4:	mov	r2, r8
   110c6:	mov	r3, r9
   110c8:	mov.w	r0, #4294967295
   110cc:	mov.w	r1, #4294967295
   110d0:	bl	a32c <__aeabi_uldivmod>
   110d4:	mvn.w	r3, #4026531840	; 0xf0000000
   110d8:	mov	lr, r2
   110da:	mov.w	r2, #4294967295
   110de:	b.n	10f96 <_strtoull_l.isra.0+0x9e>
   110e0:	.word	0x19999999

000110e4 <_strtoull_r>:
   110e4:	push	{r4, r5, lr}
   110e6:	ldr	r4, [pc, #24]	; (11100 <_strtoull_r+0x1c>)
   110e8:	ldr	r5, [pc, #24]	; (11104 <_strtoull_r+0x20>)
   110ea:	ldr	r4, [r4, #0]
   110ec:	ldr	r4, [r4, #52]	; 0x34
   110ee:	sub	sp, #12
   110f0:	cmp	r4, #0
   110f2:	it	eq
   110f4:	moveq	r4, r5
   110f6:	str	r4, [sp, #0]
   110f8:	bl	10ef8 <_strtoull_l.isra.0>
   110fc:	add	sp, #12
   110fe:	pop	{r4, r5, pc}
   11100:	.word	0x20001dd8
   11104:	.word	0x2000185c

00011108 <__ssprint_r>:
   11108:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110c:	ldr	r3, [r2, #8]
   1110e:	sub	sp, #12
   11110:	mov	r8, r2
   11112:	cmp	r3, #0
   11114:	beq.n	111fc <__ssprint_r+0xf4>
   11116:	mov	fp, r0
   11118:	mov.w	r9, #0
   1111c:	ldr	r6, [r2, #0]
   1111e:	ldr	r0, [r1, #0]
   11120:	ldr	r3, [r1, #8]
   11122:	mov	r5, r1
   11124:	mov	r4, r9
   11126:	cmp	r4, #0
   11128:	beq.n	111b6 <__ssprint_r+0xae>
   1112a:	cmp	r4, r3
   1112c:	mov	r7, r3
   1112e:	mov	sl, r3
   11130:	bcc.n	111c0 <__ssprint_r+0xb8>
   11132:	ldrh	r3, [r5, #12]
   11134:	tst.w	r3, #1152	; 0x480
   11138:	beq.n	11196 <__ssprint_r+0x8e>
   1113a:	ldr	r7, [r5, #20]
   1113c:	ldr	r1, [r5, #16]
   1113e:	add.w	r7, r7, r7, lsl #1
   11142:	rsb	sl, r1, r0
   11146:	add.w	r7, r7, r7, lsr #31
   1114a:	adds	r0, r4, #1
   1114c:	asrs	r7, r7, #1
   1114e:	add	r0, sl
   11150:	cmp	r0, r7
   11152:	mov	r2, r7
   11154:	itt	hi
   11156:	movhi	r7, r0
   11158:	movhi	r2, r7
   1115a:	lsls	r3, r3, #21
   1115c:	bpl.n	111c6 <__ssprint_r+0xbe>
   1115e:	mov	r1, r2
   11160:	mov	r0, fp
   11162:	bl	a71c <_malloc_r>
   11166:	cmp	r0, #0
   11168:	beq.n	111da <__ssprint_r+0xd2>
   1116a:	mov	r2, sl
   1116c:	ldr	r1, [r5, #16]
   1116e:	str	r0, [sp, #4]
   11170:	bl	87a4 <memcpy>
   11174:	ldrh	r2, [r5, #12]
   11176:	ldr	r3, [sp, #4]
   11178:	bic.w	r2, r2, #1152	; 0x480
   1117c:	orr.w	r2, r2, #128	; 0x80
   11180:	strh	r2, [r5, #12]
   11182:	rsb	r2, sl, r7
   11186:	add.w	r0, r3, sl
   1118a:	str	r7, [r5, #20]
   1118c:	str	r3, [r5, #16]
   1118e:	str	r0, [r5, #0]
   11190:	str	r2, [r5, #8]
   11192:	mov	r7, r4
   11194:	mov	sl, r4
   11196:	mov	r2, sl
   11198:	mov	r1, r9
   1119a:	bl	adc4 <memmove>
   1119e:	ldr.w	r2, [r8, #8]
   111a2:	ldr	r3, [r5, #8]
   111a4:	ldr	r0, [r5, #0]
   111a6:	subs	r3, r3, r7
   111a8:	add	r0, sl
   111aa:	subs	r4, r2, r4
   111ac:	str	r3, [r5, #8]
   111ae:	str	r0, [r5, #0]
   111b0:	str.w	r4, [r8, #8]
   111b4:	cbz	r4, 111fc <__ssprint_r+0xf4>
   111b6:	ldr.w	r9, [r6]
   111ba:	ldr	r4, [r6, #4]
   111bc:	adds	r6, #8
   111be:	b.n	11126 <__ssprint_r+0x1e>
   111c0:	mov	r7, r4
   111c2:	mov	sl, r4
   111c4:	b.n	11196 <__ssprint_r+0x8e>
   111c6:	mov	r0, fp
   111c8:	bl	ae94 <_realloc_r>
   111cc:	mov	r3, r0
   111ce:	cmp	r0, #0
   111d0:	bne.n	11182 <__ssprint_r+0x7a>
   111d2:	ldr	r1, [r5, #16]
   111d4:	mov	r0, fp
   111d6:	bl	f868 <_free_r>
   111da:	movs	r3, #12
   111dc:	str.w	r3, [fp]
   111e0:	ldrh	r3, [r5, #12]
   111e2:	movs	r2, #0
   111e4:	orr.w	r3, r3, #64	; 0x40
   111e8:	mov.w	r0, #4294967295
   111ec:	strh	r3, [r5, #12]
   111ee:	str.w	r2, [r8, #8]
   111f2:	str.w	r2, [r8, #4]
   111f6:	add	sp, #12
   111f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111fc:	movs	r0, #0
   111fe:	str.w	r0, [r8, #4]
   11202:	add	sp, #12
   11204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011208 <_sungetc_r>:
   11208:	adds	r3, r1, #1
   1120a:	push	{r4, r5, r6, lr}
   1120c:	beq.n	11246 <_sungetc_r+0x3e>
   1120e:	ldrh	r3, [r2, #12]
   11210:	ldr	r4, [r2, #48]	; 0x30
   11212:	bic.w	r3, r3, #32
   11216:	strh	r3, [r2, #12]
   11218:	uxtb	r5, r1
   1121a:	cbz	r4, 1124c <_sungetc_r+0x44>
   1121c:	mov	r4, r2
   1121e:	ldr	r2, [r2, #4]
   11220:	ldr	r3, [r4, #52]	; 0x34
   11222:	cmp	r2, r3
   11224:	mov	r6, r1
   11226:	bge.n	1123c <_sungetc_r+0x34>
   11228:	ldr	r3, [r4, #0]
   1122a:	subs	r2, r3, #1
   1122c:	str	r2, [r4, #0]
   1122e:	strb.w	r6, [r3, #-1]
   11232:	ldr	r3, [r4, #4]
   11234:	adds	r3, #1
   11236:	str	r3, [r4, #4]
   11238:	mov	r0, r5
   1123a:	pop	{r4, r5, r6, pc}
   1123c:	mov	r1, r4
   1123e:	bl	1134c <__submore>
   11242:	cmp	r0, #0
   11244:	beq.n	11228 <_sungetc_r+0x20>
   11246:	mov.w	r5, #4294967295
   1124a:	b.n	11238 <_sungetc_r+0x30>
   1124c:	ldr	r0, [r2, #16]
   1124e:	ldr	r3, [r2, #0]
   11250:	cbz	r0, 1125e <_sungetc_r+0x56>
   11252:	cmp	r0, r3
   11254:	bcs.n	1125e <_sungetc_r+0x56>
   11256:	ldrb.w	r0, [r3, #-1]
   1125a:	cmp	r5, r0
   1125c:	beq.n	1127e <_sungetc_r+0x76>
   1125e:	str	r3, [r2, #56]	; 0x38
   11260:	mov	r3, r2
   11262:	ldr	r6, [r2, #4]
   11264:	str	r6, [r2, #60]	; 0x3c
   11266:	add.w	r4, r2, #64	; 0x40
   1126a:	movs	r0, #3
   1126c:	str	r0, [r2, #52]	; 0x34
   1126e:	str	r4, [r2, #48]	; 0x30
   11270:	strb.w	r1, [r3, #66]!
   11274:	movs	r1, #1
   11276:	str	r3, [r2, #0]
   11278:	str	r1, [r2, #4]
   1127a:	mov	r0, r5
   1127c:	pop	{r4, r5, r6, pc}
   1127e:	ldr	r1, [r2, #4]
   11280:	subs	r3, #1
   11282:	adds	r1, #1
   11284:	str	r3, [r2, #0]
   11286:	str	r1, [r2, #4]
   11288:	b.n	11238 <_sungetc_r+0x30>
   1128a:	nop

0001128c <__ssrefill_r>:
   1128c:	push	{r4, lr}
   1128e:	mov	r4, r1
   11290:	ldr	r1, [r1, #48]	; 0x30
   11292:	cbz	r1, 112b0 <__ssrefill_r+0x24>
   11294:	add.w	r3, r4, #64	; 0x40
   11298:	cmp	r1, r3
   1129a:	beq.n	112a0 <__ssrefill_r+0x14>
   1129c:	bl	f868 <_free_r>
   112a0:	ldr	r3, [r4, #60]	; 0x3c
   112a2:	str	r3, [r4, #4]
   112a4:	movs	r0, #0
   112a6:	str	r0, [r4, #48]	; 0x30
   112a8:	cbz	r3, 112b0 <__ssrefill_r+0x24>
   112aa:	ldr	r3, [r4, #56]	; 0x38
   112ac:	str	r3, [r4, #0]
   112ae:	pop	{r4, pc}
   112b0:	ldrh	r3, [r4, #12]
   112b2:	ldr	r2, [r4, #16]
   112b4:	str	r2, [r4, #0]
   112b6:	orr.w	r3, r3, #32
   112ba:	movs	r2, #0
   112bc:	strh	r3, [r4, #12]
   112be:	str	r2, [r4, #4]
   112c0:	mov.w	r0, #4294967295
   112c4:	pop	{r4, pc}
   112c6:	nop

000112c8 <_sfread_r>:
   112c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112cc:	sub	sp, #12
   112ce:	mul.w	r9, r2, r3
   112d2:	str	r2, [sp, #4]
   112d4:	mov	sl, r3
   112d6:	ldr	r4, [sp, #48]	; 0x30
   112d8:	cmp.w	r9, #0
   112dc:	beq.n	11332 <_sfread_r+0x6a>
   112de:	mov	r7, r0
   112e0:	mov	r6, r1
   112e2:	mov	r5, r9
   112e4:	mov.w	r8, #0
   112e8:	b.n	1130a <_sfread_r+0x42>
   112ea:	ldr	r1, [r4, #0]
   112ec:	bl	87a4 <memcpy>
   112f0:	ldr	r2, [r4, #0]
   112f2:	str.w	r8, [r4, #4]
   112f6:	add	r2, fp
   112f8:	str	r2, [r4, #0]
   112fa:	mov	r1, r4
   112fc:	mov	r0, r7
   112fe:	add	r6, fp
   11300:	rsb	r5, fp, r5
   11304:	bl	1128c <__ssrefill_r>
   11308:	cbnz	r0, 1133a <_sfread_r+0x72>
   1130a:	ldr.w	fp, [r4, #4]
   1130e:	cmp	r5, fp
   11310:	mov	r0, r6
   11312:	mov	r2, fp
   11314:	bhi.n	112ea <_sfread_r+0x22>
   11316:	mov	r2, r5
   11318:	ldr	r1, [r4, #0]
   1131a:	bl	87a4 <memcpy>
   1131e:	ldr	r2, [r4, #4]
   11320:	ldr	r3, [r4, #0]
   11322:	subs	r2, r2, r5
   11324:	add	r3, r5
   11326:	mov	r0, sl
   11328:	str	r2, [r4, #4]
   1132a:	str	r3, [r4, #0]
   1132c:	add	sp, #12
   1132e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11332:	mov	r0, r9
   11334:	add	sp, #12
   11336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1133a:	ldr	r3, [sp, #4]
   1133c:	rsb	r9, r5, r9
   11340:	udiv	r0, r9, r3
   11344:	add	sp, #12
   11346:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1134a:	nop

0001134c <__submore>:
   1134c:	add.w	r3, r1, #64	; 0x40
   11350:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11354:	mov	r4, r1
   11356:	ldr	r1, [r1, #48]	; 0x30
   11358:	cmp	r1, r3
   1135a:	beq.n	11386 <__submore+0x3a>
   1135c:	ldr	r6, [r4, #52]	; 0x34
   1135e:	lsls	r7, r6, #1
   11360:	mov	r2, r7
   11362:	bl	ae94 <_realloc_r>
   11366:	mov	r5, r0
   11368:	cbz	r0, 113bc <__submore+0x70>
   1136a:	add.w	r8, r0, r6
   1136e:	mov	r2, r6
   11370:	mov	r0, r8
   11372:	mov	r1, r5
   11374:	bl	87a4 <memcpy>
   11378:	str.w	r8, [r4]
   1137c:	str	r5, [r4, #48]	; 0x30
   1137e:	str	r7, [r4, #52]	; 0x34
   11380:	movs	r0, #0
   11382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11386:	mov.w	r1, #1024	; 0x400
   1138a:	bl	a71c <_malloc_r>
   1138e:	cbz	r0, 113bc <__submore+0x70>
   11390:	ldrb.w	r3, [r4, #66]	; 0x42
   11394:	str	r0, [r4, #48]	; 0x30
   11396:	mov.w	r2, #1024	; 0x400
   1139a:	str	r2, [r4, #52]	; 0x34
   1139c:	strb.w	r3, [r0, #1023]	; 0x3ff
   113a0:	ldrb.w	r3, [r4, #65]	; 0x41
   113a4:	strb.w	r3, [r0, #1022]	; 0x3fe
   113a8:	ldrb.w	r3, [r4, #64]	; 0x40
   113ac:	strb.w	r3, [r0, #1021]	; 0x3fd
   113b0:	addw	r0, r0, #1021	; 0x3fd
   113b4:	str	r0, [r4, #0]
   113b6:	movs	r0, #0
   113b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113bc:	mov.w	r0, #4294967295
   113c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000113c4 <_vasnprintf_r>:
   113c4:	push	{r4, r5, r6, lr}
   113c6:	mov	r5, r2
   113c8:	sub	sp, #104	; 0x68
   113ca:	ldr	r4, [r2, #0]
   113cc:	cbz	r1, 113d2 <_vasnprintf_r+0xe>
   113ce:	cmp	r4, #0
   113d0:	bne.n	11408 <_vasnprintf_r+0x44>
   113d2:	movs	r4, #0
   113d4:	mov.w	r2, #648	; 0x288
   113d8:	strh.w	r2, [sp, #12]
   113dc:	str	r4, [sp, #0]
   113de:	str	r4, [sp, #16]
   113e0:	mov	r2, r3
   113e2:	movw	r6, #65535	; 0xffff
   113e6:	ldr	r3, [sp, #120]	; 0x78
   113e8:	str	r4, [sp, #8]
   113ea:	mov	r1, sp
   113ec:	str	r4, [sp, #20]
   113ee:	strh.w	r6, [sp, #14]
   113f2:	bl	c4e0 <_svfprintf_r>
   113f6:	cmp	r0, #0
   113f8:	blt.n	1141e <_vasnprintf_r+0x5a>
   113fa:	ldr	r3, [sp, #0]
   113fc:	str	r0, [r5, #0]
   113fe:	movs	r2, #0
   11400:	strb	r2, [r3, #0]
   11402:	ldr	r0, [sp, #16]
   11404:	add	sp, #104	; 0x68
   11406:	pop	{r4, r5, r6, pc}
   11408:	mov.w	r2, #1544	; 0x608
   1140c:	str	r1, [sp, #0]
   1140e:	str	r1, [sp, #16]
   11410:	strh.w	r2, [sp, #12]
   11414:	bge.n	113e0 <_vasnprintf_r+0x1c>
   11416:	movs	r3, #139	; 0x8b
   11418:	str	r3, [r0, #0]
   1141a:	movs	r0, #0
   1141c:	b.n	11404 <_vasnprintf_r+0x40>
   1141e:	movs	r0, #0
   11420:	b.n	11404 <_vasnprintf_r+0x40>
   11422:	nop

00011424 <_calloc_r>:
   11424:	push	{r4, lr}
   11426:	mul.w	r1, r2, r1
   1142a:	bl	a71c <_malloc_r>
   1142e:	mov	r4, r0
   11430:	cbz	r0, 1146a <_calloc_r+0x46>
   11432:	ldr.w	r2, [r0, #-4]
   11436:	bic.w	r2, r2, #3
   1143a:	subs	r2, #4
   1143c:	cmp	r2, #36	; 0x24
   1143e:	bhi.n	11472 <_calloc_r+0x4e>
   11440:	cmp	r2, #19
   11442:	bls.n	1146e <_calloc_r+0x4a>
   11444:	movs	r3, #0
   11446:	cmp	r2, #27
   11448:	str	r3, [r0, #0]
   1144a:	str	r3, [r0, #4]
   1144c:	bls.n	1147c <_calloc_r+0x58>
   1144e:	cmp	r2, #36	; 0x24
   11450:	str	r3, [r0, #8]
   11452:	str	r3, [r0, #12]
   11454:	iteee	ne
   11456:	addne.w	r2, r0, #16
   1145a:	streq	r3, [r0, #16]
   1145c:	streq	r3, [r0, #20]
   1145e:	addeq.w	r2, r0, #24
   11462:	movs	r3, #0
   11464:	str	r3, [r2, #0]
   11466:	str	r3, [r2, #4]
   11468:	str	r3, [r2, #8]
   1146a:	mov	r0, r4
   1146c:	pop	{r4, pc}
   1146e:	mov	r2, r0
   11470:	b.n	11462 <_calloc_r+0x3e>
   11472:	movs	r1, #0
   11474:	bl	8760 <memset>
   11478:	mov	r0, r4
   1147a:	pop	{r4, pc}
   1147c:	add.w	r2, r0, #8
   11480:	b.n	11462 <_calloc_r+0x3e>
   11482:	nop
   11484:	movs	r0, r0
	...

00011488 <___init_veneer>:
   11488:	ldr.w	pc, [pc]	; 1148c <___init_veneer+0x4>
   1148c:	.word	0x60001b69

00011490 <___reboot_Teensyduino__veneer>:
   11490:	ldr.w	pc, [pc]	; 11494 <___reboot_Teensyduino__veneer+0x4>
   11494:	.word	0x6000186d

00011498 <___Z14set_audioClockilmb_veneer>:
   11498:	ldr.w	pc, [pc]	; 1149c <___Z14set_audioClockilmb_veneer+0x4>
   1149c:	.word	0x60001645

000114a0 <___ZN7TwoWire5beginEv_veneer>:
   114a0:	ldr.w	pc, [pc]	; 114a4 <___ZN7TwoWire5beginEv_veneer+0x4>
   114a4:	.word	0x600016e1
	...

Disassembly of section .fini:

000114b0 <_fini>:
   114b0:	push	{r3, r4, r5, r6, r7, lr}
   114b2:	nop

Disassembly of section .text.csf:

60015518 <_heap_end+0x3fd95518>:
60015518:	.word	0xffffffff
6001551c:	.word	0xffffffff
60015520:	.word	0xffffffff
60015524:	.word	0xffffffff
60015528:	.word	0xffffffff
6001552c:	.word	0xffffffff
60015530:	.word	0xffffffff
60015534:	.word	0xffffffff
60015538:	.word	0xffffffff
6001553c:	.word	0xffffffff
60015540:	.word	0xffffffff
60015544:	.word	0xffffffff
60015548:	.word	0xffffffff
6001554c:	.word	0xffffffff
60015550:	.word	0xffffffff
60015554:	.word	0xffffffff
60015558:	.word	0xffffffff
6001555c:	.word	0xffffffff
60015560:	.word	0xffffffff
60015564:	.word	0xffffffff
60015568:	.word	0xffffffff
6001556c:	.word	0xffffffff
60015570:	.word	0xffffffff
60015574:	.word	0xffffffff
60015578:	.word	0xffffffff
6001557c:	.word	0xffffffff
60015580:	.word	0xffffffff
60015584:	.word	0xffffffff
60015588:	.word	0xffffffff
6001558c:	.word	0xffffffff
60015590:	.word	0xffffffff
60015594:	.word	0xffffffff
60015598:	.word	0xffffffff
6001559c:	.word	0xffffffff
600155a0:	.word	0xffffffff
600155a4:	.word	0xffffffff
600155a8:	.word	0xffffffff
600155ac:	.word	0xffffffff
600155b0:	.word	0xffffffff
600155b4:	.word	0xffffffff
600155b8:	.word	0xffffffff
600155bc:	.word	0xffffffff
600155c0:	.word	0xffffffff
600155c4:	.word	0xffffffff
600155c8:	.word	0xffffffff
600155cc:	.word	0xffffffff
600155d0:	.word	0xffffffff
600155d4:	.word	0xffffffff
600155d8:	.word	0xffffffff
600155dc:	.word	0xffffffff
600155e0:	.word	0xffffffff
600155e4:	.word	0xffffffff
600155e8:	.word	0xffffffff
600155ec:	.word	0xffffffff
600155f0:	.word	0xffffffff
600155f4:	.word	0xffffffff
600155f8:	.word	0xffffffff
600155fc:	.word	0xffffffff
60015600:	.word	0xffffffff
60015604:	.word	0xffffffff
60015608:	.word	0xffffffff
6001560c:	.word	0xffffffff
60015610:	.word	0xffffffff
60015614:	.word	0xffffffff
60015618:	.word	0xffffffff
6001561c:	.word	0xffffffff
60015620:	.word	0xffffffff
60015624:	.word	0xffffffff
60015628:	.word	0xffffffff
6001562c:	.word	0xffffffff
60015630:	.word	0xffffffff
60015634:	.word	0xffffffff
60015638:	.word	0xffffffff
6001563c:	.word	0xffffffff
60015640:	.word	0xffffffff
60015644:	.word	0xffffffff
60015648:	.word	0xffffffff
6001564c:	.word	0xffffffff
60015650:	.word	0xffffffff
60015654:	.word	0xffffffff
60015658:	.word	0xffffffff
6001565c:	.word	0xffffffff
60015660:	.word	0xffffffff
60015664:	.word	0xffffffff
60015668:	.word	0xffffffff
6001566c:	.word	0xffffffff
60015670:	.word	0xffffffff
60015674:	.word	0xffffffff
60015678:	.word	0xffffffff
6001567c:	.word	0xffffffff
60015680:	.word	0xffffffff
60015684:	.word	0xffffffff
60015688:	.word	0xffffffff
6001568c:	.word	0xffffffff
60015690:	.word	0xffffffff
60015694:	.word	0xffffffff
60015698:	.word	0xffffffff
6001569c:	.word	0xffffffff
600156a0:	.word	0xffffffff
600156a4:	.word	0xffffffff
600156a8:	.word	0xffffffff
600156ac:	.word	0xffffffff
600156b0:	.word	0xffffffff
600156b4:	.word	0xffffffff
600156b8:	.word	0xffffffff
600156bc:	.word	0xffffffff
600156c0:	.word	0xffffffff
600156c4:	.word	0xffffffff
600156c8:	.word	0xffffffff
600156cc:	.word	0xffffffff
600156d0:	.word	0xffffffff
600156d4:	.word	0xffffffff
600156d8:	.word	0xffffffff
600156dc:	.word	0xffffffff
600156e0:	.word	0xffffffff
600156e4:	.word	0xffffffff
600156e8:	.word	0xffffffff
600156ec:	.word	0xffffffff
600156f0:	.word	0xffffffff
600156f4:	.word	0xffffffff
600156f8:	.word	0xffffffff
600156fc:	.word	0xffffffff
60015700:	.word	0xffffffff
60015704:	.word	0xffffffff
60015708:	.word	0xffffffff
6001570c:	.word	0xffffffff
60015710:	.word	0xffffffff
60015714:	.word	0xffffffff
60015718:	.word	0xffffffff
6001571c:	.word	0xffffffff
60015720:	.word	0xffffffff
60015724:	.word	0xffffffff
60015728:	.word	0xffffffff
6001572c:	.word	0xffffffff
60015730:	.word	0xffffffff
60015734:	.word	0xffffffff
60015738:	.word	0xffffffff
6001573c:	.word	0xffffffff
60015740:	.word	0xffffffff
60015744:	.word	0xffffffff
60015748:	.word	0xffffffff
6001574c:	.word	0xffffffff
60015750:	.word	0xffffffff
60015754:	.word	0xffffffff
60015758:	.word	0xffffffff
6001575c:	.word	0xffffffff
60015760:	.word	0xffffffff
60015764:	.word	0xffffffff
60015768:	.word	0xffffffff
6001576c:	.word	0xffffffff
60015770:	.word	0xffffffff
60015774:	.word	0xffffffff
60015778:	.word	0xffffffff
6001577c:	.word	0xffffffff
60015780:	.word	0xffffffff
60015784:	.word	0xffffffff
60015788:	.word	0xffffffff
6001578c:	.word	0xffffffff
60015790:	.word	0xffffffff
60015794:	.word	0xffffffff
60015798:	.word	0xffffffff
6001579c:	.word	0xffffffff
600157a0:	.word	0xffffffff
600157a4:	.word	0xffffffff
600157a8:	.word	0xffffffff
600157ac:	.word	0xffffffff
600157b0:	.word	0xffffffff
600157b4:	.word	0xffffffff
600157b8:	.word	0xffffffff
600157bc:	.word	0xffffffff
600157c0:	.word	0xffffffff
600157c4:	.word	0xffffffff
600157c8:	.word	0xffffffff
600157cc:	.word	0xffffffff
600157d0:	.word	0xffffffff
600157d4:	.word	0xffffffff
600157d8:	.word	0xffffffff
600157dc:	.word	0xffffffff
600157e0:	.word	0xffffffff
600157e4:	.word	0xffffffff
600157e8:	.word	0xffffffff
600157ec:	.word	0xffffffff
600157f0:	.word	0xffffffff
600157f4:	.word	0xffffffff
600157f8:	.word	0xffffffff
600157fc:	.word	0xffffffff

60015800 <hab_csf>:
	...
